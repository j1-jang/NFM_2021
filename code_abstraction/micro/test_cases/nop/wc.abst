Build cfg of: "report" (7 text sections remaining)
Calling "isword" but CFG not yet computed.
Delayed building cfg of: getword
Build cfg of: "isword" (6 text sections remaining)
Calling "getword" but CFG not yet computed.
Delayed building cfg of: counter
Calling "error_print" but CFG not yet computed.
Delayed building cfg of: perrf
Calling "counter" but CFG not yet computed.
Delayed building cfg of: main
Calling "error_print" but CFG not yet computed.
Delayed building cfg of: errf
Build cfg of: "error_print" (5 text sections remaining)
Build cfg of: "getword" (4 text sections remaining)
Calling "perrf" but CFG not yet computed.
Delayed building cfg of: counter
Build cfg of: "perrf" (3 text sections remaining)
Calling "counter" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "errf" (2 text sections remaining)
Build cfg of: "counter" (1 text sections remaining)
Build cfg of: "main" (0 text sections remaining)
Build cfg of: "report" (7 text sections remaining)
Calling "isword" but CFG not yet computed.
Delayed building cfg of: getword
Build cfg of: "isword" (6 text sections remaining)
Calling "getword" but CFG not yet computed.
Delayed building cfg of: counter
Calling "error_print" but CFG not yet computed.
Delayed building cfg of: perrf
Calling "counter" but CFG not yet computed.
Delayed building cfg of: main
Calling "error_print" but CFG not yet computed.
Delayed building cfg of: errf
Build cfg of: "error_print" (5 text sections remaining)
Build cfg of: "getword" (4 text sections remaining)
Calling "perrf" but CFG not yet computed.
Delayed building cfg of: counter
Build cfg of: "perrf" (3 text sections remaining)
Calling "counter" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "errf" (2 text sections remaining)
Build cfg of: "counter" (1 text sections remaining)
Build cfg of: "main" (0 text sections remaining)
(11,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
(11,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
Considering text section (0/8): "main"
--------
.dot code for CFG of text section main for Vanilla
diGraph main_Vanilla{
	main_0  [label="[main_276,main_277]"]
	main_1  [label="[main_278,main_278]"]
	main_2  [label="[main_285,main_287]"]
	main_3  [label="[main_288,main_288]"]
	main_4  [label="[main_289,main_292]"]
	main_5  [label="[main_296,main_299]"]
	main_6  [label="[main_300,main_300]"]
	main_7  [label="[.label_24,main_305]"]
	main_8  [label="[.label_26,main_295]"]
	main_9  [label="[.label_23,.label_23]"]
	main_10  [label="[.label_25,main_284]"]
	main_11  [label="[main,main_275]"]

	main_0 -> main_1;

	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_10;
	main_5 -> main_6;
	main_6 -> main_7;

	main_8 -> main_7 [label="ZF || SF != OF"];
	main_8 -> main_5 [label="!ZF && SF == OF"];
	main_9 -> main_10;
	main_10 -> main_8 [label="SF == OF"];
	main_10 -> main_2 [label="SF != OF"];
	main_11 -> main_9 [label="SF == OF"];
	main_11 -> main_0 [label="SF != OF"];
}
--------
--------
.dot code for CFG of text section main for Randomized
diGraph main_Randomized{
	main_0  [label="[main_400,main_401]"]
	main_1  [label="[main_402,main_402]"]
	main_2  [label="[main_410,main_414]"]
	main_3  [label="[main_415,main_415]"]
	main_4  [label="[main_416,main_421]"]
	main_5  [label="[main_426,main_434]"]
	main_6  [label="[main_435,main_435]"]
	main_7  [label="[.label_26,main_441]"]
	main_8  [label="[.label_24,main_425]"]
	main_9  [label="[.label_23,.label_23]"]
	main_10  [label="[.label_25,main_409]"]
	main_11  [label="[main,main_399]"]

	main_0 -> main_1;

	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_10;
	main_5 -> main_6;
	main_6 -> main_7;

	main_8 -> main_7 [label="ZF || SF != OF"];
	main_8 -> main_5 [label="!ZF && SF == OF"];
	main_9 -> main_10;
	main_10 -> main_8 [label="SF == OF"];
	main_10 -> main_2 [label="SF != OF"];
	main_11 -> main_9 [label="SF == OF"];
	main_11 -> main_0 [label="SF != OF"];
}
--------
Starting Node: 11

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 10, 5 ----> 6, 6 ----> 7, , 8 --ZF || SF != OF--> 7, 8 --!ZF && SF == OF--> 5, 9 ----> 10, 10 --SF == OF--> 8, 10 --SF != OF--> 2, 11 --SF == OF--> 9, 11 --SF != OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "main"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.3,8]
node 1:
RAX := errf@()
node 2:
RAX := sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + TakeBits: <63,0>((sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64) * Value: 8))),8]
node 3:
RAX := counter@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
[(Var: RSP0 - Value: 28),4] := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
node 5:
RCX := Dereference: [Var: total_lcount,8], RDX := Dereference: [Var: total_wcount,8], RDI := Dereference: [Var: .str.4,8], RSI := Dereference: [Var: total_ccount,8]
node 6:
RAX := report@()
node 7:
RAX := Value: 0
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2)
node 9:
[(Var: RSP0 - Value: 28),4] := Value: 1
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 28),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4])
node 11:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

Starting Node: 11

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 10, 5 ----> 6, 6 ----> 7, , 8 --ZF || SF != OF--> 7, 8 --!ZF && SF == OF--> 5, 9 ----> 10, 10 --SF == OF--> 8, 10 --SF != OF--> 2, 11 --SF == OF--> 9, 11 --SF != OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "main"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.3,8]
node 1:
RAX := errf@()
node 2:
RAX := sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + TakeBits: <63,0>((sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64) * Value: 8))),8]
node 3:
RAX := counter@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
[(Var: RSP0 - Value: 28),4] := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
node 5:
RCX := Dereference: [Var: total_lcount,8], RDX := Dereference: [Var: total_wcount,8], RDI := Dereference: [Var: .str.4,8], RSI := Dereference: [Var: total_ccount,8]
node 6:
RAX := report@()
node 7:
RAX := Value: 0
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2)
node 9:
[(Var: RSP0 - Value: 28),4] := Value: 1
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 28),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4])
node 11:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

same_behavior for the nodes: main -> main_275 and main -> main_399

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main -> main_275 and main -> main_399 have been verified to do the same.

same_behavior for the nodes: .label_23 -> .label_23 and .label_23 -> .label_23

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 28),4] := Value: 1

SB || [(Var: RSP0 - Value: 28),4] := Value: 1

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_23 -> .label_23 and .label_23 -> .label_23 have been verified to do the same.

same_behavior for the nodes: .label_25 -> main_284 and .label_25 -> main_409

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 28),4]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4])

SB || RAX := Dereference: [(Var: RSP0 - Value: 28),4]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Dereference: [(Var: RSP0 - Value: 16),4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_25 -> main_284 and .label_25 -> main_409 have been verified to do the same.

same_behavior for the nodes: .label_26 -> main_295 and .label_24 -> main_425

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),4],Value: 2)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_26 -> main_295 and .label_24 -> main_425 have been verified to do the same.

same_behavior for the nodes: .label_24 -> main_305 and .label_26 -> main_441

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Value: 0
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_24 -> main_305 and .label_26 -> main_441 have been verified to do the same.

same_behavior for the nodes: main_296 -> main_299 and main_426 -> main_434

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: total_lcount,8], RDX := Dereference: [Var: total_wcount,8], RDI := Dereference: [Var: .str.4,8], RSI := Dereference: [Var: total_ccount,8]

SB || RCX := Dereference: [Var: total_lcount,8], RDX := Dereference: [Var: total_wcount,8], RDI := Dereference: [Var: .str.4,8], RSI := Dereference: [Var: total_ccount,8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "total_lcount" 64) 8),(RDX,E_deref (E_var "total_wcount" 64) 8),(RDI,E_deref (E_var ".str.4" 64) 8),(RSI,E_deref (E_var "total_ccount" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "total_lcount" 64) 8),(RDX,E_deref (E_var "total_wcount" 64) 8),(RDI,E_deref (E_var ".str.4" 64) 8),(RSI,E_deref (E_var "total_ccount" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "total_lcount" 64) 8),(RDX,E_deref (E_var "total_wcount" 64) 8),(RDI,E_deref (E_var ".str.4" 64) 8),(RSI,E_deref (E_var "total_ccount" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "total_lcount" 64) 8),(RDX,E_deref (E_var "total_wcount" 64) 8),(RDI,E_deref (E_var ".str.4" 64) 8),(RSI,E_deref (E_var "total_ccount" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "total_lcount" 64) 8
Value B:
E_deref (E_var "total_lcount" 64) 8
Resulting values:
Value A:
E_deref (E_var "total_wcount" 64) 8
Value B:
E_deref (E_var "total_wcount" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str.4" 64) 8
Value B:
E_deref (E_var ".str.4" 64) 8
Resulting values:
Value A:
E_deref (E_var "total_ccount" 64) 8
Value B:
E_deref (E_var "total_ccount" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_296 -> main_299 and main_426 -> main_434 have been verified to do the same.

same_behavior for the nodes: main_300 -> main_300 and main_435 -> main_435

same_behavior checking these two SStates:

SA || RAX := report@()

SB || RAX := report@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "report" "") [])]
Resulting values:
Value A:
E_app (F2 "report" "") []
Value B:
E_app (F2 "report" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_300 -> main_300 and main_435 -> main_435 have been verified to do the same.

same_behavior for the nodes: main_285 -> main_287 and main_410 -> main_414

same_behavior checking these two SStates:

SA || RAX := sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + TakeBits: <63,0>((sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64) * Value: 8))),8]

SB || RAX := sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + TakeBits: <63,0>((sextend(Dereference: [(Var: RSP0 - Value: 28),4],32,64) * Value: 8))),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4],E_val 8 64]]]) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4],E_val 8 64]]]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4],E_val 8 64]]]) 8)]
Resulting values:
Value A:
E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
Value B:
E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4],E_val 8 64]]]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4],E_val 8 64]]]) 8
local_var_cmp called

local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_285 -> main_287 and main_410 -> main_414 have been verified to do the same.

same_behavior for the nodes: main_288 -> main_288 and main_415 -> main_415

same_behavior checking these two SStates:

SA || RAX := counter@()

SB || RAX := counter@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "counter" "") [])]
Resulting values:
Value A:
E_app (F2 "counter" "") []
Value B:
E_app (F2 "counter" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_288 -> main_288 and main_415 -> main_415 have been verified to do the same.

same_behavior for the nodes: main_289 -> main_292 and main_416 -> main_421

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
SA || [(Var: RSP0 - Value: 28),4] := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
SB || [(Var: RSP0 - Value: 28),4] := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 28),4] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 1 32]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 1 32]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 1 32]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 1 32]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 1 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main_289 -> main_292 and main_416 -> main_421 have been verified to do the same.

same_behavior for the nodes: main_276 -> main_277 and main_400 -> main_401

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.3,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.3,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.3" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.3" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var ".str.3" 64) 8
Value B:
E_deref (E_var ".str.3" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_276 -> main_277 and main_400 -> main_401 have been verified to do the same.

same_behavior for the nodes: main_278 -> main_278 and main_402 -> main_402

same_behavior checking these two SStates:

SA || RAX := errf@()

SB || RAX := errf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "errf" "") [])]
Resulting values:
Value A:
E_app (F2 "errf" "") []
Value B:
E_app (F2 "errf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_278 -> main_278 and main_402 -> main_402 have been verified to do the same.

Label relationship:
.str.3 <--> .str.3
 <--> 
total_ccount <--> total_ccount
.str.4 <--> .str.4
total_wcount <--> total_wcount
total_lcount <--> total_lcount

Local variable relationship:
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (1/8): "counter"
--------
.dot code for CFG of text section counter for Vanilla
diGraph counter_Vanilla{
	counter_0  [label="[counter_157,counter_159]"]
	counter_1  [label="[counter_160,counter_160]"]
	counter_2  [label="[counter_170,counter_170]"]
	counter_3  [label="[.label_19,.label_19]"]
	counter_4  [label="[counter_173,counter_173]"]
	counter_5  [label="[counter_174,counter_178]"]
	counter_6  [label="[counter_179,counter_179]"]
	counter_7  [label="[counter_180,counter_191]"]
	counter_8  [label="[.label_21,counter_164]"]
	counter_9  [label="[.label_20,.label_20]"]
	counter_10  [label="[counter_167,counter_167]"]
	counter_11  [label="[counter_168,counter_169]"]
	counter_12  [label="[counter,counter_152]"]
	counter_13  [label="[counter_153,counter_153]"]
	counter_14  [label="[counter_154,counter_156]"]

	counter_0 -> counter_1;

	counter_2 -> counter_9;
	counter_3 -> counter_4;
	counter_4 -> counter_5;
	counter_5 -> counter_6;
	counter_6 -> counter_7;

	counter_8 -> counter_9;
	counter_9 -> counter_10;
	counter_10 -> counter_11;
	counter_11 -> counter_3 [label="ZF"];
	counter_11 -> counter_2 [label="!ZF"];
	counter_12 -> counter_13;
	counter_13 -> counter_14;
	counter_14 -> counter_8 [label="!ZF"];
	counter_14 -> counter_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section coun(12,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
ter for Randomized
diGraph counter_Randomized{
	counter_0  [label="[counter_226,counter_232]"]
	counter_1  [label="[counter_233,counter_233]"]
	counter_2  [label="[counter_246,counter_247]"]
	counter_3  [label="[.label_20,counter_250]"]
	counter_4  [label="[counter_251,counter_251]"]
	counter_5  [label="[counter_252,counter_259]"]
	counter_6  [label="[counter_260,counter_260]"]
	counter_7  [label="[counter_261,counter_277]"]
	counter_8  [label="[.label_19,counter_238]"]
	counter_9  [label="[.label_21,counter_241]"]
	counter_10  [label="[counter_242,counter_242]"]
	counter_11  [label="[counter_243,counter_245]"]
	counter_12  [label="[counter,counter_221]"]
	counter_13  [label="[counter_222,counter_222]"]
	counter_14  [label="[counter_223,counter_225]"]

	counter_0 -> counter_1;

	counter_2 -> counter_9;
	counter_3 -> counter_4;
	counter_4 -> counter_5;
	counter_5 -> counter_6;
	counter_6 -> counter_7;

	counter_8 -> counter_9;
	counter_9 -> counter_10;
	counter_10 -> counter_11;
	counter_11 -> counter_3 [label="ZF"];
	counter_11 -> counter_2 [label="!ZF"];
	counter_12 -> counter_13;
	counter_13 -> counter_14;
	counter_14 -> counter_8 [label="!ZF"];
	counter_14 -> counter_0 [label="ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 9, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --ZF--> 3, 11 --!ZF--> 2, 12 ----> 13, 13 ----> 14, 14 --!ZF--> 8, 14 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "counter"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.2,8], RSI := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := perrf@()
node 2:
skip'
node 3:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 4:
RAX := fclose@()
node 5:
RCX := Dereference: [Var: lcount,8], RDX := Dereference: [Var: wcount,8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [Var: ccount,8]
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 6:
RAX := report@()
node 7:
RCX := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8])
[Var: total_ccount,8] := (Dereference: [Var: ccount,8] + Dereference: [Var: total_ccount,8]), [Var: total_lcount,8] := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8]), [Var: total_wcount,8] := (Dereference: [Var: wcount,8] + Dereference: [Var: total_wcount,8])
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
[Var: ccount,8] := Value: 0, [Var: lcount,8] := Value: 0, [Var: wcount,8] := Value: 0
node 9:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 10:
RAX := getword@()
node 11:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 12:
RSI := Dereference: [Var: .str.1,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 13:
RAX := fopen@()
node 14:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 9, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --ZF--> 3, 11 --!ZF--> 2, 12 ----> 13, 13 ----> 14, 14 --!ZF--> 8, 14 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "counter"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.2,8], RSI := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := perrf@()
node 2:
skip'
node 3:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 4:
RAX := fclose@()
node 5:
RCX := Dereference: [Var: lcount,8], RDX := Dereference: [Var: wcount,8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [Var: ccount,8]
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 6:
RAX := report@()
node 7:
RCX := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8])
[Var: total_ccount,8] := (Dereference: [Var: ccount,8] + Dereference: [Var: total_ccount,8]), [Var: total_lcount,8] := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8]), [Var: total_wcount,8] := (Dereference: [Var: wcount,8] + Dereference: [Var: total_wcount,8])
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
[Var: ccount,8] := Value: 0, [Var: lcount,8] := Value: 0, [Var: wcount,8] := Value: 0
node 9:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 10:
RAX := getword@()
node 11:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 12:
RSI := Dereference: [Var: .str.1,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 13:
RAX := fopen@()
node 14:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

same_behavior for the nodes: counter -> counter_152 and counter -> counter_221

same_behavior checking these two SStates:

SA || RSI := Dereference: [Var: .str.1,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RSI := Dereference: [Var: .str.1,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_deref (E_var ".str.1" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_deref (E_var ".str.1" 64) 8)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_var ".str.1" 64) 8
Value B:
E_deref (E_var ".str.1" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes counter -> counter_152 and counter -> counter_221 have been verified to do the same.

same_behavior for the nodes: counter_153 -> counter_153 and counter_222 -> counter_222

same_behavior checking these two SStates:

SA || RAX := fopen@()

SB || RAX := fopen@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fopen" "") [])]
Resulting values:
Value A:
E_app (F2 "fopen" "") []
Value B:
E_app (F2 "fopen" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_153 -> counter_153 and counter_222 -> counter_222 have been verified to do the same.

same_behavior for the nodes: counter_154 -> counter_156 and counter_223 -> counter_225

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes counter_154 -> counter_156 and counter_223 -> counter_225 have been verified to do the same.

same_behavior for the nodes: .label_21 -> counter_164 and .label_19 -> counter_238

same_behavior checking these two SStates:

SA || [Var: ccount,8] := Value: 0, [Var: lcount,8] := Value: 0, [Var: wcount,8] := Value: 0

SB || [Var: ccount,8] := Value: 0, [Var: lcount,8] := Value: 0, [Var: wcount,8] := Value: 0

Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "ccount" 64
E_var "ccount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "ccount" 64
E_var "lcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "ccount" 64
E_var "wcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "lcount" 64
E_var "ccount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "lcount" 64
E_var "lcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "lcount" 64
E_var "wcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "wcount" 64
E_var "ccount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "wcount" 64
E_var "lcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "wcount" 64
E_var "wcount" 64
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_21 -> counter_164 and .label_19 -> counter_238 have been verified to do the same.

same_behavior for the nodes: .label_20 -> .label_20 and .label_21 -> counter_241

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_20 -> .label_20 and .label_21 -> counter_241 have been verified to do the same.

same_behavior for the nodes: counter_167 -> counter_167 and counter_242 -> counter_242

same_behavior checking these two SStates:

SA || RAX := getword@()

SB || RAX := getword@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "getword" "") [])]
Resulting values:
Value A:
E_app (F2 "getword" "") []
Value B:
E_app (F2 "getword" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_167 -> counter_167 and counter_242 -> counter_242 have been verified to do the same.

same_behavior for the nodes: counter_168 -> counter_169 and counter_243 -> counter_245

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_168 -> counter_169 and counter_243 -> counter_245 have been verified to do the same.

same_behavior for the nodes: .label_19 -> .label_19 and .label_20 -> counter_250

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_19 -> .label_19 and .label_20 -> counter_250 have been verified to do the same.

same_behavior for the nodes: counter_173 -> counter_173 and counter_251 -> counter_251

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fclose" "") [])]
Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_173 -> counter_173 and counter_251 -> counter_251 have been verified to do the same.

same_behavior for the nodes: counter_174 -> counter_178 and counter_252 -> counter_259

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: lcount,8], RDX := Dereference: [Var: wcount,8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [Var: ccount,8]
SA || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

SB || RCX := Dereference: [Var: lcount,8], RDX := Dereference: [Var: wcount,8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [Var: ccount,8]
SB || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "lcount" 64) 8),(RDX,E_deref (E_var "wcount" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_var "ccount" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "lcount" 64) 8),(RDX,E_deref (E_var "wcount" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_var "ccount" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "lcount" 64) 8),(RDX,E_deref (E_var "wcount" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_var "ccount" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "lcount" 64) 8),(RDX,E_deref (E_var "wcount" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_var "ccount" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "lcount" 64) 8
Value B:
E_deref (E_var "lcount" 64) 8
Resulting values:
Value A:
E_deref (E_var "wcount" 64) 8
Value B:
E_deref (E_var "wcount" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var "ccount" 64) 8
Value B:
E_deref (E_var "ccount" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes counter_174 -> counter_178 and counter_252 -> counter_259 have been verified to do the same.

same_behavior for the nodes: counter_179 -> counter_179 and counter_260 -> counter_260

same_behavior checking these two SStates:

SA || RAX := report@()

SB || RAX := report@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "report" "") [])]
Resulting values:
Value A:
E_app (F2 "report" "") []
Value B:
E_app (F2 "report" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_179 -> counter_179 and counter_260 -> counter_260 have been verified to do the same.

same_behavior for the nodes: counter_180 -> counter_191 and counter_261 -> counter_277

same_behavior checking these (3,fromList [(0,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
two SStates:

SA || RCX := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8])
SA || [Var: total_ccount,8] := (Dereference: [Var: ccount,8] + Dereference: [Var: total_ccount,8]), [Var: total_lcount,8] := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8]), [Var: total_wcount,8] := (Dereference: [Var: wcount,8] + Dereference: [Var: total_wcount,8])
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RCX := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8])
SB || [Var: total_ccount,8] := (Dereference: [Var: ccount,8] + Dereference: [Var: total_ccount,8]), [Var: total_lcount,8] := (Dereference: [Var: lcount,8] + Dereference: [Var: total_lcount,8]), [Var: total_wcount,8] := (Dereference: [Var: wcount,8] + Dereference: [Var: total_wcount,8])
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RCX,E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
Value B:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "total_ccount" 64
E_var "total_ccount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_ccount" 64
E_var "total_lcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_ccount" 64
E_var "total_wcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_lcount" 64
E_var "total_ccount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_lcount" 64
E_var "total_lcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_lcount" 64
E_var "total_wcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_wcount" 64
E_var "total_ccount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_deref (E_var "total_ccount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_wcount" 64
E_var "total_lcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_deref (E_var "total_lcount" 64) 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "total_wcount" 64
E_var "total_wcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_deref (E_var "total_wcount" 64) 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes counter_180 -> counter_191 and counter_261 -> counter_277 have been verified to do the same.

same_behavior for the nodes: counter_170 -> counter_170 and counter_246 -> counter_247

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_170 -> counter_170 and counter_246 -> counter_247 have been verified to do the same.

same_behavior for the nodes: counter_157 -> counter_159 and counter_226 -> counter_232

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.2,8], RSI := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.2,8], RSI := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.2" 64) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.2" 64) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.2" 64) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var ".str.2" 64) 8
Value B:
E_deref (E_var ".str.2" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_157 -> counter_159 and counter_226 -> counter_232 have been verified to do the same.

same_behavior for the nodes: counter_160 -> counter_160 and counter_233 -> counter_233

same_behavior checking these two SStates:

SA || RAX := perrf@()

SB || RAX := perrf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "perrf" "") [])]
Resulting values:
Value A:
E_app (F2 "perrf" "") []
Value B:
E_app (F2 "perrf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes counter_160 -> counter_160 and counter_233 -> counter_233 have been verified to do the same.

Label relationship:
.str.2 <--> .str.2
total_wcount <--> total_wcount,total_lcount,total_ccount
total_lcount <--> total_wcount,total_ccount,total_lcount
total_ccount <--> total_wcount,total_lcount,total_ccount
wcount <--> wcount,lcount,ccount
lcount <--> wcount,lcount,ccount
ccount <--> wcount,lcount,ccount
 <--> 
.str.1 <--> .str.1

Local variable relationship:
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (2/8): "errf"
--------
.dot code for CFG of text section errf for Vanilla
diGraph errf_Vanilla{
	errf_0  [label="[errf_333,errf_348]"]
	errf_1  [label="[.label_27,errf_370]"]
	errf_2  [label="[errf_371,errf_371]"]
	errf_3  [label="[errf,errf_332]"]

	errf_0 -> errf_1;
	errf_1 -> errf_2;

	errf_3 -> errf_1 [label="ZF"];
	errf_3 -> errf_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section errf for Randomized
diGraph errf_Randomized{
	errf_0  [label="[errf_475,errf_496]"]
	errf_1  [label="[.label_27,errf_531]"]
	errf_2  [label="[errf_532,errf_532]"]
	errf_3  [label="[errf,errf_474]"]

	errf_0 -> errf_1;
	errf_1 -> errf_2;

	errf_3 -> errf_1 [label="ZF"];
	errf_3 -> errf_0 [label="!ZF"];
}
--------
Starting Node: 3

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "errf"
node 0:
XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Derefe(3,fromList [(0,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
rence: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
[(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := error_print@()
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 3

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "errf"
node 0:
XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
[(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := error_print@()
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: errf -> errf_332 and errf -> errf_474

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_reg XMM7
E_reg XMM7
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_reg XMM6
E_reg XMM6
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_reg XMM5
E_reg XMM5
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_reg XMM4
E_reg XMM4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_reg XMM3
E_reg XMM3
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_reg XMM2
E_reg XMM2
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_reg XMM1
E_reg XMM1
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_reg XMM0
E_reg XMM0
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_reg R9
E_reg R9
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes errf -> errf_332 and errf -> errf_474 have been verified to do the same.

same_behavior for the nodes: .label_27 -> errf_370 and .label_27 -> errf_531

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Value B:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_val 48 32
E_val 48 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 8 32
E_val 8 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_27 -> errf_370 and .label_27 -> errf_531 have been verified to do the same.

same_behavior for the nodes: errf_371 -> errf_371 and errf_532 -> errf_532

same_behavior checking these two SStates:

SA || RAX := error_print@()

SB || RAX := error_print@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error_print" "") [])]
Resulting values:
Value A:
E_app (F2 "error_print" "") []
Value B:
E_app (F2 "error_print" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes errf_371 -> errf_371 and errf_532 -> errf_532 have been verified to do the same.

same_behavior for the nodes: errf_333 -> errf_348 and errf_475 -> errf_496

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
SA || [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]

SB || XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
SB || [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM3fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM4fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM5fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM6fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM7fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes errf_333 -> errf_348 and errf_475 -> errf_496 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 168) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 344) <--> (Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 344)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 328) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 328)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 312) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 312)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 296) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 296)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 280) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 280)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 264) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 264)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 248) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 248)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 232) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232)
(Var: RSP0 - Value: 208) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 392) <--> (Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: (3,fromList [(0,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 392) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 392)
(Var: RSP0 - Value: 200) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 384) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 384)
(Var: RSP0 - Value: 192) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 376) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 376)
(Var: RSP0 - Value: 184) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 368) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 368)
(Var: RSP0 - Value: 176) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 360) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 360)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 216) <--> (Var: RSP0 - Value: 216)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 352) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (3/8): "perrf"
--------
.dot code for CFG of text section perrf for Vanilla
diGraph perrf_Vanilla{
	perrf_0  [label="[perrf_219,perrf_234]"]
	perrf_1  [label="[.label_22,perrf_256]"]
	perrf_2  [label="[perrf_257,perrf_257]"]
	perrf_3  [label="[perrf,perrf_218]"]

	perrf_0 -> perrf_1;
	perrf_1 -> perrf_2;

	perrf_3 -> perrf_1 [label="ZF"];
	perrf_3 -> perrf_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section perrf for Randomized
diGraph perrf_Randomized{
	perrf_0  [label="[perrf_316,perrf_340]"]
	perrf_1  [label="[.label_22,perrf_373]"]
	perrf_2  [label="[perrf_374,perrf_374]"]
	perrf_3  [label="[perrf,perrf_315]"]

	perrf_0 -> perrf_1;
	perrf_1 -> perrf_2;

	perrf_3 -> perrf_1 [label="ZF"];
	perrf_3 -> perrf_0 [label="!ZF"];
}
--------
Starting Node: 3

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "perrf"
node 0:
XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
[(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 1, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
node 2:
RAX := error_print@()
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 3

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "perrf"
node 0:
XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
[(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 1, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]
node 2:
RAX := error_print@()
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: perrf -> perrf_218 and perrf -> perrf_315

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 232),16] := Reg: XMM7, [(Var: RSP0 - Value: 248),16] := Reg: XMM6, [(Var: RSP0 - Value: 264),16] := Reg: XMM5, [(Var: RSP0 - Value: 280),16] := Reg: XMM4, [(Var: RSP0 - Value: 296),16] := Reg: XMM3, [(Var: RSP0 - Value: 312),16] := Reg: XMM2, [(Var: RSP0 - Value: 328),16] := Reg: XMM1, [(Var: RSP0 - Value: 344),16] := Reg: XMM0, [(Var: RSP0 - Value: 352),8] := Reg: RDI, [(Var: RSP0 - Value: 360),8] := Reg: R9, [(Var: RSP0 - Value: 368),8] := Reg: R8, [(Var: RSP0 - Value: 376),8] := Reg: RCX, [(Var: RSP0 - Value: 384),8] := Reg: RDX, [(Var: RSP0 - Value: 392),8] := Reg: RSI
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_reg XMM7
E_reg XMM7
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_reg XMM6
E_reg XMM6
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_reg XMM5
E_reg XMM5
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_reg XMM4
E_reg XMM4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_reg XMM3
E_reg XMM3
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_reg XMM2
E_reg XMM2
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_reg XMM1
E_reg XMM1
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_reg XMM0
E_reg XMM0
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_reg R9
E_reg R9
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes perrf -> perrf_218 and perrf -> perrf_315 have been verified to do the same.

same_behavior for the nodes: .label_22 -> perrf_256 and .label_22 -> perrf_373

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 1, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 360),8], RCX := Dereference: [(Var: RSP0 - Value: 368),8], RDX := (Var: RSP0 - Value: 40), RDI := Value: 1, RSI := Dereference: [(Var: RSP0 - Value: 352),8], R8 := (Var: RSP0 + Value: 8)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 352),8], [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 216), [(Var: RSP0 - Value: 32),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 36),4] := Value: 48, [(Var: RSP0 - Value: 40),4] := Value: 8, [(Var: RSP0 - Value: 176),8] := Dereference: [(Var: RSP0 - Value: 360),8], [(Var: RSP0 - Value: 184),8] := Dereference: [(Var: RSP0 - Value: 368),8], [(Var: RSP0 - Value: 192),8] := Dereference: [(Var: RSP0 - Value: 376),8], [(Var: RSP0 - Value: 200),8] := Dereference: [(Var: RSP0 - Value: 384),8], [(Var: RSP0 - Value: 208),8] := Dereference: [(Var: RSP0 - Value: 392),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8),(RDX,E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]),(RDI,E_val 1 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8),(R8,E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64])]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
local_var_cmp called

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Value B:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_val 48 32
E_val 48 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 8 32
E_val 8 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 176 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 192 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 352 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 360 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 368 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 376 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 384 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 392 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_22 -> perrf_256 and .label_22 -> perrf_373 have been verified to do the same.

same_behavior for the nodes: perrf_257 -> perrf_257 and perrf_374 -> perrf_374

same_behavior checking these two SStates:

SA || RAX := error_print@()

SB || RAX := error_print@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error_print" "") [])]
Resulting values:
Value A:
E_app (F2 "error_print" "") []
Value B:
E_app (F2 "error_print" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes perrf_257 -> perrf_257 and perrf_374 -> perrf_374 have been verified to do the same.

same_behavior for the nodes: perrf_219 -> perrf_234 and perrf_316 -> perrf_340

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
SA || [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]

SB || XMM0 := Dereference: [(Var: RSP0 - Value: 344),16], XMM1 := Dereference: [(Var: RSP0 - Value: 328),16], XMM2 := Dereference: [(Var: RSP0 - Value: 312),16], XMM3 := Dereference: [(Var: RSP0 - Value: 296),16], XMM4 := Dereference: [(Var: RSP0 - Value: 280),16], XMM5 := Dereference: [(Var: RSP0 - Value: 264),16], XMM6 := Dereference: [(Var: RSP0 - Value: 248),16], XMM7 := Dereference: [(Var: RSP0 - Value: 232),16]
SB || [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: RSP0 - Value: 232),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: RSP0 - Value: 248),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 264),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 280),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 296),16], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 312),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 328),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 344),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM3fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM4fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM5fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM6fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
reg_chk debug XMM7fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16),(XMM3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16),(XMM4,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16),(XMM5,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16),(XMM6,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16),(XMM7,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 232 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 248 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 264 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 280 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 296 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 312 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 328 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 344 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes perrf_219 -> perrf_234 and perrf_316 -> perrf_340 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 168) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 344) <--> (Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 344)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 328) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 328)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 312) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 312)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 296) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 296)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 280) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 280)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 264) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 264)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 248) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 248)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 136),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 232) <--> (Var: RSP0 - Value: 344),(Var: RSP0 - Value: 328),(Var: RSP0 - Value: 312),(Var: RSP0 - Value: 296),(Var: RSP0 - Value: 280),(Var: RSP0 - Value: 264),(Var: RSP0 - Value: 248),(Var: RSP0 - Value: 232)
(Var: RSP0 - Value: 208) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 392) <--> (Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 392)
(Var: RSP0 - Value: 200) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 384) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 384)
(Var: RSP0 - Value: 192) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 376) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 376)
(Var: RSP0 - Value: 184) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 368) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 368)
(Var: RSP0 - Value: 176) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 360) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 360)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 216) <--> (Var: RSP0 - Value: 216)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352),(Var: RSP0 - Value: 208),(Var: RSP0 - Value: 200),(Var: RSP0 - Value: 192),(Var: RSP0 - Value: 184),(Var: RSP0 - Value: 176),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 352) <--> (Var: RSP0 - Value: 392),(Var: RSP0 - Value: 384),(Var: RSP0 - Value: 376),(Var: RSP0 - Value: 368),(Var: RSP0 - Value: 360),(Var: RSP0 - Value: 352)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (4/8): "getword"
--------
.dot code for CFG of text section getword for Vanilla
diGraph getword_Vanilla{
	getword_0  [label="[getword_44,getword_45]"]
	getword_1  [label="[getword_60,getword_63]"]
	getword_2  [label="[getword_70,getword_72]"]
	getword_3  [label="[.label_15,.label_15]"]
	getword_4  [label="[.label_17,getword_69]"]
	getword_5  [label="[getword_54,getword_56]"]
	getword_6  [label="[getword_57,getword_57]"]
	getword_7  [label="[getword_58,getword_59]"]
	getword_8  [label="[getword_85,getword_87]"]
	getword_9  [label="[getword_95,getword_95]"]
	getword_10  [label="[.label_16,.label_14]"]
	getword_11  [label="[getword_100,getword_100]"]
	getword_12  [label="[getword_101,getword_102]"]
	getword_13  [label="[.label_11,getword_91]"]
	getword_14  [label="[getword_92,getword_92]"]
	getword_15  [label="[getword_93,getword_94]"]
	getword_16  [label="[getword_80,getword_84]"]
	getword_17  [label="[.label_13,getword_108]"]
	getword_18  [label="[.label_9,getword_113]"]
	getword_19  [label="[.label_8,.label_8]"]
	getword_20  [label="[.label_12,getword_79]"]
	getword_21  [label="[.label_18,.label_18]"]
	getword_22  [label="[.label_10,.label_10]"]
	getword_23  [label="[getword_50,getword_50]"]
	getword_24  [label="[getword_51,getword_53]"]
	getword_25  [label="[getword,getword_40]"]
	getword_26  [label="[g(25,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
etword_41,getword_41]"]
	getword_27  [label="[getword_42,getword_43]"]

	getword_0 -> getword_18;
	getword_1 -> getword_19;
	getword_2 -> getword_3;
	getword_3 -> getword_22;
	getword_4 -> getword_3 [label="!ZF"];
	getword_4 -> getword_2 [label="ZF"];
	getword_5 -> getword_6;
	getword_6 -> getword_7;
	getword_7 -> getword_4 [label="ZF"];
	getword_7 -> getword_1 [label="!ZF"];
	getword_8 -> getword_13;
	getword_9 -> getword_17;
	getword_10 -> getword_11;
	getword_11 -> getword_12;
	getword_12 -> getword_20;
	getword_13 -> getword_14;
	getword_14 -> getword_15;
	getword_15 -> getword_10 [label="!ZF"];
	getword_15 -> getword_9 [label="ZF"];
	getword_16 -> getword_13 [label="!ZF"];
	getword_16 -> getword_8 [label="ZF"];
	getword_17 -> getword_18;

	getword_19 -> getword_20;
	getword_20 -> getword_17 [label="ZF"];
	getword_20 -> getword_16 [label="!ZF"];
	getword_21 -> getword_22;
	getword_22 -> getword_23;
	getword_23 -> getword_24;
	getword_24 -> getword_19 [label="ZF"];
	getword_24 -> getword_5 [label="!ZF"];
	getword_25 -> getword_26;
	getword_26 -> getword_27;
	getword_27 -> getword_21 [label="ZF"];
	getword_27 -> getword_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section getword for Randomized
diGraph getword_Randomized{
	getword_0  [label="[getword_67,getword_69]"]
	getword_1  [label="[getword_95,getword_101]"]
	getword_2  [label="[getword_111,getword_115]"]
	getword_3  [label="[.label_17,getword_118]"]
	getword_4  [label="[.label_11,getword_110]"]
	getword_5  [label="[getword_84,getword_89]"]
	getword_6  [label="[getword_90,getword_90]"]
	getword_7  [label="[getword_91,getword_94]"]
	getword_8  [label="[getword_132,getword_136]"]
	getword_9  [label="[getword_147,getword_148]"]
	getword_10  [label="[.label_14,.label_16]"]
	getword_11  [label="[getword_154,getword_154]"]
	getword_12  [label="[getword_155,getword_157]"]
	getword_13  [label="[.label_10,getword_142]"]
	getword_14  [label="[getword_143,getword_143]"]
	getword_15  [label="[getword_144,getword_146]"]
	getword_16  [label="[getword_125,getword_131]"]
	getword_17  [label="[.label_12,getword_166]"]
	getword_18  [label="[.label_18,getword_172]"]
	getword_19  [label="[.label_13,getword_121]"]
	getword_20  [label="[.label_8,getword_124]"]
	getword_21  [label="[.label_15,getword_72]"]
	getword_22  [label="[.label_9,getword_76]"]
	getword_23  [label="[getword_77,getword_77]"]
	getword_24  [label="[getword_78,getword_83]"]
	getword_25  [label="[getword,getword_62]"]
	getword_26  [label="[getword_63,getword_63]"]
	getword_27  [label="[getword_64,getword_66]"]

	getword_0 -> getword_18;
	getword_1 -> getword_19;
	getword_2 -> getword_3;
	getword_3 -> getword_22;
	getword_4 -> getword_3 [label="!ZF"];
	getword_4 -> getword_2 [label="ZF"];
	getword_5 -> getword_6;
	getword_6 -> getword_7;
	getword_7 -> getword_4 [label="ZF"];
	getword_7 -> getword_1 [label="!ZF"];
	getword_8 -> getword_13;
	getword_9 -> getword_17;
	getword_10 -> getword_11;
	getword_11 -> getword_12;
	getword_12 -> getword_20;
	getword_13 -> getword_14;
	getword_14 -> getword_15;
	getword_15 -> getword_10 [label="!ZF"];
	getword_15 -> getword_9 [label="ZF"];
	getword_16 -> getword_13 [label="!ZF"];
	getword_16 -> getword_8 [label="ZF"];
	getword_17 -> getword_18;

	getword_19 -> getword_20;
	getword_20 -> getword_17 [label="ZF"];
	getword_20 -> getword_16 [label="!ZF"];
	getword_21 -> getword_22;
	getword_22 -> getword_23;
	getword_23 -> getword_24;
	getword_24 -> getword_19 [label="ZF"];
	getword_24 -> getword_5 [label="!ZF"];
	getword_25 -> getword_26;
	getword_26 -> getword_27;
	getword_27 -> getword_21 [label="ZF"];
	getword_27 -> getword_0 [label="!ZF"];
}
--------
Starting Node: 25

Edges: 0 ----> 18, 1 ----> 19, 2 ----> 3, 3 ----> 22, 4 --!ZF--> 3, 4 --ZF--> 2, 5 ----> 6, 6 ----> 7, 7 --ZF--> 4, 7 --!ZF--> 1, 8 ----> 13, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 20, 13 ----> 14, 14 ----> 15, 15 --!ZF--> 10, 15 --ZF--> 9, 16 --!ZF--> 13, 16 --ZF--> 8, 17 ----> 18, , 19 ----> 20, 20 --ZF--> 17, 20 --!ZF--> 16, 21 ----> 22, 22 ----> 23, 23 ----> 24, 24 --ZF--> 19, 24 --!ZF--> 5, 25 ----> 26, 26 ----> 27, 27 --ZF--> 21, 27 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "getword"
node 0:
[(Var: RSP0 - Value: 12),4] := Value: 0
node 1:
RAX := (Dereference: [Var: wcount,8] + Value: 1)
[Var: wcount,8] := (Dereference: [Var: wcount,8] + Value: 1)
ZF := (Dereference: [Var: wcount,8] + Value: 1), CF := (Dereference: [Var: wcount,8] + Value: 1), SF := (Dereference: [Var: wcount,8] + Value: 1), OF := (Dereference: [Var: wcount,8] + Value: 1), PF := (Dereference: [Var: wcount,8] + Value: 1)
node 2:
RAX := (Dereference: [Var: lcount,8] + Value: 1)
[Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)
node 3:
skip'
node 4:
RAX := (Dereference: [Var: ccount,8] + Value: 1)
[Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])
node 6:
RAX := isword@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := (Dereference: [Var: lcount,8] + Value: 1)
[Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)
node 9:
skip'
node 10:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 11:
RAX := _IO_getc@()
node 12:
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])
node 14:
RAX := isword@()
node 15:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 16:
RAX := (Dereference: [Var: ccount,8] + Value: 1)
[Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)
node 17:
RAX := (TakeBits: <63,8>(Reg: RAX) . AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)), RCX := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
[(Var: RSP0 - Value: 12),4] := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
ZF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), CF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), SF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Va(25,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
lue: 1 else Value: 0),Value: 1), OF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), PF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
node 18:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 19:
skip'
node 20:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615)
node 21:
skip'
node 22:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 23:
RAX := _IO_getc@()
node 24:
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615)
node 25:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),4] := Value: 0
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 26:
RAX := feof@()
node 27:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

Starting Node: 25

Edges: 0 ----> 18, 1 ----> 19, 2 ----> 3, 3 ----> 22, 4 --!ZF--> 3, 4 --ZF--> 2, 5 ----> 6, 6 ----> 7, 7 --ZF--> 4, 7 --!ZF--> 1, 8 ----> 13, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 20, 13 ----> 14, 14 ----> 15, 15 --!ZF--> 10, 15 --ZF--> 9, 16 --!ZF--> 13, 16 --ZF--> 8, 17 ----> 18, , 19 ----> 20, 20 --ZF--> 17, 20 --!ZF--> 16, 21 ----> 22, 22 ----> 23, 23 ----> 24, 24 --ZF--> 19, 24 --!ZF--> 5, 25 ----> 26, 26 ----> 27, 27 --ZF--> 21, 27 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "getword"
node 0:
[(Var: RSP0 - Value: 12),4] := Value: 0
node 1:
RAX := (Dereference: [Var: wcount,8] + Value: 1)
[Var: wcount,8] := (Dereference: [Var: wcount,8] + Value: 1)
ZF := (Dereference: [Var: wcount,8] + Value: 1), CF := (Dereference: [Var: wcount,8] + Value: 1), SF := (Dereference: [Var: wcount,8] + Value: 1), OF := (Dereference: [Var: wcount,8] + Value: 1), PF := (Dereference: [Var: wcount,8] + Value: 1)
node 2:
RAX := (Dereference: [Var: lcount,8] + Value: 1)
[Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)
node 3:
skip'
node 4:
RAX := (Dereference: [Var: ccount,8] + Value: 1)
[Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])
node 6:
RAX := isword@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := (Dereference: [Var: lcount,8] + Value: 1)
[Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)
node 9:
skip'
node 10:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 11:
RAX := _IO_getc@()
node 12:
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])
node 14:
RAX := isword@()
node 15:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 16:
RAX := (Dereference: [Var: ccount,8] + Value: 1)
[Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)
node 17:
RAX := (TakeBits: <63,8>(Reg: RAX) . AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)), RCX := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
[(Var: RSP0 - Value: 12),4] := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
ZF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), CF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), SF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), OF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), PF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
node 18:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 19:
skip'
node 20:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615)
node 21:
skip'
node 22:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 23:
RAX := _IO_getc@()
node 24:
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615)
node 25:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),4] := Value: 0
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 26:
RAX := feof@()
node 27:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

same_behavior for the nodes: getword -> getword_40 and getword -> getword_62

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),4] := Value: 0
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),4] := Value: 0
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes getword -> getword_40 and getword -> getword_62 have been verified to do the same.

same_behavior for the nodes: getword_41 -> getword_41 and getword_63 -> getword_63

same_behavior checking these two SStates:

SA || RAX := feof@()

SB || RAX := feof@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "feof" "") [])]
Resulting values:
Value A:
E_app (F2 "feof" "") []
Value B:
E_app (F2 "feof" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_41 -> getword_41 and getword_63 -> getword_63 have been verified to do the same.

same_behavior for the nodes: getword_42 -> getword_43 and getword_64 -> getword_66

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_42 -> getword_43 and getword_64 -> getword_66 have been verified to do the same.

same_behavior for the nodes: .label_18 -> .label_18 and .label_15 -> getword_72

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_18 -> .label_18 and .label_15 -> getword_72 have been verified to do the same.

same_behavior for the nodes: .label_10 -> .label_10 and .label_9 -> getword_76

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_10 -> .label_10 and .label_9 -> getword_76 have been verified to do the same.

same_behavior for the nodes: getword_50 -> getword_50 and getword_77 -> getword_77

same_behavior checking these two SStates:

SA || RAX := _IO_getc@()

SB || RAX := _IO_getc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "_IO_getc" "") [])]
Resulting values:
Value A:
E_app (F2 "_IO_getc" "") []
Value B:
E_app (F2 "_IO_getc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_50 -> getword_50 and getword_77 -> getword_77 have been verified to do the same.

same_behavior for the nodes: getword_51 -> getword_53 and getword_78 -> getword_83

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615)

SB || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 18446744073709551615)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes getword_51 -> getword_53 and getword_78 -> getword_83 have been verified to do the same.

same_behavior for the nodes: .label_8 -> .label_8 and .label_13 -> getword_121

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_8 -> .label_8 and .label_13 -> getword_121 have been verified to do the same.

same_behavior for the nodes: .label_12 -> getword_79 and .label_8 -> getword_124

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 18446744073709551615)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_12 -> getword_79 and .label_8 -> getword_124 have been verified to do the same.

same_behavior for the nodes: .label_13 -> getword_108 and .label_12 -> getword_166

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)), RCX := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
SA || [(Var: RSP0 - Value: 12),4] := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
SA || ZF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), CF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), SF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), OF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), PF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)), RCX := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
SB || [(Var: RSP0 - Value: 12),4] := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)
SB || ZF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), CF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), SF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), OF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1), PF := AND((if (Dereference: [(Var: RSP0 - Value: 28),4] != Value: 18446744073709551615) then Value: 1 else Value: 0),Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]]),(RCX,E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]]),(RCX,E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]]
local_var_cmp called

Resulting values:
Value A:
E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]
Value B:
E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 8) (E_val 0 8),E_val 1 8]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 32) (E_val 0 32),E_val 1 32]
E_app (Op AND) [E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 18446744073709551615 32]) (E_val 1 32) (E_val 0 32),E_val 1 32]
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes .label_13 -> getword_108 and .label_12 -> getword_166 have been verified to do the same.

same_behavior for the nodes: .label_9 -> getword_113 and .label_18 -> getword_172

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_9 -> getword_113 and .label_18 -> getword_172 have been verified to do the same.

same_behavior for the nodes: getword_80 -> getword_84 and getword_125 -> getword_131

same_behavior checking these two SStates:

SA || RAX := (Dereference: [Var: ccount,8] + Value: 1)
SA || [Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)

SB || RAX := (Dereference: [Var: ccount,8] + Value: 1)
SB || [Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "ccount" 64
E_var "ccount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes getword_80 -> getword_84 and getword_125 -> getword_131 have been verified to do the same.

same_behavior for the nodes: .label_11 -> getword_91 and .label_10 -> getword_142

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])

SB || RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4])]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
Value B:
E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_11 -> getword_91 and .label_10 -> getword_142 have been verified to do the same.

same_behavior for the nodes: getword_92 -> getword_92 and getword_143 -> getword_143

same_behavior checking these two SStates:

SA || RAX := isword@()

SB || RAX := isword@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "isword" "") [])]
Resulting values:
Value A:
E_app (F2 "isword" "") []
Value B:
E_app (F2 "isword" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_92 -> getword_92 and getword_143 -> getword_143 have been verified to do the same.

same_behavior for the nodes: getword_93 -> getword_94 and getword_144 -> getword_146

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_93 -> getword_94 and getword_144 -> getword_146 have been verified to do the same.

same_behavior for the nodes: .label_16 -> .label_14 and .label_14 -> .label_16

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_16 -> .label_14 and .label_14 -> .label_16 have been verified to do the same.

same_behavior for the nodes: getword_100 -> getword_100 and getword_154 -> getword_154

same_behavior checking these two SStates:

SA || RAX := _IO_getc@()

SB || RAX := _IO_getc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "_IO_getc" "") [])]
Resulting values:
Value A:
E_app (F2 "_IO_getc" "") []
Value B:
E_app (F2 "_IO_getc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_100 -> getword_100 and getword_154 -> getword_154 have been verified to do the same.

same_behavior for the nodes: getword_101 -> getword_102 and getword_155 -> getword_157

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes getword_101 -> getword_102 and getword_155 -> getword_157 have been verified to do the same.

same_behavior for the nodes: getword_95 -> getword_95 and getword_147 -> getword_148

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_95 -> getword_95 and getword_147 -> getword_148 have been verified to do the same.

same_behavior for the nodes: getword_85 -> getword_87 and getword_132 -> getword_136

same_behavior checking these two SStates:

SA || RAX := (Dereference: [Var: lcount,8] + Value: 1)
SA || [Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
SA || ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)

SB || RAX := (Dereference: [Var: lcount,8] + Value: 1)
SB || [Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
SB || ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "lcount" 64
E_var "lcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes getword_85 -> getword_87 and getword_132 -> getword_136 have been verified to do the same.

same_behavior for the nodes: getword_54 -> getword_56 and getword_84 -> getword_89

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])

SB || RAX := Dereference: [(Var: RSP0 - Value: 28),4], RCX := (TakeBits: <63,8>(Reg: RCX) . TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])), RDI := TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 28),4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]),(RDI,E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
Value B:
E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_54 -> getword_56 and getword_84 -> getword_89 have been verified to do the same.

same_behavior for the nodes: getword_57 -> getword_57 and getword_90 -> getword_90

same_behavior checking these two SStates:

SA || RAX := isword@()

SB || RAX := isword@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "isword" "") [])]
Resulting values:
Value A:
E_app (F2 "isword" "") []
Value B:
E_app (F2 "isword" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_57 -> getword_57 and getword_90 -> getword_90 have been verified to do the same.

same_behavior for the nodes: getword_58 -> getword_59 and getword_91 -> getword_94

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes getword_58 -> getword_59 and getword_91 -> getword_94 have been verified to do the same.

same_behavior for the nodes: .label_17 -> getword_69 and .label_11 -> getword_110

same_behavior checking these two SStates:

SA || RAX := (Dereference: [Var: ccount,8] + Value: 1)
SA || [Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)

SB || RAX := (Dereference: [Var: ccount,8] + Value: 1)
SB || [Var: ccount,8] := (Dereference: [Var: ccount,8] + Value: 1)
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 10)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "ccount" 64
E_var "ccount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_var "ccount" 64) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_17 -> getword_69 and .label_11 -> getword_110 have been verified to do the same.

same_behavior for the nodes: .label_15 -> .label_15 and .label_17 -> getword_118

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_15 -> .label_15 and .label_17 -> getword_118 have been verified to do the same.

same_behavior for the nodes: getword_70 -> getword_72 and getword_111 -> getword_115

same_behavior checking these two SStates:

SA || RAX := (Dereference: [Var: lcount,8] + Value: 1)
SA || [Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
SA || ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)

SB || RAX := (Dereference: [Var: lcount,8] + Value: 1)
SB || [Var: lcount,8] := (Dereference: [Var: lcount,8] + Value: 1)
SB || ZF := (Dereference: [Var: lcount,8] + Value: 1), CF := (Dereference: [Var: lcount,8] + Value: 1), SF := (Dereference: [Var: lcount,8] + Value: 1), OF := (Dereference: [Var: lcount,8] + Value: 1), PF := (Dereference: [Var: lcount,8] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "lcount" 64
E_var "lcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_var "lcount" 64) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes getword_70 -> getword_72 and getword_111 -> getword_115 have been verified to do the same.

same_behavior for the nodes: getword_60 -> getword_63 and getword_95 -> getword_101

same_behavior checking these two SStates:

SA || RAX := (Dereference: [Var: wcount,8] + Value: 1)
SA || [Var: wcount,8] := (Dereference: [Var: wcount,8] + Value: 1)
SA || ZF := (Dereference: [Var: wcount,8] + Value: 1), CF := (Dereference: [Var: wcount,8] + Value: 1), SF := (Dereference: [Var: wcount,8] + Value: 1), OF := (Dereference: [Var: wcount,8] + Value: 1), PF := (Dereference: [Var: wcount,8] + Value: 1)

SB || RAX := (Dereference: [Var: wcount,8] + Value: 1)
SB || [Var: wcount,8] := (Dereference: [Var: wcount,8] + Value: 1)
SB || ZF := (Dereference: [Var: wcount,8] + Value: 1), CF := (Dereference: [Var: wcount,8] + Value: 1), SF := (Dereference: [Var: wcount,8] + Value: 1), OF := (Dereference: [Var: wcount,8] + Value: 1), PF := (Dereference: [Var: wcount,8] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_val 1 64])]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "wcount" 64
E_var "wcount" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_var "wcount" 64) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes getword_60 -> getword_63 and getword_95 -> getword_101 have been verified to do the same.

same_behavior for the nodes: getword_44 -> getword_45 and getword_67 -> getword_69

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := Value: 0

SB || [(Var: RSP0 - Value: 12),4] := Value: 0

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes getword_44 -> getword_45 and getword_67 -> getword_69 have been verified to do the same.

Label relationship:
wcount <--> wcount
lcount <--> lcount
ccount <--> ccount
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (5/8): "error_print"
--------
.dot code for CFG of text section error_print for Vanilla
diGraph error_print_Vanilla{
	error_print_0  [label="[error_print_396,error_print_396]"]
	error_print_1  [label="[error_print_397,error_print_397]"]
	error_print_2  [label="[error_print_398,error_print_398]"]
	error_print_3  [label="[.label_29,error_print_402]"]
	error_print_4  [label="[error_print_403,error_print_403]"]
	error_print_5  [label="[error_print_404,error_print_404]"]
	error_print_6  [label="[.label_28,.label_28]"]
	error_print_7  [label="[error_print_407,error_print_407]"]
	error_print_8  [label="[error_print,error_print_391]"]
	error_print_9  [label="[error_print_392,error_print_392]"]
	error_print_10  [label="[error_print_393,error_print_395]"]

	error_print_0 -> error_print_1;
	error_print_1 -> error_print_2;
	error_print_2 -> error_print_6;
	error_print_3 -> error_print_4;
	error_print_4 -> error_print_5;
	error_print_5 -> error_print_6;
	error_print_6 -> error_print_7;

	error_print_8 -> erro(8,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(8,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
r_print_9;
	error_print_9 -> error_print_10;
	error_print_10 -> error_print_3 [label="ZF"];
	error_print_10 -> error_print_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section error_print for Randomized
diGraph error_print_Randomized{
	error_print_0  [label="[error_print_565,error_print_567]"]
	error_print_1  [label="[error_print_568,error_print_568]"]
	error_print_2  [label="[error_print_569,error_print_570]"]
	error_print_3  [label="[.label_28,error_print_578]"]
	error_print_4  [label="[error_print_579,error_print_579]"]
	error_print_5  [label="[error_print_580,error_print_581]"]
	error_print_6  [label="[.label_29,error_print_584]"]
	error_print_7  [label="[error_print_585,error_print_585]"]
	error_print_8  [label="[error_print,error_print_558]"]
	error_print_9  [label="[error_print_559,error_print_559]"]
	error_print_10  [label="[error_print_560,error_print_564]"]

	error_print_0 -> error_print_1;
	error_print_1 -> error_print_2;
	error_print_2 -> error_print_6;
	error_print_3 -> error_print_4;
	error_print_4 -> error_print_5;
	error_print_5 -> error_print_6;
	error_print_6 -> error_print_7;

	error_print_8 -> error_print_9;
	error_print_9 -> error_print_10;
	error_print_10 -> error_print_3 [label="ZF"];
	error_print_10 -> error_print_0 [label="!ZF"];
}
--------
Starting Node: 8

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 6, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 --ZF--> 3, 10 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "error_print"
node 0:
RDI := Dereference: [Var: .str.5,8]
node 1:
RAX := perror@()
node 2:
skip'
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: stderr,8], RSI := Dereference: [Var: .str.6,8]
node 4:
RAX := fprintf@()
node 5:
[(Var: RSP0 - Value: 40),4] := TakeBits: <31,0>(Reg: RAX)
node 6:
RDI := Value: 1
node 7:
RAX := exit@()
node 8:
RDI := Dereference: [Var: stderr,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 9:
RAX := vfprintf@()
node 10:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)
--------

Starting Node: 8

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 6, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 --ZF--> 3, 10 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "error_print"
node 0:
RDI := Dereference: [Var: .str.5,8]
node 1:
RAX := perror@()
node 2:
skip'
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: stderr,8], RSI := Dereference: [Var: .str.6,8]
node 4:
RAX := fprintf@()
node 5:
[(Var: RSP0 - Value: 40),4] := TakeBits: <31,0>(Reg: RAX)
node 6:
RDI := Value: 1
node 7:
RAX := exit@()
node 8:
RDI := Dereference: [Var: stderr,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 9:
RAX := vfprintf@()
node 10:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)
--------

same_behavior for the nodes: error_print -> error_print_391 and error_print -> error_print_558

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: stderr,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RDI := Dereference: [Var: stderr,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_reg RDX),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RDX),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RDX),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_var "stderr" 64) 8
Value B:
E_deref (E_var "stderr" 64) 8
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes error_print -> error_print_391 and error_print -> error_print_558 have been verified to do the same.

same_behavior for the nodes: error_print_392 -> error_print_392 and error_print_559 -> error_print_559

same_behavior checking these two SStates:

SA || RAX := vfprintf@()

SB || RAX := vfprintf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "vfprintf" "") [])]
Resulting values:
Value A:
E_app (F2 "vfprintf" "") []
Value B:
E_app (F2 "vfprintf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_392 -> error_print_392 and error_print_559 -> error_print_559 have been verified to do the same.

same_behavior for the nodes: error_print_393 -> error_print_395 and error_print_560 -> error_print_564

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)

SB || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting v(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
alues:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes error_print_393 -> error_print_395 and error_print_560 -> error_print_564 have been verified to do the same.

same_behavior for the nodes: .label_29 -> error_print_402 and .label_28 -> error_print_578

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: stderr,8], RSI := Dereference: [Var: .str.6,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: stderr,8], RSI := Dereference: [Var: .str.6,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var "stderr" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var "stderr" 64) 8
Value B:
E_deref (E_var "stderr" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 8
Value B:
E_deref (E_var ".str.6" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_29 -> error_print_402 and .label_28 -> error_print_578 have been verified to do the same.

same_behavior for the nodes: error_print_403 -> error_print_403 and error_print_579 -> error_print_579

same_behavior checking these two SStates:

SA || RAX := fprintf@()

SB || RAX := fprintf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fprintf" "") [])]
Resulting values:
Value A:
E_app (F2 "fprintf" "") []
Value B:
E_app (F2 "fprintf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_403 -> error_print_403 and error_print_579 -> error_print_579 have been verified to do the same.

same_behavior for the nodes: error_print_404 -> error_print_404 and error_print_580 -> error_print_581

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 40),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 40),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes error_print_404 -> error_print_404 and error_print_580 -> error_print_581 have been verified to do the same.

same_behavior for the nodes: .label_28 -> .label_28 and .label_29 -> error_print_584

same_behavior checking these two SStates:

SA || RDI := Value: 1

SB || RDI := Value: 1

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 1 64)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_28 -> .label_28 and .label_29 -> error_print_584 have been verified to do the same.

same_behavior for the nodes: error_print_407 -> error_print_407 and error_print_585 -> error_print_585

same_behavior checking these two SStates:

SA || RAX := exit@()

SB || RAX := exit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "exit" "") [])]
Resulting values:
Value A:
E_app (F2 "exit" "") []
Value B:
E_app (F2 "exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_407 -> error_print_407 and error_print_585 -> error_print_585 have been verified to do the same.

same_behavior for the nodes: error_print_396 -> error_print_396 and error_print_565 -> error_print_567

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.5,8]

SB || RDI := Dereference: [Var: .str.5,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.5" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.5" 64) 8
Value B:
E_deref (E_var ".str.5" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_396 -> error_print_396 and error_print_565 -> error_print_567 have been verified to do the same.

same_behavior for the nodes: error_print_397 -> error_print_397 and error_print_568 -> error_print_568

same_behavior checking these two SStates:

SA || RAX := perror@()

SB || RAX := perror@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "perror" "") [])]
Resulting values:
Value A:
E_app (F2 "perror" "") []
Value B:
E_app (F2 "perror" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_397 -> error_print_397 and error_print_568 -> error_print_568 have been verified to do the same.

same_behavior for the nodes: error_print_398 -> error_print_398 and error_print_569 -> error_print_570

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes error_print_398 -> error_print_398 and error_print_569 -> error_print_570 have been verified to do the same.

Label relationship:
.str.5 <--> .str.5
.str.6 <--> .str.6
 <--> 
stderr <--> stderr

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (6/8): "isword"
--------
.dot code for CFG of text section isword for Vanilla
diGraph isword_Vanilla{
	isword_0  [label="[isword,isword_129]"]
	isword_1  [label="[isword_130,isword_130]"]
	isword_2  [label="[isword_131,isword_138]"]

	isword_0 -> isword_1;
	isword_1 -> isword_2;

}
--------
--------
.dot code for CFG of text section isword for Randomized
diGraph isword_Randomized{
	isword_0  [label="[isword,isword_194]"]
	isword_1  [label="[isword_195,isword_195]"]
	isword_2  [label="[isword_196,isword_205]"]

	isword_0 -> isword_1;
	isword_1 -> isword_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "isword"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDI)), RCX := sextend(TakeBits: <7,0>(Reg: RDI),32,64), RDI := TakeBits: <7,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := TakeBits: <7,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := sextend(TakeBits: <7,0>(Reg: RDI),32,64)
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := __ctype_b_loc@()
node 2:
RAX := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "isword"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDI)), RCX := sextend(TakeBits: <7,0>(Reg: RDI),32,64), RDI := TakeBits: <7,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := TakeBits: <7,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := sextend(TakeBits: <7,0>(Reg: RDI),32,64)
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := __ctype_b_loc@()
node 2:
RAX := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: isword -> isword_129 and isword -> isword_194

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDI)), RCX := sextend(TakeBits: <7,0>(Reg: RDI),32,64), RDI := TakeBits: <7,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := TakeBits: <7,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := sextend(TakeBits: <7,0>(Reg: RDI),32,64)
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDI)), RCX := sextend(TakeBits: <7,0>(Reg: RDI),32,64), RDI := TakeBits: <7,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := TakeBits: <7,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := sextend(TakeBits: <7,0>(Reg: RDI),32,64)
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDI]]),(RCX,E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]),(RDI,E_app (TakeBits 7 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDI]]),(RCX,E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]),(RDI,E_app (TakeBits 7 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDI]]),(RCX,E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]),(RDI,E_app (TakeBits 7 0) [E_reg RDI]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDI]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDI]]
Resulting values:
Value A:
E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]
Value B:
E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]
Resulting values:
Value A:
E_app (TakeBits 7 0) [E_reg RDI]
Value B:
E_app (TakeBits 7 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 9 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 9 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RDI]
E_app (TakeBits 7 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]
E_app (SExtend 32 64) [E_app (TakeBits 7 0) [E_reg RDI]]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes isword -> isword_129 and isword -> isword_194 have been verified to do the same.

same_behavior for the nodes: isword_130 -> isword_130 and isword_195 -> isword_195

same_behavior checking these two SStates:

SA || RAX := __ctype_b_loc@()

SB || RAX := __ctype_b_loc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__ctype_b_loc" "") [])]
Resulting values:
Value A:
E_app (F2 "__ctype_b_loc" "") []
Value B:
E_app (F2 "__ctype_b_loc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes isword_130 -> isword_130 and isword_195 -> isword_195 have been verified to do the same.

same_behavior for the nodes: isword_131 -> isword_138 and isword_196 -> isword_205

same_behavior checking these two SStates:

SA || RAX := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024)
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := AND(Dereference: [(Dereference: [Reg: RAX,8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 24),8] * Value: 2))),2],Value: 1024)
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32])]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32])]
reg_chk debug RDIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32])]
Resulting values:
Value A:
E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]
Value B:
E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]
Value B:
E_app (Op AND) [E_deref (E_app (Op ADD) [E_deref (E_reg RAX) 8,E_app (TakeBits 63 0) [E_app (Op MUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 2 64]]]) 2,E_val 1024 32]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes isword_131 -> isword_138 and isword_196 -> isword_205 have been verified to do the same(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 9) <--> (Var: RSP0 - Value: 9)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (7/8): "report"
--------
.dot code for CFG of text section report for Vanilla
diGraph report_Vanilla{
	report_0  [label="[report,report_21]"]
	report_1  [label="[report_22,report_22]"]
	report_2  [label="[report_23,report_26]"]

	report_0 -> report_1;
	report_1 -> report_2;

}
--------
--------
.dot code for CFG of text section report for Randomized
diGraph report_Randomized{
	report_0  [label="[report,report_43]"]


}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "report"
node 0:
RAX := (TakeBits: <63,8>(Dereference: [Var: .str,8]) . Value: 0), RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 1:
RAX := printf@()
node 2:
[(Var: RSP0 - Value: 44),4] := TakeBits: <31,0>(Reg: RAX)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "report"
node 0:
RAX := Dereference: [Var: .str,8], RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 44),4] := TakeBits: <31,0>(Dereference: [Var: .str,8])
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: report -> report_21 and report -> report_43

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Dereference: [Var: .str,8]) . Value: 0), RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SA || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

SB || RAX := Dereference: [Var: .str,8], RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 44),4] := TakeBits: <31,0>(Dereference: [Var: .str,8])
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
reg_chk debug R8fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_var ".str" 64) 8),(RCX,E_reg RSI),(RDX,E_reg RDX),(RDI,E_deref (E_var ".str" 64) 8),(RSI,E_reg RCX),(R8,E_reg RDI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_deref (E_var ".str" 64) 8],E_val 0 8]
Value B:
E_deref (E_var ".str" 64) 8
Reg Chk: False
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Error "Either reg_chk_a or mem_chk_a failed: (False,True)"
Either reg_chk_a or mem_chk_a failed: (False,True)
main: user error (Nodes report -> report_21 and report -> report_43 are different.

RAX := (TakeBits: <63,8>(Dereference: [Var: .str,8]) . Value: 0), RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

RAX := Dereference: [Var: .str,8], RCX := Reg: RSI, RDI := Dereference: [Var: .str,8], RSI := Reg: RCX, R8 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 44),4] := TakeBits: <31,0>(Dereference: [Var: .str,8])
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8))
