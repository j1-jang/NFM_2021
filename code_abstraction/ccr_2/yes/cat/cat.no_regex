	.section	.text
	.align	32
	#Procedure 0x401509
	.globl sub_401509
	.type sub_401509, @function
sub_401509:

	hlt	
	.section	.text
	.align	32
	#Procedure 0x40150a
	.globl sub_40150a
	.type sub_40150a, @function
sub_40150a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401542
	.globl sub_401542
	.type sub_401542, @function
sub_401542:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40158a
	.globl sub_40158a
	.type sub_40158a, @function
sub_40158a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4015ac
	.globl sub_4015ac
	.type sub_4015ac, @function
sub_4015ac:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4015bd
	.globl sub_4015bd
	.type sub_4015bd, @function
sub_4015bd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4015d6
	.globl sub_4015d6
	.type sub_4015d6, @function
sub_4015d6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4015e0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_21
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_23
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_13
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_12
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_17
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_19
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_22
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_24
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_9
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_16
	mov	ecx, OFFSET FLAT:label_10
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_15
	mov	esi, OFFSET FLAT:label_28
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_15
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_15:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_18
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_10
	mov	ecx, OFFSET FLAT:label_11
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_20
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_11
	mov	ecx, OFFSET FLAT:label_25
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_21:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_14
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	32
	#Procedure 0x401808
	.globl sub_401808
	.type sub_401808, @function
sub_401808:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401810

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x168
	mov	r15, rsi
	mov	r12d, edi
	call	getpagesize
	cdqe	
	mov	qword ptr [rsp + 0x50], rax
	mov	rdi, qword ptr [r15]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_36
	call	setlocale
	mov	edi, OFFSET FLAT:label_31
	mov	esi, OFFSET FLAT:label_38
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_31
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	xor	eax, eax
	mov	qword ptr [rsp + 0x20], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x30], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x28], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x60], rax
	xor	r14d, r14d
	xor	eax, eax
	jmp	.label_46
.label_82:
	mov	al, 1
.label_46:
	mov	qword ptr [rsp + 0x40], rax
	jmp	.label_52
	.section	.text
	.align	32
	#Procedure 0x401899
	.globl sub_401899
	.type sub_401899, @function
sub_401899:

	nop	dword ptr [rax]
.label_70:
	mov	al, 1
	mov	qword ptr [rsp + 0x28], rax
.label_52:
	mov	edx, OFFSET FLAT:label_58
	mov	ecx, OFFSET FLAT:main.long_options
	xor	r8d, r8d
	mov	edi, r12d
	mov	rsi, r15
	call	getopt_long
	cmp	eax, 0x40
	jle	.label_64
	add	eax, -0x41
	cmp	eax, 0x35
	ja	.label_66
	jmp	qword ptr [(rax * 8) + label_73]
.label_401:
	mov	al, 1
	mov	qword ptr [rsp + 0x20], rax
	mov	al, 1
	mov	qword ptr [rsp + 0x30], rax
	jmp	.label_70
.label_404:
	mov	al, 1
	mov	qword ptr [rsp + 0x20], rax
	jmp	.label_70
.label_405:
	mov	al, 1
	mov	qword ptr [rsp + 0x60], rax
	jmp	.label_52
.label_406:
	mov	al, 1
	mov	qword ptr [rsp + 0x20], rax
.label_402:
	mov	al, 1
	mov	qword ptr [rsp + 0x30], rax
	jmp	.label_52
.label_407:
	mov	al, 1
	mov	qword ptr [rsp + 0x20], rax
	jmp	.label_52
	.section	.text
	.align	32
	#Procedure 0x401912
	.globl sub_401912
	.type sub_401912, @function
sub_401912:

	nop	word ptr cs:[rax + rax]
.label_403:
	mov	r14b, 1
	jmp	.label_82
.label_64:
	cmp	eax, -1
	jne	.label_84
	lea	rdx, [rsp + 0xd8]
	mov	edi, 1
	mov	esi, 1
	call	__fxstat
	test	eax, eax
	js	.label_92
	mov	rax, qword ptr [rsp + 0x110]
	movabs	rcx, 0x2000000000000001
	cmp	rax, rcx
	mov	edx, 0x200
	mov	r13d, 0x200
	cmovb	r13, rax
	test	rax, rax
	cmovle	r13, rdx
	cmp	rax, rcx
	mov	ecx, 0x20000
	cmovae	r13, rcx
	test	rax, rax
	cmovle	r13, rcx
	cmp	rax, 0x20000
	cmovl	r13, rcx
	mov	rax, qword ptr [rsp + 0xd8]
	mov	qword ptr [rsp + 0xc0], rax
	mov	rax, qword ptr [rsp + 0xe0]
	mov	qword ptr [rsp + 0xb0], rax
	mov	eax, 0xf000
	and	eax, dword ptr [rsp + 0xf0]
	mov	dword ptr [rsp + 0x7c], eax
	mov	rsi, qword ptr [rsp + 0x40]
	test	sil, sil
	sete	al
	mov	qword ptr [rip + infile], OFFSET FLAT:label_94
	mov	rdx, qword ptr [rsp + 0x30]
	mov	ebx, edx
	mov	rcx, qword ptr [rsp + 0x20]
	or	bl, cl
	mov	rcx, qword ptr [rsp + 0x28]
	or	bl, cl
	mov	rcx, qword ptr [rsp + 0x60]
	or	bl, cl
	or	bl, sil
	mov	byte ptr [rsp + 0x15], bl
	mov	rcx, qword ptr [rsp + 0x50]
	lea	rsi, [rcx - 1]
	mov	qword ptr [rsp + 0x98], rsi
	lea	rcx, [rcx + r13 + 0x12]
	mov	qword ptr [rsp + 0xa8], rcx
	test	r14b, r14b
	setne	cl
	or	cl, al
	mov	byte ptr [rsp + 0x16], cl
	test	dl, dl
	sete	byte ptr [rsp + 0x17]
	movsxd	rbp, dword ptr [rip + optind]
	movsxd	r14, r12d
	mov	al, 1
	mov	qword ptr [rsp + 0x18], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x80], rax
	mov	qword ptr [rsp + 0xa0], r15
	mov	qword ptr [rsp + 0x48], r14
	nop	word ptr [rax + rax]
.label_63:
	cmp	rbp, r14
	jge	.label_32
	mov	rdi, qword ptr [r15 + rbp*8]
	mov	qword ptr [rip + infile],  rdi
	jmp	.label_44
	.section	.text
	.align	32
	#Procedure 0x401a72
	.globl sub_401a72
	.type sub_401a72, @function
sub_401a72:

	nop	word ptr cs:[rax + rax]
.label_32:
	mov	rdi, qword ptr [rip + infile]
.label_44:
	cmp	byte ptr [rdi], 0x2d
	jne	.label_49
	cmp	byte ptr [rdi + 1], 0
	je	.label_50
.label_49:
	xor	esi, esi
	xor	eax, eax
	call	open
	mov	dword ptr [rip + input_desc],  eax
	test	eax, eax
	jns	.label_53
	jmp	.label_57
.label_50:
	mov	dword ptr [rip + input_desc],  0
	mov	al, 1
	mov	qword ptr [rsp + 0x80], rax
	xor	eax, eax
.label_53:
	mov	edi, 1
	mov	esi, eax
	lea	rdx, [rsp + 0xd8]
	call	__fxstat
	test	eax, eax
	js	.label_69
	mov	rax, qword ptr [rsp + 0x110]
	movabs	rcx, 0x2000000000000001
	cmp	rax, rcx
	mov	esi, 0x200
	cmovb	rsi, rax
	test	rax, rax
	mov	edx, 0x200
	cmovle	rsi, rdx
	cmp	rax, rcx
	mov	ecx, 0x20000
	cmovae	rsi, rcx
	test	rax, rax
	cmovle	rsi, rcx
	cmp	rax, 0x20000
	cmovl	rsi, rcx
	mov	qword ptr [rsp + 0x68], rsi
	mov	edi, dword ptr [rip + input_desc]
	xor	esi, esi
	xor	edx, edx
	mov	ecx, 2
	call	fdadvise
	cmp	dword ptr [rsp + 0x7c], 0x8000
	jne	.label_93
	mov	rax, qword ptr [rsp + 0xc0]
	cmp	qword ptr [rsp + 0xd8], rax
	jne	.label_93
	mov	rax, qword ptr [rsp + 0xb0]
	cmp	qword ptr [rsp + 0xe0], rax
	jne	.label_93
	mov	edi, dword ptr [rip + input_desc]
	xor	esi, esi
	mov	edx, 1
	call	lseek
	cmp	rax, qword ptr [rsp + 0x108]
	jge	.label_93
	xor	eax, eax
	mov	qword ptr [rsp + 0x18], rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_88
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdx, qword ptr [rip + infile]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	jmp	.label_78
	.section	.text
	.align	32
	#Procedure 0x401bce
	.globl sub_401bce
	.type sub_401bce, @function
sub_401bce:

	nop	
.label_93:
	mov	qword ptr [rsp + 0x58], rbp
	cmp	byte ptr [rsp + 0x15], 0
	je	.label_113
	mov	rbx, qword ptr [rsp + 0x50]
	mov	rbp, qword ptr [rsp + 0x68]
	lea	rdi, [rbp + rbx]
	call	xmalloc
	mov	r14, rax
	mov	rax, qword ptr [rsp + 0xa8]
	lea	rdi, [rax + rbp*4]
	call	xmalloc
	mov	rcx, rax
	mov	qword ptr [rsp + 0x88], r14
	lea	rsi, [r14 + rbx - 1]
	xor	edx, edx
	mov	rax, rsi
	div	rbx
	sub	rsi, rdx
	mov	qword ptr [rsp + 0xb8], rcx
	lea	r8, [rcx + rbx - 1]
	xor	edx, edx
	mov	rax, r8
	div	rbx
	sub	r8, rdx
	mov	ebp, dword ptr [rip + newlines2]
	lea	r12, [rsi + 1]
	lea	rax, [r8 + r13]
	mov	qword ptr [rsp + 0xd0], rax
	mov	al, 1
	mov	dword ptr [rsp + 0x38], eax
	mov	r15, r8
	mov	qword ptr [rsp + 0x90], rsi
	mov	qword ptr [rsp + 0x70], r8
	jmp	.label_29
	.section	.text
	.align	32
	#Procedure 0x401c6c
	.globl sub_401c6c
	.type sub_401c6c, @function
sub_401c6c:

	nop	dword ptr [rax]
.label_43:
	mov	rsi, rax
	mov	rcx, qword ptr [rsp + 0x90]
	add	rsi, rcx
	mov	byte ptr [rcx + rax], 0xa
	mov	r12, rcx
	mov	r8, r14
	jmp	.label_47
	.section	.text
	.align	32
	#Procedure 0x401c8d
	.globl sub_401c8d
	.type sub_401c8d, @function
sub_401c8d:

	nop	dword ptr [rax]
.label_107:
	lea	r14d, [rbp + 1]
	test	ebp, ebp
	js	.label_62
	mov	eax, 2
	cmovne	r14d, eax
	mov	rax, qword ptr [rsp + 0x60]
	test	al, al
	je	.label_54
	test	ebp, ebp
	je	.label_54
	mov	ebp, 2
	jmp	.label_60
.label_54:
	cmp	byte ptr [rsp + 0x16], 0
	jne	.label_62
	mov	rax, qword ptr [rip + line_num_start]
	mov	ecx, OFFSET FLAT:label_67
	nop	word ptr cs:[rax + rax]
.label_75:
	movzx	ebx, byte ptr [rcx]
	mov	edx, ebx
	inc	dl
	mov	byte ptr [rcx], dl
	cmp	bl, 0x39
	jl	.label_72
	mov	byte ptr [rcx], 0x30
	dec	rcx
	cmp	rcx, rax
	jae	.label_75
	mov	ecx, OFFSET FLAT:line_buf
	mov	rbx, rsi
	cmp	rax, rcx
	jbe	.label_76
	lea	rcx, [rax - 1]
	mov	qword ptr [rip + line_num_start],  rcx
	mov	byte ptr [rax - 1], 0x31
	mov	rax, rcx
	jmp	.label_79
.label_72:
	mov	rbx, rsi
	mov	rsi, qword ptr [rip + line_num_print]
	jmp	.label_55
.label_116:
	cmp	r12d, 0x5f
	je	.label_83
	jmp	.label_87
.label_76:
	mov	byte ptr [rip + line_buf],  0x3e
.label_79:
	mov	rsi, qword ptr [rip + line_num_print]
	cmp	rax, rsi
	jae	.label_55
	dec	rsi
	mov	qword ptr [rip + line_num_print],  rsi
.label_55:
	mov	rdi, r15
	call	stpcpy
	mov	r15, rax
	mov	rsi, rbx
.label_62:
	mov	rax, qword ptr [rsp + 0x28]
	test	al, al
	je	.label_96
	mov	byte ptr [r15], 0x24
	inc	r15
.label_96:
	mov	byte ptr [r15], 0xa
	inc	r15
	mov	ebp, r14d
.label_60:
	mov	r8, qword ptr [rsp + 0x70]
.label_47:
	mov	bl, byte ptr [r12]
	inc	r12
	cmp	bl, 0xa
	je	.label_29
	mov	rax, qword ptr [rsp + 0x40]
	test	al, al
	je	.label_102
	test	ebp, ebp
	js	.label_102
	mov	rdi, qword ptr [rip + line_num_start]
	mov	ecx, OFFSET FLAT:label_67
.label_110:
	movzx	eax, byte ptr [rcx]
	mov	edx, eax
	inc	dl
	mov	byte ptr [rcx], dl
	cmp	al, 0x39
	jl	.label_108
	mov	byte ptr [rcx], 0x30
	dec	rcx
	cmp	rcx, rdi
	jae	.label_110
	mov	eax, OFFSET FLAT:line_buf
	mov	r14, rsi
	cmp	rdi, rax
	jbe	.label_112
	lea	rax, [rdi - 1]
	mov	qword ptr [rip + line_num_start],  rax
	mov	byte ptr [rdi - 1], 0x31
	mov	rdi, rax
	jmp	.label_114
.label_108:
	mov	rbp, r8
	mov	r14, rsi
	mov	rsi, qword ptr [rip + line_num_print]
	jmp	.label_100
.label_112:
	mov	byte ptr [rip + line_buf],  0x3e
.label_114:
	mov	rsi, qword ptr [rip + line_num_print]
	mov	rbp, r8
	cmp	rdi, rsi
	jae	.label_100
	dec	rsi
	mov	qword ptr [rip + line_num_print],  rsi
.label_100:
	mov	rdi, r15
	call	stpcpy
	mov	r15, rax
	mov	rsi, r14
	mov	r8, rbp
.label_102:
	mov	rax, qword ptr [rsp + 0x20]
	test	al, al
	jne	.label_33
	jmp	.label_34
	.section	.text
	.align	32
	#Procedure 0x401e37
	.globl sub_401e37
	.type sub_401e37, @function
sub_401e37:

	nop	word ptr [rax + rax]
.label_40:
	movzx	ebx, byte ptr [r12]
	inc	r12
.label_33:
	cmp	bl, 0x20
	jb	.label_37
	cmp	bl, 0x7e
	ja	.label_39
	mov	byte ptr [r15], bl
	inc	r15
	jmp	.label_40
	.section	.text
	.align	32
	#Procedure 0x401e5a
	.globl sub_401e5a
	.type sub_401e5a, @function
sub_401e5a:

	nop	word ptr [rax + rax]
.label_37:
	mov	rax, qword ptr [rsp + 0x30]
	test	al, al
	jne	.label_42
	cmp	bl, 9
	jne	.label_42
	mov	byte ptr [r15], 9
	inc	r15
	jmp	.label_40
	.section	.text
	.align	32
	#Procedure 0x401e77
	.globl sub_401e77
	.type sub_401e77, @function
sub_401e77:

	nop	word ptr [rax + rax]
.label_42:
	mov	ebp, 0xffffffff
	cmp	bl, 0xa
	je	.label_29
	mov	byte ptr [r15], 0x5e
	add	bl, 0x40
	mov	byte ptr [r15 + 1], bl
	jmp	.label_105
	.section	.text
	.align	32
	#Procedure 0x401e9b
	.globl sub_401e9b
	.type sub_401e9b, @function
sub_401e9b:

	nop	dword ptr [rax + rax]
.label_39:
	cmp	bl, 0x7f
	jne	.label_111
	mov	word ptr [r15], 0x3f5e
.label_105:
	add	r15, 2
	jmp	.label_40
.label_111:
	mov	word ptr [r15], 0x2d4d
	cmp	bl, 0xa0
	jb	.label_59
	cmp	bl, 0xff
	je	.label_77
	xor	bl, 0x80
	mov	byte ptr [r15 + 2], bl
	add	r15, 3
	jmp	.label_40
.label_59:
	mov	byte ptr [r15 + 2], 0x5e
	add	bl, 0xc0
	mov	byte ptr [r15 + 3], bl
	add	r15, 4
	jmp	.label_40
.label_77:
	mov	word ptr [r15 + 2], 0x3f5e
	add	r15, 4
	jmp	.label_40
	.section	.text
	.align	32
	#Procedure 0x401ef6
	.globl sub_401ef6
	.type sub_401ef6, @function
sub_401ef6:

	nop	word ptr cs:[rax + rax]
.label_81:
	movzx	ebx, byte ptr [r12]
	inc	r12
.label_34:
	cmp	bl, 9
	setne	al
	or	al, byte ptr [rsp + 0x17]
	je	.label_80
	mov	ebp, 0xffffffff
	cmp	bl, 0xa
	je	.label_29
	mov	byte ptr [r15], bl
	inc	r15
	jmp	.label_81
	.section	.text
	.align	32
	#Procedure 0x401f26
	.globl sub_401f26
	.type sub_401f26, @function
sub_401f26:

	nop	word ptr cs:[rax + rax]
.label_80:
	mov	word ptr [r15], 0x495e
	add	r15, 2
	jmp	.label_81
	.section	.text
	.align	32
	#Procedure 0x401f3c
	.globl sub_401f3c
	.type sub_401f3c, @function
sub_401f3c:

	nop	dword ptr [rax]
.label_29:
	cmp	qword ptr [rsp + 0xd0], r15
	ja	.label_89
	mov	qword ptr [rsp + 0xc8], rbp
	mov	r14, rsi
	mov	rbp, r8
	nop	dword ptr [rax + rax]
.label_99:
	mov	edi, 1
	mov	rsi, rbp
	mov	rdx, r13
	call	full_write
	cmp	rax, r13
	jne	.label_35
	add	rbp, r13
	mov	rbx, r15
	sub	rbx, rbp
	cmp	rbx, r13
	jae	.label_99
	mov	rdi, qword ptr [rsp + 0x70]
	mov	rsi, rbp
	mov	rbp, rdi
	mov	rdx, rbx
	call	memmove
	mov	r8, rbp
	add	rbx, r8
	mov	r15, rbx
	mov	rsi, r14
	mov	rbp, qword ptr [rsp + 0xc8]
.label_89:
	cmp	r12, rsi
	jbe	.label_107
	mov	dword ptr [rsp + 0x3c], 0
	mov	eax, dword ptr [rsp + 0x38]
	test	al, 1
	mov	r14, r8
	je	.label_109
	mov	edi, dword ptr [rip + input_desc]
	mov	esi, 0x541b
	xor	eax, eax
	lea	rdx, [rsp + 0x3c]
	call	ioctl
	test	eax, eax
	jns	.label_83
	call	__errno_location
	mov	r12d, dword ptr [rax]
	mov	dword ptr [rsp + 0x38], 0
	cmp	r12, 0x26
	ja	.label_116
	movabs	rax, 0x4002480000
	bt	rax, r12
	jae	.label_116
.label_83:
	cmp	dword ptr [rsp + 0x3c], 0
	mov	r8, r14
	jne	.label_30
.label_109:
	mov	rbx, r15
	sub	rbx, r8
	je	.label_30
	mov	edi, 1
	mov	rsi, r8
	mov	rdx, rbx
	mov	r15, r8
	call	full_write
	cmp	rax, rbx
	jne	.label_35
.label_30:
	mov	edi, dword ptr [rip + input_desc]
	mov	rsi, qword ptr [rsp + 0x90]
	mov	rdx, qword ptr [rsp + 0x68]
	call	safe_read
	test	rax, rax
	je	.label_41
	cmp	rax, -1
	jne	.label_43
	call	__errno_location
	mov	rbx, r14
	mov	r12, rax
	mov	r14d, dword ptr [r12]
	mov	rdx, qword ptr [rip + infile]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	esi, r14d
	call	error
	sub	r15, rbx
	je	.label_56
	mov	edi, 1
	mov	rsi, rbx
	mov	rdx, r15
	call	full_write
	cmp	rax, r15
	jne	.label_61
.label_56:
	mov	dword ptr [rip + newlines2],  ebp
	xor	ebx, ebx
	jmp	.label_65
	.section	.text
	.align	32
	#Procedure 0x4020cd
	.globl sub_4020cd
	.type sub_4020cd, @function
sub_4020cd:

	nop	dword ptr [rax]
.label_69:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	mov	rdx, qword ptr [rip + infile]
	xor	eax, eax
	mov	qword ptr [rsp + 0x18], rax
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	esi, ebx
	call	error
	jmp	.label_78
.label_113:
	mov	rcx, qword ptr [rsp + 0x68]
	cmp	rcx, r13
	cmovbe	rcx, r13
	mov	rax, qword ptr [rsp + 0x98]
	mov	r12, rcx
	lea	rdi, [rax + rcx]
	call	xmalloc
	mov	rcx, qword ptr [rsp + 0x50]
	mov	qword ptr [rsp + 0x88], rax
	lea	r14, [rax + rcx - 1]
	xor	edx, edx
	mov	rax, r14
	div	rcx
	sub	r14, rdx
	nop	word ptr cs:[rax + rax]
.label_101:
	mov	edi, dword ptr [rip + input_desc]
	mov	rsi, r14
	mov	rdx, r12
	call	safe_read
	mov	rbp, rax
	mov	bl, 1
	test	rbp, rbp
	je	.label_97
	cmp	rbp, -1
	je	.label_98
	mov	edi, 1
	mov	rsi, r14
	mov	rdx, rbp
	call	full_write
	cmp	rax, rbp
	je	.label_101
	jmp	.label_35
.label_41:
	mov	rsi, r14
	sub	r15, rsi
	je	.label_95
	mov	edi, 1
	mov	rdx, r15
	call	full_write
	cmp	rax, r15
	jne	.label_35
.label_95:
	mov	dword ptr [rip + newlines2],  ebp
	mov	bl, 1
	jmp	.label_65
.label_98:
	call	__errno_location
	mov	ebp, dword ptr [rax]
	mov	rdx, qword ptr [rip + infile]
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	esi, ebp
	call	error
	jmp	.label_97
.label_87:
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_115
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rsi, qword ptr [rip + infile]
	mov	edi, 4
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, r12d
	mov	rdx, r14
	call	error
	mov	dword ptr [rip + newlines2],  ebp
	nop	word ptr [rax + rax]
.label_65:
	mov	rdi, qword ptr [rsp + 0xb8]
	call	free
	mov	r15, qword ptr [rsp + 0xa0]
.label_97:
	mov	rbp, qword ptr [rsp + 0x58]
	mov	r14, qword ptr [rsp + 0x48]
	mov	rax, qword ptr [rsp + 0x18]
	and	al, bl
	mov	qword ptr [rsp + 0x18], rax
	mov	rdi, qword ptr [rsp + 0x88]
	call	free
.label_78:
	mov	rax, qword ptr [rip + infile]
	cmp	byte ptr [rax], 0x2d
	jne	.label_45
	cmp	byte ptr [rax + 1], 0
	je	.label_48
.label_45:
	mov	edi, dword ptr [rip + input_desc]
	call	close
	test	eax, eax
	jns	.label_48
.label_57:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	mov	rdx, qword ptr [rip + infile]
	xor	eax, eax
	mov	qword ptr [rsp + 0x18], rax
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	esi, ebx
	call	error
.label_48:
	inc	rbp
	cmp	rbp, r14
	jl	.label_63
	mov	rax, qword ptr [rsp + 0x80]
	test	al, 1
	je	.label_68
	xor	edi, edi
	call	close
	test	eax, eax
	js	.label_71
.label_68:
	mov	rax, qword ptr [rsp + 0x18]
	not	al
	and	al, 1
	movzx	eax, al
	add	rsp, 0x168
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_35:
	call	__errno_location
	mov	ebx, dword ptr [rax]
.label_85:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_74
.label_104:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_84:
	cmp	eax, 0xffffff7d
	je	.label_86
	cmp	eax, 0xffffff7e
	jne	.label_66
	xor	edi, edi
	call	usage
.label_86:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	qword ptr [rsp], 0
	mov	esi, OFFSET FLAT:label_11
	mov	edx, OFFSET FLAT:label_16
	mov	r8d, OFFSET FLAT:label_90
	mov	r9d, OFFSET FLAT:label_91
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_66:
	mov	edi, 1
	call	usage
.label_61:
	mov	ebx, dword ptr [r12]
	jmp	.label_85
.label_92:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_103
	jmp	.label_104
.label_71:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_106
	jmp	.label_104
	.section	.text
	.align	32
	#Procedure 0x4023b6
	.globl sub_4023b6
	.type sub_4023b6, @function
sub_4023b6:

	nop	
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4023c0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	32
	#Procedure 0x4023c8
	.globl sub_4023c8
	.type sub_4023c8, @function
sub_4023c8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4023d0
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	32
	#Procedure 0x4023d8
	.globl sub_4023d8
	.type sub_4023d8, @function
sub_4023d8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4023e0

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_121
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_117
	cmp	dword ptr [rbp], 0x20
	jne	.label_117
.label_121:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_119
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_117:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_74
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_118
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_119:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_118:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_120
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4024a0

	.globl fdadvise
	.type fdadvise, @function
fdadvise:
	jmp	posix_fadvise
	.section	.text
	.align	32
	#Procedure 0x4024a5
	.globl sub_4024a5
	.type sub_4024a5, @function
sub_4024a5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4024b0
	.globl fadvise
	.type fadvise, @function
fadvise:

	push	rbx
	mov	ebx, esi
	test	rdi, rdi
	je	.label_122
	call	fileno
	xor	esi, esi
	xor	edx, edx
	mov	edi, eax
	mov	ecx, ebx
	pop	rbx
	jmp	posix_fadvise
.label_122:
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x4024cd
	.globl sub_4024cd
	.type sub_4024cd, @function
sub_4024cd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4024d0

	.globl full_write
	.type full_write, @function
full_write:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r15, rdx
	mov	rbx, rsi
	mov	ebp, edi
	xor	r14d, r14d
	test	r15, r15
	je	.label_123
	nop	word ptr [rax + rax]
.label_125:
	mov	edi, ebp
	mov	rsi, rbx
	mov	rdx, r15
	call	safe_write
	cmp	rax, -1
	je	.label_123
	test	rax, rax
	je	.label_124
	add	r14, rax
	add	rbx, rax
	sub	r15, rax
	jne	.label_125
	jmp	.label_123
.label_124:
	call	__errno_location
	mov	dword ptr [rax], 0x1c
.label_123:
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40252e
	.globl sub_40252e
	.type sub_40252e, @function
sub_40252e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402530

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_129
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_127
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_126
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_127
	mov	esi, OFFSET FLAT:label_128
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_131
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_131:
	mov	rbx, r14
.label_127:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_129:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_130
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4025d1
	.globl sub_4025d1
	.type sub_4025d1, @function
sub_4025d1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4025e0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402613
	.globl sub_402613
	.type sub_402613, @function
sub_402613:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402620
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40262f
	.globl sub_40262f
	.type sub_40262f, @function
sub_40262f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402630
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x40263f
	.globl sub_40263f
	.type sub_40263f, @function
sub_40263f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402640
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x402676
	.globl sub_402676
	.type sub_402676, @function
sub_402676:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402680
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x402693
	.globl sub_402693
	.type sub_402693, @function
sub_402693:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4026a0
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_132
	test	rdx, rdx
	je	.label_132
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_132:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4026cb
	.globl sub_4026cb
	.type sub_4026cb, @function
sub_4026cb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4026d0
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402745
	.globl sub_402745
	.type sub_402745, @function
sub_402745:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402750

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xb8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x20], rcx
	mov	qword ptr [rsp + 0x30], rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rsp + 0x100]
	mov	qword ptr [rsp + 0x70], rax
	mov	rax, qword ptr [rsp + 0xf8]
	mov	qword ptr [rsp + 0x78], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xa8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x90], eax
	mov	dword ptr [rsp + 0x18], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x8c], ebx
	mov	r10b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x40], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa0], rcx
.label_254:
	mov	r11, rbp
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_252
	mov	edi, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r8, qword ptr [rsp + 0x30]
	jmp	qword ptr [(rcx * 8) + label_135]
.label_432:
	mov	byte ptr [rsp + 7], r10b
	mov	edi, OFFSET FLAT:label_142
	mov	esi, r15d
	mov	rbx, r11
	mov	ebp, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x78], rax
	mov	edi, OFFSET FLAT:label_148
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebp
	mov	r10b, byte ptr [rsp + 7]
	mov	r11, rbx
	mov	qword ptr [rsp + 0x70], rax
.label_433:
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x78]
	jne	.label_159
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_159
	xor	r14d, r14d
	nop	word ptr cs:[rax + rax]
.label_177:
	cmp	r14, r11
	jae	.label_216
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], al
.label_216:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_177
.label_159:
	mov	rbp, qword ptr [rsp + 0x70]
	mov	rdi, rbp
	mov	rbx, r11
	call	strlen
	mov	r11, rbx
	mov	qword ptr [rsp + 0x40], rax
	mov	edi, r15d
	mov	qword ptr [rsp + 0x48], rbp
	mov	r13b, 1
	mov	sil, r12b
	mov	r8, qword ptr [rsp + 0x30]
	mov	r10b, byte ptr [rsp + 7]
	mov	r9d, dword ptr [rsp + 0x50]
	jmp	.label_162
.label_425:
	xor	edi, edi
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_162
.label_428:
	mov	al, 1
.label_426:
	mov	r12b, 1
.label_429:
	test	r12b, 1
	mov	cl, 1
	je	.label_196
	mov	ecx, eax
.label_196:
	mov	al, cl
.label_427:
	test	r12b, 1
	jne	.label_198
	test	r11, r11
	je	.label_199
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx], 0x27
.label_199:
	mov	r14d, 1
	jmp	.label_200
.label_198:
	xor	r14d, r14d
.label_200:
	mov	ecx, OFFSET FLAT:label_148
	mov	qword ptr [rsp + 0x48], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x40], rcx
	mov	r13d, eax
	mov	sil, r12b
	mov	edi, 2
	jmp	.label_162
.label_430:
	test	r12b, 1
	jne	.label_209
	test	r11, r11
	je	.label_211
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 0x22
.label_211:
	mov	r14d, 1
	jmp	.label_213
.label_431:
	mov	r13b, 1
	mov	edi, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_215
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	sil, 1
	jmp	.label_162
.label_209:
	xor	r14d, r14d
.label_213:
	mov	eax, OFFSET FLAT:label_215
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	r13b, 1
	mov	sil, r12b
	mov	edi, 5
	nop	word ptr cs:[rax + rax]
.label_162:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	r12b
	cmp	edi, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x2a]
	mov	edx, r15d
	mov	byte ptr [rsp + 0x17], cl
	and	dl, cl
	cmp	qword ptr [rsp + 0x40], 0
	setne	cl
	mov	ebx, ecx
	mov	byte ptr [rsp + 0x2e], dl
	and	bl, dl
	mov	byte ptr [rsp + 0x2f], bl
	mov	edx, esi
	and	dl, 1
	sete	bl
	and	al, dl
	mov	byte ptr [rsp + 0x2b], al
	mov	byte ptr [rsp + 6], dl
	and	r12b, dl
	mov	byte ptr [rsp + 0x2d], r12b
	or	bl, r15b
	mov	byte ptr [rsp + 0x1f], bl
	mov	byte ptr [rsp + 0x2c], r13b
	mov	qword ptr [rsp + 0xb0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x29], r13b
	xor	esi, esi
	mov	qword ptr [rsp + 0x38], rdi
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r12, rdi
	mov	rdi, r8
	jmp	.label_237
	.section	.text
	.align	32
	#Procedure 0x402a3d
	.globl sub_402a3d
	.type sub_402a3d, @function
sub_402a3d:

	nop	dword ptr [rax]
.label_169:
	inc	rsi
.label_237:
	cmp	rbp, -1
	je	.label_152
	cmp	rsi, rbp
	jne	.label_154
	jmp	.label_155
	.section	.text
	.align	32
	#Procedure 0x402a53
	.globl sub_402a53
	.type sub_402a53, @function
sub_402a53:

	nop	word ptr cs:[rax + rax]
.label_152:
	mov	rcx, -1
	cmp	byte ptr [rdi + rsi], 0
	je	.label_160
.label_154:
	cmp	byte ptr [rsp + 0x2f], 0
	je	.label_179
	mov	rax, qword ptr [rsp + 0x40]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_189
	cmp	rbp, -1
	jne	.label_189
	mov	r15d, r10d
	mov	rbp, r11
	mov	r13d, r9d
	mov	r12, r14
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r14, r12
	mov	r9d, r13d
	mov	r12, qword ptr [rsp + 0x38]
	mov	r10d, r15d
	mov	r11, rbp
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_189:
	cmp	rbx, rbp
	jbe	.label_185
.label_179:
	xor	r8d, r8d
.label_140:
	movzx	r15d, byte ptr [rdi + rsi]
	cmp	r15, 0x7e
	ja	.label_178
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_190]
.label_483:
	test	rsi, rsi
	jne	.label_180
	jmp	.label_195
	.section	.text
	.align	32
	#Procedure 0x402af5
	.globl sub_402af5
	.type sub_402af5, @function
sub_402af5:

	nop	word ptr cs:[rax + rax]
.label_185:
	mov	qword ptr [rsp + 0x20], rbp
	mov	ebp, r9d
	mov	r15d, r10d
	mov	rbx, r11
	mov	r12, rsi
	lea	rdi, [rdi + rsi]
	mov	rsi, qword ptr [rsp + 0x48]
	mov	rdx, qword ptr [rsp + 0x40]
	call	memcmp
	test	eax, eax
	sete	r8b
	jne	.label_204
	cmp	byte ptr [rsp + 6], 0
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	je	.label_140
	jmp	.label_137
.label_204:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_140
.label_487:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_224
	test	rsi, rsi
	jne	.label_228
	cmp	rbp, 1
	je	.label_195
	xor	r13d, r13d
	jmp	.label_145
.label_476:
	cmp	byte ptr [rsp + 0x17], 0
	je	.label_234
	cmp	byte ptr [rsp + 6], 0
	jne	.label_225
	cmp	r12d, 2
	jne	.label_240
	mov	eax, r9d
	and	al, 1
	jne	.label_240
	cmp	r14, r11
	jae	.label_243
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_243:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_246
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_246:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_222
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_222:
	add	r14, 3
	mov	r9b, 1
.label_240:
	mov	rcx, r14
	cmp	rcx, r11
	jae	.label_134
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + rcx], 0x5c
.label_134:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r12d, 2
	je	.label_136
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_136
	mov	dl, byte ptr [rdi + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_136
	cmp	r14, r11
	jae	.label_227
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x30
.label_227:
	lea	rdx, [rcx + 2]
	cmp	rdx, r11
	jae	.label_251
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rdx], 0x30
.label_251:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_145
.label_477:
	mov	bl, 0x62
	jmp	.label_168
.label_478:
	mov	cl, 0x74
	jmp	.label_171
.label_479:
	mov	bl, 0x76
	jmp	.label_168
.label_480:
	mov	bl, 0x66
	jmp	.label_168
.label_481:
	mov	cl, 0x72
	jmp	.label_171
.label_484:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa0], rax
	cmp	r12d, 2
	jne	.label_176
	cmp	byte ptr [rsp + 6], 0
	jne	.label_138
	test	r11, r11
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r11
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	r11, rax
	cmp	r14, r11
	jae	.label_182
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_182:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_194
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x5c
.label_194:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_197
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_197:
	add	r14, 3
	xor	r9d, r9d
.label_176:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_145
.label_485:
	mov	r15b, 0x3f
	cmp	r12d, 5
	je	.label_201
	cmp	r12d, 2
	jne	.label_180
	cmp	byte ptr [rsp + 6], 0
	je	.label_180
	jmp	.label_138
.label_486:
	cmp	r12d, 2
	jne	.label_210
	cmp	byte ptr [rsp + 6], 0
	jne	.label_138
	mov	r15b, 0x5c
	xor	eax, eax
	xor	r13d, r13d
	jmp	.label_163
.label_178:
	mov	dword ptr [rsp + 0x54], r8d
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	mov	qword ptr [rsp + 0x98], r11
	cmp	qword ptr [rsp + 0xa8], 1
	jne	.label_219
	mov	qword ptr [rsp + 0x20], rbp
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	r12d, 1
.label_174:
	and	r13b, 1
	mov	r8d, r13d
	or	r8b, byte ptr [rsp + 0x2a]
	mov	qword ptr [rsp + 0x60], r12
	cmp	r12, 1
	mov	r11, qword ptr [rsp + 0x98]
	mov	r10b, byte ptr [rsp + 7]
	mov	r12, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x50]
	ja	.label_239
	test	r8b, r8b
	je	.label_239
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rsp + 0x54]
	jmp	.label_145
.label_224:
	test	rsi, rsi
	jne	.label_133
	mov	cl, byte ptr [rdi + 1]
	test	cl, cl
	jne	.label_133
.label_195:
	mov	dl, 1
.label_482:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_138
	xor	eax, eax
	mov	r13b, dl
	nop	word ptr [rax + rax]
.label_145:
	cmp	byte ptr [rsp + 0x2e], 0
	je	.label_147
	cmp	qword ptr [rsp + 0xf0], 0
	jne	.label_212
	jmp	.label_151
	.section	.text
	.align	32
	#Procedure 0x402e44
	.globl sub_402e44
	.type sub_402e44, @function
sub_402e44:

	nop	word ptr cs:[rax + rax]
.label_147:
	cmp	byte ptr [rsp + 0x2d], 0
	je	.label_151
.label_212:
	mov	ebx, r8d
	mov	r8, rsi
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_157
	mov	rcx, qword ptr [rsp + 0xf0]
	and	esi, dword ptr [rcx + rdx*4]
	mov	ebx, r15d
	mov	rsi, r8
	je	.label_163
	jmp	.label_173
	.section	.text
	.align	32
	#Procedure 0x402e8d
	.globl sub_402e8d
	.type sub_402e8d, @function
sub_402e8d:

	nop	dword ptr [rax]
.label_151:
	test	r8b, r8b
	mov	ebx, r15d
	jne	.label_173
	jmp	.label_163
.label_157:
	mov	ebx, r15d
	mov	rsi, r8
	jmp	.label_173
.label_234:
	cmp	dword ptr [rsp + 0x90], 0
	jne	.label_169
	xor	r15d, r15d
	jmp	.label_180
.label_210:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x29], 0
	je	.label_171
	xor	eax, eax
	mov	r15b, 0x5c
	xor	r13d, r13d
	jmp	.label_163
.label_171:
	cmp	byte ptr [rsp + 0x1f], 0
	mov	ebx, ecx
	je	.label_138
.label_168:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x17], 0
	mov	r13d, 0
	je	.label_145
	nop	word ptr cs:[rax + rax]
.label_173:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_225
	cmp	r12d, 2
	jne	.label_186
	mov	eax, r9d
	and	al, 1
	jne	.label_186
	cmp	r14, r11
	jae	.label_175
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_175:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_205
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_205:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_146
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_146:
	add	r14, 3
	mov	r9b, 1
.label_186:
	cmp	r14, r11
	jae	.label_250
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_250:
	inc	r14
	jmp	.label_153
.label_219:
	mov	qword ptr [rsp + 0x80], 0
	cmp	rbp, -1
	jne	.label_220
	mov	rbx, rsi
	call	strlen
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_220:
	lea	rax, [rdi + rsi]
	mov	qword ptr [rsp + 0x60], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rax, [rsp + 0x80]
	mov	rcx, rax
	mov	qword ptr [rsp + 0x20], rbp
	mov	qword ptr [rsp + 0x58], rsi
.label_184:
	lea	rbx, [r12 + rsi]
	lea	rsi, [rdi + rbx]
	mov	rdx, rbp
	sub	rdx, rbx
	lea	rdi, [rsp + 0x94]
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_245
	cmp	rbp, -1
	movabs	rsi, 0x20000002b
	je	.label_248
	cmp	rbp, -2
	je	.label_230
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x2b]
	cmp	al, 1
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, qword ptr [rsp + 0x98]
	jne	.label_170
	mov	rax, qword ptr [rsp + 0x60]
	lea	rax, [rax + r12]
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_235:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_202
	bt	rsi, rdx
	jb	.label_150
.label_202:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_235
.label_170:
	mov	edi, dword ptr [rsp + 0x94]
	call	iswprint
	test	eax, eax
	jne	.label_183
	xor	r13d, r13d
.label_183:
	lea	rdi, [rsp + 0x80]
	add	r12, rbp
	mov	rbx, rdi
	call	mbsinit
	mov	rcx, rbx
	test	eax, eax
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x58]
	je	.label_184
	jmp	.label_174
.label_136:
	xor	r13d, r13d
	jmp	.label_145
.label_133:
	mov	rbp, -1
	xor	r13d, r13d
	jmp	.label_145
.label_201:
	cmp	dword ptr [rsp + 0x8c], 0
	je	.label_180
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_180
	cmp	byte ptr [rdi + rsi + 1], 0x3f
	jne	.label_180
	movsx	edx, byte ptr [rdi + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_188
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_208
	cmp	byte ptr [rsp + 6], 0
	jne	.label_242
	cmp	r14, r11
	jae	.label_164
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x3f
.label_164:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_161
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_161:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_203
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_203:
	lea	rax, [r14 + 3]
	cmp	rax, r11
	jae	.label_236
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x3f
.label_236:
	add	r14, 4
	xor	eax, eax
	mov	rsi, rcx
	mov	r15b, dl
	xor	r13d, r13d
	jmp	.label_145
.label_180:
	xor	eax, eax
.label_228:
	xor	r13d, r13d
	jmp	.label_145
.label_239:
	add	qword ptr [rsp + 0x60], rsi
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_218
	.section	.text
	.align	32
	#Procedure 0x403172
	.globl sub_403172
	.type sub_403172, @function
sub_403172:

	nop	word ptr cs:[rax + rax]
.label_181:
	inc	r14
	mov	r15b, byte ptr [rdi + rsi + 1]
	mov	rsi, rdx
.label_218:
	test	r8b, r8b
	je	.label_229
	mov	ecx, dword ptr [rsp + 0x54]
	test	cl, 1
	je	.label_231
	cmp	r14, r11
	jae	.label_232
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x5c
.label_232:
	inc	r14
	mov	dword ptr [rsp + 0x54], 0
	jmp	.label_231
	.section	.text
	.align	32
	#Procedure 0x4031bc
	.globl sub_4031bc
	.type sub_4031bc, @function
sub_4031bc:

	nop	dword ptr [rax]
.label_229:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_137
	cmp	r12d, 2
	jne	.label_244
	mov	eax, r9d
	and	al, 1
	jne	.label_244
	cmp	r14, r11
	jae	.label_247
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_247:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_221
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x24
.label_221:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_253
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x27
.label_253:
	add	r14, 3
	mov	r9b, 1
.label_244:
	cmp	r14, r11
	jae	.label_165
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_165:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_143
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_143:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_149
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_149:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_231:
	lea	rdx, [rsi + 1]
	cmp	qword ptr [rsp + 0x60], rdx
	jbe	.label_163
	test	r9b, 1
	je	.label_187
	mov	ebx, eax
	and	bl, 1
	jne	.label_187
	mov	rbx, rsi
	cmp	r14, r11
	jae	.label_172
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + r14], 0x27
.label_172:
	lea	rsi, [r14 + 1]
	cmp	rsi, r11
	jae	.label_166
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rsi], 0x27
.label_166:
	add	r14, 2
	xor	r9d, r9d
	mov	rsi, rbx
.label_187:
	cmp	r14, r11
	jae	.label_181
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + r14], r15b
	jmp	.label_181
	.section	.text
	.align	32
	#Procedure 0x4032c3
	.globl sub_4032c3
	.type sub_4032c3, @function
sub_4032c3:

	nop	word ptr cs:[rax + rax]
.label_163:
	test	r9b, 1
	je	.label_191
	and	al, 1
	jne	.label_191
	cmp	r14, r11
	jae	.label_192
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_192:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_223
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_223:
	add	r14, 2
	xor	r9d, r9d
.label_191:
	mov	ebx, r15d
.label_153:
	cmp	r14, r11
	jae	.label_141
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], bl
.label_141:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, r10b
	mov	r10d, r13d
	jmp	.label_169
.label_248:
	xor	r13d, r13d
.label_245:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_174
.label_230:
	mov	rbp, qword ptr [rsp + 0x20]
	cmp	rbp, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	jbe	.label_217
	mov	rsi, qword ptr [rsp + 0x58]
.label_214:
	mov	rax, qword ptr [rsp + 0x60]
	cmp	byte ptr [rax + r12], 0
	je	.label_193
	lea	rax, [rsi + r12 + 1]
	inc	r12
	cmp	rax, rbp
	jb	.label_214
	xor	r13d, r13d
	jmp	.label_174
.label_217:
	xor	r13d, r13d
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_174
.label_193:
	xor	r13d, r13d
	jmp	.label_174
.label_188:
	xor	r13d, r13d
	jmp	.label_145
.label_208:
	xor	r13d, r13d
	mov	rsi, rbx
	jmp	.label_145
	.section	.text
	.align	32
	#Procedure 0x403398
	.globl sub_403398
	.type sub_403398, @function
sub_403398:

	nop	dword ptr [rax + rax]
.label_155:
	mov	rcx, rsi
.label_160:
	cmp	r12d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 6], 0
	je	.label_233
	or	al, dl
	je	.label_238
.label_233:
	cmp	r12d, 2
	setne	al
	cmp	byte ptr [rsp + 6], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa0]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x2c]
	mov	rsi, qword ptr [rsp + 0xb0]
	je	.label_241
	or	al, dl
	jne	.label_241
	test	r10b, 1
	jne	.label_249
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_241
	test	r11, r11
	mov	r15d, r12d
	mov	al, bl
	mov	qword ptr [rsp + 0x20], rcx
	mov	r12d, esi
	mov	rbp, qword ptr [rsp + 0x68]
	je	.label_254
.label_241:
	mov	rdx, qword ptr [rsp + 0x48]
	test	rdx, rdx
	je	.label_139
	cmp	byte ptr [rsp + 6], 0
	mov	rcx, qword ptr [rsp + 8]
	jne	.label_144
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_144
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_158:
	cmp	r14, r11
	jae	.label_156
	mov	byte ptr [rcx + r14], al
.label_156:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_158
	jmp	.label_144
.label_225:
	mov	qword ptr [rsp + 0x20], rbp
.label_137:
	mov	rdx, rdi
	jmp	.label_167
.label_138:
	mov	qword ptr [rsp + 0x20], rbp
.label_150:
	mov	rdx, rdi
	mov	eax, 2
.label_226:
	mov	qword ptr [rsp + 0x38], rax
.label_167:
	mov	r9d, dword ptr [rsp + 0x18]
	cmp	byte ptr [rsp + 0x17], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r11
	mov	rcx, qword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_206:
	mov	r14, rax
.label_207:
	mov	rax, r14
	add	rsp, 0xb8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_238:
	mov	rdx, rdi
	mov	qword ptr [rsp + 0x20], rcx
	jmp	.label_167
.label_249:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x20]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	qword ptr [rsp + 0x108]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_206
.label_139:
	mov	rcx, qword ptr [rsp + 8]
.label_144:
	cmp	r14, r11
	jae	.label_207
	mov	byte ptr [rcx + r14], 0
	jmp	.label_207
.label_242:
	mov	qword ptr [rsp + 0x20], rbp
	mov	rdx, rdi
	mov	eax, 5
	jmp	.label_226
.label_252:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403557
	.globl sub_403557
	.type sub_403557, @function
sub_403557:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403560
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403621
	.globl sub_403621
	.type sub_403621, @function
sub_403621:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403630
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_255
	mov	qword ptr [rax], rbx
.label_255:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40371c
	.globl sub_40371c
	.type sub_40371c, @function
sub_40371c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403720
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_256
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_258:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_258
.label_256:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_260
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_259], OFFSET FLAT:slot0
.label_260:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_257
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_257:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4037b1
	.globl sub_4037b1
	.type sub_4037b1, @function
sub_4037b1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4037c0
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4037ce
	.globl sub_4037ce
	.type sub_4037ce, @function
sub_4037ce:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4037d0

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_264
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_267
	cmp	r12d, 0x7fffffff
	je	.label_262
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_265
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_265:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_267:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_263
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_266
.label_263:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_261
	mov	rdi, r14
	call	free
.label_261:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_266:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_264:
	call	abort
.label_262:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40398d
	.globl sub_40398d
	.type sub_40398d, @function
sub_40398d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403990
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x40399a
	.globl sub_40399a
	.type sub_40399a, @function
sub_40399a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4039a0
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4039b9
	.globl sub_4039b9
	.type sub_4039b9, @function
sub_4039b9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4039c0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4039d8
	.globl sub_4039d8
	.type sub_4039d8, @function
sub_4039d8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4039e0
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_268
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_268:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403a4c
	.globl sub_403a4c
	.type sub_403a4c, @function
sub_403a4c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403a50
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_269
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_269:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403ab8
	.globl sub_403ab8
	.type sub_403ab8, @function
sub_403ab8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ac0

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_270
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_270:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403b28
	.globl sub_403b28
	.type sub_403b28, @function
sub_403b28:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403b30
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_271
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_271:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403b91
	.globl sub_403b91
	.type sub_403b91, @function
sub_403b91:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ba0
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x403c0e
	.globl sub_403c0e
	.type sub_403c0e, @function
sub_403c0e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403c10
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x403c7f
	.globl sub_403c7f
	.type sub_403c7f, @function
sub_403c7f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403c80

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x403cd5
	.globl sub_403cd5
	.type sub_403cd5, @function
sub_403cd5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ce0
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x403d34
	.globl sub_403d34
	.type sub_403d34, @function
sub_403d34:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403d40

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_275
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_275:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403dd5
	.globl sub_403dd5
	.type sub_403dd5, @function
sub_403dd5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403de0
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_276
	test	rdx, rdx
	je	.label_276
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_276:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403e4e
	.globl sub_403e4e
	.type sub_403e4e, @function
sub_403e4e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403e50
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_277
	test	rdx, rdx
	je	.label_277
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_277:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403eba
	.globl sub_403eba
	.type sub_403eba, @function
sub_403eba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ec0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_278
	test	rsi, rsi
	je	.label_278
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_278:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403f30
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_272]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_273]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_274]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_279
	test	rsi, rsi
	je	.label_279
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_279:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403f9c
	.globl sub_403f9c
	.type sub_403f9c, @function
sub_403f9c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403fa0
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x403faa
	.globl sub_403faa
	.type sub_403faa, @function
sub_403faa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403fb0
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x403fc8
	.globl sub_403fc8
	.type sub_403fc8, @function
sub_403fc8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403fd0
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x403fe1
	.globl sub_403fe1
	.type sub_403fe1, @function
sub_403fe1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ff0
	.globl quote
	.type quote, @function
quote:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x404009
	.globl sub_404009
	.type sub_404009, @function
sub_404009:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404010

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_284
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_288
	cmp	ecx, 0x55
	jne	.label_280
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_280
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_280
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_280
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_280
	cmp	byte ptr [rax + 5], 0
	jne	.label_280
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_286
	mov	eax, OFFSET FLAT:label_287
	jmp	.label_283
.label_288:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_280
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_280
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_280
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_280
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_280
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_280
	cmp	byte ptr [rax + 7], 0
	je	.label_285
.label_280:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_215
	mov	eax, OFFSET FLAT:label_148
.label_283:
	cmove	rax, rcx
.label_284:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_285:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_281
	mov	eax, OFFSET FLAT:label_282
	jmp	.label_283
	.section	.text
	.align	32
	#Procedure 0x4040d5
	.globl sub_4040d5
	.type sub_4040d5, @function
sub_4040d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4040e0

	.globl safe_read
	.type safe_read, @function
safe_read:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15d, edi
.label_290:
	mov	edi, r15d
	mov	rsi, r14
	mov	rdx, rbx
	call	read
	mov	rbp, rax
	test	rbp, rbp
	jns	.label_289
	call	__errno_location
	mov	eax, dword ptr [rax]
	cmp	eax, 4
	je	.label_290
	cmp	rbx, 0x7ff00001
	jb	.label_289
	cmp	eax, 0x16
	mov	ebx, 0x7ff00000
	je	.label_290
.label_289:
	mov	rax, rbp
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404133
	.globl sub_404133
	.type sub_404133, @function
sub_404133:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404140

	.globl safe_write
	.type safe_write, @function
safe_write:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15d, edi
.label_292:
	mov	edi, r15d
	mov	rsi, r14
	mov	rdx, rbx
	call	write
	mov	rbp, rax
	test	rbp, rbp
	jns	.label_291
	call	__errno_location
	mov	eax, dword ptr [rax]
	cmp	eax, 4
	je	.label_292
	cmp	rbx, 0x7ff00001
	jb	.label_291
	cmp	eax, 0x16
	mov	ebx, 0x7ff00000
	je	.label_292
.label_291:
	mov	rax, rbp
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404193
	.globl sub_404193
	.type sub_404193, @function
sub_404193:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4041a0

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_305
	mov	edx, OFFSET FLAT:label_296
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_302
.label_305:
	mov	edx, OFFSET FLAT:label_303
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_302:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_307
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_304
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_308
	jmp	qword ptr [(r12 * 8) + label_309]
.label_409:
	add	rsp, 8
	jmp	.label_295
.label_308:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_299
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_295
.label_410:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_294
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_411:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_300
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_412:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_297
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_413:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_311
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_295
.label_414:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_310
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_295
.label_415:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_293
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_295
.label_416:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_298
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_295
.label_418:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_301
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_295
.label_417:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_306
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_295:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4044f8
	.globl sub_4044f8
	.type sub_4044f8, @function
sub_4044f8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404500
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_312:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_312
	jmp	version_etc_arn
	.section	.text
	.align	32
	#Procedure 0x404521
	.globl sub_404521
	.type sub_404521, @function
sub_404521:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404530

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_323
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_325
.label_323:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_325:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_313
	cmp	r10d, 0x29
	jae	.label_322
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_324
.label_322:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_324:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_313
	cmp	r10d, 0x29
	jae	.label_320
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_321
.label_320:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_321:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_313
	cmp	r10d, 0x29
	jae	.label_318
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_319
.label_318:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_319:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_313
	cmp	r10d, 0x29
	jae	.label_316
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_317
.label_316:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_317:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_313
	cmp	r10d, 0x29
	jae	.label_314
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_315
.label_314:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_315:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_313
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_313
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_313
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_313
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_313:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	32
	#Procedure 0x404712
	.globl sub_404712
	.type sub_404712, @function
sub_404712:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404720

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_326
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_326:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	32
	#Procedure 0x4047a3
	.globl sub_4047a3
	.type sub_4047a3, @function
sub_4047a3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4047b0
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_327
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_328
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_330
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_16
	mov	ecx, OFFSET FLAT:label_10
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_329
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	32
	#Procedure 0x404824
	.globl sub_404824
	.type sub_404824, @function
sub_404824:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404830
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_331
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_332
	test	rax, rax
	je	.label_331
.label_332:
	pop	rbx
	ret	
.label_331:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404865
	.globl sub_404865
	.type sub_404865, @function
sub_404865:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404870

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_333
	test	rax, rax
	je	.label_334
.label_333:
	pop	rbx
	ret	
.label_334:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40488a
	.globl sub_40488a
	.type sub_40488a, @function
sub_40488a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404890
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_335
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_336
	test	rbx, rbx
	jne	.label_336
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_336:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_337
	test	rax, rax
	je	.label_335
.label_337:
	pop	rbx
	ret	
.label_335:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4048d8
	.globl sub_4048d8
	.type sub_4048d8, @function
sub_4048d8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4048e0

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_338
	test	rbx, rbx
	jne	.label_338
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_338:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_340
	test	rax, rax
	je	.label_339
.label_340:
	pop	rbx
	ret	
.label_339:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404910
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_344
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_346
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_341
.label_344:
	test	rcx, rcx
	jne	.label_347
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_347:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_342
.label_341:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_343
	test	rbx, rbx
	jne	.label_343
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_343:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_345
	test	rax, rax
	je	.label_346
.label_345:
	pop	rbx
	ret	
.label_346:
	call	xalloc_die
.label_342:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4049a7
	.globl sub_4049a7
	.type sub_4049a7, @function
sub_4049a7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4049b0
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_348
	test	rax, rax
	je	.label_349
.label_348:
	pop	rbx
	ret	
.label_349:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4049ca
	.globl sub_4049ca
	.type sub_4049ca, @function
sub_4049ca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4049d0
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_352
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_354
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_351
	call	free
	xor	eax, eax
	jmp	.label_353
.label_352:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_350
	mov	qword ptr [rsi], rbx
.label_351:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_353
	test	rax, rax
	je	.label_350
.label_353:
	pop	rbx
	ret	
.label_350:
	call	xalloc_die
.label_354:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404a34
	.globl sub_404a34
	.type sub_404a34, @function
sub_404a34:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404a40
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_356
	test	r14, r14
	je	.label_355
.label_356:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_355:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404a76
	.globl sub_404a76
	.type sub_404a76, @function
sub_404a76:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404a80
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_357
	call	rpl_calloc
	test	rax, rax
	je	.label_357
	pop	rcx
	ret	
.label_357:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404aa6
	.globl sub_404aa6
	.type sub_404aa6, @function
sub_404aa6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ab0

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_358
	test	r15, r15
	je	.label_359
.label_358:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_359:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404aec
	.globl sub_404aec
	.type sub_404aec, @function
sub_404aec:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404af0
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_361
	test	r15, r15
	je	.label_360
.label_361:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_360:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x404b32
	.globl sub_404b32
	.type sub_404b32, @function
sub_404b32:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404b40

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_362
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_51
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404b70

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_363
	test	rsi, rsi
	mov	ecx, 1
	je	.label_364
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_364
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_363:
	mov	ecx, 1
.label_364:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	32
	#Procedure 0x404bbb
	.globl sub_404bbb
	.type sub_404bbb, @function
sub_404bbb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404bc0

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_365
	cmp	r15, -2
	jb	.label_365
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_365
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_365:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x404c16
	.globl sub_404c16
	.type sub_404c16, @function
sub_404c16:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404c20

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_367
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_366
	test	cl, cl
	jne	.label_366
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_366
.label_367:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_366
	call	__errno_location
	mov	dword ptr [rax], 0
.label_366:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404c80

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_369
	cmp	byte ptr [rax], 0x43
	jne	.label_371
	cmp	byte ptr [rax + 1], 0
	je	.label_368
.label_371:
	mov	esi, OFFSET FLAT:label_370
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_369
.label_368:
	xor	ebx, ebx
.label_369:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x404cb1
	.globl sub_404cb1
	.type sub_404cb1, @function
sub_404cb1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404cc0

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_36
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_372
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x404ce5
	.globl sub_404ce5
	.type sub_404ce5, @function
sub_404ce5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404cf0

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_373
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_375
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_373
.label_375:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_373
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_374
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_374:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_373:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	32
	#Procedure 0x404d64
	.globl sub_404d64
	.type sub_404d64, @function
sub_404d64:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404d70

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_376
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_376
	test	byte ptr [rbx + 1], 1
	je	.label_376
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_376:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	32
	#Procedure 0x404da3
	.globl sub_404da3
	.type sub_404da3, @function
sub_404da3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404db0

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_377
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_377
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_378
.label_377:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_378:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_379
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_379:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404e1e
	.globl sub_404e1e
	.type sub_404e1e, @function
sub_404e1e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404e20

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	32
	#Procedure 0x404e37
	.globl sub_404e37
	.type sub_404e37, @function
sub_404e37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ea5
	.globl sub_404ea5
	.type sub_404ea5, @function
sub_404ea5:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404eb2
	.globl sub_404eb2
	.type sub_404eb2, @function
sub_404eb2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ed6
	.globl sub_404ed6
	.type sub_404ed6, @function
sub_404ed6:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 32
	.label_505:
	.section .rodata
	.align 32
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_73:
	.quad .label_401
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_70
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_402
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_403
	.quad .label_66
	.quad .label_66
	.quad .label_404
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_82
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_66
	.quad .label_405
	.quad .label_406
	.quad .label_52
	.quad .label_407
	.globl main.long_options
	.type main.long_options, @object
main.long_options:
	.quad label_438
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 98
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_450
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 110
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_389
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_440
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_499
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_394
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_390
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_397
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_470
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_14:
	.asciz "Try '%s --help' for more information.\n"
label_23:
	.asciz "Usage: %s [OPTION]... [FILE]...\n"
label_13:
	.asciz "Concatenate FILE(s) to standard output.\n"
label_17:
	.asciz "\n  -A, --show-all           equivalent to -vET\n  -b, --number-nonblank    number nonempty output lines, overrides -n\n  -e                       equivalent to -vE\n  -E, --show-ends          display $ at end of each line\n  -n, --number             number all output lines\n  -s, --squeeze-blank      suppress repeated empty output lines\n"
label_19:
	.asciz "  -t                       equivalent to -vT\n  -T, --show-tabs          display TAB characters as ^I\n  -u                       (ignored)\n  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\n"
label_22:
	.asciz "      --help     display this help and exit\n"
label_27:
	.asciz "      --version  output version information and exit\n"
label_24:
	.asciz "\nExamples:\n  %s f - g  Output f's contents, then standard input, then g's contents.\n  %s        Copy standard input to standard output.\n"
label_11:
	.asciz "cat"
label_438:
	.asciz "number-nonblank"
label_450:
	.asciz "number"
label_389:
	.asciz "squeeze-blank"
label_440:
	.asciz "show-nonprinting"
label_499:
	.asciz "show-ends"
label_394:
	.asciz "show-tabs"
label_390:
	.asciz "show-all"
label_397:
	.asciz "help"
label_470:
	.asciz "version"
label_36:
	.byte 0
label_31:
	.asciz "coreutils"
label_38:
	.asciz "/usr/local/share/locale"
label_58:
	.asciz "benstuvAET"
label_16:
	.asciz "GNU coreutils"
label_90:
	.asciz "Torbjorn Granlund"
label_91:
	.asciz "Richard M. Stallman"
label_103:
	.asciz "standard output"
label_94:
	.asciz "-"
label_51:
	.asciz "%s"
label_88:
	.asciz "%s: input file is output file"
label_106:
	.asciz "closing standard input"
label_12:
	.asciz "\nWith no FILE, or when FILE is -, read standard input.\n"
label_9:
	.asciz "\n%s online help: <%s>\n"
label_10:
	.asciz "https://www.gnu.org/software/coreutils/"
label_28:
	.asciz "en_"
label_26:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_18:
	.asciz "Full documentation <%s%s>\n"
label_20:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_25:
	.asciz " invocation"
label_74:
	.asciz "write error"
label_115:
	.asciz "cannot do ioctl on %s"
label_424:
	.asciz "8.31"
label_120:
	.asciz "%s: %s"
label_130:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_126:
	.asciz "/.libs/"
label_128:
	.asciz "lt-"
label_488:
	.asciz "literal"
label_489:
	.asciz "shell"
label_490:
	.asciz "shell-always"
label_491:
	.asciz "shell-escape"
label_492:
	.asciz "shell-escape-always"
label_493:
	.asciz "c"
label_494:
	.asciz "c-maybe"
label_495:
	.asciz "escape"
label_496:
	.asciz "locale"
label_497:
	.asciz "clocale"
label_215:
	.byte 34
	.byte 0
label_142:
	.byte 96
	.byte 0
label_148:
	.asciz "'"
label_286:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_287:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_281:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_282:
	.byte 161
	.byte 175
	.byte 0
label_296:
	.asciz "%s (%s) %s\n"
label_303:
	.asciz "%s %s\n"
label_307:
	.asciz "(C)"
label_304:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_294:
	.asciz "Written by %s.\n"
label_300:
	.asciz "Written by %s and %s.\n"
label_297:
	.asciz "Written by %s, %s, and %s.\n"
label_311:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_310:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_293:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_298:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_306:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_301:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_299:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_327:
	.asciz "\nReport bugs to: %s\n"
label_328:
	.asciz "bug-coreutils@gnu.org"
label_330:
	.asciz "%s home page: <%s>\n"
label_329:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_362:
	.asciz "memory exhausted"
label_370:
	.asciz "POSIX"
label_372:
	.asciz "ASCII"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_135:
	.quad .label_425
	.quad .label_426
	.quad .label_427
	.quad .label_428
	.quad .label_429
	.quad .label_430
	.quad .label_431
	.quad .label_162
	.quad .label_432
	.quad .label_432
	.quad .label_433
label_190:
	.quad .label_476
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_168
	.quad .label_477
	.quad .label_478
	.quad .label_171
	.quad .label_479
	.quad .label_480
	.quad .label_481
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_178
	.quad .label_195
	.quad .label_482
	.quad .label_482
	.quad .label_483
	.quad .label_482
	.quad .label_145
	.quad .label_482
	.quad .label_484
	.quad .label_482
	.quad .label_482
	.quad .label_482
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_482
	.quad .label_482
	.quad .label_482
	.quad .label_482
	.quad .label_485
	.quad .label_178
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_482
	.quad .label_486
	.quad .label_145
	.quad .label_482
	.quad .label_145
	.quad .label_482
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_145
	.quad .label_487
	.quad .label_482
	.quad .label_487
	.quad .label_483
	.quad label_488
	.quad label_489
	.quad label_490
	.quad label_491
	.quad label_492
	.quad label_493
	.quad label_494
	.quad label_495
	.quad label_496
	.quad label_497
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_309:
	.quad .label_409
	.quad .label_410
	.quad .label_411
	.quad .label_412
	.quad .label_413
	.quad .label_414
	.quad .label_415
	.quad .label_416
	.quad .label_417
	.quad .label_418
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_506:
	.section .data
	.align 8
.label_380:
	.quad 0
	.section .data
	.align 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl line_num_print
	.type line_num_print, @object
line_num_print:
	.quad label_396
	.globl line_num_start
	.type line_num_start, @object
line_num_start:
	.quad label_67
	.globl line_buf
	.type line_buf, @object
line_buf:
	.ascii "            "
label_396:
	.ascii "     "
label_67:
	.asciz "0\t"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_424
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_259:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_2:
	.byte 0
	.globl infile
	.type infile, @object
infile:
	.quad 0x0
	.globl input_desc
	.type input_desc, @object
input_desc:
	.long 0x0
	.globl newlines2
	.type newlines2, @object
newlines2:
	.long 0x0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_274:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_273:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_272:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: