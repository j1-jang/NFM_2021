	.section	.text
	.align	16
	#Procedure 0x401819
	.globl sub_401819
	.type sub_401819, @function
sub_401819:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x40181a
	.globl sub_40181a
	.type sub_40181a, @function
sub_40181a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401852
	.globl sub_401852
	.type sub_401852, @function
sub_401852:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40189a
	.globl sub_40189a
	.type sub_40189a, @function
sub_40189a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4018bc
	.globl sub_4018bc
	.type sub_4018bc, @function
sub_4018bc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4018cd
	.globl sub_4018cd
	.type sub_4018cd, @function
sub_4018cd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4018e6
	.globl sub_4018e6
	.type sub_4018e6, @function
sub_4018e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4018f0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_23
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_19
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_17
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_18
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_22
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_11
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_12
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_25
	mov	ecx, OFFSET FLAT:label_21
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_16
	mov	esi, OFFSET FLAT:label_13
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_16
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_10
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_16:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_20
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_21
	mov	ecx, OFFSET FLAT:label_14
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_9
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_14
	mov	ecx, OFFSET FLAT:label_15
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_23:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_24
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x401aeb
	.globl sub_401aeb
	.type sub_401aeb, @function
sub_401aeb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401af0

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r14, rsi
	mov	ebx, edi
	mov	qword ptr [rsp + 8], 0
	mov	dword ptr [rsp + 0x14], 0x1ff
	lea	r15, [rsp + 0x18]
	mov	dword ptr [rsp + 0x18], 0
	mov	qword ptr [rsp + 0x20], 0
	mov	byte ptr [rsp + 0x1c], 0
	mov	rdi, qword ptr [r14]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_45
	call	setlocale
	mov	edi, OFFSET FLAT:label_33
	mov	esi, OFFSET FLAT:label_34
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_33
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	xor	ebp, ebp
	xor	r12d, r12d
	jmp	.label_38
.label_511:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_46
	mov	edx, 5
	call	dcgettext
	mov	qword ptr [rsp + 0x20], rax
	nop	word ptr cs:[rax + rax]
.label_38:
	mov	edx, OFFSET FLAT:label_30
	mov	ecx, OFFSET FLAT:longopts
	xor	r8d, r8d
	mov	edi, ebx
	mov	rsi, r14
	call	getopt_long
	cmp	eax, 0x59
	jle	.label_36
	add	eax, -0x5a
	cmp	eax, 0x1c
	ja	.label_39
	jmp	qword ptr [(rax * 8) + label_41]
.label_508:
	cmp	qword ptr [rip + optarg],  0
	je	.label_38
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_44
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	jmp	.label_38
.label_509:
	mov	r12, qword ptr [rip + optarg]
	jmp	.label_38
.label_510:
	mov	qword ptr [rsp + 8], OFFSET FLAT:make_ancestor
	mov	ebp, OFFSET FLAT:make_ancestor
	jmp	.label_38
.label_36:
	cmp	eax, -1
	jne	.label_28
	cmp	dword ptr [rip + optind],  ebx
	je	.label_29
	test	r12, r12
	jne	.label_31
	test	rbp, rbp
	je	.label_32
.label_31:
	xor	edi, edi
	call	umask
	mov	ebp, eax
	mov	edi, ebp
	call	umask
	mov	dword ptr [rsp + 0x10], ebp
	test	r12, r12
	je	.label_40
	mov	rdi, r12
	call	mode_compile
	mov	r13, rax
	test	r13, r13
	je	.label_43
	mov	edi, 0x1ff
	mov	esi, 1
	mov	edx, ebp
	mov	rcx, r13
	mov	r8, r15
	call	mode_adjust
	mov	dword ptr [rsp + 0x14], eax
	mov	rdi, r13
	call	free
	jmp	.label_32
.label_40:
	mov	dword ptr [rsp + 0x14], 0x1ff
.label_32:
	movsxd	rax, dword ptr [rip + optind]
	sub	ebx, eax
	lea	rsi, [r14 + rax*8]
	lea	rcx, [rsp + 8]
	mov	edx, OFFSET FLAT:process_dir
	mov	edi, ebx
	call	savewd_process_files
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_28:
	cmp	eax, 0xffffff7d
	je	.label_37
	cmp	eax, 0xffffff7e
	jne	.label_39
	xor	edi, edi
	call	usage
.label_37:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	esi, OFFSET FLAT:label_14
	mov	edx, OFFSET FLAT:label_25
	mov	r8d, OFFSET FLAT:label_42
	xor	r9d, r9d
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_39:
	mov	edi, 1
	call	usage
.label_29:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_47
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
.label_43:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_35
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, r12
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d60

	.globl make_ancestor
	.type make_ancestor, @function
make_ancestor:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r15, rdx
	mov	rbp, rsi
	mov	r14, rdi
	cmp	byte ptr [r15 + 0x14], 0
	je	.label_48
	call	__errno_location
	mov	dword ptr [rax], 0x5f
.label_48:
	mov	edi, dword ptr [r15 + 8]
	test	dil, 0xc0
	je	.label_49
	and	edi, 0xffffff3f
	call	umask
	mov	esi, 0x1ff
	mov	rdi, rbp
	call	mkdir
	mov	ebp, eax
	call	__errno_location
	mov	rbx, rax
	mov	r12d, dword ptr [rbx]
	mov	edi, dword ptr [r15 + 8]
	call	umask
	mov	dword ptr [rbx], r12d
	jmp	.label_51
.label_49:
	mov	esi, 0x1ff
	mov	rdi, rbp
	call	mkdir
	mov	ebp, eax
.label_51:
	test	ebp, ebp
	jne	.label_50
	mov	ebp, dword ptr [r15 + 8]
	shr	ebp, 8
	and	ebp, 1
	mov	rbx, qword ptr [r15 + 0x18]
	test	rbx, rbx
	je	.label_50
	mov	r15, qword ptr [rip + stdout]
	mov	edi, 4
	mov	rsi, r14
	call	quotearg_style
	mov	rcx, rax
	xor	eax, eax
	mov	rdi, r15
	mov	rsi, rbx
	mov	rdx, rcx
	call	prog_fprintf
.label_50:
	mov	eax, ebp
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401e18
	.globl sub_401e18
	.type sub_401e18, @function
sub_401e18:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401e20

	.globl process_dir
	.type process_dir, @function
process_dir:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15, rdi
	mov	rdx, qword ptr [rbx]
	cmp	byte ptr [rbx + 0x14], 0
	je	.label_52
	test	rdx, rdx
	jne	.label_52
	call	__errno_location
	mov	dword ptr [rax], 0x5f
	xor	edx, edx
.label_52:
	mov	r8d, dword ptr [rbx + 0xc]
	mov	eax, dword ptr [rbx + 0x10]
	mov	r9d, OFFSET FLAT:announce_mkdir
	mov	rdi, r15
	mov	rsi, r14
	mov	rcx, rbx
	push	1
	push	-1
	push	-1
	push	rax
	call	make_dir_parents
	add	rsp, 0x20
	movzx	eax, al
	mov	ebp, eax
	xor	ebp, 1
	test	al, al
	je	.label_53
	cmp	byte ptr [rbx + 0x14], 0
	je	.label_53
	cmp	qword ptr [rbx], 0
	je	.label_53
	call	__errno_location
	mov	dword ptr [rax], 0x5f
.label_53:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ea1
	.globl sub_401ea1
	.type sub_401ea1, @function
sub_401ea1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401eb0

	.globl announce_mkdir
	.type announce_mkdir, @function
announce_mkdir:
	push	r14
	push	rbx
	push	rax
	mov	rax, rdi
	mov	rbx, qword ptr [rsi + 0x18]
	test	rbx, rbx
	je	.label_54
	mov	r14, qword ptr [rip + stdout]
	mov	edi, 4
	mov	rsi, rax
	call	quotearg_style
	mov	rcx, rax
	xor	eax, eax
	mov	rdi, r14
	mov	rsi, rbx
	mov	rdx, rcx
	add	rsp, 8
	pop	rbx
	pop	r14
	jmp	prog_fprintf
.label_54:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ef6
	.globl sub_401ef6
	.type sub_401ef6, @function
sub_401ef6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401f00

	.globl prog_fprintf
	.type prog_fprintf, @function
prog_fprintf:
	push	r14
	push	rbx
	sub	rsp, 0xd8
	mov	r14, rsi
	mov	rbx, rdi
	test	al, al
	je	.label_55
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_55:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	mov	rdi, qword ptr [rip + program_name]
	mov	rsi, rbx
	call	fputs_unlocked
	mov	edi, OFFSET FLAT:label_58
	mov	rsi, rbx
	call	fputs_unlocked
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xf0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	lea	rcx, [rsp]
	mov	esi, 1
	mov	rdi, rbx
	mov	rdx, r14
	call	__vfprintf_chk
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x30]
	jae	.label_57
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 0x28], rcx
	mov	byte ptr [rax], 0xa
.label_56:
	add	rsp, 0xd8
	pop	rbx
	pop	r14
	ret	
.label_57:
	mov	esi, 0xa
	mov	rdi, rbx
	call	__overflow
	jmp	.label_56
	.section	.text
	.align	16
	#Procedure 0x401fe4
	.globl sub_401fe4
	.type sub_401fe4, @function
sub_401fe4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401ff0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ff8
	.globl sub_401ff8
	.type sub_401ff8, @function
sub_401ff8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402000
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x402008
	.globl sub_402008
	.type sub_402008, @function
sub_402008:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402010

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_65
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_62
	cmp	dword ptr [rbp], 0x20
	jne	.label_62
.label_65:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_61
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_62:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_63
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_59
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_60
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_61:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_59:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_64
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4020d0

	.globl make_dir_parents
	.type make_dir_parents, @function
make_dir_parents:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xd8
	mov	r13, r9
	mov	qword ptr [rsp + 0x10], rcx
	mov	rbp, rdx
	mov	rbx, rsi
	mov	r15, rdi
	cmp	byte ptr [r15], 0x2f
	je	.label_82
	cmp	dword ptr [rbx], 4
	jne	.label_82
	mov	r14d, dword ptr [rbx + 4]
	test	r14d, r14d
	jne	.label_66
.label_82:
	xor	r12d, r12d
	test	rbp, rbp
	mov	dword ptr [rsp + 0x1c], r8d
	je	.label_67
	mov	rdi, r15
	mov	rsi, rbx
	mov	rdx, rbp
	mov	rcx, qword ptr [rsp + 0x10]
	call	mkancesdirs
	mov	r8d, dword ptr [rsp + 0x1c]
	mov	r12, rax
	test	r12, r12
	js	.label_74
.label_67:
	mov	qword ptr [rsp + 0x40], r13
	mov	qword ptr [rsp + 0x38], rbx
	mov	qword ptr [rsp + 0x30], rbp
	mov	r13d, dword ptr [rsp + 0x120]
	mov	eax, dword ptr [rsp + 0x110]
	and	r13d, dword ptr [rsp + 0x118]
	and	eax, 0xc00
	mov	ebp, r8d
	and	ebp, 0x200
	mov	ecx, r8d
	and	ecx, 0xffffffc0
	mov	r14d, r8d
	and	r14d, 0xffffffed
	or	ebp, eax
	cmove	r14d, r8d
	cmp	r13d, -1
	cmovne	r14d, ecx
	add	r12, r15
	mov	rdi, r12
	mov	esi, r14d
	mov	ebx, r8d
	call	mkdir
	test	eax, eax
	mov	qword ptr [rsp + 0x20], r15
	mov	dword ptr [rsp + 0x2c], r13d
	je	.label_70
	mov	bl, byte ptr [rsp + 0x128]
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rsp + 0x10], eax
	mov	r14d, 0xffffffff
	mov	edx, 2
	mov	rdi, qword ptr [rsp + 0x38]
	mov	ebp, dword ptr [rsp + 0x110]
	jmp	.label_79
.label_70:
	cmp	r13d, -1
	sete	r13b
	mov	rdi, r15
	mov	eax, dword ptr [rsp + 0x110]
	mov	r15d, eax
	and	ebx, r15d
	and	ebx, 0x1ff
	mov	rsi, qword ptr [rsp + 0x10]
	call	qword ptr [rsp + 0x40]
	or	ebx, ebp
	sete	bl
	and	bl, r13b
	mov	dword ptr [rsp + 0x10], 0
	mov	edx, 3
	mov	rdi, qword ptr [rsp + 0x38]
	mov	ebp, r15d
.label_79:
	test	bl, bl
	je	.label_69
	mov	bpl, 1
	mov	r14d, dword ptr [rsp + 0x10]
	test	r14d, r14d
	mov	r15, qword ptr [rsp + 0x20]
	je	.label_72
	cmp	qword ptr [rsp + 0x30], 0
	je	.label_66
	cmp	r14d, 2
	je	.label_66
	mov	rbx, r15
	lea	rdx, [rsp + 0x48]
	mov	edi, 1
	mov	rsi, r12
	call	__xstat
	test	eax, eax
	je	.label_83
	cmp	r14d, 0x11
	jne	.label_71
	call	__errno_location
	mov	r15d, dword ptr [rax]
	cmp	r15d, 2
	je	.label_71
	cmp	r15d, 0x14
	je	.label_71
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_68
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rdi, rbx
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, r15d
	mov	rdx, r14
	jmp	.label_75
.label_69:
	lea	rcx, [rsp + 0x48]
	mov	rsi, r12
	call	savewd_chdir
	cmp	eax, -2
	jg	.label_81
	mov	bpl, 1
	jmp	.label_72
.label_74:
	mov	bpl, 1
	cmp	r12, -1
	jne	.label_72
	call	__errno_location
	mov	r14d, dword ptr [rax]
	jmp	.label_66
.label_81:
	test	eax, eax
	mov	eax, OFFSET FLAT:label_85
	cmove	r12, rax
	mov	edi, dword ptr [rsp + 0x48]
	mov	dword ptr [rsp], ebp
	mov	rsi, r12
	mov	edx, r14d
	mov	ecx, dword ptr [rsp + 0x118]
	mov	r8d, dword ptr [rsp + 0x120]
	mov	r9d, dword ptr [rsp + 0x1c]
	call	dirchownmod
	mov	bpl, 1
	test	eax, eax
	je	.label_72
	mov	r14d, dword ptr [rsp + 0x10]
	test	r14d, r14d
	je	.label_73
	cmp	qword ptr [rsp + 0x30], 0
	je	.label_78
	cmp	r14d, 2
	je	.label_78
	call	__errno_location
	cmp	dword ptr [rax], 0x14
	jne	.label_80
.label_78:
	mov	r15, qword ptr [rsp + 0x20]
	jmp	.label_66
.label_83:
	mov	eax, 0xf000
	and	eax, dword ptr [rsp + 0x60]
	mov	bpl, 1
	cmp	eax, 0x4000
	je	.label_72
.label_71:
	mov	r15, rbx
.label_66:
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_84
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, r15
.label_86:
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, r14d
	mov	rdx, rbx
.label_75:
	call	error
.label_72:
	mov	eax, ebp
	add	rsp, 0xd8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_73:
	call	__errno_location
.label_80:
	cmp	dword ptr [rsp + 0x2c], -1
	mov	r14d, dword ptr [rax]
	mov	eax, OFFSET FLAT:label_76
	mov	esi, OFFSET FLAT:label_77
	cmove	rsi, rax
	xor	ebp, ebp
	xor	edi, edi
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rsp + 0x20]
	jmp	.label_86
	.section	.text
	.align	16
	#Procedure 0x4023de
	.globl sub_4023de
	.type sub_4023de, @function
sub_4023de:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4023e0

	.globl mode_compile
	.type mode_compile, @function
mode_compile:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	mov	bl, byte ptr [r14]
	mov	eax, ebx
	and	al, 0xf8
	cmp	al, 0x30
	jne	.label_108
	xor	eax, eax
	xor	r15d, r15d
	mov	rdx, r14
	nop	
.label_113:
	movsx	ecx, bl
	lea	r15d, [rcx + r15*8 - 0x30]
	cmp	r15d, 0xfff
	ja	.label_87
	movzx	ebx, byte ptr [rdx + 1]
	inc	rdx
	mov	ecx, ebx
	and	cl, 0xf8
	cmp	cl, 0x30
	je	.label_113
	xor	eax, eax
	test	bl, bl
	jne	.label_87
	sub	rdx, r14
	mov	eax, r15d
	and	eax, 0xc00
	or	eax, 0x3ff
	cmp	rdx, 5
	mov	ebx, 0xfff
	cmovl	ebx, eax
	mov	edi, 0x20
	call	xmalloc
	mov	byte ptr [rax], 0x3d
	mov	byte ptr [rax + 1], 1
	mov	dword ptr [rax + 4], 0xfff
	mov	dword ptr [rax + 8], r15d
	mov	dword ptr [rax + 0xc], ebx
	mov	byte ptr [rax + 0x11], 0
	jmp	.label_87
.label_108:
	lea	rax, [r14 + 1]
	mov	edi, 1
	jmp	.label_111
	.section	.text
	.align	16
	#Procedure 0x40247f
	.globl sub_40247f
	.type sub_40247f, @function
sub_40247f:

	nop	
.label_94:
	add	rdi, rdx
	movzx	ebx, byte ptr [rax]
	inc	rax
.label_111:
	cmp	bl, 0x2c
	jle	.label_89
	cmp	bl, 0x2d
	je	.label_92
	cmp	bl, 0x3d
	mov	edx, 1
	je	.label_94
	jmp	.label_99
	.section	.text
	.align	16
	#Procedure 0x40249f
	.globl sub_40249f
	.type sub_40249f, @function
sub_40249f:

	nop	
.label_89:
	cmp	bl, 0x2b
	mov	edx, 1
	je	.label_94
	test	bl, bl
	je	.label_102
.label_99:
	xor	edx, edx
	jmp	.label_94
	.section	.text
	.align	16
	#Procedure 0x4024b2
	.globl sub_4024b2
	.type sub_4024b2, @function
sub_4024b2:

	nop	word ptr cs:[rax + rax]
.label_92:
	mov	edx, 1
	jmp	.label_94
.label_102:
	mov	rax, rdi
	shr	rax, 0x3b
	jne	.label_106
	shl	rdi, 4
	call	xmalloc
	xor	r9d, r9d
	movabs	r8, 0x2000280000000000
	jmp	.label_107
	.section	.text
	.align	16
	#Procedure 0x4024ec

	.globl sub_4024ec
	.type sub_4024ec, @function
sub_4024ec:
	inc	r14
	nop	
.label_107:
	xor	esi, esi
	jmp	.label_100
	.section	.text
	.align	16
	#Procedure 0x4024f4
	.globl sub_4024f4
	.type sub_4024f4, @function
sub_4024f4:

	nop	word ptr cs:[rax + rax]
.label_500:
	or	esi, 0x207
	inc	r14
.label_100:
	movzx	edx, byte ptr [r14]
	movsx	ecx, dl
	lea	edi, [rcx - 0x61]
	cmp	edi, 0x14
	ja	.label_103
	jmp	qword ptr [(rdi * 8) + label_96]
.label_498:
	or	esi, 0xfff
	inc	r14
	jmp	.label_100
	.section	.text
	.align	16
	#Procedure 0x40252a
	.globl sub_40252a
	.type sub_40252a, @function
sub_40252a:

	nop	word ptr [rax + rax]
.label_499:
	or	esi, 0x438
	inc	r14
	jmp	.label_100
	.section	.text
	.align	16
	#Procedure 0x40253b
	.globl sub_40253b
	.type sub_40253b, @function
sub_40253b:

	nop	dword ptr [rax + rax]
.label_501:
	or	esi, 0x9c0
	inc	r14
	jmp	.label_100
	.section	.text
	.align	16
	#Procedure 0x40254b
	.globl sub_40254b
	.type sub_40254b, @function
sub_40254b:

	nop	dword ptr [rax + rax]
.label_103:
	mov	edi, ecx
	cmp	ecx, 0x3d
	ja	.label_91
	bt	r8, rdi
	jae	.label_91
.label_570:
	lea	rbx, [r14 + 1]
	movsx	ecx, byte ptr [r14 + 1]
	mov	edi, ecx
	add	edi, -0x30
	cmp	edi, 0x45
	ja	.label_109
	jmp	qword ptr [(rdi * 8) + label_112]
.label_551:
	xor	edi, edi
	mov	r14, rbx
	nop	word ptr cs:[rax + rax]
.label_101:
	movsx	ecx, cl
	lea	edi, [rcx + rdi*8 - 0x30]
	cmp	edi, 0xfff
	ja	.label_91
	mov	cl, byte ptr [r14 + 1]
	inc	r14
	mov	ebx, ecx
	and	bl, 0xf8
	cmp	bl, 0x30
	je	.label_101
	test	esi, esi
	jne	.label_91
	mov	r11b, 1
	mov	esi, 0xfff
	test	cl, cl
	je	.label_105
	cmp	cl, 0x2c
	mov	r10d, 0xfff
	je	.label_90
	jmp	.label_91
.label_105:
	mov	r10d, 0xfff
	jmp	.label_90
.label_109:
	mov	r11b, 1
	xor	r10d, r10d
	mov	r14, rbx
	xor	edi, edi
	jmp	.label_110
	.section	.text
	.align	16
	#Procedure 0x4025f4
	.globl sub_4025f4
	.type sub_4025f4, @function
sub_4025f4:

	nop	word ptr cs:[rax + rax]
.label_88:
	mov	cl, byte ptr [r14 + 1]
	inc	r14
	mov	r11d, ebx
.label_110:
	movsx	ecx, cl
	add	ecx, -0x58
	cmp	ecx, 0x20
	ja	.label_90
	mov	bl, 2
	jmp	qword ptr [(rcx * 8) + label_95]
.label_555:
	or	edi, 0x124
	jmp	.label_97
.label_556:
	or	edi, 0xc00
	jmp	.label_97
.label_557:
	or	edi, 0x200
	jmp	.label_97
.label_558:
	or	edi, 0x92
	jmp	.label_97
.label_559:
	or	edi, 0x49
	nop	word ptr cs:[rax + rax]
.label_97:
	mov	ebx, r11d
	jmp	.label_88
.label_552:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 0x38
	jmp	.label_90
.label_553:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 7
	jmp	.label_90
.label_554:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 0x1c0
	nop	word ptr cs:[rax + rax]
.label_90:
	mov	rcx, r9
	shl	rcx, 4
	mov	byte ptr [rax + rcx], dl
	mov	byte ptr [rax + rcx + 1], r11b
	mov	dword ptr [rax + rcx + 4], esi
	mov	dword ptr [rax + rcx + 8], edi
	test	r10d, r10d
	jne	.label_93
	cmp	esi, 1
	sbb	r10d, r10d
	or	r10d, esi
	and	r10d, edi
.label_93:
	inc	r9
	mov	dword ptr [rax + rcx + 0xc], r10d
	mov	dl, byte ptr [r14]
	mov	ecx, edx
	add	cl, 0xd5
	movzx	ecx, cl
	cmp	cl, 0x12
	ja	.label_104
	jmp	qword ptr [(rcx * 8) + label_98]
.label_104:
	test	dl, dl
	jne	.label_91
	shl	r9, 4
	mov	byte ptr [rax + r9 + 1], 0
	jmp	.label_87
.label_91:
	mov	rdi, rax
	call	free
	xor	eax, eax
.label_87:
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_106:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4026fc
	.globl sub_4026fc
	.type sub_4026fc, @function
sub_4026fc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402700
	.globl mode_create_from_ref
	.type mode_create_from_ref, @function
mode_create_from_ref:

	push	rbx
	sub	rsp, 0x90
	mov	rax, rdi
	lea	rdx, [rsp]
	mov	edi, 1
	mov	rsi, rax
	call	__xstat
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_114
	mov	ebx, dword ptr [rsp + 0x18]
	mov	edi, 0x20
	call	xmalloc
	mov	byte ptr [rax], 0x3d
	mov	byte ptr [rax + 1], 1
	mov	dword ptr [rax + 4], 0xfff
	mov	dword ptr [rax + 8], ebx
	mov	dword ptr [rax + 0xc], 0xfff
	mov	byte ptr [rax + 0x11], 0
.label_114:
	add	rsp, 0x90
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x402757
	.globl sub_402757
	.type sub_402757, @function
sub_402757:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402760

	.globl mode_adjust
	.type mode_adjust, @function
mode_adjust:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	qword ptr [rsp - 8], r8
	and	edi, 0xfff
	mov	al, byte ptr [rcx + 1]
	xor	r13d, r13d
	test	al, al
	je	.label_115
	xor	r13d, r13d
	test	sil, sil
	mov	r9d, 0xc00
	cmove	r9d, r13d
	not	edx
	mov	r10d, r9d
	not	r10d
	movzx	r12d, sil
	mov	r14d, 0x92
	mov	r15d, 0x49
	nop	dword ptr [rax + rax]
.label_122:
	movsx	ebp, al
	mov	ebx, dword ptr [rcx + 4]
	mov	esi, dword ptr [rcx + 8]
	mov	r8d, dword ptr [rcx + 0xc]
	cmp	ebp, 2
	je	.label_121
	cmp	ebp, 3
	jne	.label_116
	and	esi, edi
	mov	ebp, esi
	and	ebp, 0x124
	mov	eax, 0x124
	cmovne	ebp, eax
	mov	r11d, esi
	and	r11d, 0x92
	cmovne	r11d, r14d
	or	r11d, esi
	and	esi, 0x49
	cmovne	esi, r15d
	or	esi, ebp
	or	esi, r11d
	jmp	.label_116
	.section	.text
	.align	16
	#Procedure 0x4027f8
	.globl sub_4027f8
	.type sub_4027f8, @function
sub_4027f8:

	nop	dword ptr [rax + rax]
.label_121:
	mov	ebp, edi
	and	ebp, 0x49
	mov	eax, esi
	or	eax, 0x49
	or	ebp, r12d
	cmovne	esi, eax
.label_116:
	test	ebx, ebx
	mov	eax, edx
	cmovne	eax, ebx
	mov	ebp, r8d
	or	ebp, r10d
	and	ebp, esi
	and	ebp, eax
	movsx	esi, byte ptr [rcx]
	cmp	esi, 0x2b
	je	.label_118
	cmp	esi, 0x2d
	je	.label_119
	cmp	esi, 0x3d
	jne	.label_120
	not	r8d
	and	r8d, r9d
	test	ebx, ebx
	mov	eax, ebx
	not	eax
	cmove	eax, ebx
	or	eax, r8d
	mov	esi, eax
	not	esi
	and	esi, 0xfff
	or	r13d, esi
	and	eax, edi
	or	ebp, eax
	mov	edi, ebp
	jmp	.label_120
	.section	.text
	.align	16
	#Procedure 0x40285a
	.globl sub_40285a
	.type sub_40285a, @function
sub_40285a:

	nop	word ptr [rax + rax]
.label_119:
	or	r13d, ebp
	not	ebp
	and	edi, ebp
	jmp	.label_120
	.section	.text
	.align	16
	#Procedure 0x402869
	.globl sub_402869
	.type sub_402869, @function
sub_402869:

	nop	dword ptr [rax]
.label_118:
	or	r13d, ebp
	or	edi, ebp
.label_120:
	movzx	eax, byte ptr [rcx + 0x11]
	add	rcx, 0x10
	test	al, al
	jne	.label_122
.label_115:
	mov	rax, qword ptr [rsp - 8]
	test	rax, rax
	je	.label_117
	mov	dword ptr [rax], r13d
.label_117:
	mov	eax, edi
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x40289f
	.globl sub_40289f
	.type sub_40289f, @function
sub_40289f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4028a0

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_123
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_125
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_127
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_125
	mov	esi, OFFSET FLAT:label_126
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_128
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_128:
	mov	rbx, r14
.label_125:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_123:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_124
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402941
	.globl sub_402941
	.type sub_402941, @function
sub_402941:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402950
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402983
	.globl sub_402983
	.type sub_402983, @function
sub_402983:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402990
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x40299f
	.globl sub_40299f
	.type sub_40299f, @function
sub_40299f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4029a0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x4029af
	.globl sub_4029af
	.type sub_4029af, @function
sub_4029af:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4029b0
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x4029e6
	.globl sub_4029e6
	.type sub_4029e6, @function
sub_4029e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4029f0
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402a03
	.globl sub_402a03
	.type sub_402a03, @function
sub_402a03:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402a10
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_129
	test	rdx, rdx
	je	.label_129
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_129:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402a3b
	.globl sub_402a3b
	.type sub_402a3b, @function
sub_402a3b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402a40
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402ab5
	.globl sub_402ab5
	.type sub_402ab5, @function
sub_402ab5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402ac0

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xb8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x20], rcx
	mov	qword ptr [rsp + 0x30], rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rsp + 0x100]
	mov	qword ptr [rsp + 0x70], rax
	mov	rax, qword ptr [rsp + 0xf8]
	mov	qword ptr [rsp + 0x78], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xa8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x90], eax
	mov	dword ptr [rsp + 0x18], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x8c], ebx
	mov	r10b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x40], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa0], rcx
.label_225:
	mov	r11, rbp
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_223
	mov	edi, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r8, qword ptr [rsp + 0x30]
	jmp	qword ptr [(rcx * 8) + label_227]
.label_628:
	mov	byte ptr [rsp + 7], r10b
	mov	edi, OFFSET FLAT:label_232
	mov	esi, r15d
	mov	rbx, r11
	mov	ebp, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x78], rax
	mov	edi, OFFSET FLAT:label_169
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebp
	mov	r10b, byte ptr [rsp + 7]
	mov	r11, rbx
	mov	qword ptr [rsp + 0x70], rax
.label_629:
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x78]
	jne	.label_222
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_222
	xor	r14d, r14d
	nop	word ptr cs:[rax + rax]
.label_135:
	cmp	r14, r11
	jae	.label_130
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], al
.label_130:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_135
.label_222:
	mov	rbp, qword ptr [rsp + 0x70]
	mov	rdi, rbp
	mov	rbx, r11
	call	strlen
	mov	r11, rbx
	mov	qword ptr [rsp + 0x40], rax
	mov	edi, r15d
	mov	qword ptr [rsp + 0x48], rbp
	mov	r13b, 1
	mov	sil, r12b
	mov	r8, qword ptr [rsp + 0x30]
	mov	r10b, byte ptr [rsp + 7]
	mov	r9d, dword ptr [rsp + 0x50]
	jmp	.label_154
.label_621:
	xor	edi, edi
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_154
.label_624:
	mov	al, 1
.label_622:
	mov	r12b, 1
.label_625:
	test	r12b, 1
	mov	cl, 1
	je	.label_158
	mov	ecx, eax
.label_158:
	mov	al, cl
.label_623:
	test	r12b, 1
	jne	.label_160
	test	r11, r11
	je	.label_162
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx], 0x27
.label_162:
	mov	r14d, 1
	jmp	.label_164
.label_160:
	xor	r14d, r14d
.label_164:
	mov	ecx, OFFSET FLAT:label_169
	mov	qword ptr [rsp + 0x48], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x40], rcx
	mov	r13d, eax
	mov	sil, r12b
	mov	edi, 2
	jmp	.label_154
.label_626:
	test	r12b, 1
	jne	.label_177
	test	r11, r11
	je	.label_179
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 0x22
.label_179:
	mov	r14d, 1
	jmp	.label_182
.label_627:
	mov	r13b, 1
	mov	edi, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_184
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	sil, 1
	jmp	.label_154
.label_177:
	xor	r14d, r14d
.label_182:
	mov	eax, OFFSET FLAT:label_184
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	r13b, 1
	mov	sil, r12b
	mov	edi, 5
	nop	word ptr cs:[rax + rax]
.label_154:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	r12b
	cmp	edi, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x2a]
	mov	edx, r15d
	mov	byte ptr [rsp + 0x17], cl
	and	dl, cl
	cmp	qword ptr [rsp + 0x40], 0
	setne	cl
	mov	ebx, ecx
	mov	byte ptr [rsp + 0x2e], dl
	and	bl, dl
	mov	byte ptr [rsp + 0x2f], bl
	mov	edx, esi
	and	dl, 1
	sete	bl
	and	al, dl
	mov	byte ptr [rsp + 0x2b], al
	mov	byte ptr [rsp + 6], dl
	and	r12b, dl
	mov	byte ptr [rsp + 0x2d], r12b
	or	bl, r15b
	mov	byte ptr [rsp + 0x1f], bl
	mov	byte ptr [rsp + 0x2c], r13b
	mov	qword ptr [rsp + 0xb0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x29], r13b
	xor	esi, esi
	mov	qword ptr [rsp + 0x38], rdi
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r12, rdi
	mov	rdi, r8
	jmp	.label_204
	.section	.text
	.align	16
	#Procedure 0x402dad
	.globl sub_402dad
	.type sub_402dad, @function
sub_402dad:

	nop	dword ptr [rax]
.label_138:
	inc	rsi
.label_204:
	cmp	rbp, -1
	je	.label_239
	cmp	rsi, rbp
	jne	.label_240
	jmp	.label_241
	.section	.text
	.align	16
	#Procedure 0x402dc3
	.globl sub_402dc3
	.type sub_402dc3, @function
sub_402dc3:

	nop	word ptr cs:[rax + rax]
.label_239:
	mov	rcx, -1
	cmp	byte ptr [rdi + rsi], 0
	je	.label_246
.label_240:
	cmp	byte ptr [rsp + 0x2f], 0
	je	.label_248
	mov	rax, qword ptr [rsp + 0x40]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_249
	cmp	rbp, -1
	jne	.label_249
	mov	r15d, r10d
	mov	rbp, r11
	mov	r13d, r9d
	mov	r12, r14
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r14, r12
	mov	r9d, r13d
	mov	r12, qword ptr [rsp + 0x38]
	mov	r10d, r15d
	mov	r11, rbp
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_249:
	cmp	rbx, rbp
	jbe	.label_149
.label_248:
	xor	r8d, r8d
.label_173:
	movzx	r15d, byte ptr [rdi + rsi]
	cmp	r15, 0x7e
	ja	.label_150
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_152]
.label_584:
	test	rsi, rsi
	jne	.label_140
	jmp	.label_156
	.section	.text
	.align	16
	#Procedure 0x402e65
	.globl sub_402e65
	.type sub_402e65, @function
sub_402e65:

	nop	word ptr cs:[rax + rax]
.label_149:
	mov	qword ptr [rsp + 0x20], rbp
	mov	ebp, r9d
	mov	r15d, r10d
	mov	rbx, r11
	mov	r12, rsi
	lea	rdi, [rdi + rsi]
	mov	rsi, qword ptr [rsp + 0x48]
	mov	rdx, qword ptr [rsp + 0x40]
	call	memcmp
	test	eax, eax
	sete	r8b
	jne	.label_170
	cmp	byte ptr [rsp + 6], 0
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	je	.label_173
	jmp	.label_181
.label_170:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_173
.label_588:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_194
	test	rsi, rsi
	jne	.label_197
	cmp	rbp, 1
	je	.label_156
	xor	r13d, r13d
	jmp	.label_132
.label_577:
	cmp	byte ptr [rsp + 0x17], 0
	je	.label_202
	cmp	byte ptr [rsp + 6], 0
	jne	.label_174
	cmp	r12d, 2
	jne	.label_207
	mov	eax, r9d
	and	al, 1
	jne	.label_207
	cmp	r14, r11
	jae	.label_211
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_211:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_214
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_214:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_203
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_203:
	add	r14, 3
	mov	r9b, 1
.label_207:
	mov	rcx, r14
	cmp	rcx, r11
	jae	.label_176
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + rcx], 0x5c
.label_176:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r12d, 2
	je	.label_228
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_228
	mov	dl, byte ptr [rdi + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_228
	cmp	r14, r11
	jae	.label_147
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x30
.label_147:
	lea	rdx, [rcx + 2]
	cmp	rdx, r11
	jae	.label_143
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rdx], 0x30
.label_143:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_132
.label_578:
	mov	bl, 0x62
	jmp	.label_208
.label_579:
	mov	cl, 0x74
	jmp	.label_148
.label_580:
	mov	bl, 0x76
	jmp	.label_208
.label_581:
	mov	bl, 0x66
	jmp	.label_208
.label_582:
	mov	cl, 0x72
	jmp	.label_148
.label_585:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa0], rax
	cmp	r12d, 2
	jne	.label_133
	cmp	byte ptr [rsp + 6], 0
	jne	.label_139
	test	r11, r11
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r11
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	r11, rax
	cmp	r14, r11
	jae	.label_145
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_145:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_251
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x5c
.label_251:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_159
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_159:
	add	r14, 3
	xor	r9d, r9d
.label_133:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_132
.label_586:
	mov	r15b, 0x3f
	cmp	r12d, 5
	je	.label_166
	cmp	r12d, 2
	jne	.label_140
	cmp	byte ptr [rsp + 6], 0
	je	.label_140
	jmp	.label_139
.label_587:
	cmp	r12d, 2
	jne	.label_178
	cmp	byte ptr [rsp + 6], 0
	jne	.label_139
	mov	r15b, 0x5c
	xor	eax, eax
	xor	r13d, r13d
	jmp	.label_134
.label_150:
	mov	dword ptr [rsp + 0x54], r8d
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	mov	qword ptr [rsp + 0x98], r11
	cmp	qword ptr [rsp + 0xa8], 1
	jne	.label_187
	mov	qword ptr [rsp + 0x20], rbp
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	r12d, 1
.label_188:
	and	r13b, 1
	mov	r8d, r13d
	or	r8b, byte ptr [rsp + 0x2a]
	mov	qword ptr [rsp + 0x60], r12
	cmp	r12, 1
	mov	r11, qword ptr [rsp + 0x98]
	mov	r10b, byte ptr [rsp + 7]
	mov	r12, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x50]
	ja	.label_206
	test	r8b, r8b
	je	.label_206
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rsp + 0x54]
	jmp	.label_132
.label_194:
	test	rsi, rsi
	jne	.label_191
	mov	cl, byte ptr [rdi + 1]
	test	cl, cl
	jne	.label_191
.label_156:
	mov	dl, 1
.label_583:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_139
	xor	eax, eax
	mov	r13b, dl
	nop	word ptr [rax + rax]
.label_132:
	cmp	byte ptr [rsp + 0x2e], 0
	je	.label_235
	cmp	qword ptr [rsp + 0xf0], 0
	jne	.label_236
	jmp	.label_137
	.section	.text
	.align	16
	#Procedure 0x4031b4
	.globl sub_4031b4
	.type sub_4031b4, @function
sub_4031b4:

	nop	word ptr cs:[rax + rax]
.label_235:
	cmp	byte ptr [rsp + 0x2d], 0
	je	.label_137
.label_236:
	mov	ebx, r8d
	mov	r8, rsi
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_244
	mov	rcx, qword ptr [rsp + 0xf0]
	and	esi, dword ptr [rcx + rdx*4]
	mov	ebx, r15d
	mov	rsi, r8
	je	.label_134
	jmp	.label_131
	.section	.text
	.align	16
	#Procedure 0x4031fd
	.globl sub_4031fd
	.type sub_4031fd, @function
sub_4031fd:

	nop	dword ptr [rax]
.label_137:
	test	r8b, r8b
	mov	ebx, r15d
	jne	.label_131
	jmp	.label_134
.label_244:
	mov	ebx, r15d
	mov	rsi, r8
	jmp	.label_131
.label_202:
	cmp	dword ptr [rsp + 0x90], 0
	jne	.label_138
	xor	r15d, r15d
	jmp	.label_140
.label_178:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x29], 0
	je	.label_148
	xor	eax, eax
	mov	r15b, 0x5c
	xor	r13d, r13d
	jmp	.label_134
.label_148:
	cmp	byte ptr [rsp + 0x1f], 0
	mov	ebx, ecx
	je	.label_139
.label_208:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x17], 0
	mov	r13d, 0
	je	.label_132
	nop	word ptr cs:[rax + rax]
.label_131:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_174
	cmp	r12d, 2
	jne	.label_163
	mov	eax, r9d
	and	al, 1
	jne	.label_163
	cmp	r14, r11
	jae	.label_210
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_210:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_171
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_171:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_224
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_224:
	add	r14, 3
	mov	r9b, 1
.label_163:
	cmp	r14, r11
	jae	.label_180
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_180:
	inc	r14
	jmp	.label_185
.label_187:
	mov	qword ptr [rsp + 0x80], 0
	cmp	rbp, -1
	jne	.label_189
	mov	rbx, rsi
	call	strlen
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_189:
	lea	rax, [rdi + rsi]
	mov	qword ptr [rsp + 0x60], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rax, [rsp + 0x80]
	mov	rcx, rax
	mov	qword ptr [rsp + 0x20], rbp
	mov	qword ptr [rsp + 0x58], rsi
.label_219:
	lea	rbx, [r12 + rsi]
	lea	rsi, [rdi + rbx]
	mov	rdx, rbp
	sub	rdx, rbx
	lea	rdi, [rsp + 0x94]
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_213
	cmp	rbp, -1
	movabs	rsi, 0x20000002b
	je	.label_216
	cmp	rbp, -2
	je	.label_221
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x2b]
	cmp	al, 1
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, qword ptr [rsp + 0x98]
	jne	.label_165
	mov	rax, qword ptr [rsp + 0x60]
	lea	rax, [rax + r12]
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_196:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_243
	bt	rsi, rdx
	jb	.label_238
.label_243:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_196
.label_165:
	mov	edi, dword ptr [rsp + 0x94]
	call	iswprint
	test	eax, eax
	jne	.label_217
	xor	r13d, r13d
.label_217:
	lea	rdi, [rsp + 0x80]
	add	r12, rbp
	mov	rbx, rdi
	call	mbsinit
	mov	rcx, rbx
	test	eax, eax
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x58]
	je	.label_219
	jmp	.label_188
.label_228:
	xor	r13d, r13d
	jmp	.label_132
.label_191:
	mov	rbp, -1
	xor	r13d, r13d
	jmp	.label_132
.label_166:
	cmp	dword ptr [rsp + 0x8c], 0
	je	.label_140
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_140
	cmp	byte ptr [rdi + rsi + 1], 0x3f
	jne	.label_140
	movsx	edx, byte ptr [rdi + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_229
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_193
	cmp	byte ptr [rsp + 6], 0
	jne	.label_157
	cmp	r14, r11
	jae	.label_167
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x3f
.label_167:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_199
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_199:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_168
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_168:
	lea	rax, [r14 + 3]
	cmp	rax, r11
	jae	.label_247
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x3f
.label_247:
	add	r14, 4
	xor	eax, eax
	mov	rsi, rcx
	mov	r15b, dl
	xor	r13d, r13d
	jmp	.label_132
.label_140:
	xor	eax, eax
.label_197:
	xor	r13d, r13d
	jmp	.label_132
.label_206:
	add	qword ptr [rsp + 0x60], rsi
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_186
	.section	.text
	.align	16
	#Procedure 0x4034e2
	.globl sub_4034e2
	.type sub_4034e2, @function
sub_4034e2:

	nop	word ptr cs:[rax + rax]
.label_141:
	inc	r14
	mov	r15b, byte ptr [rdi + rsi + 1]
	mov	rsi, rdx
.label_186:
	test	r8b, r8b
	je	.label_198
	mov	ecx, dword ptr [rsp + 0x54]
	test	cl, 1
	je	.label_190
	cmp	r14, r11
	jae	.label_200
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x5c
.label_200:
	inc	r14
	mov	dword ptr [rsp + 0x54], 0
	jmp	.label_190
	.section	.text
	.align	16
	#Procedure 0x40352c
	.globl sub_40352c
	.type sub_40352c, @function
sub_40352c:

	nop	dword ptr [rax]
.label_198:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_181
	cmp	r12d, 2
	jne	.label_212
	mov	eax, r9d
	and	al, 1
	jne	.label_212
	cmp	r14, r11
	jae	.label_215
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_215:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_218
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x24
.label_218:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_161
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x27
.label_161:
	add	r14, 3
	mov	r9b, 1
.label_212:
	cmp	r14, r11
	jae	.label_195
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_195:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_233
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_233:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_237
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_237:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_190:
	lea	rdx, [rsi + 1]
	cmp	qword ptr [rsp + 0x60], rdx
	jbe	.label_134
	test	r9b, 1
	je	.label_136
	mov	ebx, eax
	and	bl, 1
	jne	.label_136
	mov	rbx, rsi
	cmp	r14, r11
	jae	.label_250
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + r14], 0x27
.label_250:
	lea	rsi, [r14 + 1]
	cmp	rsi, r11
	jae	.label_231
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rsi], 0x27
.label_231:
	add	r14, 2
	xor	r9d, r9d
	mov	rsi, rbx
.label_136:
	cmp	r14, r11
	jae	.label_141
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + r14], r15b
	jmp	.label_141
	.section	.text
	.align	16
	#Procedure 0x403633
	.globl sub_403633
	.type sub_403633, @function
sub_403633:

	nop	word ptr cs:[rax + rax]
.label_134:
	test	r9b, 1
	je	.label_151
	and	al, 1
	jne	.label_151
	cmp	r14, r11
	jae	.label_153
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_153:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_146
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_146:
	add	r14, 2
	xor	r9d, r9d
.label_151:
	mov	ebx, r15d
.label_185:
	cmp	r14, r11
	jae	.label_226
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], bl
.label_226:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, r10b
	mov	r10d, r13d
	jmp	.label_138
.label_216:
	xor	r13d, r13d
.label_213:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_188
.label_221:
	mov	rbp, qword ptr [rsp + 0x20]
	cmp	rbp, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	jbe	.label_192
	mov	rsi, qword ptr [rsp + 0x58]
.label_183:
	mov	rax, qword ptr [rsp + 0x60]
	cmp	byte ptr [rax + r12], 0
	je	.label_142
	lea	rax, [rsi + r12 + 1]
	inc	r12
	cmp	rax, rbp
	jb	.label_183
	xor	r13d, r13d
	jmp	.label_188
.label_192:
	xor	r13d, r13d
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_188
.label_142:
	xor	r13d, r13d
	jmp	.label_188
.label_229:
	xor	r13d, r13d
	jmp	.label_132
.label_193:
	xor	r13d, r13d
	mov	rsi, rbx
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x403708
	.globl sub_403708
	.type sub_403708, @function
sub_403708:

	nop	dword ptr [rax + rax]
.label_241:
	mov	rcx, rsi
.label_246:
	cmp	r12d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 6], 0
	je	.label_201
	or	al, dl
	je	.label_205
.label_201:
	cmp	r12d, 2
	setne	al
	cmp	byte ptr [rsp + 6], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa0]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x2c]
	mov	rsi, qword ptr [rsp + 0xb0]
	je	.label_209
	or	al, dl
	jne	.label_209
	test	r10b, 1
	jne	.label_220
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_209
	test	r11, r11
	mov	r15d, r12d
	mov	al, bl
	mov	qword ptr [rsp + 0x20], rcx
	mov	r12d, esi
	mov	rbp, qword ptr [rsp + 0x68]
	je	.label_225
.label_209:
	mov	rdx, qword ptr [rsp + 0x48]
	test	rdx, rdx
	je	.label_230
	cmp	byte ptr [rsp + 6], 0
	mov	rcx, qword ptr [rsp + 8]
	jne	.label_234
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_234
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_245:
	cmp	r14, r11
	jae	.label_242
	mov	byte ptr [rcx + r14], al
.label_242:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_245
	jmp	.label_234
.label_174:
	mov	qword ptr [rsp + 0x20], rbp
.label_181:
	mov	rdx, rdi
	jmp	.label_155
.label_139:
	mov	qword ptr [rsp + 0x20], rbp
.label_238:
	mov	rdx, rdi
	mov	eax, 2
.label_144:
	mov	qword ptr [rsp + 0x38], rax
.label_155:
	mov	r9d, dword ptr [rsp + 0x18]
	cmp	byte ptr [rsp + 0x17], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r11
	mov	rcx, qword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_172:
	mov	r14, rax
.label_175:
	mov	rax, r14
	add	rsp, 0xb8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_205:
	mov	rdx, rdi
	mov	qword ptr [rsp + 0x20], rcx
	jmp	.label_155
.label_220:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x20]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	qword ptr [rsp + 0x108]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_172
.label_230:
	mov	rcx, qword ptr [rsp + 8]
.label_234:
	cmp	r14, r11
	jae	.label_175
	mov	byte ptr [rcx + r14], 0
	jmp	.label_175
.label_157:
	mov	qword ptr [rsp + 0x20], rbp
	mov	rdx, rdi
	mov	eax, 5
	jmp	.label_144
.label_223:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4038c7
	.globl sub_4038c7
	.type sub_4038c7, @function
sub_4038c7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4038d0
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403991
	.globl sub_403991
	.type sub_403991, @function
sub_403991:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4039a0
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_252
	mov	qword ptr [rax], rbx
.label_252:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403a8c
	.globl sub_403a8c
	.type sub_403a8c, @function
sub_403a8c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403a90
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_253
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_255:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_255
.label_253:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_256
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_257], OFFSET FLAT:slot0
.label_256:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_254
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_254:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x403b21
	.globl sub_403b21
	.type sub_403b21, @function
sub_403b21:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403b30
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403b3e
	.globl sub_403b3e
	.type sub_403b3e, @function
sub_403b3e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403b40

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_258
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_261
	cmp	r12d, 0x7fffffff
	je	.label_263
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_259
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_259:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_261:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_264
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_260
.label_264:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_262
	mov	rdi, r14
	call	free
.label_262:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_260:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_258:
	call	abort
.label_263:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403cfd
	.globl sub_403cfd
	.type sub_403cfd, @function
sub_403cfd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403d00
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403d0a
	.globl sub_403d0a
	.type sub_403d0a, @function
sub_403d0a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403d10
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403d29
	.globl sub_403d29
	.type sub_403d29, @function
sub_403d29:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403d30
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403d48
	.globl sub_403d48
	.type sub_403d48, @function
sub_403d48:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403d50
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_265
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_265:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403dbc
	.globl sub_403dbc
	.type sub_403dbc, @function
sub_403dbc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403dc0
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_266
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_266:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403e28
	.globl sub_403e28
	.type sub_403e28, @function
sub_403e28:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403e30

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_267
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_267:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403e98
	.globl sub_403e98
	.type sub_403e98, @function
sub_403e98:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ea0
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_268
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_268:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403f01
	.globl sub_403f01
	.type sub_403f01, @function
sub_403f01:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403f10
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403f7e
	.globl sub_403f7e
	.type sub_403f7e, @function
sub_403f7e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403f80
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403fef
	.globl sub_403fef
	.type sub_403fef, @function
sub_403fef:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403ff0

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x404045
	.globl sub_404045
	.type sub_404045, @function
sub_404045:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404050
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4040a4
	.globl sub_4040a4
	.type sub_4040a4, @function
sub_4040a4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040b0
	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_272
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_272:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404145
	.globl sub_404145
	.type sub_404145, @function
sub_404145:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404150
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_273
	test	rdx, rdx
	je	.label_273
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_273:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4041be
	.globl sub_4041be
	.type sub_4041be, @function
sub_4041be:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4041c0
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_274
	test	rdx, rdx
	je	.label_274
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_274:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40422a
	.globl sub_40422a
	.type sub_40422a, @function
sub_40422a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404230
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_275
	test	rsi, rsi
	je	.label_275
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_275:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4042a0
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_269]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_270]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_271]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_276
	test	rsi, rsi
	je	.label_276
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_276:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40430c
	.globl sub_40430c
	.type sub_40430c, @function
sub_40430c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404310
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40431a
	.globl sub_40431a
	.type sub_40431a, @function
sub_40431a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404320
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404338
	.globl sub_404338
	.type sub_404338, @function
sub_404338:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404340
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404351
	.globl sub_404351
	.type sub_404351, @function
sub_404351:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404360

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404379
	.globl sub_404379
	.type sub_404379, @function
sub_404379:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404380

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_278
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_283
	cmp	ecx, 0x55
	jne	.label_277
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_277
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_277
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_277
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_277
	cmp	byte ptr [rax + 5], 0
	jne	.label_277
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_280
	mov	eax, OFFSET FLAT:label_281
	jmp	.label_282
.label_283:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_277
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_277
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_277
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_277
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_277
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_277
	cmp	byte ptr [rax + 7], 0
	je	.label_279
.label_277:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_184
	mov	eax, OFFSET FLAT:label_169
.label_282:
	cmove	rax, rcx
.label_278:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_279:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_284
	mov	eax, OFFSET FLAT:label_285
	jmp	.label_282
	.section	.text
	.align	16
	#Procedure 0x404445
	.globl sub_404445
	.type sub_404445, @function
sub_404445:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404450
	.globl savewd_init
	.type savewd_init, @function
savewd_init:

	mov	dword ptr [rdi], 0
	ret	
	.section	.text
	.align	16
	#Procedure 0x404457
	.globl sub_404457
	.type sub_404457, @function
sub_404457:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404460
	.globl savewd_errno
	.type savewd_errno, @function
savewd_errno:

	xor	eax, eax
	cmp	dword ptr [rdi], 4
	jne	.label_286
	mov	eax, dword ptr [rdi + 4]
.label_286:
	ret	
	.section	.text
	.align	16
	#Procedure 0x40446b
	.globl sub_40446b
	.type sub_40446b, @function
sub_40446b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404470

	.globl savewd_chdir
	.type savewd_chdir, @function
savewd_chdir:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12, rcx
	mov	ebp, edx
	mov	rbx, rsi
	mov	r14, rdi
	test	r12, r12
	sete	al
	test	bpl, 1
	jne	.label_309
	mov	r13d, 0xffffffff
	test	al, al
	jne	.label_290
.label_309:
	mov	esi, ebp
	and	esi, 1
	shl	esi, 0x11
	or	esi, 0x10900
	xor	eax, eax
	mov	rdi, rbx
	call	open
	mov	r13d, eax
	test	r12, r12
	je	.label_301
	mov	dword ptr [r12], r13d
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r12 + 4], eax
.label_301:
	test	r13d, r13d
	js	.label_306
	xor	r15d, r15d
	test	bpl, 2
	je	.label_290
	jmp	.label_289
.label_306:
	call	__errno_location
	mov	r15d, 0xffffffff
	cmp	dword ptr [rax], 0xd
	jne	.label_296
.label_290:
	mov	eax, dword ptr [r14]
	cmp	eax, 5
	ja	.label_310
	mov	ecx, 0x36
	bt	ecx, eax
	jb	.label_297
	test	eax, eax
	jne	.label_302
	mov	edi, OFFSET FLAT:label_85
	xor	esi, esi
	xor	eax, eax
	call	open_safer
	test	eax, eax
	js	.label_295
	mov	dword ptr [r14], 1
.label_287:
	mov	dword ptr [r14 + 4], eax
	jmp	.label_297
.label_302:
	cmp	dword ptr [r14 + 4], 0
	jns	.label_297
	jmp	.label_300
.label_295:
	call	__errno_location
	mov	eax, dword ptr [rax]
	cmp	eax, 0xd
	je	.label_307
	cmp	eax, 0x74
	jne	.label_304
.label_307:
	movabs	rax, 0xffffffff00000003
	mov	qword ptr [r14], rax
.label_300:
	lea	rbp, [r14 + 4]
	call	fork
	mov	dword ptr [rbp], eax
	test	eax, eax
	je	.label_297
	mov	r15d, 0xfffffffe
	test	eax, eax
	jle	.label_308
	xor	r12d, r12d
	jmp	.label_289
.label_297:
	test	r13d, r13d
	js	.label_311
	mov	edi, r13d
	call	fchdir
	jmp	.label_288
.label_311:
	mov	rdi, rbx
	call	chdir
.label_288:
	mov	r15d, eax
	test	r15d, r15d
	jne	.label_289
	mov	eax, dword ptr [r14]
	dec	eax
	cmp	eax, 4
	ja	.label_294
	xor	r15d, r15d
	jmp	qword ptr [(rax * 8) + label_298]
.label_496:
	mov	dword ptr [r14], 2
	jmp	.label_289
.label_497:
	cmp	dword ptr [r14 + 4], 0
	jne	.label_303
.label_289:
	test	r13d, r13d
	js	.label_296
	test	r12, r12
	jne	.label_296
	call	__errno_location
	mov	rbp, rax
	mov	ebx, dword ptr [rbp]
	mov	edi, r13d
	call	close
	mov	dword ptr [rbp], ebx
.label_296:
	mov	eax, r15d
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_308:
	mov	dword ptr [r14], 4
	call	__errno_location
	mov	eax, dword ptr [rax]
	jmp	.label_287
.label_304:
	mov	dword ptr [r14], 4
	jmp	.label_287
.label_310:
	mov	edi, OFFSET FLAT:label_291
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0x63
	mov	ecx, OFFSET FLAT:label_293
	call	__assert_fail
.label_294:
	mov	edi, OFFSET FLAT:label_291
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0x9f
	mov	ecx, OFFSET FLAT:label_299
	call	__assert_fail
.label_303:
	mov	edi, OFFSET FLAT:label_305
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0x9b
	mov	ecx, OFFSET FLAT:label_299
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x404661
	.globl sub_404661
	.type sub_404661, @function
sub_404661:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404670

	.globl savewd_restore
	.type savewd_restore, @function
savewd_restore:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x10
	mov	r14, rdi
	mov	eax, dword ptr [r14]
	cmp	rax, 4
	ja	.label_320
	xor	ebp, ebp
	jmp	qword ptr [(rax * 8) + label_312]
.label_572:
	mov	edi, dword ptr [r14 + 4]
	call	fchdir
	test	eax, eax
	je	.label_318
	call	__errno_location
	mov	rbx, rax
	mov	ebp, dword ptr [rbx]
	mov	edi, dword ptr [r14 + 4]
	call	close
	mov	dword ptr [r14], 4
	mov	dword ptr [r14 + 4], ebp
	jmp	.label_321
.label_574:
	mov	ebp, dword ptr [r14 + 4]
	call	__errno_location
	mov	rbx, rax
.label_321:
	mov	dword ptr [rbx], ebp
	mov	ebp, 0xffffffff
	jmp	.label_315
.label_573:
	mov	ebx, dword ptr [r14 + 4]
	test	ebx, ebx
	je	.label_317
	jle	.label_315
	lea	rbp, [rsp + 0xc]
	nop	word ptr [rax + rax]
.label_319:
	xor	edx, edx
	mov	edi, ebx
	mov	rsi, rbp
	call	waitpid
	test	eax, eax
	jns	.label_322
	call	__errno_location
	cmp	dword ptr [rax], 4
	je	.label_319
	mov	edi, OFFSET FLAT:label_313
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xd8
	mov	ecx, OFFSET FLAT:label_314
	call	__assert_fail
.label_322:
	mov	dword ptr [r14 + 4], 0xffffffff
	mov	eax, dword ptr [rsp + 0xc]
	mov	edi, eax
	and	edi, 0x7f
	je	.label_316
	call	raise
	mov	eax, dword ptr [rsp + 0xc]
.label_316:
	movzx	ebp, ah
	jmp	.label_315
.label_318:
	mov	dword ptr [r14], 1
.label_315:
	mov	eax, ebp
	add	rsp, 0x10
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_320:
	mov	edi, OFFSET FLAT:label_291
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xe2
	mov	ecx, OFFSET FLAT:label_314
	call	__assert_fail
.label_317:
	mov	edi, esi
	call	_exit
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404780
	.globl savewd_finish
	.type savewd_finish, @function
savewd_finish:

	push	rbx
	mov	rbx, rdi
	mov	eax, dword ptr [rbx]
	cmp	rax, 4
	ja	.label_323
	jmp	qword ptr [(rax * 8) + label_326]
.label_532:
	mov	edi, dword ptr [rbx + 4]
	call	close
	jmp	.label_328
.label_533:
	cmp	dword ptr [rbx + 4], 0
	jns	.label_327
.label_328:
	mov	dword ptr [rbx], 5
	pop	rbx
	ret	
.label_323:
	mov	edi, OFFSET FLAT:label_291
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xfb
	mov	ecx, OFFSET FLAT:label_325
	call	__assert_fail
.label_327:
	mov	edi, OFFSET FLAT:label_324
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xf7
	mov	ecx, OFFSET FLAT:label_325
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x4047dd
	.globl sub_4047dd
	.type sub_4047dd, @function
sub_4047dd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4047e0

	.globl savewd_process_files
	.type savewd_process_files, @function
savewd_process_files:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 0x18], rcx
	mov	qword ptr [rsp + 0x10], rdx
	mov	r12, rsi
	mov	r15d, edi
	movabs	rax, 0xffffffff00000000
	mov	dword ptr [rsp + 8], 0
	movsxd	rcx, r15d
	mov	rdi, rcx
	shl	rdi, 0x20
	add	rdi, rax
	lea	rdx, [r12 + rcx*8 - 8]
	mov	esi, ecx
	mov	qword ptr [rsp + 0x20], rsi
	xor	ebp, ebp
	nop	dword ptr [rax + rax]
.label_341:
	mov	rsi, rbp
	mov	r14, rdi
	lea	rdi, [rcx + rsi]
	test	rdi, rdi
	jle	.label_339
	mov	rbx, qword ptr [rdx + rsi*8]
	lea	rbp, [rsi - 1]
	lea	rdi, [r14 + rax]
	cmp	byte ptr [rbx], 0x2f
	je	.label_341
.label_339:
	add	esi, r15d
	xor	r13d, r13d
	cmp	esi, 2
	mov	ebx, 0
	jl	.label_333
	sar	r14, 0x20
	xor	eax, eax
	mov	r13d, 1
	lea	rbp, [rsp + 8]
	xor	ebx, ebx
	jmp	.label_334
	.section	.text
	.align	16
	#Procedure 0x404879
	.globl sub_404879
	.type sub_404879, @function
sub_404879:

	nop	dword ptr [rax]
.label_340:
	mov	ecx, dword ptr [rsp + 0xc]
	inc	r13
.label_334:
	cmp	eax, 3
	jne	.label_329
	test	ecx, ecx
	jg	.label_330
.label_329:
	mov	rdi, qword ptr [r12 + r13*8 - 8]
	mov	rsi, rbp
	mov	rdx, qword ptr [rsp + 0x18]
	call	qword ptr [rsp + 0x10]
	cmp	ebx, eax
	cmovl	ebx, eax
.label_330:
	mov	rax, qword ptr [r12 + r13*8]
	cmp	byte ptr [rax], 0x2f
	je	.label_335
	mov	rdi, rbp
	mov	esi, ebx
	call	savewd_restore
	cmp	ebx, eax
	cmovl	ebx, eax
.label_335:
	mov	eax, dword ptr [rsp + 8]
	cmp	r13, r14
	jl	.label_340
	mov	ecx, eax
	cmp	eax, 4
	ja	.label_337
	jmp	qword ptr [(rcx * 8) + label_332]
.label_549:
	mov	edi, dword ptr [rsp + 0xc]
	call	close
	jmp	.label_333
.label_550:
	cmp	dword ptr [rsp + 0xc], 0
	jns	.label_331
.label_333:
	mov	dword ptr [rsp + 8], 5
	mov	rax, qword ptr [rsp + 0x20]
	cmp	r13d, eax
	jge	.label_336
	movsxd	rax, r13d
	lea	rbp, [r12 + rax*8]
	sub	r15d, r13d
	lea	r12, [rsp + 8]
	mov	r14, qword ptr [rsp + 0x18]
	mov	r13, qword ptr [rsp + 0x10]
	nop	word ptr cs:[rax + rax]
.label_338:
	mov	rdi, qword ptr [rbp]
	mov	rsi, r12
	mov	rdx, r14
	call	r13
	cmp	ebx, eax
	cmovl	ebx, eax
	add	rbp, 8
	dec	r15d
	jne	.label_338
.label_336:
	mov	eax, ebx
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_337:
	mov	edi, OFFSET FLAT:label_291
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xfb
	mov	ecx, OFFSET FLAT:label_325
	call	__assert_fail
.label_331:
	mov	edi, OFFSET FLAT:label_324
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 0xf7
	mov	ecx, OFFSET FLAT:label_325
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x40497e
	.globl sub_40497e
	.type sub_40497e, @function
sub_40497e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404980

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_342
	mov	edx, OFFSET FLAT:label_352
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_358
.label_342:
	mov	edx, OFFSET FLAT:label_359
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_358:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_345
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_360
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_347
	jmp	qword ptr [(r12 * 8) + label_348]
.label_560:
	add	rsp, 8
	jmp	.label_346
.label_347:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_355
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_346
.label_561:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_343
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_562:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_356
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_563:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_353
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_564:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_350
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_346
.label_565:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_349
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_346
.label_566:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_351
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_346
.label_567:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_354
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_346
.label_569:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_357
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_346
.label_568:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_344
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_346:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404cd8
	.globl sub_404cd8
	.type sub_404cd8, @function
sub_404cd8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404ce0
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_361:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_361
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x404d01
	.globl sub_404d01
	.type sub_404d01, @function
sub_404d01:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404d10

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_366
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_369
.label_366:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_369:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_368
	cmp	r10d, 0x29
	jae	.label_365
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_367
.label_365:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_367:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_368
	cmp	r10d, 0x29
	jae	.label_363
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_364
.label_363:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_364:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_368
	cmp	r10d, 0x29
	jae	.label_374
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_362
.label_374:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_362:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_368
	cmp	r10d, 0x29
	jae	.label_372
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_373
.label_372:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_373:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_368
	cmp	r10d, 0x29
	jae	.label_370
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_371
.label_370:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_371:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_368
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_368
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_368
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_368
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_368:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x404ef2
	.globl sub_404ef2
	.type sub_404ef2, @function
sub_404ef2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f00

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_375
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_375:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x404f83
	.globl sub_404f83
	.type sub_404f83, @function
sub_404f83:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f90
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_376
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_377
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_379
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_25
	mov	ecx, OFFSET FLAT:label_21
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_378
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x405004
	.globl sub_405004
	.type sub_405004, @function
sub_405004:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405010
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_380
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_381
	test	rax, rax
	je	.label_380
.label_381:
	pop	rbx
	ret	
.label_380:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405045
	.globl sub_405045
	.type sub_405045, @function
sub_405045:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405050

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_382
	test	rax, rax
	je	.label_383
.label_382:
	pop	rbx
	ret	
.label_383:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40506a
	.globl sub_40506a
	.type sub_40506a, @function
sub_40506a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405070
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_384
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_385
	test	rbx, rbx
	jne	.label_385
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_385:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_386
	test	rax, rax
	je	.label_384
.label_386:
	pop	rbx
	ret	
.label_384:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4050b8
	.globl sub_4050b8
	.type sub_4050b8, @function
sub_4050b8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4050c0

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_387
	test	rbx, rbx
	jne	.label_387
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_387:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_389
	test	rax, rax
	je	.label_388
.label_389:
	pop	rbx
	ret	
.label_388:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4050f0
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_393
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_395
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_390
.label_393:
	test	rcx, rcx
	jne	.label_396
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_396:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_391
.label_390:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_392
	test	rbx, rbx
	jne	.label_392
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_392:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_394
	test	rax, rax
	je	.label_395
.label_394:
	pop	rbx
	ret	
.label_395:
	call	xalloc_die
.label_391:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405187
	.globl sub_405187
	.type sub_405187, @function
sub_405187:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405190
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_397
	test	rax, rax
	je	.label_398
.label_397:
	pop	rbx
	ret	
.label_398:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4051aa
	.globl sub_4051aa
	.type sub_4051aa, @function
sub_4051aa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4051b0
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_401
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_403
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_400
	call	free
	xor	eax, eax
	jmp	.label_402
.label_401:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_399
	mov	qword ptr [rsi], rbx
.label_400:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_402
	test	rax, rax
	je	.label_399
.label_402:
	pop	rbx
	ret	
.label_399:
	call	xalloc_die
.label_403:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405214
	.globl sub_405214
	.type sub_405214, @function
sub_405214:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405220
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_405
	test	r14, r14
	je	.label_404
.label_405:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_404:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405256
	.globl sub_405256
	.type sub_405256, @function
sub_405256:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405260
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_406
	call	rpl_calloc
	test	rax, rax
	je	.label_406
	pop	rcx
	ret	
.label_406:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405286
	.globl sub_405286
	.type sub_405286, @function
sub_405286:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405290

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_407
	test	r15, r15
	je	.label_408
.label_407:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_408:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4052cc
	.globl sub_4052cc
	.type sub_4052cc, @function
sub_4052cc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4052d0
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_410
	test	r15, r15
	je	.label_409
.label_410:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_409:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405312
	.globl sub_405312
	.type sub_405312, @function
sub_405312:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405320

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_411
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_60
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x405350

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_412
	test	rsi, rsi
	mov	ecx, 1
	je	.label_413
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_413
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_412:
	mov	ecx, 1
.label_413:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x40539b
	.globl sub_40539b
	.type sub_40539b, @function
sub_40539b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4053a0

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_414
	cmp	r15, -2
	jb	.label_414
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_414
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_414:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4053f6
	.globl sub_4053f6
	.type sub_4053f6, @function
sub_4053f6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405400

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_416
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_415
	test	cl, cl
	jne	.label_415
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_415
.label_416:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_415
	call	__errno_location
	mov	dword ptr [rax], 0
.label_415:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x405460

	.globl open_safer
	.type open_safer, @function
open_safer:
	sub	rsp, 0xd8
	test	al, al
	je	.label_417
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_417:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	xor	edx, edx
	test	sil, 0x40
	je	.label_419
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_420
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_418
.label_420:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_418:
	mov	edx, dword ptr [rax]
.label_419:
	xor	eax, eax
	call	open
	mov	edi, eax
	call	fd_safer
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x405524
	.globl sub_405524
	.type sub_405524, @function
sub_405524:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405530

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_422
	cmp	byte ptr [rax], 0x43
	jne	.label_424
	cmp	byte ptr [rax + 1], 0
	je	.label_421
.label_424:
	mov	esi, OFFSET FLAT:label_423
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_422
.label_421:
	xor	ebx, ebx
.label_422:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x405561
	.globl sub_405561
	.type sub_405561, @function
sub_405561:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405570

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_45
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_425
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x405595
	.globl sub_405595
	.type sub_405595, @function
sub_405595:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4055a0

	.globl mkancesdirs
	.type mkancesdirs, @function
mkancesdirs:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, rdi
	xor	ebp, ebp
	mov	r14, r13
	xor	r15d, r15d
.label_430:
	mov	bl, byte ptr [r14]
.label_432:
	mov	r12, r14
	test	bl, bl
	je	.label_441
	mov	r14, r12
	jmp	.label_429
	.section	.text
	.align	16
	#Procedure 0x4055cc
	.globl sub_4055cc
	.type sub_4055cc, @function
sub_4055cc:

	nop	dword ptr [rax]
.label_426:
	cmp	al, 0x2f
	cmovne	rbp, r14
	mov	bl, 0x2f
.label_429:
	inc	r14
	nop	dword ptr [rax + rax]
.label_440:
	mov	eax, ebx
	movzx	ebx, byte ptr [r14]
	cmp	bl, 0x2f
	je	.label_426
	cmp	al, 0x2f
	jne	.label_427
	test	rbp, rbp
	je	.label_427
	test	bl, bl
	jne	.label_438
.label_427:
	inc	r14
	test	bl, bl
	jne	.label_440
	jmp	.label_441
	.section	.text
	.align	16
	#Procedure 0x405604
	.globl sub_405604
	.type sub_405604, @function
sub_405604:

	nop	word ptr cs:[rax + rax]
.label_438:
	mov	rax, rbp
	sub	rax, r12
	cmp	rax, 1
	jne	.label_434
	cmp	byte ptr [r12], 0x2e
	je	.label_432
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp + 0x10], rcx
	mov	byte ptr [rbp], 0
	jmp	.label_435
.label_434:
	mov	qword ptr [rsp + 8], rdx
	mov	qword ptr [rsp + 0x10], rcx
	mov	byte ptr [rbp], 0
	cmp	rax, 2
	jne	.label_435
	cmp	byte ptr [r12], 0x2e
	jne	.label_435
	xor	eax, eax
	cmp	byte ptr [r12 + 1], 0x2e
	mov	dword ptr [rsp + 4], 0
	je	.label_431
.label_435:
	mov	rbx, rsi
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x10]
	call	qword ptr [rsp + 8]
	test	eax, eax
	js	.label_437
	mov	dword ptr [rsp + 4], 0
	mov	al, 1
	jmp	.label_439
.label_437:
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rsp + 4], eax
	mov	al, r15b
.label_439:
	mov	rsi, rbx
.label_431:
	mov	r15d, eax
	and	al, 1
	movzx	edx, al
	xor	ecx, ecx
	mov	rdi, rsi
	mov	rbx, rsi
	mov	rsi, r12
	call	savewd_chdir
	mov	rsi, rbx
	mov	ebx, 0xffffffff
	cmp	eax, -1
	mov	rcx, qword ptr [rsp + 0x10]
	mov	rdx, qword ptr [rsp + 8]
	je	.label_428
	mov	byte ptr [rbp], 0x2f
	test	eax, eax
	mov	ebx, eax
	je	.label_430
.label_428:
	mov	ebp, dword ptr [rsp + 4]
	test	ebp, ebp
	je	.label_433
	call	__errno_location
	cmp	dword ptr [rax], 2
	jne	.label_433
	mov	dword ptr [rax], ebp
.label_433:
	movsxd	r12, ebx
	jmp	.label_436
.label_441:
	sub	r12, r13
.label_436:
	mov	rax, r12
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4056fe
	.globl sub_4056fe
	.type sub_4056fe, @function
sub_4056fe:

	nop	
	.section	.text
	.align	16
	#Procedure 0x405700

	.globl dirchownmod
	.type dirchownmod, @function
dirchownmod:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xa8
	mov	dword ptr [rsp + 0xc], r9d
	mov	r12d, r8d
	mov	r13d, ecx
	mov	r15d, edx
	mov	r14d, edi
	test	r14d, r14d
	mov	qword ptr [rsp + 0x10], rsi
	lea	rdx, [rsp + 0x18]
	mov	edi, 1
	js	.label_442
	mov	esi, r14d
	call	__fxstat
	jmp	.label_456
.label_442:
	call	__xstat
.label_456:
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_445
	mov	rbx, qword ptr [rsp + 0x30]
	mov	eax, ebx
	and	eax, 0xf000
	cmp	eax, 0x4000
	jne	.label_447
	cmp	r13d, -1
	je	.label_450
	mov	rax, rbx
	shr	rax, 0x20
	cmp	eax, r13d
	jne	.label_451
.label_450:
	xor	eax, eax
	cmp	r12d, -1
	je	.label_453
	cmp	dword ptr [rsp + 0x38], r12d
	je	.label_453
.label_451:
	test	r14d, r14d
	js	.label_443
	mov	edi, r14d
	mov	esi, r13d
	mov	edx, r12d
	call	fchown
	jmp	.label_444
.label_447:
	call	__errno_location
	mov	dword ptr [rax], 0x14
	mov	ebp, 0xffffffff
	jmp	.label_445
.label_443:
	cmp	r15d, -1
	je	.label_455
	mov	rdi, qword ptr [rsp + 0x10]
	mov	esi, r13d
	mov	edx, r12d
	call	lchown
	jmp	.label_444
.label_455:
	mov	rdi, qword ptr [rsp + 0x10]
	mov	esi, r13d
	mov	edx, r12d
	call	chown
.label_444:
	mov	ebp, eax
	mov	ecx, ebx
	and	ecx, 0x49
	mov	edx, ebx
	and	edx, 0xc00
	xor	eax, eax
	test	ebp, ebp
	cmove	eax, edx
	test	ecx, ecx
	cmove	eax, ecx
	test	ebp, ebp
	jne	.label_445
.label_453:
	mov	esi, dword ptr [rsp + 0xe0]
	mov	ecx, ebx
	xor	ecx, dword ptr [rsp + 0xc]
	or	ecx, eax
	xor	ebp, ebp
	test	ecx, esi
	je	.label_445
	not	esi
	and	esi, ebx
	and	esi, 0xfff
	or	esi, dword ptr [rsp + 0xc]
	test	r14d, r14d
	js	.label_454
	mov	edi, r14d
	call	fchmod
	mov	ebp, eax
	jmp	.label_449
.label_445:
	test	r14d, r14d
	js	.label_446
.label_449:
	test	ebp, ebp
	je	.label_452
	call	__errno_location
	mov	rbx, rax
	mov	r15d, dword ptr [rbx]
	mov	edi, r14d
	call	close
	mov	dword ptr [rbx], r15d
	jmp	.label_446
.label_452:
	mov	edi, r14d
	call	close
.label_448:
	mov	ebp, eax
.label_446:
	mov	eax, ebp
	add	rsp, 0xa8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_454:
	mov	rdi, qword ptr [rsp + 0x10]
	call	chmod
	jmp	.label_448
	.section	.text
	.align	16
	#Procedure 0x405870

	.globl fd_safer
	.type fd_safer, @function
fd_safer:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebx, edi
	cmp	ebx, 2
	ja	.label_457
	mov	edi, ebx
	call	dup_safer
	mov	r14d, eax
	call	__errno_location
	mov	rbp, rax
	mov	r15d, dword ptr [rbp]
	mov	edi, ebx
	call	close
	mov	dword ptr [rbp], r15d
	mov	eax, r14d
	jmp	.label_458
.label_457:
	mov	eax, ebx
.label_458:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4058b1
	.globl sub_4058b1
	.type sub_4058b1, @function
sub_4058b1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4058c0

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_459
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_461
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_459
.label_461:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_459
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_460
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_460:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_459:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x405934
	.globl sub_405934
	.type sub_405934, @function
sub_405934:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405940

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_462
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_462
	test	byte ptr [rbx + 1], 1
	je	.label_462
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_462:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x405973
	.globl sub_405973
	.type sub_405973, @function
sub_405973:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405980

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_463
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_463
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_464
.label_463:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_464:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_465
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_465:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4059ee
	.globl sub_4059ee
	.type sub_4059ee, @function
sub_4059ee:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4059f0

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x405a07
	.globl sub_405a07
	.type sub_405a07, @function
sub_405a07:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405a10

	.globl dup_safer
	.type dup_safer, @function
dup_safer:
	xor	esi, esi
	mov	edx, 3
	xor	eax, eax
	jmp	rpl_fcntl
	.section	.text
	.align	16
	#Procedure 0x405a1e
	.globl sub_405a1e
	.type sub_405a1e, @function
sub_405a1e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x405a20

	.globl rpl_fcntl
	.type rpl_fcntl, @function
rpl_fcntl:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0xd0
	mov	ebx, edi
	test	al, al
	je	.label_472
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_472:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xf0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	cmp	esi, 0xb
	ja	.label_476
	mov	eax, 0xa0a
	bt	eax, esi
	jb	.label_483
	mov	eax, 0x514
	bt	eax, esi
	jb	.label_474
	test	esi, esi
	jne	.label_476
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_477
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_478
.label_476:
	lea	eax, [rsi - 0x400]
	cmp	eax, 8
	ja	.label_479
	mov	ecx, 0x85
	bt	ecx, eax
	jb	.label_474
	mov	ecx, 0x102
	bt	ecx, eax
	jae	.label_482
.label_483:
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_468
.label_474:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_469
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_470
.label_469:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_470:
	mov	edx, dword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
.label_471:
	call	fcntl
.label_468:
	mov	ebp, eax
.label_467:
	mov	eax, ebp
	add	rsp, 0xd0
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_482:
	cmp	eax, 6
	jne	.label_479
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_481
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_473
.label_479:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_484
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_486
.label_477:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_478:
	mov	edx, dword ptr [rax]
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	jmp	.label_471
.label_481:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_473:
	mov	r14d, dword ptr [rax]
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0
	js	.label_475
	mov	esi, 0x406
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	jns	.label_480
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_480
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	js	.label_467
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0xffffffff
	mov	al, 1
	jmp	.label_485
.label_480:
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  1
	jmp	.label_467
.label_484:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_486:
	mov	rdx, qword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_468
.label_475:
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  -1
	sete	al
.label_485:
	test	al, al
	je	.label_467
	test	ebp, ebp
	js	.label_467
	mov	esi, 1
	xor	eax, eax
	mov	edi, ebp
	call	fcntl
	mov	ecx, eax
	test	ecx, ecx
	js	.label_466
	or	ecx, 1
	mov	esi, 2
	xor	eax, eax
	mov	edi, ebp
	mov	edx, ecx
	call	fcntl
	cmp	eax, -1
	jne	.label_467
.label_466:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	mov	ebp, 0xffffffff
	jmp	.label_467
	.section	.text
	.align	16
	#Procedure 0x405cb1
	.globl sub_405cb1
	.type sub_405cb1, @function
sub_405cb1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405d25
	.globl sub_405d25
	.type sub_405d25, @function
sub_405d25:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405d32
	.globl sub_405d32
	.type sub_405d32, @function
sub_405d32:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405d56
	.globl sub_405d56
	.type sub_405d56, @function
sub_405d56:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_638:
	.section .rodata
	.align 32
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_41:
	.quad .label_508
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_509
	.quad .label_39
	.quad .label_39
	.quad .label_510
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_39
	.quad .label_511
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl longopts
	.type longopts, @object
longopts:
	.quad label_603
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_605
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 109
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_606
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 112
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_502
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_610
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_613
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_24:
	.asciz "Try '%s --help' for more information.\n"
label_27:
	.asciz "Usage: %s [OPTION]... DIRECTORY...\n"
label_19:
	.asciz "Create the DIRECTORY(ies), if they do not already exist.\n"
label_18:
	.asciz "  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\n  -p, --parents     no error if existing, make parent directories as needed\n  -v, --verbose     print a message for each created directory\n"
label_26:
	.asciz "  -Z                   set SELinux security context of each created directory\n                         to the default type\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\n                         or SMACK security context to CTX\n"
label_22:
	.asciz "      --help     display this help and exit\n"
label_11:
	.asciz "      --version  output version information and exit\n"
label_14:
	.asciz "mkdir"
label_45:
	.byte 0
label_33:
	.asciz "coreutils"
label_34:
	.asciz "/usr/local/share/locale"
label_30:
	.asciz "pm:vZ"
label_46:
	.asciz "created directory %s"
label_44:
	.asciz "warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel"
label_25:
	.asciz "GNU coreutils"
label_42:
	.asciz "David MacKenzie"
label_47:
	.asciz "missing operand"
label_35:
	.asciz "invalid mode %s"
label_17:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
label_12:
	.asciz "\n%s online help: <%s>\n"
label_21:
	.asciz "https://www.gnu.org/software/coreutils/"
label_13:
	.asciz "en_"
label_10:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_20:
	.asciz "Full documentation <%s%s>\n"
label_9:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_15:
	.asciz " invocation"
label_603:
	.asciz "context"
label_605:
	.asciz "mode"
label_606:
	.asciz "parents"
label_502:
	.asciz "verbose"
label_610:
	.asciz "help"
label_613:
	.asciz "version"
label_58:
	.asciz ": "
label_514:
	.asciz "8.31"
label_63:
	.asciz "write error"
label_64:
	.asciz "%s: %s"
label_60:
	.asciz "%s"
label_68:
	.asciz "cannot stat %s"
label_85:
	.asciz "."
label_76:
	.asciz "cannot change permissions of %s"
label_77:
	.asciz "cannot change owner and permissions of %s"
label_84:
	.asciz "cannot create directory %s"
label_124:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_127:
	.asciz "/.libs/"
label_126:
	.asciz "lt-"
label_589:
	.asciz "literal"
label_590:
	.asciz "shell"
label_591:
	.asciz "shell-always"
label_592:
	.asciz "shell-escape"
label_593:
	.asciz "shell-escape-always"
label_594:
	.asciz "c"
label_595:
	.asciz "c-maybe"
label_596:
	.asciz "escape"
label_597:
	.asciz "locale"
label_598:
	.asciz "clocale"
label_184:
	.byte 34
	.byte 0
label_232:
	.byte 96
	.byte 0
label_169:
	.asciz "'"
label_280:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_281:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_284:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_285:
	.byte 161
	.byte 175
	.byte 0
label_305:
	.asciz "wd->val.child == 0"
label_292:
	.asciz "lib/savewd.c"
label_299:
	.asciz "int savewd_chdir(struct savewd *, const char *, int, int *)"
label_291:
	.asciz "0"
label_313:
	.asciz "(*__errno_location ()) == 4"
label_314:
	.asciz "int savewd_restore(struct savewd *, int)"
label_324:
	.asciz "wd->val.child < 0"
label_325:
	.asciz "void savewd_finish(struct savewd *)"
label_293:
	.asciz "_Bool savewd_save(struct savewd *)"
label_352:
	.asciz "%s (%s) %s\n"
label_359:
	.asciz "%s %s\n"
label_345:
	.asciz "(C)"
label_360:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_343:
	.asciz "Written by %s.\n"
label_356:
	.asciz "Written by %s and %s.\n"
label_353:
	.asciz "Written by %s, %s, and %s.\n"
label_350:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_349:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_351:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_354:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_344:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_357:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_355:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_376:
	.asciz "\nReport bugs to: %s\n"
label_377:
	.asciz "bug-coreutils@gnu.org"
label_379:
	.asciz "%s home page: <%s>\n"
label_378:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_411:
	.asciz "memory exhausted"
label_423:
	.asciz "POSIX"
label_425:
	.asciz "ASCII"
	.byte 0
	.byte 0
	.byte 0
label_96:
	.quad .label_498
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_499
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_500
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_501
label_112:
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_551
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_552
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_553
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_109
	.quad .label_554
label_95:
	.quad .label_88
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_90
	.quad .label_555
	.quad .label_556
	.quad .label_557
	.quad .label_90
	.quad .label_90
	.quad .label_558
	.quad .label_559
label_98:
	.quad .label_570
	.quad sub_4024ec
	.quad .label_570
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_91
	.quad .label_570
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_227:
	.quad .label_621
	.quad .label_622
	.quad .label_623
	.quad .label_624
	.quad .label_625
	.quad .label_626
	.quad .label_627
	.quad .label_154
	.quad .label_628
	.quad .label_628
	.quad .label_629
label_152:
	.quad .label_577
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_208
	.quad .label_578
	.quad .label_579
	.quad .label_148
	.quad .label_580
	.quad .label_581
	.quad .label_582
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_150
	.quad .label_156
	.quad .label_583
	.quad .label_583
	.quad .label_584
	.quad .label_583
	.quad .label_132
	.quad .label_583
	.quad .label_585
	.quad .label_583
	.quad .label_583
	.quad .label_583
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_583
	.quad .label_583
	.quad .label_583
	.quad .label_583
	.quad .label_586
	.quad .label_150
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_583
	.quad .label_587
	.quad .label_132
	.quad .label_583
	.quad .label_132
	.quad .label_583
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_132
	.quad .label_588
	.quad .label_583
	.quad .label_588
	.quad .label_584
	.quad label_589
	.quad label_590
	.quad label_591
	.quad label_592
	.quad label_593
	.quad label_594
	.quad label_595
	.quad label_596
	.quad label_597
	.quad label_598
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_298:
	.quad .label_496
	.quad .label_289
	.quad .label_497
	.quad .label_289
	.quad .label_289
label_312:
	.quad .label_315
	.quad .label_315
	.quad .label_572
	.quad .label_573
	.quad .label_574
label_326:
	.quad .label_328
	.quad .label_532
	.quad .label_532
	.quad .label_533
	.quad .label_328
label_332:
	.quad .label_333
	.quad .label_549
	.quad .label_549
	.quad .label_550
	.quad .label_333
label_348:
	.quad .label_560
	.quad .label_561
	.quad .label_562
	.quad .label_563
	.quad .label_564
	.quad .label_565
	.quad .label_566
	.quad .label_567
	.quad .label_568
	.quad .label_569
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_639:
	.section .data
	.align 8
.label_487:
	.quad 0
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_514
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_257:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_2:
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_271:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_270:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_269:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec
	.type rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, @object
rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: