	.section	.text
	.align	16
	#Procedure 0x401279
	.globl sub_401279
	.type sub_401279, @function
sub_401279:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x40127a
	.globl sub_40127a
	.type sub_40127a, @function
sub_40127a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4012b2
	.globl sub_4012b2
	.type sub_4012b2, @function
sub_4012b2:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4012fa
	.globl sub_4012fa
	.type sub_4012fa, @function
sub_4012fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40131c
	.globl sub_40131c
	.type sub_40131c, @function
sub_40131c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x40132d
	.globl sub_40132d
	.type sub_40132d, @function
sub_40132d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x401346
	.globl sub_401346
	.type sub_401346, @function
sub_401346:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401350

	.globl usage
	.type usage, @function
usage:
	push	rax
	test	edi, edi
	jne	.label_14
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_17
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_15
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_16
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_10
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_12
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_22
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_23
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_21
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_13
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_24
	mov	ecx, OFFSET FLAT:label_25
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_9
	mov	esi, OFFSET FLAT:label_11
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_9
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_30
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_9:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_31
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_25
	mov	ecx, OFFSET FLAT:label_21
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_28
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_21
	mov	ecx, OFFSET FLAT:label_29
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	call	exit
.label_14:
	mov	edi, OFFSET FLAT:label_18
	mov	esi, OFFSET FLAT:label_19
	mov	edx, 0x28
	mov	ecx, OFFSET FLAT:label_20
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x401573
	.globl sub_401573
	.type sub_401573, @function
sub_401573:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401580

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, rsi
	mov	r15d, edi
	mov	edi, OFFSET FLAT:label_63
	call	getenv
	mov	r14, rax
	mov	bl, 1
	test	r14, r14
	je	.label_66
	cmp	r15d, 2
	jl	.label_67
	mov	rcx, qword ptr [r13 + 8]
	movzx	edx, byte ptr [rcx]
	mov	eax, 0x2d
	sub	eax, edx
	jne	.label_69
	movzx	edx, byte ptr [rcx + 1]
	mov	eax, 0x6e
	sub	eax, edx
	jne	.label_69
	movzx	eax, byte ptr [rcx + 2]
	neg	eax
.label_69:
	test	eax, eax
	sete	bl
	jmp	.label_66
.label_67:
	xor	ebx, ebx
.label_66:
	mov	rdi, qword ptr [r13]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_82
	call	setlocale
	mov	edi, OFFSET FLAT:label_33
	mov	esi, OFFSET FLAT:label_85
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_33
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	add	r13, 8
	cmp	r15d, 2
	jne	.label_37
	test	bl, bl
	je	.label_37
	mov	r12, qword ptr [r13]
	mov	esi, OFFSET FLAT:label_40
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_44
	mov	esi, OFFSET FLAT:label_46
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_51
.label_37:
	lea	r12d, [r15 - 1]
	cmp	r15d, 1
	setg	al
	and	al, bl
	mov	r15b, 1
	cmp	al, 1
	jne	.label_54
	xor	eax, eax
	movabs	rdx, 0x20100000001
	mov	ecx, r12d
.label_74:
	mov	rdi, qword ptr [r13]
	cmp	byte ptr [rdi], 0x2d
	jne	.label_64
	mov	bl, byte ptr [rdi + 1]
	test	bl, bl
	je	.label_64
	lea	rsi, [rdi + 1]
	xor	ebp, ebp
	nop	word ptr cs:[rax + rax]
.label_70:
	movsx	ebx, bl
	add	ebx, -0x45
	cmp	ebx, 0x29
	ja	.label_64
	bt	rdx, rbx
	jae	.label_64
	movzx	ebx, byte ptr [rdi + rbp + 2]
	inc	rbp
	test	bl, bl
	jne	.label_70
	test	rbp, rbp
	jne	.label_75
	jmp	.label_64
.label_80:
	mov	al, 1
	nop	word ptr cs:[rax + rax]
.label_75:
	movsx	edi, byte ptr [rsi]
	test	edi, edi
	je	.label_76
	inc	rsi
	cmp	edi, 0x6e
	je	.label_78
	cmp	edi, 0x65
	je	.label_80
	cmp	edi, 0x45
	jne	.label_75
	xor	eax, eax
	jmp	.label_75
.label_78:
	xor	r15d, r15d
	jmp	.label_75
	.section	.text
	.align	16
	#Procedure 0x4016f2
	.globl sub_4016f2
	.type sub_4016f2, @function
sub_4016f2:

	nop	word ptr cs:[rax + rax]
.label_76:
	lea	r12d, [rcx - 1]
	add	r13, 8
	cmp	ecx, 1
	mov	ecx, r12d
	jg	.label_74
	jmp	.label_36
.label_54:
	xor	eax, eax
	jmp	.label_36
.label_64:
	mov	r12d, ecx
.label_36:
	test	r14, r14
	jne	.label_38
	and	al, 1
	jne	.label_38
	test	r12d, r12d
	jle	.label_39
	inc	r12d
	jmp	.label_43
	.section	.text
	.align	16
	#Procedure 0x401734
	.globl sub_401734
	.type sub_401734, @function
sub_401734:

	nop	word ptr cs:[rax + rax]
.label_57:
	mov	rdi, qword ptr [rip + stdout]
	mov	rax, qword ptr [rdi + 0x28]
	cmp	rax, qword ptr [rdi + 0x30]
	jae	.label_48
	lea	rcx, [rax + 1]
	mov	qword ptr [rdi + 0x28], rcx
	mov	byte ptr [rax], 0x20
.label_59:
	add	r13, 8
	dec	r12d
	cmp	r12d, 1
	jg	.label_43
	jmp	.label_39
.label_48:
	mov	esi, 0x20
	call	__overflow
	jmp	.label_59
	.section	.text
	.align	16
	#Procedure 0x40177a
	.globl sub_40177a
	.type sub_40177a, @function
sub_40177a:

	nop	word ptr [rax + rax]
.label_43:
	mov	rdi, qword ptr [r13]
	mov	rsi, qword ptr [rip + stdout]
	call	fputs_unlocked
	cmp	r12d, 2
	jne	.label_57
	jmp	.label_39
.label_38:
	test	r12d, r12d
	jle	.label_39
	mov	dword ptr [rsp + 0x14], r15d
	jmp	.label_52
	.section	.text
	.align	16
	#Procedure 0x4017ab
	.globl sub_4017ab
	.type sub_4017ab, @function
sub_4017ab:

	nop	dword ptr [rax + rax]
.label_83:
	lea	rcx, [rax + 1]
	mov	qword ptr [rdi + 0x28], rcx
	mov	byte ptr [rax], 0x20
.label_52:
	mov	rbx, qword ptr [r13]
	jmp	.label_73
	.section	.text
	.align	16
	#Procedure 0x4017c1
	.globl sub_4017c1
	.type sub_4017c1, @function
sub_4017c1:

	nop	word ptr cs:[rax + rax]
.label_81:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rdi + 0x28], rdx
	mov	byte ptr [rcx], al
	mov	rbx, rbp
.label_73:
	lea	rbp, [rbx + 1]
	mov	al, byte ptr [rbx]
	cmp	al, 0x5c
	je	.label_79
	test	al, al
	jne	.label_32
	jmp	.label_84
	.section	.text
	.align	16
	#Procedure 0x4017f4
	.globl sub_4017f4
	.type sub_4017f4, @function
sub_4017f4:

	nop	word ptr cs:[rax + rax]
.label_79:
	mov	r14b, byte ptr [rbp]
	mov	al, 0x5c
	test	r14b, r14b
	je	.label_32
	lea	rbp, [rbx + 2]
	mov	ecx, r14d
	add	cl, 0xd0
	movzx	ecx, cl
	cmp	cl, 0x48
	ja	.label_35
	jmp	qword ptr [(rcx * 8) + label_41]
.label_360:
	mov	r14b, byte ptr [rbp]
	mov	eax, r14d
	and	al, 0xf8
	cmp	al, 0x30
	jne	.label_42
	add	rbx, 3
	mov	rbp, rbx
.label_361:
	mov	al, r14b
	add	al, 0xd0
	movzx	ecx, byte ptr [rbp]
	mov	edx, ecx
	and	dl, 0xf8
	cmp	dl, 0x30
	jne	.label_47
	shl	al, 3
	add	cl, al
	mov	al, cl
	add	al, 0xd0
	movzx	ecx, byte ptr [rbp + 1]
	inc	rbp
.label_47:
	mov	edx, ecx
	and	dl, 0xf8
	cmp	dl, 0x30
	jne	.label_32
	shl	al, 3
	inc	rbp
	add	cl, al
	add	cl, 0xd0
	mov	al, cl
	jmp	.label_32
.label_362:
	mov	al, 7
	jmp	.label_32
.label_363:
	mov	al, 8
	jmp	.label_32
.label_364:
	mov	al, 0x1b
	jmp	.label_32
.label_365:
	mov	al, 0xc
	jmp	.label_32
.label_366:
	mov	al, 0xa
	jmp	.label_32
.label_367:
	mov	al, 0xd
	jmp	.label_32
.label_368:
	mov	al, 9
	jmp	.label_32
.label_369:
	mov	al, 0xb
	jmp	.label_32
.label_370:
	movzx	r15d, byte ptr [rbp]
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	test	byte ptr [rax + r15*2 + 1], 0x10
	jne	.label_72
	mov	r14b, 0x78
	mov	eax, 0x11
	mov	r15d, dword ptr [rsp + 0x14]
	jmp	.label_77
.label_42:
	xor	eax, eax
	jmp	.label_32
.label_72:
	lea	rbp, [rbx + 3]
	mov	ecx, r15d
	add	cl, 0xbf
	movzx	ecx, cl
	cmp	cl, 0x25
	ja	.label_65
	mov	r14d, 0xa
	jmp	qword ptr [(rcx * 8) + label_86]
.label_422:
	mov	r14d, 0xb
	jmp	.label_34
.label_423:
	mov	r14d, 0xc
	jmp	.label_34
.label_424:
	mov	r14d, 0xd
	jmp	.label_34
.label_425:
	mov	r14d, 0xe
	jmp	.label_34
.label_426:
	mov	r14d, 0xf
	jmp	.label_34
.label_65:
	add	r15d, -0x30
	mov	r14d, r15d
.label_34:
	movzx	ecx, byte ptr [rbp]
	test	byte ptr [rax + rcx*2 + 1], 0x10
	jne	.label_45
	mov	r15d, dword ptr [rsp + 0x14]
	jmp	.label_49
.label_45:
	shl	r14d, 4
	mov	eax, ecx
	add	al, 0xbf
	movzx	edx, al
	cmp	dl, 0x25
	mov	r15d, dword ptr [rsp + 0x14]
	ja	.label_53
	mov	eax, 0xa
	jmp	qword ptr [(rdx * 8) + label_58]
.label_396:
	mov	eax, 0xb
	jmp	.label_60
.label_397:
	mov	eax, 0xc
	jmp	.label_60
.label_398:
	mov	eax, 0xd
	jmp	.label_60
.label_399:
	mov	eax, 0xe
	jmp	.label_60
.label_400:
	mov	eax, 0xf
	jmp	.label_60
.label_53:
	add	ecx, -0x30
	mov	eax, ecx
.label_60:
	add	rbx, 4
	add	r14d, eax
	mov	rbp, rbx
.label_49:
	xor	eax, eax
.label_77:
	mov	ecx, eax
	and	cl, 0x1f
	je	.label_56
	cmp	cl, 0x11
	jne	.label_68
.label_35:
	mov	rdi, qword ptr [rip + stdout]
	mov	rax, qword ptr [rdi + 0x28]
	cmp	rax, qword ptr [rdi + 0x30]
	jae	.label_71
	lea	rcx, [rax + 1]
	mov	qword ptr [rdi + 0x28], rcx
	mov	byte ptr [rax], 0x5c
.label_56:
	mov	al, r14b
	nop	word ptr cs:[rax + rax]
.label_32:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rdi + 0x28]
	cmp	rcx, qword ptr [rdi + 0x30]
	jb	.label_81
	movzx	esi, al
	call	__overflow
	mov	rbx, rbp
	jmp	.label_73
.label_71:
	mov	esi, 0x5c
	call	__overflow
	jmp	.label_56
	nop	word ptr cs:[rax + rax]
.label_84:
	cmp	r12d, 2
	jl	.label_39
	dec	r12d
	add	r13, 8
	mov	rdi, qword ptr [rip + stdout]
	mov	rax, qword ptr [rdi + 0x28]
	cmp	rax, qword ptr [rdi + 0x30]
	jb	.label_83
	mov	esi, 0x20
	call	__overflow
	jmp	.label_52
.label_68:
	test	eax, eax
	je	.label_52
	jmp	.label_55
.label_39:
	test	r15b, 1
	je	.label_55
	mov	rdi, qword ptr [rip + stdout]
	mov	rax, qword ptr [rdi + 0x28]
	cmp	rax, qword ptr [rdi + 0x30]
	jae	.label_50
	lea	rcx, [rax + 1]
	mov	qword ptr [rdi + 0x28], rcx
	mov	byte ptr [rax], 0xa
	jmp	.label_55
.label_51:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	qword ptr [rsp], 0
	mov	esi, OFFSET FLAT:label_21
	mov	edx, OFFSET FLAT:label_24
	mov	r8d, OFFSET FLAT:label_61
	mov	r9d, OFFSET FLAT:label_62
	xor	eax, eax
	call	version_etc
.label_55:
	xor	eax, eax
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_50:
	mov	esi, 0xa
	call	__overflow
	jmp	.label_55
.label_44:
	xor	edi, edi
	call	usage
	.section	.text
	.align	16
	#Procedure 0x401ad6
	.globl sub_401ad6
	.type sub_401ad6, @function
sub_401ad6:

	nop	
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401ae0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ae8
	.globl sub_401ae8
	.type sub_401ae8, @function
sub_401ae8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401af0
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x401af8
	.globl sub_401af8
	.type sub_401af8, @function
sub_401af8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401b00

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_93
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_89
	cmp	dword ptr [rbp], 0x20
	jne	.label_89
.label_93:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_91
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_89:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_87
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_90
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_88
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_91:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_90:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_92
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401bc0

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_94
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_96
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_98
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_96
	mov	esi, OFFSET FLAT:label_97
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_99
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_99:
	mov	rbx, r14
.label_96:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_94:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_95
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401c61
	.globl sub_401c61
	.type sub_401c61, @function
sub_401c61:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401c70
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ca3
	.globl sub_401ca3
	.type sub_401ca3, @function
sub_401ca3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401cb0
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x401cbf
	.globl sub_401cbf
	.type sub_401cbf, @function
sub_401cbf:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401cc0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ccf
	.globl sub_401ccf
	.type sub_401ccf, @function
sub_401ccf:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401cd0
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401d06
	.globl sub_401d06
	.type sub_401d06, @function
sub_401d06:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d10
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401d23
	.globl sub_401d23
	.type sub_401d23, @function
sub_401d23:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d30
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_100
	test	rdx, rdx
	je	.label_100
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_100:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401d5b
	.globl sub_401d5b
	.type sub_401d5b, @function
sub_401d5b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d60
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401dd5
	.globl sub_401dd5
	.type sub_401dd5, @function
sub_401dd5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401de0

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xb8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x20], rcx
	mov	qword ptr [rsp + 0x30], rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rsp + 0x100]
	mov	qword ptr [rsp + 0x70], rax
	mov	rax, qword ptr [rsp + 0xf8]
	mov	qword ptr [rsp + 0x78], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xa8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x90], eax
	mov	dword ptr [rsp + 0x18], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x8c], ebx
	mov	r10b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x40], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa0], rcx
.label_135:
	mov	r11, rbp
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_132
	mov	edi, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r8, qword ptr [rsp + 0x30]
	jmp	qword ptr [(rcx * 8) + label_138]
.label_418:
	mov	byte ptr [rsp + 7], r10b
	mov	edi, OFFSET FLAT:label_145
	mov	esi, r15d
	mov	rbx, r11
	mov	ebp, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x78], rax
	mov	edi, OFFSET FLAT:label_152
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebp
	mov	r10b, byte ptr [rsp + 7]
	mov	r11, rbx
	mov	qword ptr [rsp + 0x70], rax
.label_419:
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x78]
	jne	.label_165
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_165
	xor	r14d, r14d
	nop	word ptr cs:[rax + rax]
.label_176:
	cmp	r14, r11
	jae	.label_173
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], al
.label_173:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_176
.label_165:
	mov	rbp, qword ptr [rsp + 0x70]
	mov	rdi, rbp
	mov	rbx, r11
	call	strlen
	mov	r11, rbx
	mov	qword ptr [rsp + 0x40], rax
	mov	edi, r15d
	mov	qword ptr [rsp + 0x48], rbp
	mov	r13b, 1
	mov	sil, r12b
	mov	r8, qword ptr [rsp + 0x30]
	mov	r10b, byte ptr [rsp + 7]
	mov	r9d, dword ptr [rsp + 0x50]
	jmp	.label_183
.label_411:
	xor	edi, edi
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_183
.label_414:
	mov	al, 1
.label_412:
	mov	r12b, 1
.label_415:
	test	r12b, 1
	mov	cl, 1
	je	.label_197
	mov	ecx, eax
.label_197:
	mov	al, cl
.label_413:
	test	r12b, 1
	jne	.label_199
	test	r11, r11
	je	.label_200
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx], 0x27
.label_200:
	mov	r14d, 1
	jmp	.label_203
.label_199:
	xor	r14d, r14d
.label_203:
	mov	ecx, OFFSET FLAT:label_152
	mov	qword ptr [rsp + 0x48], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x40], rcx
	mov	r13d, eax
	mov	sil, r12b
	mov	edi, 2
	jmp	.label_183
.label_416:
	test	r12b, 1
	jne	.label_214
	test	r11, r11
	je	.label_216
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 0x22
.label_216:
	mov	r14d, 1
	jmp	.label_218
.label_417:
	mov	r13b, 1
	mov	edi, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_105
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	sil, 1
	jmp	.label_183
.label_214:
	xor	r14d, r14d
.label_218:
	mov	eax, OFFSET FLAT:label_105
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	r13b, 1
	mov	sil, r12b
	mov	edi, 5
	nop	word ptr cs:[rax + rax]
.label_183:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	r12b
	cmp	edi, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x2a]
	mov	edx, r15d
	mov	byte ptr [rsp + 0x17], cl
	and	dl, cl
	cmp	qword ptr [rsp + 0x40], 0
	setne	cl
	mov	ebx, ecx
	mov	byte ptr [rsp + 0x2e], dl
	and	bl, dl
	mov	byte ptr [rsp + 0x2f], bl
	mov	edx, esi
	and	dl, 1
	sete	bl
	and	al, dl
	mov	byte ptr [rsp + 0x2b], al
	mov	byte ptr [rsp + 6], dl
	and	r12b, dl
	mov	byte ptr [rsp + 0x2d], r12b
	or	bl, r15b
	mov	byte ptr [rsp + 0x1f], bl
	mov	byte ptr [rsp + 0x2c], r13b
	mov	qword ptr [rsp + 0xb0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x29], r13b
	xor	esi, esi
	mov	qword ptr [rsp + 0x38], rdi
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r12, rdi
	mov	rdi, r8
	jmp	.label_116
	.section	.text
	.align	16
	#Procedure 0x4020cd
	.globl sub_4020cd
	.type sub_4020cd, @function
sub_4020cd:

	nop	dword ptr [rax]
.label_177:
	inc	rsi
.label_116:
	cmp	rbp, -1
	je	.label_156
	cmp	rsi, rbp
	jne	.label_159
	jmp	.label_172
	.section	.text
	.align	16
	#Procedure 0x4020e3
	.globl sub_4020e3
	.type sub_4020e3, @function
sub_4020e3:

	nop	word ptr cs:[rax + rax]
.label_156:
	mov	rcx, -1
	cmp	byte ptr [rdi + rsi], 0
	je	.label_166
.label_159:
	cmp	byte ptr [rsp + 0x2f], 0
	je	.label_168
	mov	rax, qword ptr [rsp + 0x40]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_134
	cmp	rbp, -1
	jne	.label_134
	mov	r15d, r10d
	mov	rbp, r11
	mov	r13d, r9d
	mov	r12, r14
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r14, r12
	mov	r9d, r13d
	mov	r12, qword ptr [rsp + 0x38]
	mov	r10d, r15d
	mov	r11, rbp
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_134:
	cmp	rbx, rbp
	jbe	.label_184
.label_168:
	xor	r8d, r8d
.label_122:
	movzx	r15d, byte ptr [rdi + rsi]
	cmp	r15, 0x7e
	ja	.label_185
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_190]
.label_436:
	test	rsi, rsi
	jne	.label_179
	jmp	.label_110
	.section	.text
	.align	16
	#Procedure 0x402185
	.globl sub_402185
	.type sub_402185, @function
sub_402185:

	nop	word ptr cs:[rax + rax]
.label_184:
	mov	qword ptr [rsp + 0x20], rbp
	mov	ebp, r9d
	mov	r15d, r10d
	mov	rbx, r11
	mov	r12, rsi
	lea	rdi, [rdi + rsi]
	mov	rsi, qword ptr [rsp + 0x48]
	mov	rdx, qword ptr [rsp + 0x40]
	call	memcmp
	test	eax, eax
	sete	r8b
	jne	.label_206
	cmp	byte ptr [rsp + 6], 0
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	je	.label_122
	jmp	.label_142
.label_206:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_122
.label_440:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_103
	test	rsi, rsi
	jne	.label_106
	cmp	rbp, 1
	je	.label_110
	xor	r13d, r13d
	jmp	.label_104
.label_429:
	cmp	byte ptr [rsp + 0x17], 0
	je	.label_114
	cmp	byte ptr [rsp + 6], 0
	jne	.label_115
	cmp	r12d, 2
	jne	.label_120
	mov	eax, r9d
	and	al, 1
	jne	.label_120
	cmp	r14, r11
	jae	.label_123
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_123:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_126
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_126:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_175
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_175:
	add	r14, 3
	mov	r9b, 1
.label_120:
	mov	rcx, r14
	cmp	rcx, r11
	jae	.label_136
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + rcx], 0x5c
.label_136:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r12d, 2
	je	.label_140
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_140
	mov	dl, byte ptr [rdi + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_140
	cmp	r14, r11
	jae	.label_148
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x30
.label_148:
	lea	rdx, [rcx + 2]
	cmp	rdx, r11
	jae	.label_188
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rdx], 0x30
.label_188:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_104
.label_430:
	mov	bl, 0x62
	jmp	.label_102
.label_431:
	mov	cl, 0x74
	jmp	.label_112
.label_432:
	mov	bl, 0x76
	jmp	.label_102
.label_433:
	mov	bl, 0x66
	jmp	.label_102
.label_434:
	mov	cl, 0x72
	jmp	.label_112
.label_437:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa0], rax
	cmp	r12d, 2
	jne	.label_174
	cmp	byte ptr [rsp + 6], 0
	jne	.label_141
	test	r11, r11
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r11
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	r11, rax
	cmp	r14, r11
	jae	.label_181
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_181:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_194
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x5c
.label_194:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_198
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_198:
	add	r14, 3
	xor	r9d, r9d
.label_174:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_104
.label_438:
	mov	r15b, 0x3f
	cmp	r12d, 5
	je	.label_204
	cmp	r12d, 2
	jne	.label_179
	cmp	byte ptr [rsp + 6], 0
	je	.label_179
	jmp	.label_141
.label_439:
	cmp	r12d, 2
	jne	.label_215
	cmp	byte ptr [rsp + 6], 0
	jne	.label_141
	mov	r15b, 0x5c
	xor	eax, eax
	xor	r13d, r13d
	jmp	.label_109
.label_185:
	mov	dword ptr [rsp + 0x54], r8d
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	mov	qword ptr [rsp + 0x98], r11
	cmp	qword ptr [rsp + 0xa8], 1
	jne	.label_221
	mov	qword ptr [rsp + 0x20], rbp
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	r12d, 1
.label_101:
	and	r13b, 1
	mov	r8d, r13d
	or	r8b, byte ptr [rsp + 0x2a]
	mov	qword ptr [rsp + 0x60], r12
	cmp	r12, 1
	mov	r11, qword ptr [rsp + 0x98]
	mov	r10b, byte ptr [rsp + 7]
	mov	r12, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x50]
	ja	.label_119
	test	r8b, r8b
	je	.label_119
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rsp + 0x54]
	jmp	.label_104
.label_103:
	test	rsi, rsi
	jne	.label_191
	mov	cl, byte ptr [rdi + 1]
	test	cl, cl
	jne	.label_191
.label_110:
	mov	dl, 1
.label_435:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_141
	xor	eax, eax
	mov	r13b, dl
	nop	word ptr [rax + rax]
.label_104:
	cmp	byte ptr [rsp + 0x2e], 0
	je	.label_149
	cmp	qword ptr [rsp + 0xf0], 0
	jne	.label_151
	jmp	.label_155
	.section	.text
	.align	16
	#Procedure 0x4024d4
	.globl sub_4024d4
	.type sub_4024d4, @function
sub_4024d4:

	nop	word ptr cs:[rax + rax]
.label_149:
	cmp	byte ptr [rsp + 0x2d], 0
	je	.label_155
.label_151:
	mov	ebx, r8d
	mov	r8, rsi
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_163
	mov	rcx, qword ptr [rsp + 0xf0]
	and	esi, dword ptr [rcx + rdx*4]
	mov	ebx, r15d
	mov	rsi, r8
	je	.label_109
	jmp	.label_150
	.section	.text
	.align	16
	#Procedure 0x40251d
	.globl sub_40251d
	.type sub_40251d, @function
sub_40251d:

	nop	dword ptr [rax]
.label_155:
	test	r8b, r8b
	mov	ebx, r15d
	jne	.label_150
	jmp	.label_109
.label_163:
	mov	ebx, r15d
	mov	rsi, r8
	jmp	.label_150
.label_114:
	cmp	dword ptr [rsp + 0x90], 0
	jne	.label_177
	xor	r15d, r15d
	jmp	.label_179
.label_215:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x29], 0
	je	.label_112
	xor	eax, eax
	mov	r15b, 0x5c
	xor	r13d, r13d
	jmp	.label_109
.label_112:
	cmp	byte ptr [rsp + 0x1f], 0
	mov	ebx, ecx
	je	.label_141
.label_102:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x17], 0
	mov	r13d, 0
	je	.label_104
	nop	word ptr cs:[rax + rax]
.label_150:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_115
	cmp	r12d, 2
	jne	.label_201
	mov	eax, r9d
	and	al, 1
	jne	.label_201
	cmp	r14, r11
	jae	.label_162
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_162:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_208
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_208:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_202
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_202:
	add	r14, 3
	mov	r9b, 1
.label_201:
	cmp	r14, r11
	jae	.label_217
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_217:
	inc	r14
	jmp	.label_219
.label_221:
	mov	qword ptr [rsp + 0x80], 0
	cmp	rbp, -1
	jne	.label_222
	mov	rbx, rsi
	call	strlen
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_222:
	lea	rax, [rdi + rsi]
	mov	qword ptr [rsp + 0x60], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rax, [rsp + 0x80]
	mov	rcx, rax
	mov	qword ptr [rsp + 0x20], rbp
	mov	qword ptr [rsp + 0x58], rsi
.label_207:
	lea	rbx, [r12 + rsi]
	lea	rsi, [rdi + rbx]
	mov	rdx, rbp
	sub	rdx, rbx
	lea	rdi, [rsp + 0x94]
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_125
	cmp	rbp, -1
	movabs	rsi, 0x20000002b
	je	.label_128
	cmp	rbp, -2
	je	.label_131
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x2b]
	cmp	al, 1
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, qword ptr [rsp + 0x98]
	jne	.label_170
	mov	rax, qword ptr [rsp + 0x60]
	lea	rax, [rax + r12]
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_137:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_147
	bt	rsi, rdx
	jb	.label_154
.label_147:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_137
.label_170:
	mov	edi, dword ptr [rsp + 0x94]
	call	iswprint
	test	eax, eax
	jne	.label_187
	xor	r13d, r13d
.label_187:
	lea	rdi, [rsp + 0x80]
	add	r12, rbp
	mov	rbx, rdi
	call	mbsinit
	mov	rcx, rbx
	test	eax, eax
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x58]
	je	.label_207
	jmp	.label_101
.label_140:
	xor	r13d, r13d
	jmp	.label_104
.label_191:
	mov	rbp, -1
	xor	r13d, r13d
	jmp	.label_104
.label_204:
	cmp	dword ptr [rsp + 0x8c], 0
	je	.label_179
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_179
	cmp	byte ptr [rdi + rsi + 1], 0x3f
	jne	.label_179
	movsx	edx, byte ptr [rdi + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_117
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_139
	cmp	byte ptr [rsp + 6], 0
	jne	.label_158
	cmp	r14, r11
	jae	.label_182
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x3f
.label_182:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_210
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_210:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_205
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_205:
	lea	rax, [r14 + 3]
	cmp	rax, r11
	jae	.label_178
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x3f
.label_178:
	add	r14, 4
	xor	eax, eax
	mov	rsi, rcx
	mov	r15b, dl
	xor	r13d, r13d
	jmp	.label_104
.label_179:
	xor	eax, eax
.label_106:
	xor	r13d, r13d
	jmp	.label_104
.label_119:
	add	qword ptr [rsp + 0x60], rsi
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_220
	.section	.text
	.align	16
	#Procedure 0x402802
	.globl sub_402802
	.type sub_402802, @function
sub_402802:

	nop	word ptr cs:[rax + rax]
.label_180:
	inc	r14
	mov	r15b, byte ptr [rdi + rsi + 1]
	mov	rsi, rdx
.label_220:
	test	r8b, r8b
	je	.label_107
	mov	ecx, dword ptr [rsp + 0x54]
	test	cl, 1
	je	.label_108
	cmp	r14, r11
	jae	.label_111
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x5c
.label_111:
	inc	r14
	mov	dword ptr [rsp + 0x54], 0
	jmp	.label_108
	.section	.text
	.align	16
	#Procedure 0x40284c
	.globl sub_40284c
	.type sub_40284c, @function
sub_40284c:

	nop	dword ptr [rax]
.label_107:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_142
	cmp	r12d, 2
	jne	.label_124
	mov	eax, r9d
	and	al, 1
	jne	.label_124
	cmp	r14, r11
	jae	.label_127
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_127:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_129
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x24
.label_129:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_133
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x27
.label_133:
	add	r14, 3
	mov	r9b, 1
.label_124:
	cmp	r14, r11
	jae	.label_213
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_213:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_146
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_146:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_153
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_153:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_108:
	lea	rdx, [rsi + 1]
	cmp	qword ptr [rsp + 0x60], rdx
	jbe	.label_109
	test	r9b, 1
	je	.label_169
	mov	ebx, eax
	and	bl, 1
	jne	.label_169
	mov	rbx, rsi
	cmp	r14, r11
	jae	.label_171
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + r14], 0x27
.label_171:
	lea	rsi, [r14 + 1]
	cmp	rsi, r11
	jae	.label_186
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rsi], 0x27
.label_186:
	add	r14, 2
	xor	r9d, r9d
	mov	rsi, rbx
.label_169:
	cmp	r14, r11
	jae	.label_180
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + r14], r15b
	jmp	.label_180
	.section	.text
	.align	16
	#Procedure 0x402953
	.globl sub_402953
	.type sub_402953, @function
sub_402953:

	nop	word ptr cs:[rax + rax]
.label_109:
	test	r9b, 1
	je	.label_189
	and	al, 1
	jne	.label_189
	cmp	r14, r11
	jae	.label_192
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_192:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_157
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_157:
	add	r14, 2
	xor	r9d, r9d
.label_189:
	mov	ebx, r15d
.label_219:
	cmp	r14, r11
	jae	.label_195
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], bl
.label_195:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, r10b
	mov	r10d, r13d
	jmp	.label_177
.label_128:
	xor	r13d, r13d
.label_125:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_101
.label_131:
	mov	rbp, qword ptr [rsp + 0x20]
	cmp	rbp, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	jbe	.label_212
	mov	rsi, qword ptr [rsp + 0x58]
.label_196:
	mov	rax, qword ptr [rsp + 0x60]
	cmp	byte ptr [rax + r12], 0
	je	.label_193
	lea	rax, [rsi + r12 + 1]
	inc	r12
	cmp	rax, rbp
	jb	.label_196
	xor	r13d, r13d
	jmp	.label_101
.label_212:
	xor	r13d, r13d
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_101
.label_193:
	xor	r13d, r13d
	jmp	.label_101
.label_117:
	xor	r13d, r13d
	jmp	.label_104
.label_139:
	xor	r13d, r13d
	mov	rsi, rbx
	jmp	.label_104
	.section	.text
	.align	16
	#Procedure 0x402a28
	.globl sub_402a28
	.type sub_402a28, @function
sub_402a28:

	nop	dword ptr [rax + rax]
.label_172:
	mov	rcx, rsi
.label_166:
	cmp	r12d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 6], 0
	je	.label_113
	or	al, dl
	je	.label_118
.label_113:
	cmp	r12d, 2
	setne	al
	cmp	byte ptr [rsp + 6], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa0]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x2c]
	mov	rsi, qword ptr [rsp + 0xb0]
	je	.label_121
	or	al, dl
	jne	.label_121
	test	r10b, 1
	jne	.label_130
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_121
	test	r11, r11
	mov	r15d, r12d
	mov	al, bl
	mov	qword ptr [rsp + 0x20], rcx
	mov	r12d, esi
	mov	rbp, qword ptr [rsp + 0x68]
	je	.label_135
.label_121:
	mov	rdx, qword ptr [rsp + 0x48]
	test	rdx, rdx
	je	.label_143
	cmp	byte ptr [rsp + 6], 0
	mov	rcx, qword ptr [rsp + 8]
	jne	.label_144
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_144
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_164:
	cmp	r14, r11
	jae	.label_160
	mov	byte ptr [rcx + r14], al
.label_160:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_164
	jmp	.label_144
.label_115:
	mov	qword ptr [rsp + 0x20], rbp
.label_142:
	mov	rdx, rdi
	jmp	.label_167
.label_141:
	mov	qword ptr [rsp + 0x20], rbp
.label_154:
	mov	rdx, rdi
	mov	eax, 2
.label_161:
	mov	qword ptr [rsp + 0x38], rax
.label_167:
	mov	r9d, dword ptr [rsp + 0x18]
	cmp	byte ptr [rsp + 0x17], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r11
	mov	rcx, qword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_209:
	mov	r14, rax
.label_211:
	mov	rax, r14
	add	rsp, 0xb8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_118:
	mov	rdx, rdi
	mov	qword ptr [rsp + 0x20], rcx
	jmp	.label_167
.label_130:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x20]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	qword ptr [rsp + 0x108]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_209
.label_143:
	mov	rcx, qword ptr [rsp + 8]
.label_144:
	cmp	r14, r11
	jae	.label_211
	mov	byte ptr [rcx + r14], 0
	jmp	.label_211
.label_158:
	mov	qword ptr [rsp + 0x20], rbp
	mov	rdx, rdi
	mov	eax, 5
	jmp	.label_161
.label_132:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402be7
	.globl sub_402be7
	.type sub_402be7, @function
sub_402be7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402bf0
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402cb1
	.globl sub_402cb1
	.type sub_402cb1, @function
sub_402cb1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402cc0
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_223
	mov	qword ptr [rax], rbx
.label_223:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402dac
	.globl sub_402dac
	.type sub_402dac, @function
sub_402dac:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402db0
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_224
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_226:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_226
.label_224:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_228
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_227], OFFSET FLAT:slot0
.label_228:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_225
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_225:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x402e41
	.globl sub_402e41
	.type sub_402e41, @function
sub_402e41:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402e50
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x402e5e
	.globl sub_402e5e
	.type sub_402e5e, @function
sub_402e5e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402e60

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_229
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_232
	cmp	r12d, 0x7fffffff
	je	.label_234
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_230
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_230:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_232:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_235
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_231
.label_235:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_233
	mov	rdi, r14
	call	free
.label_233:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_231:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_229:
	call	abort
.label_234:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40301d
	.globl sub_40301d
	.type sub_40301d, @function
sub_40301d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403020
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40302a
	.globl sub_40302a
	.type sub_40302a, @function
sub_40302a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403030
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403049
	.globl sub_403049
	.type sub_403049, @function
sub_403049:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403050
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403068
	.globl sub_403068
	.type sub_403068, @function
sub_403068:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403070
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_236
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_236:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4030dc
	.globl sub_4030dc
	.type sub_4030dc, @function
sub_4030dc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4030e0
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_237
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_237:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403148
	.globl sub_403148
	.type sub_403148, @function
sub_403148:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403150
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_238
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_238:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4031b8
	.globl sub_4031b8
	.type sub_4031b8, @function
sub_4031b8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4031c0
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_239
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_239:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403221
	.globl sub_403221
	.type sub_403221, @function
sub_403221:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403230
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x40329e
	.globl sub_40329e
	.type sub_40329e, @function
sub_40329e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4032a0
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x40330f
	.globl sub_40330f
	.type sub_40330f, @function
sub_40330f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403310

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403365
	.globl sub_403365
	.type sub_403365, @function
sub_403365:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403370
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4033c4
	.globl sub_4033c4
	.type sub_4033c4, @function
sub_4033c4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4033d0
	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_243
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_243:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403465
	.globl sub_403465
	.type sub_403465, @function
sub_403465:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403470
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_244
	test	rdx, rdx
	je	.label_244
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_244:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4034de
	.globl sub_4034de
	.type sub_4034de, @function
sub_4034de:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4034e0
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_245
	test	rdx, rdx
	je	.label_245
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_245:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40354a
	.globl sub_40354a
	.type sub_40354a, @function
sub_40354a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403550
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_246
	test	rsi, rsi
	je	.label_246
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_246:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4035c0
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_240]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_241]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_242]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_247
	test	rsi, rsi
	je	.label_247
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_247:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40362c
	.globl sub_40362c
	.type sub_40362c, @function
sub_40362c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403630
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40363a
	.globl sub_40363a
	.type sub_40363a, @function
sub_40363a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403640
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403658
	.globl sub_403658
	.type sub_403658, @function
sub_403658:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403660
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403671
	.globl sub_403671
	.type sub_403671, @function
sub_403671:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403680
	.globl quote
	.type quote, @function
quote:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403699
	.globl sub_403699
	.type sub_403699, @function
sub_403699:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4036a0

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_253
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_249
	cmp	ecx, 0x55
	jne	.label_248
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_248
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_248
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_248
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_248
	cmp	byte ptr [rax + 5], 0
	jne	.label_248
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_255
	mov	eax, OFFSET FLAT:label_256
	jmp	.label_252
.label_249:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_248
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_248
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_248
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_248
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_248
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_248
	cmp	byte ptr [rax + 7], 0
	je	.label_254
.label_248:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_105
	mov	eax, OFFSET FLAT:label_152
.label_252:
	cmove	rax, rcx
.label_253:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_254:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_250
	mov	eax, OFFSET FLAT:label_251
	jmp	.label_252
	.section	.text
	.align	16
	#Procedure 0x403765
	.globl sub_403765
	.type sub_403765, @function
sub_403765:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403770

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_267
	mov	edx, OFFSET FLAT:label_262
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_269
.label_267:
	mov	edx, OFFSET FLAT:label_270
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_269:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_275
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_272
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_258
	jmp	qword ptr [(r12 * 8) + label_259]
.label_377:
	add	rsp, 8
	jmp	.label_257
.label_258:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_266
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_257
.label_378:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_273
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_379:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_271
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_380:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_264
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_381:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_260
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_257
.label_382:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_263
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_257
.label_383:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_261
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_257
.label_384:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_265
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_257
.label_386:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_268
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_257
.label_385:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_274
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_257:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x403ac8
	.globl sub_403ac8
	.type sub_403ac8, @function
sub_403ac8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ad0
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_276:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_276
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x403af1
	.globl sub_403af1
	.type sub_403af1, @function
sub_403af1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403b00

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_277
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_279
.label_277:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_279:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_280
	cmp	r10d, 0x29
	jae	.label_289
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_278
.label_289:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_278:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_280
	cmp	r10d, 0x29
	jae	.label_287
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_288
.label_287:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_288:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_280
	cmp	r10d, 0x29
	jae	.label_285
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_286
.label_285:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_286:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_280
	cmp	r10d, 0x29
	jae	.label_283
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_284
.label_283:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_284:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_280
	cmp	r10d, 0x29
	jae	.label_281
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_282
.label_281:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_282:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_280
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_280
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_280
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_280
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_280:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x403ce2
	.globl sub_403ce2
	.type sub_403ce2, @function
sub_403ce2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403cf0

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_290
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_290:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x403d73
	.globl sub_403d73
	.type sub_403d73, @function
sub_403d73:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403d80
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_291
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_292
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_294
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_24
	mov	ecx, OFFSET FLAT:label_25
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_293
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x403df4
	.globl sub_403df4
	.type sub_403df4, @function
sub_403df4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403e00
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_295
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_296
	test	rax, rax
	je	.label_295
.label_296:
	pop	rbx
	ret	
.label_295:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403e35
	.globl sub_403e35
	.type sub_403e35, @function
sub_403e35:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403e40

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_297
	test	rax, rax
	je	.label_298
.label_297:
	pop	rbx
	ret	
.label_298:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403e5a
	.globl sub_403e5a
	.type sub_403e5a, @function
sub_403e5a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403e60
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_299
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_300
	test	rbx, rbx
	jne	.label_300
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_300:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_301
	test	rax, rax
	je	.label_299
.label_301:
	pop	rbx
	ret	
.label_299:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403ea8
	.globl sub_403ea8
	.type sub_403ea8, @function
sub_403ea8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403eb0

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_302
	test	rbx, rbx
	jne	.label_302
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_302:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_304
	test	rax, rax
	je	.label_303
.label_304:
	pop	rbx
	ret	
.label_303:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403ee0
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_305
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_308
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_306
.label_305:
	test	rcx, rcx
	jne	.label_310
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_310:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_307
.label_306:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_309
	test	rbx, rbx
	jne	.label_309
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_309:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_311
	test	rax, rax
	je	.label_308
.label_311:
	pop	rbx
	ret	
.label_308:
	call	xalloc_die
.label_307:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403f77
	.globl sub_403f77
	.type sub_403f77, @function
sub_403f77:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403f80
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_312
	test	rax, rax
	je	.label_313
.label_312:
	pop	rbx
	ret	
.label_313:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403f9a
	.globl sub_403f9a
	.type sub_403f9a, @function
sub_403f9a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403fa0
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_314
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_317
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_318
	call	free
	xor	eax, eax
	jmp	.label_315
.label_314:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_316
	mov	qword ptr [rsi], rbx
.label_318:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_315
	test	rax, rax
	je	.label_316
.label_315:
	pop	rbx
	ret	
.label_316:
	call	xalloc_die
.label_317:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404004
	.globl sub_404004
	.type sub_404004, @function
sub_404004:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404010
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_320
	test	r14, r14
	je	.label_319
.label_320:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_319:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404046
	.globl sub_404046
	.type sub_404046, @function
sub_404046:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404050
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_321
	call	rpl_calloc
	test	rax, rax
	je	.label_321
	pop	rcx
	ret	
.label_321:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404076
	.globl sub_404076
	.type sub_404076, @function
sub_404076:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404080

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_322
	test	r15, r15
	je	.label_323
.label_322:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_323:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4040bc
	.globl sub_4040bc
	.type sub_4040bc, @function
sub_4040bc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4040c0
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_325
	test	r15, r15
	je	.label_324
.label_325:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_324:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404102
	.globl sub_404102
	.type sub_404102, @function
sub_404102:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404110

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_326
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_88
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404140

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_327
	test	rsi, rsi
	mov	ecx, 1
	je	.label_328
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_328
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_327:
	mov	ecx, 1
.label_328:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x40418b
	.globl sub_40418b
	.type sub_40418b, @function
sub_40418b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404190

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_329
	cmp	r15, -2
	jb	.label_329
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_329
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_329:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4041e6
	.globl sub_4041e6
	.type sub_4041e6, @function
sub_4041e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4041f0

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_331
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_330
	test	cl, cl
	jne	.label_330
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_330
.label_331:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_330
	call	__errno_location
	mov	dword ptr [rax], 0
.label_330:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404250

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_333
	cmp	byte ptr [rax], 0x43
	jne	.label_335
	cmp	byte ptr [rax + 1], 0
	je	.label_332
.label_335:
	mov	esi, OFFSET FLAT:label_334
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_333
.label_332:
	xor	ebx, ebx
.label_333:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404281
	.globl sub_404281
	.type sub_404281, @function
sub_404281:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404290

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_82
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_336
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4042b5
	.globl sub_4042b5
	.type sub_4042b5, @function
sub_4042b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4042c0

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_337
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_339
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_337
.label_339:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_337
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_338
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_338:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_337:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x404334
	.globl sub_404334
	.type sub_404334, @function
sub_404334:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404340

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_340
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_340
	test	byte ptr [rbx + 1], 1
	je	.label_340
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_340:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x404373
	.globl sub_404373
	.type sub_404373, @function
sub_404373:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404380

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_341
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_341
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_342
.label_341:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_342:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_343
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_343:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4043ee
	.globl sub_4043ee
	.type sub_4043ee, @function
sub_4043ee:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4043f0

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x404407
	.globl sub_404407
	.type sub_404407, @function
sub_404407:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404475
	.globl sub_404475
	.type sub_404475, @function
sub_404475:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404482
	.globl sub_404482
	.type sub_404482, @function
sub_404482:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4044a6
	.globl sub_4044a6
	.type sub_4044a6, @function
sub_4044a6:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_465:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_41:
	.quad .label_360
	.quad .label_361
	.quad .label_361
	.quad .label_361
	.quad .label_361
	.quad .label_361
	.quad .label_361
	.quad .label_361
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_32
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_362
	.quad .label_363
	.quad .label_55
	.quad .label_35
	.quad .label_364
	.quad .label_365
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_366
	.quad .label_35
	.quad .label_35
	.quad .label_35
	.quad .label_367
	.quad .label_35
	.quad .label_368
	.quad .label_35
	.quad .label_369
	.quad .label_35
	.quad .label_370
label_86:
	.quad .label_34
	.quad .label_422
	.quad .label_423
	.quad .label_424
	.quad .label_425
	.quad .label_426
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_65
	.quad .label_34
	.quad .label_422
	.quad .label_423
	.quad .label_424
	.quad .label_425
	.quad .label_426
label_58:
	.quad .label_60
	.quad .label_396
	.quad .label_397
	.quad .label_398
	.quad .label_399
	.quad .label_400
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_53
	.quad .label_60
	.quad .label_396
	.quad .label_397
	.quad .label_398
	.quad .label_399
	.quad .label_400
label_18:
	.asciz "status == EXIT_SUCCESS"
label_19:
	.asciz "src/echo.c"
label_20:
	.asciz "void usage(int)"
label_17:
	.asciz "Usage: %s [SHORT-OPTION]... [STRING]...\n  or:  %s LONG-OPTION\n"
label_15:
	.asciz "Echo the STRING(s) to standard output.\n\n  -n             do not output the trailing newline\n"
label_27:
	.asciz "  -e             enable interpretation of backslash escapes\n  -E             disable interpretation of backslash escapes (default)\n"
label_16:
	.asciz "      --help     display this help and exit\n"
label_26:
	.asciz "      --version  output version information and exit\n"
label_10:
	.asciz "\nIf -e is in effect, the following sequences are recognized:\n\n"
label_12:
	.asciz "  \\\\      backslash\n  \\a      alert (BEL)\n  \\b      backspace\n  \\c      produce no further output\n  \\e      escape\n  \\f      form feed\n  \\n      new line\n  \\r      carriage return\n  \\t      horizontal tab\n  \\v      vertical tab\n"
label_22:
	.asciz "  \\0NNN   byte with octal value NNN (1 to 3 digits)\n  \\xHH    byte with hexadecimal value HH (1 to 2 digits)\n"
label_23:
	.asciz "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n"
label_21:
	.asciz "echo"
label_63:
	.asciz "POSIXLY_CORRECT"
label_82:
	.byte 0
label_33:
	.asciz "coreutils"
label_85:
	.asciz "/usr/local/share/locale"
label_40:
	.asciz "--help"
label_46:
	.asciz "--version"
label_24:
	.asciz "GNU coreutils"
label_61:
	.asciz "Brian Fox"
label_62:
	.asciz "Chet Ramey"
label_13:
	.asciz "\n%s online help: <%s>\n"
label_25:
	.asciz "https://www.gnu.org/software/coreutils/"
label_11:
	.asciz "en_"
label_30:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_31:
	.asciz "Full documentation <%s%s>\n"
label_28:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_29:
	.asciz " invocation"
label_393:
	.asciz "8.31"
label_87:
	.asciz "write error"
label_92:
	.asciz "%s: %s"
label_88:
	.asciz "%s"
label_95:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_98:
	.asciz "/.libs/"
label_97:
	.asciz "lt-"
label_441:
	.asciz "literal"
label_442:
	.asciz "shell"
label_443:
	.asciz "shell-always"
label_444:
	.asciz "shell-escape"
label_445:
	.asciz "shell-escape-always"
label_446:
	.asciz "c"
label_447:
	.asciz "c-maybe"
label_448:
	.asciz "escape"
label_449:
	.asciz "locale"
label_450:
	.asciz "clocale"
label_105:
	.byte 34
	.byte 0
label_145:
	.byte 96
	.byte 0
label_152:
	.asciz "'"
label_255:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_256:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_250:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_251:
	.byte 161
	.byte 175
	.byte 0
label_262:
	.asciz "%s (%s) %s\n"
label_270:
	.asciz "%s %s\n"
label_275:
	.asciz "(C)"
label_272:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_273:
	.asciz "Written by %s.\n"
label_271:
	.asciz "Written by %s and %s.\n"
label_264:
	.asciz "Written by %s, %s, and %s.\n"
label_260:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_263:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_261:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_265:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_274:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_268:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_266:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_291:
	.asciz "\nReport bugs to: %s\n"
label_292:
	.asciz "bug-coreutils@gnu.org"
label_294:
	.asciz "%s home page: <%s>\n"
label_293:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_326:
	.asciz "memory exhausted"
label_334:
	.asciz "POSIX"
label_336:
	.asciz "ASCII"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_138:
	.quad .label_411
	.quad .label_412
	.quad .label_413
	.quad .label_414
	.quad .label_415
	.quad .label_416
	.quad .label_417
	.quad .label_183
	.quad .label_418
	.quad .label_418
	.quad .label_419
label_190:
	.quad .label_429
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_102
	.quad .label_430
	.quad .label_431
	.quad .label_112
	.quad .label_432
	.quad .label_433
	.quad .label_434
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_185
	.quad .label_110
	.quad .label_435
	.quad .label_435
	.quad .label_436
	.quad .label_435
	.quad .label_104
	.quad .label_435
	.quad .label_437
	.quad .label_435
	.quad .label_435
	.quad .label_435
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_435
	.quad .label_435
	.quad .label_435
	.quad .label_435
	.quad .label_438
	.quad .label_185
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_435
	.quad .label_439
	.quad .label_104
	.quad .label_435
	.quad .label_104
	.quad .label_435
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_104
	.quad .label_440
	.quad .label_435
	.quad .label_440
	.quad .label_436
	.quad label_441
	.quad label_442
	.quad label_443
	.quad label_444
	.quad label_445
	.quad label_446
	.quad label_447
	.quad label_448
	.quad label_449
	.quad label_450
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_259:
	.quad .label_377
	.quad .label_378
	.quad .label_379
	.quad .label_380
	.quad .label_381
	.quad .label_382
	.quad .label_383
	.quad .label_384
	.quad .label_385
	.quad .label_386
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_466:
	.section .data
	.align 8
.label_344:
	.quad 0
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_393
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_227:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .tm_clone_table
	.align 16
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .bss
	.align 32
.label_4:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_242:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_241:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_240:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: