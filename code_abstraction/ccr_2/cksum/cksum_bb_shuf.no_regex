	.section	.text
	.align	16
	#Procedure 0x4013d9
	.globl sub_4013d9
	.type sub_4013d9, @function
sub_4013d9:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x4013da
	.globl sub_4013da
	.type sub_4013da, @function
sub_4013da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401412
	.globl sub_401412
	.type sub_401412, @function
sub_401412:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40145a
	.globl sub_40145a
	.type sub_40145a, @function
sub_40145a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40147c
	.globl sub_40147c
	.type sub_40147c, @function
sub_40147c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x40148d
	.globl sub_40148d
	.type sub_40148d, @function
sub_40148d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4014a6
	.globl sub_4014a6
	.type sub_4014a6, @function
sub_4014a6:

	nop	word ptr cs:[rax + rax]
.label_11:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_9
	test	rax, rax
	je	.label_10
.label_9:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4014c4

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_11
	test	rbx, rbx
	jne	.label_11
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_10:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4014e0
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_12
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_13
	test	rax, rax
	je	.label_12
.label_13:
	pop	rbx
	ret	
.label_12:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401515
	.globl sub_401515
	.type sub_401515, @function
sub_401515:

	nop	word ptr cs:[rax + rax]
.label_15:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_14
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_14:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401554
	.globl sub_401554
	.type sub_401554, @function
sub_401554:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401556

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_16
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_16
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_15
.label_16:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
	.section	.text
	.align	16
	#Procedure 0x401590
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401651
	.globl sub_401651
	.type sub_401651, @function
sub_401651:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401660

	.globl parse_gnu_standard_options_only
	.type parse_gnu_standard_options_only, @function
parse_gnu_standard_options_only:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0xd8
	mov	r14, r8
	mov	r15, rcx
	mov	rbx, rdx
	test	al, al
	je	.label_17
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_17:
	mov	ebp, dword ptr [rip + opterr]
	mov	dword ptr [rip + opterr],  1
	mov	eax, OFFSET FLAT:label_20
	mov	edx, OFFSET FLAT:label_21
	test	r9b, r9b
	cmovne	rdx, rax
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	call	getopt_long
	cmp	eax, -1
	je	.label_23
	mov	rcx, qword ptr [rsp + 0x100]
	cmp	eax, 0x68
	je	.label_18
	cmp	eax, 0x76
	je	.label_19
	mov	edi, dword ptr [rip + exit_failure]
	jmp	.label_22
.label_18:
	xor	edi, edi
.label_22:
	call	rcx
.label_23:
	mov	dword ptr [rip + opterr],  ebp
	add	rsp, 0xd8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_19:
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0x108]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x30
	mov	rdi, qword ptr [rip + stdout]
	lea	r8, [rsp]
	mov	rsi, rbx
	mov	rdx, r15
	mov	rcx, r14
	call	version_etc_va
	xor	edi, edi
	call	exit
	.section	.text
	.align	16
	#Procedure 0x40175c
	.globl sub_40175c
	.type sub_40175c, @function
sub_40175c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x401760

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4017b5
	.globl sub_4017b5
	.type sub_4017b5, @function
sub_4017b5:

	nop	word ptr cs:[rax + rax]
.label_27:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4017c5
	.globl sub_4017c5
	.type sub_4017c5, @function
sub_4017c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4017cf
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_28
	test	r14, r14
	je	.label_27
.label_28:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_29:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401805
	.globl sub_401805
	.type sub_401805, @function
sub_401805:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40180b

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_30
	test	rax, rax
	je	.label_29
.label_30:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x401820
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x401838
	.globl sub_401838
	.type sub_401838, @function
sub_401838:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401840
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4018b5
	.globl sub_4018b5
	.type sub_4018b5, @function
sub_4018b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4018c0

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_35
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_33
	cmp	dword ptr [rbp], 0x20
	jne	.label_33
.label_35:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_37
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_36:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_34
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
.label_37:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_33:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_38
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_36
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_32
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_39:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_31
	call	__errno_location
	mov	dword ptr [rax], 0
.label_31:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x40199b

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_39
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_31
	test	cl, cl
	jne	.label_31
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_31
.label_40:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4019e5
	.globl sub_4019e5
	.type sub_4019e5, @function
sub_4019e5:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4019e9

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_41
	test	r15, r15
	je	.label_40
.label_41:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x401a20

	.globl umaxtostr
	.type umaxtostr, @function
umaxtostr:
	mov	rcx, rdi
	mov	byte ptr [rsi + 0x14], 0
	add	rsi, 0x14
	movabs	r8, 0xcccccccccccccccd
	nop	word ptr cs:[rax + rax]
.label_42:
	mov	rax, rcx
	mul	r8
	shr	rdx, 3
	lea	eax, [rdx + rdx]
	lea	eax, [rax + rax*4]
	mov	edi, ecx
	sub	edi, eax
	or	edi, 0x30
	mov	byte ptr [rsi - 1], dil
	dec	rsi
	cmp	rcx, 9
	mov	rcx, rdx
	ja	.label_42
	mov	rax, rsi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401a6b
	.globl sub_401a6b
	.type sub_401a6b, @function
sub_401a6b:

	nop	dword ptr [rax + rax]
.label_43:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401a75
	.globl sub_401a75
	.type sub_401a75, @function
sub_401a75:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401a77
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_43
	test	rdx, rdx
	je	.label_43
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ae0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_44
	test	rsi, rsi
	je	.label_44
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_44:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401b50

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_45
	cmp	r15, -2
	jb	.label_45
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_45
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_45:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ba6
	.globl sub_401ba6
	.type sub_401ba6, @function
sub_401ba6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401bb0
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x401c1e
	.globl sub_401c1e
	.type sub_401c1e, @function
sub_401c1e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401c20

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x401c37
	.globl sub_401c37
	.type sub_401c37, @function
sub_401c37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401c40
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401c53
	.globl sub_401c53
	.type sub_401c53, @function
sub_401c53:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401c60

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_56
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_58
.label_56:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_58:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_47
	cmp	r10d, 0x29
	jae	.label_55
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_57
.label_55:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_57:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_47
	cmp	r10d, 0x29
	jae	.label_53
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_54
.label_53:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_54:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_47
	cmp	r10d, 0x29
	jae	.label_51
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_52
.label_51:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_52:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_47
	cmp	r10d, 0x29
	jae	.label_49
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_50
.label_49:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_50:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_47
	cmp	r10d, 0x29
	jae	.label_46
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_48
.label_46:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_48:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_47
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_47
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_47
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_47
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_47:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x401e42
	.globl sub_401e42
	.type sub_401e42, @function
sub_401e42:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401e50

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_59
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_59
	test	byte ptr [rbx + 1], 1
	je	.label_59
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_59:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x401e83
	.globl sub_401e83
	.type sub_401e83, @function
sub_401e83:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401e90
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_60
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_60:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401ef8
	.globl sub_401ef8
	.type sub_401ef8, @function
sub_401ef8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401f00

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_61
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_32
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401f30

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xb8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x20], rcx
	mov	qword ptr [rsp + 0x30], rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rsp + 0x100]
	mov	qword ptr [rsp + 0x70], rax
	mov	rax, qword ptr [rsp + 0xf8]
	mov	qword ptr [rsp + 0x78], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xa8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x90], eax
	mov	dword ptr [rsp + 0x18], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x8c], ebx
	mov	r10b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x40], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa0], rcx
.label_180:
	mov	r11, rbp
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_178
	mov	edi, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r8, qword ptr [rsp + 0x30]
	jmp	qword ptr [(rcx * 8) + label_155]
.label_413:
	mov	byte ptr [rsp + 7], r10b
	mov	edi, OFFSET FLAT:label_62
	mov	esi, r15d
	mov	rbx, r11
	mov	ebp, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x78], rax
	mov	edi, OFFSET FLAT:label_69
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebp
	mov	r10b, byte ptr [rsp + 7]
	mov	r11, rbx
	mov	qword ptr [rsp + 0x70], rax
.label_414:
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x78]
	jne	.label_80
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_80
	xor	r14d, r14d
	nop	word ptr cs:[rax + rax]
.label_95:
	cmp	r14, r11
	jae	.label_90
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], al
.label_90:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_95
.label_80:
	mov	rbp, qword ptr [rsp + 0x70]
	mov	rdi, rbp
	mov	rbx, r11
	call	strlen
	mov	r11, rbx
	mov	qword ptr [rsp + 0x40], rax
	mov	edi, r15d
	mov	qword ptr [rsp + 0x48], rbp
	mov	r13b, 1
	mov	sil, r12b
	mov	r8, qword ptr [rsp + 0x30]
	mov	r10b, byte ptr [rsp + 7]
	mov	r9d, dword ptr [rsp + 0x50]
	jmp	.label_103
.label_406:
	xor	edi, edi
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_103
.label_409:
	mov	al, 1
.label_407:
	mov	r12b, 1
.label_410:
	test	r12b, 1
	mov	cl, 1
	je	.label_118
	mov	ecx, eax
.label_118:
	mov	al, cl
.label_408:
	test	r12b, 1
	jne	.label_121
	test	r11, r11
	je	.label_122
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx], 0x27
.label_122:
	mov	r14d, 1
	jmp	.label_126
.label_121:
	xor	r14d, r14d
.label_126:
	mov	ecx, OFFSET FLAT:label_69
	mov	qword ptr [rsp + 0x48], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x40], rcx
	mov	r13d, eax
	mov	sil, r12b
	mov	edi, 2
	jmp	.label_103
.label_411:
	test	r12b, 1
	jne	.label_137
	test	r11, r11
	je	.label_140
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 0x22
.label_140:
	mov	r14d, 1
	jmp	.label_143
.label_412:
	mov	r13b, 1
	mov	edi, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_145
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	sil, 1
	jmp	.label_103
.label_137:
	xor	r14d, r14d
.label_143:
	mov	eax, OFFSET FLAT:label_145
	mov	qword ptr [rsp + 0x48], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x40], rax
	mov	r13b, 1
	mov	sil, r12b
	mov	edi, 5
	nop	word ptr cs:[rax + rax]
.label_103:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	r12b
	cmp	edi, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x2a]
	mov	edx, r15d
	mov	byte ptr [rsp + 0x17], cl
	and	dl, cl
	cmp	qword ptr [rsp + 0x40], 0
	setne	cl
	mov	ebx, ecx
	mov	byte ptr [rsp + 0x2e], dl
	and	bl, dl
	mov	byte ptr [rsp + 0x2f], bl
	mov	edx, esi
	and	dl, 1
	sete	bl
	and	al, dl
	mov	byte ptr [rsp + 0x2b], al
	mov	byte ptr [rsp + 6], dl
	and	r12b, dl
	mov	byte ptr [rsp + 0x2d], r12b
	or	bl, r15b
	mov	byte ptr [rsp + 0x1f], bl
	mov	byte ptr [rsp + 0x2c], r13b
	mov	qword ptr [rsp + 0xb0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x29], r13b
	xor	esi, esi
	mov	qword ptr [rsp + 0x38], rdi
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r12, rdi
	mov	rdi, r8
	jmp	.label_159
	.section	.text
	.align	16
	#Procedure 0x40221d
	.globl sub_40221d
	.type sub_40221d, @function
sub_40221d:

	nop	dword ptr [rax]
.label_96:
	inc	rsi
.label_159:
	cmp	rbp, -1
	je	.label_73
	cmp	rsi, rbp
	jne	.label_75
	jmp	.label_76
	.section	.text
	.align	16
	#Procedure 0x402233
	.globl sub_402233
	.type sub_402233, @function
sub_402233:

	nop	word ptr cs:[rax + rax]
.label_73:
	mov	rcx, -1
	cmp	byte ptr [rdi + rsi], 0
	je	.label_81
.label_75:
	cmp	byte ptr [rsp + 0x2f], 0
	je	.label_83
	mov	rax, qword ptr [rsp + 0x40]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_86
	cmp	rbp, -1
	jne	.label_86
	mov	r15d, r10d
	mov	rbp, r11
	mov	r13d, r9d
	mov	r12, r14
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r14, r12
	mov	r9d, r13d
	mov	r12, qword ptr [rsp + 0x38]
	mov	r10d, r15d
	mov	r11, rbp
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_86:
	cmp	rbx, rbp
	jbe	.label_104
.label_83:
	xor	r8d, r8d
.label_133:
	movzx	r15d, byte ptr [rdi + rsi]
	cmp	r15, 0x7e
	ja	.label_106
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_110]
.label_380:
	test	rsi, rsi
	jne	.label_98
	jmp	.label_116
	.section	.text
	.align	16
	#Procedure 0x4022d5
	.globl sub_4022d5
	.type sub_4022d5, @function
sub_4022d5:

	nop	word ptr cs:[rax + rax]
.label_104:
	mov	qword ptr [rsp + 0x20], rbp
	mov	ebp, r9d
	mov	r15d, r10d
	mov	rbx, r11
	mov	r12, rsi
	lea	rdi, [rdi + rsi]
	mov	rsi, qword ptr [rsp + 0x48]
	mov	rdx, qword ptr [rsp + 0x40]
	call	memcmp
	test	eax, eax
	sete	r8b
	jne	.label_129
	cmp	byte ptr [rsp + 6], 0
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	je	.label_133
	jmp	.label_142
.label_129:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, rbx
	mov	r10d, r15d
	mov	rax, qword ptr [rsp + 0x38]
	mov	r9d, ebp
	mov	rsi, r12
	mov	r12, rax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_133
.label_384:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_149
	test	rsi, rsi
	jne	.label_151
	cmp	rbp, 1
	je	.label_116
	xor	r13d, r13d
	jmp	.label_74
.label_373:
	cmp	byte ptr [rsp + 0x17], 0
	je	.label_157
	cmp	byte ptr [rsp + 6], 0
	jne	.label_120
	cmp	r12d, 2
	jne	.label_163
	mov	eax, r9d
	and	al, 1
	jne	.label_163
	cmp	r14, r11
	jae	.label_167
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_167:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_170
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_170:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_101
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_101:
	add	r14, 3
	mov	r9b, 1
.label_163:
	mov	rcx, r14
	cmp	rcx, r11
	jae	.label_181
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + rcx], 0x5c
.label_181:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r12d, 2
	je	.label_64
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_64
	mov	dl, byte ptr [rdi + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_64
	cmp	r14, r11
	jae	.label_125
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x30
.label_125:
	lea	rdx, [rcx + 2]
	cmp	rdx, r11
	jae	.label_108
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rdx], 0x30
.label_108:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_74
.label_374:
	mov	bl, 0x62
	jmp	.label_88
.label_375:
	mov	cl, 0x74
	jmp	.label_67
.label_376:
	mov	bl, 0x76
	jmp	.label_88
.label_377:
	mov	bl, 0x66
	jmp	.label_88
.label_378:
	mov	cl, 0x72
	jmp	.label_67
.label_381:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa0], rax
	cmp	r12d, 2
	jne	.label_91
	cmp	byte ptr [rsp + 6], 0
	jne	.label_97
	test	r11, r11
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r11
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	r11, rax
	cmp	r14, r11
	jae	.label_100
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_100:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_115
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x5c
.label_115:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_119
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_119:
	add	r14, 3
	xor	r9d, r9d
.label_91:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_74
.label_382:
	mov	r15b, 0x3f
	cmp	r12d, 5
	je	.label_127
	cmp	r12d, 2
	jne	.label_98
	cmp	byte ptr [rsp + 6], 0
	je	.label_98
	jmp	.label_97
.label_383:
	cmp	r12d, 2
	jne	.label_138
	cmp	byte ptr [rsp + 6], 0
	jne	.label_97
	mov	r15b, 0x5c
	xor	eax, eax
	xor	r13d, r13d
	jmp	.label_84
.label_106:
	mov	dword ptr [rsp + 0x54], r8d
	mov	dword ptr [rsp + 0x50], r9d
	mov	byte ptr [rsp + 7], r10b
	mov	qword ptr [rsp + 0x98], r11
	cmp	qword ptr [rsp + 0xa8], 1
	jne	.label_147
	mov	qword ptr [rsp + 0x20], rbp
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	r12d, 1
.label_77:
	and	r13b, 1
	mov	r8d, r13d
	or	r8b, byte ptr [rsp + 0x2a]
	mov	qword ptr [rsp + 0x60], r12
	cmp	r12, 1
	mov	r11, qword ptr [rsp + 0x98]
	mov	r10b, byte ptr [rsp + 7]
	mov	r12, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x50]
	ja	.label_162
	test	r8b, r8b
	je	.label_162
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rsp + 0x54]
	jmp	.label_74
.label_149:
	test	rsi, rsi
	jne	.label_160
	mov	cl, byte ptr [rdi + 1]
	test	cl, cl
	jne	.label_160
.label_116:
	mov	dl, 1
.label_379:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_97
	xor	eax, eax
	mov	r13b, dl
	nop	word ptr [rax + rax]
.label_74:
	cmp	byte ptr [rsp + 0x2e], 0
	je	.label_66
	cmp	qword ptr [rsp + 0xf0], 0
	jne	.label_182
	jmp	.label_72
	.section	.text
	.align	16
	#Procedure 0x402624
	.globl sub_402624
	.type sub_402624, @function
sub_402624:

	nop	word ptr cs:[rax + rax]
.label_66:
	cmp	byte ptr [rsp + 0x2d], 0
	je	.label_72
.label_182:
	mov	ebx, r8d
	mov	r8, rsi
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_78
	mov	rcx, qword ptr [rsp + 0xf0]
	and	esi, dword ptr [rcx + rdx*4]
	mov	ebx, r15d
	mov	rsi, r8
	je	.label_84
	jmp	.label_94
	.section	.text
	.align	16
	#Procedure 0x40266d
	.globl sub_40266d
	.type sub_40266d, @function
sub_40266d:

	nop	dword ptr [rax]
.label_72:
	test	r8b, r8b
	mov	ebx, r15d
	jne	.label_94
	jmp	.label_84
.label_78:
	mov	ebx, r15d
	mov	rsi, r8
	jmp	.label_94
.label_157:
	cmp	dword ptr [rsp + 0x90], 0
	jne	.label_96
	xor	r15d, r15d
	jmp	.label_98
.label_138:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x29], 0
	je	.label_67
	xor	eax, eax
	mov	r15b, 0x5c
	xor	r13d, r13d
	jmp	.label_84
.label_67:
	cmp	byte ptr [rsp + 0x1f], 0
	mov	ebx, ecx
	je	.label_97
.label_88:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x17], 0
	mov	r13d, 0
	je	.label_74
	nop	word ptr cs:[rax + rax]
.label_94:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_120
	cmp	r12d, 2
	jne	.label_124
	mov	eax, r9d
	and	al, 1
	jne	.label_124
	cmp	r14, r11
	jae	.label_177
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_177:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_131
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x24
.label_131:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_102
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_102:
	add	r14, 3
	mov	r9b, 1
.label_124:
	cmp	r14, r11
	jae	.label_141
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_141:
	inc	r14
	jmp	.label_158
.label_147:
	mov	qword ptr [rsp + 0x80], 0
	cmp	rbp, -1
	jne	.label_148
	mov	rbx, rsi
	call	strlen
	mov	rsi, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, rax
.label_148:
	lea	rax, [rdi + rsi]
	mov	qword ptr [rsp + 0x60], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rax, [rsp + 0x80]
	mov	rcx, rax
	mov	qword ptr [rsp + 0x20], rbp
	mov	qword ptr [rsp + 0x58], rsi
.label_117:
	lea	rbx, [r12 + rsi]
	lea	rsi, [rdi + rbx]
	mov	rdx, rbp
	sub	rdx, rbx
	lea	rdi, [rsp + 0x94]
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_168
	cmp	rbp, -1
	movabs	rsi, 0x20000002b
	je	.label_172
	cmp	rbp, -2
	je	.label_176
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x2b]
	cmp	al, 1
	mov	rdi, qword ptr [rsp + 0x30]
	mov	r11, qword ptr [rsp + 0x98]
	jne	.label_92
	mov	rax, qword ptr [rsp + 0x60]
	lea	rax, [rax + r12]
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_173:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_139
	bt	rsi, rdx
	jb	.label_107
.label_139:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_173
.label_92:
	mov	edi, dword ptr [rsp + 0x94]
	call	iswprint
	test	eax, eax
	jne	.label_68
	xor	r13d, r13d
.label_68:
	lea	rdi, [rsp + 0x80]
	add	r12, rbp
	mov	rbx, rdi
	call	mbsinit
	mov	rcx, rbx
	test	eax, eax
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rbp, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x58]
	je	.label_117
	jmp	.label_77
.label_64:
	xor	r13d, r13d
	jmp	.label_74
.label_160:
	mov	rbp, -1
	xor	r13d, r13d
	jmp	.label_74
.label_127:
	cmp	dword ptr [rsp + 0x8c], 0
	je	.label_98
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_98
	cmp	byte ptr [rdi + rsi + 1], 0x3f
	jne	.label_98
	movsx	edx, byte ptr [rdi + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_109
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_135
	cmp	byte ptr [rsp + 6], 0
	jne	.label_130
	cmp	r14, r11
	jae	.label_71
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x3f
.label_71:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_165
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_165:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_128
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x22
.label_128:
	lea	rax, [r14 + 3]
	cmp	rax, r11
	jae	.label_166
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + rax], 0x3f
.label_166:
	add	r14, 4
	xor	eax, eax
	mov	rsi, rcx
	mov	r15b, dl
	xor	r13d, r13d
	jmp	.label_74
.label_98:
	xor	eax, eax
.label_151:
	xor	r13d, r13d
	jmp	.label_74
.label_162:
	add	qword ptr [rsp + 0x60], rsi
	xor	eax, eax
	mov	rbp, qword ptr [rsp + 0x20]
	jmp	.label_146
	.section	.text
	.align	16
	#Procedure 0x402952
	.globl sub_402952
	.type sub_402952, @function
sub_402952:

	nop	word ptr cs:[rax + rax]
.label_99:
	inc	r14
	mov	r15b, byte ptr [rdi + rsi + 1]
	mov	rsi, rdx
.label_146:
	test	r8b, r8b
	je	.label_152
	mov	ecx, dword ptr [rsp + 0x54]
	test	cl, 1
	je	.label_153
	cmp	r14, r11
	jae	.label_123
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + r14], 0x5c
.label_123:
	inc	r14
	mov	dword ptr [rsp + 0x54], 0
	jmp	.label_153
	.section	.text
	.align	16
	#Procedure 0x40299c
	.globl sub_40299c
	.type sub_40299c, @function
sub_40299c:

	nop	dword ptr [rax]
.label_152:
	cmp	byte ptr [rsp + 6], 0
	jne	.label_142
	cmp	r12d, 2
	jne	.label_89
	mov	eax, r9d
	and	al, 1
	jne	.label_89
	cmp	r14, r11
	jae	.label_171
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_171:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_174
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x24
.label_174:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_179
	mov	rdx, qword ptr [rsp + 8]
	mov	byte ptr [rdx + rax], 0x27
.label_179:
	add	r14, 3
	mov	r9b, 1
.label_89:
	cmp	r14, r11
	jae	.label_169
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x5c
.label_169:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_63
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_63:
	lea	rax, [r14 + 2]
	cmp	rax, r11
	jae	.label_70
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, qword ptr [rsp + 8]
	mov	byte ptr [rbx + rax], dl
.label_70:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_153:
	lea	rdx, [rsi + 1]
	cmp	qword ptr [rsp + 0x60], rdx
	jbe	.label_84
	test	r9b, 1
	je	.label_85
	mov	ebx, eax
	and	bl, 1
	jne	.label_85
	mov	rbx, rsi
	cmp	r14, r11
	jae	.label_87
	mov	rsi, qword ptr [rsp + 8]
	mov	byte ptr [rsi + r14], 0x27
.label_87:
	lea	rsi, [r14 + 1]
	cmp	rsi, r11
	jae	.label_93
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rsi], 0x27
.label_93:
	add	r14, 2
	xor	r9d, r9d
	mov	rsi, rbx
.label_85:
	cmp	r14, r11
	jae	.label_99
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + r14], r15b
	jmp	.label_99
	.section	.text
	.align	16
	#Procedure 0x402aa3
	.globl sub_402aa3
	.type sub_402aa3, @function
sub_402aa3:

	nop	word ptr cs:[rax + rax]
.label_84:
	test	r9b, 1
	je	.label_111
	and	al, 1
	jne	.label_111
	cmp	r14, r11
	jae	.label_113
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], 0x27
.label_113:
	lea	rax, [r14 + 1]
	cmp	rax, r11
	jae	.label_112
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + rax], 0x27
.label_112:
	add	r14, 2
	xor	r9d, r9d
.label_111:
	mov	ebx, r15d
.label_158:
	cmp	r14, r11
	jae	.label_150
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax + r14], bl
.label_150:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, r10b
	mov	r10d, r13d
	jmp	.label_96
.label_172:
	xor	r13d, r13d
.label_168:
	mov	rdi, qword ptr [rsp + 0x30]
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_77
.label_176:
	mov	rbp, qword ptr [rsp + 0x20]
	cmp	rbp, rbx
	mov	rdi, qword ptr [rsp + 0x30]
	jbe	.label_105
	mov	rsi, qword ptr [rsp + 0x58]
.label_144:
	mov	rax, qword ptr [rsp + 0x60]
	cmp	byte ptr [rax + r12], 0
	je	.label_154
	lea	rax, [rsi + r12 + 1]
	inc	r12
	cmp	rax, rbp
	jb	.label_144
	xor	r13d, r13d
	jmp	.label_77
.label_105:
	xor	r13d, r13d
	mov	rsi, qword ptr [rsp + 0x58]
	jmp	.label_77
.label_154:
	xor	r13d, r13d
	jmp	.label_77
.label_109:
	xor	r13d, r13d
	jmp	.label_74
.label_135:
	xor	r13d, r13d
	mov	rsi, rbx
	jmp	.label_74
	.section	.text
	.align	16
	#Procedure 0x402b78
	.globl sub_402b78
	.type sub_402b78, @function
sub_402b78:

	nop	dword ptr [rax + rax]
.label_76:
	mov	rcx, rsi
.label_81:
	cmp	r12d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 6], 0
	je	.label_156
	or	al, dl
	je	.label_161
.label_156:
	cmp	r12d, 2
	setne	al
	cmp	byte ptr [rsp + 6], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa0]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x2c]
	mov	rsi, qword ptr [rsp + 0xb0]
	je	.label_164
	or	al, dl
	jne	.label_164
	test	r10b, 1
	jne	.label_175
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_164
	test	r11, r11
	mov	r15d, r12d
	mov	al, bl
	mov	qword ptr [rsp + 0x20], rcx
	mov	r12d, esi
	mov	rbp, qword ptr [rsp + 0x68]
	je	.label_180
.label_164:
	mov	rdx, qword ptr [rsp + 0x48]
	test	rdx, rdx
	je	.label_183
	cmp	byte ptr [rsp + 6], 0
	mov	rcx, qword ptr [rsp + 8]
	jne	.label_65
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_65
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_79:
	cmp	r14, r11
	jae	.label_136
	mov	byte ptr [rcx + r14], al
.label_136:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_79
	jmp	.label_65
.label_120:
	mov	qword ptr [rsp + 0x20], rbp
.label_142:
	mov	rdx, rdi
	jmp	.label_82
.label_97:
	mov	qword ptr [rsp + 0x20], rbp
.label_107:
	mov	rdx, rdi
	mov	eax, 2
.label_114:
	mov	qword ptr [rsp + 0x38], rax
.label_82:
	mov	r9d, dword ptr [rsp + 0x18]
	cmp	byte ptr [rsp + 0x17], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r11
	mov	rcx, qword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_132:
	mov	r14, rax
.label_134:
	mov	rax, r14
	add	rsp, 0xb8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_161:
	mov	rdx, rdi
	mov	qword ptr [rsp + 0x20], rcx
	jmp	.label_82
.label_175:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x20]
	push	qword ptr [rsp + 0x78]
	push	qword ptr [rsp + 0x88]
	push	qword ptr [rsp + 0x108]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_132
.label_183:
	mov	rcx, qword ptr [rsp + 8]
.label_65:
	cmp	r14, r11
	jae	.label_134
	mov	byte ptr [rcx + r14], 0
	jmp	.label_134
.label_130:
	mov	qword ptr [rsp + 0x20], rbp
	mov	rdx, rdi
	mov	eax, 5
	jmp	.label_114
.label_178:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402d37
	.globl sub_402d37
	.type sub_402d37, @function
sub_402d37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402d40
	.globl parse_long_options
	.type parse_long_options, @function
parse_long_options:

	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0xd0
	mov	rbx, r9
	mov	r14, r8
	mov	r15, rcx
	mov	r12, rdx
	test	al, al
	je	.label_184
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_184:
	mov	ebp, dword ptr [rip + opterr]
	mov	dword ptr [rip + opterr],  0
	cmp	edi, 2
	jne	.label_186
	mov	edi, 2
	mov	edx, OFFSET FLAT:label_21
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	call	getopt_long
	cmp	eax, 0x68
	je	.label_185
	cmp	eax, 0x76
	jne	.label_186
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0x100]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x30
	mov	rdi, qword ptr [rip + stdout]
	lea	r8, [rsp]
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	call	version_etc_va
	xor	edi, edi
	call	exit
.label_185:
	xor	edi, edi
	call	rbx
.label_186:
	mov	dword ptr [rip + opterr],  ebp
	mov	dword ptr [rip + optind],  0
	add	rsp, 0xd0
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402e36
	.globl sub_402e36
	.type sub_402e36, @function
sub_402e36:

	nop	word ptr cs:[rax + rax]
.label_187:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402e45
	.globl sub_402e45
	.type sub_402e45, @function
sub_402e45:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402e4b
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_188
	test	rax, rax
	je	.label_187
.label_188:
	pop	rbx
	ret	
.label_190:
	mov	ecx, 1
.label_189:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x402e70
	.globl sub_402e70
	.type sub_402e70, @function
sub_402e70:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402e75

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_190
	test	rsi, rsi
	mov	ecx, 1
	je	.label_189
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_189
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x402eb0
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_191:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_191
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x402ed1
	.globl sub_402ed1
	.type sub_402ed1, @function
sub_402ed1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402ee0

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_192
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_194
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_196
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_194
	mov	esi, OFFSET FLAT:label_195
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_197
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_197:
	mov	rbx, r14
.label_194:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_192:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_193
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402f81
	.globl sub_402f81
	.type sub_402f81, @function
sub_402f81:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402f90
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x402f98
	.globl sub_402f98
	.type sub_402f98, @function
sub_402f98:

	nop	dword ptr [rax + rax]
.label_198:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402fa5
	.globl sub_402fa5
	.type sub_402fa5, @function
sub_402fa5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402faf
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_198
	call	rpl_calloc
	test	rax, rax
	je	.label_198
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x402fd0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402fd8
	.globl sub_402fd8
	.type sub_402fd8, @function
sub_402fd8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402fe0
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_199
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_203
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_200
.label_199:
	test	rcx, rcx
	jne	.label_204
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_204:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_201
.label_200:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_202
	test	rbx, rbx
	jne	.label_202
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_201:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40305e
	.globl sub_40305e
	.type sub_40305e, @function
sub_40305e:

	nop	word ptr [rax + rax]
.label_202:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_205
	test	rax, rax
	je	.label_203
.label_205:
	pop	rbx
	ret	
.label_203:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403080

	.globl cksum
	.type cksum, @function
cksum:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x10028
	mov	r14d, esi
	mov	r15, rdi
	cmp	byte ptr [r15], 0x2d
	jne	.label_206
	cmp	byte ptr [r15 + 1], 0
	je	.label_213
.label_206:
	mov	esi, OFFSET FLAT:label_219
	mov	rdi, r15
	call	fopen
	mov	r13, rax
	test	r13, r13
	jne	.label_220
	jmp	.label_225
.label_213:
	mov	r13, qword ptr [rip + stdin]
	mov	byte ptr [rip + have_read_stdin],  1
.label_220:
	mov	esi, 2
	mov	rdi, r13
	call	fadvise
	xor	ebx, ebx
	lea	r12, [rsp + 0x20]
	xor	ebp, ebp
	nop	word ptr cs:[rax + rax]
.label_212:
	mov	esi, 1
	mov	edx, 0x10000
	mov	rdi, r12
	mov	rcx, r13
	call	fread_unlocked
	test	rax, rax
	je	.label_207
	add	rbx, rax
	jb	.label_209
	mov	ecx, eax
	and	ecx, 1
	cmp	rax, 1
	jne	.label_208
	mov	rax, r12
	jmp	.label_217
	.section	.text
	.align	16
	#Procedure 0x403127
	.globl sub_403127
	.type sub_403127, @function
sub_403127:

	nop	word ptr [rax + rax]
.label_208:
	mov	rdx, rcx
	sub	rdx, rax
	mov	rax, r12
	nop	dword ptr [rax]
.label_210:
	mov	rsi, rbp
	shl	rsi, 8
	shr	ebp, 0x18
	movzx	edi, byte ptr [rax]
	xor	rdi, rbp
	xor	rsi, qword ptr [(rdi * 8) + crctab]
	mov	rbp, rsi
	shl	rbp, 8
	shr	esi, 0x18
	movzx	edi, byte ptr [rax + 1]
	add	rax, 2
	xor	rdi, rsi
	xor	rbp, qword ptr [(rdi * 8) + crctab]
	add	rdx, 2
	jne	.label_210
.label_217:
	test	rcx, rcx
	je	.label_233
	movzx	eax, byte ptr [rax]
	mov	ecx, ebp
	shr	ecx, 0x18
	xor	rcx, rax
	shl	rbp, 8
	xor	rbp, qword ptr [(rcx * 8) + crctab]
.label_233:
	mov	eax, dword ptr [r13]
	test	al, 0x10
	je	.label_212
	jmp	.label_218
.label_207:
	mov	eax, dword ptr [r13]
.label_218:
	test	al, 0x20
	jne	.label_221
	cmp	byte ptr [r15], 0x2d
	jne	.label_223
	cmp	byte ptr [r15 + 1], 0
	je	.label_224
.label_223:
	mov	rdi, r13
	call	rpl_fclose
	cmp	eax, -1
	je	.label_225
.label_224:
	lea	rsi, [rsp]
	mov	rdi, rbx
	call	umaxtostr
	mov	rcx, rax
	test	rbx, rbx
	je	.label_228
	nop	word ptr cs:[rax + rax]
.label_216:
	mov	rdx, rbp
	shl	rdx, 8
	shr	ebp, 0x18
	xor	ebp, ebx
	movzx	eax, bpl
	xor	rdx, qword ptr [(rax * 8) + crctab]
	shr	rbx, 8
	mov	rbp, rdx
	jne	.label_216
	jmp	.label_211
.label_225:
	call	__errno_location
	mov	ebp, dword ptr [rax]
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_32
	xor	eax, eax
	mov	esi, ebp
	call	error
	jmp	.label_229
.label_221:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_32
	xor	eax, eax
	mov	esi, ebx
	call	error
	cmp	byte ptr [r15], 0x2d
	jne	.label_231
	cmp	byte ptr [r15 + 1], 0
	je	.label_232
.label_231:
	mov	rdi, r13
	call	rpl_fclose
.label_232:
	xor	ebx, ebx
	jmp	.label_229
.label_228:
	mov	rdx, rbp
.label_211:
	not	edx
	mov	edi, 1
	test	r14b, r14b
	je	.label_234
	mov	esi, OFFSET FLAT:label_230
	xor	eax, eax
	mov	r8, r15
	call	__printf_chk
	jmp	.label_215
.label_234:
	mov	esi, OFFSET FLAT:label_226
	xor	eax, eax
	call	__printf_chk
.label_215:
	mov	rax, qword ptr [rip + stdout]
	mov	bl, 1
	test	byte ptr [rax], 0x20
	jne	.label_222
.label_229:
	mov	eax, ebx
	add	rsp, 0x10028
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_209:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_227
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
.label_222:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_38
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_214
	xor	eax, eax
	mov	esi, ebx
	call	error
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403340
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_235
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_236
	test	rbx, rbx
	jne	.label_236
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_236:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_237
	test	rax, rax
	je	.label_235
.label_237:
	pop	rbx
	ret	
.label_235:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403388
	.globl sub_403388
	.type sub_403388, @function
sub_403388:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403390
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40339a
	.globl sub_40339a
	.type sub_40339a, @function
sub_40339a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4033a0
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4033b1
	.globl sub_4033b1
	.type sub_4033b1, @function
sub_4033b1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4033c0

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	r15d, edi
	mov	rdi, qword ptr [r14]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_20
	call	setlocale
	mov	edi, OFFSET FLAT:label_238
	mov	esi, OFFSET FLAT:label_239
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_238
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	mov	rdi, qword ptr [rip + stdout]
	xor	esi, esi
	mov	edx, 1
	xor	ecx, ecx
	call	setvbuf
	mov	r8, qword ptr [rip + Version]
	sub	rsp, 8
	mov	edx, OFFSET FLAT:label_245
	mov	ecx, OFFSET FLAT:label_238
	mov	r9d, 1
	mov	eax, 0
	mov	edi, r15d
	mov	rsi, r14
	push	0
	push	OFFSET FLAT:label_246
	push	OFFSET FLAT:usage
	call	parse_gnu_standard_options_only
	add	rsp, 0x20
	mov	byte ptr [rip + have_read_stdin],  0
	movsxd	rax, dword ptr [rip + optind]
	cmp	eax, r15d
	jne	.label_243
	mov	edi, OFFSET FLAT:label_241
	xor	esi, esi
	call	cksum
	mov	ebx, eax
	jmp	.label_244
.label_243:
	mov	bl, 1
	cmp	eax, r15d
	jge	.label_244
	lea	rbp, [r14 + rax*8]
	sub	r15d, eax
	mov	bl, 1
	nop	word ptr [rax + rax]
.label_242:
	mov	rdi, qword ptr [rbp]
	mov	esi, 1
	call	cksum
	and	bl, al
	add	rbp, 8
	dec	r15d
	jne	.label_242
.label_244:
	cmp	byte ptr [rip + have_read_stdin],  1
	jne	.label_240
	mov	rdi, qword ptr [rip + stdin]
	call	rpl_fclose
	cmp	eax, -1
	je	.label_247
.label_240:
	not	bl
	and	bl, 1
	movzx	eax, bl
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_247:
	call	__errno_location
	mov	esi, dword ptr [rax]
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_241
	xor	eax, eax
	call	error
	nop	
	.section	.text
	.align	16
	#Procedure 0x4034f0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403508
	.globl sub_403508
	.type sub_403508, @function
sub_403508:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403510

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_20
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_248
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x403535
	.globl sub_403535
	.type sub_403535, @function
sub_403535:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403540
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4035af
	.globl sub_4035af
	.type sub_4035af, @function
sub_4035af:

	nop	
.label_249:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4035b5
	.globl sub_4035b5
	.type sub_4035b5, @function
sub_4035b5:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4035b9
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_249
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x403620
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403674
	.globl sub_403674
	.type sub_403674, @function
sub_403674:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403680
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_250
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_252:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_252
.label_250:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_254
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_253], OFFSET FLAT:slot0
.label_254:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_251
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_251:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x403711
	.globl sub_403711
	.type sub_403711, @function
sub_403711:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403720
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_255
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_256
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_258
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_259
	mov	ecx, OFFSET FLAT:label_260
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_257
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x403794
	.globl sub_403794
	.type sub_403794, @function
sub_403794:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4037a0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x4037af
	.globl sub_4037af
	.type sub_4037af, @function
sub_4037af:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4037b0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_268
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_273
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_267
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_263
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_269
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_264
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_259
	mov	ecx, OFFSET FLAT:label_260
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_261
	mov	esi, OFFSET FLAT:label_262
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_261
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_270
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_261:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_271
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_260
	mov	ecx, OFFSET FLAT:label_245
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_266
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_245
	mov	ecx, OFFSET FLAT:label_272
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_268:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_265
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x40394e
	.globl sub_40394e
	.type sub_40394e, @function
sub_40394e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403950
	.globl version_etc
	.type version_etc, @function
version_etc:

	sub	rsp, 0xd8
	test	al, al
	je	.label_274
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_274:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x4039d3
	.globl sub_4039d3
	.type sub_4039d3, @function
sub_4039d3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4039e0
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_276
	test	r15, r15
	je	.label_275
.label_276:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_275:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403a22
	.globl sub_403a22
	.type sub_403a22, @function
sub_403a22:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403a30
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_277
	mov	qword ptr [rax], rbx
.label_277:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403b1c
	.globl sub_403b1c
	.type sub_403b1c, @function
sub_403b1c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403b20
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_278
	test	rdx, rdx
	je	.label_278
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_278:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403b8a
	.globl sub_403b8a
	.type sub_403b8a, @function
sub_403b8a:

	nop	word ptr [rax + rax]
.label_279:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403b95
	.globl sub_403b95
	.type sub_403b95, @function
sub_403b95:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403b99
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_24]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_25]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_26]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_279
	test	rsi, rsi
	je	.label_279
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403c00
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_280
	test	rdx, rdx
	je	.label_280
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_280:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403c2b
	.globl sub_403c2b
	.type sub_403c2b, @function
sub_403c2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403c30
	.globl quote
	.type quote, @function
quote:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403c49
	.globl sub_403c49
	.type sub_403c49, @function
sub_403c49:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403c50
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x403c5f
	.globl sub_403c5f
	.type sub_403c5f, @function
sub_403c5f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403c60
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403c79
	.globl sub_403c79
	.type sub_403c79, @function
sub_403c79:

	nop	dword ptr [rax]
.label_285:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403c85
	.globl sub_403c85
	.type sub_403c85, @function
sub_403c85:

	nop	word ptr cs:[rax + rax]
.label_283:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403c96
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_282
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_285
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_284
	call	free
	xor	eax, eax
	jmp	.label_281
.label_282:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_283
	mov	qword ptr [rsi], rbx
.label_284:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_281
	test	rax, rax
	je	.label_283
.label_281:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x403cf0
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403cfe
	.globl sub_403cfe
	.type sub_403cfe, @function
sub_403cfe:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403d00

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_286
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_289
	cmp	r12d, 0x7fffffff
	je	.label_291
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_287
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_287:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_289:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_292
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_288
.label_292:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_290
	mov	rdi, r14
	call	free
.label_290:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_288:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_286:
	call	abort
.label_291:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403ebd
	.globl sub_403ebd
	.type sub_403ebd, @function
sub_403ebd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403ec0
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_293
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_293:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403f21
	.globl sub_403f21
	.type sub_403f21, @function
sub_403f21:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403f30

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_294
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_296
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_294
.label_296:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_294
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_295
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_295:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_294:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x403fa4
	.globl sub_403fa4
	.type sub_403fa4, @function
sub_403fa4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403fb0

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_298
	cmp	byte ptr [rax], 0x43
	jne	.label_300
	cmp	byte ptr [rax + 1], 0
	je	.label_297
.label_300:
	mov	esi, OFFSET FLAT:label_299
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_298
.label_297:
	xor	ebx, ebx
.label_298:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x403fe1
	.globl sub_403fe1
	.type sub_403fe1, @function
sub_403fe1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ff0

	.globl fadvise
	.type fadvise, @function
fadvise:
	push	rbx
	mov	ebx, esi
	test	rdi, rdi
	je	.label_301
	call	fileno
	xor	esi, esi
	xor	edx, edx
	mov	edi, eax
	mov	ecx, ebx
	pop	rbx
	jmp	posix_fadvise
.label_301:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x40400d
	.globl sub_40400d
	.type sub_40400d, @function
sub_40400d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404010
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40401a
	.globl sub_40401a
	.type sub_40401a, @function
sub_40401a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404020
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_302
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_302:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404088
	.globl sub_404088
	.type sub_404088, @function
sub_404088:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404090
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4040c3
	.globl sub_4040c3
	.type sub_4040c3, @function
sub_4040c3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040d0
	.globl fdadvise
	.type fdadvise, @function
fdadvise:

	jmp	posix_fadvise
	.section	.text
	.align	16
	#Procedure 0x4040d5
	.globl sub_4040d5
	.type sub_4040d5, @function
sub_4040d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040e0

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_308
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_304
	cmp	ecx, 0x55
	jne	.label_303
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_303
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_303
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_303
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_303
	cmp	byte ptr [rax + 5], 0
	jne	.label_303
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_310
	mov	eax, OFFSET FLAT:label_311
	jmp	.label_307
.label_304:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_303
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_303
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_303
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_303
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_303
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_303
	cmp	byte ptr [rax + 7], 0
	je	.label_309
.label_303:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_145
	mov	eax, OFFSET FLAT:label_69
.label_307:
	cmove	rax, rcx
.label_308:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_309:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_305
	mov	eax, OFFSET FLAT:label_306
	jmp	.label_307
	.section	.text
	.align	16
	#Procedure 0x4041a5
	.globl sub_4041a5
	.type sub_4041a5, @function
sub_4041a5:

	nop	word ptr cs:[rax + rax]
.label_312:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4041b5
	.globl sub_4041b5
	.type sub_4041b5, @function
sub_4041b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4041c0

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_312
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x404250
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x404286
	.globl sub_404286
	.type sub_404286, @function
sub_404286:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404290

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_323
	mov	edx, OFFSET FLAT:label_328
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_315
.label_323:
	mov	edx, OFFSET FLAT:label_317
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_315:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_322
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_318
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_324
	jmp	qword ptr [(r12 * 8) + label_325]
.label_340:
	add	rsp, 8
	jmp	.label_316
.label_324:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_331
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_316
.label_341:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_319
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_342:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_313
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_343:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_329
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_344:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_326
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_316
.label_345:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_321
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_316
.label_346:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_327
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_316
.label_347:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_330
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_316
.label_349:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_314
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_316
.label_348:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_320
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_316:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4045e8
	.globl sub_4045e8
	.type sub_4045e8, @function
sub_4045e8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404655
	.globl sub_404655
	.type sub_404655, @function
sub_404655:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404662
	.globl sub_404662
	.type sub_404662, @function
sub_404662:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404686
	.globl sub_404686
	.type sub_404686, @function
sub_404686:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_436:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_265:
	.asciz "Try '%s --help' for more information.\n"
label_273:
	.asciz "Usage: %s [FILE]...\n  or:  %s [OPTION]\n"
label_267:
	.asciz "Print CRC checksum and byte counts of each FILE.\n\n"
label_263:
	.asciz "      --help     display this help and exit\n"
label_269:
	.asciz "      --version  output version information and exit\n"
label_245:
	.asciz "cksum"
label_20:
	.byte 0
label_238:
	.asciz "coreutils"
label_239:
	.asciz "/usr/local/share/locale"
label_246:
	.asciz "Q. Frank Xia"
label_241:
	.asciz "-"
label_264:
	.asciz "\n%s online help: <%s>\n"
label_259:
	.asciz "GNU coreutils"
label_260:
	.asciz "https://www.gnu.org/software/coreutils/"
label_262:
	.asciz "en_"
label_270:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_271:
	.asciz "Full documentation <%s%s>\n"
label_266:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_272:
	.asciz " invocation"
label_219:
	.asciz "r"
label_32:
	.asciz "%s"
label_227:
	.asciz "%s: file too long"
label_230:
	.asciz "%u %s %s\n"
label_226:
	.asciz "%u %s\n"
label_214:
	.asciz "-: %s"
label_38:
	.asciz "write error"
label_359:
	.asciz "8.31"
label_34:
	.asciz "%s: %s"
label_21:
	.asciz "+"
label_428:
	.asciz "help"
label_401:
	.asciz "version"
label_193:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_196:
	.asciz "/.libs/"
label_195:
	.asciz "lt-"
label_385:
	.asciz "literal"
label_386:
	.asciz "shell"
label_387:
	.asciz "shell-always"
label_388:
	.asciz "shell-escape"
label_389:
	.asciz "shell-escape-always"
label_390:
	.asciz "c"
label_391:
	.asciz "c-maybe"
label_392:
	.asciz "escape"
label_393:
	.asciz "locale"
label_394:
	.asciz "clocale"
label_145:
	.byte 34
	.byte 0
label_62:
	.byte 96
	.byte 0
label_69:
	.asciz "'"
label_310:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_311:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_305:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_306:
	.byte 161
	.byte 175
	.byte 0
label_328:
	.asciz "%s (%s) %s\n"
label_317:
	.asciz "%s %s\n"
label_322:
	.asciz "(C)"
label_318:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_319:
	.asciz "Written by %s.\n"
label_313:
	.asciz "Written by %s and %s.\n"
label_329:
	.asciz "Written by %s, %s, and %s.\n"
label_326:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_321:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_327:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_330:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_320:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_314:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_331:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_255:
	.asciz "\nReport bugs to: %s\n"
label_256:
	.asciz "bug-coreutils@gnu.org"
label_258:
	.asciz "%s home page: <%s>\n"
label_257:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_61:
	.asciz "memory exhausted"
label_299:
	.asciz "POSIX"
label_248:
	.asciz "ASCII"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl crctab
	.type crctab, @object
crctab:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 183
	.byte 29
	.byte 193
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 110
	.byte 59
	.byte 130
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 217
	.byte 38
	.byte 67
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 220
	.byte 118
	.byte 4
	.byte 19
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 107
	.byte 107
	.byte 197
	.byte 23
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 178
	.byte 77
	.byte 134
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 80
	.byte 71
	.byte 30
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 184
	.byte 237
	.byte 8
	.byte 38
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 240
	.byte 201
	.byte 34
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 214
	.byte 214
	.byte 138
	.byte 47
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 97
	.byte 203
	.byte 75
	.byte 43
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 100
	.byte 155
	.byte 12
	.byte 53
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 211
	.byte 134
	.byte 205
	.byte 49
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 10
	.byte 160
	.byte 142
	.byte 60
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 189
	.byte 189
	.byte 79
	.byte 56
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 112
	.byte 219
	.byte 17
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 199
	.byte 198
	.byte 208
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 30
	.byte 224
	.byte 147
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 169
	.byte 253
	.byte 82
	.byte 65
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 172
	.byte 173
	.byte 21
	.byte 95
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 27
	.byte 176
	.byte 212
	.byte 91
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 194
	.byte 150
	.byte 151
	.byte 86
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 117
	.byte 139
	.byte 86
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 200
	.byte 54
	.byte 25
	.byte 106
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 127
	.byte 43
	.byte 216
	.byte 110
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 166
	.byte 13
	.byte 155
	.byte 99
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 16
	.byte 90
	.byte 103
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 20
	.byte 64
	.byte 29
	.byte 121
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 163
	.byte 93
	.byte 220
	.byte 125
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 122
	.byte 123
	.byte 159
	.byte 112
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 205
	.byte 102
	.byte 94
	.byte 116
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 224
	.byte 182
	.byte 35
	.byte 152
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 87
	.byte 171
	.byte 226
	.byte 156
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 142
	.byte 141
	.byte 161
	.byte 145
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 57
	.byte 144
	.byte 96
	.byte 149
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 60
	.byte 192
	.byte 39
	.byte 139
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 139
	.byte 221
	.byte 230
	.byte 143
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 82
	.byte 251
	.byte 165
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 229
	.byte 230
	.byte 100
	.byte 134
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 91
	.byte 43
	.byte 190
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 239
	.byte 70
	.byte 234
	.byte 186
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 54
	.byte 96
	.byte 169
	.byte 183
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 129
	.byte 125
	.byte 104
	.byte 179
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 132
	.byte 45
	.byte 47
	.byte 173
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 51
	.byte 48
	.byte 238
	.byte 169
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 234
	.byte 22
	.byte 173
	.byte 164
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 93
	.byte 11
	.byte 108
	.byte 160
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 144
	.byte 109
	.byte 50
	.byte 212
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 39
	.byte 112
	.byte 243
	.byte 208
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 254
	.byte 86
	.byte 176
	.byte 221
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 75
	.byte 113
	.byte 217
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 76
	.byte 27
	.byte 54
	.byte 199
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 251
	.byte 6
	.byte 247
	.byte 195
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 34
	.byte 32
	.byte 180
	.byte 206
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 149
	.byte 61
	.byte 117
	.byte 202
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 40
	.byte 128
	.byte 58
	.byte 242
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 159
	.byte 157
	.byte 251
	.byte 246
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 70
	.byte 187
	.byte 184
	.byte 251
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 241
	.byte 166
	.byte 121
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 244
	.byte 246
	.byte 62
	.byte 225
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 235
	.byte 255
	.byte 229
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 154
	.byte 205
	.byte 188
	.byte 232
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 45
	.byte 208
	.byte 125
	.byte 236
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 119
	.byte 112
	.byte 134
	.byte 52
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 192
	.byte 109
	.byte 71
	.byte 48
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 75
	.byte 4
	.byte 61
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 174
	.byte 86
	.byte 197
	.byte 57
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 171
	.byte 6
	.byte 130
	.byte 39
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 28
	.byte 27
	.byte 67
	.byte 35
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 197
	.byte 61
	.byte 0
	.byte 46
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 114
	.byte 32
	.byte 193
	.byte 42
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 207
	.byte 157
	.byte 142
	.byte 18
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 120
	.byte 128
	.byte 79
	.byte 22
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 161
	.byte 166
	.byte 12
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 22
	.byte 187
	.byte 205
	.byte 31
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 19
	.byte 235
	.byte 138
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 164
	.byte 246
	.byte 75
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 208
	.byte 8
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 202
	.byte 205
	.byte 201
	.byte 12
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 171
	.byte 151
	.byte 120
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 176
	.byte 182
	.byte 86
	.byte 124
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 105
	.byte 144
	.byte 21
	.byte 113
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 222
	.byte 141
	.byte 212
	.byte 117
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 219
	.byte 221
	.byte 147
	.byte 107
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 108
	.byte 192
	.byte 82
	.byte 111
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 181
	.byte 230
	.byte 17
	.byte 98
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 251
	.byte 208
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 191
	.byte 70
	.byte 159
	.byte 94
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 91
	.byte 94
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 209
	.byte 125
	.byte 29
	.byte 87
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 96
	.byte 220
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 99
	.byte 48
	.byte 155
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 212
	.byte 45
	.byte 90
	.byte 73
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 11
	.byte 25
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 186
	.byte 22
	.byte 216
	.byte 64
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 151
	.byte 198
	.byte 165
	.byte 172
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 32
	.byte 219
	.byte 100
	.byte 168
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 249
	.byte 253
	.byte 39
	.byte 165
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 78
	.byte 224
	.byte 230
	.byte 161
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 75
	.byte 176
	.byte 161
	.byte 191
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 252
	.byte 173
	.byte 96
	.byte 187
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 37
	.byte 139
	.byte 35
	.byte 182
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 146
	.byte 150
	.byte 226
	.byte 178
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 47
	.byte 43
	.byte 173
	.byte 138
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 152
	.byte 54
	.byte 108
	.byte 142
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 16
	.byte 47
	.byte 131
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 246
	.byte 13
	.byte 238
	.byte 135
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 243
	.byte 93
	.byte 169
	.byte 153
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 68
	.byte 64
	.byte 104
	.byte 157
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 157
	.byte 102
	.byte 43
	.byte 144
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 42
	.byte 123
	.byte 234
	.byte 148
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 231
	.byte 29
	.byte 180
	.byte 224
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 0
	.byte 117
	.byte 228
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 137
	.byte 38
	.byte 54
	.byte 233
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 62
	.byte 59
	.byte 247
	.byte 237
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 59
	.byte 107
	.byte 176
	.byte 243
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 140
	.byte 118
	.byte 113
	.byte 247
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 80
	.byte 50
	.byte 250
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 226
	.byte 77
	.byte 243
	.byte 254
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 95
	.byte 240
	.byte 188
	.byte 198
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 232
	.byte 237
	.byte 125
	.byte 194
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 49
	.byte 203
	.byte 62
	.byte 207
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 134
	.byte 214
	.byte 255
	.byte 203
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 131
	.byte 134
	.byte 184
	.byte 213
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 52
	.byte 155
	.byte 121
	.byte 209
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 237
	.byte 189
	.byte 58
	.byte 220
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 90
	.byte 160
	.byte 251
	.byte 216
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 238
	.byte 224
	.byte 12
	.byte 105
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 89
	.byte 253
	.byte 205
	.byte 109
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 219
	.byte 142
	.byte 96
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 55
	.byte 198
	.byte 79
	.byte 100
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 50
	.byte 150
	.byte 8
	.byte 122
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 133
	.byte 139
	.byte 201
	.byte 126
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 92
	.byte 173
	.byte 138
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 235
	.byte 176
	.byte 75
	.byte 119
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 86
	.byte 13
	.byte 4
	.byte 79
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 225
	.byte 16
	.byte 197
	.byte 75
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 56
	.byte 54
	.byte 134
	.byte 70
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 143
	.byte 43
	.byte 71
	.byte 66
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 138
	.byte 123
	.byte 0
	.byte 92
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 61
	.byte 102
	.byte 193
	.byte 88
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 228
	.byte 64
	.byte 130
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 93
	.byte 67
	.byte 81
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 158
	.byte 59
	.byte 29
	.byte 37
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 41
	.byte 38
	.byte 220
	.byte 33
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 240
	.byte 0
	.byte 159
	.byte 44
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 71
	.byte 29
	.byte 94
	.byte 40
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 66
	.byte 77
	.byte 25
	.byte 54
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 245
	.byte 80
	.byte 216
	.byte 50
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 44
	.byte 118
	.byte 155
	.byte 63
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 155
	.byte 107
	.byte 90
	.byte 59
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 38
	.byte 214
	.byte 21
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 145
	.byte 203
	.byte 212
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 72
	.byte 237
	.byte 151
	.byte 10
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 255
	.byte 240
	.byte 86
	.byte 14
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 250
	.byte 160
	.byte 17
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 77
	.byte 189
	.byte 208
	.byte 20
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 148
	.byte 155
	.byte 147
	.byte 25
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 35
	.byte 134
	.byte 82
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 14
	.byte 86
	.byte 47
	.byte 241
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 185
	.byte 75
	.byte 238
	.byte 245
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 96
	.byte 109
	.byte 173
	.byte 248
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 215
	.byte 112
	.byte 108
	.byte 252
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 210
	.byte 32
	.byte 43
	.byte 226
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 101
	.byte 61
	.byte 234
	.byte 230
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 188
	.byte 27
	.byte 169
	.byte 235
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 11
	.byte 6
	.byte 104
	.byte 239
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 182
	.byte 187
	.byte 39
	.byte 215
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 166
	.byte 230
	.byte 211
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 216
	.byte 128
	.byte 165
	.byte 222
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 111
	.byte 157
	.byte 100
	.byte 218
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 106
	.byte 205
	.byte 35
	.byte 196
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 221
	.byte 208
	.byte 226
	.byte 192
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 246
	.byte 161
	.byte 205
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 179
	.byte 235
	.byte 96
	.byte 201
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 141
	.byte 62
	.byte 189
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 201
	.byte 144
	.byte 255
	.byte 185
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 182
	.byte 188
	.byte 180
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 167
	.byte 171
	.byte 125
	.byte 176
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 162
	.byte 251
	.byte 58
	.byte 174
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 21
	.byte 230
	.byte 251
	.byte 170
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 204
	.byte 192
	.byte 184
	.byte 167
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 123
	.byte 221
	.byte 121
	.byte 163
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 198
	.byte 96
	.byte 54
	.byte 155
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 113
	.byte 125
	.byte 247
	.byte 159
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 168
	.byte 91
	.byte 180
	.byte 146
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 31
	.byte 70
	.byte 117
	.byte 150
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 22
	.byte 50
	.byte 136
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 173
	.byte 11
	.byte 243
	.byte 140
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 116
	.byte 45
	.byte 176
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 195
	.byte 48
	.byte 113
	.byte 133
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 153
	.byte 144
	.byte 138
	.byte 93
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 46
	.byte 141
	.byte 75
	.byte 89
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 247
	.byte 171
	.byte 8
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 64
	.byte 182
	.byte 201
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 69
	.byte 230
	.byte 142
	.byte 78
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 242
	.byte 251
	.byte 79
	.byte 74
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 43
	.byte 221
	.byte 12
	.byte 71
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 156
	.byte 192
	.byte 205
	.byte 67
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 33
	.byte 125
	.byte 130
	.byte 123
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 150
	.byte 96
	.byte 67
	.byte 127
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 79
	.byte 70
	.byte 0
	.byte 114
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 248
	.byte 91
	.byte 193
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 253
	.byte 11
	.byte 134
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 74
	.byte 22
	.byte 71
	.byte 108
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 147
	.byte 48
	.byte 4
	.byte 97
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 36
	.byte 45
	.byte 197
	.byte 101
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 233
	.byte 75
	.byte 155
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 94
	.byte 86
	.byte 90
	.byte 21
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 135
	.byte 112
	.byte 25
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 109
	.byte 216
	.byte 28
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 53
	.byte 61
	.byte 159
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 130
	.byte 32
	.byte 94
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 91
	.byte 6
	.byte 29
	.byte 11
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 236
	.byte 27
	.byte 220
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 81
	.byte 166
	.byte 147
	.byte 55
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 230
	.byte 187
	.byte 82
	.byte 51
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 63
	.byte 157
	.byte 17
	.byte 62
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 136
	.byte 128
	.byte 208
	.byte 58
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 141
	.byte 208
	.byte 151
	.byte 36
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 58
	.byte 205
	.byte 86
	.byte 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 227
	.byte 235
	.byte 21
	.byte 45
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 246
	.byte 212
	.byte 41
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 121
	.byte 38
	.byte 169
	.byte 197
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 206
	.byte 59
	.byte 104
	.byte 193
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 23
	.byte 29
	.byte 43
	.byte 204
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 160
	.byte 0
	.byte 234
	.byte 200
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 165
	.byte 80
	.byte 173
	.byte 214
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 18
	.byte 77
	.byte 108
	.byte 210
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 203
	.byte 107
	.byte 47
	.byte 223
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 124
	.byte 118
	.byte 238
	.byte 219
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 193
	.byte 203
	.byte 161
	.byte 227
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 214
	.byte 96
	.byte 231
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 175
	.byte 240
	.byte 35
	.byte 234
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 237
	.byte 226
	.byte 238
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 189
	.byte 165
	.byte 240
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 170
	.byte 160
	.byte 100
	.byte 244
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 115
	.byte 134
	.byte 39
	.byte 249
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 196
	.byte 155
	.byte 230
	.byte 253
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 253
	.byte 184
	.byte 137
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 190
	.byte 224
	.byte 121
	.byte 141
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 103
	.byte 198
	.byte 58
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 208
	.byte 219
	.byte 251
	.byte 132
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 213
	.byte 139
	.byte 188
	.byte 154
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 98
	.byte 150
	.byte 125
	.byte 158
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 187
	.byte 176
	.byte 62
	.byte 147
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 12
	.byte 173
	.byte 255
	.byte 151
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 177
	.byte 16
	.byte 176
	.byte 175
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 13
	.byte 113
	.byte 171
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 223
	.byte 43
	.byte 50
	.byte 166
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 104
	.byte 54
	.byte 243
	.byte 162
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 109
	.byte 102
	.byte 180
	.byte 188
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 218
	.byte 123
	.byte 117
	.byte 184
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 93
	.byte 54
	.byte 181
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 180
	.byte 64
	.byte 247
	.byte 177
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl long_options
	.type long_options, @object
long_options:
	.quad label_428
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_401
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_155:
	.quad .label_406
	.quad .label_407
	.quad .label_408
	.quad .label_409
	.quad .label_410
	.quad .label_411
	.quad .label_412
	.quad .label_103
	.quad .label_413
	.quad .label_413
	.quad .label_414
label_110:
	.quad .label_373
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_88
	.quad .label_374
	.quad .label_375
	.quad .label_67
	.quad .label_376
	.quad .label_377
	.quad .label_378
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_106
	.quad .label_116
	.quad .label_379
	.quad .label_379
	.quad .label_380
	.quad .label_379
	.quad .label_74
	.quad .label_379
	.quad .label_381
	.quad .label_379
	.quad .label_379
	.quad .label_379
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_379
	.quad .label_379
	.quad .label_379
	.quad .label_379
	.quad .label_382
	.quad .label_106
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_379
	.quad .label_383
	.quad .label_74
	.quad .label_379
	.quad .label_74
	.quad .label_379
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_74
	.quad .label_384
	.quad .label_379
	.quad .label_384
	.quad .label_380
	.quad label_385
	.quad label_386
	.quad label_387
	.quad label_388
	.quad label_389
	.quad label_390
	.quad label_391
	.quad label_392
	.quad label_393
	.quad label_394
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_325:
	.quad .label_340
	.quad .label_341
	.quad .label_342
	.quad .label_343
	.quad .label_344
	.quad .label_345
	.quad .label_346
	.quad .label_347
	.quad .label_348
	.quad .label_349
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_437:
	.section .data
	.align 8
.label_332:
	.quad 0
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_359
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_253:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.byte 0x0
	.globl have_read_stdin
	.type have_read_stdin, @object
have_read_stdin:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_2:
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_26:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_25:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_24:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl opterr
	.type opterr, @object
opterr:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: