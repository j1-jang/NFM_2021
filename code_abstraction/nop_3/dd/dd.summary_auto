Build cfg of: "usage" (104 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "rpl_fcntl" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Build cfg of: "interrupt_handler" (101 text sections remaining)
Build cfg of: "siginfo_handler" (102 text sections remaining)
Build cfg of: "invalidate_cache" (103 text sections remaining)
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "xstrtoumax" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_stats
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_xfer_stats
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_ibuf
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Build cfg of: "close_stdout_set_ignore_EPIPE" (99 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (100 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "fd_reopen" (98 text sections remaining)
Calling "gettime" but CFG not yet computed.
Delayed building cfg of: gethrxtime
Build cfg of: "gettime" (97 text sections remaining)
Build cfg of: "current_timespec" (96 text sections remaining)
Calling "argmatch" but CFG not yet computed.
Delayed building cfg of: human_options
Calling "version_etc_va" but CFG not yet computed.
Delayed building cfg of: parse_long_options
Calling "version_etc_va" but CFG not yet computed.
Delayed building cfg of: parse_gnu_standard_options_only
Build cfg of: "set_program_name" (95 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (91 text sections remaining)
Build cfg of: "set_char_quoting" (92 text sections remaining)
Build cfg of: "set_quoting_style" (93 text sections remaining)
Build cfg of: "get_quoting_style" (94 text sections remaining)
Build cfg of: "set_custom_quoting" (90 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (89 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (88 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror_at_line
Build cfg of: "version_etc_arn" (87 text sections remaining)
Build cfg of: "version_etc_ar" (86 text sections remaining)
Build cfg of: "version_etc_va" (85 text sections remaining)
Build cfg of: "version_etc" (84 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (83 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (82 text sections remaining)
Build cfg of: "xstrtoumax" (81 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xvasprintf
Build cfg of: "rpl_calloc" (80 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fcntl" (79 text sections remaining)
Calling "rpl_fseeko" but CFG not yet computed.
Delayed building cfg of: rpl_fflush
Build cfg of: "rpl_fseeko" (78 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "__argmatch_die" (77 text sections remaining)
Build cfg of: "argmatch" (76 text sections remaining)
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: argmatch_invalid
Calling "quote" but CFG not yet computed.
Delayed building cfg of: argmatch_valid
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: __xargmatch_internal
Build cfg of: "argmatch_to_argument" (75 text sections remaining)
Build cfg of: "hard_locale" (74 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Build cfg of: "rpl_nl_langinfo" (73 text sections remaining)
Calling "parse_gnu_standard_options_only" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_stats
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_xfer_stats
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_ibuf
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "gethrxtime" (72 text sections remaining)
Build cfg of: "human_options" (71 text sections remaining)
Build cfg of: "parse_long_options" (70 text sections remaining)
Build cfg of: "parse_gnu_standard_options_only" (69 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (68 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror_at_line
Build cfg of: "xnmalloc" (67 text sections remaining)
Build cfg of: "xmalloc" (66 text sections remaining)
Build cfg of: "xnrealloc" (65 text sections remaining)
Build cfg of: "xrealloc" (64 text sections remaining)
Build cfg of: "x2nrealloc" (63 text sections remaining)
Build cfg of: "xcharalloc" (62 text sections remaining)
Build cfg of: "x2realloc" (61 text sections remaining)
Build cfg of: "xzalloc" (60 text sections remaining)
Build cfg of: "xcalloc" (59 text sections remaining)
Build cfg of: "xmemdup" (58 text sections remaining)
Build cfg of: "xstrdup" (57 text sections remaining)
Build cfg of: "xvasprintf" (56 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (55 text sections remaining)
Build cfg of: "rpl_mbrtowc" (54 text sections remaining)
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: argmatch_invalid
Calling "quote" but CFG not yet computed.
Delayed building cfg of: argmatch_valid
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: __xargmatch_internal
Build cfg of: "locale_charset" (53 text sections remaining)
Calling "quote" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Build cfg of: "print_stats" (52 text sections remaining)
Build cfg of: "print_xfer_stats" (51 text sections remaining)
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_ibuf
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (50 text sections remaining)
Build cfg of: "quotearg_alloc" (49 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (48 text sections remaining)
Build cfg of: "quotearg_n" (47 text sections remaining)
Build cfg of: "quotearg_n_options" (46 text sections remaining)
Build cfg of: "quotearg_n_mem" (45 text sections remaining)
Build cfg of: "quotearg" (44 text sections remaining)
Build cfg of: "quotearg_mem" (43 text sections remaining)
Build cfg of: "quotearg_n_style" (42 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (41 text sections remaining)
Build cfg of: "quotearg_style" (40 text sections remaining)
Build cfg of: "quotearg_style_mem" (39 text sections remaining)
Build cfg of: "quotearg_char_mem" (38 text sections remaining)
Build cfg of: "quotearg_char" (37 text sections remaining)
Build cfg of: "quotearg_colon" (36 text sections remaining)
Build cfg of: "quotearg_colon_mem" (35 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (34 text sections remaining)
Build cfg of: "quotearg_n_custom" (33 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (32 text sections remaining)
Build cfg of: "quotearg_custom" (31 text sections remaining)
Build cfg of: "quotearg_custom_mem" (30 text sections remaining)
Build cfg of: "quote_n_mem" (29 text sections remaining)
Build cfg of: "quote_mem" (28 text sections remaining)
Build cfg of: "quote_n" (27 text sections remaining)
Build cfg of: "quote" (26 text sections remaining)
Build cfg of: "gettext_quote" (25 text sections remaining)
Build cfg of: "verror" (24 text sections remaining)
Build cfg of: "verror_at_line" (23 text sections remaining)
Build cfg of: "rpl_fclose" (22 text sections remaining)
Build cfg of: "argmatch_invalid" (21 text sections remaining)
Build cfg of: "argmatch_valid" (20 text sections remaining)
Build cfg of: "__xargmatch_internal" (19 text sections remaining)
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "maybe_close_stdout" (18 text sections remaining)
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Build cfg of: "nl_error" (17 text sections remaining)
Build cfg of: "parse_symbols" (16 text sections remaining)
Build cfg of: "parse_integer" (15 text sections remaining)
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Build cfg of: "cleanup" (14 text sections remaining)
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: quit
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: alloc_ibuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quit" but CFG not yet computed.
Delayed building cfg of: write_output
Build cfg of: "skip_via_lseek" (13 text sections remaining)
Build cfg of: "close_stdout" (12 text sections remaining)
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "set_fd_flags" (11 text sections remaining)
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Build cfg of: "process_signals" (10 text sections remaining)
Calling "quit" but CFG not yet computed.
Delayed building cfg of: skip
Build cfg of: "quit" (9 text sections remaining)
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: alloc_ibuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Build cfg of: "write_output" (8 text sections remaining)
Calling "alloc_ibuf" but CFG not yet computed.
Delayed building cfg of: main
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Build cfg of: "iread" (7 text sections remaining)
Calling "alloc_ibuf" but CFG not yet computed.
Delayed building cfg of: skip
Build cfg of: "alloc_ibuf" (6 text sections remaining)
Build cfg of: "alloc_obuf" (5 text sections remaining)
Build cfg of: "copy_with_block" (4 text sections remaining)
Build cfg of: "copy_with_unblock" (3 text sections remaining)
Calling "skip" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "iread_fullblock" (2 text sections remaining)
Build cfg of: "skip" (1 text sections remaining)
Build cfg of: "main" (0 text sections remaining)
Build cfg of: "usage" (103 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "rpl_fcntl" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Build cfg of: "interrupt_handler" (100 text sections remaining)
Build cfg of: "siginfo_handler" (101 text sections remaining)
Build cfg of: "invalidate_cache" (102 text sections remaining)
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "xstrtoumax" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_stats
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_xfer_stats
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Build cfg of: "close_stdout_set_ignore_EPIPE" (98 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (99 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "fd_reopen" (97 text sections remaining)
Calling "gettime" but CFG not yet computed.
Delayed building cfg of: gethrxtime
Build cfg of: "gettime" (96 text sections remaining)
Build cfg of: "current_timespec" (95 text sections remaining)
Calling "argmatch" but CFG not yet computed.
Delayed building cfg of: human_options
Calling "version_etc_va" but CFG not yet computed.
Delayed building cfg of: parse_long_options
Calling "version_etc_va" but CFG not yet computed.
Delayed building cfg of: parse_gnu_standard_options_only
Build cfg of: "set_program_name" (94 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (90 text sections remaining)
Build cfg of: "set_char_quoting" (91 text sections remaining)
Build cfg of: "set_quoting_style" (92 text sections remaining)
Build cfg of: "get_quoting_style" (93 text sections remaining)
Build cfg of: "set_custom_quoting" (89 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (88 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (87 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror_at_line
Build cfg of: "version_etc_arn" (86 text sections remaining)
Build cfg of: "version_etc_ar" (85 text sections remaining)
Build cfg of: "version_etc_va" (84 text sections remaining)
Build cfg of: "version_etc" (83 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (82 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (81 text sections remaining)
Build cfg of: "xstrtoumax" (80 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xvasprintf
Build cfg of: "rpl_calloc" (79 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fcntl" (78 text sections remaining)
Calling "rpl_fseeko" but CFG not yet computed.
Delayed building cfg of: rpl_fflush
Build cfg of: "rpl_fseeko" (77 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "__argmatch_die" (76 text sections remaining)
Build cfg of: "argmatch" (75 text sections remaining)
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: argmatch_invalid
Calling "quote" but CFG not yet computed.
Delayed building cfg of: argmatch_valid
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: __xargmatch_internal
Build cfg of: "argmatch_to_argument" (74 text sections remaining)
Build cfg of: "hard_locale" (73 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Build cfg of: "rpl_nl_langinfo" (72 text sections remaining)
Calling "parse_gnu_standard_options_only" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_stats
Calling "gethrxtime" but CFG not yet computed.
Delayed building cfg of: print_xfer_stats
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "gethrxtime" (71 text sections remaining)
Build cfg of: "human_options" (70 text sections remaining)
Build cfg of: "parse_long_options" (69 text sections remaining)
Build cfg of: "parse_gnu_standard_options_only" (68 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (67 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror
Calling "xvasprintf" but CFG not yet computed.
Delayed building cfg of: verror_at_line
Build cfg of: "xnmalloc" (66 text sections remaining)
Build cfg of: "xmalloc" (65 text sections remaining)
Build cfg of: "xnrealloc" (64 text sections remaining)
Build cfg of: "xrealloc" (63 text sections remaining)
Build cfg of: "x2nrealloc" (62 text sections remaining)
Build cfg of: "xcharalloc" (61 text sections remaining)
Build cfg of: "x2realloc" (60 text sections remaining)
Build cfg of: "xzalloc" (59 text sections remaining)
Build cfg of: "xcalloc" (58 text sections remaining)
Build cfg of: "xmemdup" (57 text sections remaining)
Build cfg of: "xstrdup" (56 text sections remaining)
Build cfg of: "xvasprintf" (55 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (54 text sections remaining)
Build cfg of: "rpl_mbrtowc" (53 text sections remaining)
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: argmatch_invalid
Calling "quote" but CFG not yet computed.
Delayed building cfg of: argmatch_valid
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: __xargmatch_internal
Build cfg of: "locale_charset" (52 text sections remaining)
Calling "quote" but CFG not yet computed.
Delayed building cfg of: main
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: maybe_close_stdout
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Calling "verror" but CFG not yet computed.
Delayed building cfg of: nl_error
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: parse_symbols
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: parse_integer
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: cleanup
Build cfg of: "print_stats" (51 text sections remaining)
Build cfg of: "print_xfer_stats" (50 text sections remaining)
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: quit
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: alloc_obuf
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Calling "quotearg_style" but CFG not yet computed.
Delayed building cfg of: write_output
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: skip_via_lseek
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (49 text sections remaining)
Build cfg of: "quotearg_alloc" (48 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (47 text sections remaining)
Build cfg of: "quotearg_n" (46 text sections remaining)
Build cfg of: "quotearg_n_options" (45 text sections remaining)
Build cfg of: "quotearg_n_mem" (44 text sections remaining)
Build cfg of: "quotearg" (43 text sections remaining)
Build cfg of: "quotearg_mem" (42 text sections remaining)
Build cfg of: "quotearg_n_style" (41 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (40 text sections remaining)
Build cfg of: "quotearg_style" (39 text sections remaining)
Build cfg of: "quotearg_style_mem" (38 text sections remaining)
Build cfg of: "quotearg_char_mem" (37 text sections remaining)
Build cfg of: "quotearg_char" (36 text sections remaining)
Build cfg of: "quotearg_colon" (35 text sections remaining)
Build cfg of: "quotearg_colon_mem" (34 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (33 text sections remaining)
Build cfg of: "quotearg_n_custom" (32 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (31 text sections remaining)
Build cfg of: "quotearg_custom" (30 text sections remaining)
Build cfg of: "quotearg_custom_mem" (29 text sections remaining)
Build cfg of: "quote_n_mem" (28 text sections remaining)
Build cfg of: "quote_mem" (27 text sections remaining)
Build cfg of: "quote_n" (26 text sections remaining)
Build cfg of: "quote" (25 text sections remaining)
Build cfg of: "gettext_quote" (24 text sections remaining)
Build cfg of: "verror" (23 text sections remaining)
Build cfg of: "verror_at_line" (22 text sections remaining)
Build cfg of: "rpl_fclose" (21 text sections remaining)
Build cfg of: "argmatch_invalid" (20 text sections remaining)
Build cfg of: "argmatch_valid" (19 text sections remaining)
Build cfg of: "__xargmatch_internal" (18 text sections remaining)
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "maybe_close_stdout" (17 text sections remaining)
Calling "nl_error" but CFG not yet computed.
Delayed building cfg of: set_fd_flags
Build cfg of: "nl_error" (16 text sections remaining)
Build cfg of: "parse_symbols" (15 text sections remaining)
Build cfg of: "parse_integer" (14 text sections remaining)
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Calling "cleanup" but CFG not yet computed.
Delayed building cfg of: process_signals
Build cfg of: "cleanup" (13 text sections remaining)
Calling "skip_via_lseek" but CFG not yet computed.
Delayed building cfg of: skip
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: quit
Build cfg of: "alloc_obuf" (12 text sections remaining)
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_block
Calling "write_output" but CFG not yet computed.
Delayed building cfg of: copy_with_unblock
Build cfg of: "write_output" (11 text sections remaining)
Build cfg of: "skip_via_lseek" (10 text sections remaining)
Build cfg of: "close_stdout" (9 text sections remaining)
Calling "set_fd_flags" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "set_fd_flags" (8 text sections remaining)
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Calling "process_signals" but CFG not yet computed.
Delayed building cfg of: iread
Build cfg of: "process_signals" (7 text sections remaining)
Build cfg of: "skip" (6 text sections remaining)
Build cfg of: "quit" (5 text sections remaining)
Build cfg of: "copy_with_block" (4 text sections remaining)
Build cfg of: "copy_with_unblock" (3 text sections remaining)
Build cfg of: "main" (2 text sections remaining)
Calling "iread" but CFG not yet computed.
Delayed building cfg of: iread_fullblock
Build cfg of: "iread" (1 text sections remaining)
Build cfg of: "iread_fullblock" (0 text sections remaining)
(5,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(1,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == (Reg: RBP + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(10,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(10,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(1,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Value: 0 + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == (Reg: RBP + Reg: RAX),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(10,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(10,RSP == Var: RSP0 && RBP == Var: RBP0)])
Considering text section (0/101): "main"
Considering text section (1/101): "skip"
Considering text section (2/101): "iread_fullblock"
--------
.dot code for CFG of text section iread_fullblock for Vanilla
diGraph iread_fullblock_Vanilla{
	iread_fullblock_0  [label="[iread_fullblock_2810,iread_fullblock_2810]"]
	iread_fullblock_1  [label="[iread_fullblock_2805,iread_fullblock_2809]"]
	iread_fullblock_2  [label="[.label_286,.label_286]"]
	iread_fullblock_3  [label="[iread_fullblock_2804,iread_fullblock_2804]"]
	iread_fullblock_4  [label="[iread_fullblock_2796,iread_fullblock_2796]"]
	iread_fullblock_5  [label="[.label_288,iread_fullblock_2800]"]
	iread_fullblock_6  [label="[iread_fullblock_2801,iread_fullblock_2801]"]
	iread_fullblock_7  [label="[iread_fullblock_2802,iread_fullblock_2803]"]
	iread_fullblock_8  [label="[.label_285,iread_fullblock_2813]"]
	iread_fullblock_9  [label="[.label_287,iread_fullblock_2822]"]
	iread_fullblock_10  [label="[iread_fullblock,iread_fullblock_2795]"]

	iread_fullblock_0 -> iread_fullblock_9;
	iread_fullblock_1 -> iread_fullblock_5 [label="!ZF"];
	iread_fullblock_1 -> iread_fullblock_0 [label="ZF"];
	iread_fullblock_2 -> iread_fullblock_9;
	iread_fullblock_3 -> iread_fullblock_2 [label="ZF"];
	iread_fullblock_3 -> iread_fullblock_1 [label="!ZF"];
	iread_fullblock_4 -> iread_fullblock_5;
	iread_fullblock_5 -> iread_fullblock_6;
	iread_fullblock_6 -> iread_fullblock_7;
	iread_fullblock_7 -> iread_fullblock_9 [label="SF"];
	iread_fullblock_7 -> iread_fullblock_3 [label="!SF"];
	iread_fullblock_8 -> iread_fullblock_9;

	iread_fullblock_10 -> iread_fullblock_8 [label="ZF"];
	iread_fullblock_10 -> iread_fullblock_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section iread_fullblock for Randomized
diGraph iread_fullblock_Randomized{
	iread_fullblock_0  [label="[iread_fullblock_4497,iread_fullblock_4497]"]
	iread_fullblock_1  [label="[iread_fullblock_4492,iread_fullblock_4496]"]
	iread_fullblock_2  [label="[.label_321,iread_fullblock_4505]"]
	iread_fullblock_3  [label="[iread_fullblock_4491,iread_fullblock_4491]"]
	iread_fullblock_4  [label="[iread_fullblock_4481,iread_fullblock_4481]"]
	iread_fullblock_5  [label="[.label_322,iread_fullblock_4487]"]
	iread_fullblock_6  [label="[iread_fullblock_4488,iread_fullblock_4488]"]
	iread_fullblock_7  [label="[iread_fullblock_4489,iread_fullblock_4490]"]
	iread_fullblock_8  [label="[.label_319,iread_fullblock_4502]"]
	iread_fullblock_9  [label="[.label_320,iread_fullblock_4513]"]
	iread_fullblock_10  [label="[iread_fullblock,iread_fullblock_4480]"]

	iread_fullblock_0 -> iread_fullblock_9;
	iread_fullblock_1 -> iread_fullblock_5 [label="!ZF"];
	iread_fullblock_1 -> iread_fullblock_0 [label="ZF"];
	iread_fullblock_2 -> iread_fullblock_9;
	iread_fullblock_3 -> iread_fullblock_2 [label="ZF"];
	iread_fullblock_3 -> iread_fullblock_1 [label="!ZF"];
	iread_fullblock_4 -> iread_fullblock_5;
	iread_fullblock_5 -> iread_fullblock_6;
	iread_fullblock_6 -> iread_fullblock_7;
	iread_fullblock_7 -> iread_fullblock_9 [label="SF"];
	iread_fullblock_7 -> iread_fullblock_3 [label="!SF"];
	iread_fullblock_8 -> iread_fullblock_9;

	iread_fullblock_10 -> iread_fullblock_8 [label="ZF"];
	iread_fullblock_10 -> iread_fullblock_4 [label="!ZF"];
}
--------
Starting Node: 10

Edges: 0 ----> 9, 1 --!ZF--> 5, 1 --ZF--> 0, 2 ----> 9, 3 --ZF--> 2, 3 --!ZF--> 1, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --SF--> 9, 7 --!SF--> 3, 8 ----> 9, , 10 --ZF--> 8, 10 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "iread_fullblock"
node 0:
skip'
node 1:
RAX := (Reg: RBP + Reg: RAX), RBX := (Reg: RBX - Reg: RAX), R14 := (Reg: R14 + Reg: RAX)
ZF := (Reg: RBX - Reg: RAX), CF := (Reg: RBX - Reg: RAX), SF := (Reg: RBX - Reg: RAX), OF := (Reg: RBX - Reg: RAX), PF := (Reg: RBX - Reg: RAX)
node 2:
RAX := Reg: RBP
node 3:
skip'
node 4:
skip'
node 5:
RDX := Reg: RBX, RDI := TakeBits: <31,0>(Reg: R15), RSI := Reg: R14
node 6:
RAX := iread@()
node 7:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 8:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 10:
RBX := Reg: RDX, R15 := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
--------

Starting Node: 10

Edges: 0 ----> 9, 1 --!ZF--> 5, 1 --ZF--> 0, 2 ----> 9, 3 --ZF--> 2, 3 --!ZF--> 1, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --SF--> 9, 7 --!SF--> 3, 8 ----> 9, , 10 --ZF--> 8, 10 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "iread_fullblock"
node 0:
skip'
node 1:
RAX := (Reg: RBP + Reg: RAX), RBX := (Reg: RBX - Reg: RAX), R14 := (Reg: R14 + Reg: RAX)
ZF := (Reg: RBX - Reg: RAX), CF := (Reg: RBX - Reg: RAX), SF := (Reg: RBX - Reg: RAX), OF := (Reg: RBX - Reg: RAX), PF := (Reg: RBX - Reg: RAX)
node 2:
RAX := Reg: RBP
node 3:
skip'
node 4:
skip'
node 5:
RDX := Reg: RBX, RDI := TakeBits: <31,0>(Reg: R15), RSI := Reg: R14
node 6:
RAX := iread@()
node 7:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 8:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 10:
RBX := Reg: RDX, R15 := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
--------

same_behavior for the nodes: iread_fullblock -> iread_fullblock_2795 and iread_fullblock -> iread_fullblock_4480

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, R15 := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || RBX := Reg: RDX, R15 := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes iread_fullblock -> iread_fullblock_2795 and iread_fullblock -> iread_fullblock_4480 have been verified to do the same.

same_behavior for the nodes: .label_285 -> iread_fullblock_2813 and .label_319 -> iread_fullblock_4502

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_285 -> iread_fullblock_2813 and .label_319 -> iread_fullblock_4502 have been verified to do the same.

same_behavior for the nodes: .label_287 -> iread_fullblock_2822 and .label_320 -> iread_fullblock_4513

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_287 -> iread_fullblock_2822 and .label_320 -> iread_fullblock_4513 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2796 -> iread_fullblock_2796 and iread_fullblock_4481 -> iread_fullblock_4481

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2796 -> iread_fullblock_2796 and iread_fullblock_4481 -> iread_fullblock_4481 have been verified to do the same.

same_behavior for the nodes: .label_288 -> iread_fullblock_2800 and .label_322 -> iread_fullblock_4487

same_behavior checking these two SStates:

SA || RDX := Reg: RBX, RDI := TakeBits: <31,0>(Reg: R15), RSI := Reg: R14

SB || RDX := Reg: RBX, RDI := TakeBits: <31,0>(Reg: R15), RSI := Reg: R14

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R15]
Value B:
E_app (TakeBits 31 0) [E_reg R15]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_288 -> iread_fullblock_2800 and .label_322 -> iread_fullblock_4487 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2801 -> iread_fullblock_2801 and iread_fullblock_4488 -> iread_fullblock_4488

same_behavior checking these two SStates:

SA || RAX := iread@()

SB || RAX := iread@()

Resulting values:
Value A:
E_app (F2 "iread" "") []
Value B:
E_app (F2 "iread" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2801 -> iread_fullblock_2801 and iread_fullblock_4488 -> iread_fullblock_4488 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2802 -> iread_fullblock_2803 and iread_fullblock_4489 -> iread_fullblock_4490

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2802 -> iread_fullblock_2803 and iread_fullblock_4489 -> iread_fullblock_4490 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2804 -> iread_fullblock_2804 and iread_fullblock_4491 -> iread_fullblock_4491

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2804 -> iread_fullblock_2804 and iread_fullblock_4491 -> iread_fullblock_4491 have been verified to do the same.

same_behavior for the nodes: .label_286 -> .label_286 and .label_321 -> iread_fullblock_4505

same_behavior checking these two SStates:

SA || RAX := Reg: RBP

SB || RAX := Reg: RBP

Resulting values:
Value A:
E_reg RBP
Value B:
E_reg RBP
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_286 -> .label_286 and .label_321 -> iread_fullblock_4505 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2805 -> iread_fullblock_2809 and iread_fullblock_4492 -> iread_fullblock_4496

same_behavior checking these two SStates:

SA || RAX := (Reg: RBP + Reg: RAX), RBX := (Reg: RBX - Reg: RAX), R14 := (Reg: R14 + Reg: RAX)
SA || ZF := (Reg: RBX - Reg: RAX), CF := (Reg: RBX - Reg: RAX), SF := (Reg: RBX - Reg: RAX), OF := (Reg: RBX - Reg: RAX), PF := (Reg: RBX - Reg: RAX)

SB || RAX := (Reg: RBP + Reg: RAX), RBX := (Reg: RBX - Reg: RAX), R14 := (Reg: R14 + Reg: RAX)
SB || ZF := (Reg: RBX - Reg: RAX), CF := (Reg: RBX - Reg: RAX), SF := (Reg: RBX - Reg: RAX), OF := (Reg: RBX - Reg: RAX), PF := (Reg: RBX - Reg: RAX)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_reg RAX]
Value B:
E_app (Op ADD) [E_reg RBP,E_reg RAX]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_reg RBX,E_reg RAX]
Value B:
E_app (Op SUB) [E_reg RBX,E_reg RAX]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_reg RAX]
Value B:
E_app (Op ADD) [E_reg R14,E_reg RAX]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2805 -> iread_fullblock_2809 and iread_fullblock_4492 -> iread_fullblock_4496 have been verified to do the same.

same_behavior for the nodes: iread_fullblock_2810 -> iread_fullblock_2810 and iread_fullblock_4497 -> iread_fullblock_4497

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes iread_fullblock_2810 -> iread_fullblock_2810 and iread_fullblock_4497 -> iread_fullblock_4497 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Reg: RBP + Reg: RAX) <--> (Reg: RBP + Reg: RAX)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Val(20,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(21,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(11,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(12,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(13,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(14,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(15,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(16,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(17,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(18,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(20,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
ue: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (3/101): "copy_with_unblock"
--------
.dot code for CFG of text section copy_with_unblock for Vanilla
diGraph copy_with_unblock_Vanilla{
	copy_with_unblock_0  [label="[copy_with_unblock_3914,copy_with_unblock_3916]"]
	copy_with_unblock_1  [label="[copy_with_unblock_3940,copy_with_unblock_3940]"]
	copy_with_unblock_2  [label="[copy_with_unblock_3948,copy_with_unblock_3948]"]
	copy_with_unblock_3  [label="[copy_with_unblock_3957,copy_with_unblock_3957]"]
	copy_with_unblock_4  [label="[copy_with_unblock_3958,copy_with_unblock_3958]"]
	copy_with_unblock_5  [label="[.label_384,copy_with_unblock_3970]"]
	copy_with_unblock_6  [label="[.label_381,.label_381]"]
	copy_with_unblock_7  [label="[.label_377,copy_with_unblock_3962]"]
	copy_with_unblock_8  [label="[.label_376,copy_with_unblock_3956]"]
	copy_with_unblock_9  [label="[.label_382,copy_with_unblock_3947]"]
	copy_with_unblock_10  [label="[.label_379,copy_with_unblock_3939]"]
	copy_with_unblock_11  [label="[copy_with_unblock_3906,copy_with_unblock_3913]"]
	copy_with_unblock_12  [label="[copy_with_unblock_3925,copy_with_unblock_3925]"]
	copy_with_unblock_13  [label="[copy_with_unblock_3935,copy_with_unblock_3935]"]
	copy_with_unblock_14  [label="[.label_383,.label_383]"]
	copy_with_unblock_15  [label="[.label_375,copy_with_unblock_3976]"]
	copy_with_unblock_16  [label="[.label_378,copy_with_unblock_3934]"]
	copy_with_unblock_17  [label="[.label_374,copy_with_unblock_3924]"]
	copy_with_unblock_18  [label="[copy_with_unblock_3897,copy_with_unblock_3898]"]
	copy_with_unblock_19  [label="[.label_385,copy_with_unblock_3905]"]
	copy_with_unblock_20  [label="[.label_380,copy_with_unblock_3983]"]
	copy_with_unblock_21  [label="[copy_with_unblock,copy_with_unblock_3896]"]

	copy_with_unblock_0 -> copy_with_unblock_15;
	copy_with_unblock_1 -> copy_with_unblock_5;
	copy_with_unblock_2 -> copy_with_unblock_8;
	copy_with_unblock_3 -> copy_with_unblock_4;
	copy_with_unblock_4 -> copy_with_unblock_7;
	copy_with_unblock_5 -> copy_with_unblock_15 [label="CF"];
	copy_with_unblock_5 -> copy_with_unblock_14 [label="!CF"];
	copy_with_unblock_6 -> copy_with_unblock_9;
	copy_with_unblock_7 -> copy_with_unblock_6 [label="!ZF"];
	copy_with_unblock_7 -> copy_with_unblock_5 [label="ZF"];
	copy_with_unblock_8 -> copy_with_unblock_7 [label="CF"];
	copy_with_unblock_8 -> copy_with_unblock_3 [label="!CF"];
	copy_with_unblock_9 -> copy_with_unblock_8 [label="!ZF"];
	copy_with_unblock_9 -> copy_with_unblock_2 [label="ZF"];
	copy_with_unblock_10 -> copy_with_unblock_9 [label="!ZF"];
	copy_with_unblock_10 -> copy_with_unblock_1 [label="ZF"];
	copy_with_unblock_11 -> copy_with_unblock_10 [label="!ZF"];
	copy_with_unblock_11 -> copy_with_unblock_0 [label="ZF"];
	copy_with_unblock_12 -> copy_with_unblock_16;
	copy_with_unblock_13 -> copy_with_unblock_15;
	copy_with_unblock_14 -> copy_with_unblock_15;
	copy_with_unblock_15 -> copy_with_unblock_19 [label="CF"];
	copy_with_unblock_15 -> copy_with_unblock_20 [label="!CF"];
	copy_with_unblock_16 -> copy_with_unblock_14 [label="!CF"];
	copy_with_unblock_16 -> copy_with_unblock_13 [label="CF"];
	copy_with_unblock_17 -> copy_with_unblock_16 [label="!ZF"];
	copy_with_unblock_17 -> copy_with_unblock_12 [label="ZF"];
	copy_with_unblock_18 -> copy_with_unblock_19;
	copy_with_unblock_19 -> copy_with_unblock_17 [label="!CF"];
	copy_with_unblock_19 -> copy_with_unblock_11 [label="CF"];

	copy_with_unblock_21 -> copy_with_unblock_20 [label="ZF"];
	copy_with_unblock_21 -> copy_with_unblock_18 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section copy_with_unblock for Randomized
diGraph copy_with_unblock_Randomized{
	copy_with_unblock_0  [label="[copy_with_unblock_6095,copy_with_unblock_6099]"]
	copy_with_unblock_1  [label="[copy_with_unblock_6133,copy_with_unblock_6134]"]
	copy_with_unblock_2  [label="[copy_with_unblock_6145,copy_with_unblock_6145]"]
	copy_with_unblock_3  [label="[copy_with_unblock_6157,copy_with_unblock_6157]"]
	copy_with_unblock_4  [label="[copy_with_unblock_6158,copy_with_unblock_6158]"]
	copy_with_unblock_5  [label="[.label_426,copy_with_unblock_6174]"]
	copy_with_unblock_6  [label="[.label_421,copy_with_unblock_6138]"]
	copy_with_unblock_7  [label="[.label_418,copy_with_unblock_6163]"]
	copy_with_unblock_8  [label="[.label_424,copy_with_unblock_6156]"]
	copy_with_unblock_9  [label="[.label_423,copy_with_unblock_6144]"]
	copy_with_unblock_10  [label="[.label_425,copy_with_unblock_6132]"]
	copy_with_unblock_11  [label="[copy_with_unblock_6083,copy_with_unblock_6094]"]
	copy_with_unblock_12  [label="[copy_with_unblock_6110,copy_with_unblock_6110]"]
	copy_with_unblock_13  [label="[copy_with_unblock_6126,copy_with_unblock_6127]"]
	copy_with_unblock_14  [label="[.label_422,.label_422]"]
	copy_with_unblock_15  [label="[.label_419,copy_with_unblock_6180]"]
	copy_with_unblock_16  [label="[.label_415,copy_with_unblock_6125]"]
	copy_with_unblock_17  [label="[.label_416,copy_with_unblock_6109]"]
	copy_with_unblock_18  [label="[copy_with_unblock_6071,copy_with_unblock_6072]"]
	copy_with_unblock_19  [label="[.label_417,copy_with_unblock_6082]"]
	copy_with_unblock_20  [label="[.label_420,copy_with_unblock_6189]"]
	copy_with_unblock_21  [label="[copy_with_unblock,copy_with_unblock_6070]"]

	copy_with_unblock_0 -> copy_with_unblock_15;
	copy_with_unblock_1 -> copy_with_unblock_5;
	copy_with_unblock_2 -> copy_with_unblock_8;
	copy_with_unblock_3 -> copy_with_unblock_4;
	copy_with_unblock_4 -> copy_with_unblock_7;
	copy_with_unblock_5 -> copy_with_unblock_15 [label="CF"];
	copy_with_unblock_5 -> copy_with_unblock_14 [label="!CF"];
	copy_with_unblock_6 -> copy_with_unblock_9;
	copy_with_unblock_7 -> copy_with_unblock_6 [label="!ZF"];
	copy_with_unblock_7 -> copy_with_unblock_5 [label="ZF"];
	copy_with_unblock_8 -> copy_with_unblock_7 [label="CF"];
	copy_with_unblock_8 -> copy_with_unblock_3 [label="!CF"];
	copy_with_unblock_9 -> copy_with_unblock_8 [label="!ZF"];
	copy_with_unblock_9 -> copy_with_unblock_2 [label="ZF"];
	copy_with_unblock_10 -> copy_with_unblock_9 [label="!ZF"];
	copy_with_unblock_10 -> copy_with_unblock_1 [label="ZF"];
	copy_with_unblock_11 -> copy_with_unblock_10 [label="!ZF"];
	copy_with_unblock_11 -> copy_with_unblock_0 [label="ZF"];
	copy_with_unblock_12 -> copy_with_unblock_16;
	copy_with_unblock_13 -> copy_with_unblock_15;
	copy_with_unblock_14 -> copy_with_unblock_15;
	copy_with_unblock_15 -> copy_with_unblock_19 [label="CF"];
	copy_with_unblock_15 -> copy_with_unblock_20 [label="!CF"];
	copy_with_unblock_16 -> copy_with_unblock_14 [label="!CF"];
	copy_with_unblock_16 -> copy_with_unblock_13 [label="CF"];
	copy_with_unblock_17 -> copy_with_unblock_16 [label="!ZF"];
	copy_with_unblock_17 -> copy_with_unblock_12 [label="ZF"];
	copy_with_unblock_18 -> copy_with_unblock_19;
	copy_with_unblock_19 -> copy_with_unblock_17 [label="!CF"];
	copy_with_unblock_19 -> copy_with_unblock_11 [label="CF"];

	copy_with_unblock_21 -> copy_with_unblock_20 [label="ZF"];
	copy_with_unblock_21 -> copy_with_unblock_18 [label="!ZF"];
}
--------
Starting Node: 21

Edges: 0 ----> 15, 1 ----> 5, 2 ----> 8, 3 ----> 4, 4 ----> 7, 5 --CF--> 15, 5 --!CF--> 14, 6 ----> 9, 7 --!ZF--> 6, 7 --ZF--> 5, 8 --CF--> 7, 8 --!CF--> 3, 9 --!ZF--> 8, 9 --ZF--> 2, 10 --!ZF--> 9, 10 --ZF--> 1, 11 --!ZF--> 10, 11 --ZF--> 0, 12 ----> 16, 13 ----> 15, 14 ----> 15, 15 --CF--> 19, 15 --!CF--> 20, 16 --!CF--> 14, 16 --CF--> 13, 17 --!ZF--> 16, 17 --ZF--> 12, 18 ----> 19, 19 --!CF--> 17, 19 --CF--> 11, , 21 --ZF--> 20, 21 --!ZF--> 18

Symbolic Execution for Binary "Vanilla":
Current text section: "copy_with_unblock"
node 0:
RAX := (Reg: RAX + Value: 1)
[(Var: copy_with_unblock_3915 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 1:
skip'
node 2:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)
node 3:
RAX := write_output@()
node 4:
RAX := Dereference: [(Var: returned + Var: copy_with_unblock.pending_spaces),8]
node 5:
RAX := Dereference: [(Var: .label_384 + Var: oc),8], RCX := (Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1), RDX := Dereference: [(Var: copy_with_unblock_3967 + Var: obuf),8]
[(Var: copy_with_unblock_3966 + Var: oc),8] := (Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3967 + Var: obuf),8] + Dereference: [(Var: .label_384 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: R12)
ZF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8])
node 6:
RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [(Var: returned + Var: space_character),1])
node 7:
RAX := (Reg: RAX - Value: 1)
[(Var: copy_with_unblock_3961 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX - Value: 1)
ZF := (Reg: RAX - Value: 1), SF := (Reg: RAX - Value: 1), OF := (Reg: RAX - Value: 1), PF := (Reg: RAX - Value: 1)
node 8:
RDX := Dereference: [(Var: .label_376 + Var: oc),8], RDI := Dereference: [(Var: copy_with_unblock_3953 + Var: obuf),8], RSI := (Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1)
[(Var: copy_with_unblock_3952 + Var: oc),8] := (Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3953 + Var: obuf),8] + Dereference: [(Var: .label_376 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8])
node 9:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
ZF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1)
node 10:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 11:
RAX := Dereference: [(Var: copy_with_unblock_3912 + Var: copy_with_unblock.pending_spaces),8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1)), RDX := (if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)
ZF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), CF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), SF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), OF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), PF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32))
node 12:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 10)
node 13:
skip'
node 14:
RAX := write_output@()
node 15:
RBX := (Reg: RBX + Value: 1)
ZF := CMP((Reg: RBX + Value: 1),Reg: R15), CF := CMP((Reg: RBX + Value: 1),Reg: R15), SF := CMP((Reg: RBX + Value: 1),Reg: R15), OF := CMP((Reg: RBX + Value: 1),Reg: R15), PF := CMP((Reg: RBX + Value: 1),Reg: R15)
node 16:
RBX := (Reg: RBX - Value: 1), RCX := Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_unblock_3931 + Var: obuf),8]
[(Var: copy_with_unblock_3930 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3931 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RAX)
ZF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8])
node 17:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 37)
[(Var: .label_374 + Var: copy_with_unblock.pending_spaces),8] := Value: 0, [(Var: copy_with_unblock_3920 + Var: col),8] := Value: 0
ZF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1)
node 18:
skip'
node 19:
RAX := Dereference: [(Var: copy_with_unblock_3901 + Var: col),8], RCX := (Dereference: [(Var: copy_with_unblock_3901 + Var: col),8] + Value: 1), R12 := (TakeBits: <63,8>(Reg: R12) . Dereference: [(Reg: R14 + Reg: RBX),1])
[(Var: copy_with_unblock_3903 + Var: col),8] := (Dereference: [(Var: copy_with_unblock_3901 + Var: col),8] + Value: 1)
ZF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), CF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), SF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), OF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), PF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8])
node 20:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 21:
RBX := Value: 0, R15 := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] (20,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(21,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(11,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(12,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(13,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(14,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(15,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(16,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(17,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(18,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 40) && RBP == Value: 64),(20,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
:= Reg: RBX
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 21

Edges: 0 ----> 15, 1 ----> 5, 2 ----> 8, 3 ----> 4, 4 ----> 7, 5 --CF--> 15, 5 --!CF--> 14, 6 ----> 9, 7 --!ZF--> 6, 7 --ZF--> 5, 8 --CF--> 7, 8 --!CF--> 3, 9 --!ZF--> 8, 9 --ZF--> 2, 10 --!ZF--> 9, 10 --ZF--> 1, 11 --!ZF--> 10, 11 --ZF--> 0, 12 ----> 16, 13 ----> 15, 14 ----> 15, 15 --CF--> 19, 15 --!CF--> 20, 16 --!CF--> 14, 16 --CF--> 13, 17 --!ZF--> 16, 17 --ZF--> 12, 18 ----> 19, 19 --!CF--> 17, 19 --CF--> 11, , 21 --ZF--> 20, 21 --!ZF--> 18

Symbolic Execution for Binary "Randomized":
Current text section: "copy_with_unblock"
node 0:
RAX := (Reg: RAX + Value: 1)
[(Var: copy_with_unblock_6097 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 1:
skip'
node 2:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)
node 3:
RAX := write_output@()
node 4:
RAX := Dereference: [(Var: returned + Var: copy_with_unblock.pending_spaces),8]
node 5:
RAX := Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8], RCX := (Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1), RDX := Dereference: [(Var: copy_with_unblock_6170 + Var: obuf),8]
[(Var: copy_with_unblock_6169 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6170 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: R12)
ZF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8])
node 6:
RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [(Var: returned + Var: space_character),1])
node 7:
RAX := (Reg: RAX - Value: 1)
[(Var: copy_with_unblock_6162 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX - Value: 1)
ZF := (Reg: RAX - Value: 1), SF := (Reg: RAX - Value: 1), OF := (Reg: RAX - Value: 1), PF := (Reg: RAX - Value: 1)
node 8:
RDX := Dereference: [(Var: .label_424 + Var: oc),8], RDI := Dereference: [(Var: copy_with_unblock_6153 + Var: obuf),8], RSI := (Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1)
[(Var: copy_with_unblock_6151 + Var: oc),8] := (Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6153 + Var: obuf),8] + Dereference: [(Var: .label_424 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8])
node 9:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
ZF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1)
node 10:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 11:
RAX := Dereference: [(Var: copy_with_unblock_6093 + Var: copy_with_unblock.pending_spaces),8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1)), RDX := (if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)
ZF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), CF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), SF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), OF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), PF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32))
node 12:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 10)
node 13:
skip'
node 14:
RAX := write_output@()
node 15:
RBX := (Reg: RBX + Value: 1)
ZF := CMP((Reg: RBX + Value: 1),Reg: R15), CF := CMP((Reg: RBX + Value: 1),Reg: R15), SF := CMP((Reg: RBX + Value: 1),Reg: R15), OF := CMP((Reg: RBX + Value: 1),Reg: R15), PF := CMP((Reg: RBX + Value: 1),Reg: R15)
node 16:
RBX := (Reg: RBX - Value: 1), RCX := Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_unblock_6120 + Var: obuf),8]
[(Var: copy_with_unblock_6118 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6120 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RAX)
ZF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8])
node 17:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 37)
[(Var: .label_416 + Var: copy_with_unblock.pending_spaces),8] := Value: 0, [(Var: copy_with_unblock_6103 + Var: col),8] := Value: 0
ZF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1)
node 18:
skip'
node 19:
RAX := Dereference: [(Var: copy_with_unblock_6076 + Var: col),8], RCX := (Dereference: [(Var: copy_with_unblock_6076 + Var: col),8] + Value: 1), R12 := (TakeBits: <63,8>(Reg: R12) . Dereference: [(Reg: R14 + Reg: RBX),1])
[(Var: copy_with_unblock_6080 + Var: col),8] := (Dereference: [(Var: copy_with_unblock_6076 + Var: col),8] + Value: 1)
ZF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), CF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), SF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), OF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), PF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8])
node 20:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 21:
RBX := Value: 0, R15 := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: copy_with_unblock -> copy_with_unblock_3896 and copy_with_unblock -> copy_with_unblock_6070

same_behavior checking these two SStates:

SA || RBX := Value: 0, R15 := Reg: RSI, R14 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RBX := Value: 0, R15 := Reg: RSI, R14 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock -> copy_with_unblock_3896 and copy_with_unblock -> copy_with_unblock_6070 have been verified to do the same.

same_behavior for the nodes: .label_380 -> copy_with_unblock_3983 and .label_420 -> copy_with_unblock_6189

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_380 -> copy_with_unblock_3983 and .label_420 -> copy_with_unblock_6189 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3897 -> copy_with_unblock_3898 and copy_with_unblock_6071 -> copy_with_unblock_6072

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3897 -> copy_with_unblock_3898 and copy_with_unblock_6071 -> copy_with_unblock_6072 have been verified to do the same.

same_behavior for the nodes: .label_385 -> copy_with_unblock_3905 and .label_417 -> copy_with_unblock_6082

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: copy_with_unblock_3901 + Var: col),8], RCX := (Dereference: [(Var: copy_with_unblock_3901 + Var: col),8] + Value: 1), R12 := (TakeBits: <63,8>(Reg: R12) . Dereference: [(Reg: R14 + Reg: RBX),1])
SA || [(Var: copy_with_unblock_3903 + Var: col),8] := (Dereference: [(Var: copy_with_unblock_3901 + Var: col),8] + Value: 1)
SA || ZF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), CF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), SF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), OF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8]), PF := CMP(Dereference: [(Var: copy_with_unblock_3901 + Var: col),8],Dereference: [(Var: copy_with_unblock_3904 + Var: conversion_blocksize),8])

SB || RAX := Dereference: [(Var: copy_with_unblock_6076 + Var: col),8], RCX := (Dereference: [(Var: copy_with_unblock_6076 + Var: col),8] + Value: 1), R12 := (TakeBits: <63,8>(Reg: R12) . Dereference: [(Reg: R14 + Reg: RBX),1])
SB || [(Var: copy_with_unblock_6080 + Var: col),8] := (Dereference: [(Var: copy_with_unblock_6076 + Var: col),8] + Value: 1)
SB || ZF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), CF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), SF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), OF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8]), PF := CMP(Dereference: [(Var: copy_with_unblock_6076 + Var: col),8],Dereference: [(Var: copy_with_unblock_6081 + Var: conversion_blocksize),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3901" 64,E_var "col" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6076" 64,E_var "col" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3901" 64,E_var "col" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6076" 64,E_var "col" 64]) 8,E_val 1 64]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg R12],E_deref (E_app (Op ADD) [E_reg R14,E_reg RBX]) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg R12],E_deref (E_app (Op ADD) [E_reg R14,E_reg RBX]) 1]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3903" 64,E_var "col" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6080" 64,E_var "col" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3901" 64,E_var "col" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6076" 64,E_var "col" 64]) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_385 -> copy_with_unblock_3905 and .label_417 -> copy_with_unblock_6082 have been verified to do the same.

same_behavior for the nodes: .label_374 -> copy_with_unblock_3924 and .label_416 -> copy_with_unblock_6109

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 37)
SA || [(Var: .label_374 + Var: copy_with_unblock.pending_spaces),8] := Value: 0, [(Var: copy_with_unblock_3920 + Var: col),8] := Value: 0
SA || ZF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_unblock_3921 + Var: newline_character),1],Value: 1)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 37)
SB || [(Var: .label_416 + Var: copy_with_unblock.pending_spaces),8] := Value: 0, [(Var: copy_with_unblock_6103 + Var: col),8] := Value: 0
SB || ZF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_unblock_6105 + Var: newline_character),1],Value: 1)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 37 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 37 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_374" 64,E_var "copy_with_unblock.pending_spaces" 64]
E_app (Op ADD) [E_var ".label_416" 64,E_var "copy_with_unblock.pending_spaces" 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_374" 64,E_var "copy_with_unblock.pending_spaces" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6103" 64,E_var "col" 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3920" 64,E_var "col" 64]
E_app (Op ADD) [E_var ".label_416" 64,E_var "copy_with_unblock.pending_spaces" 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3920" 64,E_var "col" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6103" 64,E_var "col" 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_374 -> copy_with_unblock_3924 and .label_416 -> copy_with_unblock_6109 have been verified to do the same.

same_behavior for the nodes: .label_378 -> copy_with_unblock_3934 and .label_415 -> copy_with_unblock_6125

same_behavior checking these two SStates:

SA || RBX := (Reg: RBX - Value: 1), RCX := Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_unblock_3931 + Var: obuf),8]
SA || [(Var: copy_with_unblock_3930 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3931 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RAX)
SA || ZF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_3928 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3933 + Var: output_blocksize),8])

SB || RBX := (Reg: RBX - Value: 1), RCX := Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_unblock_6120 + Var: obuf),8]
SB || [(Var: copy_with_unblock_6118 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6120 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RAX)
SB || ZF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_6114 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6123 + Var: output_blocksize),8])

Resulting values:
Value A:
E_app (Op SUB) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op SUB) [E_reg RBX,E_val 1 8]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3928" 64,E_var "oc" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6114" 64,E_var "oc" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3928" 64,E_var "oc" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6114" 64,E_var "oc" 64]) 8,E_val 1 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3931" 64,E_var "obuf" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6120" 64,E_var "obuf" 64]) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3930" 64,E_var "oc" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6118" 64,E_var "oc" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3928" 64,E_var "oc" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6114" 64,E_var "oc" 64]) 8,E_val 1 64]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3931" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3928" 64,E_var "oc" 64]) 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6120" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6114" 64,E_var "oc" 64]) 8]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RAX]
E_app (TakeBits 7 0) [E_reg RAX]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_378 -> copy_with_unblock_3934 and .label_415 -> copy_with_unblock_6125 have been verified to do the same.

same_behavior for the nodes: .label_383 -> .label_383 and .label_422 -> .label_422

same_behavior checking these two SStates:

SA || RAX := write_output@()

SB || RAX := write_output@()

Resulting values:
Value A:
E_app (F2 "write_output" "") []
Value B:
E_app (F2 "write_output" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_383 -> .label_383 and .label_422 -> .label_422 have been verified to do the same.

same_behavior for the nodes: .label_375 -> copy_with_unblock_3976 and .label_419 -> copy_with_unblock_6180

same_behavior checking these two SStates:

SA || RBX := (Reg: RBX + Value: 1)
SA || ZF := CMP((Reg: RBX + Value: 1),Reg: R15), CF := CMP((Reg: RBX + Value: 1),Reg: R15), SF := CMP((Reg: RBX + Value: 1),Reg: R15), OF := CMP((Reg: RBX + Value: 1),Reg: R15), PF := CMP((Reg: RBX + Value: 1),Reg: R15)

SB || RBX := (Reg: RBX + Value: 1)
SB || ZF := CMP((Reg: RBX + Value: 1),Reg: R15), CF := CMP((Reg: RBX + Value: 1),Reg: R15), SF := CMP((Reg: RBX + Value: 1),Reg: R15), OF := CMP((Reg: RBX + Value: 1),Reg: R15), PF := CMP((Reg: RBX + Value: 1),Reg: R15)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_375 -> copy_with_unblock_3976 and .label_419 -> copy_with_unblock_6180 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3935 -> copy_with_unblock_3935 and copy_with_unblock_6126 -> copy_with_unblock_6127

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3935 -> copy_with_unblock_3935 and copy_with_unblock_6126 -> copy_with_unblock_6127 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3925 -> copy_with_unblock_3925 and copy_with_unblock_6110 -> copy_with_unblock_6110

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 10)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 10)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 10 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 10 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3925 -> copy_with_unblock_3925 and copy_with_unblock_6110 -> copy_with_unblock_6110 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3906 -> copy_with_unblock_3913 and copy_with_unblock_6083 -> copy_with_unblock_6094

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: copy_with_unblock_3912 + Var: copy_with_unblock.pending_spaces),8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1)), RDX := (if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)
SA || ZF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), CF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), SF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), OF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), PF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_3907 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32))

SB || RAX := Dereference: [(Var: copy_with_unblock_6093 + Var: copy_with_unblock.pending_spaces),8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1)), RDX := (if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)
SB || ZF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), CF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), SF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), OF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32)), PF := CMP(sextend(TakeBits: <7,0>(Reg: R12),8,32),(if (AND(Dereference: [(Var: copy_with_unblock_6085 + Var: space_character),1],Value: 1) != Value: 0) then Value: 64 else Value: 32))

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3912" 64,E_var "copy_with_unblock.pending_spaces" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6093" 64,E_var "copy_with_unblock.pending_spaces" 64]) 8
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3907" 64,E_var "space_character" 64]) 1,E_val 1 8]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6085" 64,E_var "space_character" 64]) 1,E_val 1 8]]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3907" 64,E_var "space_character" 64]) 1,E_val 1 8],E_val 0 (-1)]) (E_val 64 32) (E_val 32 32)
Value B:
E_ite (E_app (F !=) [E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6085" 64,E_var "space_character" 64]) 1,E_val 1 8],E_val 0 (-1)]) (E_val 64 32) (E_val 32 32)
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3906 -> copy_with_unblock_3913 and copy_with_unblock_6083 -> copy_with_unblock_6094 have been verified to do the same.

same_behavior for the nodes: .label_379 -> copy_with_unblock_3939 and .label_425 -> copy_with_unblock_6132

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_379 -> copy_with_unblock_3939 and .label_425 -> copy_with_unblock_6132 have been verified to do the same.

same_behavior for the nodes: .label_382 -> copy_with_unblock_3947 and .label_423 -> copy_with_unblock_6144

same_behavior checking these two SStates:

SA || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1)

SB || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RCX),Value: 1)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 64 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 64 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_382 -> copy_with_unblock_3947 and .label_423 -> copy_with_unblock_6144 have been verified to do the same.

same_behavior for the nodes: .label_376 -> copy_with_unblock_3956 and .label_424 -> copy_with_unblock_6156

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: .label_376 + Var: oc),8], RDI := Dereference: [(Var: copy_with_unblock_3953 + Var: obuf),8], RSI := (Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1)
SA || [(Var: copy_with_unblock_3952 + Var: oc),8] := (Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3953 + Var: obuf),8] + Dereference: [(Var: .label_376 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SA || ZF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_376 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3955 + Var: output_blocksize),8])

SB || RDX := Dereference: [(Var: .label_424 + Var: oc),8], RDI := Dereference: [(Var: copy_with_unblock_6153 + Var: obuf),8], RSI := (Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1)
SB || [(Var: copy_with_unblock_6151 + Var: oc),8] := (Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6153 + Var: obuf),8] + Dereference: [(Var: .label_424 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SB || ZF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_424 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6155 + Var: output_blocksize),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_376" 64,E_var "oc" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var ".label_424" 64,E_var "oc" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3953" 64,E_var "obuf" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6153" 64,E_var "obuf" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_376" 64,E_var "oc" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_424" 64,E_var "oc" 64]) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3952" 64,E_var "oc" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6151" 64,E_var "oc" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_376" 64,E_var "oc" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_424" 64,E_var "oc" 64]) 8,E_val 1 64]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3953" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var ".label_376" 64,E_var "oc" 64]) 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6153" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var ".label_424" 64,E_var "oc" 64]) 8]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RCX]
E_app (TakeBits 7 0) [E_reg RCX]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_376 -> copy_with_unblock_3956 and .label_424 -> copy_with_unblock_6156 have been verified to do the same.

same_behavior for the nodes: .label_377 -> copy_with_unblock_3962 and .label_418 -> copy_with_unblock_6163

same_behavior checking these two SStates:

SA || RAX := (Reg: RAX - Value: 1)
SA || [(Var: copy_with_unblock_3961 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX - Value: 1)
SA || ZF := (Reg: RAX - Value: 1), SF := (Reg: RAX - Value: 1), OF := (Reg: RAX - Value: 1), PF := (Reg: RAX - Value: 1)

SB || RAX := (Reg: RAX - Value: 1)
SB || [(Var: copy_with_unblock_6162 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX - Value: 1)
SB || ZF := (Reg: RAX - Value: 1), SF := (Reg: RAX - Value: 1), OF := (Reg: RAX - Value: 1), PF := (Reg: RAX - Value: 1)

Resulting values:
Value A:
E_app (Op SUB) [E_reg RAX,E_val 1 8]
Value B:
E_app (Op SUB) [E_reg RAX,E_val 1 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3961" 64,E_var "copy_with_unblock.pending_spaces" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6162" 64,E_var "copy_with_unblock.pending_spaces" 64]
(v1 := v2):
E_app (Op SUB) [E_reg RAX,E_val 1 8]
E_app (Op SUB) [E_reg RAX,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_377 -> copy_with_unblock_3962 and .label_418 -> copy_with_unblock_6163 have been verified to do the same.

same_behavior for the nodes: .label_381 -> .label_381 and .label_421 -> copy_with_unblock_6138

same_behavior checking these two SStates:

SA || RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [(Var: returned + Var: space_character),1])

SB || RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [(Var: returned + Var: space_character),1])

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "space_character" 64]) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "space_character" 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_381 -> .label_381 and .label_421 -> copy_with_unblock_6138 have been verified to do the same.

same_behavior for the nodes: .label_384 -> copy_with_unblock_3970 and .label_426 -> copy_with_unblock_6174

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: .label_384 + Var: oc),8], RCX := (Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1), RDX := Dereference: [(Var: copy_with_unblock_3967 + Var: obuf),8]
SA || [(Var: copy_with_unblock_3966 + Var: oc),8] := (Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_3967 + Var: obuf),8] + Dereference: [(Var: .label_384 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: R12)
SA || ZF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_384 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_3969 + Var: output_blocksize),8])

SB || RAX := Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8], RCX := (Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1), RDX := Dereference: [(Var: copy_with_unblock_6170 + Var: obuf),8]
SB || [(Var: copy_with_unblock_6169 + Var: oc),8] := (Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_unblock_6170 + Var: obuf),8] + Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: R12)
SB || ZF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_unblock_6166 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_unblock_6172 + Var: output_blocksize),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_384" 64,E_var "oc" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6166" 64,E_var "oc" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_384" 64,E_var "oc" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6166" 64,E_var "oc" 64]) 8,E_val 1 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3967" 64,E_var "obuf" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6170" 64,E_var "obuf" 64]) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3966" 64,E_var "oc" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6169" 64,E_var "oc" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_384" 64,E_var "oc" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6166" 64,E_var "oc" 64]) 8,E_val 1 64]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_3967" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var ".label_384" 64,E_var "oc" 64]) 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6170" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_unblock_6166" 64,E_var "oc" 64]) 8]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg R12]
E_app (TakeBits 7 0) [E_reg R12]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_384 -> copy_with_unblock_3970 and .label_426 -> copy_with_unblock_6174 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3957 -> copy_with_unblock_3957 and copy_with_unblock_6157 -> copy_with_unblock_6157

same_behavior checking these two SStates:

SA || RAX := write_output@()

SB || RAX := write_output@()

Resulting values:
Value A:
E_app (F2 "write_output" "") []
Value B:
E_app (F2 "write_output" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3957 -> copy_with_unblock_3957 and copy_with_unblock_6157 -> copy_with_unblock_6157 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3958 -> copy_with_unblock_3958 and copy_with_unblock_6158 -> copy_with_unblock_6158

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: returned + Var: copy_with_unblock.pending_spaces),8]

SB || RAX := Dereference: [(Var: returned + Var: copy_with_unblock.pending_spaces),8]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "copy_with_unblock.pending_spaces" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "copy_with_unblock.pending_spaces" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3958 -> copy_with_unblock_3958 and copy_with_unblock_6158 -> copy_with_unblock_6158 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3948 -> copy_with_unblock_3948 and copy_with_unblock_6145 -> copy_with_unblock_6145

same_behavior checking these two SStates:

SA || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)

SB || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 32 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 32 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3948 -> copy_with_unblock_3948 and copy_with_unblock_6145 -> copy_with_unblock_6145 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3940 -> copy_with_unblock_3940 and copy_with_unblock_6133 -> copy_with_unblock_6134

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_unblock_3940 -> copy_with_unblock_3940 and copy_with_unblock_6133 -> copy_with_unblock_6134 have been verified to do the same.

same_behavior for the nodes: copy_with_unblock_3914 -> copy_with_unblock_3916 and copy_with_unblock_6095 -> copy_with_unblock_6099

same_behavior checking these two SStates:

SA || RAX := (Reg: RAX + Value: 1)
SA || [(Var: copy_with_unblock_3915 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX + Value: 1)
SA || ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

SB || RAX := (Reg: RAX + Value: 1)
SB || [(Var: copy_with_unblock_6097 + Var: copy_with_unblock.pending_spaces),8] := (Reg: RAX + Value: 1)
SB || ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_unblock_3915" 64,E_var "copy_with_unblock.pending_spaces" 64]
E_app (Op ADD) [E_var "copy_with_unblock_6097" 64,E_var "copy_with_unblock.pending_spaces" 64]
(v1 := v2):
E_app (Op ADD) [E_reg RAX,E_val 1 8]
E_app (Op ADD) [E_reg RAX,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes copy_with_unblock_3914 -> copy_with_unblock_3916 and copy_with_unblock_6095 -> copy_with_unblock_6099 have been verified to do the same.

Label relationship:
copy_with_unblock_3915 <--> copy_with_unblock_6097
copy_with_unblock_3966 <--> copy_with_unblock_6169
copy_with_unblock_3967 <--> copy_with_unblock_6170
.label_384 <--> copy_with_unblock_6166
returned <--> returned
copy_with_unblock_3961 <--> copy_with_unblock_6162
copy_with_unblock_3952 <--> copy_with_unblock_6151
copy_with_unblock_3953 <--> copy_with_unblock_6153
.label_376 <--> .label_424
space_character <--> space_character
copy_with_unblock_3907 <--> copy_with_unblock_6085
copy_with_unblock_3912 <--> copy_with_unblock_6093
 <--> 
copy_with_unblock_3930 <--> copy_with_unblock_6118
obuf <--> obuf
copy_with_unblock_3931 <--> copy_with_unblock_6120
oc <--> oc
copy_with_unblock_3928 <--> copy_with_unblock_6114
copy_with_unblock_3920 <--> copy_with_unblock_6103,.label_416
col <--> copy_with_unblock.pending_spaces,col
copy_with_unblock.pending_spaces <--> col,copy_with_unblock.pending_spaces
.label_374 <--> copy_with_unblock_6103,.label_416
copy_with_unblock_3903 <--> copy_with_unblock_6080
copy_with_unblock_3901 <--> copy_with_unblock_6076

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (4/101): "copy_with_block"
--------
.dot code for CFG of text section copy_with_block for Vanilla
diGraph copy_with_block_Vanilla{
	copy_with_block_0  [label="[copy_with_block_3826,copy_with_block_3827]"]
	copy_with_block_1  [label="[copy_with_block_3860,copy_with_block_3860]"]
	copy_with_block_2  [label="[copy_with_block_3861,copy_with_block_3862]"]
	copy_with_block_3  [label="[copy_with_block_3853,copy_with_block_3859]"]
	copy_with_block_4  [label="[.label_368,copy_with_block_3865]"]
	copy_with_block_5  [label="[.label_373,.label_373]"]
	copy_with_block_6  [label="[copy_with_block_3824,copy_with_block_3825]"]
	copy_with_block_(16,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(17,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(13,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == (Dereference: [(Var: copy_with_block_3812 + Var: col),8] + Value: 1),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(12,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(0,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(11,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(10,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(1,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(18,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(11,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(12,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(13,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(17,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(18,RSP == Var: RSP0 && RBP == Var: RBP0)])
7  [label="[copy_with_block_3838,copy_with_block_3838]"]
	copy_with_block_8  [label="[copy_with_block_3847,copy_with_block_3847]"]
	copy_with_block_9  [label="[copy_with_block_3848,copy_with_block_3849]"]
	copy_with_block_10  [label="[.label_372,.label_372]"]
	copy_with_block_11  [label="[.label_367,copy_with_block_3846]"]
	copy_with_block_12  [label="[copy_with_block_3834,copy_with_block_3837]"]
	copy_with_block_13  [label="[.label_370,copy_with_block_3871]"]
	copy_with_block_14  [label="[.label_366,copy_with_block_3833]"]
	copy_with_block_15  [label="[copy_with_block_3812,copy_with_block_3814]"]
	copy_with_block_16  [label="[.label_371,copy_with_block_3823]"]
	copy_with_block_17  [label="[.label_369,copy_with_block_3878]"]
	copy_with_block_18  [label="[copy_with_block,copy_with_block_3811]"]

	copy_with_block_0 -> copy_with_block_4;
	copy_with_block_1 -> copy_with_block_2;
	copy_with_block_2 -> copy_with_block_4;
	copy_with_block_3 -> copy_with_block_4 [label="CF"];
	copy_with_block_3 -> copy_with_block_1 [label="!CF"];
	copy_with_block_4 -> copy_with_block_13;
	copy_with_block_5 -> copy_with_block_4 [label="!CF"];
	copy_with_block_5 -> copy_with_block_3 [label="CF"];
	copy_with_block_6 -> copy_with_block_5 [label="!ZF"];
	copy_with_block_6 -> copy_with_block_0 [label="ZF"];
	copy_with_block_7 -> copy_with_block_11;
	copy_with_block_8 -> copy_with_block_9;
	copy_with_block_9 -> copy_with_block_10;
	copy_with_block_10 -> copy_with_block_14;
	copy_with_block_11 -> copy_with_block_10 [label="CF"];
	copy_with_block_11 -> copy_with_block_8 [label="!CF"];
	copy_with_block_12 -> copy_with_block_11 [label="!ZF"];
	copy_with_block_12 -> copy_with_block_7 [label="ZF"];
	copy_with_block_13 -> copy_with_block_16 [label="!ZF"];
	copy_with_block_13 -> copy_with_block_17 [label="ZF"];
	copy_with_block_14 -> copy_with_block_13 [label="!CF"];
	copy_with_block_14 -> copy_with_block_12 [label="CF"];
	copy_with_block_15 -> copy_with_block_16;
	copy_with_block_16 -> copy_with_block_14 [label="ZF"];
	copy_with_block_16 -> copy_with_block_6 [label="!ZF"];

	copy_with_block_18 -> copy_with_block_17 [label="ZF"];
	copy_with_block_18 -> copy_with_block_15 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section copy_with_block for Randomized
diGraph copy_with_block_Randomized{
	copy_with_block_0  [label="[copy_with_block_5975,copy_with_block_5977]"]
	copy_with_block_1  [label="[copy_with_block_6019,copy_with_block_6019]"]
	copy_with_block_2  [label="[copy_with_block_6020,copy_with_block_6022]"]
	copy_with_block_3  [label="[copy_with_block_6009,copy_with_block_6018]"]
	copy_with_block_4  [label="[.label_408,copy_with_block_6027]"]
	copy_with_block_5  [label="[.label_414,.label_414]"]
	copy_with_block_6  [label="[copy_with_block_5971,copy_with_block_5974]"]
	copy_with_block_7  [label="[copy_with_block_5992,copy_with_block_5992]"]
	copy_with_block_8  [label="[copy_with_block_6002,copy_with_block_6002]"]
	copy_with_block_9  [label="[copy_with_block_6003,copy_with_block_6005]"]
	copy_with_block_10  [label="[.label_412,.label_412]"]
	copy_with_block_11  [label="[.label_413,copy_with_block_6001]"]
	copy_with_block_12  [label="[copy_with_block_5987,copy_with_block_5991]"]
	copy_with_block_13  [label="[.label_409,copy_with_block_6035]"]
	copy_with_block_14  [label="[.label_407,copy_with_block_5986]"]
	copy_with_block_15  [label="[copy_with_block_5952,copy_with_block_5956]"]
	copy_with_block_16  [label="[.label_410,copy_with_block_5970]"]
	copy_with_block_17  [label="[.label_411,copy_with_block_6046]"]
	copy_with_block_18  [label="[copy_with_block,copy_with_block_5951]"]

	copy_with_block_0 -> copy_with_block_4;
	copy_with_block_1 -> copy_with_block_2;
	copy_with_block_2 -> copy_with_block_4;
	copy_with_block_3 -> copy_with_block_4 [label="CF"];
	copy_with_block_3 -> copy_with_block_1 [label="!CF"];
	copy_with_block_4 -> copy_with_block_13;
	copy_with_block_5 -> copy_with_block_4 [label="!CF"];
	copy_with_block_5 -> copy_with_block_3 [label="CF"];
	copy_with_block_6 -> copy_with_block_5 [label="!ZF"];
	copy_with_block_6 -> copy_with_block_0 [label="ZF"];
	copy_with_block_7 -> copy_with_block_11;
	copy_with_block_8 -> copy_with_block_9;
	copy_with_block_9 -> copy_with_block_10;
	copy_with_block_10 -> copy_with_block_14;
	copy_with_block_11 -> copy_with_block_10 [label="CF"];
	copy_with_block_11 -> copy_with_block_8 [label="!CF"];
	copy_with_block_12 -> copy_with_block_11 [label="!ZF"];
	copy_with_block_12 -> copy_with_block_7 [label="ZF"];
	copy_with_block_13 -> copy_with_block_16 [label="!ZF"];
	copy_with_block_13 -> copy_with_block_17 [label="ZF"];
	copy_with_block_14 -> copy_with_block_13 [label="!CF"];
	copy_with_block_14 -> copy_with_block_12 [label="CF"];
	copy_with_block_15 -> copy_with_block_16;
	copy_with_block_16 -> copy_with_block_14 [label="ZF"];
	copy_with_block_16 -> copy_with_block_6 [label="!ZF"];

	copy_with_block_18 -> copy_with_block_17 [label="ZF"];
	copy_with_block_18 -> copy_with_block_15 [label="!ZF"];
}
--------
Starting Node: 18

Edges: 0 ----> 4, 1 ----> 2, 2 ----> 4, 3 --CF--> 4, 3 --!CF--> 1, 4 ----> 13, 5 --!CF--> 4, 5 --CF--> 3, 6 --!ZF--> 5, 6 --ZF--> 0, 7 ----> 11, 8 ----> 9, 9 ----> 10, 10 ----> 14, 11 --CF--> 10, 11 --!CF--> 8, 12 --!ZF--> 11, 12 --ZF--> 7, 13 --!ZF--> 16, 13 --ZF--> 17, 14 --!CF--> 13, 14 --CF--> 12, 15 ----> 16, 16 --ZF--> 14, 16 --!ZF--> 6, , 18 --ZF--> 17, 18 --!ZF--> 15

Symbolic Execution for Binary "Vanilla":
Current text section: "copy_with_block"
node 0:
[(Var: copy_with_block_3826 + Var: r_truncate),8] := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)
ZF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), SF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), OF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), PF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)
node 1:
RAX := write_output@()
node 2:
skip'
node 3:
RAX := Dereference: [(Var: copy_with_block_3853 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_block_3856 + Var: obuf),8]
[(Var: copy_with_block_3855 + Var: oc),8] := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3856 + Var: obuf),8] + Dereference: [(Var: copy_with_block_3853 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8])
node 4:
RCX := (Reg: RBP + Value: 1)
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 5:
skip'
node 6:
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 7:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)
node 8:
RAX := write_output@()
node 9:
RAX := Dereference: [(Var: copy_with_block_3848 + Var: conversion_blocksize),8]
node 10:
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 11:
RDX := Dereference: [(Var: .label_367 + Var: oc),8], RDI := Dereference: [(Var: copy_with_block_3843 + Var: obuf),8], RSI := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1)
[(Var: copy_with_block_3842 + Var: oc),8] := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3843 + Var: obuf),8(16,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(17,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(13,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == (Dereference: [(Var: copy_with_block_5953 + Var: col),8] + Value: 1),RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(12,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(0,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(11,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(10,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(1,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 40) && RBP == Dereference: [(Var: copy_with_block_5953 + Var: col),8],RSP == (Var: RSP0 - Value: 40) && RBP == Nothing,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing)
(18,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(11,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(12,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(13,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(17,RSP == (Var: RSP0 - Value: 40) && RBP == Nothing),(18,RSP == Var: RSP0 && RBP == Var: RBP0)])
] + Dereference: [(Var: .label_367 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8])
node 12:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
ZF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1)
node 13:
RBX := (Reg: RBX + Value: 1), R14 := (Reg: R14 - Value: 1)
[(Var: .label_370 + Var: col),8] := Reg: RCX
ZF := (Reg: R14 - Value: 1), SF := (Reg: R14 - Value: 1), OF := (Reg: R14 - Value: 1), PF := (Reg: R14 - Value: 1)
node 14:
RCX := Value: 0
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 15:
R15 := Value: 37
node 16:
RAX := Dereference: [(Var: copy_with_block_3821 + Var: conversion_blocksize),8], RCX := sextend(Dereference: [Reg: RBX,1],8,32), RDX := (if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)
ZF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), CF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), SF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), OF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), PF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 18:
RBX := Reg: RDI, R14 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 18

Edges: 0 ----> 4, 1 ----> 2, 2 ----> 4, 3 --CF--> 4, 3 --!CF--> 1, 4 ----> 13, 5 --!CF--> 4, 5 --CF--> 3, 6 --!ZF--> 5, 6 --ZF--> 0, 7 ----> 11, 8 ----> 9, 9 ----> 10, 10 ----> 14, 11 --CF--> 10, 11 --!CF--> 8, 12 --!ZF--> 11, 12 --ZF--> 7, 13 --!ZF--> 16, 13 --ZF--> 17, 14 --!CF--> 13, 14 --CF--> 12, 15 ----> 16, 16 --ZF--> 14, 16 --!ZF--> 6, , 18 --ZF--> 17, 18 --!ZF--> 15

Symbolic Execution for Binary "Randomized":
Current text section: "copy_with_block"
node 0:
[(Var: copy_with_block_5976 + Var: r_truncate),8] := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1)
ZF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), SF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), OF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), PF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1)
node 1:
RAX := write_output@()
node 2:
skip'
node 3:
RAX := Dereference: [(Var: copy_with_block_6010 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_block_6013 + Var: obuf),8]
[(Var: copy_with_block_6012 + Var: oc),8] := (Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_6013 + Var: obuf),8] + Dereference: [(Var: copy_with_block_6010 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8])
node 4:
RCX := (Reg: RBP + Value: 1)
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 5:
skip'
node 6:
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 7:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)
node 8:
RAX := write_output@()
node 9:
RAX := Dereference: [(Var: copy_with_block_6003 + Var: conversion_blocksize),8]
node 10:
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 11:
RDX := Dereference: [(Var: copy_with_block_5995 + Var: oc),8], RDI := Dereference: [(Var: copy_with_block_5998 + Var: obuf),8], RSI := (Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1)
[(Var: copy_with_block_5997 + Var: oc),8] := (Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_5998 + Var: obuf),8] + Dereference: [(Var: copy_with_block_5995 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8])
node 12:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
ZF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1)
node 13:
RBX := (Reg: RBX + Value: 1), R14 := (Reg: R14 - Value: 1)
[(Var: .label_409 + Var: col),8] := Reg: RCX
ZF := (Reg: R14 - Value: 1), SF := (Reg: R14 - Value: 1), OF := (Reg: R14 - Value: 1), PF := (Reg: R14 - Value: 1)
node 14:
RCX := Value: 0
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 15:
R15 := Value: 37
node 16:
RAX := Dereference: [(Var: copy_with_block_5966 + Var: conversion_blocksize),8], RCX := sextend(Dereference: [Reg: RBX,1],8,32), RDX := (if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)
ZF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), CF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), SF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), OF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), PF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 18:
RBX := Reg: RDI, R14 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: copy_with_block -> copy_with_block_3811 and copy_with_block -> copy_with_block_5951

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, R14 := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RBX := Reg: RDI, R14 := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes copy_with_block -> copy_with_block_3811 and copy_with_block -> copy_with_block_5951 have been verified to do the same.

same_behavior for the nodes: .label_369 -> copy_with_block_3878 and .label_411 -> copy_with_block_6046

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_369 -> copy_with_block_3878 and .label_411 -> copy_with_block_6046 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3812 -> copy_with_block_3814 and copy_with_block_5952 -> copy_with_block_5956

same_behavior checking these two SStates:

SA || R15 := Value: 37

SB || R15 := Value: 37

Resulting values:
Value A:
E_val 37 32
Value B:
E_val 37 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3812 -> copy_with_block_3814 and copy_with_block_5952 -> copy_with_block_5956 have been verified to do the same.

same_behavior for the nodes: .label_371 -> copy_with_block_3823 and .label_410 -> copy_with_block_5970

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: copy_with_block_3821 + Var: conversion_blocksize),8], RCX := sextend(Dereference: [Reg: RBX,1],8,32), RDX := (if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)
SA || ZF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), CF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), SF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), OF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), PF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10))

SB || RAX := Dereference: [(Var: copy_with_block_5966 + Var: conversion_blocksize),8], RCX := sextend(Dereference: [Reg: RBX,1],8,32), RDX := (if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)
SB || ZF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), CF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), SF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), OF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), PF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_5961 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10))

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_block_3821" 64,E_var "conversion_blocksize" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_5966" 64,E_var "conversion_blocksize" 64]) 8
Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_reg RBX) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_reg RBX) 1]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3817" 64,E_var "newline_character" 64]) 1,E_val 1 8],E_val 0 (-1)]) (E_app (TakeBits 31 0) [E_reg R15]) (E_val 10 32)
Value B:
E_ite (E_app (F !=) [E_app (Op AND) [E_deref (E_app (Op ADD) [E_var "copy_with_block_5961" 64,E_var "newline_character" 64]) 1,E_val 1 8],E_val 0 (-1)]) (E_app (TakeBits 31 0) [E_reg R15]) (E_val 10 32)
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_371 -> copy_with_block_3823 and .label_410 -> copy_with_block_5970 have been verified to do the same.

same_behavior for the nodes: .label_366 -> copy_with_block_3833 and .label_407 -> copy_with_block_5986

same_behavior checking these two SStates:

SA || RCX := Value: 0
SA || ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)

SB || RCX := Value: 0
SB || ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_366 -> copy_with_block_3833 and .label_407 -> copy_with_block_5986 have been verified to do the same.

same_behavior for the nodes: .label_370 -> copy_with_block_3871 and .label_409 -> copy_with_block_6035

same_behavior checking these two SStates:

SA || RBX := (Reg: RBX + Value: 1), R14 := (Reg: R14 - Value: 1)
SA || [(Var: .label_370 + Var: col),8] := Reg: RCX
SA || ZF := (Reg: R14 - Value: 1), SF := (Reg: R14 - Value: 1), OF := (Reg: R14 - Value: 1), PF := (Reg: R14 - Value: 1)

SB || RBX := (Reg: RBX + Value: 1), R14 := (Reg: R14 - Value: 1)
SB || [(Var: .label_409 + Var: col),8] := Reg: RCX
SB || ZF := (Reg: R14 - Value: 1), SF := (Reg: R14 - Value: 1), OF := (Reg: R14 - Value: 1), PF := (Reg: R14 - Value: 1)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Resulting values:
Value A:
E_app (Op SUB) [E_reg R14,E_val 1 8]
Value B:
E_app (Op SUB) [E_reg R14,E_val 1 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_370" 64,E_var "col" 64]
E_app (Op ADD) [E_var ".label_409" 64,E_var "col" 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_370 -> copy_with_block_3871 and .label_409 -> copy_with_block_6035 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3834 -> copy_with_block_3837 and copy_with_block_5987 -> copy_with_block_5991

same_behavior checking these two SStates:

SA || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
SA || ZF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1)

SB || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
SB || ZF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_block_5987 + Var: space_character),1],Value: 1)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 64 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 64 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3834 -> copy_with_block_3837 and copy_with_block_5987 -> copy_with_block_5991 have been verified to do the same.

same_behavior for the nodes: .label_367 -> copy_with_block_3846 and .label_413 -> copy_with_block_6001

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: .label_367 + Var: oc),8], RDI := Dereference: [(Var: copy_with_block_3843 + Var: obuf),8], RSI := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1)
SA || [(Var: copy_with_block_3842 + Var: oc),8] := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3843 + Var: obuf),8] + Dereference: [(Var: .label_367 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SA || ZF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8])

SB || RDX := Dereference: [(Var: copy_with_block_5995 + Var: oc),8], RDI := Dereference: [(Var: copy_with_block_5998 + Var: obuf),8], RSI := (Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1)
SB || [(Var: copy_with_block_5997 + Var: oc),8] := (Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_5998 + Var: obuf),8] + Dereference: [(Var: copy_with_block_5995 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SB || ZF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_5995 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6000 + Var: output_blocksize),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_367" 64,E_var "oc" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_5995" 64,E_var "oc" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_block_3843" 64,E_var "obuf" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_5998" 64,E_var "obuf" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_367" 64,E_var "oc" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_5995" 64,E_var "oc" 64]) 8,E_val 1 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_block_3842" 64,E_var "oc" 64]
E_app (Op ADD) [E_var "copy_with_block_5997" 64,E_var "oc" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_367" 64,E_var "oc" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_5995" 64,E_var "oc" 64]) 8,E_val 1 64]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3843" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var ".label_367" 64,E_var "oc" 64]) 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_5998" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_block_5995" 64,E_var "oc" 64]) 8]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RCX]
E_app (TakeBits 7 0) [E_reg RCX]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_367 -> copy_with_block_3846 and .label_413 -> copy_with_block_6001 have been verified to do the same.

same_behavior for the nodes: .label_372 -> .label_372 and .label_412 -> .label_412

same_behavior checking these two SStates:

SA || ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)

SB || ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_372 -> .label_372 and .label_412 -> .label_412 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3847 -> copy_with_block_3847 and copy_with_block_6002 -> copy_with_block_6002

same_behavior checking these two SStates:

SA || RAX := write_output@()

SB || RAX := write_output@()

Resulting values:
Value A:
E_app (F2 "write_output" "") []
Value B:
E_app (F2 "write_output" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3847 -> copy_with_block_3847 and copy_with_block_6002 -> copy_with_block_6002 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3848 -> copy_with_block_3849 and copy_with_block_6003 -> copy_with_block_6005

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: copy_with_block_3848 + Var: conversion_blocksize),8]

SB || RAX := Dereference: [(Var: copy_with_block_6003 + Var: conversion_blocksize),8]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_block_3848" 64,E_var "conversion_blocksize" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_6003" 64,E_var "conversion_blocksize" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3848 -> copy_with_block_3849 and copy_with_block_6003 -> copy_with_block_6005 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3838 -> copy_with_block_3838 and copy_with_block_5992 -> copy_with_block_5992

same_behavior checking these two SStates:

SA || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)

SB || RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 32)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 32 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_val 32 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3838 -> copy_with_block_3838 and copy_with_block_5992 -> copy_with_block_5992 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3824 -> copy_with_block_3825 and copy_with_block_5971 -> copy_with_block_5974

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)

SB || ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3824 -> copy_with_block_3825 and copy_with_block_5971 -> copy_with_block_5974 have been verified to do the same.

same_behavior for the nodes: .label_373 -> .label_373 and .label_414 -> .label_414

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_373 -> .label_373 and .label_414 -> .label_414 have been verified to do the same.

same_behavior for the nodes: .label_368 -> copy_with_block_3865 and .label_408 -> copy_with_block_6027

same_behavior checking these two SStates:

SA || RCX := (Reg: RBP + Value: 1)
SA || ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)

SB || RCX := (Reg: RBP + Value: 1)
SB || ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBP,E_val 1 8]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_368 -> copy_with_block_3865 and .label_408 -> copy_with_block_6027 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3853 -> copy_with_block_3859 and copy_with_block_6009 -> copy_with_block_6018

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: copy_with_block_3853 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_block_3856 + Var: obuf),8]
SA || [(Var: copy_with_block_3855 + Var: oc),8] := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3856 + Var: obuf),8] + Dereference: [(Var: copy_with_block_3853 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SA || ZF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8])

SB || RAX := Dereference: [(Var: copy_with_block_6010 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_block_6013 + Var: obuf),8]
SB || [(Var: copy_with_block_6012 + Var: oc),8] := (Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_6013 + Var: obuf),8] + Dereference: [(Var: copy_with_block_6010 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
SB || ZF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_6010 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_6016 + Var: output_blocksize),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_block_3853" 64,E_var "oc" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_6010" 64,E_var "oc" 64]) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3853" 64,E_var "oc" 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_6010" 64,E_var "oc" 64]) 8,E_val 1 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "copy_with_block_3856" 64,E_var "obuf" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "copy_with_block_6013" 64,E_var "obuf" 64]) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_block_3855" 64,E_var "oc" 64]
E_app (Op ADD) [E_var "copy_with_block_6012" 64,E_var "oc" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3853" 64,E_var "oc" 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_6010" 64,E_var "oc" 64]) 8,E_val 1 64]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3856" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_block_3853" 64,E_var "oc" 64]) 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_6013" 64,E_var "obuf" 64]) 8,E_deref (E_app (Op ADD) [E_var "copy_with_block_6010" 64,E_var "oc" 64]) 8]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RCX]
E_app (TakeBits 7 0) [E_reg RCX]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes copy_with_block_3853 -> copy_with_block_3859 and copy_with_block_6009 -> copy_with_block_6018 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3860 -> copy_with_block_3860 and copy_with_block_6019 -> copy_with_block_6019

same_behavior checking these two SStates:

SA || RAX := write_output@()

SB || RAX := write_output@()

Resulting values:
Value A:
E_app (F2 "write_output" "") []
Value B:
E_app (F2 "write_output" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3860 -> copy_with_block_3860 and copy_with_block_6019 -> copy_with_block_6019 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3861 -> copy_with_block_3862 and copy_with_block_6020 -> copy_with_block_6022

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes copy_with_block_3861 -> copy_with_block_3862 and copy_with_block_6020 -> copy_with_block_6022 have been verified to do the same.

same_behavior for the nodes: copy_with_block_3826 -> copy_with_block_3827 and copy_with_block_5975 -> copy_with_block_5977

same_behavior checking these two SStates:

SA || [(Var: copy_with_block_3826 + Var: r_truncate),8] := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)
SA || ZF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), SF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), OF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), PF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)

SB || [(Var: copy_with_block_5976 + Var: r_truncate),8] := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1)
SB || ZF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), SF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), OF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1), PF := (Dereference: [(Var: copy_with_block_5976 + Var: r_truncate),8] + Value: 1)

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "copy_with_block_3826" 64,E_var "r_truncate" 64]
E_app (Op ADD) [E_var "copy_with_block_5976" 64,E_var "r_truncate" 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_3826" 64,E_var "r_truncate" 64]) 8,E_val 1 8]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "copy_with_block_5976" 64,E_var "r_truncate" 64]) 8,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes copy_with_block_3826 -> copy_with_block_3827 and copy_with_block_5975 -> copy_with_block_5977 have been verified to do the same.

Label relationship:
r_truncate <--> r_truncate
copy_with_block_3826 <--> copy_with_block_5976
copy_with_block_3855 <--> copy_with_block_6012
copy_with_block_3856 <--> copy_with_block_6013
copy_with_block_3853 <--> copy_with_block_6010
copy_with_block_3848 <--> copy_with_block_6003
 <--> 
copy_with_block_3842 <--> copy_with_block_5997
obuf <--> obuf
copy_with_block_3843 <--> copy_with_block_5998
oc <--> oc
.label_367 <--> copy_with_block_5995
col <--> col
.label_370 <--> .label_409
newline_character <--> newline_character
copy_with_block_3817 <--> copy_with_block_5961
conversion_blocksize <--> conversion_blocksize
copy_with_block_3821 <--> copy_with_block_5966

Local variable relationship:
(Reg: RBP + Value: 1) <--> (Reg: RBP + Value: 1)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (5/101): "alloc_obuf"
--------
.dot code for CFG of text section alloc_obuf for Vanilla
diGraph alloc_obuf_Vanilla{
	alloc_obuf_0  [label="[alloc_obuf_3754,alloc_obuf_3754]"]
	alloc_obuf_1  [label="[alloc_obuf_3755,alloc_obuf_3757]"]
	alloc_obuf_2  [label="[alloc_obuf_3765,alloc_obuf_3770]"]
	alloc_obuf_3  [label="[copy_with_block_3826,copy_with_block_3827]"]
	alloc_obuf_4  [label="[copy_with_block_3860,copy_with_block_3860]"]
	alloc_obuf_5  [label="[copy_with_block_3861,copy_with_block_3862]"]
	alloc_obuf_6  [label="[copy_with_block_3853,copy_with_block_3859]"]
	alloc_obuf_7  [label="[.label_368,copy_with_block_3865]"]
	alloc_obuf_8  [label="[.label_373,.label_373]"]
	alloc_obuf_9  [label="[copy_with_block_3824,copy_with_block_3825]"]
	alloc_obuf_10  [label="[copy_with_block_3838,copy_with_block_3838]"]
	alloc_obuf_11  [label="[copy_with_block_3847,copy_with_block_3847]"]
	alloc_obuf_12  [label="[copy_with_block_3848,copy_with_block_3849]"]
	alloc_obuf_13  [label="[.label_372,.label_372]"]
	alloc_obuf_14  [label="[.label_367,copy_with_block_3846]"]
	alloc_obuf_15  [label="[copy_with_block_3834,copy_with_block_3837]"]
	alloc_obuf_16  [label="[.label_370,copy_with_block_3871]"]
	alloc_obuf_17  [label="[.label_366,copy_with_block_3833]"]
	alloc_obuf_18  [label="[copy_with_block_3812,copy_with_block_3814]"]
	alloc_obuf_19  [label="[.label_371,copy_with_block_3823]"]
	alloc_obuf_20  [label="[.label_369,copy_with_block_3878]"]
	alloc_obuf_21  [label="[.label_365,alloc_obuf_3780]"]
	alloc_obuf_22  [label="[alloc_obuf_3781,alloc_obuf_3781]"]
	alloc_obuf_23  [label="[alloc_obuf_3782,alloc_obuf_3787]"]
	alloc_obuf_24  [label="[alloc_obuf_3788,alloc_obuf_3788]"]
	alloc_obuf_25  [label="[alloc_obuf_3789,alloc_obuf_3794]"]
	alloc_obuf_26  [label="[alloc_obuf_3795,alloc_obuf_3795]"]
	alloc_obuf_27  [label="[copy_with_block,copy_with_block_3811]"]
	alloc_obuf_28  [label="[.label_364,alloc_obuf_3761]"]
	alloc_obuf_29  [label="[alloc_obuf_3762,alloc_obuf_3762]"]
	alloc_obuf_30  [label="[alloc_obuf_3763,alloc_obuf_3764]"]
	alloc_obuf_31  [label="[alloc_obuf_3752,alloc_obuf_3753]"]
	alloc_obuf_32  [label="[.label_363,alloc_obuf_3776]"]
	alloc_obuf_33  [label="[alloc_obuf,alloc_obuf_3751]"]

	alloc_obuf_0 -> alloc_obuf_1;
	alloc_obuf_1 -> alloc_obuf_32;
	alloc_obuf_2 -> alloc_obuf_32;
	alloc_obuf_3 -> alloc_obuf_7;
	allo(19,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 720) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 720) && RBP == Reg: RCX,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(17,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(16,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == (Dereference: [(Var: copy_with_block_3812 + Var: col),8] + Value: 1),RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(10,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(13,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(11,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(12,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 720) && RBP == Dereference: [(Var: copy_with_block_3812 + Var: col),8],RSP == (Var: RSP0 - Value: 720) && RBP == Nothing,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing)
(33,fromList [(0,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(11,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(12,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(13,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(17,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(18,RSP == (Var: RSP0 - Value: 720) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 720) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(28,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(29,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(30,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(31,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(32,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(33,RSP == Var: RSP0 && RBP == Var: RBP0)])
c_obuf_4 -> alloc_obuf_5;
	alloc_obuf_5 -> alloc_obuf_7;
	alloc_obuf_6 -> alloc_obuf_7 [label="CF"];
	alloc_obuf_6 -> alloc_obuf_4 [label="!CF"];
	alloc_obuf_7 -> alloc_obuf_16;
	alloc_obuf_8 -> alloc_obuf_7 [label="!CF"];
	alloc_obuf_8 -> alloc_obuf_6 [label="CF"];
	alloc_obuf_9 -> alloc_obuf_8 [label="!ZF"];
	alloc_obuf_9 -> alloc_obuf_3 [label="ZF"];
	alloc_obuf_10 -> alloc_obuf_14;
	alloc_obuf_11 -> alloc_obuf_12;
	alloc_obuf_12 -> alloc_obuf_13;
	alloc_obuf_13 -> alloc_obuf_17;
	alloc_obuf_14 -> alloc_obuf_13 [label="CF"];
	alloc_obuf_14 -> alloc_obuf_11 [label="!CF"];
	alloc_obuf_15 -> alloc_obuf_14 [label="!ZF"];
	alloc_obuf_15 -> alloc_obuf_10 [label="ZF"];
	alloc_obuf_16 -> alloc_obuf_19 [label="!ZF"];
	alloc_obuf_16 -> alloc_obuf_20 [label="ZF"];
	alloc_obuf_17 -> alloc_obuf_16 [label="!CF"];
	alloc_obuf_17 -> alloc_obuf_15 [label="CF"];
	alloc_obuf_18 -> alloc_obuf_19;
	alloc_obuf_19 -> alloc_obuf_17 [label="ZF"];
	alloc_obuf_19 -> alloc_obuf_9 [label="!ZF"];

	alloc_obuf_21 -> alloc_obuf_22;
	alloc_obuf_22 -> alloc_obuf_23;
	alloc_obuf_23 -> alloc_obuf_24;
	alloc_obuf_24 -> alloc_obuf_25;
	alloc_obuf_25 -> alloc_obuf_26;
	alloc_obuf_26 -> alloc_obuf_27;
	alloc_obuf_27 -> alloc_obuf_20 [label="ZF"];
	alloc_obuf_27 -> alloc_obuf_18 [label="!ZF"];
	alloc_obuf_28 -> alloc_obuf_29;
	alloc_obuf_29 -> alloc_obuf_30;
	alloc_obuf_30 -> alloc_obuf_21 [label="ZF"];
	alloc_obuf_30 -> alloc_obuf_2 [label="!ZF"];
	alloc_obuf_31 -> alloc_obuf_28 [label="!ZF"];
	alloc_obuf_31 -> alloc_obuf_0 [label="ZF"];

	alloc_obuf_33 -> alloc_obuf_32 [label="!ZF"];
	alloc_obuf_33 -> alloc_obuf_31 [label="ZF"];
}
--------
--------
.dot code for CFG of text section alloc_obuf for Randomized
diGraph alloc_obuf_Randomized{
	alloc_obuf_0  [label="[alloc_obuf_5854,alloc_obuf_5861]"]
	alloc_obuf_1  [label="[.label_401,alloc_obuf_5905]"]
	alloc_obuf_2  [label="[alloc_obuf_5906,alloc_obuf_5906]"]
	alloc_obuf_3  [label="[alloc_obuf_5907,alloc_obuf_5909]"]
	alloc_obuf_4  [label="[alloc_obuf_5846,alloc_obuf_5849]"]
	alloc_obuf_5  [label="[alloc_obuf_5850,alloc_obuf_5850]"]
	alloc_obuf_6  [label="[alloc_obuf_5851,alloc_obuf_5853]"]
	alloc_obuf_7  [label="[alloc_obuf_5841,alloc_obuf_5845]"]
	alloc_obuf_8  [label="[alloc_obuf_5872,alloc_obuf_5879]"]
	alloc_obuf_9  [label="[.label_404,.label_404]"]
	alloc_obuf_10  [label="[.label_402,alloc_obuf_5894]"]
	alloc_obuf_11  [label="[alloc_obuf_5895,alloc_obuf_5895]"]
	alloc_obuf_12  [label="[alloc_obuf_5896,alloc_obuf_5899]"]
	alloc_obuf_13  [label="[.label_406,alloc_obuf_5915]"]
	alloc_obuf_14  [label="[alloc_obuf_5916,alloc_obuf_5916]"]
	alloc_obuf_15  [label="[alloc_obuf_5917,alloc_obuf_5926]"]
	alloc_obuf_16  [label="[alloc_obuf_5927,alloc_obuf_5927]"]
	alloc_obuf_17  [label="[.label_405,alloc_obuf_5868]"]
	alloc_obuf_18  [label="[alloc_obuf_5869,alloc_obuf_5869]"]
	alloc_obuf_19  [label="[alloc_obuf_5870,alloc_obuf_5871]"]
	alloc_obuf_20  [label="[alloc_obuf_5838,alloc_obuf_5840]"]
	alloc_obuf_21  [label="[.label_403,alloc_obuf_5890]"]
	alloc_obuf_22  [label="[alloc_obuf,alloc_obuf_5837]"]

	alloc_obuf_0 -> alloc_obuf_9;
	alloc_obuf_1 -> alloc_obuf_2;
	alloc_obuf_2 -> alloc_obuf_3;
	alloc_obuf_3 -> alloc_obuf_13;
	alloc_obuf_4 -> alloc_obuf_5;
	alloc_obuf_5 -> alloc_obuf_6;
	alloc_obuf_6 -> alloc_obuf_1 [label="ZF"];
	alloc_obuf_6 -> alloc_obuf_0 [label="!ZF"];
	alloc_obuf_7 -> alloc_obuf_9 [label="!ZF"];
	alloc_obuf_7 -> alloc_obuf_4 [label="ZF"];
	alloc_obuf_8 -> alloc_obuf_9;
	alloc_obuf_9 -> alloc_obuf_21;
	alloc_obuf_10 -> alloc_obuf_11;
	alloc_obuf_11 -> alloc_obuf_12;
	alloc_obuf_12 -> alloc_obuf_13;
	alloc_obuf_13 -> alloc_obuf_14;
	alloc_obuf_14 -> alloc_obuf_15;
	alloc_obuf_15 -> alloc_obuf_16;

	alloc_obuf_17 -> alloc_obuf_18;
	alloc_obuf_18 -> alloc_obuf_19;
	alloc_obuf_19 -> alloc_obuf_10 [label="ZF"];
	alloc_obuf_19 -> alloc_obuf_8 [label="!ZF"];
	alloc_obuf_20 -> alloc_obuf_17 [label="!ZF"];
	alloc_obuf_20 -> alloc_obuf_7 [label="ZF"];

	alloc_obuf_22 -> alloc_obuf_21 [label="!ZF"];
	alloc_obuf_22 -> alloc_obuf_20 [label="ZF"];
}
--------
Starting Node: 33

Edges: 0 ----> 1, 1 ----> 32, 2 ----> 32, 3 ----> 7, 4 ----> 5, 5 ----> 7, 6 --CF--> 7, 6 --!CF--> 4, 7 ----> 16, 8 --!CF--> 7, 8 --CF--> 6, 9 --!ZF--> 8, 9 --ZF--> 3, 10 ----> 14, 11 ----> 12, 12 ----> 13, 13 ----> 17, 14 --CF--> 13, 14 --!CF--> 11, 15 --!ZF--> 14, 15 --ZF--> 10, 16 --!ZF--> 19, 16 --ZF--> 20, 17 --!CF--> 16, 17 --CF--> 15, 18 ----> 19, 19 --ZF--> 17, 19 --!ZF--> 9, , 21 ----> 22, 22 ----> 23, 23 ----> 24, 24 ----> 25, 25 ----> 26, 26 ----> 27, 27 --ZF--> 20, 27 --!ZF--> 18, 28 ----> 29, 29 ----> 30, 30 --ZF--> 21, 30 --!ZF--> 2, 31 --!ZF--> 28, 31 --ZF--> 0, , 33 --!ZF--> 32, 33 --ZF--> 31

Symbolic Execution for Binary "Vanilla":
Current text section: "alloc_obuf"
node 0:
RAX := alloc_ibuf@()
node 1:
RAX := Dereference: [(Var: alloc_obuf_3755 + Var: ibuf),8]
[(Var: alloc_obuf_3756 + Var: obuf),8] := Dereference: [(Var: alloc_obuf_3755 + Var: ibuf),8]
node 2:
RAX := DIV(zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), RDX := (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))
[(Var: returned + Var: obuf),8] := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1)
ZF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), CF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), SF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), OF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), PF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1)
node 3:
[(Var: copy_with_block_3826 + Var: r_truncate),8] := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)
ZF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), SF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), OF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1), PF := (Dereference: [(Var: copy_with_block_3826 + Var: r_truncate),8] + Value: 1)
node 4:
RAX := write_output@()
node 5:
skip'
node 6:
RAX := Dereference: [(Var: copy_with_block_3853 + Var: oc),8], RDX := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), RSI := Dereference: [(Var: copy_with_block_3856 + Var: obuf),8]
[(Var: copy_with_block_3855 + Var: oc),8] := (Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3856 + Var: obuf),8] + Dereference: [(Var: copy_with_block_3853 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: copy_with_block_3853 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3858 + Var: output_blocksize),8])
node 7:
RCX := (Reg: RBP + Value: 1)
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 8:
skip'
node 9:
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 10:
RCX := (T(22,fromList [(0,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 680) && RBP == Var: RBP0),(22,RSP == Var: RSP0 && RBP == Var: RBP0)])
akeBits: <63,8>(Reg: RCX) . Value: 32)
node 11:
RAX := write_output@()
node 12:
RAX := Dereference: [(Var: copy_with_block_3848 + Var: conversion_blocksize),8]
node 13:
ZF := (Reg: RBP + Value: 1), SF := (Reg: RBP + Value: 1), OF := (Reg: RBP + Value: 1), PF := (Reg: RBP + Value: 1)
node 14:
RDX := Dereference: [(Var: .label_367 + Var: oc),8], RDI := Dereference: [(Var: copy_with_block_3843 + Var: obuf),8], RSI := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1)
[(Var: copy_with_block_3842 + Var: oc),8] := (Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1), [(Dereference: [(Var: copy_with_block_3843 + Var: obuf),8] + Dereference: [(Var: .label_367 + Var: oc),8]),1] := TakeBits: <7,0>(Reg: RCX)
ZF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), CF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), SF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), OF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8]), PF := CMP((Dereference: [(Var: .label_367 + Var: oc),8] + Value: 1),Dereference: [(Var: copy_with_block_3845 + Var: output_blocksize),8])
node 15:
RCX := (TakeBits: <63,8>(Reg: RCX) . Value: 64)
ZF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), CF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), SF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), OF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1), PF := AND(Dereference: [(Var: copy_with_block_3834 + Var: space_character),1],Value: 1)
node 16:
RBX := (Reg: RBX + Value: 1), R14 := (Reg: R14 - Value: 1)
[(Var: .label_370 + Var: col),8] := Reg: RCX
ZF := (Reg: R14 - Value: 1), SF := (Reg: R14 - Value: 1), OF := (Reg: R14 - Value: 1), PF := (Reg: R14 - Value: 1)
node 17:
RCX := Value: 0
ZF := CMP(Reg: RBP,Reg: RAX), CF := CMP(Reg: RBP,Reg: RAX), SF := CMP(Reg: RBP,Reg: RAX), OF := CMP(Reg: RBP,Reg: RAX), PF := CMP(Reg: RBP,Reg: RAX)
node 18:
R15 := Value: 37
node 19:
RAX := Dereference: [(Var: copy_with_block_3821 + Var: conversion_blocksize),8], RCX := sextend(Dereference: [Reg: RBX,1],8,32), RDX := (if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)
ZF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), CF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), SF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), OF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10)), PF := CMP(sextend(Dereference: [Reg: RBX,1],8,32),(if (AND(Dereference: [(Var: copy_with_block_3817 + Var: newline_character),1],Value: 1) != Value: 0) then TakeBits: <31,0>(Reg: R15) else Value: 10))
node 20:
RBX := Dereference: [(Var: RSP0 - Value: 712),8], R15 := Dereference: [(Var: RSP0 - Value: 696),8], R14 := Dereference: [(Var: RSP0 - Value: 704),8]
ZF := (Var: RSP0 - Value: 712), CF := (Var: RSP0 - Value: 712), SF := (Var: RSP0 - Value: 712), OF := (Var: RSP0 - Value: 712), PF := (Var: RSP0 - Value: 712)
node 21:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.118,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := dcgettext@()
node 23:
RCX := Value: 1, RDX := Value: 497, RDI := Dereference: [(Var: alloc_obuf_3783 + Var: output_blocksize),8], RSI := (Var: RSP0 - Value: 680), R14 := Reg: RAX, R8 := Value: 1
node 24:
RAX := human_readable@()
node 25:
RAX := Value: 0, RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 1, RSI := Value: 0, R8 := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 26:
RAX := nl_error@()
node 27:
RBX := Reg: RDI, R14 := Reg: RSI
[(Var: RSP0 - Value: 688),8] := Var: RBP0, [(Var: RSP0 - Value: 696),8] := Reg: R15, [(Var: RSP0 - Value: 704),8] := Reg: R14, [(Var: RSP0 - Value: 712),8] := Reg: RBX, [(Var: RSP0 - Value: 720),8] := Reg: RAX
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 28:
RBX := Dereference: [(Var: alloc_obuf_3760 + Var: page_size),8], RDI := ((Dereference: [(Var: .label_364 + Var: output_blocksize),8] + Dereference: [(Var: alloc_obuf_3760 + Var: page_size),8]) - Value: 1), R15 := Dereference: [(Var: .label_364 + Var: output_blocksize),8]
node 29:
RAX := malloc@()
node 30:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 31:
ZF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), CF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), SF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), OF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), PF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8)
node 32:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 33:
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), CF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), SF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), OF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), PF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0)
--------

Starting Node: 22

Edges: 0 ----> 9, 1 ----> 2, 2 ----> 3, 3 ----> 13, 4 ----> 5, 5 ----> 6, 6 --ZF--> 1, 6 --!ZF--> 0, 7 --!ZF--> 9, 7 --ZF--> 4, 8 ----> 9, 9 ----> 21, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 --ZF--> 10, 19 --!ZF--> 8, 20 --!ZF--> 17, 20 --ZF--> 7, , 22 --!ZF--> 21, 22 --ZF--> 20

Symbolic Execution for Binary "Randomized":
Current text section: "alloc_obuf"
node 0:
RAX := DIV(zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128),zextend(Reg: RBX,Value: 64)), RCX := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))), RDX := (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))
[(Var: alloc_obuf_5860 + Var: ibuf),8] := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64)))
ZF := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))), CF := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))), SF := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))), OF := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64))), PF := ((Reg: RAX + (Reg: RBX + Value: 1)) - (zextend((Reg: RAX + (Reg: RBX + Value: 1)),Value: 128) mod zextend(Reg: RBX,Value: 64)))
node 1:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.117,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := dcgettext@()
node 3:
RDI := Dereference: [(Var: returned + Var: input_blocksize),8], R14 := Reg: RAX
node 4:
RBX := Dereference: [(Var: alloc_obuf_5848 + Var: page_size),8], RDI := (Dereference: [(Var: alloc_obuf_5846 + Var: input_blocksize),8] + (TakeBits: <63,0>((Dereference: [(Var: alloc_obuf_5848 + Var: page_size),8] * Value: 2)) + Value: 3)), R15 := Dereference: [(Var: alloc_obuf_5846 + Var: input_blocksize),8]
node 5:
RAX := malloc@()
node 6:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 7:
RCX := Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8]
ZF := TEST(Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8],Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8]), CF := TEST(Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8],Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8]), SF := TEST(Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8],Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8]), OF := TEST(Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8],Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8]), PF := TEST(Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8],Dereference: [(Var: alloc_obuf_5842 + Var: ibuf),8])
node 8:
RAX := DIV(zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), RDX := (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), CF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), SF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), OF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1), PF := (((Reg: RAX + Reg: RBX) - (zextend(((Reg: RAX + Reg: RBX) - Value: 1),Value: 128) mod zextend(Reg: RBX,Value: 64))) - Value: 1)
node 9:
[(Var: returned + Var: obuf),8] := Reg: RCX
node 10:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.118,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := dcgettext@()
node 12:
RDI := Dereference: [(Var: alloc_obuf_5897 + Var: output_blocksize),8], R14 := Reg: RAX
node 13:
RCX := Value: 1, RDX := Value: 497, RSI := (Var: RSP0 - Value: 680), R8 := Value: 1
node 14:
RAX := human_readable@()
node 15:
RAX := Value: 0, RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 1, RSI := Value: 0, R8 := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 16:
RAX := nl_error@()
node 17:
RBX := Dereference: [(Var: alloc_obuf_5865 + Var: page_size),8], RDI := ((Dereference: [(Var: alloc_obuf_5864 + Var: output_blocksize),8] + Dereference: [(Var: alloc_obuf_5865 + Var: page_size),8]) - Value: 1), R15 := Dereference: [(Var: alloc_obuf_5864 + Var: output_blocksize),8]
node 18:
RAX := malloc@()
node 19:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 20:
ZF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), CF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), SF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), OF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), PF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8)
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 22:
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), CF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), SF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), OF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), PF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0)
--------

same_behavior for the nodes: alloc_obuf -> alloc_obuf_3751 and alloc_obuf -> alloc_obuf_5837

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), CF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), SF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), OF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0), PF := CMP(Dereference: [(Var: alloc_obuf_3750 + Var: obuf),8],Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), CF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), SF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), OF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0), PF := CMP(Dereference: [(Var: alloc_obuf_5836 + Var: obuf),8],Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes alloc_obuf -> alloc_obuf_3751 and alloc_obuf -> alloc_obuf_5837 have been verified to do the same.

same_behavior for the nodes: .label_363 -> alloc_obuf_3776 and .label_403 -> alloc_obuf_5890

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_363 -> alloc_obuf_3776 and .label_403 -> alloc_obuf_5890 have been verified to do the same.

same_behavior for the nodes: alloc_obuf_3752 -> alloc_obuf_3753 and alloc_obuf_5838 -> alloc_obuf_5840

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), CF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), SF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), OF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8), PF := TEST(Dereference: [(Var: alloc_obuf_3752 + Var: label_74),1],Value: 8)

SB || ZF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), CF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), SF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), OF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8), PF := TEST(Dereference: [(Var: alloc_obuf_5839 + Var: label_65),1],Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes alloc_obuf_3752 -> alloc_obuf_3753 and alloc_obuf_5838 -> alloc_obuf_5840 have been verified to do the same.

same_behavior for the nodes: .label_364 -> alloc_obuf_3761 and .label_405 -> alloc_obuf_5868

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: alloc_obuf_3760 + Var: page_size),8], RDI := ((Dereference: [(Var: .label_364 + Var: output_blocksize),8] + Dereference: [(Var: alloc_obuf_3760 + Var: page_size),8]) - Value: 1), R15 := Dereference: [(Var: .label_364 + Var: output_blocksize),8]

SB || RBX := Dereference: [(Var: alloc_obuf_5865 + Var: page_size),8], RDI := ((Dereference: [(Var: alloc_obuf_5864 + Var: output_blocksize),8] + Dereference: [(Var: alloc_obuf_5865 + Var: page_size),8]) - Value: 1), R15 := Dereference: [(Var: alloc_obuf_5864 + Var: output_blocksize),8]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "alloc_obuf_3760" 64,E_var "page_size" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "alloc_obuf_5865" 64,E_var "page_size" 64]) 8
Resulting values:
Value A:
E_app (Op SUB) [E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var ".label_364" 64,E_var "output_blocksize" 64]) 8,E_deref (E_app (Op ADD) [E_var "alloc_obuf_3760" 64,E_var "page_size" 64]) 8],E_val 1 64]
Value B:
E_app (Op SUB) [E_app (Op ADD) [E_deref (E_app (Op ADD) [E_var "alloc_obuf_5864" 64,E_var "output_blocksize" 64]) 8,E_deref (E_app (Op ADD) [E_var "alloc_obuf_5865" 64,E_var "page_size" 64]) 8],E_val 1 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_364" 64,E_var "output_blocksize" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "alloc_obuf_5864" 64,E_var "output_blocksize" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_364 -> alloc_obuf_3761 and .label_405 -> alloc_obuf_5868 have been verified to do the same.

same_behavior for the nodes: alloc_obuf_3762 -> alloc_obuf_3762 and alloc_obuf_5869 -> alloc_obuf_5869

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes alloc_obuf_3762 -> alloc_obuf_3762 and alloc_obuf_5869 -> alloc_obuf_5869 have been verified to do the same.

same_behavior for the nodes: alloc_obuf_3763 -> alloc_obuf_3764 and alloc_obuf_5870 -> alloc_obuf_5871

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes alloc_obuf_3763 -> alloc_obuf_3764 and alloc_obuf_5870 -> alloc_obuf_5871 have been verified to do the same.

same_behavior for the nodes: .label_365 -> alloc_obuf_3780 and .label_402 -> alloc_obuf_5894

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.118,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.118,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.118" 64) 4
Value B:
E_deref (E_var ".str.118" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_365 -> alloc_obuf_3780 and .label_402 -> alloc_obuf_5894 have been verified to do the same.

same_behavior for the nodes: alloc_obuf_3781 -> alloc_obuf_3781 and alloc_obuf_5895 -> alloc_obuf_5895

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes alloc_obuf_3781 -> alloc_obuf_3781 and alloc_obuf_5895 -> alloc_obuf_5895 have been verified to do the same.

same_behavior for the nodes: alloc_obuf_3782 -> alloc_obuf_3787 and alloc_obuf_5896 -> alloc_obuf_5899

same_behavior checking these two SStates:

SA || RCX := Value: 1, RDX := Value: 497, RDI := Dereference: [(Var: alloc_obuf_3783 + Var: output_blocksize),8], RSI := (Var: RSP0 - Value: 680), R14 := Reg: RAX, R8 := Value: 1

SB || RDI := Dereference: [(Var: alloc_obuf_5897 + Var: output_blocksize),8], R14 := Reg: RAX

Nothing: RCX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op ADD) [E_var "alloc_obuf_5897" 64,E_var "output_blocksize" 64]) 8),(R14,E_reg RAX)]

Register or Memory is not compatible
main: user error (Nodes alloc_obuf_3782 -> alloc_obuf_3787 and alloc_obuf_5896 -> alloc_obuf_5899 are different.

RCX := Value: 1, RDX := Value: 497, RDI := Dereference: [(Var: alloc_obuf_3783 + Var: output_blocksize),8], RSI := (Var: RSP0 - Value: 680), R14 := Reg: RAX, R8 := Value: 1

RDI := Dereference: [(Var: alloc_obuf_5897 + Var: output_blocksize),8], R14 := Reg: RAX)
