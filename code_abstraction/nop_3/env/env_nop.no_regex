	.section	.text
	.align	32
	#Procedure 0x4018e9
	.globl sub_4018e9
	.type sub_4018e9, @function
sub_4018e9:

	hlt	
	.section	.text
	.align	32
	#Procedure 0x4018ea
	.globl sub_4018ea
	.type sub_4018ea, @function
sub_4018ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401922
	.globl sub_401922
	.type sub_401922, @function
sub_401922:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40196a
	.globl sub_40196a
	.type sub_40196a, @function
sub_40196a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40198c
	.globl sub_40198c
	.type sub_40198c, @function
sub_40198c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40199d
	.globl sub_40199d
	.type sub_40199d, @function
sub_40199d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4019b6
	.globl sub_4019b6
	.type sub_4019b6, @function
sub_4019b6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4019c0

	.globl usage
	.type usage, @function
usage:
	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x50
	mov	dword ptr [rbp - 0x10], edi
	cmp	dword ptr [rbp - 0x10], 0
	mov	rsp, rsp
	je	.label_7
	nop	
	jmp	.label_8
.label_8:
	movabs	rdi, OFFSET FLAT:.str
	mov	rax,  qword ptr [word ptr [stderr]]
	mov	qword ptr [rbp - 0x30], rax
	mov	rsp, rsp
	call	gettext
	nop	
	mov	rdx,  qword ptr [word ptr [program_name]]
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x30]
	lea	rsi, [rsi]
	mov	rsi, rax
	nop	
	mov	al, 0
	call	fprintf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x40], eax
	lea	rsi, [rsi]
	jmp	.label_9
.label_7:
	movabs	rdi, OFFSET FLAT:.str.1
	call	gettext
	mov	rsi,  qword ptr [word ptr [program_name]]
	mov	rsp, rsp
	mov	rdi, rax
	lea	rsi, [rsi]
	mov	al, 0
	call	printf
	movabs	rdi, OFFSET FLAT:.str.2
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x34], eax
	lea	rdi, [rdi]
	call	gettext
	mov	rbp, rbp
	mov	rsi,  qword ptr [word ptr [stdout]]
	nop	
	mov	rdi, rax
	nop	
	call	fputs_unlocked
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x24], eax
	lea	rdi, [rdi]
	call	emit_mandatory_arg_note
	lea	rsi, [rsi]
	movabs	rdi, OFFSET FLAT:.str.3
	nop	
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	lea	rsi, [rsi]
	mov	rdi, rax
	call	fputs_unlocked
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.4
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x14], eax
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rbp, rbp
	mov	rdi, rax
	mov	rbp, rbp
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.5
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x44], eax
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	mov	rsp, rsp
	call	fputs_unlocked
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.6
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x48], eax
	mov	rsp, rsp
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rsp, rsp
	mov	rdi, rax
	mov	rbp, rbp
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.7
	mov	dword ptr [rbp - 0x20], eax
	nop	
	call	gettext
	mov	rsp, rsp
	mov	rsi,  qword ptr [word ptr [stdout]]
	lea	rsi, [rsi]
	mov	rdi, rax
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.8
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x1c], eax
	lea	rdi, [rdi]
	call	gettext
	lea	rsi, [rsi]
	mov	rsi,  qword ptr [word ptr [stdout]]
	lea	rsi, [rsi]
	mov	rdi, rax
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.9
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], eax
	mov	rsp, rsp
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	lea	rdi, [rdi]
	call	fputs_unlocked
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.10
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x38], eax
	call	gettext
	mov	rbp, rbp
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.11
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 8], eax
	call	gettext
	nop	
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.12
	mov	dword ptr [rbp - 0x4c], eax
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rsp, rsp
	mov	rdi, rax
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.13
	mov	dword ptr [rbp - 0x18], eax
	call	gettext
	mov	rbp, rbp
	mov	rsi,  qword ptr [word ptr [stdout]]
	nop	
	mov	rdi, rax
	mov	rsp, rsp
	call	fputs_unlocked
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.14
	mov	dword ptr [rbp - 0x3c], eax
	lea	rdi, [rdi]
	call	gettext
	nop	
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	lea	rdi, [rdi]
	call	fputs_unlocked
	movabs	rdi, OFFSET FLAT:.str.15
	mov	dword ptr [rbp - 0xc], eax
	lea	rsi, [rsi]
	call	emit_ancillary_info
.label_9:
	nop	
	mov	edi, dword ptr [rbp - 0x10]
	nop	
	call	exit
	.section	.text
	.align	32
	#Procedure 0x401ca9
	.globl sub_401ca9
	.type sub_401ca9, @function
sub_401ca9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401cb0

	.globl emit_mandatory_arg_note
	.type emit_mandatory_arg_note, @function
emit_mandatory_arg_note:
	push	rbp
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x10
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.37
	call	gettext
	mov	rsp, rsp
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	nop	
	call	fputs_unlocked
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], eax
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x401ced
	.globl sub_401ced
	.type sub_401ced, @function
sub_401ced:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401cf0

	.globl emit_ancillary_info
	.type emit_ancillary_info, @function
emit_ancillary_info:
	push	rbp
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x50
	movabs	rax, OFFSET FLAT:emit_ancillary_info.infomap
	mov	qword ptr [rbp - 0x38], rdi
	mov	rdi, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x48], rdi
	nop	
	mov	qword ptr [rbp - 0x10], rax
.label_14:
	nop	
	xor	eax, eax
	mov	cl, al
	mov	rdx, qword ptr [rbp - 0x10]
	cmp	qword ptr [rdx], 0
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x11], cl
	je	.label_11
	mov	rdi, qword ptr [rbp - 0x38]
	mov	rax, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rax]
	call	strcmp
	cmp	eax, 0
	sete	cl
	nop	
	xor	cl, 0xff
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x11], cl
.label_11:
	mov	al, byte ptr [rbp - 0x11]
	test	al, 1
	nop	
	jne	.label_10
	jmp	.label_13
.label_10:
	mov	rax, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	add	rax, 0x10
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rax
	jmp	.label_14
.label_13:
	mov	rax, qword ptr [rbp - 0x10]
	cmp	qword ptr [rax + 8], 0
	je	.label_15
	nop	
	mov	rax, qword ptr [rbp - 0x10]
	nop	
	mov	rax, qword ptr [rax + 8]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x48], rax
.label_15:
	lea	rsi, [rsi]
	movabs	rdi, OFFSET FLAT:.str.46
	mov	rsp, rsp
	call	gettext
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.17
	movabs	rdx, OFFSET FLAT:.str.18
	nop	
	mov	rdi, rax
	lea	rdi, [rdi]
	mov	al, 0
	call	printf
	nop	
	mov	edi, 5
	nop	
	xor	ecx, ecx
	mov	rsp, rsp
	mov	esi, ecx
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x3c], eax
	mov	rbp, rbp
	call	setlocale
	mov	qword ptr [rbp - 0x20], rax
	cmp	qword ptr [rbp - 0x20], 0
	je	.label_12
	movabs	rsi, OFFSET FLAT:.str.48
	lea	rdi, [rdi]
	mov	eax, 3
	mov	edx, eax
	mov	rdi, qword ptr [rbp - 0x20]
	call	strncmp
	nop	
	cmp	eax, 0
	je	.label_12
	movabs	rdi, OFFSET FLAT:.str.49
	call	gettext
	lea	rdi, [rdi]
	mov	rsi,  qword ptr [word ptr [stdout]]
	nop	
	mov	rdi, rax
	call	fputs_unlocked
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x28], eax
.label_12:
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.50
	nop	
	call	gettext
	movabs	rsi, OFFSET FLAT:.str.18
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x38]
	mov	rdi, rax
	mov	al, 0
	call	printf
	movabs	rdi, OFFSET FLAT:.str.51
	mov	rbp, rbp
	mov	dword ptr [rbp - 4], eax
	call	gettext
	mov	rbp, rbp
	movabs	rdx, OFFSET FLAT:.str_0
	movabs	rsi, OFFSET FLAT:.str.52
	mov	rdi, qword ptr [rbp - 0x48]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x48]
	cmp	rcx, qword ptr [rbp - 0x38]
	cmove	rdx, rsi
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x30], rdi
	mov	rbp, rbp
	mov	rdi, rax
	mov	rsi, qword ptr [rbp - 0x30]
	mov	al, 0
	call	printf
	mov	dword ptr [rbp - 0x24], eax
	lea	rsi, [rsi]
	add	rsp, 0x50
	nop	
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x401ee7
	.globl sub_401ee7
	.type sub_401ee7, @function
sub_401ee7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401ef0

	.globl main
	.type main, @function
main:
	mov	rbp, rbp
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x120
	mov	dword ptr [rbp - 0x78], 0
	mov	dword ptr [rbp - 0x100], edi
	mov	qword ptr [rbp - 0xe0], rsi
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xe5], 0
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x79], 0
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], 0
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0xe0]
	mov	rbp, rbp
	mov	rdi, qword ptr [rsi]
	call	set_program_name
	mov	rbp, rbp
	mov	edi, 6
	nop	
	movabs	rsi, OFFSET FLAT:.str_0
	mov	rbp, rbp
	call	setlocale
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.17_0
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str.18_0
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x10], rax
	mov	rbp, rbp
	call	bindtextdomain
	movabs	rdi, OFFSET FLAT:.str.17_0
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	call	textdomain
	mov	rbp, rbp
	mov	edi, 0x7d
	mov	qword ptr [rbp - 0xc8], rax
	mov	rsp, rsp
	call	initialize_exit_failure
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:close_stdout
	mov	rsp, rsp
	call	atexit
	mov	dword ptr [rbp - 0xa4], eax
	lea	rsi, [rsi]
	call	initialize_signals
.label_81:
	movabs	rdx, OFFSET FLAT:shortopts
	movabs	rcx, OFFSET FLAT:longopts
	xor	eax, eax
	mov	r8d, eax
	mov	edi, dword ptr [rbp - 0x100]
	mov	rsi, qword ptr [rbp - 0xe0]
	call	getopt_long
	mov	dword ptr [rbp - 0xd8], eax
	cmp	eax, -1
	je	.label_19
	mov	eax, dword ptr [rbp - 0xd8]
	mov	ecx, eax
	lea	rsi, [rsi]
	sub	ecx, 0xffffff7d
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xf0], eax
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x104], ecx
	nop	
	je	.label_23
	jmp	.label_33
.label_33:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0xffffff7e
	mov	dword ptr [rbp - 0xb0], eax
	nop	
	je	.label_64
	jmp	.label_43
.label_43:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 9
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xd4], eax
	mov	rsp, rsp
	je	.label_45
	jmp	.label_52
.label_52:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x20
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x44], eax
	lea	rsi, [rsi]
	je	.label_45
	jmp	.label_56
.label_56:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0xf0]
	lea	rsi, [rsi]
	sub	eax, 0x30
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x94], eax
	je	.label_57
	jmp	.label_68
.label_68:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x43
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x5c], eax
	mov	rsp, rsp
	je	.label_59
	lea	rsi, [rsi]
	jmp	.label_75
.label_75:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x53
	mov	dword ptr [rbp - 0xfc], eax
	lea	rsi, [rsi]
	je	.label_78
	jmp	.label_17
.label_17:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0xf0]
	nop	
	sub	eax, 0x69
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xb8], eax
	je	.label_18
	nop	
	jmp	.label_25
.label_25:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0xf0]
	mov	rbp, rbp
	sub	eax, 0x75
	mov	dword ptr [rbp - 0xf4], eax
	je	.label_27
	mov	rsp, rsp
	jmp	.label_24
.label_24:
	nop	
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x76
	mov	dword ptr [rbp - 0x34], eax
	lea	rdi, [rdi]
	je	.label_31
	jmp	.label_41
.label_41:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x80
	mov	dword ptr [rbp - 0xac], eax
	je	.label_47
	jmp	.label_51
.label_51:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x81
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x6c], eax
	je	.label_53
	lea	rdi, [rdi]
	jmp	.label_60
.label_60:
	mov	eax, dword ptr [rbp - 0xf0]
	mov	rbp, rbp
	sub	eax, 0x82
	nop	
	mov	dword ptr [rbp - 0x38], eax
	mov	rsp, rsp
	je	.label_58
	jmp	.label_67
.label_67:
	mov	eax, dword ptr [rbp - 0xf0]
	sub	eax, 0x83
	nop	
	mov	dword ptr [rbp - 0x70], eax
	nop	
	je	.label_20
	jmp	.label_74
.label_18:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xe5], 1
	jmp	.label_16
.label_27:
	mov	rbp, rbp
	mov	rdi,  qword ptr [word ptr [optarg]]
	lea	rsi, [rsi]
	call	append_unset_var
	nop	
	jmp	.label_16
.label_31:
	nop	
	mov	byte ptr [byte ptr [dev_debug]],  1
	nop	
	jmp	.label_16
.label_57:
	mov	byte ptr [rbp - 0x79], 1
	jmp	.label_16
.label_47:
	lea	rdi, [rdi]
	mov	esi, 1
	mov	rdi,  qword ptr [word ptr [optarg]]
	lea	rdi, [rdi]
	call	parse_signal_action_params
	mov	rbp, rbp
	xor	esi, esi
	lea	rsi, [rsi]
	mov	rdi,  qword ptr [word ptr [optarg]]
	call	parse_block_signal_params
	jmp	.label_16
.label_53:
	xor	esi, esi
	lea	rdi, [rdi]
	mov	rdi,  qword ptr [word ptr [optarg]]
	call	parse_signal_action_params
	mov	rsp, rsp
	jmp	.label_16
.label_58:
	mov	esi, 1
	mov	rbp, rbp
	mov	rdi,  qword ptr [word ptr [optarg]]
	call	parse_block_signal_params
	nop	
	jmp	.label_16
.label_20:
	lea	rsi, [rsi]
	mov	byte ptr [byte ptr [report_signal_handling]],  1
	lea	rdi, [rdi]
	jmp	.label_16
.label_59:
	mov	rax,  qword ptr [word ptr [optarg]]
	mov	qword ptr [rbp - 8], rax
	mov	rbp, rbp
	jmp	.label_16
.label_78:
	movabs	rsi, OFFSET FLAT:optind
	lea	rdx, [rbp - 0x100]
	lea	rdi, [rdi]
	lea	rcx, [rbp - 0xe0]
	mov	rdi,  qword ptr [word ptr [optarg]]
	mov	rsp, rsp
	call	parse_split_string
	lea	rdi, [rdi]
	jmp	.label_16
.label_45:
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.19
	call	gettext
	lea	rsi, [rsi]
	xor	ecx, ecx
	mov	rsp, rsp
	mov	edx, dword ptr [rbp - 0xd8]
	mov	edi, ecx
	mov	rsp, rsp
	mov	esi, ecx
	mov	dword ptr [rbp - 0x98], edx
	mov	rdx, rax
	mov	rbp, rbp
	mov	ecx, dword ptr [rbp - 0x98]
	mov	rbp, rbp
	mov	al, 0
	call	error
	nop	
	movabs	rdi, OFFSET FLAT:.str.20
	lea	rsi, [rsi]
	call	gettext
	xor	ecx, ecx
	mov	edi, ecx
	lea	rsi, [rsi]
	mov	esi, ecx
	mov	rdx, rax
	mov	al, 0
	call	error
	mov	edi, 0x7d
	call	usage
.label_64:
	xor	edi, edi
	lea	rsi, [rsi]
	call	usage
.label_23:
	mov	rbp, rbp
	movabs	rsi, OFFSET FLAT:.str.15
	nop	
	movabs	rdx, OFFSET FLAT:.str.17
	movabs	r8, OFFSET FLAT:.str.22
	mov	rbp, rbp
	movabs	r9, OFFSET FLAT:.str.23
	movabs	rax, OFFSET FLAT:.str.24
	lea	rsi, [rsi]
	xor	ecx, ecx
	mov	edi, ecx
	nop	
	mov	r10,  qword ptr [word ptr [stdout]]
	mov	rcx,  qword ptr [word ptr [Version]]
	mov	qword ptr [rbp - 0x90], rdi
	mov	rsp, rsp
	mov	rdi, r10
	mov	rbp, rbp
	mov	qword ptr [rsp], rax
	mov	rsp, rsp
	mov	qword ptr [rsp + 8], 0
	mov	al, 0
	call	version_etc
	xor	edi, edi
	lea	rsi, [rsi]
	call	exit
.label_74:
	mov	edi, 0x7d
	mov	rbp, rbp
	call	usage
.label_16:
	jmp	.label_81
.label_19:
	lea	rdi, [rdi]
	mov	eax,  dword ptr [dword ptr [optind]]
	cmp	eax, dword ptr [rbp - 0x100]
	lea	rdi, [rdi]
	jge	.label_30
	lea	rsi, [rsi]
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rsp, rsp
	mov	rdi, qword ptr [rcx + rax*8]
	mov	edx, OFFSET FLAT:.str.25
	mov	rsp, rsp
	mov	esi, edx
	call	strcmp
	cmp	eax, 0
	lea	rdi, [rdi]
	jne	.label_30
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0xe5], 1
	mov	eax,  dword ptr [dword ptr [optind]]
	mov	rsp, rsp
	add	eax, 1
	lea	rsi, [rsi]
	mov	dword ptr [dword ptr [optind]],  eax
.label_30:
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0xe5], 1
	je	.label_42
	jmp	.label_49
.label_49:
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_50
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:.str.26
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	al, 0
	mov	rbp, rbp
	call	fprintf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x88], eax
.label_50:
	jmp	.label_61
.label_61:
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:main.dummy_environ
	nop	
	mov	qword ptr [word ptr [__environ]],  rax
	jmp	.label_62
.label_42:
	call	unset_envvars
.label_62:
	jmp	.label_34
.label_34:
	xor	eax, eax
	mov	cl, al
	mov	eax,  dword ptr [dword ptr [optind]]
	mov	rbp, rbp
	cmp	eax, dword ptr [rbp - 0x100]
	mov	byte ptr [rbp - 0xc9], cl
	jge	.label_73
	mov	esi, 0x3d
	mov	rbp, rbp
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rbp, rbp
	mov	rdi, qword ptr [rcx + rax*8]
	call	strchr
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x30], rax
	cmp	rax, 0
	mov	rbp, rbp
	setne	dl
	mov	byte ptr [rbp - 0xc9], dl
.label_73:
	nop	
	mov	al, byte ptr [rbp - 0xc9]
	test	al, 1
	lea	rdi, [rdi]
	jne	.label_21
	nop	
	jmp	.label_32
.label_21:
	mov	rsp, rsp
	jmp	.label_35
.label_35:
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_37
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.27
	lea	rdi, [rdi]
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rsp, rsp
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rdx, qword ptr [rcx + rax*8]
	lea	rsi, [rsi]
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0xf8], eax
.label_37:
	jmp	.label_54
.label_54:
	movsxd	rax,  dword ptr [dword ptr [optind]]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rdi, qword ptr [rcx + rax*8]
	call	putenv
	cmp	eax, 0
	lea	rdi, [rdi]
	je	.label_66
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	mov	byte ptr [rax], 0
	call	__errno_location
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.28
	mov	esi, dword ptr [rax]
	nop	
	mov	dword ptr [rbp - 0x24], esi
	mov	rbp, rbp
	call	gettext
	mov	rsp, rsp
	movsxd	rdi,  dword ptr [dword ptr [optind]]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rdi, qword ptr [rcx + rdi*8]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x20], rax
	nop	
	call	quote
	mov	rsp, rsp
	mov	edi, 0x7d
	mov	esi, dword ptr [rbp - 0x24]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 0x20]
	nop	
	mov	rcx, rax
	mov	al, 0
	call	error
.label_66:
	mov	rsp, rsp
	mov	eax,  dword ptr [dword ptr [optind]]
	add	eax, 1
	mov	rsp, rsp
	mov	dword ptr [dword ptr [optind]],  eax
	jmp	.label_34
.label_32:
	mov	rsp, rsp
	mov	eax,  dword ptr [dword ptr [optind]]
	cmp	eax, dword ptr [rbp - 0x100]
	mov	rsp, rsp
	setl	cl
	nop	
	and	cl, 1
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x11], cl
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x79], 1
	je	.label_39
	mov	rsp, rsp
	test	byte ptr [rbp - 0x11], 1
	je	.label_39
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.29
	call	gettext
	xor	ecx, ecx
	mov	edi, ecx
	mov	rsp, rsp
	mov	esi, ecx
	lea	rdi, [rdi]
	mov	rdx, rax
	lea	rsi, [rsi]
	mov	al, 0
	call	error
	mov	edi, 0x7d
	mov	rbp, rbp
	call	usage
.label_39:
	cmp	qword ptr [rbp - 8], 0
	lea	rsi, [rsi]
	je	.label_69
	test	byte ptr [rbp - 0x11], 1
	nop	
	jne	.label_69
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.30
	nop	
	call	gettext
	lea	rsi, [rsi]
	xor	ecx, ecx
	mov	rsp, rsp
	mov	edi, ecx
	mov	esi, ecx
	nop	
	mov	rdx, rax
	mov	al, 0
	mov	rsp, rsp
	call	error
	lea	rdi, [rdi]
	mov	edi, 0x7d
	nop	
	call	usage
.label_69:
	test	byte ptr [rbp - 0x11], 1
	jne	.label_22
	mov	rax,  qword ptr [word ptr [__environ]]
	mov	qword ptr [rbp - 0x58], rax
.label_40:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x58]
	cmp	qword ptr [rax], 0
	mov	rsp, rsp
	je	.label_29
	movabs	rdi, OFFSET FLAT:.str.31
	lea	rsi, [rsi]
	mov	eax, 0xa
	mov	rsp, rsp
	xor	ecx, ecx
	mov	rdx, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	mov	rsi, rdx
	mov	rsp, rsp
	add	rsi, 8
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x58], rsi
	mov	rsi, qword ptr [rdx]
	mov	r8b, byte ptr [rbp - 0x79]
	test	r8b, 1
	lea	rdi, [rdi]
	cmovne	eax, ecx
	mov	rbp, rbp
	mov	edx, eax
	mov	al, 0
	call	printf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xc0], eax
	jmp	.label_40
.label_29:
	mov	dword ptr [rbp - 0x78], 0
	lea	rdi, [rdi]
	jmp	.label_55
.label_22:
	lea	rsi, [rsi]
	call	reset_signal_handlers
	test	byte ptr [byte ptr [sig_mask_changed]],  1
	mov	rbp, rbp
	je	.label_63
	call	set_signal_proc_mask
.label_63:
	mov	rsp, rsp
	test	byte ptr [byte ptr [report_signal_handling]],  1
	lea	rdi, [rdi]
	je	.label_71
	nop	
	call	list_signal_handling
.label_71:
	cmp	qword ptr [rbp - 8], 0
	je	.label_72
	nop	
	jmp	.label_82
.label_82:
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_65
	lea	rdi, [rdi]
	mov	edi, 4
	mov	rax,  qword ptr [word ptr [stderr]]
	mov	rsi, qword ptr [rbp - 8]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0xa0], rax
	call	quotearg_style
	movabs	rsi, OFFSET FLAT:.str.32
	mov	rdi, qword ptr [rbp - 0xa0]
	nop	
	mov	rdx, rax
	mov	rsp, rsp
	mov	al, 0
	mov	rbp, rbp
	call	fprintf
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0xa8], eax
.label_65:
	lea	rsi, [rsi]
	jmp	.label_38
.label_38:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 8]
	mov	rbp, rbp
	call	chdir
	mov	rbp, rbp
	cmp	eax, 0
	lea	rdi, [rdi]
	je	.label_46
	call	__errno_location
	movabs	rdi, OFFSET FLAT:.str.33
	lea	rdi, [rdi]
	mov	esi, dword ptr [rax]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xbc], esi
	call	gettext
	lea	rdi, [rdi]
	mov	edi, 4
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 8]
	mov	qword ptr [rbp - 0x40], rax
	mov	rbp, rbp
	call	quotearg_style
	mov	edi, 0x7d
	mov	esi, dword ptr [rbp - 0xbc]
	mov	rdx, qword ptr [rbp - 0x40]
	mov	rcx, rax
	mov	al, 0
	call	error
.label_46:
	lea	rdi, [rdi]
	jmp	.label_72
.label_72:
	mov	rbp, rbp
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_26
	nop	
	jmp	.label_77
.label_77:
	test	byte ptr [byte ptr [dev_debug]],  1
	mov	rsp, rsp
	je	.label_80
	movabs	rsi, OFFSET FLAT:.str.34
	lea	rsi, [rsi]
	mov	rdi,  qword ptr [word ptr [stderr]]
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0xe0]
	nop	
	mov	rdx, qword ptr [rcx + rax*8]
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0x74], eax
.label_80:
	lea	rdi, [rdi]
	jmp	.label_28
.label_28:
	mov	eax,  dword ptr [dword ptr [optind]]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x84], eax
.label_83:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x84]
	mov	rsp, rsp
	cmp	eax, dword ptr [rbp - 0x100]
	lea	rsi, [rsi]
	jge	.label_36
	jmp	.label_44
.label_44:
	test	byte ptr [byte ptr [dev_debug]],  1
	nop	
	je	.label_48
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	eax, dword ptr [rbp - 0x84]
	sub	eax,  dword ptr [dword ptr [optind]]
	movsxd	rcx, dword ptr [rbp - 0x84]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0xe0]
	mov	rcx, qword ptr [rdx + rcx*8]
	mov	qword ptr [rbp - 0x68], rdi
	mov	rdi, rcx
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xb4], eax
	mov	rsp, rsp
	call	quote
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str.35
	mov	rdi, qword ptr [rbp - 0x68]
	mov	edx, dword ptr [rbp - 0xb4]
	lea	rdi, [rdi]
	mov	rcx, rax
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0xd0], eax
.label_48:
	jmp	.label_76
.label_76:
	jmp	.label_79
.label_79:
	mov	eax, dword ptr [rbp - 0x84]
	nop	
	add	eax, 1
	mov	dword ptr [rbp - 0x84], eax
	mov	rbp, rbp
	jmp	.label_83
.label_36:
	lea	rdi, [rdi]
	jmp	.label_26
.label_26:
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rbp, rbp
	mov	rdi, qword ptr [rcx + rax*8]
	movsxd	rax,  dword ptr [dword ptr [optind]]
	nop	
	shl	rax, 3
	mov	rsp, rsp
	add	rax, qword ptr [rbp - 0xe0]
	mov	rsi, rax
	mov	rbp, rbp
	call	execvp
	mov	dword ptr [rbp - 0xe4], eax
	mov	rbp, rbp
	call	__errno_location
	mov	rbp, rbp
	mov	edx, 0x7e
	mov	rsp, rsp
	mov	r8d, 0x7f
	mov	rsp, rsp
	cmp	dword ptr [rax], 2
	cmove	edx, r8d
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xec], edx
	mov	rbp, rbp
	call	__errno_location
	mov	esi, dword ptr [rax]
	mov	rbp, rbp
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rbp, rbp
	mov	rdi, qword ptr [rcx + rax*8]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x80], esi
	mov	rbp, rbp
	call	quote
	xor	edi, edi
	movabs	rdx, OFFSET FLAT:.str_1
	mov	esi, dword ptr [rbp - 0x80]
	mov	rcx, rax
	mov	rsp, rsp
	mov	al, 0
	nop	
	call	error
	nop	
	cmp	dword ptr [rbp - 0xec], 0x7f
	jne	.label_70
	mov	esi, 0x20
	mov	rsp, rsp
	movsxd	rax,  dword ptr [dword ptr [optind]]
	mov	rcx, qword ptr [rbp - 0xe0]
	mov	rdi, qword ptr [rcx + rax*8]
	call	strchr
	cmp	rax, 0
	je	.label_70
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.20
	call	gettext
	xor	ecx, ecx
	nop	
	mov	edi, ecx
	mov	rbp, rbp
	mov	esi, ecx
	mov	rdx, rax
	mov	rsp, rsp
	mov	al, 0
	mov	rbp, rbp
	call	error
.label_70:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0xec]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x78], eax
.label_55:
	mov	eax, dword ptr [rbp - 0x78]
	mov	rbp, rbp
	add	rsp, 0x120
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402b4c
	.globl sub_402b4c
	.type sub_402b4c, @function
sub_402b4c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x402b50

	.globl initialize_exit_failure
	.type initialize_exit_failure, @function
initialize_exit_failure:
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 4], edi
	cmp	dword ptr [rbp - 4], 1
	je	.label_84
	mov	eax, dword ptr [rbp - 4]
	nop	
	mov	dword ptr [dword ptr [exit_failure]],  eax
.label_84:
	lea	rdi, [rdi]
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x402b75
	.globl sub_402b75
	.type sub_402b75, @function
sub_402b75:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402b80

	.globl initialize_signals
	.type initialize_signals, @function
initialize_signals:
	push	rbp
	nop	
	mov	rbp, rsp
	sub	rsp, 0x10
	lea	rdi, [rdi]
	mov	eax, 0x104
	nop	
	mov	edi, eax
	lea	rsi, [rsi]
	call	xmalloc
	mov	qword ptr [word ptr [signals]],  rax
	nop	
	mov	dword ptr [rbp - 4], 0
.label_86:
	cmp	dword ptr [rbp - 4], 0x40
	jg	.label_85
	movsxd	rax, dword ptr [rbp - 4]
	mov	rcx,  qword ptr [word ptr [signals]]
	mov	dword ptr [rcx + rax*4], 0
	nop	
	mov	eax, dword ptr [rbp - 4]
	nop	
	add	eax, 1
	mov	rbp, rbp
	mov	dword ptr [rbp - 4], eax
	jmp	.label_86
.label_85:
	add	rsp, 0x10
	mov	rbp, rbp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402be5
	.globl sub_402be5
	.type sub_402be5, @function
sub_402be5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402bf0

	.globl append_unset_var
	.type append_unset_var, @function
append_unset_var:
	push	rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x10
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rdi
	mov	rdi,  qword ptr [word ptr [usvars_used]]
	cmp	rdi,  qword ptr [word ptr [usvars_alloc]]
	lea	rsi, [rsi]
	jne	.label_87
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:usvars_alloc
	mov	eax, 8
	nop	
	mov	edx, eax
	mov	rsp, rsp
	mov	rcx,  qword ptr [word ptr [usvars]]
	mov	rsp, rsp
	mov	rdi, rcx
	call	x2nrealloc
	mov	rsp, rsp
	mov	qword ptr [word ptr [usvars]],  rax
.label_87:
	mov	rax, qword ptr [rbp - 8]
	mov	rsp, rsp
	mov	rcx,  qword ptr [word ptr [usvars_used]]
	mov	rdx, rcx
	mov	rsp, rsp
	add	rdx, 1
	mov	rbp, rbp
	mov	qword ptr [word ptr [usvars_used]],  rdx
	mov	rdx,  qword ptr [word ptr [usvars]]
	lea	rsi, [rsi]
	mov	qword ptr [rdx + rcx*8], rax
	mov	rsp, rsp
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402c8d
	.globl sub_402c8d
	.type sub_402c8d, @function
sub_402c8d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x402c90

	.globl parse_signal_action_params
	.type parse_signal_action_params, @function
parse_signal_action_params:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x50
	lea	rdi, [rdi]
	mov	al, sil
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x48], rdi
	and	al, 1
	mov	byte ptr [rbp - 0x25], al
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x48], 0
	jne	.label_91
	mov	dword ptr [rbp - 0x2c], 1
.label_94:
	nop	
	cmp	dword ptr [rbp - 0x2c], 0x40
	mov	rbp, rbp
	jg	.label_97
	lea	rdi, [rdi]
	lea	rsi, [rbp - 0x20]
	mov	edi, dword ptr [rbp - 0x2c]
	call	sig2str
	lea	rsi, [rsi]
	cmp	eax, 0
	mov	rbp, rbp
	jne	.label_92
	mov	eax, 4
	mov	rbp, rbp
	mov	ecx, 2
	nop	
	mov	dl, byte ptr [rbp - 0x25]
	test	dl, 1
	mov	rbp, rbp
	cmovne	eax, ecx
	mov	rsp, rsp
	movsxd	rsi, dword ptr [rbp - 0x2c]
	lea	rdi, [rdi]
	mov	rdi,  qword ptr [word ptr [signals]]
	lea	rsi, [rsi]
	mov	dword ptr [rdi + rsi*4], eax
.label_92:
	mov	rbp, rbp
	jmp	.label_93
.label_93:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x2c]
	add	eax, 1
	mov	dword ptr [rbp - 0x2c], eax
	mov	rbp, rbp
	jmp	.label_94
.label_97:
	jmp	.label_96
.label_91:
	mov	rdi, qword ptr [rbp - 0x48]
	mov	rbp, rbp
	call	xstrdup
	movabs	rsi, OFFSET FLAT:.str.65
	mov	qword ptr [rbp - 0x38], rax
	mov	rdi, qword ptr [rbp - 0x38]
	call	strtok
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rax
.label_88:
	cmp	qword ptr [rbp - 8], 0
	mov	rbp, rbp
	je	.label_95
	lea	rsi, [rsi]
	lea	rsi, [rbp - 0x20]
	mov	rdi, qword ptr [rbp - 8]
	call	operand2sig
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x24], eax
	cmp	dword ptr [rbp - 0x24], 0
	mov	rbp, rbp
	jne	.label_89
	movabs	rdi, OFFSET FLAT:.str.1_0
	nop	
	call	gettext
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 8]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x40], rax
	call	quote
	nop	
	xor	ecx, ecx
	nop	
	mov	edi, ecx
	lea	rdi, [rdi]
	mov	esi, ecx
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x40]
	lea	rdi, [rdi]
	mov	rcx, rax
	lea	rdi, [rdi]
	mov	al, 0
	mov	rsp, rsp
	call	error
.label_89:
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x24], 0
	mov	rsp, rsp
	jg	.label_90
	mov	edi,  dword ptr [dword ptr [exit_failure]]
	call	usage
.label_90:
	lea	rsi, [rsi]
	xor	eax, eax
	mov	edi, eax
	movabs	rsi, OFFSET FLAT:.str.65
	nop	
	mov	eax, 3
	mov	rbp, rbp
	mov	ecx, 1
	mov	dl, byte ptr [rbp - 0x25]
	test	dl, 1
	nop	
	cmovne	eax, ecx
	lea	rdi, [rdi]
	movsxd	r8, dword ptr [rbp - 0x24]
	mov	rsp, rsp
	mov	r9,  qword ptr [word ptr [signals]]
	mov	dword ptr [r9 + r8*4], eax
	call	strtok
	mov	qword ptr [rbp - 8], rax
	jmp	.label_88
.label_95:
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x38]
	call	free
.label_96:
	mov	rbp, rbp
	add	rsp, 0x50
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402e5f
	.globl sub_402e5f
	.type sub_402e5f, @function
sub_402e5f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402e60

	.globl parse_block_signal_params
	.type parse_block_signal_params, @function
parse_block_signal_params:
	mov	rbp, rbp
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	sub	rsp, 0x60
	mov	al, sil
	mov	qword ptr [rbp - 0x40], rdi
	and	al, 1
	mov	byte ptr [rbp - 5], al
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x40], 0
	jne	.label_102
	movabs	rax, OFFSET FLAT:unblock_signals
	movabs	rcx, OFFSET FLAT:block_signals
	mov	dl, byte ptr [rbp - 5]
	mov	rsp, rsp
	test	dl, 1
	cmovne	rax, rcx
	mov	rsp, rsp
	mov	rdi, rax
	call	sigfillset
	lea	rdi, [rdi]
	movabs	rcx, OFFSET FLAT:block_signals
	movabs	rdi, OFFSET FLAT:unblock_signals
	mov	rsp, rsp
	mov	dl, byte ptr [rbp - 5]
	test	dl, 1
	lea	rdi, [rdi]
	cmovne	rcx, rdi
	mov	rdi, rcx
	mov	dword ptr [rbp - 0x24], eax
	mov	rsp, rsp
	call	sigemptyset
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x4c], eax
	jmp	.label_103
.label_102:
	mov	rsp, rsp
	test	byte ptr [byte ptr [sig_mask_changed]],  1
	jne	.label_106
	lea	rsi, [rsi]
	movabs	rdi, OFFSET FLAT:block_signals
	mov	rbp, rbp
	call	sigemptyset
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:unblock_signals
	mov	dword ptr [rbp - 0x34], eax
	lea	rsi, [rsi]
	call	sigemptyset
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], eax
.label_106:
	jmp	.label_103
.label_103:
	mov	byte ptr [byte ptr [sig_mask_changed]],  1
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x40], 0
	jne	.label_104
	jmp	.label_100
.label_104:
	mov	rdi, qword ptr [rbp - 0x40]
	call	xstrdup
	nop	
	movabs	rsi, OFFSET FLAT:.str.65
	mov	qword ptr [rbp - 0x58], rax
	nop	
	mov	rdi, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	call	strtok
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x48], rax
.label_101:
	cmp	qword ptr [rbp - 0x48], 0
	nop	
	je	.label_98
	nop	
	lea	rsi, [rbp - 0x20]
	mov	rdi, qword ptr [rbp - 0x48]
	lea	rsi, [rsi]
	call	operand2sig
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x28], eax
	nop	
	cmp	dword ptr [rbp - 0x28], 0
	lea	rdi, [rdi]
	jne	.label_99
	nop	
	movabs	rdi, OFFSET FLAT:.str.1_0
	lea	rsi, [rsi]
	call	gettext
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x48]
	mov	qword ptr [rbp - 0x30], rax
	call	quote
	lea	rdi, [rdi]
	xor	ecx, ecx
	mov	edi, ecx
	mov	esi, ecx
	mov	rdx, qword ptr [rbp - 0x30]
	mov	rcx, rax
	mov	rbp, rbp
	mov	al, 0
	call	error
.label_99:
	mov	rsp, rsp
	cmp	dword ptr [rbp - 0x28], 0
	jg	.label_105
	lea	rdi, [rdi]
	mov	edi,  dword ptr [dword ptr [exit_failure]]
	call	usage
.label_105:
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:unblock_signals
	movabs	rcx, OFFSET FLAT:block_signals
	mov	dl, byte ptr [rbp - 5]
	nop	
	test	dl, 1
	cmovne	rax, rcx
	mov	rsp, rsp
	mov	esi, dword ptr [rbp - 0x28]
	nop	
	mov	rdi, rax
	lea	rsi, [rsi]
	call	sigaddset
	movabs	rcx, OFFSET FLAT:block_signals
	nop	
	movabs	rdi, OFFSET FLAT:unblock_signals
	mov	dl, byte ptr [rbp - 5]
	nop	
	test	dl, 1
	cmovne	rcx, rdi
	mov	rsp, rsp
	mov	esi, dword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	rdi, rcx
	mov	dword ptr [rbp - 0x60], eax
	nop	
	call	sigdelset
	mov	rbp, rbp
	xor	esi, esi
	lea	rdi, [rdi]
	mov	edi, esi
	movabs	rsi, OFFSET FLAT:.str.65
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x5c], eax
	call	strtok
	mov	qword ptr [rbp - 0x48], rax
	jmp	.label_101
.label_98:
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x58]
	lea	rdi, [rdi]
	call	free
.label_100:
	nop	
	add	rsp, 0x60
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4030b8
	.globl sub_4030b8
	.type sub_4030b8, @function
sub_4030b8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4030c0

	.globl parse_split_string
	.type parse_split_string, @function
parse_split_string:
	mov	rbp, rbp
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x70
	mov	qword ptr [rbp - 0x30], rdi
	mov	qword ptr [rbp - 0x38], rsi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x40], rdx
	nop	
	mov	qword ptr [rbp - 0x48], rcx
.label_120:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x30]
	lea	rsi, [rsi]
	movsx	ecx, byte ptr [rax]
	movsxd	rax, ecx
	mov	qword ptr [rbp - 8], rax
	call	__ctype_b_loc
	lea	rsi, [rsi]
	mov	rax, qword ptr [rax]
	nop	
	mov	rdx, qword ptr [rbp - 8]
	movzx	ecx, word ptr [rax + rdx*2]
	and	ecx, 0x2000
	cmp	ecx, 0
	je	.label_125
	mov	rax, qword ptr [rbp - 0x30]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x30], rax
	jmp	.label_120
.label_125:
	mov	rax, qword ptr [rbp - 0x30]
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 0
	jne	.label_116
	mov	rbp, rbp
	jmp	.label_129
.label_116:
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x40]
	mov	ecx, dword ptr [rax]
	mov	rax, qword ptr [rbp - 0x38]
	mov	rsp, rsp
	sub	ecx, dword ptr [rax]
	lea	rdi, [rdi]
	mov	esi, ecx
	mov	rsp, rsp
	call	build_argv
	mov	qword ptr [rbp - 0x10], rax
	mov	rax, qword ptr [rbp - 0x48]
	mov	rax, qword ptr [rax]
	mov	rax, qword ptr [rax]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x10]
	mov	qword ptr [rdi], rax
	mov	rax, qword ptr [rbp - 0x10]
	nop	
	add	rax, 8
	nop	
	mov	qword ptr [rbp - 0x50], rax
	test	byte ptr [byte ptr [dev_debug]],  1
	nop	
	je	.label_122
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	cmp	qword ptr [rax], 0
	lea	rsi, [rsi]
	je	.label_122
	lea	rsi, [rsi]
	jmp	.label_126
.label_126:
	nop	
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_128
	nop	
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x30]
	mov	qword ptr [rbp - 0x28], rdi
	lea	rdi, [rdi]
	mov	rdi, rax
	mov	rsp, rsp
	call	quote
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:.str.67
	mov	rdi, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	rdx, rax
	mov	al, 0
	call	fprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x54], eax
.label_128:
	jmp	.label_114
.label_114:
	lea	rdi, [rdi]
	jmp	.label_118
.label_118:
	test	byte ptr [byte ptr [dev_debug]],  1
	lea	rsi, [rsi]
	je	.label_127
	mov	rbp, rbp
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, rax
	add	rcx, 8
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rcx
	mov	rax, qword ptr [rax]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x60], rdi
	lea	rdi, [rdi]
	mov	rdi, rax
	call	quote
	movabs	rsi, OFFSET FLAT:.str.68
	mov	rdi, qword ptr [rbp - 0x60]
	mov	rbp, rbp
	mov	rdx, rax
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0x6c], eax
.label_127:
	jmp	.label_107
.label_107:
	lea	rdi, [rdi]
	jmp	.label_110
.label_110:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	cmp	qword ptr [rax], 0
	je	.label_113
	lea	rsi, [rsi]
	jmp	.label_124
.label_124:
	nop	
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_123
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, rax
	add	rcx, 8
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x50], rcx
	lea	rdi, [rdi]
	mov	rax, qword ptr [rax]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x20], rdi
	mov	rdi, rax
	call	quote
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.69
	mov	rdi, qword ptr [rbp - 0x20]
	mov	rdx, rax
	nop	
	mov	al, 0
	call	fprintf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x14], eax
.label_123:
	jmp	.label_109
.label_109:
	jmp	.label_110
.label_113:
	jmp	.label_112
.label_122:
	nop	
	jmp	.label_115
.label_115:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	qword ptr [rax], 0
	lea	rdi, [rdi]
	je	.label_119
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 8
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_115
.label_119:
	mov	rbp, rbp
	jmp	.label_112
.label_112:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x38]
	mov	rsp, rsp
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rbp - 0x64], ecx
.label_121:
	mov	eax, dword ptr [rbp - 0x64]
	mov	rcx, qword ptr [rbp - 0x40]
	cmp	eax, dword ptr [rcx]
	jge	.label_117
	movsxd	rax, dword ptr [rbp - 0x64]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0x48]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rcx]
	lea	rsi, [rsi]
	mov	rax, qword ptr [rcx + rax*8]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	mov	rdx, rcx
	nop	
	add	rdx, 8
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x50], rdx
	mov	qword ptr [rcx], rax
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x64]
	add	eax, 1
	mov	dword ptr [rbp - 0x64], eax
	jmp	.label_121
.label_117:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	qword ptr [rax], 0
	mov	dword ptr [rbp - 0x68], 0
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x50], rax
.label_108:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	cmp	qword ptr [rax], 0
	je	.label_111
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0x68]
	add	eax, 1
	mov	dword ptr [rbp - 0x68], eax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 8
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_108
.label_111:
	mov	eax, dword ptr [rbp - 0x68]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0x40]
	mov	dword ptr [rcx], eax
	mov	rcx, qword ptr [rbp - 0x10]
	mov	rdx, qword ptr [rbp - 0x48]
	nop	
	mov	qword ptr [rdx], rcx
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x38]
	mov	dword ptr [rcx], 0
.label_129:
	mov	rsp, rsp
	add	rsp, 0x70
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403438
	.globl sub_403438
	.type sub_403438, @function
sub_403438:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403440

	.globl unset_envvars
	.type unset_envvars, @function
unset_envvars:
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	sub	rsp, 0x20
	mov	qword ptr [rbp - 0x18], 0
.label_131:
	mov	rax, qword ptr [rbp - 0x18]
	mov	rsp, rsp
	cmp	rax,  qword ptr [word ptr [usvars_used]]
	lea	rdi, [rdi]
	jae	.label_130
	mov	rbp, rbp
	jmp	.label_133
.label_133:
	nop	
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_134
	movabs	rsi, OFFSET FLAT:.str.84
	nop	
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rax, qword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	mov	rcx,  qword ptr [word ptr [usvars]]
	lea	rdi, [rdi]
	mov	rdx, qword ptr [rcx + rax*8]
	lea	rdi, [rdi]
	mov	al, 0
	call	fprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 4], eax
.label_134:
	jmp	.label_135
.label_135:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x18]
	mov	rcx,  qword ptr [word ptr [usvars]]
	mov	rsp, rsp
	mov	rdi, qword ptr [rcx + rax*8]
	mov	rsp, rsp
	call	unsetenv
	mov	rsp, rsp
	cmp	eax, 0
	je	.label_136
	mov	rbp, rbp
	call	__errno_location
	movabs	rdi, OFFSET FLAT:.str.85
	lea	rdi, [rdi]
	mov	esi, dword ptr [rax]
	mov	dword ptr [rbp - 8], esi
	call	gettext
	mov	rdi, qword ptr [rbp - 0x18]
	nop	
	mov	rcx,  qword ptr [word ptr [usvars]]
	mov	rdi, qword ptr [rcx + rdi*8]
	mov	qword ptr [rbp - 0x10], rax
	mov	rbp, rbp
	call	quote
	mov	edi, 0x7d
	mov	rbp, rbp
	mov	esi, dword ptr [rbp - 8]
	mov	rdx, qword ptr [rbp - 0x10]
	nop	
	mov	rcx, rax
	mov	al, 0
	nop	
	call	error
.label_136:
	jmp	.label_132
.label_132:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x18]
	add	rax, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], rax
	jmp	.label_131
.label_130:
	add	rsp, 0x20
	lea	rdi, [rdi]
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x403567
	.globl sub_403567
	.type sub_403567, @function
sub_403567:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403570

	.globl reset_signal_handlers
	.type reset_signal_handlers, @function
reset_signal_handlers:
	nop	
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0xe0
	mov	dword ptr [rbp - 0xdc], 1
.label_137:
	cmp	dword ptr [rbp - 0xdc], 0x40
	lea	rdi, [rdi]
	jg	.label_141
	movsxd	rax, dword ptr [rbp - 0xdc]
	mov	rcx,  qword ptr [word ptr [signals]]
	nop	
	cmp	dword ptr [rcx + rax*4], 0
	jne	.label_145
	mov	rsp, rsp
	jmp	.label_139
.label_145:
	mov	al, 1
	movsxd	rcx, dword ptr [rbp - 0xdc]
	mov	rdx,  qword ptr [word ptr [signals]]
	nop	
	cmp	dword ptr [rdx + rcx*4], 2
	mov	byte ptr [rbp - 0xd1], al
	je	.label_148
	movsxd	rax, dword ptr [rbp - 0xdc]
	mov	rsp, rsp
	mov	rcx,  qword ptr [word ptr [signals]]
	lea	rdi, [rdi]
	cmp	dword ptr [rcx + rax*4], 4
	nop	
	sete	dl
	mov	byte ptr [rbp - 0xd1], dl
.label_148:
	mov	al, byte ptr [rbp - 0xd1]
	mov	cl, 1
	and	al, 1
	mov	byte ptr [rbp - 0x9d], al
	lea	rdi, [rdi]
	movsxd	rdx, dword ptr [rbp - 0xdc]
	lea	rdi, [rdi]
	mov	rsi,  qword ptr [word ptr [signals]]
	mov	rsp, rsp
	cmp	dword ptr [rsi + rdx*4], 1
	mov	byte ptr [rbp - 0x9e], cl
	lea	rsi, [rsi]
	je	.label_138
	movsxd	rax, dword ptr [rbp - 0xdc]
	mov	rbp, rbp
	mov	rcx,  qword ptr [word ptr [signals]]
	lea	rsi, [rsi]
	cmp	dword ptr [rcx + rax*4], 2
	sete	dl
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x9e], dl
.label_138:
	mov	al, byte ptr [rbp - 0x9e]
	xor	ecx, ecx
	lea	rdi, [rdi]
	mov	esi, ecx
	mov	rsp, rsp
	lea	rdx, [rbp - 0x98]
	lea	rsi, [rsi]
	and	al, 1
	nop	
	mov	byte ptr [rbp - 0x9f], al
	mov	edi, dword ptr [rbp - 0xdc]
	call	sigaction
	mov	dword ptr [rbp - 0x9c], eax
	cmp	dword ptr [rbp - 0x9c], 0
	mov	rsp, rsp
	je	.label_143
	mov	rbp, rbp
	test	byte ptr [rbp - 0x9d], 1
	lea	rsi, [rsi]
	jne	.label_143
	call	__errno_location
	movabs	rdi, OFFSET FLAT:.str.86
	nop	
	mov	esi, dword ptr [rax]
	nop	
	mov	dword ptr [rbp - 0xb0], esi
	call	gettext
	mov	edi, 0x7d
	mov	ecx, dword ptr [rbp - 0xdc]
	mov	esi, dword ptr [rbp - 0xb0]
	mov	rsp, rsp
	mov	rdx, rax
	mov	al, 0
	call	error
.label_143:
	cmp	dword ptr [rbp - 0x9c], 0
	mov	rsp, rsp
	jne	.label_140
	mov	rsp, rsp
	lea	rsi, [rbp - 0x98]
	xor	eax, eax
	mov	rsp, rsp
	mov	ecx, eax
	lea	rsi, [rsi]
	mov	eax, 1
	lea	rdi, [rdi]
	mov	edx, eax
	nop	
	mov	dil, byte ptr [rbp - 0x9f]
	nop	
	test	dil, 1
	lea	rsi, [rsi]
	cmovne	rdx, rcx
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x98], rdx
	nop	
	mov	edi, dword ptr [rbp - 0xdc]
	mov	rdx, rcx
	mov	rbp, rbp
	call	sigaction
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x9c], eax
	mov	rsp, rsp
	cmp	eax, 0
	lea	rsi, [rsi]
	je	.label_144
	test	byte ptr [rbp - 0x9d], 1
	lea	rdi, [rdi]
	jne	.label_144
	lea	rdi, [rdi]
	call	__errno_location
	movabs	rdi, OFFSET FLAT:.str.87
	lea	rsi, [rsi]
	mov	esi, dword ptr [rax]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xac], esi
	call	gettext
	mov	edi, 0x7d
	mov	rbp, rbp
	mov	ecx, dword ptr [rbp - 0xdc]
	lea	rsi, [rsi]
	mov	esi, dword ptr [rbp - 0xac]
	nop	
	mov	rdx, rax
	nop	
	mov	al, 0
	lea	rsi, [rsi]
	call	error
.label_144:
	jmp	.label_140
.label_140:
	test	byte ptr [byte ptr [dev_debug]],  1
	nop	
	je	.label_142
	lea	rsi, [rbp - 0xd0]
	mov	edi, dword ptr [rbp - 0xdc]
	lea	rsi, [rsi]
	call	sig2str
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xe0], eax
	test	byte ptr [byte ptr [dev_debug]],  1
	mov	rsp, rsp
	je	.label_146
	movabs	rsi, OFFSET FLAT:.str.88
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:.str_0
	nop	
	movabs	rcx, OFFSET FLAT:.str.91
	movabs	rdx, OFFSET FLAT:.str.90
	nop	
	movabs	rdi, OFFSET FLAT:.str.89
	lea	r8, [rbp - 0xd0]
	mov	r9,  qword ptr [word ptr [stderr]]
	lea	rdi, [rdi]
	mov	r10d, dword ptr [rbp - 0xdc]
	nop	
	mov	r11b, byte ptr [rbp - 0x9f]
	test	r11b, 1
	mov	rsp, rsp
	cmovne	rdx, rdi
	cmp	dword ptr [rbp - 0x9c], 0
	cmovne	rax, rcx
	mov	rdi, r9
	mov	rbp, rbp
	mov	qword ptr [rbp - 0xa8], rdx
	mov	rdx, r8
	mov	ecx, r10d
	mov	r8, qword ptr [rbp - 0xa8]
	mov	rsp, rsp
	mov	r9, rax
	nop	
	mov	al, 0
	mov	rbp, rbp
	call	fprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xd8], eax
.label_146:
	mov	rbp, rbp
	jmp	.label_147
.label_147:
	jmp	.label_142
.label_142:
	mov	rbp, rbp
	jmp	.label_139
.label_139:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0xdc]
	lea	rsi, [rsi]
	add	eax, 1
	mov	dword ptr [rbp - 0xdc], eax
	lea	rsi, [rsi]
	jmp	.label_137
.label_141:
	mov	rsp, rsp
	add	rsp, 0xe0
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4038ea
	.globl sub_4038ea
	.type sub_4038ea, @function
sub_4038ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4038f0

	.globl set_signal_proc_mask
	.type set_signal_proc_mask, @function
set_signal_proc_mask:
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	sub	rsp, 0xd0
	lea	rdi, [rdi]
	lea	rdi, [rbp - 0x88]
	mov	rbp, rbp
	call	sigemptyset
	lea	rdi, [rdi]
	xor	edi, edi
	mov	rsp, rsp
	xor	ecx, ecx
	nop	
	mov	esi, ecx
	lea	rdx, [rbp - 0x88]
	nop	
	mov	dword ptr [rbp - 0xac], eax
	nop	
	call	sigprocmask
	cmp	eax, 0
	je	.label_159
	call	__errno_location
	nop	
	movabs	rdi, OFFSET FLAT:.str.92
	nop	
	mov	esi, dword ptr [rax]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xa8], esi
	call	gettext
	mov	edi, 0x7d
	mov	esi, dword ptr [rbp - 0xa8]
	mov	rdx, rax
	mov	rsp, rsp
	mov	al, 0
	call	error
.label_159:
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xbc], 1
.label_158:
	cmp	dword ptr [rbp - 0xbc], 0x40
	mov	rsp, rsp
	jg	.label_149
	movabs	rdi, OFFSET FLAT:block_signals
	lea	rsi, [rsi]
	mov	esi, dword ptr [rbp - 0xbc]
	call	sigismember
	lea	rsi, [rsi]
	cmp	eax, 0
	je	.label_156
	lea	rdi, [rbp - 0x88]
	mov	rsp, rsp
	mov	esi, dword ptr [rbp - 0xbc]
	call	sigaddset
	movabs	rdi, OFFSET FLAT:.str.93
	mov	qword ptr [rbp - 0xb8], rdi
	mov	dword ptr [rbp - 0xb0], eax
	nop	
	jmp	.label_150
.label_156:
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:unblock_signals
	mov	esi, dword ptr [rbp - 0xbc]
	call	sigismember
	cmp	eax, 0
	mov	rsp, rsp
	je	.label_160
	nop	
	lea	rdi, [rbp - 0x88]
	mov	esi, dword ptr [rbp - 0xbc]
	call	sigdelset
	movabs	rdi, OFFSET FLAT:.str.94
	mov	rbp, rbp
	mov	qword ptr [rbp - 0xb8], rdi
	mov	dword ptr [rbp - 0xc0], eax
	lea	rsi, [rsi]
	jmp	.label_154
.label_160:
	nop	
	mov	qword ptr [rbp - 0xb8], 0
.label_154:
	nop	
	jmp	.label_150
.label_150:
	lea	rsi, [rsi]
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_151
	cmp	qword ptr [rbp - 0xb8], 0
	nop	
	je	.label_151
	lea	rsi, [rbp - 0xa0]
	mov	edi, dword ptr [rbp - 0xbc]
	call	sig2str
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0xc4], eax
	test	byte ptr [byte ptr [dev_debug]],  1
	lea	rsi, [rsi]
	je	.label_152
	movabs	rsi, OFFSET FLAT:.str.95
	lea	rdx, [rbp - 0xa0]
	mov	rdi,  qword ptr [word ptr [stderr]]
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rbp - 0xbc]
	lea	rsi, [rsi]
	mov	r8, qword ptr [rbp - 0xb8]
	mov	al, 0
	mov	rbp, rbp
	call	fprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xa4], eax
.label_152:
	mov	rbp, rbp
	jmp	.label_153
.label_153:
	jmp	.label_151
.label_151:
	jmp	.label_157
.label_157:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0xbc]
	add	eax, 1
	mov	dword ptr [rbp - 0xbc], eax
	lea	rdi, [rdi]
	jmp	.label_158
.label_149:
	mov	edi, 2
	lea	rsi, [rbp - 0x88]
	xor	eax, eax
	mov	rsp, rsp
	mov	edx, eax
	call	sigprocmask
	cmp	eax, 0
	lea	rsi, [rsi]
	je	.label_155
	call	__errno_location
	mov	rsp, rsp
	movabs	rdi, OFFSET FLAT:.str.96
	mov	esi, dword ptr [rax]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], esi
	call	gettext
	mov	edi, 0x7d
	mov	esi, dword ptr [rbp - 4]
	lea	rdi, [rdi]
	mov	rdx, rax
	nop	
	mov	al, 0
	call	error
.label_155:
	nop	
	add	rsp, 0xd0
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403b6b
	.globl sub_403b6b
	.type sub_403b6b, @function
sub_403b6b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403b70

	.globl list_signal_handling
	.type list_signal_handling, @function
list_signal_handling:
	nop	
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x180
	lea	rsi, [rsi]
	lea	rdi, [rbp - 0xb0]
	mov	rsp, rsp
	call	sigemptyset
	xor	edi, edi
	mov	rsp, rsp
	xor	ecx, ecx
	lea	rdi, [rdi]
	mov	esi, ecx
	lea	rdx, [rbp - 0xb0]
	mov	dword ptr [rbp - 0x28], eax
	call	sigprocmask
	cmp	eax, 0
	mov	rbp, rbp
	je	.label_165
	call	__errno_location
	movabs	rdi, OFFSET FLAT:.str.92
	mov	esi, dword ptr [rax]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc4], esi
	call	gettext
	nop	
	mov	edi, 0x7d
	mov	esi, dword ptr [rbp - 0xc4]
	lea	rsi, [rsi]
	mov	rdx, rax
	mov	rsp, rsp
	mov	al, 0
	mov	rbp, rbp
	call	error
.label_165:
	mov	dword ptr [rbp - 0x24], 1
.label_166:
	cmp	dword ptr [rbp - 0x24], 0x40
	mov	rsp, rsp
	jg	.label_163
	lea	rsi, [rsi]
	xor	eax, eax
	nop	
	mov	esi, eax
	lea	rsi, [rsi]
	lea	rdx, [rbp - 0x168]
	mov	edi, dword ptr [rbp - 0x24]
	mov	rbp, rbp
	call	sigaction
	cmp	eax, 0
	je	.label_164
	jmp	.label_161
.label_164:
	lea	rdi, [rbp - 0xb0]
	mov	rsp, rsp
	mov	eax, 1
	mov	ecx, eax
	movabs	rdx, OFFSET FLAT:.str_0
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:.str.90
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x168], rcx
	lea	rdi, [rdi]
	cmove	rdx, rsi
	mov	qword ptr [rbp - 0xd0], rdx
	mov	esi, dword ptr [rbp - 0x24]
	mov	rsp, rsp
	call	sigismember
	lea	rsi, [rsi]
	xor	esi, esi
	mov	rbp, rbp
	mov	r8b, sil
	nop	
	movabs	rcx, OFFSET FLAT:.str_0
	mov	rsp, rsp
	movabs	rdx, OFFSET FLAT:.str.93
	cmp	eax, 0
	lea	rsi, [rsi]
	cmovne	rcx, rdx
	mov	qword ptr [rbp - 0x170], rcx
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0xd0]
	movsx	eax, byte ptr [rcx]
	cmp	eax, 0
	mov	byte ptr [rbp - 0xbd], r8b
	lea	rdi, [rdi]
	je	.label_167
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x170]
	movsx	ecx, byte ptr [rax]
	nop	
	cmp	ecx, 0
	setne	dl
	mov	byte ptr [rbp - 0xbd], dl
.label_167:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 0xbd]
	lea	rsi, [rsi]
	movabs	rcx, OFFSET FLAT:.str_0
	movabs	rdx, OFFSET FLAT:.str.65
	lea	rsi, [rsi]
	test	al, 1
	nop	
	cmovne	rcx, rdx
	mov	qword ptr [rbp - 0xb8], rcx
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0xd0]
	mov	rbp, rbp
	cmp	byte ptr [rcx], 0
	jne	.label_162
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x170]
	mov	rbp, rbp
	cmp	byte ptr [rax], 0
	jne	.label_162
	mov	rbp, rbp
	jmp	.label_161
.label_162:
	lea	rsi, [rbp - 0x20]
	mov	rbp, rbp
	mov	edi, dword ptr [rbp - 0x24]
	mov	rbp, rbp
	call	sig2str
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.97
	mov	rsp, rsp
	lea	rdx, [rbp - 0x20]
	lea	rdi, [rdi]
	mov	rdi,  qword ptr [word ptr [stderr]]
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rbp - 0x24]
	mov	r8, qword ptr [rbp - 0x170]
	mov	rbp, rbp
	mov	r9, qword ptr [rbp - 0xb8]
	mov	rbp, rbp
	mov	r10, qword ptr [rbp - 0xd0]
	mov	qword ptr [rsp], r10
	mov	dword ptr [rbp - 0x2c], eax
	lea	rsi, [rsi]
	mov	al, 0
	lea	rdi, [rdi]
	call	fprintf
	mov	dword ptr [rbp - 0xbc], eax
.label_161:
	mov	eax, dword ptr [rbp - 0x24]
	lea	rsi, [rsi]
	add	eax, 1
	mov	dword ptr [rbp - 0x24], eax
	jmp	.label_166
.label_163:
	add	rsp, 0x180
	nop	
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403dda
	.globl sub_403dda
	.type sub_403dda, @function
sub_403dda:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403de0

	.globl build_argv
	.type build_argv, @function
build_argv:
	mov	rsp, rsp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0xb0
	mov	qword ptr [rbp - 0x38], rdi
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x2c], esi
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x49], 0
	mov	byte ptr [rbp - 0x59], 0
	mov	byte ptr [rbp - 0x1d], 1
	mov	dword ptr [rbp - 0x90], 0
	nop	
	mov	qword ptr [rbp - 8], 0
	cmp	qword ptr [rbp - 0x38], 0
	lea	rsi, [rsi]
	je	.label_182
	nop	
	mov	rax, qword ptr [rbp - 0x38]
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 0
	mov	rsp, rsp
	je	.label_182
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x38]
	nop	
	movsx	ecx, byte ptr [rax]
	lea	rsi, [rsi]
	movsxd	rax, ecx
	mov	qword ptr [rbp - 0x28], rax
	nop	
	call	__ctype_b_loc
	mov	rsp, rsp
	mov	rax, qword ptr [rax]
	mov	rdx, qword ptr [rbp - 0x28]
	movzx	ecx, word ptr [rax + rdx*2]
	lea	rsi, [rsi]
	and	ecx, 0x2000
	lea	rdi, [rdi]
	cmp	ecx, 0
	jne	.label_182
	jmp	.label_194
.label_182:
	lea	rsi, [rsi]
	movabs	rdi, OFFSET FLAT:.str.70
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str.71
	mov	edx, 0x18b
	mov	rsp, rsp
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.build_argv
	call	__assert_fail
.label_194:
	lea	rsi, [rbp - 8]
	nop	
	lea	rdx, [rbp - 0x90]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x38]
	lea	rsi, [rsi]
	call	validate_split_str
	lea	rdi, [rdi]
	mov	rdx, qword ptr [rbp - 8]
	lea	rdi, [rdi]
	add	rdx, 6
	lea	rsi, [rsi]
	add	rdx, 1
	mov	rsp, rsp
	mov	rdi, rdx
	call	xmalloc
	mov	qword ptr [rbp - 0x58], rax
	lea	rsi, [rsi]
	mov	ecx, dword ptr [rbp - 0x90]
	add	ecx, dword ptr [rbp - 0x2c]
	add	ecx, 2
	nop	
	movsxd	rax, ecx
	shl	rax, 3
	mov	rdi, rax
	call	xmalloc
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rax
	mov	qword ptr [rbp - 0x18], rax
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x58]
	mov	ecx, OFFSET FLAT:.str.72
	mov	esi, ecx
	call	strcpy
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x18]
	lea	rdi, [rdi]
	mov	rdi, rsi
	nop	
	add	rdi, 8
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], rdi
	mov	rsp, rsp
	mov	qword ptr [rsi], rdx
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 0x58]
	mov	rsp, rsp
	add	rdx, 6
	mov	qword ptr [rbp - 0x58], rdx
	mov	qword ptr [rbp - 0x68], rax
.label_186:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x38]
	cmp	byte ptr [rax], 0
	je	.label_189
	mov	rax, qword ptr [rbp - 0x38]
	lea	rsi, [rsi]
	mov	cl, byte ptr [rax]
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x69], cl
	mov	rax, qword ptr [rbp - 0x38]
	nop	
	movsx	edx, byte ptr [rax]
	mov	esi, edx
	nop	
	sub	esi, 9
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x30], edx
	mov	dword ptr [rbp - 0xa4], esi
	je	.label_193
	lea	rsi, [rsi]
	jmp	.label_202
.label_202:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x30]
	mov	rbp, rbp
	sub	eax, 0x20
	mov	dword ptr [rbp - 0x40], eax
	nop	
	je	.label_193
	lea	rsi, [rsi]
	jmp	.label_206
.label_206:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x30]
	lea	rdi, [rdi]
	sub	eax, 0x22
	mov	dword ptr [rbp - 0x8c], eax
	lea	rsi, [rsi]
	je	.label_208
	jmp	.label_212
.label_212:
	mov	eax, dword ptr [rbp - 0x30]
	mov	rbp, rbp
	sub	eax, 0x23
	nop	
	mov	dword ptr [rbp - 0x1c], eax
	lea	rsi, [rsi]
	je	.label_213
	nop	
	jmp	.label_169
.label_169:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0x30]
	mov	rbp, rbp
	sub	eax, 0x24
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x7c], eax
	nop	
	je	.label_171
	jmp	.label_179
.label_179:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x30]
	sub	eax, 0x27
	mov	dword ptr [rbp - 0xa0], eax
	mov	rsp, rsp
	je	.label_181
	jmp	.label_184
.label_184:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x30]
	sub	eax, 0x5c
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x9c], eax
	mov	rbp, rbp
	je	.label_185
	mov	rsp, rsp
	jmp	.label_172
.label_181:
	test	byte ptr [rbp - 0x49], 1
	lea	rdi, [rdi]
	je	.label_188
	mov	rbp, rbp
	jmp	.label_172
.label_188:
	mov	al, byte ptr [rbp - 0x59]
	xor	al, 0xff
	mov	rbp, rbp
	and	al, 1
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x59], al
	mov	rsp, rsp
	test	byte ptr [rbp - 0x1d], 1
	lea	rsi, [rsi]
	je	.label_195
	mov	rax, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	mov	rcx, rax
	nop	
	add	rcx, 1
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x58], rcx
	lea	rsi, [rsi]
	mov	byte ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x58]
	mov	rcx, qword ptr [rbp - 0x18]
	mov	rdx, rcx
	lea	rsi, [rsi]
	add	rdx, 8
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x18], rdx
	lea	rdi, [rdi]
	mov	qword ptr [rcx], rax
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x1d], 0
.label_195:
	jmp	.label_174
.label_174:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x38]
	lea	rsi, [rsi]
	add	rax, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x38], rax
	jmp	.label_186
.label_208:
	test	byte ptr [rbp - 0x59], 1
	mov	rbp, rbp
	je	.label_217
	lea	rsi, [rsi]
	jmp	.label_172
.label_217:
	mov	al, byte ptr [rbp - 0x49]
	mov	rsp, rsp
	xor	al, 0xff
	nop	
	and	al, 1
	mov	byte ptr [rbp - 0x49], al
	test	byte ptr [rbp - 0x1d], 1
	lea	rdi, [rdi]
	je	.label_175
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x58]
	mov	rsp, rsp
	mov	rcx, rax
	mov	rsp, rsp
	add	rcx, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x58], rcx
	lea	rsi, [rsi]
	mov	byte ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x58]
	nop	
	mov	rcx, qword ptr [rbp - 0x18]
	mov	rdx, rcx
	add	rdx, 8
	mov	qword ptr [rbp - 0x18], rdx
	mov	qword ptr [rcx], rax
	mov	byte ptr [rbp - 0x1d], 0
.label_175:
	mov	rsp, rsp
	jmp	.label_190
.label_190:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x38]
	nop	
	add	rax, 1
	mov	qword ptr [rbp - 0x38], rax
	jmp	.label_186
.label_193:
	test	byte ptr [rbp - 0x59], 1
	jne	.label_197
	nop	
	test	byte ptr [rbp - 0x49], 1
	lea	rdi, [rdi]
	je	.label_200
.label_197:
	lea	rsi, [rsi]
	jmp	.label_172
.label_200:
	movabs	rsi, OFFSET FLAT:.str.73
	mov	byte ptr [rbp - 0x1d], 1
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x38]
	mov	rbp, rbp
	call	strspn
	add	rax, qword ptr [rbp - 0x38]
	mov	qword ptr [rbp - 0x38], rax
	nop	
	jmp	.label_186
.label_213:
	test	byte ptr [rbp - 0x1d], 1
	lea	rsi, [rsi]
	jne	.label_209
	jmp	.label_172
.label_209:
	lea	rsi, [rsi]
	jmp	.label_170
.label_185:
	test	byte ptr [rbp - 0x59], 1
	je	.label_173
	mov	rax, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	movsx	ecx, byte ptr [rax + 1]
	mov	rsp, rsp
	cmp	ecx, 0x5c
	mov	rsp, rsp
	je	.label_173
	mov	rax, qword ptr [rbp - 0x38]
	movsx	ecx, byte ptr [rax + 1]
	nop	
	cmp	ecx, 0x27
	lea	rdi, [rdi]
	je	.label_173
	jmp	.label_172
.label_173:
	mov	rax, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	mov	rcx, rax
	add	rcx, 1
	mov	qword ptr [rbp - 0x38], rcx
	lea	rsi, [rsi]
	mov	dl, byte ptr [rax + 1]
	mov	byte ptr [rbp - 0x69], dl
	nop	
	movsx	esi, byte ptr [rbp - 0x69]
	lea	rdi, [rdi]
	cmp	esi, 0x5c
	nop	
	je	.label_178
	nop	
	movsx	eax, byte ptr [rbp - 0x69]
	cmp	eax, 0x27
	nop	
	je	.label_178
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x59], 1
	jne	.label_201
	movsx	eax, byte ptr [rbp - 0x69]
	lea	rdi, [rdi]
	cmp	eax, 0x23
	lea	rsi, [rsi]
	je	.label_178
	mov	rsp, rsp
	movsx	eax, byte ptr [rbp - 0x69]
	cmp	eax, 0x24
	lea	rdi, [rdi]
	je	.label_178
	lea	rsi, [rsi]
	movsx	eax, byte ptr [rbp - 0x69]
	cmp	eax, 0x22
	jne	.label_201
.label_178:
	jmp	.label_180
.label_201:
	movsx	eax, byte ptr [rbp - 0x69]
	cmp	eax, 0x5f
	jne	.label_204
	mov	rbp, rbp
	test	byte ptr [rbp - 0x49], 1
	lea	rsi, [rsi]
	jne	.label_205
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x38], rax
	mov	byte ptr [rbp - 0x1d], 1
	mov	rbp, rbp
	jmp	.label_186
.label_205:
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x69], 0x20
	jmp	.label_176
.label_204:
	lea	rdi, [rdi]
	movsx	eax, byte ptr [rbp - 0x69]
	nop	
	cmp	eax, 0x63
	lea	rsi, [rsi]
	jne	.label_215
	nop	
	jmp	.label_170
.label_215:
	movsx	edi, byte ptr [rbp - 0x69]
	call	escape_char
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x69], al
	lea	rdi, [rdi]
	jmp	.label_176
.label_176:
	lea	rsi, [rsi]
	jmp	.label_180
.label_180:
	mov	rbp, rbp
	jmp	.label_172
.label_171:
	test	byte ptr [rbp - 0x59], 1
	lea	rdi, [rdi]
	je	.label_183
	jmp	.label_172
.label_183:
	mov	rdi, qword ptr [rbp - 0x38]
	nop	
	call	extract_varname
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x88], rax
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x88]
	call	getenv
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x98], rax
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x98], 0
	je	.label_191
	mov	rsp, rsp
	jmp	.label_196
.label_196:
	mov	rsp, rsp
	test	byte ptr [rbp - 0x1d], 1
	lea	rsi, [rsi]
	je	.label_199
	mov	rax, qword ptr [rbp - 0x58]
	lea	rdi, [rdi]
	mov	rcx, rax
	add	rcx, 1
	nop	
	mov	qword ptr [rbp - 0x58], rcx
	mov	byte ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x58]
	mov	rcx, qword ptr [rbp - 0x18]
	mov	rbp, rbp
	mov	rdx, rcx
	add	rdx, 8
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], rdx
	mov	rsp, rsp
	mov	qword ptr [rcx], rax
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x1d], 0
.label_199:
	jmp	.label_210
.label_210:
	mov	rsp, rsp
	jmp	.label_211
.label_211:
	test	byte ptr [byte ptr [dev_debug]],  1
	nop	
	je	.label_177
	mov	rdi,  qword ptr [word ptr [stderr]]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 0x88]
	mov	rax, qword ptr [rbp - 0x98]
	mov	qword ptr [rbp - 0x48], rdi
	lea	rdi, [rdi]
	mov	rdi, rax
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x78], rdx
	mov	rbp, rbp
	call	quote
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str.74
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x48]
	lea	rdi, [rdi]
	mov	rdx, qword ptr [rbp - 0x78]
	lea	rdi, [rdi]
	mov	rcx, rax
	lea	rsi, [rsi]
	mov	al, 0
	mov	rbp, rbp
	call	fprintf
	mov	dword ptr [rbp - 0x3c], eax
.label_177:
	lea	rsi, [rsi]
	jmp	.label_187
.label_187:
	mov	rdi, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	call	stpcpy
	nop	
	mov	qword ptr [rbp - 0x58], rax
	jmp	.label_192
.label_191:
	lea	rsi, [rsi]
	jmp	.label_168
.label_168:
	mov	rbp, rbp
	test	byte ptr [byte ptr [dev_debug]],  1
	je	.label_198
	movabs	rsi, OFFSET FLAT:.str.75
	mov	rsp, rsp
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x88]
	mov	al, 0
	lea	rsi, [rsi]
	call	fprintf
	mov	dword ptr [rbp - 0xa8], eax
.label_198:
	jmp	.label_207
.label_207:
	jmp	.label_192
.label_192:
	mov	rbp, rbp
	mov	esi, 0x7d
	mov	rdi, qword ptr [rbp - 0x38]
	mov	rsp, rsp
	call	strchr
	add	rax, 1
	mov	qword ptr [rbp - 0x38], rax
	jmp	.label_186
.label_172:
	lea	rsi, [rsi]
	jmp	.label_214
.label_214:
	nop	
	test	byte ptr [rbp - 0x1d], 1
	je	.label_216
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x58]
	mov	rbp, rbp
	mov	rcx, rax
	add	rcx, 1
	mov	qword ptr [rbp - 0x58], rcx
	lea	rdi, [rdi]
	mov	byte ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x58]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	mov	rdx, rcx
	lea	rsi, [rsi]
	add	rdx, 8
	mov	qword ptr [rbp - 0x18], rdx
	lea	rsi, [rsi]
	mov	qword ptr [rcx], rax
	mov	byte ptr [rbp - 0x1d], 0
.label_216:
	mov	rbp, rbp
	jmp	.label_203
.label_203:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 0x69]
	mov	rcx, qword ptr [rbp - 0x58]
	mov	rdx, rcx
	lea	rsi, [rsi]
	add	rdx, 1
	mov	qword ptr [rbp - 0x58], rdx
	mov	byte ptr [rcx], al
	mov	rcx, qword ptr [rbp - 0x38]
	nop	
	add	rcx, 1
	mov	qword ptr [rbp - 0x38], rcx
	jmp	.label_186
.label_189:
	jmp	.label_170
.label_170:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x58]
	mov	rsp, rsp
	mov	byte ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x18]
	mov	qword ptr [rax], 0
	mov	rax, qword ptr [rbp - 0x10]
	nop	
	add	rsp, 0xb0
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4045a9
	.globl sub_4045a9
	.type sub_4045a9, @function
sub_4045a9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4045b0

	.globl validate_split_str
	.type validate_split_str, @function
validate_split_str:
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x70
	mov	qword ptr [rbp - 0x10], rdi
	mov	qword ptr [rbp - 0x70], rsi
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x28], rdx
	mov	dword ptr [rbp - 0x54], 1
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x10], 0
	je	.label_219
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	movsx	ecx, byte ptr [rax]
	mov	rbp, rbp
	cmp	ecx, 0
	lea	rsi, [rsi]
	je	.label_219
	mov	rax, qword ptr [rbp - 0x10]
	movsx	ecx, byte ptr [rax]
	movsxd	rax, ecx
	mov	qword ptr [rbp - 0x50], rax
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	mov	rdx, qword ptr [rbp - 0x50]
	movzx	ecx, word ptr [rax + rdx*2]
	lea	rsi, [rsi]
	and	ecx, 0x2000
	cmp	ecx, 0
	mov	rsp, rsp
	jne	.label_219
	jmp	.label_226
.label_219:
	nop	
	movabs	rdi, OFFSET FLAT:.str.70
	movabs	rsi, OFFSET FLAT:.str.71
	lea	rdi, [rdi]
	mov	edx, 0x118
	lea	rsi, [rsi]
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.validate_split_str
	lea	rsi, [rsi]
	call	__assert_fail
.label_226:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x65], 0
	mov	byte ptr [rbp - 0x41], 0
	mov	byte ptr [rbp - 0x11], 0
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	call	strlen
	lea	rdi, [rdi]
	add	rax, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x40], rax
.label_231:
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	cmp	byte ptr [rax], 0
	lea	rdi, [rdi]
	je	.label_220
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	cl, byte ptr [rax + 1]
	mov	byte ptr [rbp - 0x55], cl
	mov	rax, qword ptr [rbp - 0x10]
	movsx	edx, byte ptr [rax]
	movsxd	rax, edx
	mov	qword ptr [rbp - 0x30], rax
	lea	rsi, [rsi]
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	movzx	edx, word ptr [rax + rsi*2]
	mov	rsp, rsp
	and	edx, 0x2000
	cmp	edx, 0
	lea	rdi, [rdi]
	je	.label_234
	test	byte ptr [rbp - 0x11], 1
	mov	rbp, rbp
	jne	.label_234
	test	byte ptr [rbp - 0x41], 1
	mov	rsp, rsp
	jne	.label_234
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x65], 1
	lea	rdi, [rdi]
	jmp	.label_241
.label_234:
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x65], 1
	lea	rdi, [rdi]
	je	.label_222
	mov	eax, dword ptr [rbp - 0x54]
	lea	rdi, [rdi]
	add	eax, 1
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x54], eax
.label_222:
	nop	
	mov	byte ptr [rbp - 0x65], 0
.label_241:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	movsx	ecx, byte ptr [rax]
	nop	
	mov	edx, ecx
	sub	edx, 0x22
	mov	dword ptr [rbp - 0x5c], ecx
	mov	dword ptr [rbp - 0x1c], edx
	lea	rsi, [rsi]
	je	.label_229
	jmp	.label_239
.label_239:
	mov	eax, dword ptr [rbp - 0x5c]
	sub	eax, 0x24
	nop	
	mov	dword ptr [rbp - 0x64], eax
	je	.label_240
	mov	rsp, rsp
	jmp	.label_244
.label_244:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0x5c]
	nop	
	sub	eax, 0x27
	mov	dword ptr [rbp - 8], eax
	je	.label_248
	lea	rdi, [rdi]
	jmp	.label_237
.label_237:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0x5c]
	sub	eax, 0x5c
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x18], eax
	lea	rsi, [rsi]
	je	.label_221
	nop	
	jmp	.label_223
.label_248:
	test	byte ptr [rbp - 0x41], 1
	je	.label_228
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x11], 1
	jne	.label_247
.label_228:
	nop	
	jmp	.label_233
.label_247:
	movabs	rdi, OFFSET FLAT:.str.76
	movabs	rsi, OFFSET FLAT:.str.71
	mov	edx, 0x12f
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.validate_split_str
	lea	rdi, [rdi]
	call	__assert_fail
.label_233:
	mov	rsp, rsp
	xor	eax, eax
	mov	cl, al
	test	byte ptr [rbp - 0x41], 1
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 1], cl
	lea	rsi, [rsi]
	jne	.label_242
	mov	al, byte ptr [rbp - 0x11]
	xor	al, 0xff
	mov	byte ptr [rbp - 1], al
.label_242:
	mov	rbp, rbp
	mov	al, byte ptr [rbp - 1]
	lea	rsi, [rsi]
	and	al, 1
	mov	byte ptr [rbp - 0x41], al
	jmp	.label_223
.label_229:
	mov	rsp, rsp
	test	byte ptr [rbp - 0x41], 1
	je	.label_227
	test	byte ptr [rbp - 0x11], 1
	lea	rsi, [rsi]
	jne	.label_230
.label_227:
	lea	rsi, [rsi]
	jmp	.label_235
.label_230:
	movabs	rdi, OFFSET FLAT:.str.76
	movabs	rsi, OFFSET FLAT:.str.71
	mov	rsp, rsp
	mov	edx, 0x134
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.validate_split_str
	call	__assert_fail
.label_235:
	lea	rsi, [rsi]
	xor	eax, eax
	mov	cl, al
	test	byte ptr [rbp - 0x41], 1
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x5d], cl
	jne	.label_249
	mov	al, byte ptr [rbp - 0x11]
	xor	al, 0xff
	mov	byte ptr [rbp - 0x5d], al
.label_249:
	mov	rbp, rbp
	mov	al, byte ptr [rbp - 0x5d]
	and	al, 1
	mov	byte ptr [rbp - 0x11], al
	jmp	.label_223
.label_221:
	test	byte ptr [rbp - 0x11], 1
	je	.label_225
	nop	
	movsx	eax, byte ptr [rbp - 0x55]
	lea	rdi, [rdi]
	cmp	eax, 0x63
	jne	.label_225
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.77
	call	gettext
	lea	rsi, [rsi]
	mov	edi, 0x7d
	lea	rdi, [rdi]
	xor	esi, esi
	lea	rdi, [rdi]
	mov	rdx, rax
	nop	
	mov	al, 0
	lea	rsi, [rsi]
	call	error
.label_225:
	lea	rdi, [rdi]
	movsx	eax, byte ptr [rbp - 0x55]
	cmp	eax, 0
	mov	rbp, rbp
	jne	.label_246
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.78
	call	gettext
	mov	edi, 0x7d
	xor	esi, esi
	mov	rdx, rax
	lea	rdi, [rdi]
	mov	al, 0
	mov	rbp, rbp
	call	error
.label_246:
	lea	rdi, [rdi]
	movsx	edi, byte ptr [rbp - 0x55]
	lea	rsi, [rsi]
	call	valid_escape_sequence
	test	al, 1
	mov	rbp, rbp
	jne	.label_232
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.79
	mov	rbp, rbp
	call	gettext
	mov	edi, 0x7d
	xor	esi, esi
	mov	rsp, rsp
	movsx	ecx, byte ptr [rbp - 0x55]
	nop	
	mov	rdx, rax
	mov	al, 0
	call	error
.label_232:
	nop	
	movsx	eax, byte ptr [rbp - 0x55]
	cmp	eax, 0x5f
	jne	.label_245
	nop	
	mov	eax, dword ptr [rbp - 0x54]
	mov	rbp, rbp
	add	eax, 1
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x54], eax
.label_245:
	nop	
	mov	rax, qword ptr [rbp - 0x10]
	add	rax, 1
	mov	qword ptr [rbp - 0x10], rax
	jmp	.label_223
.label_240:
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x41], 1
	je	.label_224
	mov	rsp, rsp
	jmp	.label_223
.label_224:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x10]
	call	extract_varname
	mov	qword ptr [rbp - 0x38], rax
	lea	rsi, [rsi]
	cmp	rax, 0
	jne	.label_236
	movabs	rdi, OFFSET FLAT:.str.80
	call	gettext
	mov	edi, 0x7d
	nop	
	xor	esi, esi
	mov	rcx, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	mov	rdx, rax
	mov	al, 0
	mov	rbp, rbp
	call	error
.label_236:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x38]
	call	getenv
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x38], rax
	cmp	rax, 0
	je	.label_218
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x38]
	call	strlen
	mov	rbp, rbp
	add	rax, qword ptr [rbp - 0x40]
	mov	qword ptr [rbp - 0x40], rax
.label_218:
	jmp	.label_223
.label_223:
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	add	rax, 1
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rax
	mov	rbp, rbp
	jmp	.label_231
.label_220:
	mov	rsp, rsp
	test	byte ptr [rbp - 0x11], 1
	mov	rbp, rbp
	jne	.label_238
	mov	rsp, rsp
	test	byte ptr [rbp - 0x41], 1
	lea	rdi, [rdi]
	je	.label_243
.label_238:
	movabs	rdi, OFFSET FLAT:.str.81
	mov	rsp, rsp
	call	gettext
	mov	edi, 0x7d
	nop	
	xor	esi, esi
	mov	rdx, rax
	nop	
	mov	al, 0
	mov	rbp, rbp
	call	error
.label_243:
	mov	eax, dword ptr [rbp - 0x54]
	nop	
	mov	rcx, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	dword ptr [rcx], eax
	mov	rcx, qword ptr [rbp - 0x40]
	mov	rdx, qword ptr [rbp - 0x70]
	mov	qword ptr [rdx], rcx
	lea	rsi, [rsi]
	add	rsp, 0x70
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404ac7
	.globl sub_404ac7
	.type sub_404ac7, @function
sub_404ac7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ad0

	.globl escape_char
	.type escape_char, @function
escape_char:
	lea	rsi, [rsi]
	push	rbp
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x20
	lea	rdi, [rdi]
	mov	al, dil
	mov	rsp, rsp
	mov	byte ptr [rbp - 6], al
	nop	
	movsx	edi, byte ptr [rbp - 6]
	mov	rsp, rsp
	mov	ecx, edi
	sub	ecx, 0x66
	nop	
	mov	dword ptr [rbp - 0x1c], edi
	mov	dword ptr [rbp - 4], ecx
	je	.label_256
	lea	rdi, [rdi]
	jmp	.label_251
.label_251:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0x1c]
	sub	eax, 0x6e
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xc], eax
	mov	rsp, rsp
	je	.label_255
	lea	rsi, [rsi]
	jmp	.label_258
.label_258:
	mov	eax, dword ptr [rbp - 0x1c]
	lea	rsi, [rsi]
	sub	eax, 0x72
	mov	dword ptr [rbp - 0x10], eax
	je	.label_254
	lea	rdi, [rdi]
	jmp	.label_260
.label_260:
	mov	eax, dword ptr [rbp - 0x1c]
	sub	eax, 0x74
	nop	
	mov	dword ptr [rbp - 0x14], eax
	je	.label_253
	jmp	.label_252
.label_252:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0x1c]
	sub	eax, 0x76
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x18], eax
	nop	
	je	.label_259
	jmp	.label_257
.label_256:
	mov	byte ptr [rbp - 5], 0xc
	mov	rsp, rsp
	jmp	.label_250
.label_255:
	mov	byte ptr [rbp - 5], 0xa
	jmp	.label_250
.label_254:
	mov	byte ptr [rbp - 5], 0xd
	jmp	.label_250
.label_253:
	mov	byte ptr [rbp - 5], 9
	jmp	.label_250
.label_259:
	nop	
	mov	byte ptr [rbp - 5], 0xb
	lea	rdi, [rdi]
	jmp	.label_250
.label_257:
	nop	
	movabs	rdi, OFFSET FLAT:.str.82
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.71
	mov	edx, 0xd2
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.escape_char
	mov	rbp, rbp
	call	__assert_fail
.label_250:
	movsx	eax, byte ptr [rbp - 5]
	add	rsp, 0x20
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404be6
	.globl sub_404be6
	.type sub_404be6, @function
sub_404be6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404bf0

	.globl extract_varname
	.type extract_varname, @function
extract_varname:
	nop	
	push	rbp
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x20
	mov	qword ptr [rbp - 0x10], rdi
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	call	scan_varname
	mov	qword ptr [rbp - 0x20], rax
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x20], 0
	jne	.label_263
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x18], 0
	lea	rsi, [rsi]
	jmp	.label_261
.label_263:
	nop	
	mov	rax, qword ptr [rbp - 0x20]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x10]
	sub	rax, rcx
	sub	rax, 2
	mov	qword ptr [rbp - 8], rax
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	cmp	rax,  qword ptr [word ptr [vnlen]]
	nop	
	jb	.label_262
	mov	rax, qword ptr [rbp - 8]
	add	rax, 1
	mov	rbp, rbp
	mov	qword ptr [word ptr [vnlen]],  rax
	mov	rdi,  qword ptr [word ptr [varname]]
	mov	rbp, rbp
	mov	rsi,  qword ptr [word ptr [vnlen]]
	mov	rsp, rsp
	call	xrealloc
	mov	qword ptr [word ptr [varname]],  rax
.label_262:
	lea	rsi, [rsi]
	mov	rdi,  qword ptr [word ptr [varname]]
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	add	rax, 2
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 8]
	mov	rsi, rax
	mov	rbp, rbp
	call	memcpy
	mov	rax, qword ptr [rbp - 8]
	lea	rdi, [rdi]
	mov	rdx,  qword ptr [word ptr [varname]]
	lea	rsi, [rsi]
	mov	byte ptr [rdx + rax], 0
	mov	rax,  qword ptr [word ptr [varname]]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rax
.label_261:
	nop	
	mov	rax, qword ptr [rbp - 0x18]
	nop	
	add	rsp, 0x20
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404cf6
	.globl sub_404cf6
	.type sub_404cf6, @function
sub_404cf6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404d00

	.globl valid_escape_sequence
	.type valid_escape_sequence, @function
valid_escape_sequence:
	push	rbp
	mov	rbp, rsp
	mov	al, dil
	lea	rsi, [rsi]
	mov	cl, 1
	mov	byte ptr [rbp - 2], al
	mov	rbp, rbp
	movsx	edi, byte ptr [rbp - 2]
	lea	rdi, [rdi]
	cmp	edi, 0x63
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], cl
	lea	rsi, [rsi]
	je	.label_264
	mov	al, 1
	movsx	ecx, byte ptr [rbp - 2]
	lea	rdi, [rdi]
	cmp	ecx, 0x66
	nop	
	mov	byte ptr [rbp - 1], al
	lea	rdi, [rdi]
	je	.label_264
	mov	al, 1
	mov	rbp, rbp
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x6e
	mov	byte ptr [rbp - 1], al
	nop	
	je	.label_264
	mov	al, 1
	mov	rsp, rsp
	movsx	ecx, byte ptr [rbp - 2]
	nop	
	cmp	ecx, 0x72
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 1], al
	je	.label_264
	lea	rsi, [rsi]
	mov	al, 1
	nop	
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x74
	nop	
	mov	byte ptr [rbp - 1], al
	lea	rsi, [rsi]
	je	.label_264
	mov	rbp, rbp
	mov	al, 1
	mov	rbp, rbp
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x76
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], al
	mov	rbp, rbp
	je	.label_264
	nop	
	mov	al, 1
	nop	
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x23
	mov	rsp, rsp
	mov	byte ptr [rbp - 1], al
	lea	rdi, [rdi]
	je	.label_264
	mov	al, 1
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x24
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], al
	mov	rsp, rsp
	je	.label_264
	mov	al, 1
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x5f
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], al
	je	.label_264
	mov	rsp, rsp
	mov	al, 1
	movsx	ecx, byte ptr [rbp - 2]
	mov	rsp, rsp
	cmp	ecx, 0x22
	mov	rsp, rsp
	mov	byte ptr [rbp - 1], al
	mov	rsp, rsp
	je	.label_264
	mov	al, 1
	lea	rdi, [rdi]
	movsx	ecx, byte ptr [rbp - 2]
	cmp	ecx, 0x27
	mov	byte ptr [rbp - 1], al
	lea	rsi, [rsi]
	je	.label_264
	mov	rsp, rsp
	movsx	eax, byte ptr [rbp - 2]
	cmp	eax, 0x5c
	sete	cl
	nop	
	mov	byte ptr [rbp - 1], cl
.label_264:
	mov	al, byte ptr [rbp - 1]
	nop	
	and	al, 1
	movzx	eax, al
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404e45
	.globl sub_404e45
	.type sub_404e45, @function
sub_404e45:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404e50

	.globl scan_varname
	.type scan_varname, @function
scan_varname:
	mov	rsp, rsp
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x20
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rdi
	nop	
	cmp	qword ptr [rbp - 0x18], 0
	lea	rsi, [rsi]
	je	.label_271
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x18]
	movsx	ecx, byte ptr [rax]
	mov	rbp, rbp
	cmp	ecx, 0x24
	nop	
	jne	.label_271
	jmp	.label_268
.label_271:
	movabs	rdi, OFFSET FLAT:.str.83
	movabs	rsi, OFFSET FLAT:.str.71
	mov	rbp, rbp
	mov	edx, 0xdd
	movabs	rcx, OFFSET FLAT:__PRETTY_FUNCTION__.scan_varname
	call	__assert_fail
.label_268:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x18]
	movsx	ecx, byte ptr [rax + 1]
	mov	rbp, rbp
	cmp	ecx, 0x7b
	jne	.label_270
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x18]
	movsx	edi, byte ptr [rax + 2]
	lea	rsi, [rsi]
	call	c_isalpha
	test	al, 1
	mov	rsp, rsp
	jne	.label_265
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x18]
	movsx	ecx, byte ptr [rax + 2]
	lea	rsi, [rsi]
	cmp	ecx, 0x5f
	mov	rbp, rbp
	jne	.label_270
.label_265:
	mov	rax, qword ptr [rbp - 0x18]
	nop	
	add	rax, 3
	mov	qword ptr [rbp - 0x10], rax
.label_269:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x10]
	movsx	edi, byte ptr [rax]
	call	c_isalnum
	mov	cl, 1
	mov	rsp, rsp
	test	al, 1
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x19], cl
	lea	rsi, [rsi]
	jne	.label_266
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	movsx	ecx, byte ptr [rax]
	lea	rsi, [rsi]
	cmp	ecx, 0x5f
	lea	rsi, [rsi]
	sete	dl
	mov	byte ptr [rbp - 0x19], dl
.label_266:
	mov	al, byte ptr [rbp - 0x19]
	test	al, 1
	lea	rsi, [rsi]
	jne	.label_274
	nop	
	jmp	.label_272
.label_274:
	mov	rax, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	add	rax, 1
	mov	qword ptr [rbp - 0x10], rax
	lea	rsi, [rsi]
	jmp	.label_269
.label_272:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	movsx	ecx, byte ptr [rax]
	mov	rsp, rsp
	cmp	ecx, 0x7d
	jne	.label_267
	mov	rax, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 8], rax
	lea	rdi, [rdi]
	jmp	.label_273
.label_267:
	lea	rdi, [rdi]
	jmp	.label_270
.label_270:
	mov	qword ptr [rbp - 8], 0
.label_273:
	mov	rax, qword ptr [rbp - 8]
	add	rsp, 0x20
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x404fc8
	.globl sub_404fc8
	.type sub_404fc8, @function
sub_404fc8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404fd0

	.globl operand2sig
	.type operand2sig, @function
operand2sig:
	push	rbp
	nop	
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x60
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x48], rdi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x28], rsi
	mov	rsi, qword ptr [rbp - 0x48]
	lea	rdi, [rdi]
	movsx	eax, byte ptr [rsi]
	sub	eax, 0x30
	cmp	eax, 9
	ja	.label_282
	lea	rsi, [rsi]
	call	__errno_location
	mov	rsp, rsp
	lea	rsi, [rbp - 0x38]
	mov	edx, 0xa
	lea	rsi, [rsi]
	mov	dword ptr [rax], 0
	mov	rdi, qword ptr [rbp - 0x48]
	call	strtol
	mov	qword ptr [rbp - 0x50], rax
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	edx, eax
	mov	dword ptr [rbp - 4], edx
	mov	rax, qword ptr [rbp - 0x48]
	nop	
	cmp	rax, qword ptr [rbp - 0x38]
	nop	
	je	.label_278
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	movsx	ecx, byte ptr [rax]
	lea	rsi, [rsi]
	cmp	ecx, 0
	nop	
	jne	.label_278
	mov	rbp, rbp
	call	__errno_location
	cmp	dword ptr [rax], 0
	jne	.label_278
	movsxd	rax, dword ptr [rbp - 4]
	nop	
	cmp	rax, qword ptr [rbp - 0x50]
	je	.label_286
.label_278:
	mov	rbp, rbp
	mov	eax, 0xffffffff
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x3c], eax
	jmp	.label_275
.label_286:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 4]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x3c], eax
.label_275:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x3c]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x14], eax
	cmp	dword ptr [rbp - 0x14], -1
	lea	rdi, [rdi]
	je	.label_288
	mov	rbp, rbp
	mov	eax, 0x7f
	lea	rsi, [rsi]
	mov	ecx, 0xff
	lea	rsi, [rsi]
	cmp	dword ptr [rbp - 0x14], 0xff
	cmovge	eax, ecx
	lea	rsi, [rsi]
	and	eax, dword ptr [rbp - 0x14]
	nop	
	mov	dword ptr [rbp - 0x14], eax
.label_288:
	lea	rdi, [rdi]
	jmp	.label_284
.label_282:
	mov	rdi, qword ptr [rbp - 0x48]
	call	xstrdup
	mov	qword ptr [rbp - 0x58], rax
	mov	rax, qword ptr [rbp - 0x58]
	mov	qword ptr [rbp - 0x10], rax
.label_281:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	cmp	byte ptr [rax], 0
	lea	rsi, [rsi]
	je	.label_289
	movabs	rdi, OFFSET FLAT:.str_2
	mov	rax, qword ptr [rbp - 0x10]
	movsx	esi, byte ptr [rax]
	nop	
	call	strchr
	cmp	rax, 0
	je	.label_285
	mov	rax, qword ptr [rbp - 0x10]
	movsx	ecx, byte ptr [rax]
	add	ecx, -0x20
	lea	rsi, [rsi]
	mov	dl, cl
	mov	byte ptr [rax], dl
.label_285:
	mov	rbp, rbp
	jmp	.label_276
.label_276:
	mov	rax, qword ptr [rbp - 0x10]
	nop	
	add	rax, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x10], rax
	nop	
	jmp	.label_281
.label_289:
	lea	rsi, [rsi]
	lea	rsi, [rbp - 0x14]
	mov	rdi, qword ptr [rbp - 0x58]
	nop	
	call	str2sig
	cmp	eax, 0
	nop	
	je	.label_277
	mov	rax, qword ptr [rbp - 0x58]
	mov	rsp, rsp
	movsx	ecx, byte ptr [rax]
	cmp	ecx, 0x53
	jne	.label_279
	mov	rax, qword ptr [rbp - 0x58]
	movsx	ecx, byte ptr [rax + 1]
	cmp	ecx, 0x49
	jne	.label_279
	mov	rax, qword ptr [rbp - 0x58]
	lea	rdi, [rdi]
	movsx	ecx, byte ptr [rax + 2]
	cmp	ecx, 0x47
	jne	.label_279
	mov	rbp, rbp
	lea	rsi, [rbp - 0x14]
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	add	rax, 3
	mov	rdi, rax
	call	str2sig
	mov	rbp, rbp
	cmp	eax, 0
	je	.label_277
.label_279:
	nop	
	mov	dword ptr [rbp - 0x14], 0xffffffff
.label_277:
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x58]
	call	free
.label_284:
	cmp	dword ptr [rbp - 0x14], 0
	jl	.label_287
	mov	edi, dword ptr [rbp - 0x14]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x28]
	call	sig2str
	lea	rsi, [rsi]
	cmp	eax, 0
	lea	rdi, [rdi]
	je	.label_280
.label_287:
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.1_0
	nop	
	call	gettext
	mov	rdi, qword ptr [rbp - 0x48]
	mov	qword ptr [rbp - 0x20], rax
	lea	rdi, [rdi]
	call	quote
	xor	ecx, ecx
	lea	rdi, [rdi]
	mov	edi, ecx
	nop	
	mov	esi, ecx
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 0x20]
	lea	rdi, [rdi]
	mov	rcx, rax
	mov	al, 0
	nop	
	call	error
	mov	dword ptr [rbp - 0x2c], 0xffffffff
	lea	rsi, [rsi]
	jmp	.label_283
.label_280:
	nop	
	mov	eax, dword ptr [rbp - 0x14]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x2c], eax
.label_283:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0x2c]
	mov	rbp, rbp
	add	rsp, 0x60
	mov	rbp, rbp
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40528a
	.globl sub_40528a
	.type sub_40528a, @function
sub_40528a:

	nop	
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405290

	.globl c_isalnum
	.type c_isalnum, @function
c_isalnum:
	push	rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 4], edi
	mov	eax, edi
	lea	rsi, [rsi]
	add	eax, -0x30
	sub	eax, 0xa
	mov	dword ptr [rbp - 0x10], edi
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x14], eax
	mov	rsp, rsp
	jb	.label_290
	jmp	.label_291
.label_291:
	mov	eax, dword ptr [rbp - 0x10]
	add	eax, -0x41
	lea	rdi, [rdi]
	sub	eax, 0x1a
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xc], eax
	mov	rbp, rbp
	jb	.label_290
	nop	
	jmp	.label_294
.label_294:
	mov	eax, dword ptr [rbp - 0x10]
	add	eax, -0x61
	sub	eax, 0x19
	mov	rsp, rsp
	mov	dword ptr [rbp - 8], eax
	mov	rbp, rbp
	ja	.label_293
	jmp	.label_290
.label_290:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0x15], 1
	lea	rsi, [rsi]
	jmp	.label_292
.label_293:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x15], 0
.label_292:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 0x15]
	and	al, 1
	movzx	eax, al
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40531d
	.globl sub_40531d
	.type sub_40531d, @function
sub_40531d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405320

	.globl c_isalpha
	.type c_isalpha, @function
c_isalpha:
	push	rbp
	mov	rbp, rsp
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x14], edi
	mov	rsp, rsp
	mov	eax, edi
	lea	rsi, [rsi]
	add	eax, -0x41
	sub	eax, 0x1a
	mov	dword ptr [rbp - 8], edi
	mov	dword ptr [rbp - 0xc], eax
	jb	.label_295
	nop	
	jmp	.label_296
.label_296:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 8]
	add	eax, -0x61
	nop	
	sub	eax, 0x19
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x10], eax
	mov	rsp, rsp
	ja	.label_297
	lea	rdi, [rdi]
	jmp	.label_295
.label_295:
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 1], 1
	mov	rbp, rbp
	jmp	.label_298
.label_297:
	mov	rbp, rbp
	mov	byte ptr [rbp - 1], 0
.label_298:
	mov	rsp, rsp
	mov	al, byte ptr [rbp - 1]
	lea	rsi, [rsi]
	and	al, 1
	movzx	eax, al
	lea	rsi, [rsi]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40539a
	.globl sub_40539a
	.type sub_40539a, @function
sub_40539a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4053a0
	.globl c_isascii
	.type c_isascii, @function
c_isascii:

	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	nop	
	mov	dword ptr [rbp - 4], edi
	sub	edi, 0x7f
	mov	dword ptr [rbp - 0xc], edi
	ja	.label_299
	mov	rsp, rsp
	jmp	.label_301
.label_301:
	mov	byte ptr [rbp - 5], 1
	jmp	.label_300
.label_299:
	mov	rsp, rsp
	mov	byte ptr [rbp - 5], 0
.label_300:
	nop	
	mov	al, byte ptr [rbp - 5]
	and	al, 1
	mov	rsp, rsp
	movzx	eax, al
	lea	rsi, [rsi]
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4053e3
	.globl sub_4053e3
	.type sub_4053e3, @function
sub_4053e3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4053f0
	.globl c_isblank
	.type c_isblank, @function
c_isblank:

	mov	rbp, rbp
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	al, 1
	mov	dword ptr [rbp - 4], edi
	lea	rsi, [rsi]
	cmp	dword ptr [rbp - 4], 0x20
	nop	
	mov	byte ptr [rbp - 5], al
	lea	rdi, [rdi]
	je	.label_302
	cmp	dword ptr [rbp - 4], 9
	lea	rsi, [rsi]
	sete	al
	mov	byte ptr [rbp - 5], al
.label_302:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 5]
	mov	rbp, rbp
	and	al, 1
	lea	rsi, [rsi]
	movzx	eax, al
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405433
	.globl sub_405433
	.type sub_405433, @function
sub_405433:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405440
	.globl c_iscntrl
	.type c_iscntrl, @function
c_iscntrl:

	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 4], edi
	lea	rsi, [rsi]
	mov	eax, edi
	mov	rbp, rbp
	sub	edi, 0x20
	mov	dword ptr [rbp - 0x14], eax
	mov	dword ptr [rbp - 0x10], edi
	lea	rsi, [rsi]
	jb	.label_303
	nop	
	jmp	.label_304
.label_304:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x14]
	lea	rsi, [rsi]
	sub	eax, 0x7f
	mov	dword ptr [rbp - 0xc], eax
	jne	.label_305
	lea	rsi, [rsi]
	jmp	.label_303
.label_303:
	mov	byte ptr [rbp - 5], 1
	jmp	.label_306
.label_305:
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 5], 0
.label_306:
	lea	rdi, [rdi]
	mov	al, byte ptr [rbp - 5]
	and	al, 1
	movzx	eax, al
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4054a7
	.globl sub_4054a7
	.type sub_4054a7, @function
sub_4054a7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4054b0
	.globl c_isdigit
	.type c_isdigit, @function
c_isdigit:

	lea	rdi, [rdi]
	.section	.text
	.align	32
	#Procedure 0x4054b3
	.globl sub_4054b3
	.type sub_4054b3, @function
sub_4054b3:

	push	rbp
	mov	rbp, rsp
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc], edi
	mov	rsp, rsp
	add	edi, -0x30
	lea	rdi, [rdi]
	sub	edi, 9
	mov	dword ptr [rbp - 4], edi
	nop	
	ja	.label_308
	jmp	.label_309
.label_309:
	mov	byte ptr [rbp - 5], 1
	lea	rdi, [rdi]
	jmp	.label_307
.label_308:
	mov	byte ptr [rbp - 5], 0
.label_307:
	mov	al, byte ptr [rbp - 5]
	mov	rsp, rsp
	and	al, 1
	movzx	eax, al
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4054f5
	.globl sub_4054f5
	.type sub_4054f5, @function
sub_4054f5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405500
	.globl c_isgraph
	.type c_isgraph, @function
c_isgraph:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405501
	.globl sub_405501
	.type sub_405501, @function
sub_405501:

	push	rbp
	mov	rbp, rsp
	nop	
	mov	dword ptr [rbp - 8], edi
	add	edi, -0x21
	sub	edi, 0x5d
	mov	dword ptr [rbp - 4], edi
	lea	rdi, [rdi]
	ja	.label_310
	lea	rsi, [rsi]
	jmp	.label_311
.label_311:
	mov	byte ptr [rbp - 9], 1
	jmp	.label_312
.label_310:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 9], 0
.label_312:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 9]
	and	al, 1
	lea	rdi, [rdi]
	movzx	eax, al
	lea	rdi, [rdi]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405549
	.globl sub_405549
	.type sub_405549, @function
sub_405549:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405550
	.globl c_islower
	.type c_islower, @function
c_islower:

	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 8], edi
	add	edi, -0x61
	sub	edi, 0x19
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc], edi
	mov	rsp, rsp
	ja	.label_313
	jmp	.label_314
.label_314:
	mov	rsp, rsp
	mov	byte ptr [rbp - 1], 1
	mov	rsp, rsp
	jmp	.label_315
.label_313:
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 1], 0
.label_315:
	mov	al, byte ptr [rbp - 1]
	nop	
	and	al, 1
	movzx	eax, al
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x405599
	.globl sub_405599
	.type sub_405599, @function
sub_405599:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4055a0
	.globl c_isprint
	.type c_isprint, @function
c_isprint:

	push	rbp
	nop	
	mov	rbp, rsp
	mov	rsp, rsp
	mov	dword ptr [rbp - 4], edi
	lea	rsi, [rsi]
	add	edi, -0x20
	nop	
	sub	edi, 0x5e
	mov	dword ptr [rbp - 0xc], edi
	ja	.label_316
	jmp	.label_318
.label_318:
	mov	rsp, rsp
	mov	byte ptr [rbp - 5], 1
	jmp	.label_317
.label_316:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 5], 0
.label_317:
	mov	al, byte ptr [rbp - 5]
	and	al, 1
	movzx	eax, al
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4055e3
	.globl sub_4055e3
	.type sub_4055e3, @function
sub_4055e3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4055f0
	.globl c_ispunct
	.type c_ispunct, @function
c_ispunct:

	lea	rsi, [rsi]
	.section	.text
	.align	32
	#Procedure 0x4055f3
	.globl sub_4055f3
	.type sub_4055f3, @function
sub_4055f3:

	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 0x1c], edi
	mov	rsp, rsp
	mov	eax, edi
	add	eax, -0x21
	mov	rsp, rsp
	sub	eax, 0xf
	mov	dword ptr [rbp - 4], edi
	mov	dword ptr [rbp - 0x14], eax
	jb	.label_319
	jmp	.label_320
.label_320:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 4]
	add	eax, -0x3a
	sub	eax, 7
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x10], eax
	lea	rdi, [rdi]
	jb	.label_319
	nop	
	jmp	.label_323
.label_323:
	mov	eax, dword ptr [rbp - 4]
	mov	rsp, rsp
	add	eax, -0x5b
	mov	rsp, rsp
	sub	eax, 6
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x18], eax
	jb	.label_319
	jmp	.label_321
.label_321:
	mov	eax, dword ptr [rbp - 4]
	add	eax, -0x7b
	mov	rsp, rsp
	sub	eax, 3
	mov	dword ptr [rbp - 0xc], eax
	ja	.label_324
	mov	rsp, rsp
	jmp	.label_319
.label_319:
	mov	byte ptr [rbp - 5], 1
	jmp	.label_322
.label_324:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 5], 0
.label_322:
	mov	al, byte ptr [rbp - 5]
	and	al, 1
	movzx	eax, al
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405694
	.globl sub_405694
	.type sub_405694, @function
sub_405694:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4056a0
	.globl c_isspace
	.type c_isspace, @function
c_isspace:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	mov	dword ptr [rbp - 0x14], edi
	lea	rdi, [rdi]
	mov	eax, edi
	mov	rbp, rbp
	add	eax, -9
	sub	eax, 5
	mov	dword ptr [rbp - 0xc], edi
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x10], eax
	jb	.label_325
	mov	rbp, rbp
	jmp	.label_326
.label_326:
	mov	eax, dword ptr [rbp - 0xc]
	sub	eax, 0x20
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 8], eax
	jne	.label_328
	mov	rsp, rsp
	jmp	.label_325
.label_325:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], 1
	mov	rsp, rsp
	jmp	.label_327
.label_328:
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 1], 0
.label_327:
	mov	al, byte ptr [rbp - 1]
	and	al, 1
	lea	rdi, [rdi]
	movzx	eax, al
	nop	
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405710
	.globl c_isupper
	.type c_isupper, @function
c_isupper:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405711
	.globl sub_405711
	.type sub_405711, @function
sub_405711:

	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	dword ptr [rbp - 0xc], edi
	mov	rsp, rsp
	add	edi, -0x41
	nop	
	sub	edi, 0x19
	mov	dword ptr [rbp - 4], edi
	lea	rsi, [rsi]
	ja	.label_329
	jmp	.label_331
.label_331:
	mov	byte ptr [rbp - 5], 1
	nop	
	jmp	.label_330
.label_329:
	mov	byte ptr [rbp - 5], 0
.label_330:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 5]
	and	al, 1
	movzx	eax, al
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405754
	.globl sub_405754
	.type sub_405754, @function
sub_405754:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405760
	.globl c_isxdigit
	.type c_isxdigit, @function
c_isxdigit:

	lea	rsi, [rsi]
	.section	.text
	.align	32
	#Procedure 0x405763
	.globl sub_405763
	.type sub_405763, @function
sub_405763:

	push	rbp
	nop	
	mov	rbp, rsp
	mov	dword ptr [rbp - 8], edi
	mov	eax, edi
	add	eax, -0x30
	sub	eax, 0xa
	mov	dword ptr [rbp - 0x14], edi
	mov	dword ptr [rbp - 0x10], eax
	jb	.label_332
	lea	rdi, [rdi]
	jmp	.label_336
.label_336:
	mov	eax, dword ptr [rbp - 0x14]
	mov	rsp, rsp
	add	eax, -0x41
	mov	rbp, rbp
	sub	eax, 6
	mov	rsp, rsp
	mov	dword ptr [rbp - 4], eax
	lea	rsi, [rsi]
	jb	.label_332
	jmp	.label_333
.label_333:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x14]
	nop	
	add	eax, -0x61
	sub	eax, 5
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x18], eax
	ja	.label_335
	jmp	.label_332
.label_332:
	mov	byte ptr [rbp - 9], 1
	jmp	.label_334
.label_335:
	nop	
	mov	byte ptr [rbp - 9], 0
.label_334:
	nop	
	mov	al, byte ptr [rbp - 9]
	mov	rsp, rsp
	and	al, 1
	lea	rsi, [rsi]
	movzx	eax, al
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4057e7
	.globl sub_4057e7
	.type sub_4057e7, @function
sub_4057e7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4057f0

	.globl c_tolower
	.type c_tolower, @function
c_tolower:
	lea	rsi, [rsi]
	push	rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 0xc], edi
	lea	rsi, [rsi]
	add	edi, -0x41
	lea	rdi, [rdi]
	sub	edi, 0x19
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], edi
	ja	.label_337
	jmp	.label_338
.label_338:
	mov	eax, dword ptr [rbp - 0xc]
	sub	eax, 0x41
	nop	
	add	eax, 0x61
	nop	
	mov	dword ptr [rbp - 8], eax
	lea	rsi, [rsi]
	jmp	.label_339
.label_337:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0xc]
	mov	rbp, rbp
	mov	dword ptr [rbp - 8], eax
.label_339:
	nop	
	mov	eax, dword ptr [rbp - 8]
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x405840
	.globl c_toupper
	.type c_toupper, @function
c_toupper:

	push	rbp
	mov	rbp, rsp
	mov	dword ptr [rbp - 0xc], edi
	mov	rbp, rbp
	add	edi, -0x61
	nop	
	sub	edi, 0x19
	mov	dword ptr [rbp - 8], edi
	ja	.label_340
	mov	rbp, rbp
	jmp	.label_341
.label_341:
	mov	eax, dword ptr [rbp - 0xc]
	mov	rbp, rbp
	sub	eax, 0x61
	mov	rsp, rsp
	add	eax, 0x41
	nop	
	mov	dword ptr [rbp - 4], eax
	lea	rsi, [rsi]
	jmp	.label_342
.label_340:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0xc]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], eax
.label_342:
	mov	eax, dword ptr [rbp - 4]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405891
	.globl sub_405891
	.type sub_405891, @function
sub_405891:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4058a0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	rbp, rbp
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rdi
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	qword ptr [word ptr [file_name]],  rdi
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4058c5
	.globl sub_4058c5
	.type sub_4058c5, @function
sub_4058c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4058d0
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	rsp, rsp
	mov	al, dil
	and	al, 1
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 1], al
	nop	
	mov	al, byte ptr [rbp - 1]
	mov	rsp, rsp
	and	al, 1
	lea	rdi, [rdi]
	mov	byte ptr [byte ptr [ignore_EPIPE]],  al
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4058fb
	.globl sub_4058fb
	.type sub_4058fb, @function
sub_4058fb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405900

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x10
	lea	rdi, [rdi]
	mov	rdi,  qword ptr [word ptr [stdout]]
	mov	rsp, rsp
	call	close_stream
	cmp	eax, 0
	je	.label_343
	test	byte ptr [byte ptr [ignore_EPIPE]],  1
	je	.label_344
	mov	rbp, rbp
	call	__errno_location
	mov	rsp, rsp
	cmp	dword ptr [rax], 0x20
	je	.label_343
.label_344:
	mov	rsp, rsp
	movabs	rdi, OFFSET FLAT:.str_3
	call	gettext
	mov	qword ptr [rbp - 0x10], rax
	cmp	qword ptr [word ptr [file_name]],  0
	je	.label_347
	nop	
	call	__errno_location
	nop	
	mov	esi, dword ptr [rax]
	mov	rdi,  qword ptr [word ptr [file_name]]
	mov	dword ptr [rbp - 4], esi
	call	quotearg_colon
	nop	
	xor	edi, edi
	lea	rsi, [rsi]
	movabs	rdx, OFFSET FLAT:.str.1_1
	mov	rbp, rbp
	mov	r8, qword ptr [rbp - 0x10]
	mov	esi, dword ptr [rbp - 4]
	lea	rdi, [rdi]
	mov	rcx, rax
	mov	al, 0
	call	error
	jmp	.label_345
.label_347:
	call	__errno_location
	lea	rdi, [rdi]
	xor	edi, edi
	mov	rsp, rsp
	movabs	rdx, OFFSET FLAT:.str_1
	mov	esi, dword ptr [rax]
	nop	
	mov	rcx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	al, 0
	mov	rsp, rsp
	call	error
.label_345:
	mov	edi,  dword ptr [dword ptr [exit_failure]]
	mov	rsp, rsp
	call	_exit
.label_343:
	mov	rdi,  qword ptr [word ptr [stderr]]
	mov	rbp, rbp
	call	close_stream
	nop	
	cmp	eax, 0
	je	.label_346
	lea	rdi, [rdi]
	mov	edi,  dword ptr [dword ptr [exit_failure]]
	call	_exit
.label_346:
	lea	rdi, [rdi]
	add	rsp, 0x10
	nop	
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x405a26
	.globl sub_405a26
	.type sub_405a26, @function
sub_405a26:

	nop	
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405a30

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	lea	rsi, [rsi]
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x30
	mov	qword ptr [rbp - 0x10], rdi
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x10], 0
	jne	.label_350
	movabs	rdi, OFFSET FLAT:.str_4
	mov	rbp, rbp
	mov	rsi,  qword ptr [word ptr [stderr]]
	call	fputs
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x14], eax
	lea	rsi, [rsi]
	call	abort
.label_350:
	lea	rdi, [rdi]
	mov	esi, 0x2f
	mov	rdi, qword ptr [rbp - 0x10]
	nop	
	call	strrchr
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x20], rax
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x20], 0
	je	.label_348
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x20]
	add	rax, 1
	mov	qword ptr [rbp - 0x28], rax
	jmp	.label_352
.label_348:
	mov	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [rbp - 0x28], rax
.label_352:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x28]
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	sub	rax, rcx
	nop	
	cmp	rax, 7
	jl	.label_351
	lea	rsi, [rsi]
	movabs	rsi, OFFSET FLAT:.str.1_2
	mov	rsp, rsp
	mov	eax, 7
	mov	edx, eax
	mov	rcx, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	add	rcx, -7
	lea	rdi, [rdi]
	mov	rdi, rcx
	call	strncmp
	cmp	eax, 0
	mov	rbp, rbp
	jne	.label_351
	mov	rbp, rbp
	movabs	rsi, OFFSET FLAT:.str.2_0
	lea	rsi, [rsi]
	mov	eax, 3
	mov	edx, eax
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rcx
	mov	rdi, qword ptr [rbp - 8]
	call	strncmp
	cmp	eax, 0
	jne	.label_349
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 8]
	add	rax, 3
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x10], rax
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	qword ptr [word ptr [program_invocation_short_name]],  rax
.label_349:
	jmp	.label_351
.label_351:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [word ptr [program_name]],  rax
	nop	
	mov	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [word ptr [__progname_full]],  rax
	add	rsp, 0x30
	lea	rsi, [rsi]
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405ba6
	.globl sub_405ba6
	.type sub_405ba6, @function
sub_405ba6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405bb0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405bb1
	.globl sub_405bb1
	.type sub_405bb1, @function
sub_405bb1:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x20
	mov	qword ptr [rbp - 0x18], rdi
	mov	rbp, rbp
	call	__errno_location
	mov	ecx, dword ptr [rax]
	mov	rbp, rbp
	mov	dword ptr [rbp - 8], ecx
	cmp	qword ptr [rbp - 0x18], 0
	je	.label_353
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x18]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x10], rax
	lea	rsi, [rsi]
	jmp	.label_354
.label_353:
	movabs	rax, OFFSET FLAT:default_quoting_options
	nop	
	mov	qword ptr [rbp - 0x10], rax
	lea	rsi, [rsi]
	jmp	.label_354
.label_354:
	mov	rax, qword ptr [rbp - 0x10]
	mov	ecx, 0x38
	lea	rsi, [rsi]
	mov	esi, ecx
	lea	rsi, [rsi]
	mov	rdi, rax
	call	xmemdup
	mov	qword ptr [rbp - 0x20], rax
	mov	ecx, dword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], ecx
	lea	rdi, [rdi]
	call	__errno_location
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rbp - 4]
	mov	rbp, rbp
	mov	dword ptr [rax], ecx
	nop	
	mov	rax, qword ptr [rbp - 0x20]
	mov	rbp, rbp
	add	rsp, 0x20
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405c52
	.globl sub_405c52
	.type sub_405c52, @function
sub_405c52:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405c60
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	lea	rsi, [rsi]
	.section	.text
	.align	32
	#Procedure 0x405c63
	.globl sub_405c63
	.type sub_405c63, @function
sub_405c63:

	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	qword ptr [rbp - 0x10], rdi
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x10], 0
	lea	rsi, [rsi]
	je	.label_355
	mov	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [rbp - 8], rax
	nop	
	jmp	.label_356
.label_355:
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	rsp, rsp
	mov	qword ptr [rbp - 8], rax
	jmp	.label_356
.label_356:
	mov	rax, qword ptr [rbp - 8]
	nop	
	mov	eax, dword ptr [rax]
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405cb2
	.globl sub_405cb2
	.type sub_405cb2, @function
sub_405cb2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405cc0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	push	rbp
	mov	rbp, rsp
	nop	
	mov	qword ptr [rbp - 0x20], rdi
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], esi
	mov	esi, dword ptr [rbp - 4]
	cmp	qword ptr [rbp - 0x20], 0
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x14], esi
	je	.label_357
	mov	rax, qword ptr [rbp - 0x20]
	mov	qword ptr [rbp - 0x10], rax
	jmp	.label_358
.label_357:
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	qword ptr [rbp - 0x10], rax
	lea	rdi, [rdi]
	jmp	.label_358
.label_358:
	mov	rax, qword ptr [rbp - 0x10]
	mov	ecx, dword ptr [rbp - 0x14]
	mov	dword ptr [rax], ecx
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405d11
	.globl sub_405d11
	.type sub_405d11, @function
sub_405d11:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405d20

	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:
	lea	rsi, [rsi]
	push	rbp
	nop	
	mov	rbp, rsp
	mov	al, sil
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x18], rdi
	mov	byte ptr [rbp - 0x29], al
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 8], edx
	mov	rbp, rbp
	mov	al, byte ptr [rbp - 0x29]
	mov	rsp, rsp
	mov	byte ptr [rbp - 9], al
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x18], 0
	mov	rsp, rsp
	je	.label_359
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x18]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x28], rax
	mov	rsp, rsp
	jmp	.label_360
.label_359:
	mov	rbp, rbp
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x28], rax
	lea	rsi, [rsi]
	jmp	.label_360
.label_360:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	add	rax, 8
	mov	rbp, rbp
	movzx	ecx, byte ptr [rbp - 9]
	mov	rbp, rbp
	mov	edx, ecx
	shr	rdx, 5
	mov	rbp, rbp
	shl	rdx, 2
	mov	rsp, rsp
	add	rax, rdx
	mov	qword ptr [rbp - 0x20], rax
	mov	rbp, rbp
	movzx	ecx, byte ptr [rbp - 9]
	mov	eax, ecx
	lea	rdi, [rdi]
	and	rax, 0x1f
	mov	rsp, rsp
	mov	ecx, eax
	mov	dword ptr [rbp - 0x34], ecx
	mov	rax, qword ptr [rbp - 0x20]
	mov	ecx, dword ptr [rax]
	mov	rbp, rbp
	mov	esi, dword ptr [rbp - 0x34]
	mov	dword ptr [rbp - 0x30], ecx
	nop	
	mov	ecx, esi
	nop	
	mov	esi, dword ptr [rbp - 0x30]
	shr	esi, cl
	mov	rbp, rbp
	and	esi, 1
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], esi
	mov	esi, dword ptr [rbp - 8]
	and	esi, 1
	lea	rsi, [rsi]
	xor	esi, dword ptr [rbp - 4]
	nop	
	mov	ecx, dword ptr [rbp - 0x34]
	nop	
	shl	esi, cl
	mov	rax, qword ptr [rbp - 0x20]
	mov	rsp, rsp
	xor	esi, dword ptr [rax]
	mov	dword ptr [rax], esi
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 4]
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405e1b
	.globl sub_405e1b
	.type sub_405e1b, @function
sub_405e1b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405e20
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	mov	rbp, rbp
	push	rbp
	nop	
	mov	rbp, rsp
	mov	qword ptr [rbp - 0x10], rdi
	mov	dword ptr [rbp - 4], esi
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x10], 0
	jne	.label_361
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rax
.label_361:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rax + 4]
	nop	
	mov	dword ptr [rbp - 0x14], ecx
	mov	ecx, dword ptr [rbp - 4]
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	dword ptr [rax + 4], ecx
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x14]
	nop	
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x405e79
	.globl sub_405e79
	.type sub_405e79, @function
sub_405e79:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405e80

	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:
	push	rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x20
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rdi
	mov	qword ptr [rbp - 8], rsi
	mov	qword ptr [rbp - 0x18], rdx
	cmp	qword ptr [rbp - 0x10], 0
	nop	
	jne	.label_362
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	qword ptr [rbp - 0x10], rax
.label_362:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x10]
	mov	dword ptr [rax], 0xa
	nop	
	cmp	qword ptr [rbp - 8], 0
	lea	rsi, [rsi]
	je	.label_364
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x18], 0
	lea	rsi, [rsi]
	jne	.label_363
.label_364:
	call	abort
.label_363:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 8]
	mov	rcx, qword ptr [rbp - 0x10]
	mov	qword ptr [rcx + 0x28], rax
	mov	rax, qword ptr [rbp - 0x18]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	qword ptr [rcx + 0x30], rax
	add	rsp, 0x20
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405f13
	.globl sub_405f13
	.type sub_405f13, @function
sub_405f13:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405f20
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	sub	rsp, 0x70
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x30], rsi
	mov	qword ptr [rbp - 0x20], rdx
	mov	qword ptr [rbp - 0x40], rcx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x50], r8
	nop	
	cmp	qword ptr [rbp - 0x50], 0
	je	.label_365
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x48], rax
	jmp	.label_366
.label_365:
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	qword ptr [rbp - 0x48], rax
	mov	rbp, rbp
	jmp	.label_366
.label_366:
	nop	
	mov	rax, qword ptr [rbp - 0x48]
	mov	qword ptr [rbp - 0x38], rax
	call	__errno_location
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rbp - 0x24], ecx
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 8]
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0x30]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 0x20]
	mov	rcx, qword ptr [rbp - 0x40]
	nop	
	mov	rax, qword ptr [rbp - 0x38]
	mov	r8d, dword ptr [rax]
	mov	rax, qword ptr [rbp - 0x38]
	mov	r9d, dword ptr [rax + 4]
	mov	rax, qword ptr [rbp - 0x38]
	add	rax, 8
	mov	r10, qword ptr [rbp - 0x38]
	mov	r10, qword ptr [r10 + 0x28]
	mov	r11, qword ptr [rbp - 0x38]
	mov	rbp, rbp
	mov	r11, qword ptr [r11 + 0x30]
	nop	
	mov	qword ptr [rsp], rax
	lea	rdi, [rdi]
	mov	qword ptr [rsp + 8], r10
	mov	qword ptr [rsp + 0x10], r11
	call	quotearg_buffer_restyled
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rax
	mov	r8d, dword ptr [rbp - 0x24]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x14], r8d
	mov	rbp, rbp
	call	__errno_location
	mov	r8d, dword ptr [rbp - 0x14]
	mov	dword ptr [rax], r8d
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	nop	
	add	rsp, 0x70
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x406014
	.globl sub_406014
	.type sub_406014, @function
sub_406014:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406020

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	mov	rbp, rsp
	push	rbx
	lea	rsi, [rsi]
	sub	rsp, 0x168
	mov	rax, qword ptr [rbp + 0x20]
	mov	rsp, rsp
	mov	r10, qword ptr [rbp + 0x18]
	nop	
	mov	r11, qword ptr [rbp + 0x10]
	mov	qword ptr [rbp - 0xa0], rdi
	nop	
	mov	qword ptr [rbp - 0x28], rsi
	mov	qword ptr [rbp - 0x150], rdx
	mov	qword ptr [rbp - 0x68], rcx
	mov	dword ptr [rbp - 0x58], r8d
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xa4], r9d
	mov	qword ptr [rbp - 0x100], r11
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x120], r10
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0xc0], rax
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x50], 0
	mov	qword ptr [rbp - 0x140], 0
	mov	qword ptr [rbp - 0x108], 0
	mov	rsp, rsp
	mov	qword ptr [rbp - 0xd0], 0
	mov	byte ptr [rbp - 0x89], 0
	mov	rbp, rbp
	call	__ctype_get_mb_cur_max
	mov	rbp, rbp
	cmp	rax, 1
	nop	
	sete	bl
	and	bl, 1
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xb5], bl
	mov	r8d, dword ptr [rbp - 0xa4]
	and	r8d, 2
	mov	rsp, rsp
	cmp	r8d, 0
	setne	bl
	and	bl, 1
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x3e], bl
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x42], 0
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0xa5], 0
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0xb7], 1
.label_470:
	mov	eax, dword ptr [rbp - 0x58]
	mov	rbp, rbp
	mov	ecx, eax
	lea	rsi, [rsi]
	mov	rdx, rcx
	sub	rdx, 0xa
	mov	qword ptr [rbp - 0x88], rcx
	mov	qword ptr [rbp - 0x130], rdx
	ja	.label_452
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x88]
	lea	rdi, [rdi]
	mov	rcx,  qword ptr [word ptr [+ (rax * 8) + label_530]]
	jmp	rcx
.label_682:
	mov	dword ptr [rbp - 0x58], 5
	mov	byte ptr [rbp - 0x3e], 1
.label_681:
	test	byte ptr [rbp - 0x3e], 1
	mov	rsp, rsp
	jne	.label_446
	jmp	.label_450
.label_450:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_451
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x22
.label_451:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	rsp, rsp
	jmp	.label_446
.label_446:
	movabs	rax, OFFSET FLAT:.str.10_0
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x89], 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x108], rax
	mov	qword ptr [rbp - 0xd0], 1
	jmp	.label_462
.label_683:
	nop	
	mov	byte ptr [rbp - 0x89], 1
	nop	
	mov	byte ptr [rbp - 0x3e], 0
	jmp	.label_462
.label_684:
	cmp	dword ptr [rbp - 0x58], 0xa
	je	.label_476
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.11_0
	mov	rbp, rbp
	mov	esi, dword ptr [rbp - 0x58]
	mov	rsp, rsp
	call	gettext_quote
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.12_0
	mov	qword ptr [rbp - 0x120], rax
	mov	esi, dword ptr [rbp - 0x58]
	call	gettext_quote
	mov	qword ptr [rbp - 0xc0], rax
.label_476:
	test	byte ptr [rbp - 0x3e], 1
	mov	rsp, rsp
	jne	.label_487
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x120]
	mov	qword ptr [rbp - 0x108], rax
.label_507:
	mov	rax, qword ptr [rbp - 0x108]
	lea	rdi, [rdi]
	cmp	byte ptr [rax], 0
	mov	rsp, rsp
	je	.label_493
	jmp	.label_494
.label_494:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_495
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x108]
	lea	rdi, [rdi]
	mov	cl, byte ptr [rax]
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rdx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rdx + rax], cl
.label_495:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_503
.label_503:
	mov	rax, qword ptr [rbp - 0x108]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x108], rax
	jmp	.label_507
.label_493:
	mov	rbp, rbp
	jmp	.label_487
.label_487:
	mov	byte ptr [rbp - 0x89], 1
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xc0]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x108], rax
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x108]
	nop	
	call	strlen
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xd0], rax
	mov	rbp, rbp
	jmp	.label_462
.label_679:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0x89], 1
.label_678:
	mov	byte ptr [rbp - 0x3e], 1
.label_680:
	nop	
	test	byte ptr [rbp - 0x3e], 1
	lea	rsi, [rsi]
	jne	.label_526
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x89], 1
.label_526:
	jmp	.label_529
.label_529:
	mov	dword ptr [rbp - 0x58], 2
	mov	rsp, rsp
	test	byte ptr [rbp - 0x3e], 1
	jne	.label_531
	jmp	.label_537
.label_537:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	jae	.label_558
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_558:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_531
.label_531:
	movabs	rax, OFFSET FLAT:.str.12_0
	mov	qword ptr [rbp - 0x108], rax
	mov	qword ptr [rbp - 0xd0], 1
	mov	rsp, rsp
	jmp	.label_462
.label_677:
	mov	byte ptr [rbp - 0x3e], 0
	jmp	.label_462
.label_452:
	call	abort
.label_462:
	mov	qword ptr [rbp - 0xd8], 0
.label_560:
	cmp	qword ptr [rbp - 0x68], -1
	jne	.label_556
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rcx, qword ptr [rbp - 0x150]
	movsx	edx, byte ptr [rcx + rax]
	cmp	edx, 0
	sete	sil
	and	sil, 1
	nop	
	movzx	edx, sil
	nop	
	mov	dword ptr [rbp - 0x7c], edx
	jmp	.label_557
.label_556:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0xd8]
	cmp	rax, qword ptr [rbp - 0x68]
	nop	
	sete	cl
	and	cl, 1
	movzx	edx, cl
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x7c], edx
.label_557:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x7c]
	lea	rdi, [rdi]
	cmp	eax, 0
	setne	cl
	xor	cl, 0xff
	mov	rbp, rbp
	test	cl, 1
	jne	.label_377
	mov	rbp, rbp
	jmp	.label_386
.label_377:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xa6], 0
	nop	
	mov	byte ptr [rbp - 0x3f], 0
	mov	byte ptr [rbp - 0x91], 0
	test	byte ptr [rbp - 0x89], 1
	mov	rsp, rsp
	je	.label_388
	cmp	dword ptr [rbp - 0x58], 2
	lea	rsi, [rsi]
	je	.label_388
	cmp	qword ptr [rbp - 0xd0], 0
	je	.label_388
	mov	rax, qword ptr [rbp - 0xd8]
	lea	rdi, [rdi]
	add	rax, qword ptr [rbp - 0xd0]
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x68], -1
	mov	qword ptr [rbp - 0x38], rax
	lea	rsi, [rsi]
	jne	.label_404
	mov	rsp, rsp
	mov	eax, 1
	mov	rbp, rbp
	mov	ecx, eax
	cmp	rcx, qword ptr [rbp - 0xd0]
	jae	.label_404
	mov	rdi, qword ptr [rbp - 0x150]
	lea	rdi, [rdi]
	call	strlen
	mov	qword ptr [rbp - 0x68], rax
	mov	qword ptr [rbp - 0xc8], rax
	jmp	.label_417
.label_404:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x68]
	mov	qword ptr [rbp - 0xc8], rax
.label_417:
	mov	rax, qword ptr [rbp - 0xc8]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x38]
	cmp	rcx, rax
	mov	rsp, rsp
	ja	.label_388
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x150]
	mov	rsp, rsp
	add	rax, qword ptr [rbp - 0xd8]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x108]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 0xd0]
	mov	rdi, rax
	call	memcmp
	cmp	eax, 0
	jne	.label_388
	nop	
	test	byte ptr [rbp - 0x3e], 1
	mov	rsp, rsp
	je	.label_441
	jmp	.label_396
.label_441:
	nop	
	mov	byte ptr [rbp - 0xa6], 1
.label_388:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rcx, qword ptr [rbp - 0x150]
	mov	dl, byte ptr [rcx + rax]
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x3d], dl
	movzx	esi, byte ptr [rbp - 0x3d]
	lea	rdi, [rdi]
	mov	eax, esi
	nop	
	mov	rcx, rax
	lea	rsi, [rsi]
	sub	rcx, 0x7e
	mov	qword ptr [rbp - 0x70], rax
	mov	qword ptr [rbp - 0x18], rcx
	ja	.label_449
	mov	rax, qword ptr [rbp - 0x70]
	lea	rsi, [rsi]
	mov	rcx,  qword ptr [word ptr [+ (rax * 8) + label_460]]
	nop	
	jmp	rcx
.label_702:
	mov	rbp, rbp
	test	byte ptr [rbp - 0x89], 1
	je	.label_466
	mov	rsp, rsp
	jmp	.label_500
.label_500:
	test	byte ptr [rbp - 0x3e], 1
	je	.label_472
	jmp	.label_396
.label_472:
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x3f], 1
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x58], 2
	jne	.label_479
	mov	rbp, rbp
	test	byte ptr [rbp - 0x42], 1
	mov	rbp, rbp
	jne	.label_479
	nop	
	jmp	.label_480
.label_480:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_483
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x27
.label_483:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_489
.label_489:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_491
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	rsp, rsp
	mov	byte ptr [rcx + rax], 0x24
.label_491:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	jmp	.label_496
.label_496:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_502
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_502:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 1
.label_479:
	lea	rsi, [rsi]
	jmp	.label_510
.label_510:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_511
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	rsp, rsp
	mov	byte ptr [rcx + rax], 0x5c
.label_511:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	add	rax, 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_443
.label_443:
	cmp	dword ptr [rbp - 0x58], 2
	je	.label_413
	mov	rax, qword ptr [rbp - 0xd8]
	add	rax, 1
	cmp	rax, qword ptr [rbp - 0x68]
	jae	.label_413
	mov	eax, 0x30
	mov	rcx, qword ptr [rbp - 0xd8]
	mov	rdx, qword ptr [rbp - 0x150]
	nop	
	movsx	esi, byte ptr [rdx + rcx + 1]
	cmp	eax, esi
	jg	.label_413
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x150]
	mov	rbp, rbp
	movsx	edx, byte ptr [rcx + rax + 1]
	mov	rbp, rbp
	cmp	edx, 0x39
	nop	
	jg	.label_413
	nop	
	jmp	.label_541
.label_541:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_542
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x30
.label_542:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_549
.label_549:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_474
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x30
.label_474:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_413
.label_413:
	mov	byte ptr [rbp - 0x3d], 0x30
	nop	
	jmp	.label_370
.label_466:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0xa4]
	nop	
	and	eax, 1
	mov	rsp, rsp
	cmp	eax, 0
	je	.label_543
	mov	rbp, rbp
	jmp	.label_368
.label_543:
	jmp	.label_370
.label_370:
	jmp	.label_372
.label_713:
	mov	eax, dword ptr [rbp - 0x58]
	mov	ecx, eax
	sub	ecx, 2
	mov	dword ptr [rbp - 0x78], eax
	nop	
	mov	dword ptr [rbp - 0x90], ecx
	mov	rsp, rsp
	je	.label_374
	mov	rbp, rbp
	jmp	.label_382
.label_382:
	mov	eax, dword ptr [rbp - 0x78]
	mov	rbp, rbp
	sub	eax, 5
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xb4], eax
	lea	rsi, [rsi]
	je	.label_384
	jmp	.label_392
.label_374:
	mov	rsp, rsp
	test	byte ptr [rbp - 0x3e], 1
	nop	
	je	.label_394
	jmp	.label_396
.label_394:
	jmp	.label_499
.label_384:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0xa4]
	and	eax, 4
	cmp	eax, 0
	je	.label_399
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0xd8]
	add	rax, 2
	cmp	rax, qword ptr [rbp - 0x68]
	nop	
	jae	.label_399
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xd8]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0x150]
	movsx	edx, byte ptr [rcx + rax + 1]
	mov	rbp, rbp
	cmp	edx, 0x3f
	lea	rdi, [rdi]
	jne	.label_399
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rcx, qword ptr [rbp - 0x150]
	lea	rdi, [rdi]
	movsx	edx, byte ptr [rax + rcx + 2]
	nop	
	mov	esi, edx
	sub	esi, 0x21
	mov	dword ptr [rbp - 0x144], edx
	mov	dword ptr [rbp - 0xdc], esi
	lea	rdi, [rdi]
	je	.label_412
	nop	
	jmp	.label_422
.label_422:
	nop	
	mov	eax, dword ptr [rbp - 0x144]
	add	eax, -0x27
	sub	eax, 3
	mov	dword ptr [rbp - 0x54], eax
	mov	rsp, rsp
	jb	.label_412
	jmp	.label_427
.label_427:
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0x144]
	mov	rbp, rbp
	sub	eax, 0x2d
	mov	dword ptr [rbp - 0x5c], eax
	mov	rsp, rsp
	je	.label_412
	jmp	.label_434
.label_434:
	mov	eax, dword ptr [rbp - 0x144]
	lea	rsi, [rsi]
	sub	eax, 0x2f
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x128], eax
	je	.label_412
	jmp	.label_565
.label_565:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x144]
	add	eax, -0x3c
	sub	eax, 2
	mov	dword ptr [rbp - 0xf4], eax
	lea	rdi, [rdi]
	ja	.label_555
	jmp	.label_412
.label_412:
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x3e], 1
	nop	
	je	.label_453
	jmp	.label_396
.label_453:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0xd8]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x150]
	lea	rdi, [rdi]
	mov	dl, byte ptr [rcx + rax + 2]
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x3d], dl
	mov	rax, qword ptr [rbp - 0xd8]
	lea	rdi, [rdi]
	add	rax, 2
	mov	qword ptr [rbp - 0xd8], rax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_456
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	rsp, rsp
	mov	byte ptr [rcx + rax], 0x3f
.label_456:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_478
.label_478:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_563
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x22
.label_563:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_485
.label_485:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_438
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x22
.label_438:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_488
.label_488:
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_505
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x3f
.label_505:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_401
.label_555:
	jmp	.label_401
.label_401:
	jmp	.label_399
.label_399:
	jmp	.label_499
.label_392:
	jmp	.label_499
.label_499:
	jmp	.label_372
.label_703:
	mov	byte ptr [rbp - 0xb6], 0x61
	jmp	.label_513
.label_704:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xb6], 0x62
	jmp	.label_513
.label_708:
	mov	byte ptr [rbp - 0xb6], 0x66
	lea	rdi, [rdi]
	jmp	.label_513
.label_706:
	mov	byte ptr [rbp - 0xb6], 0x6e
	mov	rbp, rbp
	jmp	.label_421
.label_709:
	mov	byte ptr [rbp - 0xb6], 0x72
	mov	rbp, rbp
	jmp	.label_421
.label_705:
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0xb6], 0x74
	jmp	.label_421
.label_707:
	mov	byte ptr [rbp - 0xb6], 0x76
	jmp	.label_513
.label_714:
	mov	al, byte ptr [rbp - 0x3d]
	nop	
	mov	byte ptr [rbp - 0xb6], al
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x58], 2
	jne	.label_528
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x3e], 1
	nop	
	je	.label_534
	nop	
	jmp	.label_396
.label_534:
	lea	rsi, [rsi]
	jmp	.label_458
.label_528:
	test	byte ptr [rbp - 0x89], 1
	je	.label_397
	mov	rsp, rsp
	test	byte ptr [rbp - 0x3e], 1
	lea	rsi, [rsi]
	je	.label_397
	nop	
	cmp	qword ptr [rbp - 0xd0], 0
	mov	rbp, rbp
	je	.label_397
	jmp	.label_458
.label_397:
	jmp	.label_421
.label_421:
	mov	rsp, rsp
	cmp	dword ptr [rbp - 0x58], 2
	lea	rsi, [rsi]
	jne	.label_550
	test	byte ptr [rbp - 0x3e], 1
	je	.label_550
	jmp	.label_396
.label_550:
	mov	rsp, rsp
	jmp	.label_513
.label_513:
	test	byte ptr [rbp - 0x89], 1
	lea	rdi, [rdi]
	je	.label_553
	mov	rsp, rsp
	mov	al, byte ptr [rbp - 0xb6]
	mov	byte ptr [rbp - 0x3d], al
	jmp	.label_461
.label_553:
	jmp	.label_372
.label_715:
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x68], -1
	jne	.label_533
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x150]
	nop	
	movsx	ecx, byte ptr [rax + 1]
	cmp	ecx, 0
	lea	rsi, [rsi]
	je	.label_371
	jmp	.label_369
.label_533:
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x68], 1
	je	.label_371
.label_369:
	nop	
	jmp	.label_372
.label_371:
	jmp	.label_378
.label_378:
	mov	rbp, rbp
	cmp	qword ptr [rbp - 0xd8], 0
	mov	rbp, rbp
	je	.label_540
	lea	rsi, [rsi]
	jmp	.label_372
.label_540:
	nop	
	jmp	.label_387
.label_387:
	mov	byte ptr [rbp - 0x91], 1
.label_710:
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x58], 2
	jne	.label_391
	test	byte ptr [rbp - 0x3e], 1
	lea	rdi, [rdi]
	je	.label_391
	jmp	.label_396
.label_391:
	lea	rsi, [rsi]
	jmp	.label_372
.label_712:
	mov	rbp, rbp
	mov	byte ptr [rbp - 0xa5], 1
	mov	byte ptr [rbp - 0x91], 1
	nop	
	cmp	dword ptr [rbp - 0x58], 2
	lea	rdi, [rdi]
	jne	.label_400
	test	byte ptr [rbp - 0x3e], 1
	nop	
	je	.label_547
	jmp	.label_396
.label_547:
	cmp	qword ptr [rbp - 0x28], 0
	je	.label_407
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x140], 0
	lea	rdi, [rdi]
	jne	.label_407
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x28]
	mov	qword ptr [rbp - 0x140], rax
	mov	qword ptr [rbp - 0x28], 0
.label_407:
	jmp	.label_418
.label_418:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rdi, [rdi]
	jae	.label_420
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	rbp, rbp
	mov	byte ptr [rcx + rax], 0x27
.label_420:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_424
.label_424:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	mov	rbp, rbp
	jae	.label_430
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x5c
.label_430:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	nop	
	jmp	.label_442
.label_442:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_448
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_448:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 0
.label_400:
	lea	rsi, [rsi]
	jmp	.label_372
.label_711:
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x91], 1
	jmp	.label_372
.label_449:
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0xb5], 1
	je	.label_467
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x110], 1
	movzx	eax, byte ptr [rbp - 0x3d]
	movsxd	rcx, eax
	mov	qword ptr [rbp - 0xf0], rcx
	call	__ctype_b_loc
	mov	rsp, rsp
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rbp - 0xf0]
	movzx	edx, word ptr [rax + rcx*2]
	and	edx, 0x4000
	nop	
	cmp	edx, 0
	lea	rdi, [rdi]
	setne	sil
	and	sil, 1
	mov	rbp, rbp
	mov	byte ptr [rbp - 0x40], sil
	lea	rsi, [rsi]
	jmp	.label_408
.label_467:
	xor	esi, esi
	mov	eax, 8
	lea	rdi, [rdi]
	mov	edx, eax
	lea	rcx, [rbp - 0x118]
	mov	rdi, rcx
	call	memset
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x110], 0
	lea	rsi, [rsi]
	mov	byte ptr [rbp - 0x40], 1
	cmp	qword ptr [rbp - 0x68], -1
	mov	rsp, rsp
	jne	.label_490
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x150]
	call	strlen
	mov	qword ptr [rbp - 0x68], rax
.label_490:
	jmp	.label_436
.label_436:
	lea	rdi, [rbp - 0x74]
	lea	rdi, [rdi]
	lea	rcx, [rbp - 0x118]
	nop	
	mov	rax, qword ptr [rbp - 0xd8]
	add	rax, qword ptr [rbp - 0x110]
	add	rax, qword ptr [rbp - 0x150]
	nop	
	mov	rdx, qword ptr [rbp - 0x68]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0xd8]
	add	rsi, qword ptr [rbp - 0x110]
	sub	rdx, rsi
	nop	
	mov	rsi, rax
	mov	rsp, rsp
	call	rpl_mbrtowc
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x10], rax
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x10], 0
	mov	rbp, rbp
	jne	.label_509
	jmp	.label_517
.label_509:
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x10], -1
	jne	.label_515
	mov	byte ptr [rbp - 0x40], 0
	jmp	.label_517
.label_515:
	nop	
	cmp	qword ptr [rbp - 0x10], -2
	jne	.label_520
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x40], 0
.label_539:
	lea	rdi, [rdi]
	xor	eax, eax
	lea	rdi, [rdi]
	mov	cl, al
	mov	rdx, qword ptr [rbp - 0xd8]
	add	rdx, qword ptr [rbp - 0x110]
	lea	rsi, [rsi]
	cmp	rdx, qword ptr [rbp - 0x68]
	mov	byte ptr [rbp - 0x41], cl
	mov	rsp, rsp
	jae	.label_523
	mov	rax, qword ptr [rbp - 0xd8]
	add	rax, qword ptr [rbp - 0x110]
	mov	rcx, qword ptr [rbp - 0x150]
	movsx	edx, byte ptr [rcx + rax]
	mov	rbp, rbp
	cmp	edx, 0
	setne	sil
	mov	byte ptr [rbp - 0x41], sil
.label_523:
	mov	al, byte ptr [rbp - 0x41]
	test	al, 1
	jne	.label_538
	jmp	.label_375
.label_538:
	mov	rax, qword ptr [rbp - 0x110]
	add	rax, 1
	mov	qword ptr [rbp - 0x110], rax
	jmp	.label_539
.label_375:
	jmp	.label_517
.label_520:
	test	byte ptr [rbp - 0x3e], 1
	je	.label_403
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x58], 2
	mov	rsp, rsp
	jne	.label_403
	mov	qword ptr [rbp - 0xe8], 1
.label_398:
	mov	rax, qword ptr [rbp - 0xe8]
	nop	
	cmp	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	jae	.label_551
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rcx, qword ptr [rbp - 0x110]
	lea	rdi, [rdi]
	add	rax, rcx
	mov	rcx, qword ptr [rbp - 0xe8]
	add	rax, rcx
	mov	rcx, qword ptr [rbp - 0x150]
	movsx	edx, byte ptr [rcx + rax]
	mov	esi, edx
	mov	rsp, rsp
	add	esi, -0x5b
	sub	esi, 2
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x2c], edx
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x124], esi
	jb	.label_367
	jmp	.label_566
.label_566:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x2c]
	sub	eax, 0x5e
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x148], eax
	je	.label_367
	jmp	.label_376
.label_376:
	mov	eax, dword ptr [rbp - 0x2c]
	sub	eax, 0x60
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x3c], eax
	mov	rsp, rsp
	je	.label_367
	jmp	.label_383
.label_383:
	mov	eax, dword ptr [rbp - 0x2c]
	lea	rdi, [rdi]
	sub	eax, 0x7c
	mov	dword ptr [rbp - 0x48], eax
	jne	.label_385
	mov	rsp, rsp
	jmp	.label_367
.label_367:
	mov	rsp, rsp
	jmp	.label_396
.label_385:
	jmp	.label_395
.label_395:
	mov	rsp, rsp
	jmp	.label_514
.label_514:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0xe8]
	add	rax, 1
	mov	qword ptr [rbp - 0xe8], rax
	jmp	.label_398
.label_551:
	mov	rbp, rbp
	jmp	.label_403
.label_403:
	mov	rbp, rbp
	mov	edi, dword ptr [rbp - 0x74]
	call	iswprint
	cmp	eax, 0
	jne	.label_406
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x40], 0
.label_406:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	add	rax, qword ptr [rbp - 0x110]
	mov	qword ptr [rbp - 0x110], rax
	jmp	.label_561
.label_561:
	lea	rsi, [rsi]
	jmp	.label_410
.label_410:
	jmp	.label_415
.label_415:
	lea	rsi, [rsi]
	lea	rdi, [rbp - 0x118]
	nop	
	call	mbsinit
	mov	rbp, rbp
	cmp	eax, 0
	mov	rsp, rsp
	setne	cl
	lea	rdi, [rdi]
	xor	cl, 0xff
	lea	rdi, [rdi]
	test	cl, 1
	jne	.label_436
.label_517:
	jmp	.label_408
.label_408:
	mov	rsp, rsp
	mov	eax, 1
	mov	rsp, rsp
	mov	ecx, eax
	mov	dl, byte ptr [rbp - 0x40]
	and	dl, 1
	mov	byte ptr [rbp - 0x91], dl
	cmp	rcx, qword ptr [rbp - 0x110]
	nop	
	jb	.label_423
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x89], 1
	lea	rdi, [rdi]
	je	.label_432
	mov	rsp, rsp
	test	byte ptr [rbp - 0x40], 1
	mov	rsp, rsp
	jne	.label_432
.label_423:
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rbp, rbp
	add	rax, qword ptr [rbp - 0x110]
	nop	
	mov	qword ptr [rbp - 0x20], rax
.label_409:
	mov	rbp, rbp
	test	byte ptr [rbp - 0x89], 1
	nop	
	je	.label_390
	mov	rsp, rsp
	test	byte ptr [rbp - 0x40], 1
	jne	.label_390
	jmp	.label_454
.label_454:
	test	byte ptr [rbp - 0x3e], 1
	lea	rsi, [rsi]
	je	.label_455
	jmp	.label_396
.label_455:
	mov	byte ptr [rbp - 0x3f], 1
	nop	
	cmp	dword ptr [rbp - 0x58], 2
	lea	rdi, [rdi]
	jne	.label_459
	test	byte ptr [rbp - 0x42], 1
	jne	.label_459
	lea	rdi, [rdi]
	jmp	.label_468
.label_468:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_469
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_469:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	jmp	.label_536
.label_536:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_481
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x24
.label_481:
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	nop	
	jmp	.label_486
.label_486:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_433
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_433:
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 1
.label_459:
	jmp	.label_497
.label_497:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rdi, [rdi]
	jae	.label_498
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x5c
.label_498:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_548
.label_548:
	jmp	.label_506
.label_506:
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_508
	nop	
	movzx	eax, byte ptr [rbp - 0x3d]
	nop	
	sar	eax, 6
	mov	rsp, rsp
	add	eax, 0x30
	mov	cl, al
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x50]
	mov	rsi, qword ptr [rbp - 0xa0]
	lea	rdi, [rdi]
	mov	byte ptr [rsi + rdx], cl
.label_508:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	add	rax, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	jmp	.label_519
.label_519:
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_524
	mov	rsp, rsp
	movzx	eax, byte ptr [rbp - 0x3d]
	mov	rbp, rbp
	sar	eax, 3
	lea	rsi, [rsi]
	and	eax, 7
	add	eax, 0x30
	lea	rsi, [rsi]
	mov	cl, al
	mov	rdx, qword ptr [rbp - 0x50]
	mov	rsi, qword ptr [rbp - 0xa0]
	mov	byte ptr [rsi + rdx], cl
.label_524:
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	movzx	eax, byte ptr [rbp - 0x3d]
	lea	rsi, [rsi]
	and	eax, 7
	lea	rdi, [rdi]
	add	eax, 0x30
	mov	cl, al
	mov	byte ptr [rbp - 0x3d], cl
	jmp	.label_532
.label_390:
	test	byte ptr [rbp - 0xa6], 1
	lea	rsi, [rsi]
	je	.label_465
	lea	rdi, [rdi]
	jmp	.label_544
.label_544:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_419
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x5c
.label_419:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0xa6], 0
.label_465:
	nop	
	jmp	.label_532
.label_532:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x20]
	mov	rcx, qword ptr [rbp - 0xd8]
	add	rcx, 1
	cmp	rax, rcx
	mov	rsp, rsp
	ja	.label_554
	jmp	.label_559
.label_554:
	lea	rsi, [rsi]
	jmp	.label_562
.label_562:
	test	byte ptr [rbp - 0x42], 1
	je	.label_564
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x3f], 1
	jne	.label_564
	lea	rsi, [rsi]
	jmp	.label_567
.label_567:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_380
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0xa0]
	nop	
	mov	byte ptr [rcx + rax], 0x27
.label_380:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	jmp	.label_381
.label_381:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	jae	.label_389
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rdi, [rdi]
	mov	byte ptr [rcx + rax], 0x27
.label_389:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 0
.label_564:
	nop	
	jmp	.label_402
.label_402:
	mov	rsp, rsp
	jmp	.label_527
.label_527:
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_405
	lea	rdi, [rdi]
	mov	al, byte ptr [rbp - 0x3d]
	mov	rcx, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 0xa0]
	mov	rbp, rbp
	mov	byte ptr [rdx + rcx], al
.label_405:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0xd8]
	mov	rcx, rax
	lea	rdi, [rdi]
	add	rcx, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xd8], rcx
	mov	rcx, qword ptr [rbp - 0x150]
	mov	dl, byte ptr [rcx + rax + 1]
	nop	
	mov	byte ptr [rbp - 0x3d], dl
	jmp	.label_409
.label_559:
	mov	rsp, rsp
	jmp	.label_458
.label_432:
	lea	rsi, [rsi]
	jmp	.label_372
.label_372:
	test	byte ptr [rbp - 0x89], 1
	mov	rbp, rbp
	je	.label_425
	cmp	dword ptr [rbp - 0x58], 2
	jne	.label_428
.label_425:
	test	byte ptr [rbp - 0x3e], 1
	je	.label_431
.label_428:
	mov	rbp, rbp
	cmp	qword ptr [rbp - 0x100], 0
	nop	
	je	.label_431
	movzx	eax, byte ptr [rbp - 0x3d]
	lea	rsi, [rsi]
	mov	ecx, eax
	shr	rcx, 5
	mov	rdx, qword ptr [rbp - 0x100]
	mov	eax, dword ptr [rdx + rcx*4]
	nop	
	movzx	esi, byte ptr [rbp - 0x3d]
	lea	rsi, [rsi]
	mov	ecx, esi
	and	rcx, 0x1f
	lea	rdi, [rdi]
	mov	esi, ecx
	mov	ecx, esi
	shr	eax, cl
	lea	rdi, [rdi]
	and	eax, 1
	cmp	eax, 0
	lea	rdi, [rdi]
	jne	.label_439
.label_431:
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0xa6], 1
	lea	rdi, [rdi]
	jne	.label_439
	mov	rsp, rsp
	jmp	.label_458
.label_439:
	nop	
	jmp	.label_461
.label_461:
	jmp	.label_463
.label_463:
	test	byte ptr [rbp - 0x3e], 1
	mov	rbp, rbp
	je	.label_464
	jmp	.label_396
.label_464:
	mov	byte ptr [rbp - 0x3f], 1
	cmp	dword ptr [rbp - 0x58], 2
	lea	rdi, [rdi]
	jne	.label_473
	test	byte ptr [rbp - 0x42], 1
	lea	rdi, [rdi]
	jne	.label_473
	lea	rdi, [rdi]
	jmp	.label_475
.label_475:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_477
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0xa0]
	nop	
	mov	byte ptr [rcx + rax], 0x27
.label_477:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_484
.label_484:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_414
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rdi, [rdi]
	mov	byte ptr [rcx + rax], 0x24
.label_414:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_492
.label_492:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	nop	
	jae	.label_501
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rsi, [rsi]
	mov	byte ptr [rcx + rax], 0x27
.label_501:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 1
.label_473:
	jmp	.label_444
.label_444:
	nop	
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_504
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	mov	rcx, qword ptr [rbp - 0xa0]
	nop	
	mov	byte ptr [rcx + rax], 0x5c
.label_504:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_512
.label_512:
	nop	
	jmp	.label_458
.label_458:
	jmp	.label_516
.label_516:
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x42], 1
	je	.label_518
	test	byte ptr [rbp - 0x3f], 1
	jne	.label_518
	lea	rdi, [rdi]
	jmp	.label_522
.label_522:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_525
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0x27
.label_525:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x50], rax
	jmp	.label_521
.label_521:
	mov	rax, qword ptr [rbp - 0x50]
	nop	
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_535
	mov	rax, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0xa0]
	lea	rdi, [rdi]
	mov	byte ptr [rcx + rax], 0x27
.label_535:
	mov	rax, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	mov	byte ptr [rbp - 0x42], 0
.label_518:
	jmp	.label_545
.label_545:
	nop	
	jmp	.label_546
.label_546:
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_435
	mov	al, byte ptr [rbp - 0x3d]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0x50]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0xa0]
	lea	rdi, [rdi]
	mov	byte ptr [rdx + rcx], al
.label_435:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x91], 1
	jne	.label_552
	mov	byte ptr [rbp - 0xb7], 0
.label_552:
	mov	rbp, rbp
	jmp	.label_368
.label_368:
	mov	rax, qword ptr [rbp - 0xd8]
	add	rax, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xd8], rax
	jmp	.label_560
.label_386:
	cmp	qword ptr [rbp - 0x50], 0
	mov	rbp, rbp
	jne	.label_373
	cmp	dword ptr [rbp - 0x58], 2
	nop	
	jne	.label_373
	mov	rbp, rbp
	test	byte ptr [rbp - 0x3e], 1
	lea	rdi, [rdi]
	je	.label_373
	nop	
	jmp	.label_396
.label_373:
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x58], 2
	jne	.label_379
	lea	rdi, [rdi]
	test	byte ptr [rbp - 0x3e], 1
	lea	rsi, [rsi]
	jne	.label_379
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0xa5], 1
	je	.label_379
	test	byte ptr [rbp - 0xb7], 1
	je	.label_393
	mov	r8d, 5
	mov	rdi, qword ptr [rbp - 0xa0]
	mov	rsi, qword ptr [rbp - 0x140]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x150]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x68]
	mov	rbp, rbp
	mov	r9d, dword ptr [rbp - 0xa4]
	mov	rax, qword ptr [rbp - 0x100]
	mov	rsp, rsp
	mov	r10, qword ptr [rbp - 0x120]
	mov	r11, qword ptr [rbp - 0xc0]
	lea	rsi, [rsi]
	mov	qword ptr [rsp], rax
	mov	qword ptr [rsp + 8], r10
	mov	rbp, rbp
	mov	qword ptr [rsp + 0x10], r11
	mov	rbp, rbp
	call	quotearg_buffer_restyled
	mov	rsp, rsp
	mov	qword ptr [rbp - 0xb0], rax
	nop	
	jmp	.label_411
.label_393:
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x28], 0
	lea	rsi, [rsi]
	jne	.label_416
	cmp	qword ptr [rbp - 0x140], 0
	lea	rsi, [rsi]
	je	.label_416
	nop	
	mov	rax, qword ptr [rbp - 0x140]
	mov	qword ptr [rbp - 0x28], rax
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x50], 0
	jmp	.label_470
.label_416:
	jmp	.label_426
.label_426:
	mov	rbp, rbp
	jmp	.label_379
.label_379:
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x108], 0
	je	.label_429
	lea	rsi, [rsi]
	test	byte ptr [rbp - 0x3e], 1
	jne	.label_429
	mov	rbp, rbp
	jmp	.label_437
.label_437:
	mov	rax, qword ptr [rbp - 0x108]
	cmp	byte ptr [rax], 0
	je	.label_440
	lea	rdi, [rdi]
	jmp	.label_445
.label_445:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	cmp	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	jae	.label_447
	mov	rax, qword ptr [rbp - 0x108]
	lea	rsi, [rsi]
	mov	cl, byte ptr [rax]
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x50]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 0xa0]
	mov	rbp, rbp
	mov	byte ptr [rdx + rax], cl
.label_447:
	mov	rax, qword ptr [rbp - 0x50]
	add	rax, 1
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	jmp	.label_457
.label_457:
	mov	rax, qword ptr [rbp - 0x108]
	lea	rdi, [rdi]
	add	rax, 1
	mov	qword ptr [rbp - 0x108], rax
	jmp	.label_437
.label_440:
	jmp	.label_429
.label_429:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x28]
	jae	.label_471
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	byte ptr [rcx + rax], 0
.label_471:
	mov	rax, qword ptr [rbp - 0x50]
	mov	qword ptr [rbp - 0xb0], rax
	jmp	.label_411
.label_396:
	nop	
	cmp	dword ptr [rbp - 0x58], 2
	mov	rsp, rsp
	jne	.label_482
	mov	rsp, rsp
	test	byte ptr [rbp - 0x89], 1
	mov	rsp, rsp
	je	.label_482
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x58], 4
.label_482:
	mov	rbp, rbp
	xor	eax, eax
	mov	ecx, eax
	mov	rdi, qword ptr [rbp - 0xa0]
	mov	rsi, qword ptr [rbp - 0x28]
	mov	rdx, qword ptr [rbp - 0x150]
	mov	r8, qword ptr [rbp - 0x68]
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x58]
	nop	
	mov	r9d, dword ptr [rbp - 0xa4]
	and	r9d, 0xfffffffd
	lea	rsi, [rsi]
	mov	r10, qword ptr [rbp - 0x120]
	mov	r11, qword ptr [rbp - 0xc0]
	mov	qword ptr [rbp - 0x138], rcx
	mov	rcx, r8
	lea	rdi, [rdi]
	mov	r8d, eax
	mov	qword ptr [rsp], 0
	mov	rsp, rsp
	mov	qword ptr [rsp + 8], r10
	mov	qword ptr [rsp + 0x10], r11
	call	quotearg_buffer_restyled
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xb0], rax
.label_411:
	mov	rax, qword ptr [rbp - 0xb0]
	mov	rbp, rbp
	add	rsp, 0x168
	pop	rbx
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x407ab3
	.globl sub_407ab3
	.type sub_407ab3, @function
sub_407ab3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407ac0
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	lea	rdi, [rdi]
	.section	.text
	.align	32
	#Procedure 0x407ac3
	.globl sub_407ac3
	.type sub_407ac3, @function
sub_407ac3:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	sub	rsp, 0x20
	mov	rbp, rbp
	xor	eax, eax
	lea	rdi, [rdi]
	mov	ecx, eax
	nop	
	mov	qword ptr [rbp - 0x18], rdi
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rsi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rdx
	mov	rdi, qword ptr [rbp - 0x18]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 8]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x20], rdx
	lea	rsi, [rsi]
	mov	rdx, rcx
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0x20]
	call	quotearg_alloc_mem
	add	rsp, 0x20
	lea	rdi, [rdi]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407b22
	.globl sub_407b22
	.type sub_407b22, @function
sub_407b22:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407b30

	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:
	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	push	rbx
	sub	rsp, 0x78
	mov	qword ptr [rbp - 0x28], rdi
	mov	qword ptr [rbp - 0x40], rsi
	mov	qword ptr [rbp - 0x48], rdx
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rcx
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x18], 0
	mov	rsp, rsp
	je	.label_568
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x18]
	mov	qword ptr [rbp - 0x60], rax
	mov	rsp, rsp
	jmp	.label_569
.label_568:
	movabs	rax, OFFSET FLAT:default_quoting_options
	mov	qword ptr [rbp - 0x60], rax
	lea	rsi, [rsi]
	jmp	.label_569
.label_569:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x60]
	mov	qword ptr [rbp - 0x58], rax
	mov	rsp, rsp
	call	__errno_location
	mov	rbp, rbp
	xor	ecx, ecx
	mov	edx, ecx
	lea	rsi, [rsi]
	mov	ecx, 1
	xor	esi, esi
	lea	rsi, [rsi]
	mov	edi, dword ptr [rax]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x1c], edi
	mov	rax, qword ptr [rbp - 0x58]
	mov	edi, dword ptr [rax + 4]
	cmp	qword ptr [rbp - 0x48], 0
	nop	
	cmovne	ecx, esi
	or	edi, ecx
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x34], edi
	mov	rax, qword ptr [rbp - 0x28]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x40]
	mov	r8, qword ptr [rbp - 0x58]
	mov	r8d, dword ptr [r8]
	lea	rsi, [rsi]
	mov	r9d, dword ptr [rbp - 0x34]
	lea	rdi, [rdi]
	mov	r10, qword ptr [rbp - 0x58]
	lea	rdi, [rdi]
	add	r10, 8
	mov	r11, qword ptr [rbp - 0x58]
	lea	rsi, [rsi]
	mov	r11, qword ptr [r11 + 0x28]
	mov	rbx, qword ptr [rbp - 0x58]
	nop	
	mov	rbx, qword ptr [rbx + 0x30]
	lea	rsi, [rsi]
	mov	rdi, rdx
	lea	rsi, [rsi]
	mov	rsi, rdx
	mov	rdx, rax
	mov	qword ptr [rsp], r10
	mov	rbp, rbp
	mov	qword ptr [rsp + 8], r11
	mov	rbp, rbp
	mov	qword ptr [rsp + 0x10], rbx
	call	quotearg_buffer_restyled
	mov	rbp, rbp
	add	rax, 1
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rax
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	call	xcharalloc
	mov	qword ptr [rbp - 0x30], rax
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x30]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rdx, qword ptr [rbp - 0x28]
	mov	rcx, qword ptr [rbp - 0x40]
	mov	rax, qword ptr [rbp - 0x58]
	mov	r8d, dword ptr [rax]
	mov	r9d, dword ptr [rbp - 0x34]
	mov	rax, qword ptr [rbp - 0x58]
	mov	rsp, rsp
	add	rax, 8
	mov	r10, qword ptr [rbp - 0x58]
	mov	r10, qword ptr [r10 + 0x28]
	mov	r11, qword ptr [rbp - 0x58]
	mov	r11, qword ptr [r11 + 0x30]
	mov	qword ptr [rsp], rax
	mov	qword ptr [rsp + 8], r10
	mov	qword ptr [rsp + 0x10], r11
	lea	rdi, [rdi]
	call	quotearg_buffer_restyled
	lea	rsi, [rsi]
	mov	r8d, dword ptr [rbp - 0x1c]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rax
	mov	dword ptr [rbp - 0x64], r8d
	nop	
	call	__errno_location
	nop	
	mov	r8d, dword ptr [rbp - 0x64]
	nop	
	mov	dword ptr [rax], r8d
	nop	
	cmp	qword ptr [rbp - 0x48], 0
	je	.label_570
	mov	rax, qword ptr [rbp - 0x10]
	sub	rax, 1
	nop	
	mov	rcx, qword ptr [rbp - 0x48]
	mov	qword ptr [rcx], rax
.label_570:
	mov	rax, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	add	rsp, 0x78
	nop	
	pop	rbx
	lea	rsi, [rsi]
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x407cf5
	.globl sub_407cf5
	.type sub_407cf5, @function
sub_407cf5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407d00
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	nop	
	mov	rax,  qword ptr [word ptr [slotvec]]
	mov	qword ptr [rbp - 8], rax
	mov	dword ptr [rbp - 0xc], 1
.label_575:
	mov	eax, dword ptr [rbp - 0xc]
	cmp	eax,  dword ptr [dword ptr [nslots]]
	jge	.label_574
	nop	
	movsxd	rax, dword ptr [rbp - 0xc]
	mov	rbp, rbp
	shl	rax, 4
	lea	rsi, [rsi]
	add	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rax + 8]
	call	free
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0xc]
	nop	
	add	eax, 1
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0xc], eax
	mov	rsp, rsp
	jmp	.label_575
.label_574:
	lea	rdi, [rdi]
	movabs	rax, OFFSET FLAT:slot0
	mov	rcx, qword ptr [rbp - 8]
	lea	rdi, [rdi]
	cmp	qword ptr [rcx + 8], rax
	mov	rsp, rsp
	je	.label_573
	mov	rax, qword ptr [rbp - 8]
	mov	rdi, qword ptr [rax + 8]
	call	free
	movabs	rax, OFFSET FLAT:slot0
	mov	qword ptr [word ptr [slotvec0]],  0x100
	mov	rbp, rbp
	mov	qword ptr [word ptr [label_571]],  rax
.label_573:
	movabs	rax, OFFSET FLAT:slotvec0
	cmp	qword ptr [rbp - 8], rax
	je	.label_572
	nop	
	mov	rax, qword ptr [rbp - 8]
	mov	rdi, rax
	mov	rsp, rsp
	call	free
	mov	rbp, rbp
	movabs	rax, OFFSET FLAT:slotvec0
	mov	qword ptr [word ptr [slotvec]],  rax
.label_572:
	mov	dword ptr [dword ptr [nslots]],  1
	add	rsp, 0x10
	mov	rbp, rbp
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407e02
	.globl sub_407e02
	.type sub_407e02, @function
sub_407e02:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407e10

	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	rbp, rbp
	mov	rdx, -1
	mov	rsp, rsp
	movabs	rcx, OFFSET FLAT:default_quoting_options
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc], edi
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rsi
	mov	edi, dword ptr [rbp - 0xc]
	mov	rsi, qword ptr [rbp - 8]
	call	quotearg_n_options
	add	rsp, 0x10
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407e51
	.globl sub_407e51
	.type sub_407e51, @function
sub_407e51:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407e60

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	nop	
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x90
	mov	dword ptr [rbp - 0x64], edi
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x18], rsi
	mov	qword ptr [rbp - 0x60], rdx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x28], rcx
	nop	
	call	__errno_location
	mov	edi, dword ptr [rax]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x44], edi
	mov	rax,  qword ptr [word ptr [slotvec]]
	mov	qword ptr [rbp - 8], rax
	cmp	dword ptr [rbp - 0x64], 0
	jge	.label_577
	call	abort
.label_577:
	mov	rbp, rbp
	mov	eax,  dword ptr [dword ptr [nslots]]
	cmp	eax, dword ptr [rbp - 0x64]
	jg	.label_580
	lea	rdi, [rdi]
	movabs	rax, OFFSET FLAT:slotvec0
	cmp	qword ptr [rbp - 8], rax
	lea	rdi, [rdi]
	sete	cl
	mov	rbp, rbp
	and	cl, 1
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x51], cl
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc], 0x7ffffffe
	mov	edx, dword ptr [rbp - 0xc]
	cmp	edx, dword ptr [rbp - 0x64]
	mov	rsp, rsp
	jge	.label_581
	call	xalloc_die
.label_581:
	test	byte ptr [rbp - 0x51], 1
	je	.label_582
	mov	rsp, rsp
	xor	eax, eax
	mov	rbp, rbp
	mov	ecx, eax
	mov	qword ptr [rbp - 0x30], rcx
	jmp	.label_578
.label_582:
	mov	rax, qword ptr [rbp - 8]
	mov	qword ptr [rbp - 0x30], rax
.label_578:
	mov	rax, qword ptr [rbp - 0x30]
	mov	ecx, dword ptr [rbp - 0x64]
	add	ecx, 1
	movsxd	rdx, ecx
	shl	rdx, 4
	mov	rsp, rsp
	mov	rdi, rax
	mov	rsi, rdx
	call	xrealloc
	mov	qword ptr [rbp - 8], rax
	mov	qword ptr [word ptr [slotvec]],  rax
	test	byte ptr [rbp - 0x51], 1
	lea	rdi, [rdi]
	je	.label_576
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 8]
	mov	rcx,  qword ptr [word ptr [slotvec0]]
	mov	qword ptr [rax], rcx
	mov	rcx,  qword ptr [word ptr [label_571]]
	mov	rbp, rbp
	mov	qword ptr [rax + 8], rcx
.label_576:
	xor	esi, esi
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 8]
	mov	rsp, rsp
	movsxd	rcx,  dword ptr [dword ptr [nslots]]
	mov	rsp, rsp
	shl	rcx, 4
	add	rax, rcx
	mov	edx, dword ptr [rbp - 0x64]
	nop	
	add	edx, 1
	mov	rbp, rbp
	sub	edx,  dword ptr [dword ptr [nslots]]
	movsxd	rcx, edx
	shl	rcx, 4
	mov	rdi, rax
	mov	rsp, rsp
	mov	rdx, rcx
	mov	rsp, rsp
	call	memset
	lea	rdi, [rdi]
	mov	esi, dword ptr [rbp - 0x64]
	add	esi, 1
	mov	dword ptr [dword ptr [nslots]],  esi
.label_580:
	movsxd	rax, dword ptr [rbp - 0x64]
	lea	rsi, [rsi]
	shl	rax, 4
	lea	rsi, [rsi]
	add	rax, qword ptr [rbp - 8]
	mov	rax, qword ptr [rax]
	mov	qword ptr [rbp - 0x38], rax
	nop	
	movsxd	rax, dword ptr [rbp - 0x64]
	lea	rdi, [rdi]
	shl	rax, 4
	lea	rdi, [rdi]
	add	rax, qword ptr [rbp - 8]
	nop	
	mov	rax, qword ptr [rax + 8]
	mov	qword ptr [rbp - 0x70], rax
	mov	rax, qword ptr [rbp - 0x28]
	nop	
	mov	ecx, dword ptr [rax + 4]
	lea	rsi, [rsi]
	or	ecx, 1
	mov	dword ptr [rbp - 0x20], ecx
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x70]
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0x38]
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x60]
	mov	rax, qword ptr [rbp - 0x28]
	lea	rsi, [rsi]
	mov	r8d, dword ptr [rax]
	mov	rbp, rbp
	mov	r9d, dword ptr [rbp - 0x20]
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x28]
	add	rax, 8
	nop	
	mov	r10, qword ptr [rbp - 0x28]
	lea	rdi, [rdi]
	mov	r10, qword ptr [r10 + 0x28]
	lea	rdi, [rdi]
	mov	r11, qword ptr [rbp - 0x28]
	nop	
	mov	r11, qword ptr [r11 + 0x30]
	mov	qword ptr [rsp], rax
	mov	rsp, rsp
	mov	qword ptr [rsp + 8], r10
	mov	qword ptr [rsp + 0x10], r11
	lea	rdi, [rdi]
	call	quotearg_buffer_restyled
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x50], rax
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x38]
	lea	rdi, [rdi]
	cmp	rax, qword ptr [rbp - 0x50]
	lea	rsi, [rsi]
	ja	.label_583
	lea	rdi, [rdi]
	movabs	rax, OFFSET FLAT:slot0
	mov	rcx, qword ptr [rbp - 0x50]
	lea	rdi, [rdi]
	add	rcx, 1
	mov	qword ptr [rbp - 0x38], rcx
	lea	rsi, [rsi]
	movsxd	rdx, dword ptr [rbp - 0x64]
	shl	rdx, 4
	add	rdx, qword ptr [rbp - 8]
	mov	qword ptr [rdx], rcx
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x70], rax
	mov	rbp, rbp
	je	.label_579
	mov	rdi, qword ptr [rbp - 0x70]
	lea	rsi, [rsi]
	call	free
.label_579:
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x38]
	call	xcharalloc
	mov	qword ptr [rbp - 0x70], rax
	lea	rdi, [rdi]
	movsxd	rdi, dword ptr [rbp - 0x64]
	lea	rdi, [rdi]
	shl	rdi, 4
	add	rdi, qword ptr [rbp - 8]
	lea	rdi, [rdi]
	mov	qword ptr [rdi + 8], rax
	mov	rdi, qword ptr [rbp - 0x70]
	mov	rsi, qword ptr [rbp - 0x38]
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x60]
	mov	rax, qword ptr [rbp - 0x28]
	mov	r8d, dword ptr [rax]
	mov	r9d, dword ptr [rbp - 0x20]
	mov	rax, qword ptr [rbp - 0x28]
	add	rax, 8
	mov	r10, qword ptr [rbp - 0x28]
	mov	r10, qword ptr [r10 + 0x28]
	mov	r11, qword ptr [rbp - 0x28]
	mov	rbp, rbp
	mov	r11, qword ptr [r11 + 0x30]
	nop	
	mov	qword ptr [rsp], rax
	mov	qword ptr [rsp + 8], r10
	mov	qword ptr [rsp + 0x10], r11
	mov	rsp, rsp
	call	quotearg_buffer_restyled
	mov	qword ptr [rbp - 0x40], rax
.label_583:
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x44]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x1c], eax
	mov	rbp, rbp
	call	__errno_location
	mov	ecx, dword ptr [rbp - 0x1c]
	mov	dword ptr [rax], ecx
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x70]
	add	rsp, 0x90
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40818e
	.globl sub_40818e
	.type sub_40818e, @function
sub_40818e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x408190

	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:
	mov	rsp, rsp
	push	rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x20
	nop	
	movabs	rcx, OFFSET FLAT:default_quoting_options
	mov	dword ptr [rbp - 0x14], edi
	mov	qword ptr [rbp - 8], rsi
	mov	qword ptr [rbp - 0x10], rdx
	mov	edi, dword ptr [rbp - 0x14]
	mov	rsi, qword ptr [rbp - 8]
	mov	rdx, qword ptr [rbp - 0x10]
	call	quotearg_n_options
	add	rsp, 0x20
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4081ca
	.globl sub_4081ca
	.type sub_4081ca, @function
sub_4081ca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4081d0
	.globl quotearg
	.type quotearg, @function
quotearg:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4081d1
	.globl sub_4081d1
	.type sub_4081d1, @function
sub_4081d1:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x10
	xor	eax, eax
	nop	
	mov	qword ptr [rbp - 8], rdi
	mov	rsi, qword ptr [rbp - 8]
	mov	edi, eax
	call	quotearg_n
	lea	rdi, [rdi]
	add	rsp, 0x10
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4081fd
	.globl sub_4081fd
	.type sub_4081fd, @function
sub_4081fd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408200
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x10
	xor	eax, eax
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rdi
	mov	qword ptr [rbp - 8], rsi
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 8]
	mov	edi, eax
	mov	rsp, rsp
	call	quotearg_n_mem
	add	rsp, 0x10
	nop	
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40823d
	.globl sub_40823d
	.type sub_40823d, @function
sub_40823d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408240

	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	nop	
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x50
	lea	rax, [rbp - 0x40]
	mov	rsp, rsp
	mov	dword ptr [rbp - 8], edi
	mov	dword ptr [rbp - 4], esi
	nop	
	mov	qword ptr [rbp - 0x48], rdx
	lea	rdi, [rdi]
	mov	esi, dword ptr [rbp - 4]
	mov	rdi, rax
	call	quoting_options_from_style
	mov	rdx, -1
	lea	rcx, [rbp - 0x40]
	mov	edi, dword ptr [rbp - 8]
	mov	rsi, qword ptr [rbp - 0x48]
	call	quotearg_n_options
	lea	rdi, [rdi]
	add	rsp, 0x50
	lea	rdi, [rdi]
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x408295
	.globl sub_408295
	.type sub_408295, @function
sub_408295:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4082a0

	.globl quoting_options_from_style
	.type quoting_options_from_style, @function
quoting_options_from_style:
	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x50
	mov	rax, rdi
	xor	ecx, ecx
	mov	rsp, rsp
	mov	edx, 0x38
	lea	r8, [rbp - 0x40]
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x44], esi
	mov	qword ptr [rbp - 0x50], rdi
	nop	
	mov	rdi, r8
	mov	esi, ecx
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 8], rax
	call	memset
	nop	
	cmp	dword ptr [rbp - 0x44], 0xa
	jne	.label_584
	call	abort
.label_584:
	lea	rsi, [rsi]
	mov	eax, 0x38
	lea	rdi, [rdi]
	mov	edx, eax
	lea	rcx, [rbp - 0x40]
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x44]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x40], eax
	nop	
	mov	rsi, qword ptr [rbp - 0x50]
	mov	rdi, rsi
	lea	rsi, [rsi]
	mov	rsi, rcx
	lea	rdi, [rdi]
	call	memcpy
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	add	rsp, 0x50
	mov	rsp, rsp
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x408331
	.globl sub_408331
	.type sub_408331, @function
sub_408331:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408340

	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:
	mov	rbp, rbp
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	sub	rsp, 0x50
	mov	rsp, rsp
	lea	rax, [rbp - 0x40]
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x48], edi
	nop	
	mov	dword ptr [rbp - 0x44], esi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x50], rdx
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 8], rcx
	lea	rsi, [rsi]
	mov	esi, dword ptr [rbp - 0x44]
	nop	
	mov	rdi, rax
	call	quoting_options_from_style
	lea	rcx, [rbp - 0x40]
	nop	
	mov	edi, dword ptr [rbp - 0x48]
	nop	
	mov	rsi, qword ptr [rbp - 0x50]
	mov	rdx, qword ptr [rbp - 8]
	call	quotearg_n_options
	mov	rsp, rsp
	add	rsp, 0x50
	mov	rsp, rsp
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4083a1
	.globl sub_4083a1
	.type sub_4083a1, @function
sub_4083a1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4083b0

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	xor	eax, eax
	mov	rbp, rbp
	mov	dword ptr [rbp - 0xc], edi
	mov	qword ptr [rbp - 8], rsi
	mov	esi, dword ptr [rbp - 0xc]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 8]
	mov	edi, eax
	mov	rbp, rbp
	call	quotearg_n_style
	nop	
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4083e2
	.globl sub_4083e2
	.type sub_4083e2, @function
sub_4083e2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4083f0
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	push	rbp
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x20
	xor	eax, eax
	mov	dword ptr [rbp - 4], edi
	mov	qword ptr [rbp - 0x18], rsi
	mov	qword ptr [rbp - 0x10], rdx
	mov	esi, dword ptr [rbp - 4]
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rcx, qword ptr [rbp - 0x10]
	mov	edi, eax
	call	quotearg_n_style_mem
	add	rsp, 0x20
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408423
	.globl sub_408423
	.type sub_408423, @function
sub_408423:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408430

	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:
	push	rbp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x70
	mov	rbp, rbp
	mov	al, dl
	lea	rcx, [rbp - 0x68]
	lea	rdi, [rdi]
	mov	edx, 1
	movabs	r8, OFFSET FLAT:default_quoting_options
	mov	r9d, 0x38
	mov	r10d, r9d
	nop	
	mov	qword ptr [rbp - 0x10], rdi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x28], rsi
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x11], al
	lea	rsi, [rsi]
	mov	rsi, rcx
	nop	
	mov	rdi, rsi
	mov	rsi, r8
	mov	rbp, rbp
	mov	dword ptr [rbp - 4], edx
	lea	rsi, [rsi]
	mov	rdx, r10
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x20], rcx
	call	memcpy
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x20]
	lea	rsi, [rsi]
	movsx	esi, byte ptr [rbp - 0x11]
	mov	edx, dword ptr [rbp - 4]
	nop	
	call	set_char_quoting
	mov	rsp, rsp
	xor	edi, edi
	lea	rcx, [rbp - 0x68]
	nop	
	mov	rsi, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 0x28]
	nop	
	mov	dword ptr [rbp - 0x2c], eax
	nop	
	call	quotearg_n_options
	lea	rsi, [rsi]
	add	rsp, 0x70
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4084d5
	.globl sub_4084d5
	.type sub_4084d5, @function
sub_4084d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4084e0

	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x10
	mov	rbp, rbp
	mov	al, sil
	mov	rsi, -1
	mov	qword ptr [rbp - 8], rdi
	mov	byte ptr [rbp - 9], al
	nop	
	mov	rdi, qword ptr [rbp - 8]
	movsx	edx, byte ptr [rbp - 9]
	call	quotearg_char_mem
	add	rsp, 0x10
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408519
	.globl sub_408519
	.type sub_408519, @function
sub_408519:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408520

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	nop	
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x10
	nop	
	mov	esi, 0x3a
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	quotearg_char
	lea	rsi, [rsi]
	add	rsp, 0x10
	lea	rsi, [rsi]
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40854e
	.globl sub_40854e
	.type sub_40854e, @function
sub_40854e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x408550
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	push	rbp
	mov	rbp, rsp
	lea	rdi, [rdi]
	sub	rsp, 0x10
	lea	rsi, [rsi]
	mov	edx, 0x3a
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x10], rsi
	mov	rdi, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	call	quotearg_char_mem
	mov	rsp, rsp
	add	rsp, 0x10
	lea	rsi, [rsi]
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408587
	.globl sub_408587
	.type sub_408587, @function
sub_408587:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408590
	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:

	push	rbp
	mov	rbp, rsp
	sub	rsp, 0xb0
	lea	rax, [rbp - 0x40]
	mov	dword ptr [rbp - 0x54], edi
	mov	dword ptr [rbp - 4], esi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xa8], rdx
	mov	esi, dword ptr [rbp - 4]
	mov	rbp, rbp
	mov	rdi, rax
	nop	
	call	quoting_options_from_style
	lea	rdi, [rdi]
	lea	rax, [rbp - 0x90]
	mov	rsp, rsp
	mov	esi, 0x3a
	mov	rbp, rbp
	mov	edx, 1
	mov	ecx, 0x38
	mov	edi, ecx
	lea	rsi, [rsi]
	lea	r8, [rbp - 0x40]
	mov	r9, rax
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x50], rdi
	mov	rsp, rsp
	mov	rdi, r9
	nop	
	mov	dword ptr [rbp - 0x94], esi
	mov	rsi, r8
	mov	r8, qword ptr [rbp - 0x50]
	mov	dword ptr [rbp - 0x44], edx
	nop	
	mov	rdx, r8
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xa0], rax
	call	memcpy
	mov	rdi, qword ptr [rbp - 0xa0]
	mov	esi, dword ptr [rbp - 0x94]
	mov	edx, dword ptr [rbp - 0x44]
	lea	rsi, [rsi]
	call	set_char_quoting
	mov	rdx, -1
	mov	rsp, rsp
	lea	rcx, [rbp - 0x90]
	mov	rsp, rsp
	mov	edi, dword ptr [rbp - 0x54]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0xa8]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x48], eax
	call	quotearg_n_options
	lea	rsi, [rsi]
	add	rsp, 0xb0
	lea	rdi, [rdi]
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408670

	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:
	lea	rsi, [rsi]
	push	rbp
	nop	
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x20
	mov	rbp, rbp
	mov	r8, -1
	mov	dword ptr [rbp - 0xc], edi
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x18], rsi
	mov	qword ptr [rbp - 0x20], rdx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rcx
	mov	edi, dword ptr [rbp - 0xc]
	nop	
	mov	rsi, qword ptr [rbp - 0x18]
	mov	rdx, qword ptr [rbp - 0x20]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 8]
	mov	rbp, rbp
	call	quotearg_n_custom_mem
	add	rsp, 0x20
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4086bf
	.globl sub_4086bf
	.type sub_4086bf, @function
sub_4086bf:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4086c0

	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:
	mov	rsp, rsp
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	sub	rsp, 0x70
	lea	rax, [rbp - 0x38]
	lea	rsi, [rsi]
	movabs	r9, OFFSET FLAT:default_quoting_options
	nop	
	mov	r10d, 0x38
	mov	rbp, rbp
	mov	r11d, r10d
	mov	dword ptr [rbp - 0x3c], edi
	mov	qword ptr [rbp - 0x48], rsi
	mov	qword ptr [rbp - 0x58], rdx
	mov	qword ptr [rbp - 0x50], rcx
	mov	qword ptr [rbp - 0x68], r8
	mov	rcx, rax
	mov	rdi, rcx
	mov	rbp, rbp
	mov	rsi, r9
	mov	rbp, rbp
	mov	rdx, r11
	mov	qword ptr [rbp - 0x60], rax
	call	memcpy
	mov	rsi, qword ptr [rbp - 0x48]
	mov	rdx, qword ptr [rbp - 0x58]
	nop	
	mov	rdi, qword ptr [rbp - 0x60]
	mov	rbp, rbp
	call	set_custom_quoting
	lea	rcx, [rbp - 0x38]
	mov	rsp, rsp
	mov	edi, dword ptr [rbp - 0x3c]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x50]
	mov	rdx, qword ptr [rbp - 0x68]
	call	quotearg_n_options
	add	rsp, 0x70
	mov	rsp, rsp
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x408753
	.globl sub_408753
	.type sub_408753, @function
sub_408753:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408760
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	mov	rsp, rsp
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	sub	rsp, 0x20
	nop	
	xor	eax, eax
	mov	qword ptr [rbp - 8], rdi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], rsi
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rdx
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 8]
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rcx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	edi, eax
	lea	rdi, [rdi]
	call	quotearg_n_custom
	add	rsp, 0x20
	mov	rbp, rbp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4087a8
	.globl sub_4087a8
	.type sub_4087a8, @function
sub_4087a8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4087b0
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	lea	rdi, [rdi]
	.section	.text
	.align	32
	#Procedure 0x4087b3
	.globl sub_4087b3
	.type sub_4087b3, @function
sub_4087b3:

	push	rbp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x20
	mov	rsp, rsp
	xor	eax, eax
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rdi
	nop	
	mov	qword ptr [rbp - 0x20], rsi
	mov	rsp, rsp
	mov	qword ptr [rbp - 8], rdx
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rcx
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x20]
	mov	rcx, qword ptr [rbp - 8]
	lea	rdi, [rdi]
	mov	r8, qword ptr [rbp - 0x18]
	mov	edi, eax
	call	quotearg_n_custom_mem
	mov	rbp, rbp
	add	rsp, 0x20
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x408806
	.globl sub_408806
	.type sub_408806, @function
sub_408806:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408810

	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x20
	movabs	rcx, OFFSET FLAT:quote_quoting_options
	mov	dword ptr [rbp - 4], edi
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x18], rsi
	mov	qword ptr [rbp - 0x10], rdx
	mov	edi, dword ptr [rbp - 4]
	nop	
	mov	rsi, qword ptr [rbp - 0x18]
	mov	rdx, qword ptr [rbp - 0x10]
	call	quotearg_n_options
	lea	rdi, [rdi]
	add	rsp, 0x20
	mov	rbp, rbp
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x40884e
	.globl sub_40884e
	.type sub_40884e, @function
sub_40884e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x408850
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	push	rbp
	nop	
	mov	rbp, rsp
	sub	rsp, 0x10
	lea	rdi, [rdi]
	xor	eax, eax
	mov	qword ptr [rbp - 8], rdi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rsi
	mov	rsi, qword ptr [rbp - 8]
	nop	
	mov	rdx, qword ptr [rbp - 0x10]
	mov	edi, eax
	mov	rsp, rsp
	call	quote_n_mem
	add	rsp, 0x10
	lea	rdi, [rdi]
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408888
	.globl sub_408888
	.type sub_408888, @function
sub_408888:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408890

	.globl quote_n
	.type quote_n, @function
quote_n:
	push	rbp
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x10
	mov	rsp, rsp
	mov	rdx, -1
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], edi
	mov	qword ptr [rbp - 0x10], rsi
	nop	
	mov	edi, dword ptr [rbp - 4]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x10]
	call	quote_n_mem
	add	rsp, 0x10
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4088c6
	.globl sub_4088c6
	.type sub_4088c6, @function
sub_4088c6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4088d0

	.globl quote
	.type quote, @function
quote:
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	sub	rsp, 0x10
	lea	rdi, [rdi]
	xor	eax, eax
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rdi
	mov	rsi, qword ptr [rbp - 8]
	mov	edi, eax
	lea	rdi, [rdi]
	call	quote_n
	nop	
	add	rsp, 0x10
	lea	rdi, [rdi]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408902
	.globl sub_408902
	.type sub_408902, @function
sub_408902:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408910

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x30
	nop	
	mov	qword ptr [rbp - 0x10], rdi
	mov	dword ptr [rbp - 4], esi
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	call	gettext
	mov	qword ptr [rbp - 0x18], rax
	mov	rax, qword ptr [rbp - 0x18]
	mov	rbp, rbp
	cmp	rax, qword ptr [rbp - 0x10]
	je	.label_588
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x18]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x28], rax
	jmp	.label_585
.label_588:
	call	locale_charset
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:.str.13_0
	nop	
	mov	qword ptr [rbp - 0x20], rax
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x20]
	mov	rsp, rsp
	call	c_strcasecmp
	cmp	eax, 0
	jne	.label_586
	movabs	rax, OFFSET FLAT:.str.15_0
	movabs	rcx, OFFSET FLAT:.str.14_0
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	movsx	esi, byte ptr [rdx]
	cmp	esi, 0x60
	cmove	rax, rcx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x28], rax
	jmp	.label_585
.label_586:
	nop	
	movabs	rsi, OFFSET FLAT:.str.16
	mov	rdi, qword ptr [rbp - 0x20]
	lea	rdi, [rdi]
	call	c_strcasecmp
	cmp	eax, 0
	lea	rdi, [rdi]
	jne	.label_587
	nop	
	movabs	rax, OFFSET FLAT:.str.18_1
	movabs	rcx, OFFSET FLAT:.str.17_1
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	movsx	esi, byte ptr [rdx]
	cmp	esi, 0x60
	cmove	rax, rcx
	mov	qword ptr [rbp - 0x28], rax
	mov	rbp, rbp
	jmp	.label_585
.label_587:
	nop	
	movabs	rax, OFFSET FLAT:.str.12_0
	movabs	rcx, OFFSET FLAT:.str.10_0
	lea	rsi, [rsi]
	cmp	dword ptr [rbp - 4], 9
	lea	rdi, [rdi]
	cmove	rax, rcx
	mov	qword ptr [rbp - 0x28], rax
.label_585:
	mov	rax, qword ptr [rbp - 0x28]
	add	rsp, 0x30
	mov	rsp, rsp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408a46
	.globl sub_408a46
	.type sub_408a46, @function
sub_408a46:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408a50

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	nop	
	push	rbp
	mov	rbp, rsp
	push	r14
	mov	rbp, rbp
	push	rbx
	sub	rsp, 0x170
	mov	qword ptr [rbp - 0xb8], rdi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x60], rsi
	mov	qword ptr [rbp - 0x78], rdx
	mov	qword ptr [rbp - 0x20], rcx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x98], r8
	mov	qword ptr [rbp - 0x48], r9
	cmp	qword ptr [rbp - 0x60], 0
	je	.label_592
	movabs	rsi, OFFSET FLAT:.str_5
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0xb8]
	nop	
	mov	rdx, qword ptr [rbp - 0x60]
	mov	rcx, qword ptr [rbp - 0x78]
	mov	rsp, rsp
	mov	r8, qword ptr [rbp - 0x20]
	lea	rsi, [rsi]
	mov	al, 0
	lea	rdi, [rdi]
	call	fprintf
	mov	dword ptr [rbp - 0x6c], eax
	lea	rsi, [rsi]
	jmp	.label_590
.label_592:
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str.1_3
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0xb8]
	mov	rdx, qword ptr [rbp - 0x78]
	nop	
	mov	rcx, qword ptr [rbp - 0x20]
	mov	rbp, rbp
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0x114], eax
.label_590:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0xb8]
	mov	eax, OFFSET FLAT:.str.2_1
	lea	rsi, [rsi]
	mov	ecx, eax
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0xc8], rdi
	mov	rdi, rcx
	lea	rsi, [rsi]
	call	gettext
	mov	edx, OFFSET FLAT:version_etc_copyright
	lea	rsi, [rsi]
	mov	esi, edx
	xor	edx, edx
	mov	r8b, dl
	mov	rbp, rbp
	mov	ecx, 0x7e3
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0xc8]
	lea	rsi, [rsi]
	mov	rdx, rax
	mov	al, r8b
	nop	
	call	fprintf
	nop	
	mov	ecx, OFFSET FLAT:.str.3_0
	mov	rbp, rbp
	mov	edi, ecx
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x4c], eax
	lea	rdi, [rdi]
	call	gettext
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0xb8]
	mov	rdi, rax
	lea	rsi, [rsi]
	call	fputs_unlocked
	nop	
	mov	rdx, qword ptr [rbp - 0x48]
	lea	rsi, [rsi]
	mov	rsi, rdx
	sub	rsi, 9
	nop	
	mov	dword ptr [rbp - 0xac], eax
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x148], rdx
	mov	qword ptr [rbp - 0xe0], rsi
	mov	rbp, rbp
	ja	.label_591
	mov	rax, qword ptr [rbp - 0x148]
	mov	rcx,  qword ptr [word ptr [+ (rax * 8) + label_593]]
	jmp	rcx
.label_740:
	jmp	.label_589
.label_741:
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.4_0
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rbp - 0x130], rax
	nop	
	call	gettext
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rdi]
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x130]
	mov	rsi, rax
	mov	al, 0
	lea	rdi, [rdi]
	call	fprintf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x30], eax
	jmp	.label_589
.label_742:
	movabs	rdi, OFFSET FLAT:.str.5_0
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xb8]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x28], rax
	lea	rsi, [rsi]
	call	gettext
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rdi, [rdi]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x28]
	mov	rbp, rbp
	mov	rsi, rax
	mov	al, 0
	mov	rsp, rsp
	call	fprintf
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x3c], eax
	lea	rsi, [rsi]
	jmp	.label_589
.label_743:
	mov	rsp, rsp
	movabs	rdi, OFFSET FLAT:.str.6_0
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0xb8]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x138], rax
	call	gettext
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	nop	
	mov	rdx, qword ptr [rdi]
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	nop	
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x138]
	mov	rbp, rbp
	mov	rsi, rax
	mov	rbp, rbp
	mov	al, 0
	call	fprintf
	nop	
	mov	dword ptr [rbp - 0x2c], eax
	lea	rsi, [rsi]
	jmp	.label_589
.label_744:
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.7_0
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rbp - 0xd0], rax
	call	gettext
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rdi]
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	r9, qword ptr [rdi + 0x18]
	mov	rdi, qword ptr [rbp - 0xd0]
	nop	
	mov	rsi, rax
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0x84], eax
	jmp	.label_589
.label_745:
	nop	
	movabs	rdi, OFFSET FLAT:.str.8_0
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0xb8]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x100], rax
	mov	rsp, rsp
	call	gettext
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r9, qword ptr [rdi + 0x18]
	nop	
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdi, qword ptr [rdi + 0x20]
	mov	rsi, qword ptr [rbp - 0x100]
	mov	qword ptr [rbp - 0x38], rdi
	mov	rdi, rsi
	mov	rsi, rax
	mov	rax, qword ptr [rbp - 0x38]
	mov	qword ptr [rsp], rax
	mov	rbp, rbp
	mov	al, 0
	call	fprintf
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0xf4], eax
	nop	
	jmp	.label_589
.label_746:
	nop	
	movabs	rdi, OFFSET FLAT:.str.9_0
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rbp - 0x140], rax
	mov	rbp, rbp
	call	gettext
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	mov	r9, qword ptr [rdi + 0x18]
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rdi + 0x20]
	nop	
	mov	rsi, qword ptr [rbp - 0x98]
	mov	rsi, qword ptr [rsi + 0x28]
	mov	r10, qword ptr [rbp - 0x140]
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0xa0], rdi
	mov	rdi, r10
	mov	qword ptr [rbp - 0x68], rsi
	lea	rsi, [rsi]
	mov	rsi, rax
	mov	rax, qword ptr [rbp - 0xa0]
	mov	qword ptr [rsp], rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x68]
	mov	qword ptr [rsp + 8], rax
	mov	al, 0
	call	fprintf
	mov	dword ptr [rbp - 0x110], eax
	jmp	.label_589
.label_747:
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.10_1
	mov	rax, qword ptr [rbp - 0xb8]
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0xf0], rax
	lea	rsi, [rsi]
	call	gettext
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rcx, qword ptr [rdi + 8]
	mov	rdi, qword ptr [rbp - 0x98]
	nop	
	mov	r8, qword ptr [rdi + 0x10]
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r9, qword ptr [rdi + 0x18]
	nop	
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	mov	rdi, qword ptr [rdi + 0x20]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rsi + 0x28]
	mov	r10, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	mov	r10, qword ptr [r10 + 0x30]
	mov	r11, qword ptr [rbp - 0xf0]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x90], rdi
	mov	rsp, rsp
	mov	rdi, r11
	mov	qword ptr [rbp - 0x128], rsi
	mov	rsp, rsp
	mov	rsi, rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x90]
	nop	
	mov	qword ptr [rsp], rax
	mov	rax, qword ptr [rbp - 0x128]
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp + 0x10], r10
	mov	al, 0
	nop	
	call	fprintf
	mov	dword ptr [rbp - 0x50], eax
	nop	
	jmp	.label_589
.label_748:
	movabs	rdi, OFFSET FLAT:.str.11_1
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rbp - 0x108], rax
	call	gettext
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	rcx, qword ptr [rdi + 8]
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	r8, qword ptr [rdi + 0x10]
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	r9, qword ptr [rdi + 0x18]
	mov	rdi, qword ptr [rbp - 0x98]
	nop	
	mov	rdi, qword ptr [rdi + 0x20]
	mov	rsi, qword ptr [rbp - 0x98]
	mov	rsi, qword ptr [rsi + 0x28]
	mov	r10, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	r10, qword ptr [r10 + 0x30]
	mov	rsp, rsp
	mov	r11, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	r11, qword ptr [r11 + 0x38]
	mov	rsp, rsp
	mov	rbx, qword ptr [rbp - 0x108]
	mov	qword ptr [rbp - 0x58], rdi
	mov	rdi, rbx
	nop	
	mov	qword ptr [rbp - 0x120], rsi
	mov	rsi, rax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x58]
	mov	qword ptr [rsp], rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0x120]
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp + 0x10], r10
	mov	qword ptr [rsp + 0x18], r11
	lea	rsi, [rsi]
	mov	al, 0
	call	fprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xe4], eax
	jmp	.label_589
.label_749:
	movabs	rdi, OFFSET FLAT:.str.12_1
	nop	
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rbp - 0x18], rax
	mov	rbp, rbp
	call	gettext
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rdi]
	nop	
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rdi + 8]
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r9, qword ptr [rdi + 0x18]
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdi, qword ptr [rdi + 0x20]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x98]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rsi + 0x28]
	mov	rsp, rsp
	mov	r10, qword ptr [rbp - 0x98]
	mov	r10, qword ptr [r10 + 0x30]
	nop	
	mov	r11, qword ptr [rbp - 0x98]
	lea	rdi, [rdi]
	mov	r11, qword ptr [r11 + 0x38]
	mov	rbx, qword ptr [rbp - 0x98]
	lea	rsi, [rsi]
	mov	rbx, qword ptr [rbx + 0x40]
	mov	rbp, rbp
	mov	r14, qword ptr [rbp - 0x18]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0xc0], rdi
	mov	rdi, r14
	mov	qword ptr [rbp - 0x80], rsi
	mov	rsi, rax
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 0xc0]
	mov	qword ptr [rsp], rax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x80]
	mov	qword ptr [rsp + 8], rax
	mov	rbp, rbp
	mov	qword ptr [rsp + 0x10], r10
	mov	rbp, rbp
	mov	qword ptr [rsp + 0x18], r11
	lea	rsi, [rsi]
	mov	qword ptr [rsp + 0x20], rbx
	lea	rsi, [rsi]
	mov	al, 0
	lea	rdi, [rdi]
	call	fprintf
	mov	dword ptr [rbp - 0x154], eax
	jmp	.label_589
.label_591:
	movabs	rdi, OFFSET FLAT:.str.13_1
	mov	rax, qword ptr [rbp - 0xb8]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0xd8], rax
	lea	rdi, [rdi]
	call	gettext
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	rdx, qword ptr [rdi]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	rcx, qword ptr [rdi + 8]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x98]
	nop	
	mov	r8, qword ptr [rdi + 0x10]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	r9, qword ptr [rdi + 0x18]
	mov	rdi, qword ptr [rbp - 0x98]
	mov	rdi, qword ptr [rdi + 0x20]
	nop	
	mov	rsi, qword ptr [rbp - 0x98]
	mov	rsi, qword ptr [rsi + 0x28]
	nop	
	mov	r10, qword ptr [rbp - 0x98]
	mov	r10, qword ptr [r10 + 0x30]
	mov	r11, qword ptr [rbp - 0x98]
	lea	rdi, [rdi]
	mov	r11, qword ptr [r11 + 0x38]
	mov	rbp, rbp
	mov	rbx, qword ptr [rbp - 0x98]
	mov	rbx, qword ptr [rbx + 0x40]
	mov	rsp, rsp
	mov	r14, qword ptr [rbp - 0xd8]
	mov	qword ptr [rbp - 0x150], rdi
	mov	rdi, r14
	mov	qword ptr [rbp - 0xa8], rsi
	mov	rsi, rax
	mov	rax, qword ptr [rbp - 0x150]
	mov	qword ptr [rsp], rax
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0xa8]
	mov	rbp, rbp
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp + 0x10], r10
	nop	
	mov	qword ptr [rsp + 0x18], r11
	mov	qword ptr [rsp + 0x20], rbx
	mov	rsp, rsp
	mov	al, 0
	lea	rdi, [rdi]
	call	fprintf
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x10c], eax
.label_589:
	lea	rdi, [rdi]
	add	rsp, 0x170
	pop	rbx
	nop	
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409281
	.globl sub_409281
	.type sub_409281, @function
sub_409281:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409290
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409291
	.globl sub_409291
	.type sub_409291, @function
sub_409291:

	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x30
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], rdi
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x28], rsi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x20], rdx
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x30], rcx
	nop	
	mov	qword ptr [rbp - 0x10], r8
	mov	qword ptr [rbp - 8], 0
.label_594:
	mov	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0x10]
	cmp	qword ptr [rcx + rax*8], 0
	je	.label_595
	mov	rbp, rbp
	jmp	.label_596
.label_596:
	nop	
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	add	rax, 1
	mov	qword ptr [rbp - 8], rax
	lea	rsi, [rsi]
	jmp	.label_594
.label_595:
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x18]
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 0x28]
	mov	rdx, qword ptr [rbp - 0x20]
	lea	rsi, [rsi]
	mov	rcx, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	mov	r8, qword ptr [rbp - 0x10]
	mov	rsp, rsp
	mov	r9, qword ptr [rbp - 8]
	call	version_etc_arn
	nop	
	add	rsp, 0x30
	lea	rdi, [rdi]
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409331
	.globl sub_409331
	.type sub_409331, @function
sub_409331:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409340

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0xa0
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0xa0], rdi
	mov	qword ptr [rbp - 0x20], rsi
	mov	qword ptr [rbp - 8], rdx
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x10], rcx
	mov	qword ptr [rbp - 0x28], r8
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x40], 0
.label_598:
	mov	rsp, rsp
	xor	eax, eax
	mov	rbp, rbp
	mov	cl, al
	nop	
	cmp	qword ptr [rbp - 0x40], 0xa
	mov	byte ptr [rbp - 0x11], cl
	jae	.label_601
	mov	rax, qword ptr [rbp - 0x28]
	nop	
	mov	ecx, dword ptr [rax]
	nop	
	cmp	ecx, 0x28
	mov	qword ptr [rbp - 0x98], rax
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x34], ecx
	ja	.label_600
	lea	rdi, [rdi]
	mov	eax, dword ptr [rbp - 0x34]
	mov	rsp, rsp
	movsxd	rcx, eax
	mov	rdx, qword ptr [rbp - 0x98]
	mov	rbp, rbp
	add	rcx, qword ptr [rdx + 0x10]
	add	eax, 8
	mov	dword ptr [rdx], eax
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x30], rcx
	jmp	.label_599
.label_600:
	nop	
	mov	rax, qword ptr [rbp - 0x98]
	mov	rsp, rsp
	mov	rcx, qword ptr [rax + 8]
	mov	rdx, rcx
	nop	
	add	rcx, 8
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [rbp - 0x30], rdx
.label_599:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	mov	rax, qword ptr [rax]
	lea	rdi, [rdi]
	mov	rcx, qword ptr [rbp - 0x40]
	mov	qword ptr [rbp + rcx*8 - 0x90], rax
	mov	rbp, rbp
	cmp	rax, 0
	setne	dl
	lea	rdi, [rdi]
	mov	byte ptr [rbp - 0x11], dl
.label_601:
	lea	rsi, [rsi]
	mov	al, byte ptr [rbp - 0x11]
	mov	rsp, rsp
	test	al, 1
	mov	rsp, rsp
	jne	.label_597
	mov	rsp, rsp
	jmp	.label_602
.label_597:
	jmp	.label_603
.label_603:
	nop	
	mov	rax, qword ptr [rbp - 0x40]
	mov	rbp, rbp
	add	rax, 1
	mov	qword ptr [rbp - 0x40], rax
	jmp	.label_598
.label_602:
	nop	
	lea	r8, [rbp - 0x90]
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0xa0]
	mov	rsi, qword ptr [rbp - 0x20]
	lea	rsi, [rsi]
	mov	rdx, qword ptr [rbp - 8]
	mov	rcx, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	r9, qword ptr [rbp - 0x40]
	nop	
	call	version_etc_arn
	add	rsp, 0xa0
	mov	rbp, rbp
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409494
	.globl sub_409494
	.type sub_409494, @function
sub_409494:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4094a0

	.globl version_etc
	.type version_etc, @function
version_etc:
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x1d0
	mov	rbp, rbp
	test	al, al
	lea	rsi, [rsi]
	movaps	xmmword ptr [rbp - 0x120], xmm7
	nop	
	movaps	xmmword ptr [rbp - 0x1c0], xmm6
	movaps	xmmword ptr [rbp - 0x1a0], xmm5
	nop	
	movaps	xmmword ptr [rbp - 0x100], xmm4
	nop	
	movaps	xmmword ptr [rbp - 0x160], xmm3
	movaps	xmmword ptr [rbp - 0x140], xmm2
	lea	rdi, [rdi]
	movaps	xmmword ptr [rbp - 0x20], xmm1
	movaps	xmmword ptr [rbp - 0xf0], xmm0
	nop	
	mov	qword ptr [rbp - 0x1c8], rdi
	mov	qword ptr [rbp - 0x1a8], r9
	mov	qword ptr [rbp - 0x108], r8
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x128], rcx
	mov	qword ptr [rbp - 0x178], rdx
	mov	qword ptr [rbp - 0xd8], rsi
	lea	rsi, [rsi]
	je	.label_604
	movaps	xmm0, xmmword ptr [rbp - 0xf0]
	mov	rsp, rsp
	movaps	xmmword ptr [rbp - 0xa0], xmm0
	lea	rdi, [rdi]
	movaps	xmm1, xmmword ptr [rbp - 0x20]
	movaps	xmmword ptr [rbp - 0x90], xmm1
	lea	rdi, [rdi]
	movaps	xmm2, xmmword ptr [rbp - 0x140]
	mov	rbp, rbp
	movaps	xmmword ptr [rbp - 0x80], xmm2
	movaps	xmm3, xmmword ptr [rbp - 0x160]
	movaps	xmmword ptr [rbp - 0x70], xmm3
	movaps	xmm4, xmmword ptr [rbp - 0x100]
	mov	rsp, rsp
	movaps	xmmword ptr [rbp - 0x60], xmm4
	lea	rdi, [rdi]
	movaps	xmm5, xmmword ptr [rbp - 0x1a0]
	mov	rbp, rbp
	movaps	xmmword ptr [rbp - 0x50], xmm5
	mov	rbp, rbp
	movaps	xmm6, xmmword ptr [rbp - 0x1c0]
	movaps	xmmword ptr [rbp - 0x40], xmm6
	mov	rsp, rsp
	movaps	xmm7, xmmword ptr [rbp - 0x120]
	mov	rbp, rbp
	movaps	xmmword ptr [rbp - 0x30], xmm7
.label_604:
	mov	rax, qword ptr [rbp - 0x1a8]
	mov	qword ptr [rbp - 0xa8], rax
	mov	rcx, qword ptr [rbp - 0x108]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0xb0], rcx
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x128]
	mov	rsi, qword ptr [rbp - 0x178]
	mov	rdi, qword ptr [rbp - 0xd8]
	nop	
	mov	r8, qword ptr [rbp - 0x1c8]
	mov	qword ptr [rbp - 8], r8
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x168], rdi
	mov	qword ptr [rbp - 0x170], rsi
	mov	qword ptr [rbp - 0x148], rdx
	lea	rdx, [rbp - 0xd0]
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x180], rdx
	lea	rdx, [rbp + 0x10]
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x188], rdx
	mov	dword ptr [rbp - 0x18c], 0x30
	mov	dword ptr [rbp - 0x190], 0x20
	mov	rdi, qword ptr [rbp - 8]
	nop	
	mov	rsi, qword ptr [rbp - 0x168]
	mov	rdx, qword ptr [rbp - 0x170]
	mov	rbp, rbp
	mov	rcx, qword ptr [rbp - 0x148]
	lea	r8, [rbp - 0x190]
	call	version_etc_va
	add	rsp, 0x1d0
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40965f
	.globl sub_40965f
	.type sub_40965f, @function
sub_40965f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409660
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	lea	rsi, [rsi]
	movabs	rdi, OFFSET FLAT:.str.14_1
	lea	rsi, [rsi]
	call	gettext
	mov	rsp, rsp
	movabs	rsi, OFFSET FLAT:.str.15_1
	mov	rdi, rax
	mov	al, 0
	call	printf
	movabs	rdi, OFFSET FLAT:.str.16_0
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], eax
	call	gettext
	movabs	rsi, OFFSET FLAT:.str.17
	movabs	rdx, OFFSET FLAT:.str.18
	mov	rsp, rsp
	mov	rdi, rax
	mov	al, 0
	call	printf
	lea	rdi, [rdi]
	movabs	rdi, OFFSET FLAT:.str.19_0
	mov	dword ptr [rbp - 0xc], eax
	mov	rsp, rsp
	call	gettext
	mov	rsi,  qword ptr [word ptr [stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	mov	dword ptr [rbp - 8], eax
	mov	rsp, rsp
	add	rsp, 0x10
	mov	rbp, rbp
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409701
	.globl sub_409701
	.type sub_409701, @function
sub_409701:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x409710
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	lea	rdi, [rdi]
	.section	.text
	.align	32
	#Procedure 0x409713
	.globl sub_409713
	.type sub_409713, @function
sub_409713:

	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x10
	mov	rbp, rbp
	movabs	rax, 0x7fffffffffffffff
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x10], rsi
	xor	ecx, ecx
	mov	edx, ecx
	nop	
	div	qword ptr [rbp - 0x10]
	cmp	rax, qword ptr [rbp - 8]
	jae	.label_605
	mov	rbp, rbp
	call	xalloc_die
.label_605:
	mov	rax, qword ptr [rbp - 8]
	imul	rax, qword ptr [rbp - 0x10]
	nop	
	mov	rdi, rax
	call	xmalloc
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40976c
	.globl sub_40976c
	.type sub_40976c, @function
sub_40976c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x409770

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	qword ptr [rbp - 0x10], rdi
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	call	malloc
	mov	qword ptr [rbp - 8], rax
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 8], 0
	mov	rbp, rbp
	jne	.label_606
	cmp	qword ptr [rbp - 0x10], 0
	lea	rdi, [rdi]
	je	.label_606
	lea	rdi, [rdi]
	call	xalloc_die
.label_606:
	mov	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	add	rsp, 0x10
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4097c6
	.globl sub_4097c6
	.type sub_4097c6, @function
sub_4097c6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4097d0
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	lea	rdi, [rdi]
	.section	.text
	.align	32
	#Procedure 0x4097d3
	.globl sub_4097d3
	.type sub_4097d3, @function
sub_4097d3:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	nop	
	sub	rsp, 0x20
	nop	
	movabs	rax, 0x7fffffffffffffff
	mov	qword ptr [rbp - 0x10], rdi
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x18], rsi
	mov	qword ptr [rbp - 8], rdx
	mov	rbp, rbp
	xor	ecx, ecx
	mov	rsp, rsp
	mov	edx, ecx
	div	qword ptr [rbp - 8]
	mov	rsp, rsp
	cmp	rax, qword ptr [rbp - 0x18]
	jae	.label_607
	mov	rsp, rsp
	call	xalloc_die
.label_607:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 0x10]
	nop	
	mov	rax, qword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	imul	rax, qword ptr [rbp - 8]
	mov	rsp, rsp
	mov	rsi, rax
	lea	rdi, [rdi]
	call	xrealloc
	lea	rdi, [rdi]
	add	rsp, 0x20
	lea	rdi, [rdi]
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40984a
	.globl sub_40984a
	.type sub_40984a, @function
sub_40984a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409850

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x20
	mov	qword ptr [rbp - 8], rdi
	nop	
	mov	qword ptr [rbp - 0x10], rsi
	lea	rdi, [rdi]
	cmp	qword ptr [rbp - 0x10], 0
	lea	rdi, [rdi]
	jne	.label_608
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 8], 0
	lea	rsi, [rsi]
	je	.label_608
	mov	rdi, qword ptr [rbp - 8]
	call	free
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x18], 0
	jmp	.label_610
.label_608:
	mov	rdi, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rbp - 0x10]
	nop	
	call	realloc
	mov	qword ptr [rbp - 8], rax
	mov	rbp, rbp
	cmp	qword ptr [rbp - 8], 0
	mov	rsp, rsp
	jne	.label_609
	mov	rsp, rsp
	cmp	qword ptr [rbp - 0x10], 0
	lea	rdi, [rdi]
	je	.label_609
	lea	rsi, [rsi]
	call	xalloc_die
.label_609:
	mov	rax, qword ptr [rbp - 8]
	mov	qword ptr [rbp - 0x18], rax
.label_610:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x18]
	add	rsp, 0x20
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4098f1
	.globl sub_4098f1
	.type sub_4098f1, @function
sub_4098f1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409900

	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:
	push	rbp
	nop	
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x20
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x18], rsi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x20], rdx
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rdx, qword ptr [rdx]
	mov	qword ptr [rbp - 0x10], rdx
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 8], 0
	lea	rdi, [rdi]
	jne	.label_611
	cmp	qword ptr [rbp - 0x10], 0
	jne	.label_613
	mov	eax, 0x80
	xor	ecx, ecx
	mov	rbp, rbp
	mov	edx, ecx
	div	qword ptr [rbp - 0x20]
	mov	qword ptr [rbp - 0x10], rax
	cmp	qword ptr [rbp - 0x10], 0
	mov	rbp, rbp
	setne	sil
	mov	rsp, rsp
	xor	sil, 0xff
	and	sil, 1
	movzx	ecx, sil
	movsxd	rax, ecx
	add	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [rbp - 0x10], rax
.label_613:
	mov	rbp, rbp
	movabs	rax, 0x7fffffffffffffff
	nop	
	xor	ecx, ecx
	mov	rbp, rbp
	mov	edx, ecx
	nop	
	div	qword ptr [rbp - 0x20]
	mov	rbp, rbp
	cmp	rax, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	jae	.label_615
	call	xalloc_die
.label_615:
	lea	rsi, [rsi]
	jmp	.label_614
.label_611:
	nop	
	movabs	rax, 0x5555555555555554
	lea	rsi, [rsi]
	xor	ecx, ecx
	lea	rsi, [rsi]
	mov	edx, ecx
	div	qword ptr [rbp - 0x20]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rbp - 0x10]
	ja	.label_612
	call	xalloc_die
.label_612:
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	shr	rax, 1
	mov	rbp, rbp
	add	rax, 1
	mov	rbp, rbp
	add	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [rbp - 0x10], rax
.label_614:
	mov	rax, qword ptr [rbp - 0x10]
	mov	rcx, qword ptr [rbp - 0x18]
	lea	rdi, [rdi]
	mov	qword ptr [rcx], rax
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 8]
	mov	rax, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	imul	rax, qword ptr [rbp - 0x20]
	nop	
	mov	rsi, rax
	call	xrealloc
	add	rsp, 0x20
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x409a2e
	.globl sub_409a2e
	.type sub_409a2e, @function
sub_409a2e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409a30

	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:
	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	qword ptr [rbp - 8], rdi
	mov	rdi, qword ptr [rbp - 8]
	call	xmalloc
	mov	rbp, rbp
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409a51
	.globl sub_409a51
	.type sub_409a51, @function
sub_409a51:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409a60
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x10
	mov	eax, 1
	mov	edx, eax
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x10], rsi
	mov	rdi, qword ptr [rbp - 8]
	mov	rbp, rbp
	mov	rsi, qword ptr [rbp - 0x10]
	call	x2nrealloc
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409a94
	.globl sub_409a94
	.type sub_409a94, @function
sub_409a94:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409aa0
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	qword ptr [rbp - 8], rdi
	nop	
	mov	rdi, qword ptr [rbp - 8]
	call	xmalloc
	xor	esi, esi
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	rdi, rax
	mov	qword ptr [rbp - 0x10], rax
	call	memset
	mov	rax, qword ptr [rbp - 0x10]
	add	rsp, 0x10
	lea	rdi, [rdi]
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x409ae1
	.globl sub_409ae1
	.type sub_409ae1, @function
sub_409ae1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409af0
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x20
	movabs	rax, 0x7fffffffffffffff
	nop	
	mov	qword ptr [rbp - 0x10], rdi
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x18], rsi
	nop	
	xor	ecx, ecx
	mov	edx, ecx
	div	qword ptr [rbp - 0x18]
	cmp	rax, qword ptr [rbp - 0x10]
	jb	.label_616
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rsi, qword ptr [rbp - 0x18]
	call	calloc
	mov	qword ptr [rbp - 8], rax
	cmp	rax, 0
	jne	.label_617
.label_616:
	lea	rsi, [rsi]
	call	xalloc_die
.label_617:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 8]
	nop	
	add	rsp, 0x20
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409b56
	.globl sub_409b56
	.type sub_409b56, @function
sub_409b56:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409b60

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	lea	rsi, [rsi]
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x20
	nop	
	mov	qword ptr [rbp - 0x10], rdi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rsi
	mov	rdi, qword ptr [rbp - 0x18]
	call	xmalloc
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	rdx, qword ptr [rbp - 0x18]
	mov	rdi, rax
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rax
	lea	rdi, [rdi]
	call	memcpy
	mov	rax, qword ptr [rbp - 8]
	add	rsp, 0x20
	pop	rbp
	mov	rbp, rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409bad
	.globl sub_409bad
	.type sub_409bad, @function
sub_409bad:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x409bb0

	.globl xstrdup
	.type xstrdup, @function
xstrdup:
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x10
	mov	qword ptr [rbp - 0x10], rdi
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x10]
	mov	qword ptr [rbp - 8], rdi
	mov	rbp, rbp
	mov	rdi, rax
	mov	rsp, rsp
	call	strlen
	mov	rsp, rsp
	add	rax, 1
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 8]
	mov	rsi, rax
	lea	rdi, [rdi]
	call	xmemdup
	mov	rbp, rbp
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409c01
	.globl sub_409c01
	.type sub_409c01, @function
sub_409c01:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409c10

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	mov	rbp, rbp
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x10
	mov	rbp, rbp
	movabs	rdi, OFFSET FLAT:.str.1_4
	lea	rsi, [rsi]
	mov	eax,  dword ptr [dword ptr [exit_failure]]
	nop	
	mov	dword ptr [rbp - 4], eax
	call	gettext
	mov	rsp, rsp
	xor	esi, esi
	nop	
	movabs	rdx, OFFSET FLAT:.str_1
	mov	edi, dword ptr [rbp - 4]
	mov	rcx, rax
	mov	al, 0
	mov	rbp, rbp
	call	error
	call	abort
	.section	.text
	.align	32
	#Procedure 0x409c61
	.globl sub_409c61
	.type sub_409c61, @function
sub_409c61:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409c70

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	lea	rsi, [rsi]
	sub	rsp, 0x40
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x10], rdi
	mov	qword ptr [rbp - 0x30], rsi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x28], rdx
	mov	qword ptr [rbp - 0x40], rcx
	cmp	qword ptr [rbp - 0x10], 0
	lea	rsi, [rsi]
	jne	.label_618
	lea	rax, [rbp - 0x14]
	mov	qword ptr [rbp - 0x10], rax
.label_618:
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rsi, qword ptr [rbp - 0x30]
	mov	rdx, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	rcx, qword ptr [rbp - 0x40]
	nop	
	call	mbrtowc
	mov	rcx, -2
	mov	rsp, rsp
	mov	qword ptr [rbp - 0x20], rax
	mov	rbp, rbp
	cmp	rcx, qword ptr [rbp - 0x20]
	ja	.label_619
	nop	
	cmp	qword ptr [rbp - 0x28], 0
	lea	rdi, [rdi]
	je	.label_619
	xor	edi, edi
	lea	rdi, [rdi]
	call	hard_locale
	mov	rbp, rbp
	test	al, 1
	lea	rsi, [rsi]
	jne	.label_619
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 0x30]
	lea	rdi, [rdi]
	mov	cl, byte ptr [rax]
	mov	byte ptr [rbp - 0x31], cl
	mov	rbp, rbp
	movzx	edx, byte ptr [rbp - 0x31]
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x10]
	lea	rsi, [rsi]
	mov	dword ptr [rax], edx
	mov	rsp, rsp
	mov	qword ptr [rbp - 8], 1
	jmp	.label_620
.label_619:
	mov	rax, qword ptr [rbp - 0x20]
	mov	qword ptr [rbp - 8], rax
.label_620:
	lea	rsi, [rsi]
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	add	rsp, 0x40
	lea	rsi, [rsi]
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409d55
	.globl sub_409d55
	.type sub_409d55, @function
sub_409d55:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x409d60

	.globl str2sig
	.type str2sig, @function
str2sig:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 8], rdi
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rsi
	mov	rdi, qword ptr [rbp - 8]
	mov	rbp, rbp
	call	str2signum
	xor	ecx, ecx
	mov	edx, 0xffffffff
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	mov	dword ptr [rsi], eax
	nop	
	mov	rsi, qword ptr [rbp - 0x10]
	cmp	dword ptr [rsi], 0
	cmovl	ecx, edx
	mov	eax, ecx
	add	rsp, 0x10
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409da5
	.globl sub_409da5
	.type sub_409da5, @function
sub_409da5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409db0

	.globl str2signum
	.type str2signum, @function
str2signum:
	lea	rdi, [rdi]
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x50
	nop	
	mov	qword ptr [rbp - 0x40], rdi
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x40]
	mov	rsp, rsp
	movsx	eax, byte ptr [rdi]
	lea	rdi, [rdi]
	sub	eax, 0x30
	cmp	eax, 9
	nop	
	ja	.label_630
	lea	rsi, [rbp - 0x10]
	lea	rsi, [rsi]
	mov	edx, 0xa
	mov	rdi, qword ptr [rbp - 0x40]
	call	strtol
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x28], rax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x10]
	cmp	byte ptr [rax], 0
	jne	.label_624
	cmp	qword ptr [rbp - 0x28], 0x40
	jg	.label_624
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	ecx, eax
	mov	dword ptr [rbp - 0x1c], ecx
	jmp	.label_625
.label_624:
	lea	rdi, [rdi]
	jmp	.label_628
.label_630:
	mov	dword ptr [rbp - 0x18], 0
.label_621:
	mov	eax, dword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	mov	ecx, eax
	nop	
	cmp	rcx, 0x23
	lea	rsi, [rsi]
	jae	.label_632
	lea	rdi, [rdi]
	movabs	rax, OFFSET FLAT:numname_table
	nop	
	mov	ecx, dword ptr [rbp - 0x18]
	mov	rbp, rbp
	mov	edx, ecx
	lea	rsi, [rsi]
	imul	rdx, rdx, 0xc
	add	rax, rdx
	add	rax, 4
	nop	
	mov	rsi, qword ptr [rbp - 0x40]
	mov	rdi, rax
	lea	rdi, [rdi]
	call	strcmp
	nop	
	cmp	eax, 0
	jne	.label_622
	mov	rbp, rbp
	movabs	rax, OFFSET FLAT:numname_table
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rbp - 0x18]
	mov	rsp, rsp
	mov	edx, ecx
	nop	
	imul	rdx, rdx, 0xc
	add	rax, rdx
	mov	ecx, dword ptr [rax]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x1c], ecx
	lea	rsi, [rsi]
	jmp	.label_625
.label_622:
	jmp	.label_633
.label_633:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x18]
	mov	rbp, rbp
	add	eax, 1
	mov	dword ptr [rbp - 0x18], eax
	jmp	.label_621
.label_632:
	mov	rbp, rbp
	call	__libc_current_sigrtmin
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 4], eax
	call	__libc_current_sigrtmax
	mov	rsp, rsp
	xor	ecx, ecx
	mov	dword ptr [rbp - 0x14], eax
	lea	rdi, [rdi]
	cmp	ecx, dword ptr [rbp - 4]
	lea	rdi, [rdi]
	jge	.label_631
	lea	rdi, [rdi]
	movabs	rsi, OFFSET FLAT:.str_6
	nop	
	mov	eax, 5
	mov	rsp, rsp
	mov	edx, eax
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x40]
	call	strncmp
	lea	rsi, [rsi]
	cmp	eax, 0
	mov	rsp, rsp
	jne	.label_631
	lea	rdi, [rdi]
	lea	rsi, [rbp - 0x30]
	mov	rsp, rsp
	mov	edx, 0xa
	mov	rsp, rsp
	mov	rax, qword ptr [rbp - 0x40]
	add	rax, 5
	mov	rdi, rax
	call	strtol
	mov	qword ptr [rbp - 0x48], rax
	mov	rax, qword ptr [rbp - 0x30]
	cmp	byte ptr [rax], 0
	jne	.label_627
	xor	eax, eax
	lea	rdi, [rdi]
	mov	ecx, eax
	cmp	rcx, qword ptr [rbp - 0x48]
	mov	rsp, rsp
	jg	.label_627
	mov	rax, qword ptr [rbp - 0x48]
	mov	rbp, rbp
	mov	ecx, dword ptr [rbp - 0x14]
	mov	rsp, rsp
	sub	ecx, dword ptr [rbp - 4]
	movsxd	rdx, ecx
	cmp	rax, rdx
	jg	.label_627
	lea	rsi, [rsi]
	movsxd	rax, dword ptr [rbp - 4]
	mov	rsp, rsp
	add	rax, qword ptr [rbp - 0x48]
	mov	ecx, eax
	nop	
	mov	dword ptr [rbp - 0x1c], ecx
	jmp	.label_625
.label_627:
	jmp	.label_626
.label_631:
	xor	eax, eax
	cmp	eax, dword ptr [rbp - 0x14]
	jge	.label_629
	nop	
	movabs	rsi, OFFSET FLAT:.str.1_5
	nop	
	mov	eax, 5
	nop	
	mov	edx, eax
	mov	rbp, rbp
	mov	rdi, qword ptr [rbp - 0x40]
	lea	rsi, [rsi]
	call	strncmp
	mov	rsp, rsp
	cmp	eax, 0
	jne	.label_629
	mov	rbp, rbp
	lea	rsi, [rbp - 0x30]
	lea	rsi, [rsi]
	mov	edx, 0xa
	mov	rax, qword ptr [rbp - 0x40]
	mov	rbp, rbp
	add	rax, 5
	mov	rdi, rax
	call	strtol
	mov	qword ptr [rbp - 0x38], rax
	mov	rax, qword ptr [rbp - 0x30]
	mov	rbp, rbp
	cmp	byte ptr [rax], 0
	jne	.label_623
	nop	
	mov	eax, dword ptr [rbp - 4]
	lea	rsi, [rsi]
	sub	eax, dword ptr [rbp - 0x14]
	lea	rdi, [rdi]
	movsxd	rcx, eax
	nop	
	cmp	rcx, qword ptr [rbp - 0x38]
	jg	.label_623
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 0x38], 0
	mov	rsp, rsp
	jg	.label_623
	movsxd	rax, dword ptr [rbp - 0x14]
	lea	rdi, [rdi]
	add	rax, qword ptr [rbp - 0x38]
	mov	rbp, rbp
	mov	ecx, eax
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x1c], ecx
	mov	rsp, rsp
	jmp	.label_625
.label_623:
	lea	rdi, [rdi]
	jmp	.label_629
.label_629:
	jmp	.label_626
.label_626:
	jmp	.label_628
.label_628:
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x1c], 0xffffffff
.label_625:
	mov	eax, dword ptr [rbp - 0x1c]
	add	rsp, 0x50
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a091
	.globl sub_40a091
	.type sub_40a091, @function
sub_40a091:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a0a0

	.globl sig2str
	.type sig2str, @function
sig2str:
	push	rbp
	mov	rbp, rsp
	nop	
	sub	rsp, 0x50
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x20], edi
	mov	qword ptr [rbp - 0x38], rsi
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x24], 0
.label_637:
	mov	eax, dword ptr [rbp - 0x24]
	mov	ecx, eax
	lea	rsi, [rsi]
	cmp	rcx, 0x23
	lea	rdi, [rdi]
	jae	.label_643
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:numname_table
	mov	ecx, dword ptr [rbp - 0x24]
	nop	
	mov	edx, ecx
	lea	rsi, [rsi]
	imul	rdx, rdx, 0xc
	mov	rbp, rbp
	add	rax, rdx
	mov	rsp, rsp
	mov	ecx, dword ptr [rax]
	lea	rdi, [rdi]
	cmp	ecx, dword ptr [rbp - 0x20]
	jne	.label_638
	movabs	rax, OFFSET FLAT:numname_table
	mov	rdi, qword ptr [rbp - 0x38]
	nop	
	mov	ecx, dword ptr [rbp - 0x24]
	mov	rsp, rsp
	mov	edx, ecx
	imul	rdx, rdx, 0xc
	lea	rsi, [rsi]
	add	rax, rdx
	add	rax, 4
	mov	rsi, rax
	lea	rsi, [rsi]
	call	strcpy
	mov	dword ptr [rbp - 0xc], 0
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x40], rax
	jmp	.label_634
.label_638:
	jmp	.label_635
.label_635:
	mov	eax, dword ptr [rbp - 0x24]
	mov	rbp, rbp
	add	eax, 1
	mov	dword ptr [rbp - 0x24], eax
	jmp	.label_637
.label_643:
	lea	rsi, [rsi]
	call	__libc_current_sigrtmin
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x1c], eax
	lea	rsi, [rsi]
	call	__libc_current_sigrtmax
	mov	dword ptr [rbp - 0x2c], eax
	lea	rsi, [rsi]
	mov	eax, dword ptr [rbp - 0x1c]
	lea	rdi, [rdi]
	cmp	eax, dword ptr [rbp - 0x20]
	jg	.label_640
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x20]
	cmp	eax, dword ptr [rbp - 0x2c]
	jle	.label_636
.label_640:
	mov	dword ptr [rbp - 0xc], 0xffffffff
	jmp	.label_634
.label_636:
	mov	eax, 2
	mov	ecx, dword ptr [rbp - 0x20]
	mov	rbp, rbp
	mov	edx, dword ptr [rbp - 0x1c]
	mov	esi, dword ptr [rbp - 0x2c]
	sub	esi, dword ptr [rbp - 0x1c]
	mov	rbp, rbp
	mov	dword ptr [rbp - 8], eax
	mov	eax, esi
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x28], edx
	lea	rsi, [rsi]
	cdq	
	lea	rdi, [rdi]
	mov	esi, dword ptr [rbp - 8]
	nop	
	idiv	esi
	mov	edi, dword ptr [rbp - 0x28]
	add	edi, eax
	cmp	ecx, edi
	lea	rdi, [rdi]
	jg	.label_639
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 0x38]
	mov	eax, OFFSET FLAT:.str_6
	mov	esi, eax
	lea	rsi, [rsi]
	call	strcpy
	lea	rdi, [rdi]
	mov	ecx, dword ptr [rbp - 0x1c]
	nop	
	mov	dword ptr [rbp - 0x30], ecx
	mov	rbp, rbp
	mov	qword ptr [rbp - 0x18], rax
	mov	rsp, rsp
	jmp	.label_641
.label_639:
	nop	
	mov	rdi, qword ptr [rbp - 0x38]
	mov	rsp, rsp
	mov	eax, OFFSET FLAT:.str.1_5
	lea	rdi, [rdi]
	mov	esi, eax
	mov	rsp, rsp
	call	strcpy
	mov	ecx, dword ptr [rbp - 0x2c]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x30], ecx
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 0x50], rax
.label_641:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x20]
	sub	eax, dword ptr [rbp - 0x30]
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x44], eax
	cmp	dword ptr [rbp - 0x44], 0
	mov	rsp, rsp
	je	.label_642
	movabs	rsi, OFFSET FLAT:.str.2_2
	nop	
	mov	rax, qword ptr [rbp - 0x38]
	lea	rsi, [rsi]
	add	rax, 5
	mov	edx, dword ptr [rbp - 0x44]
	lea	rsi, [rsi]
	mov	rdi, rax
	mov	al, 0
	nop	
	call	sprintf
	mov	rsp, rsp
	mov	dword ptr [rbp - 4], eax
.label_642:
	mov	rsp, rsp
	mov	dword ptr [rbp - 0xc], 0
.label_634:
	mov	eax, dword ptr [rbp - 0xc]
	mov	rsp, rsp
	add	rsp, 0x50
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a29a
	.globl sub_40a29a
	.type sub_40a29a, @function
sub_40a29a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a2a0

	.globl c_strcasecmp
	.type c_strcasecmp, @function
c_strcasecmp:
	mov	rsp, rsp
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	sub	rsp, 0x30
	mov	qword ptr [rbp - 0x28], rdi
	mov	qword ptr [rbp - 0x30], rsi
	lea	rsi, [rsi]
	mov	rsi, qword ptr [rbp - 0x28]
	mov	qword ptr [rbp - 0x10], rsi
	mov	rsp, rsp
	mov	rsi, qword ptr [rbp - 0x30]
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x18], rsi
	mov	rbp, rbp
	mov	rsi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	cmp	rsi, qword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	jne	.label_644
	mov	dword ptr [rbp - 4], 0
	lea	rsi, [rsi]
	jmp	.label_647
.label_644:
	mov	rbp, rbp
	jmp	.label_645
.label_645:
	mov	rax, qword ptr [rbp - 0x10]
	movzx	edi, byte ptr [rax]
	mov	rsp, rsp
	call	c_tolower
	lea	rsi, [rsi]
	mov	cl, al
	mov	byte ptr [rbp - 0x19], cl
	mov	rdx, qword ptr [rbp - 0x18]
	lea	rsi, [rsi]
	movzx	edi, byte ptr [rdx]
	call	c_tolower
	nop	
	mov	cl, al
	mov	rsp, rsp
	mov	byte ptr [rbp - 0x1a], cl
	lea	rdi, [rdi]
	movzx	eax, byte ptr [rbp - 0x19]
	cmp	eax, 0
	jne	.label_646
	jmp	.label_648
.label_646:
	mov	rax, qword ptr [rbp - 0x10]
	add	rax, 1
	nop	
	mov	qword ptr [rbp - 0x10], rax
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 0x18]
	add	rax, 1
	mov	qword ptr [rbp - 0x18], rax
	lea	rsi, [rsi]
	movzx	eax, byte ptr [rbp - 0x19]
	movzx	ecx, byte ptr [rbp - 0x1a]
	cmp	eax, ecx
	lea	rdi, [rdi]
	je	.label_645
.label_648:
	movzx	eax, byte ptr [rbp - 0x19]
	mov	rsp, rsp
	movzx	ecx, byte ptr [rbp - 0x1a]
	mov	rsp, rsp
	sub	eax, ecx
	mov	dword ptr [rbp - 4], eax
.label_647:
	mov	eax, dword ptr [rbp - 4]
	nop	
	add	rsp, 0x30
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a390

	.globl close_stream
	.type close_stream, @function
close_stream:
	mov	rsp, rsp
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x20
	mov	qword ptr [rbp - 0x10], rdi
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	nop	
	call	__fpending
	cmp	rax, 0
	mov	rbp, rbp
	setne	cl
	and	cl, 1
	mov	byte ptr [rbp - 0x16], cl
	nop	
	mov	rdi, qword ptr [rbp - 0x10]
	mov	rbp, rbp
	call	ferror_unlocked
	nop	
	cmp	eax, 0
	setne	cl
	mov	rbp, rbp
	and	cl, 1
	mov	byte ptr [rbp - 1], cl
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 0x10]
	call	rpl_fclose
	mov	rsp, rsp
	cmp	eax, 0
	setne	cl
	mov	rbp, rbp
	and	cl, 1
	mov	byte ptr [rbp - 0x15], cl
	nop	
	test	byte ptr [rbp - 1], 1
	lea	rsi, [rsi]
	jne	.label_651
	test	byte ptr [rbp - 0x15], 1
	je	.label_650
	test	byte ptr [rbp - 0x16], 1
	lea	rsi, [rsi]
	jne	.label_651
	mov	rbp, rbp
	call	__errno_location
	lea	rdi, [rdi]
	cmp	dword ptr [rax], 9
	je	.label_650
.label_651:
	nop	
	test	byte ptr [rbp - 0x15], 1
	mov	rsp, rsp
	jne	.label_649
	call	__errno_location
	mov	dword ptr [rax], 0
.label_649:
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x14], 0xffffffff
	jmp	.label_652
.label_650:
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x14], 0
.label_652:
	nop	
	mov	eax, dword ptr [rbp - 0x14]
	add	rsp, 0x20
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a46c
	.globl sub_40a46c
	.type sub_40a46c, @function
sub_40a46c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40a470

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	nop	
	push	rbp
	lea	rdi, [rdi]
	mov	rbp, rsp
	sub	rsp, 0x10
	xor	eax, eax
	mov	rsp, rsp
	mov	esi, eax
	nop	
	mov	dword ptr [rbp - 0xc], edi
	mov	byte ptr [rbp - 0xd], 1
	mov	edi, dword ptr [rbp - 0xc]
	call	setlocale
	mov	rsp, rsp
	mov	qword ptr [rbp - 8], rax
	cmp	qword ptr [rbp - 8], 0
	nop	
	je	.label_654
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	eax, OFFSET FLAT:.str_7
	mov	rsp, rsp
	mov	esi, eax
	call	strcmp
	lea	rdi, [rdi]
	cmp	eax, 0
	je	.label_655
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 8]
	mov	eax, OFFSET FLAT:.str.1_6
	lea	rsi, [rsi]
	mov	esi, eax
	call	strcmp
	cmp	eax, 0
	jne	.label_653
.label_655:
	mov	byte ptr [rbp - 0xd], 0
.label_653:
	jmp	.label_654
.label_654:
	mov	al, byte ptr [rbp - 0xd]
	lea	rdi, [rdi]
	and	al, 1
	nop	
	movzx	eax, al
	add	rsp, 0x10
	lea	rsi, [rsi]
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a50b
	.globl sub_40a50b
	.type sub_40a50b, @function
sub_40a50b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a510

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	mov	rsp, rsp
	push	rbp
	mov	rsp, rsp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x10
	mov	edi, 0xe
	lea	rdi, [rdi]
	call	rpl_nl_langinfo
	nop	
	mov	qword ptr [rbp - 8], rax
	cmp	qword ptr [rbp - 8], 0
	jne	.label_657
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:.str_0
	nop	
	mov	qword ptr [rbp - 8], rax
.label_657:
	mov	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	movsx	ecx, byte ptr [rax]
	nop	
	cmp	ecx, 0
	mov	rsp, rsp
	jne	.label_656
	lea	rsi, [rsi]
	movabs	rax, OFFSET FLAT:.str.1_7
	lea	rdi, [rdi]
	mov	qword ptr [rbp - 8], rax
.label_656:
	mov	rbp, rbp
	mov	rax, qword ptr [rbp - 8]
	nop	
	add	rsp, 0x10
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a58a
	.globl sub_40a58a
	.type sub_40a58a, @function
sub_40a58a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a590

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	lea	rsi, [rsi]
	mov	rbp, rsp
	mov	rsp, rsp
	sub	rsp, 0x20
	mov	qword ptr [rbp - 8], rdi
	mov	dword ptr [rbp - 0x14], 0
	mov	rbp, rbp
	mov	dword ptr [rbp - 0x18], 0
	mov	rdi, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	call	fileno
	mov	dword ptr [rbp - 0x1c], eax
	mov	rbp, rbp
	cmp	dword ptr [rbp - 0x1c], 0
	jge	.label_662
	mov	rdi, qword ptr [rbp - 8]
	call	fclose
	mov	dword ptr [rbp - 0x10], eax
	lea	rsi, [rsi]
	jmp	.label_660
.label_662:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 8]
	mov	rsp, rsp
	call	__freading
	lea	rsi, [rsi]
	cmp	eax, 0
	je	.label_659
	lea	rsi, [rsi]
	mov	rdi, qword ptr [rbp - 8]
	call	fileno
	xor	ecx, ecx
	lea	rsi, [rsi]
	mov	esi, ecx
	mov	edx, 1
	mov	edi, eax
	mov	rbp, rbp
	call	lseek
	lea	rsi, [rsi]
	cmp	rax, -1
	lea	rsi, [rsi]
	je	.label_658
.label_659:
	mov	rdi, qword ptr [rbp - 8]
	call	rpl_fflush
	cmp	eax, 0
	lea	rsi, [rsi]
	je	.label_658
	call	__errno_location
	nop	
	mov	ecx, dword ptr [rax]
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 0x14], ecx
.label_658:
	mov	rdi, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	call	fclose
	mov	dword ptr [rbp - 0x18], eax
	lea	rdi, [rdi]
	cmp	dword ptr [rbp - 0x14], 0
	je	.label_661
	nop	
	mov	eax, dword ptr [rbp - 0x14]
	mov	dword ptr [rbp - 0xc], eax
	call	__errno_location
	nop	
	mov	ecx, dword ptr [rbp - 0xc]
	mov	rsp, rsp
	mov	dword ptr [rax], ecx
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x18], 0xffffffff
.label_661:
	mov	eax, dword ptr [rbp - 0x18]
	mov	dword ptr [rbp - 0x10], eax
.label_660:
	mov	eax, dword ptr [rbp - 0x10]
	nop	
	add	rsp, 0x20
	mov	rsp, rsp
	pop	rbp
	mov	rsp, rsp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a6a4
	.globl sub_40a6a4
	.type sub_40a6a4, @function
sub_40a6a4:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x40a6b0

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	qword ptr [rbp - 8], rdi
	lea	rsi, [rsi]
	cmp	qword ptr [rbp - 8], 0
	mov	rsp, rsp
	je	.label_663
	mov	rdi, qword ptr [rbp - 8]
	call	__freading
	cmp	eax, 0
	jne	.label_664
.label_663:
	mov	rsp, rsp
	mov	rdi, qword ptr [rbp - 8]
	call	fflush
	mov	dword ptr [rbp - 0xc], eax
	nop	
	jmp	.label_665
.label_664:
	mov	rdi, qword ptr [rbp - 8]
	call	clear_ungetc_buffer_preserving_position
	mov	rdi, qword ptr [rbp - 8]
	call	fflush
	mov	dword ptr [rbp - 0xc], eax
.label_665:
	mov	rsp, rsp
	mov	eax, dword ptr [rbp - 0xc]
	add	rsp, 0x10
	pop	rbp
	nop	
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a716
	.globl sub_40a716
	.type sub_40a716, @function
sub_40a716:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a720

	.globl clear_ungetc_buffer_preserving_position
	.type clear_ungetc_buffer_preserving_position, @function
clear_ungetc_buffer_preserving_position:
	push	rbp
	mov	rbp, rbp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x10
	lea	rsi, [rsi]
	mov	qword ptr [rbp - 0x10], rdi
	mov	rdi, qword ptr [rbp - 0x10]
	lea	rdi, [rdi]
	mov	eax, dword ptr [rdi]
	and	eax, 0x100
	mov	rsp, rsp
	cmp	eax, 0
	je	.label_666
	xor	eax, eax
	mov	rbp, rbp
	mov	esi, eax
	nop	
	mov	edx, 1
	mov	rdi, qword ptr [rbp - 0x10]
	nop	
	call	rpl_fseeko
	lea	rsi, [rsi]
	mov	dword ptr [rbp - 4], eax
.label_666:
	mov	rsp, rsp
	add	rsp, 0x10
	mov	rsp, rsp
	pop	rbp
	lea	rsi, [rsi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a77b
	.globl sub_40a77b
	.type sub_40a77b, @function
sub_40a77b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a780

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	lea	rsi, [rsi]
	push	rbp
	mov	rbp, rsp
	mov	rbp, rbp
	sub	rsp, 0x30
	mov	rbp, rbp
	mov	qword ptr [rbp - 8], rdi
	mov	qword ptr [rbp - 0x18], rsi
	mov	dword ptr [rbp - 0xc], edx
	lea	rdi, [rdi]
	mov	rsi, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rsi + 0x10]
	lea	rdi, [rdi]
	mov	rdi, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	cmp	rsi, qword ptr [rdi + 8]
	jne	.label_667
	mov	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	rax, qword ptr [rax + 0x28]
	mov	rcx, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	cmp	rax, qword ptr [rcx + 0x20]
	mov	rbp, rbp
	jne	.label_667
	mov	rax, qword ptr [rbp - 8]
	mov	rbp, rbp
	cmp	qword ptr [rax + 0x48], 0
	jne	.label_667
	mov	rdi, qword ptr [rbp - 8]
	nop	
	call	fileno
	mov	rsi, qword ptr [rbp - 0x18]
	mov	edx, dword ptr [rbp - 0xc]
	mov	rbp, rbp
	mov	edi, eax
	lea	rdi, [rdi]
	call	lseek
	mov	qword ptr [rbp - 0x28], rax
	cmp	qword ptr [rbp - 0x28], -1
	jne	.label_668
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x1c], 0xffffffff
	jmp	.label_669
.label_668:
	lea	rdi, [rdi]
	mov	rax, qword ptr [rbp - 8]
	lea	rsi, [rsi]
	mov	ecx, dword ptr [rax]
	lea	rdi, [rdi]
	and	ecx, 0xffffffef
	mov	dword ptr [rax], ecx
	mov	rax, qword ptr [rbp - 0x28]
	mov	rsp, rsp
	mov	rdx, qword ptr [rbp - 8]
	nop	
	mov	qword ptr [rdx + 0x90], rax
	mov	rsp, rsp
	mov	dword ptr [rbp - 0x1c], 0
	lea	rsi, [rsi]
	jmp	.label_669
.label_667:
	mov	rdi, qword ptr [rbp - 8]
	mov	rsi, qword ptr [rbp - 0x18]
	mov	rsp, rsp
	mov	edx, dword ptr [rbp - 0xc]
	lea	rdi, [rdi]
	call	fseeko
	lea	rdi, [rdi]
	mov	dword ptr [rbp - 0x1c], eax
.label_669:
	mov	rbp, rbp
	mov	eax, dword ptr [rbp - 0x1c]
	nop	
	add	rsp, 0x30
	pop	rbp
	lea	rdi, [rdi]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a88d
	.globl sub_40a88d
	.type sub_40a88d, @function
sub_40a88d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40a890

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 0x10
	mov	dword ptr [rbp - 4], edi
	lea	rsi, [rsi]
	add	edi, 0xffffd828
	lea	rsi, [rsi]
	sub	edi, 0xb
	mov	dword ptr [rbp - 8], edi
	ja	.label_670
	jmp	.label_672
.label_672:
	mov	eax, dword ptr [rbp - 4]
	sub	eax, 0x27d8
	mov	rbp, rbp
	add	eax, 0x2001a
	mov	rsp, rsp
	mov	dword ptr [rbp - 4], eax
	jmp	.label_671
.label_670:
	lea	rsi, [rsi]
	jmp	.label_671
.label_671:
	mov	edi, dword ptr [rbp - 4]
	call	nl_langinfo
	add	rsp, 0x10
	nop	
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a8ea
	.globl sub_40a8ea
	.type sub_40a8ea, @function
sub_40a8ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a955
	.globl sub_40a955
	.type sub_40a955, @function
sub_40a955:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a962
	.globl sub_40a962
	.type sub_40a962, @function
sub_40a962:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40a986
	.globl sub_40a986
	.type sub_40a986, @function
sub_40a986:

	nop	word ptr cs:[rax + rax]
	.section .plt.got
	.align 16
	.label_778:
	.section .text
	.align 32
	.label_779:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.globl .str
	.type .str, @object
.str:
	.asciz "Try '%s --help' for more information.\n"
	.globl .str.1
	.type .str.1, @object
.str.1:
	.asciz "Usage: %s [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]\n"
	.globl .str.2
	.type .str.2, @object
.str.2:
	.asciz "Set each NAME to VALUE in the environment and run COMMAND.\n"
	.globl .str.3
	.type .str.3, @object
.str.3:
	.asciz "  -i, --ignore-environment  start with an empty environment\n  -0, --null           end each output line with NUL, not newline\n  -u, --unset=NAME     remove variable from the environment\n"
	.globl .str.4
	.type .str.4, @object
.str.4:
	.asciz "  -C, --chdir=DIR      change working directory to DIR\n"
	.globl .str.5
	.type .str.5, @object
.str.5:
	.asciz "  -S, --split-string=S  process and split S into separate arguments;\n                        used to pass multiple arguments on shebang lines\n"
	.globl .str.6
	.type .str.6, @object
.str.6:
	.asciz "      --block-signal[=SIG]    block delivery of SIG signal(s) to COMMAND\n"
	.globl .str.7
	.type .str.7, @object
.str.7:
	.asciz "      --default-signal[=SIG]  reset handling of SIG signal(s) to the default\n"
	.globl .str.8
	.type .str.8, @object
.str.8:
	.asciz "      --ignore-signal[=SIG]   set handling of SIG signals(s) to do nothing\n"
	.globl .str.9
	.type .str.9, @object
.str.9:
	.asciz "      --list-signal-handling  list non default signal handling to stderr\n"
	.globl .str.10
	.type .str.10, @object
.str.10:
	.asciz "  -v, --debug          print verbose information for each processing step\n"
	.globl .str.11
	.type .str.11, @object
.str.11:
	.asciz "      --help     display this help and exit\n"
	.globl .str.12
	.type .str.12, @object
.str.12:
	.asciz "      --version  output version information and exit\n"
	.globl .str.13
	.type .str.13, @object
.str.13:
	.asciz "\nA mere - implies -i.  If no COMMAND, print the resulting environment.\n"
	.globl .str.14
	.type .str.14, @object
.str.14:
	.asciz "\nSIG may be a signal name like 'PIPE', or a signal number like '13'.\nWithout SIG, all known signals are included.  Multiple signals can be\ncomma-separated.\n"
	.globl .str.15
	.type .str.15, @object
.str.15:
	.asciz "env"
	.globl .str.18_0
	.type .str.18_0, @object
.str.18_0:
	.ascii "/usr/local/share/"
	.globl .str.8_1
	.type .str.8_1, @object
.str.8_1:
	.asciz "locale"
	.globl .str.19
	.type .str.19, @object
.str.19:
	.asciz "invalid option -- '%c'"
	.globl .str.20
	.type .str.20, @object
.str.20:
	.asciz "use -[v]S to pass options in shebang lines"
	.globl .str.17
	.type .str.17, @object
.str.17:
	.ascii "GNU "
	.globl .str.17_0
	.type .str.17_0, @object
.str.17_0:
	.asciz "coreutils"
	.globl .str.22
	.type .str.22, @object
.str.22:
	.asciz "Richard Mlynarik"
	.globl .str.23
	.type .str.23, @object
.str.23:
	.asciz "David MacKenzie"
	.globl .str.24
	.type .str.24, @object
.str.24:
	.asciz "Assaf Gordon"
	.globl .str.26
	.type .str.26, @object
.str.26:
	.asciz "cleaning environ\n"
	.globl .str.27
	.type .str.27, @object
.str.27:
	.asciz "setenv:   %s\n"
	.globl .str.28
	.type .str.28, @object
.str.28:
	.asciz "cannot set %s"
	.globl .str.29
	.type .str.29, @object
.str.29:
	.asciz "cannot specify --null (-0) with command"
	.globl .str.30
	.type .str.30, @object
.str.30:
	.asciz "must specify command with --chdir (-C)"
	.globl .str.31
	.type .str.31, @object
.str.31:
	.ascii "%s%"
	.globl .str.5_1
	.type .str.5_1, @object
.str.5_1:
	.asciz "c"
	.globl .str.32
	.type .str.32, @object
.str.32:
	.asciz "chdir:    %s\n"
	.globl .str.33
	.type .str.33, @object
.str.33:
	.asciz "cannot change directory to %s"
	.globl .str.34
	.type .str.34, @object
.str.34:
	.asciz "executing: %s\n"
	.globl .str.35
	.type .str.35, @object
.str.35:
	.asciz "   arg[%d]= %s\n"
	.globl .str.37
	.type .str.37, @object
.str.37:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
	.globl .str.38
	.type .str.38, @object
.str.38:
	.asciz "["
	.globl .str.39
	.type .str.39, @object
.str.39:
	.asciz "test invocation"
	.globl .str.40
	.type .str.40, @object
.str.40:
	.ascii "Multi-call"
	.globl .str.52
	.type .str.52, @object
.str.52:
	.asciz " invocation"
	.globl .str.41
	.type .str.41, @object
.str.41:
	.asciz "sha224sum"
	.globl .str.42
	.type .str.42, @object
.str.42:
	.asciz "sha2 utilities"
	.globl .str.43
	.type .str.43, @object
.str.43:
	.asciz "sha256sum"
	.globl .str.44
	.type .str.44, @object
.str.44:
	.asciz "sha384sum"
	.globl .str.45
	.type .str.45, @object
.str.45:
	.asciz "sha512sum"
	.globl .str.46
	.type .str.46, @object
.str.46:
	.asciz "\n%s online help: <%s>\n"
	.globl .str.18
	.type .str.18, @object
.str.18:
	.asciz "https://www.gnu.org/software/coreutils/"
	.globl .str.48
	.type .str.48, @object
.str.48:
	.asciz "en_"
	.globl .str.49
	.type .str.49, @object
.str.49:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
	.globl .str.50
	.type .str.50, @object
.str.50:
	.asciz "Full documentation <%s%s>\n"
	.globl .str.51
	.type .str.51, @object
.str.51:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
	.globl .str.53
	.type .str.53, @object
.str.53:
	.asciz "ignore-environment"
	.globl .str.54
	.type .str.54, @object
.str.54:
	.asciz "null"
	.globl .str.55
	.type .str.55, @object
.str.55:
	.asciz "unset"
	.globl .str.56
	.type .str.56, @object
.str.56:
	.asciz "chdir"
	.globl .str.57
	.type .str.57, @object
.str.57:
	.asciz "default-signal"
	.globl .str.58
	.type .str.58, @object
.str.58:
	.asciz "ignore-signal"
	.globl .str.59
	.type .str.59, @object
.str.59:
	.asciz "block-signal"
	.globl .str.60
	.type .str.60, @object
.str.60:
	.asciz "list-signal-handling"
	.globl .str.61
	.type .str.61, @object
.str.61:
	.asciz "debug"
	.globl .str.62
	.type .str.62, @object
.str.62:
	.asciz "split-string"
	.globl .str.63
	.type .str.63, @object
.str.63:
	.asciz "help"
	.globl .str.64
	.type .str.64, @object
.str.64:
	.asciz "version"
	.globl .str.65
	.type .str.65, @object
.str.65:
	.asciz ","
	.globl .str.1_0
	.type .str.1_0, @object
.str.1_0:
	.asciz "%s: invalid signal"
	.globl .str.67
	.type .str.67, @object
.str.67:
	.asciz "split -S:  %s\n"
	.globl .str.68
	.type .str.68, @object
.str.68:
	.asciz " into:    %s\n"
	.globl .str.69
	.type .str.69, @object
.str.69:
	.asciz "     &    %s\n"
	.globl .str.70
	.type .str.70, @object
.str.70:
	.asciz "str && str[0] && !isspace (str[0])"
	.globl .str.71
	.type .str.71, @object
.str.71:
	.asciz "src/env.c"
	.globl __PRETTY_FUNCTION__.build_argv
	.type __PRETTY_FUNCTION__.build_argv, @object
__PRETTY_FUNCTION__.build_argv:
	.asciz "char **build_argv(const char *, int)"
	.globl .str.72
	.type .str.72, @object
.str.72:
	.asciz "DUMMY"
	.globl .str.73
	.type .str.73, @object
.str.73:
	.ascii " \t"
	.globl .str_0
	.type .str_0, @object
.str_0:
	.byte 0
	.globl .str.74
	.type .str.74, @object
.str.74:
	.asciz "expanding ${%s} into %s\n"
	.globl .str.75
	.type .str.75, @object
.str.75:
	.asciz "replacing ${%s} with null string\n"
	.globl __PRETTY_FUNCTION__.validate_split_str
	.type __PRETTY_FUNCTION__.validate_split_str, @object
__PRETTY_FUNCTION__.validate_split_str:
	.asciz "void validate_split_str(const char *, size_t *, int *)"
	.globl .str.76
	.type .str.76, @object
.str.76:
	.asciz "!(sq && dq)"
	.globl .str.77
	.type .str.77, @object
.str.77:
	.asciz "'\\c' must not appear in double-quoted -S string"
	.globl .str.78
	.type .str.78, @object
.str.78:
	.asciz "invalid backslash at end of string in -S"
	.globl .str.79
	.type .str.79, @object
.str.79:
	.asciz "invalid sequence '\\%c' in -S"
	.globl .str.80
	.type .str.80, @object
.str.80:
	.asciz "only ${VARNAME} expansion is supported, error at: %s"
	.globl .str.81
	.type .str.81, @object
.str.81:
	.asciz "no terminating quote in -S string"
	.globl __PRETTY_FUNCTION__.escape_char
	.type __PRETTY_FUNCTION__.escape_char, @object
__PRETTY_FUNCTION__.escape_char:
	.asciz "char escape_char(const char)"
	.globl .str.83
	.type .str.83, @object
.str.83:
	.ascii "str && *str == '$"
	.globl .str.12_0
	.type .str.12_0, @object
.str.12_0:
	.asciz "'"
	.globl __PRETTY_FUNCTION__.scan_varname
	.type __PRETTY_FUNCTION__.scan_varname, @object
__PRETTY_FUNCTION__.scan_varname:
	.asciz "const char *scan_varname(const char *)"
	.globl .str.84
	.type .str.84, @object
.str.84:
	.asciz "unset:    %s\n"
	.globl .str.85
	.type .str.85, @object
.str.85:
	.asciz "cannot unset %s"
	.globl .str.86
	.type .str.86, @object
.str.86:
	.asciz "failed to get signal action for signal %d"
	.globl .str.87
	.type .str.87, @object
.str.87:
	.asciz "failed to set signal action for signal %d"
	.globl .str.88
	.type .str.88, @object
.str.88:
	.asciz "Reset signal %s (%d) to %s%s\n"
	.globl .str.89
	.type .str.89, @object
.str.89:
	.asciz "DEFAULT"
	.globl .str.90
	.type .str.90, @object
.str.90:
	.asciz "IGNORE"
	.globl .str.91
	.type .str.91, @object
.str.91:
	.asciz " (failure ignored)"
	.globl .str.92
	.type .str.92, @object
.str.92:
	.asciz "failed to get signal process mask"
	.globl .str.94
	.type .str.94, @object
.str.94:
	.ascii "UN"
	.globl .str.93
	.type .str.93, @object
.str.93:
	.asciz "BLOCK"
	.globl .str.95
	.type .str.95, @object
.str.95:
	.asciz "signal %s (%d) mask set to %s\n"
	.globl .str.96
	.type .str.96, @object
.str.96:
	.asciz "failed to set signal process mask"
	.globl .str.97
	.type .str.97, @object
.str.97:
	.asciz "%-10s (%2d): %s%s%s\n"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl shortopts
	.type shortopts, @object
shortopts:
	.asciz "+C:iS:u:v0 \t"
	.byte 0
	.byte 0
	.byte 0
	.globl longopts
	.type longopts, @object
longopts:
	.quad .str.53
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 105
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.54
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.55
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 117
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.56
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.57
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.58
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.59
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.60
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 131
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.61
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.62
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.63
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.64
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl emit_ancillary_info.infomap
	.type emit_ancillary_info.infomap, @object
emit_ancillary_info.infomap:
	.quad .str.38
	.quad .str.39
	.quad .str.17_0
	.quad .str.40
	.quad .str.41
	.quad .str.42
	.quad .str.43
	.quad .str.42
	.quad .str.44
	.quad .str.42
	.quad .str.45
	.quad .str.42
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl .str_2
	.type .str_2, @object
.str_2:
	.asciz "abcdefghijklmnopqrstuvwxyz"
	.globl .str_9
	.type .str_9, @object
.str_9:
	.asciz "8.31"
	.globl .str_3
	.type .str_3, @object
.str_3:
	.asciz "write error"
	.globl .str.1_1
	.type .str.1_1, @object
.str.1_1:
	.ascii "%s: "
	.globl .str_1
	.type .str_1, @object
.str_1:
	.asciz "%s"
	.globl .str_4
	.type .str_4, @object
.str_4:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
	.globl .str.1_2
	.type .str.1_2, @object
.str.1_2:
	.asciz "/.libs/"
	.globl .str.2_0
	.type .str.2_0, @object
.str.2_0:
	.ascii "lt"
	.globl .str.25
	.type .str.25, @object
.str.25:
	.byte 45
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_530:
	.quad .label_677
	.quad .label_678
	.quad .label_529
	.quad .label_679
	.quad .label_680
	.quad .label_681
	.quad .label_682
	.quad .label_683
	.quad .label_684
	.quad .label_684
	.quad .label_684
label_460:
	.quad .label_702
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_703
	.quad .label_704
	.quad .label_705
	.quad .label_706
	.quad .label_707
	.quad .label_708
	.quad .label_709
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_449
	.quad .label_387
	.quad .label_710
	.quad .label_710
	.quad .label_378
	.quad .label_710
	.quad .label_711
	.quad .label_710
	.quad .label_712
	.quad .label_710
	.quad .label_710
	.quad .label_710
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_710
	.quad .label_710
	.quad .label_710
	.quad .label_710
	.quad .label_713
	.quad .label_449
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_710
	.quad .label_714
	.quad .label_711
	.quad .label_710
	.quad .label_711
	.quad .label_710
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_711
	.quad .label_715
	.quad .label_710
	.quad .label_715
	.quad .label_378
	.quad .str_8
	.quad .str.1_8
	.quad .str.2_3
	.quad .str.3_1
	.quad .str.4_1
	.quad .str.5_1
	.quad .str.6_1
	.quad .str.7_1
	.quad .str.8_1
	.quad .str.9_1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.globl .str_8
	.type .str_8, @object
.str_8:
	.asciz "literal"
	.globl .str.1_8
	.type .str.1_8, @object
.str.1_8:
	.asciz "shell"
	.globl .str.2_3
	.type .str.2_3, @object
.str.2_3:
	.asciz "shell-always"
	.globl .str.3_1
	.type .str.3_1, @object
.str.3_1:
	.ascii "shell-"
	.globl .str.7_1
	.type .str.7_1, @object
.str.7_1:
	.asciz "escape"
	.globl .str.4_1
	.type .str.4_1, @object
.str.4_1:
	.asciz "shell-escape-always"
	.globl .str.6_1
	.type .str.6_1, @object
.str.6_1:
	.asciz "c-maybe"
	.globl .str.9_1
	.type .str.9_1, @object
.str.9_1:
	.asciz "clocale"
	.globl .str.10_0
	.type .str.10_0, @object
.str.10_0:
	.byte 34
	.byte 0
	.globl .str.11_0
	.type .str.11_0, @object
.str.11_0:
	.asciz "`"
	.globl .str.13_0
	.type .str.13_0, @object
.str.13_0:
	.asciz "UTF-8"
	.globl .str.14_0
	.type .str.14_0, @object
.str.14_0:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
	.globl .str.15_0
	.type .str.15_0, @object
.str.15_0:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
	.globl .str.16
	.type .str.16, @object
.str.16:
	.ascii "GB1803"
	.globl .str.82
	.type .str.82, @object
.str.82:
	.asciz "0"
	.globl .str.17_1
	.type .str.17_1, @object
.str.17_1:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
	.globl .str.18_1
	.type .str.18_1, @object
.str.18_1:
	.byte 161
	.byte 175
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_593:
	.quad .label_740
	.quad .label_741
	.quad .label_742
	.quad .label_743
	.quad .label_744
	.quad .label_745
	.quad .label_746
	.quad .label_747
	.quad .label_748
	.quad .label_749
	.globl .str_5
	.type .str_5, @object
.str_5:
	.asciz "%s (%s) %s\n"
	.globl .str.1_3
	.type .str.1_3, @object
.str.1_3:
	.asciz "%s %s\n"
	.globl .str.2_1
	.type .str.2_1, @object
.str.2_1:
	.asciz "(C)"
	.globl .str.3_0
	.type .str.3_0, @object
.str.3_0:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
	.globl .str.4_0
	.type .str.4_0, @object
.str.4_0:
	.asciz "Written by %s.\n"
	.globl .str.5_0
	.type .str.5_0, @object
.str.5_0:
	.asciz "Written by %s and %s.\n"
	.globl .str.6_0
	.type .str.6_0, @object
.str.6_0:
	.asciz "Written by %s, %s, and %s.\n"
	.globl .str.7_0
	.type .str.7_0, @object
.str.7_0:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
	.globl .str.8_0
	.type .str.8_0, @object
.str.8_0:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
	.globl .str.9_0
	.type .str.9_0, @object
.str.9_0:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
	.globl .str.10_1
	.type .str.10_1, @object
.str.10_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
	.globl .str.11_1
	.type .str.11_1, @object
.str.11_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
	.globl .str.12_1
	.type .str.12_1, @object
.str.12_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
	.globl .str.13_1
	.type .str.13_1, @object
.str.13_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
	.globl .str.14_1
	.type .str.14_1, @object
.str.14_1:
	.asciz "\nReport bugs to: %s\n"
	.globl .str.15_1
	.type .str.15_1, @object
.str.15_1:
	.asciz "bug-coreutils@gnu.org"
	.globl .str.16_0
	.type .str.16_0, @object
.str.16_0:
	.asciz "%s home page: <%s>\n"
	.globl .str.19_0
	.type .str.19_0, @object
.str.19_0:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.globl .str.1_4
	.type .str.1_4, @object
.str.1_4:
	.asciz "memory exhausted"
	.globl .str_6
	.type .str_6, @object
.str_6:
	.asciz "RTMIN"
	.globl .str.1_5
	.type .str.1_5, @object
.str.1_5:
	.asciz "RTMAX"
	.globl .str.2_2
	.type .str.2_2, @object
.str.2_2:
	.asciz "%+d"
	.globl .str_7
	.type .str_7, @object
.str_7:
	.asciz "C"
	.globl .str.1_6
	.type .str.1_6, @object
.str.1_6:
	.asciz "POSIX"
	.globl .str.1_7
	.type .str.1_7, @object
.str.1_7:
	.asciz "ASCII"
	.label_780:
	.section .data
	.align 16
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad .str_9
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_571:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl numname_table
	.type numname_table, @object
numname_table:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 72
	.byte 85
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 78
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 81
	.byte 85
	.byte 73
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 76
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 82
	.byte 65
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 66
	.byte 82
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 70
	.byte 80
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.byte 75
	.asciz "ILL"
	.byte 0
	.byte 0
	.byte 0
	.byte 11
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 69
	.byte 71
	.byte 86
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 66
	.byte 85
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.asciz "IPE"
	.byte 0
	.byte 0
	.byte 0
	.byte 14
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 76
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 69
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 10
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 83
	.byte 82
	.byte 49
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 12
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 83
	.byte 82
	.byte 50
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 72
	.byte 76
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 23
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 82
	.byte 71
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 19
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 84
	.byte 79
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 20
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 83
	.byte 84
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 18
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 79
	.byte 78
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 21
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 84
	.byte 73
	.byte 78
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 22
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 84
	.byte 79
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 31
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 89
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 79
	.byte 76
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 86
	.byte 84
	.byte 65
	.byte 76
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 82
	.byte 79
	.byte 70
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 67
	.byte 80
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 70
	.byte 83
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 79
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 76
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 30
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 87
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 28
	.byte 0
	.byte 0
	.byte 0
	.byte 87
	.byte 73
	.byte 78
	.byte 67
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 79
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 84
	.byte 75
	.byte 70
	.byte 76
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.asciz "EXIT"
	.byte 0
	.byte 0
	.byte 0
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .bss
	.align 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl completed.7594
	.type completed.7594, @object
completed.7594:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl dev_debug
	.type dev_debug, @object
dev_debug:
	.byte 0x0
	.globl report_signal_handling
	.type report_signal_handling, @object
report_signal_handling:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl main.dummy_environ
	.type main.dummy_environ, @object
main.dummy_environ:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl sig_mask_changed
	.type sig_mask_changed, @object
sig_mask_changed:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl signals
	.type signals, @object
signals:
	.quad 0x0
	.globl usvars_used
	.type usvars_used, @object
usvars_used:
	.quad 0x0
	.globl usvars_alloc
	.type usvars_alloc, @object
usvars_alloc:
	.quad 0x0
	.globl usvars
	.type usvars, @object
usvars:
	.quad 0x0
	.globl block_signals
	.type block_signals, @object
block_signals:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl unblock_signals
	.type unblock_signals, @object
unblock_signals:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl vnlen
	.type vnlen, @object
vnlen:
	.quad 0x0
	.globl varname
	.type varname, @object
varname:
	.quad 0x0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: