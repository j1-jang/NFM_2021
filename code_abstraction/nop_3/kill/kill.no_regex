	.section	.text
	.align	16
	#Procedure 0x401519
	.globl sub_401519
	.type sub_401519, @function
sub_401519:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x40151a
	.globl sub_40151a
	.type sub_40151a, @function
sub_40151a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401552
	.globl sub_401552
	.type sub_401552, @function
sub_401552:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40159a
	.globl sub_40159a
	.type sub_40159a, @function
sub_40159a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4015bc
	.globl sub_4015bc
	.type sub_4015bc, @function
sub_4015bc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4015cd
	.globl sub_4015cd
	.type sub_4015cd, @function
sub_4015cd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4015e6
	.globl sub_4015e6
	.type sub_4015e6, @function
sub_4015e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4015f0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_7
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx,  qword ptr [word ptr [rip + program_name]]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	mov	r8, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.2
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	call	emit_mandatory_arg_note
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.3
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.4
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.5
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.6
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.7
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.8
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	call	emit_ancillary_info
	mov	edi, ebp
	call	exit
.label_7:
	mov	rbx,  qword ptr [word ptr [rip + stderr]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx,  qword ptr [word ptr [rip + program_name]]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x40173e
	.globl sub_40173e
	.type sub_40173e, @function
sub_40173e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401740

	.globl emit_mandatory_arg_note
	.type emit_mandatory_arg_note, @function
emit_mandatory_arg_note:
	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.19
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x401762
	.globl sub_401762
	.type sub_401762, @function
sub_401762:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401770

	.globl emit_ancillary_info
	.type emit_ancillary_info, @function
emit_ancillary_info:
	push	r14
	push	rbx
	push	rax
	mov	ebx, OFFSET FLAT:emit_ancillary_info.infomap
	mov	esi, OFFSET FLAT:.str.20
	nop	
.label_10:
	mov	edi, OFFSET FLAT:.str.8
	call	strcmp
	test	eax, eax
	je	.label_9
	mov	rsi, qword ptr [rbx + 0x10]
	add	rbx, 0x10
	test	rsi, rsi
	jne	.label_10
.label_9:
	mov	rax, qword ptr [rbx + 8]
	test	rax, rax
	mov	ebx, OFFSET FLAT:.str.8
	cmovne	rbx, rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.28
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.17
	mov	ecx, OFFSET FLAT:.str.18
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_8
	mov	esi, OFFSET FLAT:.str.30
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_8
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.31
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
.label_8:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.32
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	r14d, OFFSET FLAT:.str.8
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.18
	mov	ecx, OFFSET FLAT:.str.8
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.33
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	cmp	rbx, r14
	mov	eax, OFFSET FLAT:.str.34
	mov	ecx, OFFSET FLAT:.str_0
	cmove	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rdx
	mov	rdx, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	jmp	__printf_chk
	.section	.text
	.align	16
	#Procedure 0x40188a
	.globl sub_40188a
	.type sub_40188a, @function
sub_40188a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401890

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r12, rsi
	mov	r14d, edi
	mov	rdi, qword ptr [r12]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:.str_0
	call	setlocale
	mov	edi, OFFSET FLAT:.str.10
	mov	esi, OFFSET FLAT:.str.11
	call	bindtextdomain
	mov	edi, OFFSET FLAT:.str.10
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	mov	ebp, 0xffffffff
	xor	eax, eax
	mov	qword ptr [rsp + 8], rax
	lea	r15, [rsp + 0x10]
	xor	eax, eax
	mov	qword ptr [rsp], rax
	nop	word ptr cs:[rax + rax]
.label_18:
	mov	edx, OFFSET FLAT:short_options
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	mov	edi, r14d
	mov	rsi, r12
	call	getopt_long
	mov	ebx, eax
	mov	al, 1
	cmp	ebx, 0x6b
	jg	.label_12
	lea	ecx, [rbx + 1]
	cmp	ecx, 0x5b
	ja	.label_16
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_19]]
.label_364:
	mov	eax,  dword ptr [dword ptr [rip + optind]]
	cmp	eax, 2
	jne	.label_20
.label_365:
	cmp	qword ptr [word ptr [rip + optarg]],  0
	jne	.label_25
	movsxd	rax,  dword ptr [dword ptr [rip + optind]]
	mov	r13, qword ptr [r12 + rax*8 - 8]
	mov	rdi, r13
	call	strlen
	add	rax, r13
	mov	qword ptr [word ptr [rip + optarg]],  rax
.label_25:
	mov	rax,  qword ptr [word ptr [rip + optarg]]
	movsxd	rcx,  dword ptr [dword ptr [rip + optind]]
	mov	rcx, qword ptr [r12 + rcx*8 - 8]
	add	rcx, 2
	cmp	rax, rcx
	jne	.label_29
	dec	rax
	mov	qword ptr [word ptr [rip + optarg]],  rax
.label_376:
	test	ebp, ebp
	jns	.label_13
	mov	rdi,  qword ptr [word ptr [rip + optarg]]
	mov	rsi, r15
	call	operand2sig
	mov	ebp, eax
	test	ebp, ebp
	jns	.label_18
	jmp	.label_21
.label_12:
	add	ebx, -0x6c
	cmp	ebx, 8
	ja	.label_22
	jmp	qword ptr [word ptr [+ (rbx * 8) + label_24]]
.label_375:
	mov	rax, qword ptr [rsp]
.label_366:
	mov	rcx, qword ptr [rsp + 8]
	test	cl, cl
	mov	cl, 1
	mov	qword ptr [rsp + 8], rcx
	mov	qword ptr [rsp], rax
	je	.label_18
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.14
	jmp	.label_23
.label_20:
	dec	eax
	mov	dword ptr [dword ptr [rip + optind]],  eax
.label_363:
	mov	edi, 0xf
	test	ebp, ebp
	mov	rdx, qword ptr [rsp + 8]
	js	.label_11
	test	dl, dl
	mov	edi, ebp
	jne	.label_28
.label_11:
	test	dl, dl
	mov	eax,  dword ptr [dword ptr [rip + optind]]
	jne	.label_14
	cmp	eax, r14d
	jge	.label_15
.label_14:
	movsxd	rcx, eax
	test	dl, dl
	je	.label_17
	mov	rdx, qword ptr [rsp]
	and	dl, 1
	xor	esi, esi
	cmp	eax, r14d
	lea	rax, [r12 + rcx*8]
	cmovl	rsi, rax
	movzx	edi, dl
	call	list_signals
	jmp	.label_26
.label_17:
	lea	rsi, [r12 + rcx*8]
	call	send_signals
.label_26:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_13:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.13
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi,  qword ptr [word ptr [rip + optarg]]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	mov	edi, 1
	call	usage
.label_21:
	mov	edi, 1
	call	usage
.label_29:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.12
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	mov	ecx, ebx
	call	error
	mov	edi, 1
	call	usage
.label_16:
	cmp	ebx, 0xffffff7d
	je	.label_27
	cmp	ebx, 0xffffff7e
	jne	.label_22
	xor	edi, edi
	call	usage
.label_22:
	mov	edi, 1
	call	usage
.label_27:
	mov	rdi,  qword ptr [word ptr [rip + stdout]]
	mov	rcx,  qword ptr [word ptr [rip + Version]]
	mov	esi, OFFSET FLAT:.str.8
	mov	edx, OFFSET FLAT:.str.17
	mov	r8d, OFFSET FLAT:.str.16
	xor	r9d, r9d
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_15:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.18_0
	jmp	.label_23
.label_28:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.17_0
.label_23:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
	.section	.text
	.align	16
	#Procedure 0x401b62
	.globl sub_401b62
	.type sub_401b62, @function
sub_401b62:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401b70

	.globl list_signals
	.type list_signals, @function
list_signals:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	test	dil, dil
	je	.label_39
	mov	ebp, 1
	xor	r15d, r15d
	lea	r14, [rsp]
	nop	word ptr cs:[rax + rax]
.label_30:
	mov	edi, ebp
	mov	rsi, r14
	call	sig2str
	test	eax, eax
	jne	.label_45
	mov	rdi, r14
	call	strlen
	mov	ecx, r15d
	cmp	rcx, rax
	cmovae	eax, r15d
	mov	r15d, eax
.label_45:
	inc	ebp
	cmp	ebp, 0x41
	jne	.label_30
	test	rbx, rbx
	je	.label_33
	mov	rdi, qword ptr [rbx]
	xor	eax, eax
	test	rdi, rdi
	je	.label_31
	add	rbx, 8
	xor	ebp, ebp
	lea	r14, [rsp]
	nop	dword ptr [rax + rax]
.label_36:
	mov	rsi, r14
	call	operand2sig
	mov	ecx, eax
	mov	eax, 1
	test	ecx, ecx
	js	.label_43
	mov	edi, 2
	mov	esi, ecx
	mov	edx, r15d
	mov	rcx, r14
	call	print_table_row
	mov	eax, ebp
.label_43:
	mov	rdi, qword ptr [rbx]
	add	rbx, 8
	test	rdi, rdi
	mov	ebp, eax
	jne	.label_36
	jmp	.label_31
.label_39:
	test	rbx, rbx
	je	.label_41
	mov	rdi, qword ptr [rbx]
	xor	eax, eax
	test	rdi, rdi
	je	.label_31
	add	rbx, 8
	lea	r14, [rsp]
	xor	ebp, ebp
	nop	dword ptr [rax + rax]
.label_35:
	mov	rsi, r14
	call	operand2sig
	mov	ecx, eax
	test	ecx, ecx
	mov	eax, 1
	js	.label_37
	mov	rax, qword ptr [rbx - 8]
	movsx	eax, byte ptr [rax]
	add	eax, -0x30
	cmp	eax, 9
	ja	.label_40
	mov	rdi, r14
	call	puts
	jmp	.label_42
	.section	.text
	.align	16
	#Procedure 0x401c7c
	.globl sub_401c7c
	.type sub_401c7c, @function
sub_401c7c:

	nop	dword ptr [rax]
.label_40:
	mov	edi, 1
	mov	esi, OFFSET FLAT:.str.40
	xor	eax, eax
	mov	edx, ecx
	call	__printf_chk
.label_42:
	mov	eax, ebp
.label_37:
	mov	rdi, qword ptr [rbx]
	add	rbx, 8
	test	rdi, rdi
	mov	ebp, eax
	jne	.label_35
	jmp	.label_31
.label_33:
	mov	ebx, 1
	lea	rbp, [rsp]
	nop	
.label_34:
	mov	edi, ebx
	mov	rsi, rbp
	call	sig2str
	test	eax, eax
	jne	.label_38
	mov	edi, 2
	mov	esi, ebx
	mov	edx, r15d
	mov	rcx, rbp
	call	print_table_row
.label_38:
	inc	ebx
	xor	eax, eax
	cmp	ebx, 0x41
	jne	.label_34
	jmp	.label_31
.label_41:
	mov	ebx, 1
	lea	rbp, [rsp]
	nop	word ptr cs:[rax + rax]
.label_32:
	mov	edi, ebx
	mov	rsi, rbp
	call	sig2str
	test	eax, eax
	jne	.label_44
	mov	rdi, rbp
	call	puts
.label_44:
	inc	ebx
	xor	eax, eax
	cmp	ebx, 0x41
	jne	.label_32
.label_31:
	add	rsp, 0x18
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401d1a
	.globl sub_401d1a
	.type sub_401d1a, @function
sub_401d1a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d20

	.globl send_signals
	.type send_signals, @function
send_signals:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, rsi
	mov	dword ptr [rsp + 0xc], edi
	mov	rbp, qword ptr [r14]
	call	__errno_location
	mov	r12, rax
	add	r14, 8
	lea	r15, [rsp + 0x10]
	xor	r13d, r13d
	jmp	.label_47
.label_50:
	mov	edi, eax
	mov	esi, dword ptr [rsp + 0xc]
	call	kill
	test	eax, eax
	je	.label_49
	mov	ebx, dword ptr [r12]
	mov	rdi, rbp
	call	quote
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str_1
	xor	eax, eax
	mov	esi, ebx
	jmp	.label_48
	.section	.text
	.align	16
	#Procedure 0x401d7d
	.globl sub_401d7d
	.type sub_401d7d, @function
sub_401d7d:

	nop	dword ptr [rax]
.label_47:
	mov	dword ptr [r12], 0
	mov	edx, 0xa
	mov	rdi, rbp
	mov	rsi, r15
	call	strtoimax
	cmp	dword ptr [r12], 0x22
	je	.label_46
	movsxd	rcx, eax
	cmp	rcx, rax
	jne	.label_46
	mov	rcx, qword ptr [rsp + 0x10]
	cmp	rbp, rcx
	je	.label_46
	cmp	byte ptr [rcx], 0
	je	.label_50
	nop	word ptr cs:[rax + rax]
.label_46:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.43
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, rbp
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
.label_48:
	call	error
	mov	r13d, 1
.label_49:
	mov	rbp, qword ptr [r14]
	add	r14, 8
	test	rbp, rbp
	jne	.label_47
	mov	eax, r13d
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401e11
	.globl sub_401e11
	.type sub_401e11, @function
sub_401e11:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401e20

	.globl print_table_row
	.type print_table_row, @function
print_table_row:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15d, edx
	mov	ebx, esi
	mov	ebp, edi
	mov	edi, ebx
	call	strsignal
	test	rax, rax
	mov	ecx, OFFSET FLAT:.str.42
	cmovne	rcx, rax
	mov	qword ptr [rsp], rcx
	mov	edi, 1
	mov	esi, OFFSET FLAT:.str.41
	xor	eax, eax
	mov	r8d, r15d
	mov	edx, ebp
	mov	ecx, ebx
	mov	r9, r14
	call	__printf_chk
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401e6e
	.globl sub_401e6e
	.type sub_401e6e, @function
sub_401e6e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401e70

	.globl operand2sig
	.type operand2sig, @function
operand2sig:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x10
	mov	r14, rsi
	mov	r15, rdi
	movsx	eax, byte ptr [r15]
	add	eax, -0x30
	cmp	eax, 9
	ja	.label_60
	call	__errno_location
	mov	rbx, rax
	mov	dword ptr [rbx], 0
	lea	rsi, [rsp]
	mov	edx, 0xa
	mov	rdi, r15
	call	strtol
	mov	rdx, qword ptr [rsp]
	mov	ecx, 0xffffffff
	cmp	rdx, r15
	je	.label_51
	cmp	byte ptr [rdx], 0
	jne	.label_51
	cmp	dword ptr [rbx], 0
	jne	.label_51
	cmp	eax, -1
	je	.label_51
	movsxd	rdx, eax
	cmp	rdx, rax
	jne	.label_51
	cmp	eax, 0xfe
	mov	edx, 0xff
	mov	ecx, 0x7f
	cmovg	ecx, edx
	and	ecx, eax
.label_51:
	mov	dword ptr [rsp + 0xc], ecx
	jmp	.label_59
.label_60:
	mov	rdi, r15
	call	xstrdup
	mov	r12, rax
	mov	bpl, byte ptr [r12]
	test	bpl, bpl
	je	.label_61
	lea	rbx, [r12 + 1]
	nop	dword ptr [rax + rax]
.label_56:
	movsx	esi, bpl
	mov	edi, OFFSET FLAT:.str_2
	mov	edx, 0x1b
	call	memchr
	test	rax, rax
	je	.label_58
	add	bpl, 0xe0
	mov	byte ptr [rbx - 1], bpl
.label_58:
	mov	bpl, byte ptr [rbx]
	inc	rbx
	test	bpl, bpl
	jne	.label_56
.label_61:
	lea	rsi, [rsp + 0xc]
	mov	rdi, r12
	call	str2sig
	test	eax, eax
	je	.label_53
	movzx	eax, byte ptr [r12]
	cmp	eax, 0x53
	jne	.label_52
	movzx	eax, byte ptr [r12 + 1]
	cmp	eax, 0x49
	jne	.label_52
	movzx	eax, byte ptr [r12 + 2]
	cmp	eax, 0x47
	jne	.label_52
	mov	rdi, r12
	add	rdi, 3
	lea	rsi, [rsp + 0xc]
	call	str2sig
	test	eax, eax
	je	.label_53
.label_52:
	mov	dword ptr [rsp + 0xc], 0xffffffff
.label_53:
	mov	rdi, r12
	call	free
.label_59:
	mov	edi, dword ptr [rsp + 0xc]
	test	edi, edi
	js	.label_54
	mov	rsi, r14
	call	sig2str
	test	eax, eax
	je	.label_57
.label_54:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.1_0
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, r15
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	mov	eax, 0xffffffff
	jmp	.label_55
.label_57:
	mov	eax, dword ptr [rsp + 0xc]
.label_55:
	add	rsp, 0x10
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401fea
	.globl sub_401fea
	.type sub_401fea, @function
sub_401fea:

	nop	
	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x401ff0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [word ptr [rip + file_name]],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401ff8
	.globl sub_401ff8
	.type sub_401ff8, @function
sub_401ff8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402000
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [byte ptr [rip + ignore_EPIPE]],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x402008
	.globl sub_402008
	.type sub_402008, @function
sub_402008:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402010

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	r14
	push	rbx
	mov	rdi,  qword ptr [word ptr [rip + stdout]]
	call	close_stream
	test	eax, eax
	je	.label_62
	cmp	byte ptr [byte ptr [rip + ignore_EPIPE]],  0
	je	.label_64
	call	__errno_location
	cmp	dword ptr [rax], 0x20
	jne	.label_64
.label_62:
	mov	rdi,  qword ptr [word ptr [rip + stderr]]
	call	close_stream
	test	eax, eax
	jne	.label_63
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_64:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str_3
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rbx,  qword ptr [word ptr [rip + file_name]]
	call	__errno_location
	test	rbx, rbx
	mov	ebp, dword ptr [rax]
	jne	.label_65
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str_1
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, r14
	call	error
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
.label_63:
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
.label_65:
	mov	rdi, rbx
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.1_1
	xor	eax, eax
	mov	esi, ebp
	mov	r8, r14
	call	error
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4020d0

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_67
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_66
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:.str.1_2
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_66
	mov	esi, OFFSET FLAT:.str.2_0
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_68
	add	r14, 3
	mov	qword ptr [word ptr [rip + program_invocation_short_name]],  r14
.label_68:
	mov	rbx, r14
.label_66:
	mov	qword ptr [word ptr [rip + program_name]],  rbx
	mov	qword ptr [word ptr [rip + __progname_full]],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_67:
	mov	rcx,  qword ptr [word ptr [rip + stderr]]
	mov	edi, OFFSET FLAT:.str_4
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402171
	.globl sub_402171
	.type sub_402171, @function
sub_402171:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402180
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4021b3
	.globl sub_4021b3
	.type sub_4021b3, @function
sub_4021b3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4021c0
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x4021cf
	.globl sub_4021cf
	.type sub_4021cf, @function
sub_4021cf:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4021d0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x4021df
	.globl sub_4021df
	.type sub_4021df, @function
sub_4021df:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4021e0

	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:
	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	al, cl
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402216
	.globl sub_402216
	.type sub_402216, @function
sub_402216:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402220
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402233
	.globl sub_402233
	.type sub_402233, @function
sub_402233:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402240

	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:
	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_69
	test	rdx, rdx
	je	.label_69
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_69:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40226b
	.globl sub_40226b
	.type sub_40226b, @function
sub_40226b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402270
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 0x20], rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	r8d, dword ptr [rbp]
	mov	r9d, dword ptr [rbp + 4]
	mov	rax, qword ptr [rbp + 0x28]
	mov	rcx, qword ptr [rbp + 0x30]
	lea	rdx, [rbp + 8]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], rdx
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, qword ptr [rsp + 0x20]
	call	quotearg_buffer_restyled
	mov	dword ptr [rbx], r14d
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4022ea
	.globl sub_4022ea
	.type sub_4022ea, @function
sub_4022ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4022f0

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x108
	mov	ebx, r9d
	mov	dword ptr [rsp + 0x6c], ebx
	mov	r13d, r8d
	mov	qword ptr [rsp + 0xc0], rcx
	mov	r12, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 0xe0], rdi
	mov	rax, qword ptr [rsp + 0x150]
	mov	qword ptr [rsp + 0x88], rax
	mov	rax, qword ptr [rsp + 0x148]
	mov	qword ptr [rsp + 0x90], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0x60], rax
	mov	r15b, bl
	shr	r15b, 1
	and	r15b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x5c], eax
	and	ebx, 4
	mov	dword ptr [rsp + 0x58], ebx
	mov	r8b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x80], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0xd0], rax
	mov	eax, 0
	xor	r11d, r11d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0x70], rcx
.label_189:
	mov	r10, rbp
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	mov	ecx, r13d
	cmp	r13d, 0xa
	ja	.label_175
	mov	r14d, 7
	mov	sil, 1
	xor	edi, edi
	mov	r9, r12
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_176]]
.label_323:
	mov	r12d, r11d
	mov	edi, OFFSET FLAT:.str.11_0
	mov	esi, r13d
	mov	r14, r10
	mov	bl, r8b
	mov	rbp, r9
	call	gettext_quote
	mov	qword ptr [rsp + 0x90], rax
	mov	edi, OFFSET FLAT:.str.12_0
	mov	esi, r13d
	call	gettext_quote
	mov	r11d, r12d
	mov	r9, rbp
	mov	r8b, bl
	mov	r10, r14
	mov	qword ptr [rsp + 0x88], rax
.label_324:
	mov	dword ptr [rsp + 0xb8], r11d
	mov	rbp, r9
	mov	byte ptr [rsp + 0x69], r8b
	test	r15b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0xf0], rax
	mov	rdx, qword ptr [rsp + 0x90]
	jne	.label_77
	mov	al, byte ptr [rdx]
	test	al, al
	mov	ecx, 0
	mov	qword ptr [rsp + 0xf0], rcx
	je	.label_77
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	nop	
.label_107:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_96
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rcx + rsi], al
.label_96:
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	al, byte ptr [rdx + rcx + 1]
	inc	rcx
	mov	qword ptr [rsp + 0xf0], rcx
	test	al, al
	jne	.label_107
.label_77:
	mov	rbx, qword ptr [rsp + 0x88]
	mov	rdi, rbx
	mov	r12, r10
	call	strlen
	mov	r10, r12
	mov	qword ptr [rsp + 0xd0], rax
	mov	r14d, r13d
	mov	qword ptr [rsp + 0xa8], rbx
	mov	sil, 1
	mov	dil, r15b
	mov	r8b, byte ptr [rsp + 0x69]
	mov	r9, rbp
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r11d, dword ptr [rsp + 0xb8]
	jmp	.label_119
.label_316:
	xor	r14d, r14d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	mov	sil, al
	xor	edi, edi
	jmp	.label_119
.label_319:
	mov	al, 1
.label_317:
	mov	r15b, 1
.label_320:
	test	r15b, 1
	mov	cl, 1
	je	.label_137
	mov	cl, al
.label_137:
	mov	al, cl
.label_318:
	mov	r14d, 2
	test	r15b, 1
	jne	.label_139
	test	r10, r10
	je	.label_111
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx], 0x27
	mov	ecx, 1
	jmp	.label_142
.label_139:
	xor	ecx, ecx
	jmp	.label_142
.label_321:
	mov	r14d, 5
	test	r15b, 1
	jne	.label_147
	test	r10, r10
	je	.label_165
	mov	rax, qword ptr [rsp + 0xe0]
	mov	byte ptr [rax], 0x22
	mov	eax, 1
	jmp	.label_154
.label_322:
	mov	sil, 1
	mov	r14d, 5
	xor	eax, eax
	mov	qword ptr [rsp + 0xf0], rax
	mov	eax, OFFSET FLAT:.str.10_0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0xd0], rax
	mov	dil, 1
	jmp	.label_119
.label_111:
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_142:
	mov	qword ptr [rsp + 0xf0], rcx
	mov	ecx, OFFSET FLAT:.str.12_0
	mov	qword ptr [rsp + 0xa8], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0xd0], rcx
	mov	sil, al
	mov	dil, r15b
	jmp	.label_119
.label_147:
	xor	eax, eax
	jmp	.label_154
.label_165:
	mov	eax, 1
.label_154:
	mov	qword ptr [rsp + 0xf0], rax
	mov	eax, OFFSET FLAT:.str.10_0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0xd0], rax
	mov	sil, 1
	mov	dil, r15b
	nop	dword ptr [rax + rax]
.label_119:
	mov	qword ptr [rsp + 0x98], rdi
	mov	byte ptr [rsp + 0xa6], sil
	cmp	qword ptr [rsp + 0x140], 0
	setne	bl
	cmp	r14d, 2
	setne	r15b
	sete	dl
	mov	cl, sil
	and	cl, 1
	mov	byte ptr [rsp + 0xa5], cl
	sete	byte ptr [rsp + 0x6b]
	mov	r12b, r15b
	and	r12b, cl
	mov	byte ptr [rsp + 0xbf], r12b
	cmp	qword ptr [rsp + 0xd0], 0
	setne	r13b
	mov	al, r13b
	and	al, r12b
	mov	byte ptr [rsp + 0xdf], al
	mov	al, dil
	and	al, 1
	mov	byte ptr [rsp + 0xcf], al
	sete	cl
	and	dl, al
	mov	byte ptr [rsp + 0x7f], dl
	and	bl, al
	mov	byte ptr [rsp + 0xb7], bl
	or	cl, r15b
	mov	byte ptr [rsp + 0xa7], cl
	and	sil, dil
	and	sil, r13b
	mov	byte ptr [rsp + 0x6a], sil
	xor	esi, esi
	jmp	.label_70
	.section	.text
	.align	16
	#Procedure 0x402698
	.globl sub_402698
	.type sub_402698, @function
sub_402698:

	nop	dword ptr [rax + rax]
.label_156:
	inc	qword ptr [rsp + 0xf0]
	shl	r15b, 7
	sar	r15b, 7
	and	r15b, r8b
	mov	r8b, r15b
	inc	rsi
.label_70:
	cmp	rbp, -1
	je	.label_122
	cmp	rsi, rbp
	jne	.label_124
	jmp	.label_126
	.section	.text
	.align	16
	#Procedure 0x4026c9
	.globl sub_4026c9
	.type sub_4026c9, @function
sub_4026c9:

	nop	dword ptr [rax]
.label_122:
	cmp	byte ptr [r9 + rsi], 0
	je	.label_126
.label_124:
	cmp	byte ptr [rsp + 0xdf], 0
	je	.label_130
	mov	rax, qword ptr [rsp + 0xd0]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_131
	cmp	rbp, -1
	jne	.label_131
	mov	dword ptr [rsp + 0xb8], r11d
	mov	rdi, r9
	mov	rbp, r10
	mov	r15b, r8b
	mov	r13, r14
	mov	r12, r9
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r11d, dword ptr [rsp + 0xb8]
	mov	r9, r12
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	r14, r13
	mov	r8b, r15b
	mov	r10, rbp
	mov	rbp, rax
.label_131:
	cmp	rbx, rbp
	jbe	.label_151
.label_130:
	mov	rdi, r14
	mov	dword ptr [rsp + 0xec], 0
.label_72:
	movzx	r13d, byte ptr [r9 + rsi]
	cmp	r13, 0x7e
	ja	.label_155
	xor	edx, edx
	mov	r15b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [word ptr [+ (r13 * 8) + label_92]]
.label_333:
	test	rsi, rsi
	jne	.label_113
	jmp	.label_93
	.section	.text
	.align	16
	#Procedure 0x402781
	.globl sub_402781
	.type sub_402781, @function
sub_402781:

	nop	word ptr cs:[rax + rax]
.label_151:
	mov	qword ptr [rsp + 0xc0], rbp
	mov	r12d, r11d
	mov	r13, r14
	mov	r15b, r8b
	mov	rbx, r10
	lea	rdi, [r9 + rsi]
	mov	r14, rsi
	mov	rbp, r9
	mov	rsi, qword ptr [rsp + 0xa8]
	mov	rdx, qword ptr [rsp + 0xd0]
	call	memcmp
	test	eax, eax
	sete	al
	mov	dword ptr [rsp + 0xec], eax
	jne	.label_181
	cmp	byte ptr [rsp + 0xcf], 0
	mov	r10, rbx
	mov	r8b, r15b
	mov	rdi, r13
	mov	r9, rbp
	mov	r11d, r12d
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	rsi, r14
	je	.label_72
	jmp	.label_73
.label_181:
	mov	r10, rbx
	mov	r8b, r15b
	mov	rdi, r13
	mov	r9, rbp
	mov	r11d, r12d
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	rsi, r14
	jmp	.label_72
.label_337:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_84
	test	rsi, rsi
	jne	.label_90
	cmp	rbp, 1
	je	.label_93
	xor	r15d, r15d
	jmp	.label_89
.label_326:
	cmp	byte ptr [rsp + 0xa5], 0
	je	.label_95
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_73
	cmp	edi, 2
	jne	.label_102
	mov	al, r11b
	and	al, 1
	jne	.label_106
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_109
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_109:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_183
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x24
.label_183:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_123
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_123:
	mov	rax, qword ptr [rsp + 0xf0]
	add	rax, 3
	mov	r11b, 1
	mov	rcx, rax
	jmp	.label_145
.label_327:
	mov	bl, 0x62
	jmp	.label_71
.label_328:
	mov	cl, 0x74
	jmp	.label_135
.label_329:
	mov	bl, 0x76
	jmp	.label_71
.label_330:
	mov	bl, 0x66
	jmp	.label_71
.label_331:
	mov	cl, 0x72
	jmp	.label_135
.label_334:
	mov	al, 1
	mov	qword ptr [rsp + 0x70], rax
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_140
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_81
	test	r10, r10
	sete	al
	mov	rcx, qword ptr [rsp + 0x80]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r10
	mov	qword ptr [rsp + 0x80], rdx
	mov	eax, 0
	cmove	r10, rax
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_149
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_149:
	mov	rdi, r14
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_161
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x5c
.label_161:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_170
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_170:
	add	qword ptr [rsp + 0xf0], 3
	xor	r11d, r11d
	jmp	.label_179
.label_335:
	mov	r14, rdi
	cmp	r14d, 5
	je	.label_185
	cmp	r14d, 2
	jne	.label_187
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_81
.label_187:
	mov	rdi, r14
	jmp	.label_113
.label_336:
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_186
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_81
	mov	rdi, r14
	jmp	.label_75
.label_155:
	mov	dword ptr [rsp + 0xb8], r11d
	mov	qword ptr [rsp + 0x38], rdi
	mov	byte ptr [rsp + 0x69], r8b
	mov	qword ptr [rsp + 0x40], r10
	cmp	qword ptr [rsp + 0x60], 1
	jne	.label_79
	mov	r14, r9
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	r9, r14
	mov	rax, qword ptr [rax]
	movzx	r15d, word ptr [rax + r13*2]
	shr	r15d, 0xe
	and	r15b, 1
	mov	ebx, 1
.label_108:
	and	r15b, 1
	mov	dl, r15b
	or	dl, byte ptr [rsp + 0x6b]
	mov	byte ptr [rsp + 0xc0], dl
	cmp	rbx, 1
	mov	rcx, rbx
	mov	r10, qword ptr [rsp + 0x40]
	mov	r8b, byte ptr [rsp + 0x69]
	mov	r14, qword ptr [rsp + 0x38]
	mov	r11d, dword ptr [rsp + 0xb8]
	ja	.label_98
	test	dl, dl
	je	.label_98
	mov	rdi, r14
	xor	eax, eax
	jmp	.label_89
.label_84:
	test	rsi, rsi
	jne	.label_120
	mov	cl, byte ptr [r9 + 1]
	test	cl, cl
	jne	.label_120
.label_93:
	mov	dl, 1
.label_332:
	cmp	byte ptr [rsp + 0xa7], 0
	je	.label_73
	xor	eax, eax
	mov	r15b, dl
	jmp	.label_89
.label_95:
	cmp	dword ptr [rsp + 0x5c], 0
	je	.label_113
	mov	r14, rdi
	inc	rsi
	jmp	.label_70
.label_140:
	mov	rdi, r14
.label_179:
	xor	eax, eax
	mov	r15b, 1
	jmp	.label_89
.label_186:
	mov	rdi, r14
	cmp	byte ptr [rsp + 0x6a], 0
	mov	cl, r13b
	je	.label_135
.label_75:
	xor	eax, eax
	xor	r15d, r15d
	jmp	.label_74
.label_135:
	cmp	byte ptr [rsp + 0xa7], 0
	mov	bl, cl
	je	.label_73
.label_71:
	xor	eax, eax
	cmp	byte ptr [rsp + 0xa5], 0
	mov	r15d, 0
	je	.label_89
	jmp	.label_150
.label_79:
	mov	qword ptr [rsp + 0x100], 0
	cmp	rbp, -1
	jne	.label_152
	mov	rdi, r9
	mov	rbx, r9
	mov	rbp, rsi
	call	strlen
	mov	rsi, rbp
	mov	r9, rbx
	mov	rbp, rax
.label_152:
	mov	qword ptr [rsp + 0xc0], rbp
	lea	rax, [r9 + rsi]
	mov	qword ptr [rsp + 0x20], rax
	mov	r15b, 1
	xor	ebx, ebx
	lea	r14, [rsp + 0x100]
.label_100:
	lea	rax, [rbx + rsi]
	mov	qword ptr [rsp + 0x28], rax
	mov	qword ptr [rsp + 0x30], rsi
	lea	rsi, [r9 + rax]
	mov	qword ptr [rsp + 0x48], r9
	mov	rdx, rbp
	sub	rdx, rax
	lea	rdi, [rsp + 0xfc]
	mov	rcx, r14
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_114
	mov	qword ptr [rsp + 0x50], rbx
	cmp	rbp, -1
	mov	r10, qword ptr [rsp + 0x40]
	movabs	rsi, 0x20000002b
	mov	r14, qword ptr [rsp + 0x38]
	mov	r8b, byte ptr [rsp + 0xa6]
	je	.label_180
	cmp	rbp, -2
	je	.label_188
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x7f]
	movzx	eax, al
	cmp	eax, 1
	jne	.label_190
	mov	rax, qword ptr [rsp + 0x50]
	mov	rcx, qword ptr [rsp + 0x20]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_87:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_80
	bt	rsi, rdx
	jb	.label_83
.label_80:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_87
.label_190:
	mov	edi, dword ptr [rsp + 0xfc]
	call	iswprint
	test	eax, eax
	jne	.label_160
	xor	r15d, r15d
.label_160:
	lea	rdi, [rsp + 0x100]
	mov	rbx, qword ptr [rsp + 0x50]
	add	rbx, rbp
	mov	r14, rdi
	call	mbsinit
	test	eax, eax
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	rsi, qword ptr [rsp + 0x30]
	je	.label_100
	jmp	.label_108
.label_120:
	mov	rbp, -1
	xor	r15d, r15d
	jmp	.label_89
.label_185:
	mov	rdi, r14
	cmp	dword ptr [rsp + 0x58], 0
	je	.label_113
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_113
	movzx	eax, byte ptr [rsi + r9 + 1]
	cmp	eax, 0x3f
	jne	.label_113
	movsx	edx, byte ptr [r9 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_125
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_128
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_73
	mov	r13b, byte ptr [r9 + rcx]
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_133
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x3f
.label_133:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_153
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x22
.label_153:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_148
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x22
.label_148:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 3]
	cmp	rax, r10
	jae	.label_132
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x3f
.label_132:
	add	qword ptr [rsp + 0xf0], 4
	xor	eax, eax
	mov	rsi, rcx
	xor	r15d, r15d
	jmp	.label_89
.label_113:
	xor	eax, eax
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_89:
	test	r12b, r12b
	je	.label_163
	cmp	qword ptr [rsp + 0x140], 0
	jne	.label_166
	jmp	.label_85
	.section	.text
	.align	16
	#Procedure 0x402da2
	.globl sub_402da2
	.type sub_402da2, @function
sub_402da2:

	nop	word ptr cs:[rax + rax]
.label_163:
	cmp	byte ptr [rsp + 0xb7], 0
	je	.label_85
.label_166:
	mov	r14, rsi
	mov	cl, r13b
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	cl, r13b
	shl	esi, cl
	mov	ecx, dword ptr [rsp + 0xec]
	test	cl, cl
	jne	.label_177
	mov	rcx, qword ptr [rsp + 0x140]
	and	esi, dword ptr [rcx + rdx*4]
	mov	bl, r13b
	mov	rsi, r14
	je	.label_74
	jmp	.label_150
	.section	.text
	.align	16
	#Procedure 0x402df4
	.globl sub_402df4
	.type sub_402df4, @function
sub_402df4:

	nop	word ptr cs:[rax + rax]
.label_85:
	mov	ecx, dword ptr [rsp + 0xec]
	test	cl, cl
	mov	bl, r13b
	jne	.label_150
	jmp	.label_74
.label_177:
	mov	bl, r13b
	mov	rsi, r14
.label_150:
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_73
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_82
	mov	al, r11b
	and	al, 1
	jne	.label_82
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_88
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_88:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_191
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x24
.label_191:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_103
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_103:
	add	qword ptr [rsp + 0xf0], 3
	mov	r11b, 1
.label_82:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_115
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x5c
.label_115:
	inc	qword ptr [rsp + 0xf0]
	jmp	.label_121
.label_90:
	xor	r15d, r15d
	jmp	.label_89
.label_98:
	add	rcx, rsi
	xor	eax, eax
	jmp	.label_127
	.section	.text
	.align	16
	#Procedure 0x402ed4
	.globl sub_402ed4
	.type sub_402ed4, @function
sub_402ed4:

	nop	word ptr cs:[rax + rax]
.label_129:
	inc	qword ptr [rsp + 0xf0]
	mov	r13b, byte ptr [r9 + rsi + 1]
	mov	rsi, rdx
	mov	dl, byte ptr [rsp + 0xc0]
.label_127:
	test	dl, dl
	je	.label_134
	mov	edx, dword ptr [rsp + 0xec]
	mov	rdi, r14
	test	dl, 1
	je	.label_136
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_144
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rdx + rsi], 0x5c
	mov	rsi, rbx
.label_144:
	inc	qword ptr [rsp + 0xf0]
	mov	dword ptr [rsp + 0xec], 0
	jmp	.label_136
	.section	.text
	.align	16
	#Procedure 0x402f4a
	.globl sub_402f4a
	.type sub_402f4a, @function
sub_402f4a:

	nop	word ptr [rax + rax]
.label_134:
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_81
	cmp	r14d, 2
	jne	.label_86
	mov	al, r11b
	and	al, 1
	jne	.label_86
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_157
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x27
.label_157:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_143
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x24
.label_143:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_171
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x27
.label_171:
	add	qword ptr [rsp + 0xf0], 3
	mov	r11b, 1
.label_86:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_172
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x5c
.label_172:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_162
	mov	dl, r13b
	shr	dl, 6
	or	dl, 0x30
	mov	rdi, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rax], dl
	mov	rsi, rdi
.label_162:
	mov	rdi, r14
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_76
	mov	dl, r13b
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rax], dl
	mov	rsi, rbx
.label_76:
	add	qword ptr [rsp + 0xf0], 3
	and	r13b, 7
	or	r13b, 0x30
	mov	al, 1
.label_136:
	lea	rdx, [rsi + 1]
	cmp	rcx, rdx
	jbe	.label_74
	test	r11b, 1
	je	.label_99
	mov	bl, al
	and	bl, 1
	mov	r14, rdi
	jne	.label_101
	mov	rbx, rsi
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_105
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	rdi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rsi + rdi], 0x27
.label_105:
	mov	rsi, qword ptr [rsp + 0xf0]
	inc	rsi
	cmp	rsi, r10
	jae	.label_164
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdi + rsi], 0x27
.label_164:
	add	qword ptr [rsp + 0xf0], 2
	xor	r11d, r11d
	mov	rsi, rbx
	jmp	.label_101
	.section	.text
	.align	16
	#Procedure 0x4030c5
	.globl sub_4030c5
	.type sub_4030c5, @function
sub_4030c5:

	nop	word ptr cs:[rax + rax]
.label_99:
	mov	r14, rdi
.label_101:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_129
	mov	rdi, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	rbx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rsi + rbx], r13b
	mov	rsi, rdi
	jmp	.label_129
.label_74:
	test	r11b, 1
	je	.label_138
	and	al, 1
	jne	.label_138
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_91
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_91:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	mov	r14, rdi
	jae	.label_146
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_146:
	add	qword ptr [rsp + 0xf0], 2
	xor	r11d, r11d
	mov	bl, r13b
	jmp	.label_121
	.section	.text
	.align	16
	#Procedure 0x403158
	.globl sub_403158
	.type sub_403158, @function
sub_403158:

	nop	dword ptr [rax + rax]
.label_138:
	mov	bl, r13b
	mov	r14, rdi
.label_121:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_156
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], bl
	jmp	.label_156
.label_102:
	mov	rcx, qword ptr [rsp + 0xf0]
	jmp	.label_145
.label_106:
	mov	rcx, qword ptr [rsp + 0xf0]
.label_145:
	cmp	rcx, r10
	jae	.label_167
	mov	rax, qword ptr [rsp + 0xe0]
	mov	byte ptr [rax + rcx], 0x5c
.label_167:
	lea	rax, [rcx + 1]
	mov	qword ptr [rsp + 0xf0], rax
	mov	al, 1
	mov	r13b, 0x30
	cmp	edi, 2
	je	.label_78
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_182
	mov	dl, byte ptr [r9 + rdx]
	add	dl, 0xd0
	movzx	edx, dl
	cmp	edx, 9
	ja	.label_118
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_173
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rdx + rsi], 0x30
	mov	rsi, rbx
.label_173:
	lea	rdx, [rcx + 2]
	cmp	rdx, r10
	jae	.label_174
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rdx], 0x30
	mov	rsi, rbx
.label_174:
	add	rcx, 3
	xor	r15d, r15d
	mov	qword ptr [rsp + 0xf0], rcx
	jmp	.label_89
.label_78:
	xor	r15d, r15d
	jmp	.label_89
.label_182:
	xor	r15d, r15d
	jmp	.label_89
.label_118:
	xor	r15d, r15d
	jmp	.label_89
.label_114:
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r8b, byte ptr [rsp + 0xa6]
	mov	rsi, qword ptr [rsp + 0x30]
	jmp	.label_94
.label_180:
	xor	r15d, r15d
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	.label_97
.label_188:
	mov	rbp, qword ptr [rsp + 0xc0]
	cmp	qword ptr [rsp + 0x28], rbp
	jae	.label_104
	mov	r9, qword ptr [rsp + 0x48]
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rbx, qword ptr [rsp + 0x50]
.label_116:
	mov	rax, qword ptr [rsp + 0x20]
	cmp	byte ptr [rax + rbx], 0
	je	.label_112
	lea	rax, [rsi + rbx + 1]
	inc	rbx
	cmp	rax, rbp
	jb	.label_116
	xor	r15d, r15d
	jmp	.label_94
.label_104:
	xor	r15d, r15d
	mov	r9, qword ptr [rsp + 0x48]
.label_97:
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rbx, qword ptr [rsp + 0x50]
.label_94:
	mov	byte ptr [rsp + 0xa6], r8b
	jmp	.label_108
.label_112:
	xor	r15d, r15d
	jmp	.label_94
.label_125:
	xor	r15d, r15d
	jmp	.label_89
.label_128:
	xor	r15d, r15d
	mov	rsi, rbx
	jmp	.label_89
	.section	.text
	.align	16
	#Procedure 0x4032e8
	.globl sub_4032e8
	.type sub_4032e8, @function
sub_4032e8:

	nop	dword ptr [rax + rax]
.label_126:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	al
	cmp	r14d, 2
	setne	dl
	mov	rcx, qword ptr [rsp + 0x98]
	and	cl, 1
	je	.label_169
	or	dl, al
	je	.label_81
.label_169:
	mov	qword ptr [rsp + 0xc0], rbp
	mov	r12, r9
	test	cl, cl
	setne	al
	cmp	r14d, 2
	setne	dl
	mov	rsi, qword ptr [rsp + 0x70]
	test	sil, 1
	je	.label_141
	or	dl, al
	jne	.label_141
	test	r8b, 1
	jne	.label_158
	cmp	qword ptr [rsp + 0x80], 0
	je	.label_141
	test	r10, r10
	mov	r13d, r14d
	mov	al, byte ptr [rsp + 0xa6]
	mov	rdx, qword ptr [rsp + 0x98]
	mov	r15b, dl
	mov	rbp, qword ptr [rsp + 0x80]
	je	.label_189
.label_141:
	mov	rdx, qword ptr [rsp + 0xa8]
	test	rdx, rdx
	je	.label_159
	test	cl, cl
	jne	.label_159
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_159
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_178:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_168
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rcx + rsi], al
.label_168:
	inc	qword ptr [rsp + 0xf0]
	mov	al, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_178
.label_159:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_184
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0
	jmp	.label_184
.label_73:
	mov	rdx, r9
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	r8b, byte ptr [rsp + 0xa6]
	mov	r14, rdi
.label_110:
	test	r8b, 1
	mov	r8d, 4
	cmove	r8d, r14d
	cmp	r14d, 2
	cmovne	r8d, r14d
	and	r9d, 0xfffffffd
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], 0
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	rsi, r10
	mov	rcx, rbp
.label_117:
	call	quotearg_buffer_restyled
	mov	qword ptr [rsp + 0xf0], rax
.label_184:
	mov	rax, qword ptr [rsp + 0xf0]
	add	rsp, 0x108
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_83:
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	rdx, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	.label_110
.label_81:
	mov	rdx, r9
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	r8b, byte ptr [rsp + 0xa6]
	jmp	.label_110
.label_158:
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [rsp + 0x140]
	mov	qword ptr [rsp], rax
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0x80]
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0xc0]
	mov	r9d, dword ptr [rsp + 0x6c]
	jmp	.label_117
.label_175:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4034f8
	.globl sub_4034f8
	.type sub_4034f8, @function
sub_4034f8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403500
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	mov	rax, rdx
	xor	edx, edx
	mov	rcx, rax
	jmp	quotearg_alloc_mem
	.section	.text
	.align	16
	#Procedure 0x40350a
	.globl sub_40350a
	.type sub_40350a, @function
sub_40350a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403510

	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x30], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x28], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 0x20], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x38], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 0x44], ecx
	test	rbx, rbx
	sete	al
	movzx	ebp, al
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	mov	rax, qword ptr [r12 + 0x28]
	mov	rcx, qword ptr [r12 + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], r13
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	call	quotearg_buffer_restyled
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xcharalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	mov	rax, qword ptr [r12 + 0x28]
	mov	rcx, qword ptr [r12 + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], r13
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x20]
	mov	rcx, qword ptr [rsp + 0x28]
	mov	r9d, ebp
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x30]
	test	rax, rax
	mov	ecx, dword ptr [rsp + 0x44]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	dword ptr [rdx], ecx
	je	.label_192
	mov	qword ptr [rax], rbx
.label_192:
	mov	rax, r14
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403604
	.globl sub_403604
	.type sub_403604, @function
sub_403604:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403610
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14,  qword ptr [word ptr [rip + slotvec]]
	cmp	dword ptr [dword ptr [rip + nslots]],  2
	jl	.label_193
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_195:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax,  dword ptr [dword ptr [rip + nslots]]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_195
.label_193:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_196
	call	free
	mov	qword ptr [word ptr [rip + slotvec0]],  0x100
	mov	qword ptr [word ptr [rip + label_197]], OFFSET FLAT:slot0
.label_196:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_194
	mov	rdi, r14
	call	free
	mov	qword ptr [word ptr [rip + slotvec]], OFFSET FLAT:slotvec0
.label_194:
	mov	dword ptr [dword ptr [rip + nslots]],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4036a1
	.globl sub_4036a1
	.type sub_4036a1, @function
sub_4036a1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4036b0

	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4036be
	.globl sub_4036be
	.type sub_4036be, @function
sub_4036be:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4036c0

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	r12, rcx
	mov	r14, rdx
	mov	qword ptr [rsp + 0x40], rsi
	mov	ebx, edi
	call	__errno_location
	test	ebx, ebx
	js	.label_198
	mov	ecx, dword ptr [rax]
	mov	rbp,  qword ptr [word ptr [rip + slotvec]]
	cmp	dword ptr [dword ptr [rip + nslots]],  ebx
	jle	.label_201
	mov	dword ptr [rsp + 0x2c], ecx
	mov	qword ptr [rsp + 0x30], rax
	jmp	.label_204
.label_201:
	mov	qword ptr [rsp + 0x38], r14
	cmp	ebx, 0x7fffffff
	je	.label_200
	mov	dword ptr [rsp + 0x2c], ecx
	mov	qword ptr [rsp + 0x30], rax
	mov	r13d, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, r13
	cmovne	rdi, rbp
	lea	r15d, [rbx + 1]
	movsxd	rsi, ebx
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, r13
	mov	qword ptr [word ptr [rip + slotvec]],  r14
	jne	.label_199
	movups	xmm0,  xmmword ptr [word ptr [rip + slotvec0]]
	movups	xmmword ptr [r14], xmm0
.label_199:
	movsxd	rax,  dword ptr [dword ptr [rip + nslots]]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [dword ptr [rip + nslots]],  ebp
	mov	rbp, r14
	mov	r14, qword ptr [rsp + 0x38]
.label_204:
	mov	qword ptr [rsp + 0x38], r14
	movsxd	r13, ebx
	shl	r13, 4
	mov	r15, qword ptr [rbp + r13]
	mov	rbx, qword ptr [rbp + r13 + 8]
	mov	rcx, r12
	mov	qword ptr [rsp + 0x20], rcx
	mov	r8d, dword ptr [rcx]
	mov	r12d, dword ptr [rcx + 4]
	or	r12d, 1
	lea	rdx, [rcx + 8]
	mov	qword ptr [rsp + 0x18], rdx
	mov	rax, qword ptr [rcx + 0x28]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], rdx
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x40]
	mov	rcx, r14
	mov	r9d, r12d
	call	quotearg_buffer_restyled
	mov	r14, rax
	cmp	r15, r14
	ja	.label_202
	lea	rax, [rbp + r13]
	lea	rbp, [rbp + r13 + 8]
	inc	r14
	mov	qword ptr [rax], r14
	mov	eax, OFFSET FLAT:slot0
	cmp	rbx, rax
	je	.label_203
	mov	rdi, rbx
	call	free
.label_203:
	mov	rdi, r14
	call	xcharalloc
	mov	rbx, rax
	mov	qword ptr [rbp], rbx
	mov	rcx, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rcx]
	mov	rax, qword ptr [rcx + 0x28]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [rsp], rax
	mov	rdi, rbx
	mov	rsi, r14
	mov	rdx, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	r9d, r12d
	call	quotearg_buffer_restyled
.label_202:
	mov	rax, qword ptr [rsp + 0x30]
	mov	ecx, dword ptr [rsp + 0x2c]
	mov	dword ptr [rax], ecx
	mov	rax, rbx
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_198:
	call	abort
.label_200:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40388a
	.globl sub_40388a
	.type sub_40388a, @function
sub_40388a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403890

	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40389a
	.globl sub_40389a
	.type sub_40389a, @function
sub_40389a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4038a0
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rsi, rax
	jmp	quotearg_n
	.section	.text
	.align	16
	#Procedure 0x4038ad
	.globl sub_4038ad
	.type sub_4038ad, @function
sub_4038ad:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4038b0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rcx, rdi
	xor	edi, edi
	mov	rsi, rcx
	mov	rdx, rax
	jmp	quotearg_n_mem
	.section	.text
	.align	16
	#Procedure 0x4038c0

	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	rbx, rdx
	mov	ebp, edi
	lea	r14, [rsp + 8]
	mov	rdi, r14
	call	quoting_options_from_style
	mov	rdx, -1
	mov	edi, ebp
	mov	rsi, rbx
	mov	rcx, r14
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4038f7
	.globl sub_4038f7
	.type sub_4038f7, @function
sub_4038f7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403900

	.globl quoting_options_from_style
	.type quoting_options_from_style, @function
quoting_options_from_style:
	sub	rsp, 0x38
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_205
	mov	dword ptr [rdi], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rdi + 0x34], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rdi + 0x24], xmm2
	movups	xmmword ptr [rdi + 0x14], xmm1
	movups	xmmword ptr [rdi + 4], xmm0
	mov	rax, rdi
	add	rsp, 0x38
	ret	
.label_205:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403952
	.globl sub_403952
	.type sub_403952, @function
sub_403952:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403960

	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x38
	mov	r14, rcx
	mov	rbx, rdx
	mov	ebp, edi
	lea	r15, [rsp]
	mov	rdi, r15
	call	quoting_options_from_style
	mov	edi, ebp
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x38
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403999
	.globl sub_403999
	.type sub_403999, @function
sub_403999:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4039a0
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:

	mov	rax, rsi
	mov	ecx, edi
	xor	edi, edi
	mov	esi, ecx
	mov	rdx, rax
	jmp	quotearg_n_style
	.section	.text
	.align	16
	#Procedure 0x4039b1
	.globl sub_4039b1
	.type sub_4039b1, @function
sub_4039b1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4039c0
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	mov	rax, rdx
	mov	rcx, rsi
	mov	edx, edi
	xor	edi, edi
	mov	esi, edx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	quotearg_n_style_mem
	.section	.text
	.align	16
	#Procedure 0x4039d4
	.globl sub_4039d4
	.type sub_4039d4, @function
sub_4039d4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4039e0

	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	eax, edx
	mov	r14, rsi
	mov	rbx, rdi
	mov	rcx,  qword ptr [word ptr [rip + label_206]]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0,  xmmword ptr [word ptr [rip + label_207]]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_208]]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + default_quoting_options]]
	movaps	xmmword ptr [rsp], xmm0
	lea	r15, [rsp]
	mov	edx, 1
	mov	rdi, r15
	mov	esi, eax
	call	set_char_quoting
	xor	edi, edi
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x403a4d
	.globl sub_403a4d
	.type sub_403a4d, @function
sub_403a4d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403a50

	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:
	mov	eax, esi
	mov	rsi, -1
	mov	edx, eax
	jmp	quotearg_char_mem
	.section	.text
	.align	16
	#Procedure 0x403a5d
	.globl sub_403a5d
	.type sub_403a5d, @function
sub_403a5d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403a60

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	mov	esi, 0x3a
	jmp	quotearg_char
	.section	.text
	.align	16
	#Procedure 0x403a67
	.globl sub_403a67
	.type sub_403a67, @function
sub_403a67:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403a70
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	mov	edx, 0x3a
	jmp	quotearg_char_mem
	.section	.text
	.align	16
	#Procedure 0x403a7a
	.globl sub_403a7a
	.type sub_403a7a, @function
sub_403a7a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403a80
	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:

	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	r14, rdx
	mov	ebp, edi
	lea	rbx, [rsp + 8]
	mov	rdi, rbx
	call	quoting_options_from_style
	mov	esi, 0x3a
	mov	edx, 1
	mov	rdi, rbx
	call	set_char_quoting
	mov	rdx, -1
	mov	edi, ebp
	mov	rsi, r14
	mov	rcx, rbx
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403ac9
	.globl sub_403ac9
	.type sub_403ac9, @function
sub_403ac9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403ad0

	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:
	mov	r8, -1
	jmp	quotearg_n_custom_mem
	.section	.text
	.align	16
	#Procedure 0x403ad9
	.globl sub_403ad9
	.type sub_403ad9, @function
sub_403ad9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403ae0

	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x38
	mov	r14, r8
	mov	rbx, rcx
	mov	ebp, edi
	mov	rax,  qword ptr [word ptr [rip + label_206]]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0,  xmmword ptr [word ptr [rip + label_207]]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_208]]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + default_quoting_options]]
	movaps	xmmword ptr [rsp], xmm0
	lea	r15, [rsp]
	mov	rdi, r15
	call	set_custom_quoting
	mov	edi, ebp
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x38
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403b48
	.globl sub_403b48
	.type sub_403b48, @function
sub_403b48:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403b50
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	mov	rax, rdx
	mov	rcx, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	quotearg_n_custom
	.section	.text
	.align	16
	#Procedure 0x403b69
	.globl sub_403b69
	.type sub_403b69, @function
sub_403b69:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403b70
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	mov	rax, rcx
	mov	rcx, rdx
	mov	rdx, rsi
	mov	rsi, rdi
	xor	edi, edi
	mov	r8, rax
	jmp	quotearg_n_custom_mem
	.section	.text
	.align	16
	#Procedure 0x403b86
	.globl sub_403b86
	.type sub_403b86, @function
sub_403b86:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403b90

	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403b9a
	.globl sub_403b9a
	.type sub_403b9a, @function
sub_403b9a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ba0
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rcx, rdi
	xor	edi, edi
	mov	rsi, rcx
	mov	rdx, rax
	jmp	quote_n_mem
	.section	.text
	.align	16
	#Procedure 0x403bb0

	.globl quote_n
	.type quote_n, @function
quote_n:
	mov	rdx, -1
	jmp	quote_n_mem
	.section	.text
	.align	16
	#Procedure 0x403bb9
	.globl sub_403bb9
	.type sub_403bb9, @function
sub_403bb9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403bc0

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rsi, rax
	jmp	quote_n
	.section	.text
	.align	16
	#Procedure 0x403bca
	.globl sub_403bca
	.type sub_403bca, @function
sub_403bca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403bd0

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x10
	mov	r14d, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_210
	call	locale_charset
	mov	rbp, rax
	mov	dword ptr [rsp + 8], 0
	mov	dword ptr [rsp], 0
	mov	esi, 0x55
	mov	edx, 0x54
	mov	ecx, 0x46
	mov	r8d, 0x2d
	mov	r9d, 0x38
	mov	rdi, rbp
	call	strcaseeq0
	test	eax, eax
	je	.label_209
	mov	eax, OFFSET FLAT:.str.14_0
	movzx	ecx, byte ptr [rbx]
	cmp	ecx, 0x60
	je	.label_210
	mov	eax, OFFSET FLAT:.str.15
	jmp	.label_210
.label_209:
	mov	dword ptr [rsp + 8], 0x30
	mov	dword ptr [rsp], 0x33
	mov	esi, 0x47
	mov	edx, 0x42
	mov	ecx, 0x31
	mov	r8d, 0x38
	mov	r9d, 0x30
	mov	rdi, rbp
	call	strcaseeq0
	test	eax, eax
	je	.label_211
	mov	eax, OFFSET FLAT:.str.17_1
	movzx	ecx, byte ptr [rbx]
	cmp	ecx, 0x60
	je	.label_210
	mov	eax, OFFSET FLAT:.str.18_1
	jmp	.label_210
.label_211:
	cmp	r14d, 9
	mov	ecx, OFFSET FLAT:.str.10_0
	mov	eax, OFFSET FLAT:.str.12_0
	cmove	rax, rcx
.label_210:
	add	rsp, 0x10
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403cad
	.globl sub_403cad
	.type sub_403cad, @function
sub_403cad:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403cb0

	.globl strcaseeq0
	.type strcaseeq0, @function
strcaseeq0:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14d, r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx]
	test	al, al
	je	.label_213
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_214
	jmp	.label_212
.label_213:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_212
.label_214:
	mov	eax, 1
	test	bpl, bpl
	je	.label_212
	mov	al, byte ptr [rsp + 0x40]
	movsx	ecx, byte ptr [rsp + 0x48]
	mov	dword ptr [rsp], ecx
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	movsx	r8d, r14b
	movsx	r9d, al
	mov	rdi, rbx
	call	strcaseeq1
.label_212:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403d33
	.globl sub_403d33
	.type sub_403d33, @function
sub_403d33:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403d40

	.globl strcaseeq1
	.type strcaseeq1, @function
strcaseeq1:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	dword ptr [rsp + 4], r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	r14b, byte ptr [rsp + 0x40]
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 1]
	test	al, al
	je	.label_216
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_215
	jmp	.label_217
.label_216:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_217
.label_215:
	mov	eax, 1
	test	bpl, bpl
	je	.label_217
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	mov	eax, dword ptr [rsp + 4]
	movsx	r8d, al
	movsx	r9d, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq2
.label_217:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403dce
	.globl sub_403dce
	.type sub_403dce, @function
sub_403dce:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403dd0

	.globl strcaseeq2
	.type strcaseeq2, @function
strcaseeq2:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14d, r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 2]
	test	al, al
	je	.label_220
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_219
	jmp	.label_218
.label_220:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_218
.label_219:
	mov	eax, 1
	test	bpl, bpl
	je	.label_218
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	movsx	r8d, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq3
.label_218:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403e4f
	.globl sub_403e4f
	.type sub_403e4f, @function
sub_403e4f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403e50

	.globl strcaseeq3
	.type strcaseeq3, @function
strcaseeq3:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r14d, r8d
	mov	r15d, ecx
	mov	r12d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 3]
	test	al, al
	je	.label_223
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_222
	jmp	.label_221
.label_223:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_221
.label_222:
	mov	eax, 1
	test	bpl, bpl
	je	.label_221
	movsx	esi, r12b
	movsx	edx, r15b
	movsx	ecx, r14b
	mov	rdi, rbx
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq4
.label_221:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403eb9
	.globl sub_403eb9
	.type sub_403eb9, @function
sub_403eb9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403ec0

	.globl strcaseeq4
	.type strcaseeq4, @function
strcaseeq4:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14d, ecx
	mov	r15d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 4]
	test	al, al
	je	.label_226
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_224
	jmp	.label_225
.label_226:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_225
.label_224:
	mov	eax, 1
	test	bpl, bpl
	je	.label_225
	movsx	esi, r15b
	movsx	edx, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq5
.label_225:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403f25
	.globl sub_403f25
	.type sub_403f25, @function
sub_403f25:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403f30

	.globl strcaseeq5
	.type strcaseeq5, @function
strcaseeq5:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 5]
	test	al, al
	je	.label_227
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_229
	jmp	.label_228
.label_227:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_228
.label_229:
	mov	eax, 1
	test	bpl, bpl
	je	.label_228
	movsx	esi, r14b
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	strcaseeq6
.label_228:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403f7f
	.globl sub_403f7f
	.type sub_403f7f, @function
sub_403f7f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403f80

	.globl strcaseeq6
	.type strcaseeq6, @function
strcaseeq6:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 6]
	test	al, al
	je	.label_232
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_231
	jmp	.label_230
.label_232:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_230
.label_231:
	mov	eax, 1
	test	bpl, bpl
	je	.label_230
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	rbp
	jmp	strcaseeq7
.label_230:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403fcb
	.globl sub_403fcb
	.type sub_403fcb, @function
sub_403fcb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403fd0

	.globl strcaseeq7
	.type strcaseeq7, @function
strcaseeq7:
	push	rbx
	mov	rbx, rdi
	xor	edi, edi
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 7]
	test	al, al
	je	.label_234
	mov	eax, 1
	test	ecx, 0xffffffdf
	jne	.label_235
	jmp	.label_233
.label_234:
	mov	eax, 1
	test	cl, cl
	je	.label_233
.label_235:
	xor	eax, eax
.label_233:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x403fff
	.globl sub_403fff
	.type sub_403fff, @function
sub_403fff:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404000

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_236
	mov	edx, OFFSET FLAT:.str_5
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_245
.label_236:
	mov	edx, OFFSET FLAT:.str.1_3
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_245:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.2_1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.3_0
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_239
	jmp	qword ptr [word ptr [+ (r12 * 8) + label_241]]
.label_378:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.4_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_239:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.13_0
	jmp	.label_238
.label_379:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.5_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_380:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.6_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_381:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.7_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	jmp	.label_244
.label_382:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.8_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	jmp	.label_237
.label_383:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.9
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	jmp	.label_243
.label_384:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.10_1
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	qword ptr [rsp + 0x18], rbx
.label_243:
	mov	qword ptr [rsp + 0x10], rdi
.label_237:
	mov	qword ptr [rsp + 8], rsi
.label_244:
	mov	qword ptr [rsp], rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	jmp	.label_240
.label_386:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.12_1
.label_238:
	mov	edx, 5
	call	dcgettext
	mov	r10, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	r11, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	rdx, qword ptr [r15 + 0x38]
	mov	rax, qword ptr [r15 + 0x40]
	mov	qword ptr [rsp + 0x28], rax
	mov	qword ptr [rsp + 0x20], rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	qword ptr [rsp + 0x10], rdi
	mov	qword ptr [rsp + 8], rsi
	mov	qword ptr [rsp], r11
	jmp	.label_242
.label_385:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.11_1
	mov	edx, 5
	call	dcgettext
	mov	r10, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	rdx, qword ptr [r15 + 0x38]
	mov	qword ptr [rsp + 0x20], rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	qword ptr [rsp + 0x10], rdi
	mov	qword ptr [rsp + 8], rsi
	mov	qword ptr [rsp], rax
.label_242:
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	mov	rdx, r10
.label_240:
	call	__fprintf_chk
.label_377:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4042e1
	.globl sub_4042e1
	.type sub_4042e1, @function
sub_4042e1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4042f0
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_246:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_246
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x404311
	.globl sub_404311
	.type sub_404311, @function
sub_404311:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404320

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	sub	rsp, 0x58
	xor	r9d, r9d
	nop	word ptr [rax + rax]
.label_248:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_247
	mov	r11, r10
	add	r11, qword ptr [r8 + 0x10]
	lea	eax, [r10 + 8]
	mov	dword ptr [r8], eax
	jmp	.label_249
	.section	.text
	.align	16
	#Procedure 0x404349
	.globl sub_404349
	.type sub_404349, @function
sub_404349:

	nop	dword ptr [rax]
.label_247:
	mov	r11, qword ptr [r8 + 8]
	lea	rax, [r11 + 8]
	mov	qword ptr [r8 + 8], rax
.label_249:
	mov	rax, qword ptr [r11]
	mov	qword ptr [rsp + r9*8], rax
	test	rax, rax
	je	.label_250
	inc	r9
	cmp	r9, 0xa
	jb	.label_248
.label_250:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x40437f
	.globl sub_40437f
	.type sub_40437f, @function
sub_40437f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404380

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xc8
	test	al, al
	je	.label_251
	movaps	xmmword ptr [rsp + 0x30], xmm0
	movaps	xmmword ptr [rsp + 0x40], xmm1
	movaps	xmmword ptr [rsp + 0x50], xmm2
	movaps	xmmword ptr [rsp + 0x60], xmm3
	movaps	xmmword ptr [rsp + 0x70], xmm4
	movaps	xmmword ptr [rsp + 0x80], xmm5
	movaps	xmmword ptr [rsp + 0x90], xmm6
	movaps	xmmword ptr [rsp + 0xa0], xmm7
.label_251:
	mov	qword ptr [rsp + 0x28], r9
	mov	qword ptr [rsp + 0x20], r8
	lea	rax, [rsp]
	mov	qword ptr [rsp + 0xc0], rax
	lea	rax, [rsp + 0xd0]
	mov	qword ptr [rsp + 0xb8], rax
	mov	dword ptr [rsp + 0xb4], 0x30
	mov	dword ptr [rsp + 0xb0], 0x20
	lea	r8, [rsp + 0xb0]
	call	version_etc_va
	add	rsp, 0xc8
	ret	
	.section	.text
	.align	16
	#Procedure 0x40440d
	.globl sub_40440d
	.type sub_40440d, @function
sub_40440d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404410
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.14_1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.15_0
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.16_0
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.17
	mov	ecx, OFFSET FLAT:.str.18
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.19_0
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x404484
	.globl sub_404484
	.type sub_404484, @function
sub_404484:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	16
	#Procedure 0x404490
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_252
	imul	rsi, rdi
	mov	rdi, rsi
	jmp	xmalloc
.label_252:
	push	rax
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4044b3
	.globl sub_4044b3
	.type sub_4044b3, @function
sub_4044b3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4044c0

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_253
	test	rax, rax
	je	.label_254
.label_253:
	pop	rbx
	ret	
.label_254:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4044da
	.globl sub_4044da
	.type sub_4044da, @function
sub_4044da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4044e0
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	mov	rcx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rcx
	cmp	rax, rsi
	jb	.label_255
	imul	rcx, rsi
	mov	rsi, rcx
	jmp	xrealloc
.label_255:
	push	rax
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404506
	.globl sub_404506
	.type sub_404506, @function
sub_404506:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404510

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_256
	test	rbx, rbx
	jne	.label_256
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_256:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_258
	test	rax, rax
	je	.label_257
.label_258:
	pop	rbx
	ret	
.label_257:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404540

	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:
	push	rax
	mov	r8, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_259
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	r8
	cmp	rax, rcx
	jbe	.label_262
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_260
.label_259:
	test	rcx, rcx
	jne	.label_263
	mov	eax, 0x80
	xor	edx, edx
	div	r8
	mov	rcx, rax
	cmp	rcx, 1
	adc	rcx, 0
.label_263:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	r8
	cmp	rax, rcx
	jb	.label_261
.label_260:
	mov	qword ptr [rsi], rcx
	imul	r8, rcx
	mov	rsi, r8
	pop	rax
	jmp	xrealloc
.label_262:
	call	xalloc_die
.label_261:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4045b5
	.globl sub_4045b5
	.type sub_4045b5, @function
sub_4045b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4045c0

	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:
	jmp	xmalloc
	.section	.text
	.align	16
	#Procedure 0x4045c5
	.globl sub_4045c5
	.type sub_4045c5, @function
sub_4045c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4045d0
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	mov	edx, 1
	jmp	x2nrealloc
	.section	.text
	.align	16
	#Procedure 0x4045da
	.globl sub_4045da
	.type sub_4045da, @function
sub_4045da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4045e0
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	call	xmalloc
	mov	rbx, rax
	xor	esi, esi
	mov	rdi, rbx
	mov	rdx, r14
	call	memset
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	16
	#Procedure 0x404607
	.globl sub_404607
	.type sub_404607, @function
sub_404607:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404610
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_264
	call	rpl_calloc
	test	rax, rax
	je	.label_264
	pop	rcx
	ret	
.label_264:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404636
	.globl sub_404636
	.type sub_404636, @function
sub_404636:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404640

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	r15, rsi
	mov	r14, rdi
	mov	rdi, r15
	call	xmalloc
	mov	rbx, rax
	mov	rdi, rbx
	mov	rsi, r14
	mov	rdx, r15
	call	memcpy
	mov	rax, rbx
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x40466d
	.globl sub_40466d
	.type sub_40466d, @function
sub_40466d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404670

	.globl xstrdup
	.type xstrdup, @function
xstrdup:
	push	rbx
	mov	rbx, rdi
	call	strlen
	lea	rsi, [rax + 1]
	mov	rdi, rbx
	pop	rbx
	jmp	xmemdup
	.section	.text
	.align	16
	#Procedure 0x404683
	.globl sub_404683
	.type sub_404683, @function
sub_404683:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404690

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx,  dword ptr [dword ptr [rip + exit_failure]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.1_4
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:.str_1
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4046c0

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_265
	test	rsi, rsi
	mov	ecx, 1
	je	.label_266
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_266
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_265:
	mov	ecx, 1
.label_266:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x40470b
	.globl sub_40470b
	.type sub_40470b, @function
sub_40470b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404710

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_267
	cmp	r15, -2
	jb	.label_267
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_267
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_267:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404766
	.globl sub_404766
	.type sub_404766, @function
sub_404766:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404770

	.globl str2sig
	.type str2sig, @function
str2sig:
	push	rbx
	mov	rbx, rsi
	call	str2signum
	mov	dword ptr [rbx], eax
	sar	eax, 0x1f
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404780

	.globl str2signum
	.type str2signum, @function
str2signum:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r15, rdi
	movsx	eax, byte ptr [r15]
	add	eax, -0x30
	xor	ebx, ebx
	mov	ebp, OFFSET FLAT:label_268
	cmp	eax, 9
	ja	.label_269
	lea	rsi, [rsp]
	mov	edx, 0xa
	mov	rdi, r15
	call	strtol
	cmp	rax, 0x40
	jg	.label_270
	mov	rcx, qword ptr [rsp]
	mov	cl, byte ptr [rcx]
	test	cl, cl
	je	.label_274
	jmp	.label_270
	.section	.text
	.align	16
	#Procedure 0x4047cb
	.globl sub_4047cb
	.type sub_4047cb, @function
sub_4047cb:

	nop	dword ptr [rax + rax]
.label_269:
	mov	rdi, rbp
	mov	rsi, r15
	call	strcmp
	test	eax, eax
	je	.label_272
	inc	rbx
	add	rbp, 0xc
	cmp	rbx, 0x22
	jbe	.label_269
	call	__libc_current_sigrtmin
	mov	ebp, eax
	call	__libc_current_sigrtmax
	mov	r14d, eax
	test	ebp, ebp
	jle	.label_276
	mov	esi, OFFSET FLAT:.str_6
	mov	edx, 5
	mov	rdi, r15
	call	strncmp
	test	eax, eax
	je	.label_271
.label_276:
	test	r14d, r14d
	jle	.label_270
	mov	esi, OFFSET FLAT:.str.1_5
	mov	edx, 5
	mov	rdi, r15
	call	strncmp
	test	eax, eax
	jne	.label_270
	add	r15, 5
	lea	rsi, [rsp]
	mov	edx, 0xa
	mov	rdi, r15
	call	strtol
	mov	rcx, qword ptr [rsp]
	cmp	byte ptr [rcx], 0
	jne	.label_270
	sub	ebp, r14d
	movsxd	rcx, ebp
	cmp	rcx, rax
	jg	.label_270
	test	rax, rax
	jg	.label_270
	mov	ecx, r14d
	jmp	.label_273
.label_272:
	mov	eax, dword ptr [rbp - 4]
	jmp	.label_274
.label_271:
	add	r15, 5
	lea	rsi, [rsp]
	mov	edx, 0xa
	mov	rdi, r15
	call	strtol
	test	rax, rax
	js	.label_270
	mov	rcx, qword ptr [rsp]
	mov	cl, byte ptr [rcx]
	test	cl, cl
	jne	.label_270
	sub	r14d, ebp
	movsxd	rcx, r14d
	cmp	rax, rcx
	jle	.label_275
.label_270:
	mov	eax, 0xffffffff
.label_274:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_275:
	mov	ecx, ebp
.label_273:
	add	rax, rcx
	jmp	.label_274
	.section	.text
	.align	16
	#Procedure 0x4048b2
	.globl sub_4048b2
	.type sub_4048b2, @function
sub_4048b2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4048c0

	.globl sig2str
	.type sig2str, @function
sig2str:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	ebp, edi
	xor	eax, eax
	mov	esi, OFFSET FLAT:label_268
	nop	word ptr cs:[rax + rax]
.label_279:
	cmp	dword ptr [rsi - 4], ebp
	je	.label_277
	inc	eax
	add	rsi, 0xc
	cmp	eax, 0x22
	jbe	.label_279
	call	__libc_current_sigrtmin
	mov	r15d, eax
	call	__libc_current_sigrtmax
	cmp	r15d, ebp
	mov	ebx, 0xffffffff
	jg	.label_278
	cmp	eax, ebp
	jl	.label_278
	mov	ecx, eax
	sub	ecx, r15d
	mov	edx, ecx
	shr	edx, 0x1f
	add	edx, ecx
	sar	edx, 1
	add	edx, r15d
	cmp	edx, ebp
	jge	.label_280
	mov	word ptr [r14 + 4], 0x58
	mov	dword ptr [r14], 0x414d5452
	mov	r15d, eax
	jmp	.label_281
.label_277:
	mov	rdi, r14
	call	strcpy
	xor	ebx, ebx
	jmp	.label_278
.label_280:
	mov	word ptr [r14 + 4], 0x4e
	mov	dword ptr [r14], 0x494d5452
.label_281:
	xor	ebx, ebx
	cmp	r15d, ebp
	je	.label_278
	sub	ebp, r15d
	add	r14, 5
	xor	ebx, ebx
	mov	esi, 1
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:.str.2_2
	xor	eax, eax
	mov	rdi, r14
	mov	r8d, ebp
	call	__sprintf_chk
.label_278:
	mov	eax, ebx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404988
	.globl sub_404988
	.type sub_404988, @function
sub_404988:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404990
	.globl c_isalnum
	.type c_isalnum, @function
c_isalnum:

	mov	al, 1
	lea	ecx, [rdi - 0x41]
	cmp	ecx, 0x39
	ja	.label_282
	movabs	rdx, 0x3ffffff03ffffff
	bt	rdx, rcx
	jae	.label_282
.label_283:
	ret	
.label_282:
	add	edi, -0x30
	cmp	edi, 0xa
	jb	.label_283
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x4049b6
	.globl sub_4049b6
	.type sub_4049b6, @function
sub_4049b6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4049c0
	.globl c_isalpha
	.type c_isalpha, @function
c_isalpha:

	add	edi, -0x41
	cmp	edi, 0x39
	ja	.label_284
	movabs	rax, 0x3ffffff03ffffff
	mov	cl, dil
	shr	rax, cl
	and	eax, 1
	ret	
.label_284:
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x4049df
	.globl sub_4049df
	.type sub_4049df, @function
sub_4049df:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4049e0
	.globl c_isascii
	.type c_isascii, @function
c_isascii:

	cmp	edi, 0x80
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x4049ea
	.globl sub_4049ea
	.type sub_4049ea, @function
sub_4049ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4049f0
	.globl c_isblank
	.type c_isblank, @function
c_isblank:

	cmp	edi, 0x20
	sete	cl
	cmp	edi, 9
	sete	al
	or	al, cl
	ret	
	.section	.text
	.align	16
	#Procedure 0x4049ff
	.globl sub_4049ff
	.type sub_4049ff, @function
sub_4049ff:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404a00
	.globl c_iscntrl
	.type c_iscntrl, @function
c_iscntrl:

	mov	al, 1
	cmp	edi, 0x20
	jae	.label_285
.label_286:
	ret	
.label_285:
	cmp	edi, 0x7f
	je	.label_286
	xor	eax, eax
	jmp	.label_286
	.section	.text
	.align	16
	#Procedure 0x404a11
	.globl sub_404a11
	.type sub_404a11, @function
sub_404a11:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a20
	.globl c_isdigit
	.type c_isdigit, @function
c_isdigit:

	add	edi, -0x30
	cmp	edi, 0xa
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a2a
	.globl sub_404a2a
	.type sub_404a2a, @function
sub_404a2a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a30
	.globl c_isgraph
	.type c_isgraph, @function
c_isgraph:

	add	edi, -0x21
	cmp	edi, 0x5e
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a3a
	.globl sub_404a3a
	.type sub_404a3a, @function
sub_404a3a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a40
	.globl c_islower
	.type c_islower, @function
c_islower:

	add	edi, -0x61
	cmp	edi, 0x1a
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a4a
	.globl sub_404a4a
	.type sub_404a4a, @function
sub_404a4a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a50
	.globl c_isprint
	.type c_isprint, @function
c_isprint:

	add	edi, -0x20
	cmp	edi, 0x5f
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a5a
	.globl sub_404a5a
	.type sub_404a5a, @function
sub_404a5a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a60
	.globl c_ispunct
	.type c_ispunct, @function
c_ispunct:

	mov	al, 1
	lea	ecx, [rdi - 0x21]
	cmp	ecx, 0x3f
	ja	.label_287
	movabs	rdx, 0xfc000000fe007fff
	bt	rdx, rcx
	jae	.label_287
.label_288:
	ret	
.label_287:
	add	edi, -0x7b
	cmp	edi, 4
	jb	.label_288
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a86
	.globl sub_404a86
	.type sub_404a86, @function
sub_404a86:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a90
	.globl c_isspace
	.type c_isspace, @function
c_isspace:

	add	edi, -9
	cmp	edi, 0x17
	ja	.label_289
	mov	eax, 0x80001f
	mov	cl, dil
	shr	eax, cl
	and	eax, 1
	ret	
.label_289:
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x404aa9
	.globl sub_404aa9
	.type sub_404aa9, @function
sub_404aa9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404ab0

	.globl c_isupper
	.type c_isupper, @function
c_isupper:
	add	edi, -0x41
	cmp	edi, 0x1a
	setb	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x404aba
	.globl sub_404aba
	.type sub_404aba, @function
sub_404aba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404ac0
	.globl c_isxdigit
	.type c_isxdigit, @function
c_isxdigit:

	add	edi, -0x30
	cmp	edi, 0x36
	ja	.label_290
	movabs	rax, 0x7e0000007e03ff
	mov	cl, dil
	shr	rax, cl
	and	eax, 1
	ret	
.label_290:
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x404adf
	.globl sub_404adf
	.type sub_404adf, @function
sub_404adf:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404ae0
	.globl c_tolower
	.type c_tolower, @function
c_tolower:

	lea	ecx, [rdi - 0x41]
	lea	eax, [rdi + 0x20]
	cmp	ecx, 0x1a
	cmovae	eax, edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x404aed
	.globl sub_404aed
	.type sub_404aed, @function
sub_404aed:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404af0
	.globl c_toupper
	.type c_toupper, @function
c_toupper:

	lea	ecx, [rdi - 0x61]
	lea	eax, [rdi - 0x20]
	cmp	ecx, 0x1a
	cmovae	eax, edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x404afd
	.globl sub_404afd
	.type sub_404afd, @function
sub_404afd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404b00

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	rdi, rbx
	call	ferror_unlocked
	mov	ebp, eax
	mov	rdi, rbx
	call	rpl_fclose
	test	ebp, ebp
	je	.label_291
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_292
	call	__errno_location
	mov	dword ptr [rax], 0
	jmp	.label_292
.label_291:
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_292
	test	cl, cl
	jne	.label_292
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
.label_292:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404b66
	.globl sub_404b66
	.type sub_404b66, @function
sub_404b66:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404b70

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_294
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 0x43
	jne	.label_295
	cmp	byte ptr [rax + 1], 0
	je	.label_293
.label_295:
	mov	esi, OFFSET FLAT:.str.1_6
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_294
.label_293:
	xor	ebx, ebx
.label_294:
	mov	al, bl
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404ba4
	.globl sub_404ba4
	.type sub_404ba4, @function
sub_404ba4:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	16
	#Procedure 0x404bb0

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:.str_0
	cmovne	rcx, rax
	mov	eax, OFFSET FLAT:.str.1_7
	cmp	byte ptr [rcx], 0
	je	.label_296
	mov	rax, rcx
.label_296:
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404bd6
	.globl sub_404bd6
	.type sub_404bd6, @function
sub_404bd6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404be0

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_297
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_299
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_297
.label_299:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_297
	call	__errno_location
	mov	ebp, dword ptr [rax]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_298
	call	__errno_location
	mov	dword ptr [rax], ebp
	mov	eax, 0xffffffff
.label_298:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_297:
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x404c57
	.globl sub_404c57
	.type sub_404c57, @function
sub_404c57:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404c60

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_300
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_300
	mov	rdi, rbx
	call	clear_ungetc_buffer_preserving_position
.label_300:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x404c86
	.globl sub_404c86
	.type sub_404c86, @function
sub_404c86:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404c90

	.globl clear_ungetc_buffer_preserving_position
	.type clear_ungetc_buffer_preserving_position, @function
clear_ungetc_buffer_preserving_position:
	test	byte ptr [rdi + 1], 1
	jne	.label_301
	ret	
.label_301:
	xor	esi, esi
	mov	edx, 1
	jmp	rpl_fseeko
	.section	.text
	.align	16
	#Procedure 0x404ca3
	.globl sub_404ca3
	.type sub_404ca3, @function
sub_404ca3:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404cb0

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_302
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_302
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_303
.label_302:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_303:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_304
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_304:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404d1e
	.globl sub_404d1e
	.type sub_404d1e, @function
sub_404d1e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404d20

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x404d37
	.globl sub_404d37
	.type sub_404d37, @function
sub_404d37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404da5
	.globl sub_404da5
	.type sub_404da5, @function
sub_404da5:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404db2
	.globl sub_404db2
	.type sub_404db2, @function
sub_404db2:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404dd6
	.globl sub_404dd6
	.type sub_404dd6, @function
sub_404dd6:

	nop	word ptr cs:[rax + rax]
	.section .plt.got
	.align 32
	.label_403:
	.section .text
	.align 16
	.label_404:
	.section .rodata
	.align 32
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_19:
	.quad .label_363
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_364
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_366
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
	.quad .label_365
label_24:
	.quad .label_375
	.quad .label_22
	.quad .label_376
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_22
	.quad .label_376
	.quad .label_366
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl short_options
	.type short_options, @object
short_options:
	.asciz "0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl long_options
	.type long_options, @object
long_options:
	.quad .str.35
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 108
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.36
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.37
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 116
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.38
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.39
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl emit_ancillary_info.infomap
	.type emit_ancillary_info.infomap, @object
emit_ancillary_info.infomap:
	.quad .str.20
	.quad .str.21
	.quad .str.10
	.quad .str.22
	.quad .str.23
	.quad .str.24
	.quad .str.25
	.quad .str.24
	.quad .str.26
	.quad .str.24
	.quad .str.27
	.quad .str.24
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl .str
	.type .str, @object
.str:
	.asciz "Try '%s --help' for more information.\n"
	.globl .str.1
	.type .str.1, @object
.str.1:
	.asciz "Usage: %s [-s SIGNAL | -SIGNAL] PID...\n  or:  %s -l [SIGNAL]...\n  or:  %s -t [SIGNAL]...\n"
	.globl .str.2
	.type .str.2, @object
.str.2:
	.asciz "Send signals to processes, or list signals.\n"
	.globl .str.3
	.type .str.3, @object
.str.3:
	.asciz "  -s, --signal=SIGNAL, -SIGNAL\n                   specify the name or number of the signal to be sent\n  -l, --list       list signal names, or convert signal names to/from numbers\n  -t, --table      print a table of signal information\n"
	.globl .str.4
	.type .str.4, @object
.str.4:
	.asciz "      --help     display this help and exit\n"
	.globl .str.5
	.type .str.5, @object
.str.5:
	.asciz "      --version  output version information and exit\n"
	.globl .str.6
	.type .str.6, @object
.str.6:
	.asciz "\nSIGNAL may be a signal name like 'HUP', or a signal number like '1',\nor the exit status of a process terminated by a signal.\nPID is an integer; if negative it identifies a process group.\n"
	.globl .str.7
	.type .str.7, @object
.str.7:
	.asciz "\nNOTE: your shell may have its own version of %s, which usually supersedes\nthe version described here.  Please refer to your shell's documentation\nfor details about the options it supports.\n"
	.globl .str.8
	.type .str.8, @object
.str.8:
	.asciz "kill"
	.globl .str.11
	.type .str.11, @object
.str.11:
	.ascii "/usr/local/share/"
	.globl .str.8_1
	.type .str.8_1, @object
.str.8_1:
	.asciz "locale"
	.globl .str.12
	.type .str.12, @object
.str.12:
	.ascii "invalid option -- %"
	.globl .str.5_1
	.type .str.5_1, @object
.str.5_1:
	.asciz "c"
	.globl .str.13
	.type .str.13, @object
.str.13:
	.asciz "%s: multiple signals specified"
	.globl .str.14
	.type .str.14, @object
.str.14:
	.asciz "multiple -l or -t options specified"
	.globl .str.17
	.type .str.17, @object
.str.17:
	.ascii "GNU "
	.globl .str.10
	.type .str.10, @object
.str.10:
	.asciz "coreutils"
	.globl .str.16
	.type .str.16, @object
.str.16:
	.asciz "Paul Eggert"
	.globl .str.17_0
	.type .str.17_0, @object
.str.17_0:
	.asciz "cannot combine signal with -l or -t"
	.globl .str.18_0
	.type .str.18_0, @object
.str.18_0:
	.asciz "no process ID specified"
	.globl .str.19
	.type .str.19, @object
.str.19:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
	.globl .str.20
	.type .str.20, @object
.str.20:
	.asciz "["
	.globl .str.21
	.type .str.21, @object
.str.21:
	.asciz "test invocation"
	.globl .str.22
	.type .str.22, @object
.str.22:
	.ascii "Multi-call"
	.globl .str.34
	.type .str.34, @object
.str.34:
	.asciz " invocation"
	.globl .str.23
	.type .str.23, @object
.str.23:
	.asciz "sha224sum"
	.globl .str.24
	.type .str.24, @object
.str.24:
	.asciz "sha2 utilities"
	.globl .str.25
	.type .str.25, @object
.str.25:
	.asciz "sha256sum"
	.globl .str.26
	.type .str.26, @object
.str.26:
	.asciz "sha384sum"
	.globl .str.27
	.type .str.27, @object
.str.27:
	.asciz "sha512sum"
	.globl .str.28
	.type .str.28, @object
.str.28:
	.asciz "\n%s online help: <%s>\n"
	.globl .str.18
	.type .str.18, @object
.str.18:
	.asciz "https://www.gnu.org/software/coreutils/"
	.globl .str.30
	.type .str.30, @object
.str.30:
	.asciz "en_"
	.globl .str.31
	.type .str.31, @object
.str.31:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
	.globl .str.32
	.type .str.32, @object
.str.32:
	.asciz "Full documentation <%s%s>\n"
	.globl .str.33
	.type .str.33, @object
.str.33:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
	.globl .str.35
	.type .str.35, @object
.str.35:
	.asciz "list"
	.globl .str.37
	.type .str.37, @object
.str.37:
	.asciz "table"
	.globl .str.38
	.type .str.38, @object
.str.38:
	.asciz "help"
	.globl .str.39
	.type .str.39, @object
.str.39:
	.asciz "version"
	.globl .str.40
	.type .str.40, @object
.str.40:
	.asciz "%d\n"
	.globl .str.41
	.type .str.41, @object
.str.41:
	.asciz "%*d %-*s %s\n"
	.globl .str.42
	.type .str.42, @object
.str.42:
	.asciz "?"
	.globl .str.43
	.type .str.43, @object
.str.43:
	.asciz "%s: invalid process id"
	.globl .str_2
	.type .str_2, @object
.str_2:
	.asciz "abcdefghijklmnopqrstuvwxyz"
	.globl .str.1_0
	.type .str.1_0, @object
.str.1_0:
	.ascii "%s: invalid "
	.globl .str.36
	.type .str.36, @object
.str.36:
	.asciz "signal"
	.globl .str_7
	.type .str_7, @object
.str_7:
	.asciz "8.31"
	.globl .str_3
	.type .str_3, @object
.str_3:
	.asciz "write error"
	.globl .str.1_1
	.type .str.1_1, @object
.str.1_1:
	.ascii "%s: "
	.globl .str_1
	.type .str_1, @object
.str_1:
	.asciz "%s"
	.globl .str_4
	.type .str_4, @object
.str_4:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
	.globl .str.1_2
	.type .str.1_2, @object
.str.1_2:
	.asciz "/.libs/"
	.globl .str.2_0
	.type .str.2_0, @object
.str.2_0:
	.asciz "lt-"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_176:
	.quad .label_316
	.quad .label_317
	.quad .label_318
	.quad .label_319
	.quad .label_320
	.quad .label_321
	.quad .label_322
	.quad .label_119
	.quad .label_323
	.quad .label_323
	.quad .label_324
label_92:
	.quad .label_326
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_71
	.quad .label_327
	.quad .label_328
	.quad .label_135
	.quad .label_329
	.quad .label_330
	.quad .label_331
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_155
	.quad .label_93
	.quad .label_332
	.quad .label_332
	.quad .label_333
	.quad .label_332
	.quad .label_89
	.quad .label_332
	.quad .label_334
	.quad .label_332
	.quad .label_332
	.quad .label_332
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_332
	.quad .label_332
	.quad .label_332
	.quad .label_332
	.quad .label_335
	.quad .label_155
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_332
	.quad .label_336
	.quad .label_89
	.quad .label_332
	.quad .label_89
	.quad .label_332
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_89
	.quad .label_337
	.quad .label_332
	.quad .label_337
	.quad .label_333
	.quad .str_8
	.quad .str.1_8
	.quad .str.2_3
	.quad .str.3_1
	.quad .str.4_1
	.quad .str.5_1
	.quad .str.6_1
	.quad .str.7_1
	.quad .str.8_1
	.quad .str.9_0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.globl .str_8
	.type .str_8, @object
.str_8:
	.asciz "literal"
	.globl .str.1_8
	.type .str.1_8, @object
.str.1_8:
	.asciz "shell"
	.globl .str.2_3
	.type .str.2_3, @object
.str.2_3:
	.asciz "shell-always"
	.globl .str.3_1
	.type .str.3_1, @object
.str.3_1:
	.ascii "shell-"
	.globl .str.7_1
	.type .str.7_1, @object
.str.7_1:
	.asciz "escape"
	.globl .str.4_1
	.type .str.4_1, @object
.str.4_1:
	.asciz "shell-escape-always"
	.globl .str.6_1
	.type .str.6_1, @object
.str.6_1:
	.asciz "c-maybe"
	.globl .str.9_0
	.type .str.9_0, @object
.str.9_0:
	.asciz "clocale"
	.globl .str.10_0
	.type .str.10_0, @object
.str.10_0:
	.byte 34
	.byte 0
	.globl .str.11_0
	.type .str.11_0, @object
.str.11_0:
	.byte 96
	.byte 0
	.globl .str.12_0
	.type .str.12_0, @object
.str.12_0:
	.asciz "'"
	.asciz "UTF-8"
	.globl .str.14_0
	.type .str.14_0, @object
.str.14_0:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
	.globl .str.15
	.type .str.15, @object
.str.15:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
	.byte 71
	.byte 66
	.byte 49
	.byte 56
	.byte 48
	.byte 51
	.byte 48
	.byte 0
	.globl .str.17_1
	.type .str.17_1, @object
.str.17_1:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
	.globl .str.18_1
	.type .str.18_1, @object
.str.18_1:
	.byte 161
	.byte 175
	.byte 0
	.byte 0
label_241:
	.quad .label_377
	.quad .label_378
	.quad .label_379
	.quad .label_380
	.quad .label_381
	.quad .label_382
	.quad .label_383
	.quad .label_384
	.quad .label_385
	.quad .label_386
	.globl .str_5
	.type .str_5, @object
.str_5:
	.asciz "%s (%s) %s\n"
	.globl .str.1_3
	.type .str.1_3, @object
.str.1_3:
	.asciz "%s %s\n"
	.globl .str.2_1
	.type .str.2_1, @object
.str.2_1:
	.asciz "(C)"
	.globl .str.3_0
	.type .str.3_0, @object
.str.3_0:
	.ascii "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
	.globl .str_0
	.type .str_0, @object
.str_0:
	.byte 0
	.globl .str.4_0
	.type .str.4_0, @object
.str.4_0:
	.asciz "Written by %s.\n"
	.globl .str.5_0
	.type .str.5_0, @object
.str.5_0:
	.asciz "Written by %s and %s.\n"
	.globl .str.6_0
	.type .str.6_0, @object
.str.6_0:
	.asciz "Written by %s, %s, and %s.\n"
	.globl .str.7_0
	.type .str.7_0, @object
.str.7_0:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
	.globl .str.8_0
	.type .str.8_0, @object
.str.8_0:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
	.globl .str.9
	.type .str.9, @object
.str.9:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
	.globl .str.10_1
	.type .str.10_1, @object
.str.10_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
	.globl .str.11_1
	.type .str.11_1, @object
.str.11_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
	.globl .str.12_1
	.type .str.12_1, @object
.str.12_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
	.globl .str.13_0
	.type .str.13_0, @object
.str.13_0:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
	.globl .str.14_1
	.type .str.14_1, @object
.str.14_1:
	.asciz "\nReport bugs to: %s\n"
	.globl .str.15_0
	.type .str.15_0, @object
.str.15_0:
	.asciz "bug-coreutils@gnu.org"
	.globl .str.16_0
	.type .str.16_0, @object
.str.16_0:
	.asciz "%s home page: <%s>\n"
	.globl .str.19_0
	.type .str.19_0, @object
.str.19_0:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.globl .str.1_4
	.type .str.1_4, @object
.str.1_4:
	.asciz "memory exhausted"
	.globl .str_6
	.type .str_6, @object
.str_6:
	.asciz "RTMIN"
	.globl .str.1_5
	.type .str.1_5, @object
.str.1_5:
	.asciz "RTMAX"
	.globl .str.2_2
	.type .str.2_2, @object
.str.2_2:
	.asciz "%+d"
	.asciz "C"
	.globl .str.1_6
	.type .str.1_6, @object
.str.1_6:
	.asciz "POSIX"
	.globl .str.1_7
	.type .str.1_7, @object
.str.1_7:
	.asciz "ASCII"
	.label_405:
	.section .data
	.align 16
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad .str_7
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_197:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.long 0x1
label_268:
	.asciz "HUP"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 78
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 81
	.byte 85
	.byte 73
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 76
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 82
	.byte 65
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 66
	.byte 82
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 70
	.byte 80
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.byte 75
	.asciz "ILL"
	.byte 0
	.byte 0
	.byte 0
	.byte 11
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 69
	.byte 71
	.byte 86
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 66
	.byte 85
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.asciz "IPE"
	.byte 0
	.byte 0
	.byte 0
	.byte 14
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 76
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 69
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 10
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 83
	.byte 82
	.byte 49
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 12
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 83
	.byte 82
	.byte 50
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 72
	.byte 76
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 23
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 82
	.byte 71
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 19
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 84
	.byte 79
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 20
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 83
	.byte 84
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 18
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 79
	.byte 78
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 21
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 84
	.byte 73
	.byte 78
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 22
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 84
	.byte 79
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 31
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 89
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 79
	.byte 76
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 86
	.byte 84
	.byte 65
	.byte 76
	.byte 82
	.byte 77
	.byte 0
	.byte 0
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 82
	.byte 79
	.byte 70
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 67
	.byte 80
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 70
	.byte 83
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 79
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 76
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 30
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 87
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 28
	.byte 0
	.byte 0
	.byte 0
	.byte 87
	.byte 73
	.byte 78
	.byte 67
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 79
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 84
	.byte 75
	.byte 70
	.byte 76
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.asciz "EXIT"
	.byte 0
	.byte 0
	.byte 0
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .bss
	.align 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl completed.7594
	.type completed.7594, @object
completed.7594:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_208:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_207:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_206:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: