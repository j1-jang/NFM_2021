	.section	.text
	.align	32
	#Procedure 0x401c49
	.globl sub_401c49
	.type sub_401c49, @function
sub_401c49:

	hlt	
	.section	.text
	.align	32
	#Procedure 0x401c4a
	.globl sub_401c4a
	.type sub_401c4a, @function
sub_401c4a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401c82
	.globl sub_401c82
	.type sub_401c82, @function
sub_401c82:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401cca
	.globl sub_401cca
	.type sub_401cca, @function
sub_401cca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401cec
	.globl sub_401cec
	.type sub_401cec, @function
sub_401cec:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401cfd
	.globl sub_401cfd
	.type sub_401cfd, @function
sub_401cfd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401d16
	.globl sub_401d16
	.type sub_401d16, @function
sub_401d16:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401d20

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	call	error
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x401d4a
	.globl sub_401d4a
	.type sub_401d4a, @function
sub_401d4a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401d50

	.globl cleanup_fatal
	.type cleanup_fatal, @function
cleanup_fatal:
	push	rax
	call	cleanup
	mov	edi, 1
	call	exit
	.section	.text
	.align	32
	#Procedure 0x401d60

	.globl main
	.type main, @function
main:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0xa0
	mov	rbx, rsi
	mov	r14d, edi
	mov	rdi, qword ptr [rbx]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:.str
	call	setlocale
	mov	edi, OFFSET FLAT:.str.3
	mov	esi, OFFSET FLAT:.str.4
	call	bindtextdomain
	mov	edi, OFFSET FLAT:.str.3
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	mov	qword ptr [word ptr [rip + global_argv]],  rbx
	mov	qword ptr [word ptr [rip + controls]],  0
	mov	qword ptr [word ptr [rip + control_used]],  0
	mov	byte ptr [byte ptr [rip + suppress_count]],  0
	mov	byte ptr [byte ptr [rip + remove_files]],  1
	mov	byte ptr [byte ptr [rip + suppress_matched]],  0
	mov	qword ptr [word ptr [rip + prefix]], OFFSET FLAT:.str.5
	jmp	.label_14
	.section	.text
	.align	32
	#Procedure 0x401dea
	.globl sub_401dea
	.type sub_401dea, @function
sub_401dea:

	nop	word ptr [rax + rax]
.label_1850:
	mov	byte ptr [byte ptr [rip + suppress_count]],  1
.label_14:
	mov	edx, OFFSET FLAT:.str.6
	mov	ecx, OFFSET FLAT:longopts
	xor	r8d, r8d
	mov	edi, r14d
	mov	rsi, rbx
	call	getopt_long
	cmp	eax, 0x6a
	jle	.label_10
	lea	ecx, [rax - 0x6b]
	cmp	ecx, 8
	ja	.label_34
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_13]]
.label_1848:
	mov	byte ptr [byte ptr [rip + remove_files]],  0
	jmp	.label_14
	.section	.text
	.align	32
	#Procedure 0x401e2c
	.globl sub_401e2c
	.type sub_401e2c, @function
sub_401e2c:

	nop	dword ptr [rax]
.label_10:
	cmp	eax, 0x61
	jle	.label_17
	cmp	eax, 0x62
	je	.label_21
	cmp	eax, 0x66
	jne	.label_15
	mov	rax,  qword ptr [word ptr [rip + optarg]]
	mov	qword ptr [word ptr [rip + prefix]],  rax
	jmp	.label_14
	.section	.text
	.align	32
	#Procedure 0x401e57
	.globl sub_401e57
	.type sub_401e57, @function
sub_401e57:

	nop	word ptr [rax + rax]
.label_34:
	cmp	eax, 0x7a
	je	.label_32
	cmp	eax, 0x80
	jne	.label_15
	mov	byte ptr [byte ptr [rip + suppress_matched]],  1
	jmp	.label_14
.label_1849:
	mov	rbp,  qword ptr [word ptr [rip + optarg]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.7
	mov	edx, 5
	call	dcgettext
	xor	esi, esi
	mov	edx, 0x7fffffff
	mov	ecx, OFFSET FLAT:.str
	xor	r9d, r9d
	mov	rdi, rbp
	mov	r8, rax
	call	xdectoimax
	mov	dword ptr [dword ptr [rip + digits]],  eax
	jmp	.label_14
.label_21:
	mov	rax,  qword ptr [word ptr [rip + optarg]]
	mov	qword ptr [word ptr [rip + suffix]],  rax
	jmp	.label_14
.label_32:
	mov	byte ptr [byte ptr [rip + elide_empty_files]],  1
	jmp	.label_14
.label_17:
	cmp	eax, -1
	jne	.label_31
	mov	eax,  dword ptr [dword ptr [rip + optind]]
	mov	ecx, r14d
	sub	ecx, eax
	cmp	ecx, 1
	jle	.label_33
	mov	rdi,  qword ptr [word ptr [rip + prefix]]
	call	strlen
	mov	rbp, rax
	cmp	qword ptr [word ptr [rip + suffix]],  0
	je	.label_7
	mov	rdi,  qword ptr [word ptr [rip + suffix]]
	call	max_out
	jmp	.label_12
.label_7:
	mov	ecx,  dword ptr [dword ptr [rip + digits]]
	mov	eax, 0xa
	cmp	ecx, 0xa
	jb	.label_12
	movsxd	rax,  dword ptr [dword ptr [rip + digits]]
.label_12:
	mov	rcx, -2
	sub	rcx, rbp
	cmp	rcx, rax
	jb	.label_18
	lea	rdi, [rbp + rax + 1]
	call	xmalloc
	mov	qword ptr [word ptr [rip + filename_space]],  rax
	movsxd	rax,  dword ptr [dword ptr [rip + optind]]
	lea	ecx, [rax + 1]
	mov	dword ptr [dword ptr [rip + optind]],  ecx
	mov	rdi, qword ptr [rbx + rax*8]
	call	set_input_file
	mov	esi,  dword ptr [dword ptr [rip + optind]]
	mov	edi, r14d
	mov	rdx, rbx
	call	parse_patterns
	mov	edi, OFFSET FLAT:caught_signals
	call	sigemptyset
	mov	rbp, -0x2c
	lea	rbx, [rsp + 8]
	nop	word ptr [rax + rax]
.label_22:
	mov	edi,  dword ptr [dword ptr [rbp + label_20]]
	xor	esi, esi
	mov	rdx, rbx
	call	sigaction
	cmp	qword ptr [rsp + 8], 1
	je	.label_19
	mov	esi,  dword ptr [dword ptr [rbp + label_20]]
	mov	edi, OFFSET FLAT:caught_signals
	call	sigaddset
.label_19:
	add	rbp, 4
	jne	.label_22
	mov	qword ptr [word ptr [rsp + 8]], OFFSET FLAT:interrupt_handler
	movups	xmm0,  xmmword ptr [word ptr [rip + label_23]]
	movups	xmmword ptr [rsp + 0x80], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_24]]
	movups	xmmword ptr [rsp + 0x70], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_25]]
	movups	xmmword ptr [rsp + 0x60], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_26]]
	movups	xmmword ptr [rsp + 0x50], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_27]]
	movups	xmmword ptr [rsp + 0x40], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_28]]
	movups	xmmword ptr [rsp + 0x30], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_29]]
	movups	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + caught_signals]]
	movups	xmmword ptr [rsp + 0x10], xmm0
	mov	dword ptr [rsp + 0x90], 0
	mov	rbp, -0x2c
	lea	rbx, [rsp + 8]
	nop	word ptr cs:[rax + rax]
.label_8:
	mov	esi,  dword ptr [dword ptr [rbp + label_20]]
	mov	edi, OFFSET FLAT:caught_signals
	call	sigismember
	test	eax, eax
	je	.label_30
	mov	edi,  dword ptr [dword ptr [rbp + label_20]]
	xor	edx, edx
	mov	rsi, rbx
	call	sigaction
.label_30:
	add	rbp, 4
	jne	.label_8
	call	split_file
	xor	edi, edi
	call	close
	test	eax, eax
	jne	.label_11
	xor	eax, eax
	add	rsp, 0xa0
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_31:
	cmp	eax, 0xffffff7d
	je	.label_16
	cmp	eax, 0xffffff7e
	jne	.label_15
	xor	edi, edi
	call	usage
.label_15:
	mov	edi, 1
	call	usage
.label_16:
	mov	rdi,  qword ptr [word ptr [rip + stdout]]
	mov	rcx,  qword ptr [word ptr [rip + Version]]
	mov	qword ptr [rsp], 0
	mov	esi, OFFSET FLAT:.str.8
	mov	edx, OFFSET FLAT:.str.17
	mov	r8d, OFFSET FLAT:.str.10
	mov	r9d, OFFSET FLAT:.str.11
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_33:
	xor	edi, edi
	cmp	eax, r14d
	jge	.label_9
	mov	esi, OFFSET FLAT:.str.13
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	movsxd	rax, r14d
	mov	rdi, qword ptr [rbx + rax*8 - 8]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbp
	call	error
	mov	edi, 1
	call	usage
.label_18:
	call	xalloc_die
.label_11:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.14
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
	call	cleanup_fatal
.label_9:
	mov	esi, OFFSET FLAT:.str.12
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
	.section	.text
	.align	32
	#Procedure 0x4021a3
	.globl sub_4021a3
	.type sub_4021a3, @function
sub_4021a3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4021b0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_35
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.16
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx,  qword ptr [word ptr [rip + program_name]]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.17_0
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.18
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	call	emit_mandatory_arg_note
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.19
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.20
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.21
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.22
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.23
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.24
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
	call	emit_ancillary_info
	mov	edi, ebp
	call	exit
.label_35:
	mov	rbx,  qword ptr [word ptr [rip + stderr]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.15
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx,  qword ptr [word ptr [rip + program_name]]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	32
	#Procedure 0x402330

	.globl max_out
	.type max_out, @function
max_out:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdi
	xor	eax, eax
	lea	r15, [rsp + 4]
	mov	r12, r14
	jmp	.label_41
	.section	.text
	.align	32
	#Procedure 0x402347
	.globl sub_402347
	.type sub_402347, @function
sub_402347:

	nop	word ptr [rax + rax]
.label_39:
	inc	rbx
	mov	r12, rbx
.label_41:
	movzx	ecx, byte ptr [r12]
	cmp	ecx, 0x25
	je	.label_38
	test	cl, cl
	je	.label_40
	mov	rbx, r12
	jmp	.label_39
	.section	.text
	.align	32
	#Procedure 0x402369
	.globl sub_402369
	.type sub_402369, @function
sub_402369:

	nop	dword ptr [rax]
.label_38:
	lea	rbx, [r12 + 1]
	movzx	ecx, byte ptr [r12 + 1]
	cmp	ecx, 0x25
	je	.label_39
	test	al, 1
	jne	.label_36
	mov	rdi, rbx
	mov	rsi, r15
	call	get_format_flags
	add	r12, rax
	mov	rbx, r12
	nop	dword ptr [rax]
.label_43:
	movsx	eax, byte ptr [rbx + 1]
	inc	rbx
	lea	ecx, [rax - 0x30]
	cmp	ecx, 0xa
	jb	.label_43
	movzx	eax, al
	cmp	eax, 0x2e
	jne	.label_44
	nop	word ptr [rax + rax]
.label_45:
	movsx	eax, byte ptr [rbx + 1]
	inc	rbx
	add	eax, -0x30
	cmp	eax, 0xa
	jb	.label_45
.label_44:
	mov	esi, dword ptr [rsp + 4]
	mov	rdi, rbx
	call	check_format_conv_type
	mov	al, 1
	jmp	.label_39
.label_40:
	test	al, 1
	je	.label_42
	mov	edi, 0
	mov	esi, 0
	mov	edx, 1
	xor	ecx, ecx
	mov	r9d, 0xffffffff
	xor	eax, eax
	mov	r8, r14
	call	__snprintf_chk
	test	eax, eax
	js	.label_37
	cdqe	
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_36:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.38
.label_46:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_42:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.39
	jmp	.label_46
.label_37:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40244c
	.globl sub_40244c
	.type sub_40244c, @function
sub_40244c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x402450

	.globl set_input_file
	.type set_input_file, @function
set_input_file:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	movzx	eax, byte ptr [rbx]
	cmp	eax, 0x2d
	jne	.label_47
	cmp	byte ptr [rbx + 1], 0
	je	.label_49
.label_47:
	xor	edi, edi
	xor	edx, edx
	xor	ecx, ecx
	mov	rsi, rbx
	call	fd_reopen
	test	eax, eax
	js	.label_48
.label_49:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_48:
	call	__errno_location
	mov	r14d, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.45
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	rsi, rbx
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, r14d
	mov	rdx, rbp
	call	error
	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4024c0

	.globl parse_patterns
	.type parse_patterns, @function
parse_patterns:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r12, rdx
	mov	ebp, esi
	mov	r14d, edi
	cmp	ebp, r14d
	jge	.label_50
	lea	r15, [rsp + 0x20]
	nop	word ptr cs:[rax + rax]
.label_54:
	movsxd	rbx, ebp
	mov	rax, qword ptr [r12 + rbx*8]
	movzx	eax, byte ptr [rax]
	cmp	eax, 0x2f
	je	.label_55
	movzx	eax, al
	cmp	eax, 0x25
	jne	.label_59
.label_55:
	mov	rdx, qword ptr [r12 + rbx*8]
	movzx	eax, byte ptr [rdx]
	cmp	eax, 0x25
	sete	al
	movzx	esi, al
	mov	edi, ebx
	call	extract_regexp
	mov	r13, rax
	jmp	.label_56
	.section	.text
	.align	32
	#Procedure 0x402526
	.globl sub_402526
	.type sub_402526, @function
sub_402526:

	nop	word ptr cs:[rax + rax]
.label_59:
	call	new_control_record
	mov	r13, rax
	mov	dword ptr [r13 + 0x18], ebx
	mov	rdi, qword ptr [r12 + rbx*8]
	xor	esi, esi
	mov	edx, 0xa
	mov	r8d, OFFSET FLAT:.str
	mov	rcx, r15
	call	xstrtoumax
	test	eax, eax
	jne	.label_52
	mov	rax, qword ptr [rsp + 0x20]
	test	rax, rax
	je	.label_53
	cmp	rax,  qword ptr [word ptr [rip + parse_patterns.last_val]]
	jb	.label_58
	jne	.label_57
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.49
	mov	edx, 5
	call	dcgettext
	mov	r15, rax
	mov	rdi, qword ptr [r12 + rbx*8]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r15
	lea	r15, [rsp + 0x20]
	call	error
.label_57:
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [word ptr [rip + parse_patterns.last_val]],  rax
	mov	qword ptr [r13 + 8], rax
.label_56:
	lea	ebx, [rbp + 1]
	cmp	ebx, r14d
	jge	.label_51
	movsxd	rax, ebx
	mov	rdx, qword ptr [r12 + rax*8]
	movzx	eax, byte ptr [rdx]
	cmp	eax, 0x7b
	jne	.label_51
	mov	edi, ebx
	mov	rsi, r13
	call	parse_repeat_count
	mov	ebp, ebx
.label_51:
	inc	ebp
	cmp	ebp, r14d
	jl	.label_54
.label_50:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_52:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.46
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	rdi, qword ptr [r12 + rbx*8]
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbp
	call	error
.label_53:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.47
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r12 + rbx*8]
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	call	error
.label_58:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.48
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rdi, qword ptr [r12 + rbx*8]
	call	quote
	mov	rbx, rax
	mov	rdi,  qword ptr [word ptr [rip + parse_patterns.last_val]]
	lea	rsi, [rsp]
	call	umaxtostr
	mov	rbp, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	mov	rcx, rbx
	mov	r8, rbp
	call	error
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4026a0

	.globl interrupt_handler
	.type interrupt_handler, @function
interrupt_handler:
	push	rbx
	mov	ebx, edi
	mov	edi, 1
	call	delete_all_files
	xor	esi, esi
	mov	edi, ebx
	call	signal
	mov	edi, ebx
	pop	rbx
	jmp	raise
	.section	.text
	.align	32
	#Procedure 0x4026be
	.globl sub_4026be
	.type sub_4026be, @function
sub_4026be:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4026c0

	.globl split_file
	.type split_file, @function
split_file:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	xor	r15d, r15d
	cmp	qword ptr [word ptr [rip + control_used]],  0
	je	.label_60
	nop	dword ptr [rax]
.label_64:
	mov	rax,  qword ptr [word ptr [rip + controls]]
	lea	r12, [r15 + r15*2]
	shl	r12, 5
	cmp	byte ptr [rax + r12 + 0x1e], 0
	mov	ebx, 0
	mov	r14d, 0
	jne	.label_66
	jmp	.label_61
	.section	.text
	.align	32
	#Procedure 0x402704
	.globl sub_402704
	.type sub_402704, @function
sub_402704:

	nop	word ptr cs:[rax + rax]
.label_65:
	mov	rdi,  qword ptr [word ptr [rip + controls]]
	add	rdi, r12
	mov	rsi, rbx
	call	process_regexp
	inc	rbx
.label_66:
	mov	rax,  qword ptr [word ptr [rip + controls]]
	cmp	byte ptr [rax + r12 + 0x1c], 0
	jne	.label_65
	cmp	rbx, qword ptr [rax + r12 + 0x10]
	jbe	.label_65
	jmp	.label_62
	.section	.text
	.align	32
	#Procedure 0x40273d
	.globl sub_40273d
	.type sub_40273d, @function
sub_40273d:

	nop	dword ptr [rax]
.label_63:
	mov	rdi,  qword ptr [word ptr [rip + controls]]
	add	rdi, r12
	mov	rsi, r14
	call	process_line_count
	inc	r14
.label_61:
	mov	rax,  qword ptr [word ptr [rip + controls]]
	cmp	byte ptr [rax + r12 + 0x1c], 0
	jne	.label_63
	cmp	r14, qword ptr [rax + r12 + 0x10]
	jbe	.label_63
.label_62:
	inc	r15
	cmp	r15,  qword ptr [word ptr [rip + control_used]]
	jb	.label_64
.label_60:
	call	create_output_file
	call	dump_rest_of_file
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	close_output_file
	.section	.text
	.align	32
	#Procedure 0x402795
	.globl sub_402795
	.type sub_402795, @function
sub_402795:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4027a0

	.globl emit_mandatory_arg_note
	.type emit_mandatory_arg_note, @function
emit_mandatory_arg_note:
	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.65
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	32
	#Procedure 0x4027c2
	.globl sub_4027c2
	.type sub_4027c2, @function
sub_4027c2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4027d0

	.globl emit_ancillary_info
	.type emit_ancillary_info, @function
emit_ancillary_info:
	push	r14
	push	rbx
	push	rax
	mov	ebx, OFFSET FLAT:emit_ancillary_info.infomap
	mov	esi, OFFSET FLAT:.str.66
	nop	
.label_69:
	mov	edi, OFFSET FLAT:.str.8
	call	strcmp
	test	eax, eax
	je	.label_68
	mov	rsi, qword ptr [rbx + 0x10]
	add	rbx, 0x10
	test	rsi, rsi
	jne	.label_69
.label_68:
	mov	rax, qword ptr [rbx + 8]
	test	rax, rax
	mov	ebx, OFFSET FLAT:.str.8
	cmovne	rbx, rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.74
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.17
	mov	ecx, OFFSET FLAT:.str.18_0
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_67
	mov	esi, OFFSET FLAT:.str.76
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_67
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.77
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	call	fputs_unlocked
.label_67:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.78
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	r14d, OFFSET FLAT:.str.8
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.18_0
	mov	ecx, OFFSET FLAT:.str.8
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.79
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	cmp	rbx, r14
	mov	eax, OFFSET FLAT:.str.80
	mov	ecx, OFFSET FLAT:.str
	cmove	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rdx
	mov	rdx, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	jmp	__printf_chk
	.section	.text
	.align	32
	#Procedure 0x4028ea
	.globl sub_4028ea
	.type sub_4028ea, @function
sub_4028ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4028f0

	.globl cleanup
	.type cleanup, @function
cleanup:
	push	rbx
	sub	rsp, 0x80
	call	close_output_file
	lea	rbx, [rsp]
	xor	edi, edi
	mov	esi, OFFSET FLAT:caught_signals
	mov	rdx, rbx
	call	sigprocmask
	xor	edi, edi
	call	delete_all_files
	mov	edi, 2
	xor	edx, edx
	mov	rsi, rbx
	call	sigprocmask
	add	rsp, 0x80
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40292f
	.globl sub_40292f
	.type sub_40292f, @function
sub_40292f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402930

	.globl close_output_file
	.type close_output_file, @function
close_output_file:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x88
	mov	rbx,  qword ptr [word ptr [rip + output_stream]]
	test	rbx, rbx
	je	.label_74
	mov	rdi, rbx
	call	ferror_unlocked
	test	eax, eax
	jne	.label_71
	mov	rdi, rbx
	call	rpl_fclose
	test	eax, eax
	jne	.label_72
	cmp	qword ptr [word ptr [rip + bytes_written]],  0
	jne	.label_73
	movzx	eax,  byte ptr [byte ptr [rip + elide_empty_files]]
	and	eax, 1
	cmp	eax, 1
	jne	.label_73
	lea	r15, [rsp]
	xor	edi, edi
	mov	esi, OFFSET FLAT:caught_signals
	mov	rdx, r15
	call	sigprocmask
	mov	rdi,  qword ptr [word ptr [rip + output_filename]]
	call	unlink
	mov	ebp, eax
	test	ebp, ebp
	sete	bl
	call	__errno_location
	mov	r14d, dword ptr [rax]
	movzx	eax, bl
	sub	dword ptr [dword ptr [rip + files_created]],  eax
	mov	edi, 2
	xor	edx, edx
	mov	rsi, r15
	call	sigprocmask
	test	ebp, ebp
	je	.label_70
	mov	rdx,  qword ptr [word ptr [rip + output_filename]]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	mov	esi, r14d
	call	error
	jmp	.label_70
.label_73:
	mov	al,  byte ptr [byte ptr [rip + suppress_count]]
	and	al, 1
	jne	.label_70
	mov	rbx,  qword ptr [word ptr [rip + stdout]]
	mov	rdi,  qword ptr [word ptr [rip + bytes_written]]
	lea	rsi, [rsp]
	call	umaxtostr
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:.str.26
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
.label_70:
	mov	qword ptr [word ptr [rip + output_stream]],  0
.label_74:
	add	rsp, 0x88
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_71:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.25
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rsi,  qword ptr [word ptr [rip + output_filename]]
	mov	edi, 4
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	jmp	.label_75
.label_72:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	mov	rdx,  qword ptr [word ptr [rip + output_filename]]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	mov	esi, ebx
.label_75:
	call	error
	mov	qword ptr [word ptr [rip + output_stream]],  0
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x402abe
	.globl sub_402abe
	.type sub_402abe, @function
sub_402abe:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402ac0

	.globl delete_all_files
	.type delete_all_files, @function
delete_all_files:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14d, edi
	cmp	byte ptr [byte ptr [rip + remove_files]],  0
	je	.label_76
	cmp	dword ptr [dword ptr [rip + files_created]],  0
	je	.label_79
	xor	ebp, ebp
	nop	
.label_77:
	mov	edi, ebp
	call	make_filename
	mov	rbx, rax
	mov	rdi, rbx
	call	unlink
	test	eax, eax
	je	.label_78
	test	r14b, r14b
	jne	.label_78
	call	__errno_location
	mov	r15d, dword ptr [rax]
	xor	edi, edi
	mov	esi, 3
	mov	rdx, rbx
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	mov	esi, r15d
	call	error
.label_78:
	inc	ebp
	cmp	ebp,  dword ptr [dword ptr [rip + files_created]]
	jb	.label_77
.label_79:
	mov	dword ptr [dword ptr [rip + files_created]],  0
.label_76:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402b45
	.globl sub_402b45
	.type sub_402b45, @function
sub_402b45:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402b50

	.globl make_filename
	.type make_filename, @function
make_filename:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edi
	mov	rdi,  qword ptr [word ptr [rip + filename_space]]
	mov	rsi,  qword ptr [word ptr [rip + prefix]]
	call	strcpy
	mov	rbx,  qword ptr [word ptr [rip + suffix]]
	mov	rbp,  qword ptr [word ptr [rip + filename_space]]
	mov	rdi,  qword ptr [word ptr [rip + prefix]]
	call	strlen
	mov	rdi, rax
	add	rdi, rbp
	cmp	rbx, 0
	je	.label_80
	mov	rcx,  qword ptr [word ptr [rip + suffix]]
	mov	esi, 1
	mov	rdx, -1
	xor	eax, eax
	mov	r8d, r14d
	call	__sprintf_chk
	jmp	.label_81
.label_80:
	mov	r8d,  dword ptr [dword ptr [rip + digits]]
	mov	esi, 1
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:.str.27
	xor	eax, eax
	mov	r9d, r14d
	call	__sprintf_chk
.label_81:
	mov	rax,  qword ptr [word ptr [rip + filename_space]]
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x402bdd
	.globl sub_402bdd
	.type sub_402bdd, @function
sub_402bdd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x402be0

	.globl get_format_flags
	.type get_format_flags, @function
get_format_flags:
	xor	ecx, ecx
	xor	eax, eax
	jmp	.label_82
	.section	.text
	.align	32
	#Procedure 0x402be6
	.globl sub_402be6
	.type sub_402be6, @function
sub_402be6:

	nop	word ptr cs:[rax + rax]
.label_83:
	inc	rax
.label_82:
	movsx	edx, byte ptr [rdi + rax]
	cmp	edx, 0x2c
	jg	.label_84
	cmp	edx, 0x23
	je	.label_86
	cmp	edx, 0x27
	jne	.label_85
	or	ecx, 1
	inc	rax
	jmp	.label_82
	.section	.text
	.align	32
	#Procedure 0x402c0e
	.globl sub_402c0e
	.type sub_402c0e, @function
sub_402c0e:

	nop	
.label_84:
	cmp	edx, 0x2d
	je	.label_83
	cmp	edx, 0x30
	je	.label_83
	jmp	.label_85
	.section	.text
	.align	32
	#Procedure 0x402c1c
	.globl sub_402c1c
	.type sub_402c1c, @function
sub_402c1c:

	nop	dword ptr [rax]
.label_86:
	or	ecx, 2
	jmp	.label_83
.label_85:
	mov	dword ptr [rsi], ecx
	ret	
	.section	.text
	.align	32
	#Procedure 0x402c28
	.globl sub_402c28
	.type sub_402c28, @function
sub_402c28:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402c30

	.globl check_format_conv_type
	.type check_format_conv_type, @function
check_format_conv_type:
	push	rbp
	push	rbx
	push	rax
	movzx	ebx, byte ptr [rdi]
	lea	eax, [rbx - 0x58]
	cmp	eax, 0x20
	ja	.label_90
	movabs	rcx, 0x100800001
	bt	rcx, rax
	jb	.label_94
	mov	ebp, 0xfffffffe
	mov	ecx, 0x21000
	bt	rcx, rax
	jae	.label_91
	mov	byte ptr [rdi], 0x75
	jmp	.label_87
.label_94:
	mov	ebp, 0xfffffffd
	jmp	.label_87
.label_91:
	cmp	rax, 0x1d
	jne	.label_90
.label_87:
	and	ebp, esi
	jne	.label_89
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_90:
	test	ebx, ebx
	jne	.label_92
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.40
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_89:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.43
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	add	ebp, ebp
	and	ebp, 4
	xor	ebp, 0x27
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	mov	ecx, ebp
	mov	r8d, ebx
	call	error
.label_92:
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	test	byte ptr [rax + rbx*2 + 1], 0x40
	jne	.label_93
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.42
	jmp	.label_88
.label_93:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.41
.label_88:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	mov	ecx, ebx
	call	error
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402d20

	.globl extract_regexp
	.type extract_regexp, @function
extract_regexp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r13d, esi
	mov	ebp, edi
	lea	r12, [rbx + 1]
	movsx	r14d, byte ptr [rbx]
	mov	rdi, r12
	mov	esi, r14d
	call	strrchr
	mov	r15, rax
	test	r15, r15
	je	.label_95
	mov	r14, rbx
	mov	qword ptr [rsp], r14
	not	r14
	add	r14, r15
	call	new_control_record
	mov	rbx, rax
	mov	dword ptr [rbx + 0x18], ebp
	mov	byte ptr [rbx + 0x1d], r13b
	mov	byte ptr [rbx + 0x1e], 1
	lea	rbp, [rbx + 0x20]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	mov	edi, 0x100
	call	xmalloc
	mov	qword ptr [rbx + 0x40], rax
	mov	qword ptr [rbx + 0x48], 0
	mov	qword ptr [word ptr [rip + rpl_re_syntax_options]],  0x2c6
	mov	rdi, r12
	mov	rsi, r14
	mov	rdx, rbp
	call	rpl_re_compile_pattern
	mov	r12, rax
	test	r12, r12
	jne	.label_96
	cmp	byte ptr [r15 + 1], 0
	je	.label_97
	inc	r15
	mov	rdi, rbx
	mov	rsi, qword ptr [rsp]
	mov	rdx, r15
	call	check_for_offset
.label_97:
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_95:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.50
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	mov	rcx, rbx
	mov	r8d, r14d
	call	error
.label_96:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.51
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rsp]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	mov	r8, r12
	call	error
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x402e40

	.globl new_control_record
	.type new_control_record, @function
new_control_record:
	mov	rax,  qword ptr [word ptr [rip + control_used]]
	cmp	rax,  qword ptr [word ptr [rip + new_control_record.control_allocated]]
	jne	.label_98
	push	rax
	mov	rdi,  qword ptr [word ptr [rip + controls]]
	mov	esi, OFFSET FLAT:new_control_record.control_allocated
	mov	edx, 0x60
	call	x2nrealloc
	mov	qword ptr [word ptr [rip + controls]],  rax
	add	rsp, 8
.label_98:
	mov	rax,  qword ptr [word ptr [rip + control_used]]
	lea	rcx, [rax + 1]
	mov	qword ptr [word ptr [rip + control_used]],  rcx
	mov	rcx,  qword ptr [word ptr [rip + controls]]
	lea	rdx, [rax + rax*2]
	shl	rdx, 5
	lea	rax, [rcx + rdx]
	mov	byte ptr [rcx + rdx + 0x1e], 0
	mov	byte ptr [rcx + rdx + 0x1c], 0
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + rdx], xmm0
	mov	qword ptr [rcx + rdx + 0x10], 0
	ret	
	.section	.text
	.align	32
	#Procedure 0x402eb2
	.globl sub_402eb2
	.type sub_402eb2, @function
sub_402eb2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402ec0

	.globl parse_repeat_count
	.type parse_repeat_count, @function
parse_repeat_count:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r15, rsi
	mov	r14d, edi
	mov	rdi, rbx
	call	strlen
	movzx	ecx, byte ptr [rbx + rax - 1]
	cmp	ecx, 0x7d
	jne	.label_100
	lea	rbp, [rbx + rax - 1]
	mov	byte ptr [rbp], 0
	inc	rbx
	lea	rax, [rbp - 1]
	cmp	rbx, rax
	jne	.label_99
	movzx	eax, byte ptr [rbx]
	cmp	eax, 0x2a
	jne	.label_99
	mov	byte ptr [r15 + 0x1c], 1
	jmp	.label_101
.label_99:
	lea	rcx, [rsp]
	xor	esi, esi
	mov	edx, 0xa
	mov	r8d, OFFSET FLAT:.str
	mov	rdi, rbx
	call	xstrtoumax
	test	eax, eax
	jne	.label_102
	mov	rax, qword ptr [rsp]
	mov	qword ptr [r15 + 0x10], rax
.label_101:
	mov	byte ptr [rbp], 0x7d
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_100:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.53
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	rdi, rbx
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbp
	call	error
.label_102:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.54
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	movsxd	rax, r14d
	mov	rcx,  qword ptr [word ptr [rip + global_argv]]
	mov	rdi, qword ptr [rcx + rax*8]
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402fb0

	.globl check_for_offset
	.type check_for_offset, @function
check_for_offset:
	push	r14
	push	rbx
	push	rax
	mov	rax, rdx
	mov	rbx, rsi
	mov	rcx, rdi
	xor	esi, esi
	mov	edx, 0xa
	mov	r8d, OFFSET FLAT:.str
	mov	rdi, rax
	call	xstrtoimax
	test	eax, eax
	jne	.label_103
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_103:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.52
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rdi, rbx
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	call	error
	nop	
	.section	.text
	.align	32
	#Procedure 0x403010

	.globl process_regexp
	.type process_regexp, @function
process_regexp:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r14, rsi
	mov	r12, rdi
	mov	bpl, byte ptr [r12 + 0x1d]
	test	bpl, bpl
	jne	.label_115
	call	create_output_file
.label_115:
	movzx	eax,  byte ptr [byte ptr [rip + suppress_matched]]
	and	eax, 1
	cmp	eax, 1
	jne	.label_109
	mov	rax,  qword ptr [word ptr [rip + current_line]]
	test	rax, rax
	je	.label_109
	call	remove_line
.label_109:
	cmp	qword ptr [r12], 0
	js	.label_113
	mov	rdi,  qword ptr [word ptr [rip + current_line]]
	inc	rdi
	mov	qword ptr [word ptr [rip + current_line]],  rdi
	call	find_line
	test	rax, rax
	je	.label_117
	lea	r15, [r12 + 0x20]
.label_121:
	mov	rdx, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	movzx	eax, byte ptr [rsi + rdx - 1]
	cmp	eax, 0xa
	jne	.label_120
	dec	rdx
.label_120:
	xor	ecx, ecx
	xor	r9d, r9d
	mov	rdi, r15
	mov	r8, rdx
	call	rpl_re_search
	cmp	rax, -1
	jne	.label_107
	call	remove_line
	test	bpl, bpl
	jne	.label_108
	mov	rdi, rax
	call	save_line_to_file
.label_108:
	mov	rdi,  qword ptr [word ptr [rip + current_line]]
	inc	rdi
	mov	qword ptr [word ptr [rip + current_line]],  rdi
	call	find_line
	test	rax, rax
	jne	.label_121
.label_117:
	cmp	byte ptr [r12 + 0x1c], 0
	je	.label_119
	test	bpl, bpl
	jne	.label_114
	call	dump_rest_of_file
	call	close_output_file
.label_114:
	xor	edi, edi
	call	exit
.label_113:
	lea	r15, [r12 + 0x20]
.label_110:
	mov	rdi,  qword ptr [word ptr [rip + current_line]]
	inc	rdi
	mov	qword ptr [word ptr [rip + current_line]],  rdi
	call	find_line
	test	rax, rax
	je	.label_105
	mov	rdx, qword ptr [rax]
	mov	rsi, qword ptr [rax + 8]
	movzx	eax, byte ptr [rsi + rdx - 1]
	cmp	eax, 0xa
	jne	.label_106
	dec	rdx
.label_106:
	xor	ecx, ecx
	xor	r9d, r9d
	mov	rdi, r15
	mov	r8, rdx
	call	rpl_re_search
	cmp	rax, -1
	je	.label_110
.label_107:
	cmp	rax, -2
	je	.label_111
	mov	rbx, qword ptr [r12]
	add	rbx,  qword ptr [word ptr [rip + current_line]]
	mov	edx, dword ptr [r12 + 0x18]
	movzx	esi, bpl
	mov	rdi, rbx
	call	write_to_file
	test	bpl, bpl
	jne	.label_116
	call	close_output_file
.label_116:
	cmp	qword ptr [r12], 0
	jle	.label_118
	mov	qword ptr [word ptr [rip + current_line]],  rbx
.label_118:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_111:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.55
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	call	cleanup_fatal
.label_105:
	cmp	byte ptr [r12 + 0x1c], 0
	jne	.label_104
.label_119:
	movzx	edx, bpl
	mov	rdi, r12
	mov	rsi, r14
	call	regexp_error
.label_104:
	test	bpl, bpl
	jne	.label_112
	call	dump_rest_of_file
	call	close_output_file
.label_112:
	xor	edi, edi
	call	exit
	.section	.text
	.align	32
	#Procedure 0x4031da
	.globl sub_4031da
	.type sub_4031da, @function
sub_4031da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4031e0

	.globl process_line_count
	.type process_line_count, @function
process_line_count:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rsi
	mov	r15, rdi
	mov	r12, qword ptr [r15 + 8]
	call	create_output_file
	call	no_more_lines
	test	al, al
	je	.label_124
	movzx	eax,  byte ptr [byte ptr [rip + suppress_matched]]
	and	eax, 1
	cmp	eax, 1
	je	.label_122
.label_124:
	lea	rax, [r14 + 1]
	imul	r12, rax
	call	get_first_line_in_buffer
	mov	rbx, rax
	jmp	.label_128
	.section	.text
	.align	32
	#Procedure 0x403221
	.globl sub_403221
	.type sub_403221, @function
sub_403221:

	nop	word ptr cs:[rax + rax]
.label_123:
	inc	rbx
	mov	rdi, rax
	call	save_line_to_file
.label_128:
	cmp	rbx, r12
	jae	.label_127
	call	remove_line
	test	rax, rax
	jne	.label_123
.label_122:
	mov	rdi, r15
	mov	rsi, r14
	call	handle_line_error
.label_127:
	call	close_output_file
	movzx	eax,  byte ptr [byte ptr [rip + suppress_matched]]
	and	eax, 1
	cmp	eax, 1
	jne	.label_126
	call	remove_line
.label_126:
	call	no_more_lines
	test	al, al
	je	.label_125
	mov	al,  byte ptr [byte ptr [rip + suppress_matched]]
	and	al, 1
	je	.label_122
.label_125:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40328d
	.globl sub_40328d
	.type sub_40328d, @function
sub_40328d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403290

	.globl create_output_file
	.type create_output_file, @function
create_output_file:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x88
	mov	edi,  dword ptr [dword ptr [rip + files_created]]
	call	make_filename
	mov	qword ptr [word ptr [rip + output_filename]],  rax
	mov	eax,  dword ptr [dword ptr [rip + files_created]]
	mov	ebp, 0x4b
	cmp	eax, -1
	je	.label_129
	lea	r14, [rsp + 8]
	xor	edi, edi
	mov	esi, OFFSET FLAT:caught_signals
	mov	rdx, r14
	call	sigprocmask
	mov	rdi,  qword ptr [word ptr [rip + output_filename]]
	mov	esi, OFFSET FLAT:.str.64
	call	fopen_safer
	mov	rbx, rax
	mov	qword ptr [word ptr [rip + output_stream]],  rbx
	test	rbx, rbx
	setne	r15b
	call	__errno_location
	mov	ebp, dword ptr [rax]
	movzx	eax, r15b
	add	dword ptr [dword ptr [rip + files_created]],  eax
	mov	edi, 2
	xor	edx, edx
	mov	rsi, r14
	call	sigprocmask
	test	rbx, rbx
	je	.label_129
	mov	qword ptr [word ptr [rip + bytes_written]],  0
	add	rsp, 0x88
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_129:
	mov	rdx,  qword ptr [word ptr [rip + output_filename]]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	mov	esi, ebp
	call	error
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x40335e
	.globl sub_40335e
	.type sub_40335e, @function
sub_40335e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403360

	.globl dump_rest_of_file
	.type dump_rest_of_file, @function
dump_rest_of_file:
	push	rax
	jmp	.label_130
	.section	.text
	.align	32
	#Procedure 0x403363
	.globl sub_403363
	.type sub_403363, @function
sub_403363:

	nop	word ptr cs:[rax + rax]
.label_131:
	mov	rdi, rax
	call	save_line_to_file
.label_130:
	call	remove_line
	test	rax, rax
	jne	.label_131
	pop	rax
	ret	
	.section	.text
	.align	32
	#Procedure 0x403384
	.globl sub_403384
	.type sub_403384, @function
sub_403384:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403390

	.globl remove_line
	.type remove_line, @function
remove_line:
	push	rbx
	mov	rdi,  qword ptr [word ptr [rip + remove_line.prev_buf]]
	test	rdi, rdi
	je	.label_133
	call	free_buffer
	mov	rdi,  qword ptr [word ptr [rip + remove_line.prev_buf]]
	call	free
	mov	qword ptr [word ptr [rip + remove_line.prev_buf]],  0
.label_133:
	cmp	qword ptr [word ptr [rip + head]],  0
	jne	.label_136
	xor	ebx, ebx
	call	load_buffer
	test	al, al
	je	.label_132
.label_136:
	mov	rax,  qword ptr [word ptr [rip + head]]
	mov	rax, qword ptr [rax + 0x18]
	cmp	qword ptr [word ptr [rip + current_line]],  rax
	jae	.label_135
	mov	qword ptr [word ptr [rip + current_line]],  rax
.label_135:
	mov	rax,  qword ptr [word ptr [rip + head]]
	inc	qword ptr [rax + 0x18]
	mov	rax, qword ptr [rax + 0x38]
	mov	rcx, qword ptr [rax + 0x10]
	mov	rdx, rcx
	shl	rdx, 4
	lea	rbx, [rax + rdx + 0x18]
	inc	rcx
	mov	qword ptr [rax + 0x10], rcx
	cmp	rcx, qword ptr [rax]
	jne	.label_132
	mov	rax, qword ptr [rax + 0x518]
	mov	rcx,  qword ptr [word ptr [rip + head]]
	mov	qword ptr [rcx + 0x38], rax
	test	rax, rax
	je	.label_134
	cmp	qword ptr [rax], 0
	jne	.label_132
.label_134:
	mov	rax,  qword ptr [word ptr [rip + head]]
	mov	qword ptr [word ptr [rip + remove_line.prev_buf]],  rax
	mov	rax, qword ptr [rax + 0x40]
	mov	qword ptr [word ptr [rip + head]],  rax
.label_132:
	mov	rax, rbx
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40344f
	.globl sub_40344f
	.type sub_40344f, @function
sub_40344f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403450

	.globl find_line
	.type find_line, @function
find_line:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rdi
	mov	r15,  qword ptr [word ptr [rip + head]]
	test	r15, r15
	jne	.label_142
	xor	r14d, r14d
	call	load_buffer
	test	al, al
	je	.label_140
	mov	r15,  qword ptr [word ptr [rip + head]]
.label_142:
	xor	r14d, r14d
	cmp	qword ptr [r15 + 0x10], rbx
	ja	.label_140
	test	r15, r15
	je	.label_138
	mov	rcx, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x20]
	add	rax, rcx
	cmp	rax, rbx
	jbe	.label_143
	mov	rax, r15
	jmp	.label_137
.label_143:
	xor	r14d, r14d
	nop	dword ptr [rax]
.label_144:
	mov	rax, qword ptr [r15 + 0x40]
	test	rax, rax
	jne	.label_139
	call	load_buffer
	test	al, al
	je	.label_140
	mov	rax, qword ptr [r15 + 0x40]
	test	rax, rax
	je	.label_138
.label_139:
	mov	rcx, qword ptr [rax + 0x10]
	mov	rdx, qword ptr [rax + 0x20]
	add	rdx, rcx
	cmp	rdx, rbx
	mov	r15, rax
	jbe	.label_144
.label_137:
	sub	rbx, rcx
	mov	rax, qword ptr [rax + 0x30]
	cmp	rbx, 0x50
	jb	.label_145
	nop	dword ptr [rax + rax]
.label_141:
	add	rbx, -0x50
	mov	rax, qword ptr [rax + 0x518]
	cmp	rbx, 0x4f
	ja	.label_141
.label_145:
	shl	rbx, 4
	lea	r14, [rax + rbx + 0x18]
.label_140:
	mov	rax, r14
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_138:
	mov	edi, OFFSET FLAT:.str.56
	mov	esi, OFFSET FLAT:.str.57
	mov	edx, 0x26a
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.find_line
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x40352c
	.globl sub_40352c
	.type sub_40352c, @function
sub_40352c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403530

	.globl regexp_error
	.type regexp_error, @function
regexp_error:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14d, edx
	mov	r15, rsi
	mov	rbp, rdi
	mov	r12,  qword ptr [word ptr [rip + stderr]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.58
	mov	edx, 5
	call	dcgettext
	mov	r13, rax
	mov	rbx,  qword ptr [word ptr [rip + program_name]]
	movsxd	rax, dword ptr [rbp + 0x18]
	mov	rcx,  qword ptr [word ptr [rip + global_argv]]
	mov	rdi, qword ptr [rcx + rax*8]
	call	quote
	mov	rbp, rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r12
	mov	rdx, r13
	mov	rcx, rbx
	mov	r8, rbp
	call	__fprintf_chk
	test	r15, r15
	jne	.label_148
	mov	rdi,  qword ptr [word ptr [rip + stderr]]
	mov	esi, 1
	mov	edx, OFFSET FLAT:.str.60
	xor	eax, eax
	call	__fprintf_chk
	jmp	.label_147
.label_148:
	mov	rbx,  qword ptr [word ptr [rip + stderr]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.59
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	lea	rsi, [rsp]
	mov	rdi, r15
	call	umaxtostr
	mov	rcx, rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	mov	rdx, rbp
	call	__fprintf_chk
.label_147:
	test	r14b, r14b
	jne	.label_146
	call	dump_rest_of_file
	call	close_output_file
.label_146:
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x403607
	.globl sub_403607
	.type sub_403607, @function
sub_403607:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403610

	.globl save_line_to_file
	.type save_line_to_file, @function
save_line_to_file:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	mov	rdx, qword ptr [rbx]
	mov	rdi, qword ptr [rbx + 8]
	mov	rcx,  qword ptr [word ptr [rip + output_stream]]
	mov	esi, 1
	call	fwrite_unlocked
	mov	rcx, qword ptr [rbx]
	cmp	rax, rcx
	jne	.label_149
	add	qword ptr [word ptr [rip + bytes_written]],  rcx
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_149:
	call	__errno_location
	mov	ebp, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.25
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rsi,  qword ptr [word ptr [rip + output_filename]]
	mov	edi, 4
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebp
	mov	rdx, rbx
	call	error
	mov	qword ptr [word ptr [rip + output_stream]],  0
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x403691
	.globl sub_403691
	.type sub_403691, @function
sub_403691:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4036a0

	.globl write_to_file
	.type write_to_file, @function
write_to_file:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14d, edx
	mov	r15d, esi
	mov	rbx, rdi
	call	get_first_line_in_buffer
	cmp	rax, rbx
	ja	.label_151
	xor	ebp, ebp
	cmp	rax, rbx
	je	.label_153
	sub	rbx, rax
	nop	word ptr cs:[rax + rax]
.label_152:
	call	remove_line
	test	rax, rax
	je	.label_151
	test	r15b, r15b
	jne	.label_150
	mov	rdi, rax
	call	save_line_to_file
.label_150:
	inc	rbp
	cmp	rbp, rbx
	jb	.label_152
.label_153:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_151:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.61
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	movsxd	rax, r14d
	mov	rcx,  qword ptr [word ptr [rip + global_argv]]
	mov	rdi, qword ptr [rcx + rax*8]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x403737
	.globl sub_403737
	.type sub_403737, @function
sub_403737:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403740

	.globl free_buffer
	.type free_buffer, @function
free_buffer:
	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	mov	rdi, qword ptr [r14 + 0x30]
	test	rdi, rdi
	je	.label_154
.label_155:
	mov	rbx, qword ptr [rdi + 0x518]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_155
.label_154:
	mov	qword ptr [r14 + 0x30], 0
	mov	rdi, qword ptr [r14 + 0x28]
	call	free
	mov	qword ptr [r14 + 0x28], 0
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x403785
	.globl sub_403785
	.type sub_403785, @function
sub_403785:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403790

	.globl load_buffer
	.type load_buffer, @function
load_buffer:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	al,  byte ptr [byte ptr [rip + have_read_eof]]
	and	al, 1
	jne	.label_159
	mov	rax,  qword ptr [word ptr [rip + hold_count]]
	cmp	rax, 0x1fff
	mov	ebx, 0x1fff
	cmova	rbx, rax
	movabs	r14, 0x7fffffffffffffff
	jmp	.label_157
	.section	.text
	.align	32
	#Procedure 0x4037c8
	.globl sub_4037c8
	.type sub_4037c8, @function
sub_4037c8:

	nop	dword ptr [rax + rax]
.label_161:
	add	rbx, rbx
	mov	rdi, r15
	call	free_buffer
	mov	rdi, r15
	call	free
.label_157:
	mov	rdi, rbx
	call	get_new_buffer
	mov	r15, rax
	mov	r12, qword ptr [r15]
	mov	rbx, qword ptr [r15 + 0x28]
	mov	rdx,  qword ptr [word ptr [rip + hold_count]]
	test	rdx, rdx
	je	.label_158
	mov	rsi,  qword ptr [word ptr [rip + hold_area]]
	mov	rdi, rbx
	call	memcpy
	mov	rax,  qword ptr [word ptr [rip + hold_count]]
	add	rbx, rax
	add	qword ptr [r15 + 8], rax
	sub	r12, rax
	mov	qword ptr [word ptr [rip + hold_count]],  0
.label_158:
	mov	rdi, rbx
	mov	rsi, r12
	call	read_input
	add	qword ptr [r15 + 8], rax
	mov	rdi, r15
	call	record_line_starts
	test	rax, rax
	jne	.label_156
	mov	al,  byte ptr [byte ptr [rip + have_read_eof]]
	and	al, 1
	jne	.label_160
	mov	rbx, qword ptr [r15]
	xor	edx, edx
	mov	rax, r14
	div	rbx
	cmp	rax, 1
	ja	.label_161
	call	xalloc_die
.label_156:
	mov	rdi, r15
	call	save_buffer
	mov	al, 1
	jmp	.label_162
.label_160:
	mov	rdi, r15
	call	free_buffer
	mov	rdi, r15
	call	free
.label_159:
	xor	eax, eax
.label_162:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x403896
	.globl sub_403896
	.type sub_403896, @function
sub_403896:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4038a0

	.globl get_new_buffer
	.type get_new_buffer, @function
get_new_buffer:
	mov	eax, 0x1fff
	cmp	rdi, 0x2000
	jb	.label_163
	add	rdi, -0x1800
	and	rdi, 0xfffffffffffff800
	add	rdi, 0x1fff
	mov	rax, rdi
.label_163:
	push	rax
	mov	rdi, rax
	call	create_new_buffer
	mov	qword ptr [rax + 0x20], 0
	mov	qword ptr [rax + 8], 0
	mov	rcx,  qword ptr [word ptr [rip + last_line_number]]
	inc	rcx
	mov	qword ptr [rax + 0x18], rcx
	mov	qword ptr [rax + 0x10], rcx
	mov	qword ptr [rax + 0x40], 0
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x4038fb
	.globl sub_4038fb
	.type sub_4038fb, @function
sub_4038fb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403900

	.globl read_input
	.type read_input, @function
read_input:
	push	rbx
	mov	rcx, rsi
	mov	rdx, rdi
	xor	eax, eax
	test	rcx, rcx
	je	.label_164
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	call	safe_read
	test	rax, rax
	je	.label_165
	cmp	rax, -1
	jne	.label_164
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.14
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
	call	cleanup_fatal
.label_165:
	mov	byte ptr [byte ptr [rip + have_read_eof]],  1
	xor	eax, eax
.label_164:
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40395f
	.globl sub_40395f
	.type sub_40395f, @function
sub_40395f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403960

	.globl record_line_starts
	.type record_line_starts, @function
record_line_starts:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	rbp, rdi
	mov	r12, qword ptr [rbp + 8]
	xor	r15d, r15d
	test	r12, r12
	je	.label_166
	mov	rbx, qword ptr [rbp + 0x28]
	mov	esi, 0xa
	mov	rdi, rbx
	mov	rdx, r12
	call	memchr
	mov	r13, rax
	xor	r15d, r15d
	test	r13, r13
	je	.label_168
	mov	qword ptr [rsp], rbp
	nop	word ptr cs:[rax + rax]
.label_170:
	mov	r14, r12
	mov	rbp, r13
	sub	rbp, rbx
	inc	rbp
	mov	rdi, qword ptr [rsp]
	mov	rsi, rbx
	mov	rdx, rbp
	call	keep_new_line
	sub	r12, rbp
	mov	rbx, r13
	inc	rbx
	inc	r15
	mov	esi, 0xa
	mov	rdi, rbx
	mov	rdx, r12
	call	memchr
	mov	r13, rax
	test	r13, r13
	jne	.label_170
	cmp	r14, rbp
	mov	rbp, qword ptr [rsp]
	je	.label_167
.label_168:
	movzx	eax,  byte ptr [byte ptr [rip + have_read_eof]]
	and	eax, 1
	cmp	eax, 1
	jne	.label_169
	mov	rdi, rbp
	mov	rsi, rbx
	mov	rdx, r12
	call	keep_new_line
	inc	r15
	jmp	.label_167
.label_169:
	mov	rdi, rbx
	mov	rsi, r12
	call	xmemdup
	mov	rdi, rax
	mov	rsi, r12
	call	save_to_hold_area
.label_167:
	mov	qword ptr [rbp + 0x20], r15
	mov	rax,  qword ptr [word ptr [rip + last_line_number]]
	lea	rcx, [rax + 1]
	mov	qword ptr [rbp + 0x10], rcx
	mov	qword ptr [rbp + 0x18], rcx
	add	rax, r15
	mov	qword ptr [word ptr [rip + last_line_number]],  rax
.label_166:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403a63
	.globl sub_403a63
	.type sub_403a63, @function
sub_403a63:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403a70

	.globl save_buffer
	.type save_buffer, @function
save_buffer:
	mov	qword ptr [rdi + 0x40], 0
	mov	rax, qword ptr [rdi + 0x30]
	mov	qword ptr [rdi + 0x38], rax
	mov	rax,  qword ptr [word ptr [rip + head]]
	test	rax, rax
	je	.label_171
	nop	dword ptr [rax]
.label_172:
	mov	rcx, rax
	mov	rax, qword ptr [rcx + 0x40]
	test	rax, rax
	jne	.label_172
	mov	qword ptr [rcx + 0x40], rdi
	ret	
.label_171:
	mov	qword ptr [word ptr [rip + head]],  rdi
	ret	
	.section	.text
	.align	32
	#Procedure 0x403aa9
	.globl sub_403aa9
	.type sub_403aa9, @function
sub_403aa9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403ab0

	.globl create_new_buffer
	.type create_new_buffer, @function
create_new_buffer:
	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	mov	edi, 0x48
	call	xmalloc
	mov	rbx, rax
	lea	rdi, [r14 + 1]
	call	xmalloc
	mov	qword ptr [rbx + 0x28], rax
	mov	qword ptr [rbx], r14
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x30], xmm0
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x403ae6
	.globl sub_403ae6
	.type sub_403ae6, @function
sub_403ae6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403af0

	.globl keep_new_line
	.type keep_new_line, @function
keep_new_line:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdx
	mov	r15, rsi
	mov	rbx, rdi
	cmp	qword ptr [rbx + 0x30], 0
	jne	.label_173
	call	new_line_control
	mov	qword ptr [rbx + 0x38], rax
	mov	qword ptr [rbx + 0x30], rax
.label_173:
	mov	rax, qword ptr [rbx + 0x38]
	cmp	qword ptr [rax], 0x50
	jne	.label_174
	call	new_line_control
	mov	rcx, qword ptr [rbx + 0x38]
	mov	qword ptr [rcx + 0x518], rax
	mov	rax, qword ptr [rbx + 0x38]
	mov	rax, qword ptr [rax + 0x518]
	mov	qword ptr [rbx + 0x38], rax
.label_174:
	mov	rax, qword ptr [rbx + 0x38]
	mov	rcx, qword ptr [rax + 8]
	shl	rcx, 4
	mov	qword ptr [rax + rcx + 0x20], r15
	mov	qword ptr [rax + rcx + 0x18], r14
	inc	qword ptr [rax]
	inc	qword ptr [rax + 8]
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x403b5e
	.globl sub_403b5e
	.type sub_403b5e, @function
sub_403b5e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403b60

	.globl save_to_hold_area
	.type save_to_hold_area, @function
save_to_hold_area:
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	rdi,  qword ptr [word ptr [rip + hold_area]]
	call	free
	mov	qword ptr [word ptr [rip + hold_area]],  rbx
	mov	qword ptr [word ptr [rip + hold_count]],  r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x403b8c
	.globl sub_403b8c
	.type sub_403b8c, @function
sub_403b8c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403b90

	.globl new_line_control
	.type new_line_control, @function
new_line_control:
	push	rbx
	mov	edi, 0x520
	call	xmalloc
	mov	rbx, rax
	mov	qword ptr [rbx + 0x518], 0
	mov	rdi, rbx
	call	clear_line_control
	mov	rax, rbx
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x403bb6
	.globl sub_403bb6
	.type sub_403bb6, @function
sub_403bb6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403bc0

	.globl clear_line_control
	.type clear_line_control, @function
clear_line_control:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi], xmm0
	mov	qword ptr [rdi + 0x10], 0
	ret	
	.section	.text
	.align	32
	#Procedure 0x403bcf
	.globl sub_403bcf
	.type sub_403bcf, @function
sub_403bcf:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403bd0

	.globl get_first_line_in_buffer
	.type get_first_line_in_buffer, @function
get_first_line_in_buffer:
	push	rbx
	cmp	qword ptr [word ptr [rip + head]],  0
	jne	.label_175
	call	load_buffer
	test	al, al
	je	.label_176
.label_175:
	mov	rax,  qword ptr [word ptr [rip + head]]
	mov	rax, qword ptr [rax + 0x18]
	pop	rbx
	ret	
.label_176:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.62
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x403c20

	.globl no_more_lines
	.type no_more_lines, @function
no_more_lines:
	push	rax
	mov	rdi,  qword ptr [word ptr [rip + current_line]]
	inc	rdi
	call	find_line
	test	rax, rax
	sete	al
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x403c38
	.globl sub_403c38
	.type sub_403c38, @function
sub_403c38:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403c40

	.globl handle_line_error
	.type handle_line_error, @function
handle_line_error:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x20
	mov	r14, rsi
	mov	rbx, rdi
	mov	r15,  qword ptr [word ptr [rip + stderr]]
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.63
	mov	edx, 5
	call	dcgettext
	mov	r12, rax
	mov	r13,  qword ptr [word ptr [rip + program_name]]
	mov	rdi, qword ptr [rbx + 8]
	lea	rsi, [rsp]
	call	umaxtostr
	mov	rdi, rax
	call	quote
	mov	rbx, rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r15
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, rbx
	call	__fprintf_chk
	test	r14, r14
	mov	rbx,  qword ptr [word ptr [rip + stderr]]
	jne	.label_177
	mov	esi, 1
	mov	edx, OFFSET FLAT:.str.60
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	call	cleanup_fatal
.label_177:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.59
	mov	edx, 5
	call	dcgettext
	mov	r15, rax
	lea	rsi, [rsp]
	mov	rdi, r14
	call	umaxtostr
	mov	rcx, rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	mov	rdx, r15
	call	__fprintf_chk
	call	cleanup_fatal
	.section	.text
	.align	32
	#Procedure 0x403d04
	.globl sub_403d04
	.type sub_403d04, @function
sub_403d04:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x403d10
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [word ptr [rip + file_name]],  rdi
	ret	
	.section	.text
	.align	32
	#Procedure 0x403d18
	.globl sub_403d18
	.type sub_403d18, @function
sub_403d18:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403d20
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [byte ptr [rip + ignore_EPIPE]],  dil
	ret	
	.section	.text
	.align	32
	#Procedure 0x403d28
	.globl sub_403d28
	.type sub_403d28, @function
sub_403d28:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403d30

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	r14
	push	rbx
	mov	rdi,  qword ptr [word ptr [rip + stdout]]
	call	close_stream
	test	eax, eax
	je	.label_178
	cmp	byte ptr [byte ptr [rip + ignore_EPIPE]],  0
	je	.label_180
	call	__errno_location
	cmp	dword ptr [rax], 0x20
	jne	.label_180
.label_178:
	mov	rdi,  qword ptr [word ptr [rip + stderr]]
	call	close_stream
	test	eax, eax
	jne	.label_179
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_180:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str_0
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rbx,  qword ptr [word ptr [rip + file_name]]
	call	__errno_location
	test	rbx, rbx
	mov	ebp, dword ptr [rax]
	jne	.label_181
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str.2
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, r14
	call	error
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
.label_179:
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
.label_181:
	mov	rdi, rbx
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:.str_1
	xor	eax, eax
	mov	esi, ebp
	mov	r8, r14
	call	error
	mov	edi,  dword ptr [dword ptr [rip + exit_failure]]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403df0

	.globl fd_reopen
	.type fd_reopen, @function
fd_reopen:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebp, edi
	xor	eax, eax
	mov	rdi, rsi
	mov	esi, edx
	mov	edx, ecx
	call	open
	mov	ebx, eax
	cmp	ebx, ebp
	je	.label_183
	test	ebx, ebx
	js	.label_183
	mov	edi, ebx
	mov	esi, ebp
	call	dup2
	mov	r14d, eax
	call	__errno_location
	mov	rbp, rax
	mov	r15d, dword ptr [rbp]
	mov	edi, ebx
	call	close
	mov	dword ptr [rbp], r15d
	mov	eax, r14d
	jmp	.label_182
.label_183:
	mov	eax, ebx
.label_182:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403e46
	.globl sub_403e46
	.type sub_403e46, @function
sub_403e46:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403e50

	.globl fopen_safer
	.type fopen_safer, @function
fopen_safer:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rsi
	call	fopen
	mov	rbx, rax
	xor	eax, eax
	test	rbx, rbx
	je	.label_187
	mov	rdi, rbx
	call	fileno
	cmp	eax, 2
	ja	.label_186
	mov	edi, eax
	call	dup_safer
	mov	ebp, eax
	test	ebp, ebp
	js	.label_188
	mov	rdi, rbx
	call	rpl_fclose
	test	eax, eax
	jne	.label_184
	mov	edi, ebp
	mov	rsi, r14
	call	fdopen
	test	rax, rax
	jne	.label_187
.label_184:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	jmp	.label_185
.label_186:
	mov	rax, rbx
	jmp	.label_187
.label_188:
	call	__errno_location
	mov	rbp, rax
	mov	r14d, dword ptr [rbp]
	mov	rdi, rbx
	call	rpl_fclose
	mov	dword ptr [rbp], r14d
.label_185:
	xor	eax, eax
.label_187:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403ed6
	.globl sub_403ed6
	.type sub_403ed6, @function
sub_403ed6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403ee0

	.globl umaxtostr
	.type umaxtostr, @function
umaxtostr:
	mov	rcx, rdi
	mov	byte ptr [rsi + 0x14], 0
	add	rsi, 0x14
	movabs	r8, 0xcccccccccccccccd
	nop	word ptr cs:[rax + rax]
.label_189:
	mov	rax, rcx
	mul	r8
	shr	rdx, 3
	lea	eax, [rdx + rdx]
	lea	eax, [rax + rax*4]
	mov	edi, ecx
	sub	edi, eax
	or	edi, 0x30
	mov	byte ptr [rsi - 1], dil
	dec	rsi
	cmp	rcx, 9
	mov	rcx, rdx
	ja	.label_189
	mov	rax, rsi
	ret	
	.section	.text
	.align	32
	#Procedure 0x403f2b
	.globl sub_403f2b
	.type sub_403f2b, @function
sub_403f2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403f30

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_191
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_190
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:.str.1_0
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_190
	mov	esi, OFFSET FLAT:.str.2_0
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_192
	add	r14, 3
	mov	qword ptr [word ptr [rip + program_invocation_short_name]],  r14
.label_192:
	mov	rbx, r14
.label_190:
	mov	qword ptr [word ptr [rip + program_name]],  rbx
	mov	qword ptr [word ptr [rip + __progname_full]],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_191:
	mov	rcx,  qword ptr [word ptr [rip + stderr]]
	mov	edi, OFFSET FLAT:.str_2
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	32
	#Procedure 0x403fd1
	.globl sub_403fd1
	.type sub_403fd1, @function
sub_403fd1:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403fe0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404013
	.globl sub_404013
	.type sub_404013, @function
sub_404013:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404020
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40402f
	.globl sub_40402f
	.type sub_40402f, @function
sub_40402f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404030
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x40403f
	.globl sub_40403f
	.type sub_40403f, @function
sub_40403f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404040

	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:
	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	al, cl
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x404076
	.globl sub_404076
	.type sub_404076, @function
sub_404076:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404080
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x404093
	.globl sub_404093
	.type sub_404093, @function
sub_404093:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4040a0

	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:
	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_193
	test	rdx, rdx
	je	.label_193
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_193:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4040cb
	.globl sub_4040cb
	.type sub_4040cb, @function
sub_4040cb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4040d0
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 0x20], rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	r8d, dword ptr [rbp]
	mov	r9d, dword ptr [rbp + 4]
	mov	rax, qword ptr [rbp + 0x28]
	mov	rcx, qword ptr [rbp + 0x30]
	lea	rdx, [rbp + 8]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], rdx
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, qword ptr [rsp + 0x20]
	call	quotearg_buffer_restyled
	mov	dword ptr [rbx], r14d
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40414a
	.globl sub_40414a
	.type sub_40414a, @function
sub_40414a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404150

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x108
	mov	ebx, r9d
	mov	dword ptr [rsp + 0x6c], ebx
	mov	r13d, r8d
	mov	qword ptr [rsp + 0xc0], rcx
	mov	r12, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 0xe0], rdi
	mov	rax, qword ptr [rsp + 0x150]
	mov	qword ptr [rsp + 0x88], rax
	mov	rax, qword ptr [rsp + 0x148]
	mov	qword ptr [rsp + 0x90], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0x60], rax
	mov	r15b, bl
	shr	r15b, 1
	and	r15b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x5c], eax
	and	ebx, 4
	mov	dword ptr [rsp + 0x58], ebx
	mov	r8b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x80], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0xd0], rax
	mov	eax, 0
	xor	r11d, r11d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0x70], rcx
.label_294:
	mov	r10, rbp
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	mov	ecx, r13d
	cmp	r13d, 0xa
	ja	.label_279
	mov	r14d, 7
	mov	sil, 1
	xor	edi, edi
	mov	r9, r12
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_202]]
.label_2006:
	mov	r12d, r11d
	mov	edi, OFFSET FLAT:.str.11_0
	mov	esi, r13d
	mov	r14, r10
	mov	bl, r8b
	mov	rbp, r9
	call	gettext_quote
	mov	qword ptr [rsp + 0x90], rax
	mov	edi, OFFSET FLAT:.str.12_0
	mov	esi, r13d
	call	gettext_quote
	mov	r11d, r12d
	mov	r9, rbp
	mov	r8b, bl
	mov	r10, r14
	mov	qword ptr [rsp + 0x88], rax
.label_2007:
	mov	dword ptr [rsp + 0xb8], r11d
	mov	rbp, r9
	mov	byte ptr [rsp + 0x69], r8b
	test	r15b, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0xf0], rax
	mov	rdx, qword ptr [rsp + 0x90]
	jne	.label_234
	mov	al, byte ptr [rdx]
	test	al, al
	mov	ecx, 0
	mov	qword ptr [rsp + 0xf0], rcx
	je	.label_234
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	nop	
.label_260:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_249
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rcx + rsi], al
.label_249:
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	al, byte ptr [rdx + rcx + 1]
	inc	rcx
	mov	qword ptr [rsp + 0xf0], rcx
	test	al, al
	jne	.label_260
.label_234:
	mov	rbx, qword ptr [rsp + 0x88]
	mov	rdi, rbx
	mov	r12, r10
	call	strlen
	mov	r10, r12
	mov	qword ptr [rsp + 0xd0], rax
	mov	r14d, r13d
	mov	qword ptr [rsp + 0xa8], rbx
	mov	sil, 1
	mov	dil, r15b
	mov	r8b, byte ptr [rsp + 0x69]
	mov	r9, rbp
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r11d, dword ptr [rsp + 0xb8]
	jmp	.label_194
.label_1999:
	xor	r14d, r14d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xf0], rcx
	mov	sil, al
	xor	edi, edi
	jmp	.label_194
.label_2002:
	mov	al, 1
.label_2000:
	mov	r15b, 1
.label_2003:
	test	r15b, 1
	mov	cl, 1
	je	.label_219
	mov	cl, al
.label_219:
	mov	al, cl
.label_2001:
	mov	r14d, 2
	test	r15b, 1
	jne	.label_287
	test	r10, r10
	je	.label_256
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx], 0x27
	mov	ecx, 1
	jmp	.label_291
.label_287:
	xor	ecx, ecx
	jmp	.label_291
.label_2004:
	mov	r14d, 5
	test	r15b, 1
	jne	.label_295
	test	r10, r10
	je	.label_307
	mov	rax, qword ptr [rsp + 0xe0]
	mov	byte ptr [rax], 0x22
	mov	eax, 1
	jmp	.label_211
.label_2005:
	mov	sil, 1
	mov	r14d, 5
	xor	eax, eax
	mov	qword ptr [rsp + 0xf0], rax
	mov	eax, OFFSET FLAT:.str.10_0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0xd0], rax
	mov	dil, 1
	jmp	.label_194
.label_256:
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_291:
	mov	qword ptr [rsp + 0xf0], rcx
	mov	ecx, OFFSET FLAT:.str.12_0
	mov	qword ptr [rsp + 0xa8], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0xd0], rcx
	mov	sil, al
	mov	dil, r15b
	jmp	.label_194
.label_295:
	xor	eax, eax
	jmp	.label_211
.label_307:
	mov	eax, 1
.label_211:
	mov	qword ptr [rsp + 0xf0], rax
	mov	eax, OFFSET FLAT:.str.10_0
	mov	qword ptr [rsp + 0xa8], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0xd0], rax
	mov	sil, 1
	mov	dil, r15b
	nop	dword ptr [rax + rax]
.label_194:
	mov	qword ptr [rsp + 0x98], rdi
	mov	byte ptr [rsp + 0xa6], sil
	cmp	qword ptr [rsp + 0x140], 0
	setne	bl
	cmp	r14d, 2
	setne	r15b
	sete	dl
	mov	cl, sil
	and	cl, 1
	mov	byte ptr [rsp + 0xa5], cl
	sete	byte ptr [rsp + 0x6b]
	mov	r12b, r15b
	and	r12b, cl
	mov	byte ptr [rsp + 0xbf], r12b
	cmp	qword ptr [rsp + 0xd0], 0
	setne	r13b
	mov	al, r13b
	and	al, r12b
	mov	byte ptr [rsp + 0xdf], al
	mov	al, dil
	and	al, 1
	mov	byte ptr [rsp + 0xcf], al
	sete	cl
	and	dl, al
	mov	byte ptr [rsp + 0x7f], dl
	and	bl, al
	mov	byte ptr [rsp + 0xb7], bl
	or	cl, r15b
	mov	byte ptr [rsp + 0xa7], cl
	and	sil, dil
	and	sil, r13b
	mov	byte ptr [rsp + 0x6a], sil
	xor	esi, esi
	jmp	.label_227
	.section	.text
	.align	32
	#Procedure 0x4044f8
	.globl sub_4044f8
	.type sub_4044f8, @function
sub_4044f8:

	nop	dword ptr [rax + rax]
.label_301:
	inc	qword ptr [rsp + 0xf0]
	shl	r15b, 7
	sar	r15b, 7
	and	r15b, r8b
	mov	r8b, r15b
	inc	rsi
.label_227:
	cmp	rbp, -1
	je	.label_271
	cmp	rsi, rbp
	jne	.label_274
	jmp	.label_229
	.section	.text
	.align	32
	#Procedure 0x404529
	.globl sub_404529
	.type sub_404529, @function
sub_404529:

	nop	dword ptr [rax]
.label_271:
	cmp	byte ptr [r9 + rsi], 0
	je	.label_229
.label_274:
	cmp	byte ptr [rsp + 0xdf], 0
	je	.label_278
	mov	rax, qword ptr [rsp + 0xd0]
	lea	rbx, [rsi + rax]
	cmp	rax, 2
	jb	.label_198
	cmp	rbp, -1
	jne	.label_198
	mov	dword ptr [rsp + 0xb8], r11d
	mov	rdi, r9
	mov	rbp, r10
	mov	r15b, r8b
	mov	r13, r14
	mov	r12, r9
	mov	r14, rsi
	call	strlen
	mov	rsi, r14
	mov	r11d, dword ptr [rsp + 0xb8]
	mov	r9, r12
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	r14, r13
	mov	r8b, r15b
	mov	r10, rbp
	mov	rbp, rax
.label_198:
	cmp	rbx, rbp
	jbe	.label_300
.label_278:
	mov	rdi, r14
	mov	dword ptr [rsp + 0xec], 0
.label_213:
	movzx	r13d, byte ptr [r9 + rsi]
	cmp	r13, 0x7e
	ja	.label_299
	xor	edx, edx
	mov	r15b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [word ptr [+ (r13 * 8) + label_238]]
.label_1831:
	test	rsi, rsi
	jne	.label_223
	jmp	.label_305
	.section	.text
	.align	32
	#Procedure 0x4045e1
	.globl sub_4045e1
	.type sub_4045e1, @function
sub_4045e1:

	nop	word ptr cs:[rax + rax]
.label_300:
	mov	qword ptr [rsp + 0xc0], rbp
	mov	r12d, r11d
	mov	r13, r14
	mov	r15b, r8b
	mov	rbx, r10
	lea	rdi, [r9 + rsi]
	mov	r14, rsi
	mov	rbp, r9
	mov	rsi, qword ptr [rsp + 0xa8]
	mov	rdx, qword ptr [rsp + 0xd0]
	call	memcmp
	test	eax, eax
	sete	al
	mov	dword ptr [rsp + 0xec], eax
	jne	.label_208
	cmp	byte ptr [rsp + 0xcf], 0
	mov	r10, rbx
	mov	r8b, r15b
	mov	rdi, r13
	mov	r9, rbp
	mov	r11d, r12d
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	rsi, r14
	je	.label_213
	jmp	.label_228
.label_208:
	mov	r10, rbx
	mov	r8b, r15b
	mov	rdi, r13
	mov	r9, rbp
	mov	r11d, r12d
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r12b, byte ptr [rsp + 0xbf]
	mov	rsi, r14
	jmp	.label_213
.label_1835:
	xor	eax, eax
	cmp	rbp, -1
	je	.label_242
	test	rsi, rsi
	jne	.label_247
	cmp	rbp, 1
	je	.label_305
	xor	r15d, r15d
	jmp	.label_246
.label_1824:
	cmp	byte ptr [rsp + 0xa5], 0
	je	.label_214
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_228
	cmp	edi, 2
	jne	.label_255
	mov	al, r11b
	and	al, 1
	jne	.label_259
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_262
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_262:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_199
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x24
.label_199:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_273
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_273:
	mov	rax, qword ptr [rsp + 0xf0]
	add	rax, 3
	mov	r11b, 1
	mov	rcx, rax
	jmp	.label_285
.label_1825:
	mov	bl, 0x62
	jmp	.label_281
.label_1826:
	mov	cl, 0x74
	jmp	.label_284
.label_1827:
	mov	bl, 0x76
	jmp	.label_281
.label_1828:
	mov	bl, 0x66
	jmp	.label_281
.label_1829:
	mov	cl, 0x72
	jmp	.label_284
.label_1832:
	mov	al, 1
	mov	qword ptr [rsp + 0x70], rax
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_289
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_220
	test	r10, r10
	sete	al
	mov	rcx, qword ptr [rsp + 0x80]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, r10
	mov	qword ptr [rsp + 0x80], rdx
	mov	eax, 0
	cmove	r10, rax
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_297
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_297:
	mov	rdi, r14
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_310
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x5c
.label_310:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_196
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_196:
	add	qword ptr [rsp + 0xf0], 3
	xor	r11d, r11d
	jmp	.label_206
.label_1833:
	mov	r14, rdi
	cmp	r14d, 5
	je	.label_212
	cmp	r14d, 2
	jne	.label_217
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_220
.label_217:
	mov	rdi, r14
	jmp	.label_223
.label_1834:
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_226
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_220
	mov	rdi, r14
	jmp	.label_231
.label_299:
	mov	dword ptr [rsp + 0xb8], r11d
	mov	qword ptr [rsp + 0x38], rdi
	mov	byte ptr [rsp + 0x69], r8b
	mov	qword ptr [rsp + 0x40], r10
	cmp	qword ptr [rsp + 0x60], 1
	jne	.label_235
	mov	r14, r9
	mov	rbx, rsi
	call	__ctype_b_loc
	mov	rsi, rbx
	mov	r9, r14
	mov	rax, qword ptr [rax]
	movzx	r15d, word ptr [rax + r13*2]
	shr	r15d, 0xe
	and	r15b, 1
	mov	ebx, 1
.label_261:
	and	r15b, 1
	mov	dl, r15b
	or	dl, byte ptr [rsp + 0x6b]
	mov	byte ptr [rsp + 0xc0], dl
	cmp	rbx, 1
	mov	rcx, rbx
	mov	r10, qword ptr [rsp + 0x40]
	mov	r8b, byte ptr [rsp + 0x69]
	mov	r14, qword ptr [rsp + 0x38]
	mov	r11d, dword ptr [rsp + 0xb8]
	ja	.label_251
	test	dl, dl
	je	.label_251
	mov	rdi, r14
	xor	eax, eax
	jmp	.label_246
.label_242:
	test	rsi, rsi
	jne	.label_269
	mov	cl, byte ptr [r9 + 1]
	test	cl, cl
	jne	.label_269
.label_305:
	mov	dl, 1
.label_1830:
	cmp	byte ptr [rsp + 0xa7], 0
	je	.label_228
	xor	eax, eax
	mov	r15b, dl
	jmp	.label_246
.label_214:
	cmp	dword ptr [rsp + 0x5c], 0
	je	.label_223
	mov	r14, rdi
	inc	rsi
	jmp	.label_227
.label_289:
	mov	rdi, r14
.label_206:
	xor	eax, eax
	mov	r15b, 1
	jmp	.label_246
.label_226:
	mov	rdi, r14
	cmp	byte ptr [rsp + 0x6a], 0
	mov	cl, r13b
	je	.label_284
.label_231:
	xor	eax, eax
	xor	r15d, r15d
	jmp	.label_215
.label_284:
	cmp	byte ptr [rsp + 0xa7], 0
	mov	bl, cl
	je	.label_228
.label_281:
	xor	eax, eax
	cmp	byte ptr [rsp + 0xa5], 0
	mov	r15d, 0
	je	.label_246
	jmp	.label_224
.label_235:
	mov	qword ptr [rsp + 0x100], 0
	cmp	rbp, -1
	jne	.label_302
	mov	rdi, r9
	mov	rbx, r9
	mov	rbp, rsi
	call	strlen
	mov	rsi, rbp
	mov	r9, rbx
	mov	rbp, rax
.label_302:
	mov	qword ptr [rsp + 0xc0], rbp
	lea	rax, [r9 + rsi]
	mov	qword ptr [rsp + 0x20], rax
	mov	r15b, 1
	xor	ebx, ebx
	lea	r14, [rsp + 0x100]
.label_253:
	lea	rax, [rbx + rsi]
	mov	qword ptr [rsp + 0x28], rax
	mov	qword ptr [rsp + 0x30], rsi
	lea	rsi, [r9 + rax]
	mov	qword ptr [rsp + 0x48], r9
	mov	rdx, rbp
	sub	rdx, rax
	lea	rdi, [rsp + 0xfc]
	mov	rcx, r14
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_201
	mov	qword ptr [rsp + 0x50], rbx
	cmp	rbp, -1
	mov	r10, qword ptr [rsp + 0x40]
	movabs	rsi, 0x20000002b
	mov	r14, qword ptr [rsp + 0x38]
	mov	r8b, byte ptr [rsp + 0xa6]
	je	.label_207
	cmp	rbp, -2
	je	.label_222
	cmp	rbp, 1
	seta	al
	and	al, byte ptr [rsp + 0x7f]
	movzx	eax, al
	cmp	eax, 1
	jne	.label_225
	mov	rax, qword ptr [rsp + 0x50]
	mov	rcx, qword ptr [rsp + 0x20]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_292:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_237
	bt	rsi, rdx
	jb	.label_241
.label_237:
	inc	rcx
	cmp	rcx, rbp
	jb	.label_292
.label_225:
	mov	edi, dword ptr [rsp + 0xfc]
	call	iswprint
	test	eax, eax
	jne	.label_314
	xor	r15d, r15d
.label_314:
	lea	rdi, [rsp + 0x100]
	mov	rbx, qword ptr [rsp + 0x50]
	add	rbx, rbp
	mov	r14, rdi
	call	mbsinit
	test	eax, eax
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	rsi, qword ptr [rsp + 0x30]
	je	.label_253
	jmp	.label_261
.label_269:
	mov	rbp, -1
	xor	r15d, r15d
	jmp	.label_246
.label_212:
	mov	rdi, r14
	cmp	dword ptr [rsp + 0x58], 0
	je	.label_223
	lea	rcx, [rsi + 2]
	cmp	rcx, rbp
	jae	.label_223
	movzx	eax, byte ptr [rsi + r9 + 1]
	cmp	eax, 0x3f
	jne	.label_223
	movsx	edx, byte ptr [r9 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_275
	mov	rbx, rsi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_277
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_228
	mov	r13b, byte ptr [r9 + rcx]
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_282
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x3f
.label_282:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_230
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x22
.label_230:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_296
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x22
.label_296:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 3]
	cmp	rax, r10
	jae	.label_210
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x3f
.label_210:
	add	qword ptr [rsp + 0xf0], 4
	xor	eax, eax
	mov	rsi, rcx
	xor	r15d, r15d
	jmp	.label_246
.label_223:
	xor	eax, eax
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_246:
	test	r12b, r12b
	je	.label_239
	cmp	qword ptr [rsp + 0x140], 0
	jne	.label_313
	jmp	.label_195
	.section	.text
	.align	32
	#Procedure 0x404c02
	.globl sub_404c02
	.type sub_404c02, @function
sub_404c02:

	nop	word ptr cs:[rax + rax]
.label_239:
	cmp	byte ptr [rsp + 0xb7], 0
	je	.label_195
.label_313:
	mov	r14, rsi
	mov	cl, r13b
	shr	cl, 5
	movzx	edx, cl
	mov	esi, 1
	mov	cl, r13b
	shl	esi, cl
	mov	ecx, dword ptr [rsp + 0xec]
	test	cl, cl
	jne	.label_203
	mov	rcx, qword ptr [rsp + 0x140]
	and	esi, dword ptr [rcx + rdx*4]
	mov	bl, r13b
	mov	rsi, r14
	je	.label_215
	jmp	.label_224
	.section	.text
	.align	32
	#Procedure 0x404c54
	.globl sub_404c54
	.type sub_404c54, @function
sub_404c54:

	nop	word ptr cs:[rax + rax]
.label_195:
	mov	ecx, dword ptr [rsp + 0xec]
	test	cl, cl
	mov	bl, r13b
	jne	.label_224
	jmp	.label_215
.label_203:
	mov	bl, r13b
	mov	rsi, r14
.label_224:
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_228
	mov	r14, rdi
	cmp	r14d, 2
	jne	.label_240
	mov	al, r11b
	and	al, 1
	jne	.label_240
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_245
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_245:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_218
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x24
.label_218:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_263
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_263:
	add	qword ptr [rsp + 0xf0], 3
	mov	r11b, 1
.label_240:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_266
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x5c
.label_266:
	inc	qword ptr [rsp + 0xf0]
	jmp	.label_270
.label_247:
	xor	r15d, r15d
	jmp	.label_246
.label_251:
	add	rcx, rsi
	xor	eax, eax
	jmp	.label_276
	.section	.text
	.align	32
	#Procedure 0x404d34
	.globl sub_404d34
	.type sub_404d34, @function
sub_404d34:

	nop	word ptr cs:[rax + rax]
.label_205:
	inc	qword ptr [rsp + 0xf0]
	mov	r13b, byte ptr [r9 + rsi + 1]
	mov	rsi, rdx
	mov	dl, byte ptr [rsp + 0xc0]
.label_276:
	test	dl, dl
	je	.label_283
	mov	edx, dword ptr [rsp + 0xec]
	mov	rdi, r14
	test	dl, 1
	je	.label_272
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_243
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rdx + rsi], 0x5c
	mov	rsi, rbx
.label_243:
	inc	qword ptr [rsp + 0xf0]
	mov	dword ptr [rsp + 0xec], 0
	jmp	.label_272
	.section	.text
	.align	32
	#Procedure 0x404daa
	.globl sub_404daa
	.type sub_404daa, @function
sub_404daa:

	nop	word ptr [rax + rax]
.label_283:
	cmp	byte ptr [rsp + 0xcf], 0
	jne	.label_220
	cmp	r14d, 2
	jne	.label_232
	mov	al, r11b
	and	al, 1
	jne	.label_232
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_304
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x27
.label_304:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_311
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x24
.label_311:
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_197
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdx + rax], 0x27
.label_197:
	add	qword ptr [rsp + 0xf0], 3
	mov	r11b, 1
.label_232:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_309
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rdx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rdx], 0x5c
.label_309:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	jae	.label_303
	mov	dl, r13b
	shr	dl, 6
	or	dl, 0x30
	mov	rdi, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rax], dl
	mov	rsi, rdi
.label_303:
	mov	rdi, r14
	mov	rax, qword ptr [rsp + 0xf0]
	lea	rax, [rax + 2]
	cmp	rax, r10
	jae	.label_233
	mov	dl, r13b
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rax], dl
	mov	rsi, rbx
.label_233:
	add	qword ptr [rsp + 0xf0], 3
	and	r13b, 7
	or	r13b, 0x30
	mov	al, 1
.label_272:
	lea	rdx, [rsi + 1]
	cmp	rcx, rdx
	jbe	.label_215
	test	r11b, 1
	je	.label_252
	mov	bl, al
	and	bl, 1
	mov	r14, rdi
	jne	.label_254
	mov	rbx, rsi
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_258
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	rdi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rsi + rdi], 0x27
.label_258:
	mov	rsi, qword ptr [rsp + 0xf0]
	inc	rsi
	cmp	rsi, r10
	jae	.label_306
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rdi + rsi], 0x27
.label_306:
	add	qword ptr [rsp + 0xf0], 2
	xor	r11d, r11d
	mov	rsi, rbx
	jmp	.label_254
	.section	.text
	.align	32
	#Procedure 0x404f25
	.globl sub_404f25
	.type sub_404f25, @function
sub_404f25:

	nop	word ptr cs:[rax + rax]
.label_252:
	mov	r14, rdi
.label_254:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_205
	mov	rdi, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	rbx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rsi + rbx], r13b
	mov	rsi, rdi
	jmp	.label_205
.label_215:
	test	r11b, 1
	je	.label_286
	and	al, 1
	jne	.label_286
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_236
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0x27
.label_236:
	mov	rax, qword ptr [rsp + 0xf0]
	inc	rax
	cmp	rax, r10
	mov	r14, rdi
	jae	.label_293
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	byte ptr [rcx + rax], 0x27
.label_293:
	add	qword ptr [rsp + 0xf0], 2
	xor	r11d, r11d
	mov	bl, r13b
	jmp	.label_270
	.section	.text
	.align	32
	#Procedure 0x404fb8
	.globl sub_404fb8
	.type sub_404fb8, @function
sub_404fb8:

	nop	dword ptr [rax + rax]
.label_286:
	mov	bl, r13b
	mov	r14, rdi
.label_270:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_301
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], bl
	jmp	.label_301
.label_255:
	mov	rcx, qword ptr [rsp + 0xf0]
	jmp	.label_285
.label_259:
	mov	rcx, qword ptr [rsp + 0xf0]
.label_285:
	cmp	rcx, r10
	jae	.label_315
	mov	rax, qword ptr [rsp + 0xe0]
	mov	byte ptr [rax + rcx], 0x5c
.label_315:
	lea	rax, [rcx + 1]
	mov	qword ptr [rsp + 0xf0], rax
	mov	al, 1
	mov	r13b, 0x30
	cmp	edi, 2
	je	.label_200
	lea	rdx, [rsi + 1]
	cmp	rdx, rbp
	jae	.label_209
	mov	dl, byte ptr [r9 + rdx]
	add	dl, 0xd0
	movzx	edx, dl
	cmp	edx, 9
	ja	.label_312
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_288
	mov	rdx, qword ptr [rsp + 0xe0]
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rdx + rsi], 0x30
	mov	rsi, rbx
.label_288:
	lea	rdx, [rcx + 2]
	cmp	rdx, r10
	jae	.label_221
	mov	rbx, rsi
	mov	rsi, qword ptr [rsp + 0xe0]
	mov	byte ptr [rsi + rdx], 0x30
	mov	rsi, rbx
.label_221:
	add	rcx, 3
	xor	r15d, r15d
	mov	qword ptr [rsp + 0xf0], rcx
	jmp	.label_246
.label_200:
	xor	r15d, r15d
	jmp	.label_246
.label_209:
	xor	r15d, r15d
	jmp	.label_246
.label_312:
	xor	r15d, r15d
	jmp	.label_246
.label_201:
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	mov	r8b, byte ptr [rsp + 0xa6]
	mov	rsi, qword ptr [rsp + 0x30]
	jmp	.label_248
.label_207:
	xor	r15d, r15d
	mov	r9, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	.label_250
.label_222:
	mov	rbp, qword ptr [rsp + 0xc0]
	cmp	qword ptr [rsp + 0x28], rbp
	jae	.label_257
	mov	r9, qword ptr [rsp + 0x48]
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rbx, qword ptr [rsp + 0x50]
.label_267:
	mov	rax, qword ptr [rsp + 0x20]
	cmp	byte ptr [rax + rbx], 0
	je	.label_265
	lea	rax, [rsi + rbx + 1]
	inc	rbx
	cmp	rax, rbp
	jb	.label_267
	xor	r15d, r15d
	jmp	.label_248
.label_257:
	xor	r15d, r15d
	mov	r9, qword ptr [rsp + 0x48]
.label_250:
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rbx, qword ptr [rsp + 0x50]
.label_248:
	mov	byte ptr [rsp + 0xa6], r8b
	jmp	.label_261
.label_265:
	xor	r15d, r15d
	jmp	.label_248
.label_275:
	xor	r15d, r15d
	jmp	.label_246
.label_277:
	xor	r15d, r15d
	mov	rsi, rbx
	jmp	.label_246
	.section	.text
	.align	32
	#Procedure 0x405148
	.globl sub_405148
	.type sub_405148, @function
sub_405148:

	nop	dword ptr [rax + rax]
.label_229:
	cmp	qword ptr [rsp + 0xf0], 0
	setne	al
	cmp	r14d, 2
	setne	dl
	mov	rcx, qword ptr [rsp + 0x98]
	and	cl, 1
	je	.label_280
	or	dl, al
	je	.label_220
.label_280:
	mov	qword ptr [rsp + 0xc0], rbp
	mov	r12, r9
	test	cl, cl
	setne	al
	cmp	r14d, 2
	setne	dl
	mov	rsi, qword ptr [rsp + 0x70]
	test	sil, 1
	je	.label_290
	or	dl, al
	jne	.label_290
	test	r8b, 1
	jne	.label_298
	cmp	qword ptr [rsp + 0x80], 0
	je	.label_290
	test	r10, r10
	mov	r13d, r14d
	mov	al, byte ptr [rsp + 0xa6]
	mov	rdx, qword ptr [rsp + 0x98]
	mov	r15b, dl
	mov	rbp, qword ptr [rsp + 0x80]
	je	.label_294
.label_290:
	mov	rdx, qword ptr [rsp + 0xa8]
	test	rdx, rdx
	je	.label_308
	test	cl, cl
	jne	.label_308
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_308
	inc	rdx
	nop	word ptr cs:[rax + rax]
.label_204:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_244
	mov	rcx, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0xf0]
	mov	byte ptr [rcx + rsi], al
.label_244:
	inc	qword ptr [rsp + 0xf0]
	mov	al, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_204
.label_308:
	cmp	qword ptr [rsp + 0xf0], r10
	jae	.label_216
	mov	rax, qword ptr [rsp + 0xe0]
	mov	rcx, qword ptr [rsp + 0xf0]
	mov	byte ptr [rax + rcx], 0
	jmp	.label_216
.label_228:
	mov	rdx, r9
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	r8b, byte ptr [rsp + 0xa6]
	mov	r14, rdi
.label_264:
	test	r8b, 1
	mov	r8d, 4
	cmove	r8d, r14d
	cmp	r14d, 2
	cmovne	r8d, r14d
	and	r9d, 0xfffffffd
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], 0
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	rsi, r10
	mov	rcx, rbp
.label_268:
	call	quotearg_buffer_restyled
	mov	qword ptr [rsp + 0xf0], rax
.label_216:
	mov	rax, qword ptr [rsp + 0xf0]
	add	rsp, 0x108
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_241:
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	rdx, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rsp + 0xc0]
	jmp	.label_264
.label_220:
	mov	rdx, r9
	mov	r9d, dword ptr [rsp + 0x6c]
	mov	r8b, byte ptr [rsp + 0xa6]
	jmp	.label_264
.label_298:
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [rsp + 0x140]
	mov	qword ptr [rsp], rax
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0xe0]
	mov	rsi, qword ptr [rsp + 0x80]
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0xc0]
	mov	r9d, dword ptr [rsp + 0x6c]
	jmp	.label_268
.label_279:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x405358
	.globl sub_405358
	.type sub_405358, @function
sub_405358:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405360
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	mov	rax, rdx
	xor	edx, edx
	mov	rcx, rax
	jmp	quotearg_alloc_mem
	.section	.text
	.align	32
	#Procedure 0x40536a
	.globl sub_40536a
	.type sub_40536a, @function
sub_40536a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405370

	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x30], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x28], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 0x20], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x38], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 0x44], ecx
	test	rbx, rbx
	sete	al
	movzx	ebp, al
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	mov	rax, qword ptr [r12 + 0x28]
	mov	rcx, qword ptr [r12 + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], r13
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	call	quotearg_buffer_restyled
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xcharalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	mov	rax, qword ptr [r12 + 0x28]
	mov	rcx, qword ptr [r12 + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], r13
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x20]
	mov	rcx, qword ptr [rsp + 0x28]
	mov	r9d, ebp
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x30]
	test	rax, rax
	mov	ecx, dword ptr [rsp + 0x44]
	mov	rdx, qword ptr [rsp + 0x38]
	mov	dword ptr [rdx], ecx
	je	.label_316
	mov	qword ptr [rax], rbx
.label_316:
	mov	rax, r14
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405464
	.globl sub_405464
	.type sub_405464, @function
sub_405464:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405470
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14,  qword ptr [word ptr [rip + slotvec]]
	cmp	dword ptr [dword ptr [rip + nslots]],  2
	jl	.label_317
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_319:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax,  dword ptr [dword ptr [rip + nslots]]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_319
.label_317:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_320
	call	free
	mov	qword ptr [word ptr [rip + slotvec0]],  0x100
	mov	qword ptr [word ptr [rip + label_321]], OFFSET FLAT:slot0
.label_320:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_318
	mov	rdi, r14
	call	free
	mov	qword ptr [word ptr [rip + slotvec]], OFFSET FLAT:slotvec0
.label_318:
	mov	dword ptr [dword ptr [rip + nslots]],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x405501
	.globl sub_405501
	.type sub_405501, @function
sub_405501:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405510

	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x40551e
	.globl sub_40551e
	.type sub_40551e, @function
sub_40551e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405520

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	r12, rcx
	mov	r14, rdx
	mov	qword ptr [rsp + 0x40], rsi
	mov	ebx, edi
	call	__errno_location
	test	ebx, ebx
	js	.label_322
	mov	ecx, dword ptr [rax]
	mov	rbp,  qword ptr [word ptr [rip + slotvec]]
	cmp	dword ptr [dword ptr [rip + nslots]],  ebx
	jle	.label_325
	mov	dword ptr [rsp + 0x2c], ecx
	mov	qword ptr [rsp + 0x30], rax
	jmp	.label_328
.label_325:
	mov	qword ptr [rsp + 0x38], r14
	cmp	ebx, 0x7fffffff
	je	.label_324
	mov	dword ptr [rsp + 0x2c], ecx
	mov	qword ptr [rsp + 0x30], rax
	mov	r13d, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, r13
	cmovne	rdi, rbp
	lea	r15d, [rbx + 1]
	movsxd	rsi, ebx
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, r13
	mov	qword ptr [word ptr [rip + slotvec]],  r14
	jne	.label_323
	movups	xmm0,  xmmword ptr [word ptr [rip + slotvec0]]
	movups	xmmword ptr [r14], xmm0
.label_323:
	movsxd	rax,  dword ptr [dword ptr [rip + nslots]]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [dword ptr [rip + nslots]],  ebp
	mov	rbp, r14
	mov	r14, qword ptr [rsp + 0x38]
.label_328:
	mov	qword ptr [rsp + 0x38], r14
	movsxd	r13, ebx
	shl	r13, 4
	mov	r15, qword ptr [rbp + r13]
	mov	rbx, qword ptr [rbp + r13 + 8]
	mov	rcx, r12
	mov	qword ptr [rsp + 0x20], rcx
	mov	r8d, dword ptr [rcx]
	mov	r12d, dword ptr [rcx + 4]
	or	r12d, 1
	lea	rdx, [rcx + 8]
	mov	qword ptr [rsp + 0x18], rdx
	mov	rax, qword ptr [rcx + 0x28]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp], rdx
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x40]
	mov	rcx, r14
	mov	r9d, r12d
	call	quotearg_buffer_restyled
	mov	r14, rax
	cmp	r15, r14
	ja	.label_326
	lea	rax, [rbp + r13]
	lea	rbp, [rbp + r13 + 8]
	inc	r14
	mov	qword ptr [rax], r14
	mov	eax, OFFSET FLAT:slot0
	cmp	rbx, rax
	je	.label_327
	mov	rdi, rbx
	call	free
.label_327:
	mov	rdi, r14
	call	xcharalloc
	mov	rbx, rax
	mov	qword ptr [rbp], rbx
	mov	rcx, qword ptr [rsp + 0x20]
	mov	r8d, dword ptr [rcx]
	mov	rax, qword ptr [rcx + 0x28]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [rsp], rax
	mov	rdi, rbx
	mov	rsi, r14
	mov	rdx, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	r9d, r12d
	call	quotearg_buffer_restyled
.label_326:
	mov	rax, qword ptr [rsp + 0x30]
	mov	ecx, dword ptr [rsp + 0x2c]
	mov	dword ptr [rax], ecx
	mov	rax, rbx
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_322:
	call	abort
.label_324:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4056ea
	.globl sub_4056ea
	.type sub_4056ea, @function
sub_4056ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4056f0

	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4056fa
	.globl sub_4056fa
	.type sub_4056fa, @function
sub_4056fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405700
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rsi, rax
	jmp	quotearg_n
	.section	.text
	.align	32
	#Procedure 0x40570d
	.globl sub_40570d
	.type sub_40570d, @function
sub_40570d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405710
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rcx, rdi
	xor	edi, edi
	mov	rsi, rcx
	mov	rdx, rax
	jmp	quotearg_n_mem
	.section	.text
	.align	32
	#Procedure 0x405720

	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	rbx, rdx
	mov	ebp, edi
	lea	r14, [rsp + 8]
	mov	rdi, r14
	call	quoting_options_from_style
	mov	rdx, -1
	mov	edi, ebp
	mov	rsi, rbx
	mov	rcx, r14
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405757
	.globl sub_405757
	.type sub_405757, @function
sub_405757:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405760

	.globl quoting_options_from_style
	.type quoting_options_from_style, @function
quoting_options_from_style:
	sub	rsp, 0x38
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_329
	mov	dword ptr [rdi], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rdi + 0x34], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rdi + 0x24], xmm2
	movups	xmmword ptr [rdi + 0x14], xmm1
	movups	xmmword ptr [rdi + 4], xmm0
	mov	rax, rdi
	add	rsp, 0x38
	ret	
.label_329:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4057b2
	.globl sub_4057b2
	.type sub_4057b2, @function
sub_4057b2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4057c0

	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x38
	mov	r14, rcx
	mov	rbx, rdx
	mov	ebp, edi
	lea	r15, [rsp]
	mov	rdi, r15
	call	quoting_options_from_style
	mov	edi, ebp
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x38
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4057f9
	.globl sub_4057f9
	.type sub_4057f9, @function
sub_4057f9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405800

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	mov	rax, rsi
	mov	ecx, edi
	xor	edi, edi
	mov	esi, ecx
	mov	rdx, rax
	jmp	quotearg_n_style
	.section	.text
	.align	32
	#Procedure 0x405811
	.globl sub_405811
	.type sub_405811, @function
sub_405811:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405820
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	mov	rax, rdx
	mov	rcx, rsi
	mov	edx, edi
	xor	edi, edi
	mov	esi, edx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	quotearg_n_style_mem
	.section	.text
	.align	32
	#Procedure 0x405834
	.globl sub_405834
	.type sub_405834, @function
sub_405834:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405840

	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	eax, edx
	mov	r14, rsi
	mov	rbx, rdi
	mov	rcx,  qword ptr [word ptr [rip + label_330]]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0,  xmmword ptr [word ptr [rip + label_331]]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_332]]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + default_quoting_options]]
	movaps	xmmword ptr [rsp], xmm0
	lea	r15, [rsp]
	mov	edx, 1
	mov	rdi, r15
	mov	esi, eax
	call	set_char_quoting
	xor	edi, edi
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4058ad
	.globl sub_4058ad
	.type sub_4058ad, @function
sub_4058ad:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4058b0

	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:
	mov	eax, esi
	mov	rsi, -1
	mov	edx, eax
	jmp	quotearg_char_mem
	.section	.text
	.align	32
	#Procedure 0x4058bd
	.globl sub_4058bd
	.type sub_4058bd, @function
sub_4058bd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4058c0

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	mov	esi, 0x3a
	jmp	quotearg_char
	.section	.text
	.align	32
	#Procedure 0x4058c7
	.globl sub_4058c7
	.type sub_4058c7, @function
sub_4058c7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4058d0
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	mov	edx, 0x3a
	jmp	quotearg_char_mem
	.section	.text
	.align	32
	#Procedure 0x4058da
	.globl sub_4058da
	.type sub_4058da, @function
sub_4058da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4058e0

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x40
	mov	r14, rdx
	mov	ebp, edi
	lea	rbx, [rsp + 8]
	mov	rdi, rbx
	call	quoting_options_from_style
	mov	esi, 0x3a
	mov	edx, 1
	mov	rdi, rbx
	call	set_char_quoting
	mov	rdx, -1
	mov	edi, ebp
	mov	rsi, r14
	mov	rcx, rbx
	call	quotearg_n_options
	add	rsp, 0x40
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405929
	.globl sub_405929
	.type sub_405929, @function
sub_405929:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405930

	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:
	mov	r8, -1
	jmp	quotearg_n_custom_mem
	.section	.text
	.align	32
	#Procedure 0x405939
	.globl sub_405939
	.type sub_405939, @function
sub_405939:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405940

	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0x38
	mov	r14, r8
	mov	rbx, rcx
	mov	ebp, edi
	mov	rax,  qword ptr [word ptr [rip + label_330]]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0,  xmmword ptr [word ptr [rip + label_331]]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + label_332]]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0,  xmmword ptr [word ptr [rip + default_quoting_options]]
	movaps	xmmword ptr [rsp], xmm0
	lea	r15, [rsp]
	mov	rdi, r15
	call	set_custom_quoting
	mov	edi, ebp
	mov	rsi, rbx
	mov	rdx, r14
	mov	rcx, r15
	call	quotearg_n_options
	add	rsp, 0x38
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4059a8
	.globl sub_4059a8
	.type sub_4059a8, @function
sub_4059a8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4059b0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	mov	rax, rdx
	mov	rcx, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	jmp	quotearg_n_custom
	.section	.text
	.align	32
	#Procedure 0x4059c9
	.globl sub_4059c9
	.type sub_4059c9, @function
sub_4059c9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4059d0
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	mov	rax, rcx
	mov	rcx, rdx
	mov	rdx, rsi
	mov	rsi, rdi
	xor	edi, edi
	mov	r8, rax
	jmp	quotearg_n_custom_mem
	.section	.text
	.align	32
	#Procedure 0x4059e6
	.globl sub_4059e6
	.type sub_4059e6, @function
sub_4059e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4059f0

	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4059fa
	.globl sub_4059fa
	.type sub_4059fa, @function
sub_4059fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405a00
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rcx, rdi
	xor	edi, edi
	mov	rsi, rcx
	mov	rdx, rax
	jmp	quote_n_mem
	.section	.text
	.align	32
	#Procedure 0x405a10

	.globl quote_n
	.type quote_n, @function
quote_n:
	mov	rdx, -1
	jmp	quote_n_mem
	.section	.text
	.align	32
	#Procedure 0x405a19
	.globl sub_405a19
	.type sub_405a19, @function
sub_405a19:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405a20

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rsi, rax
	jmp	quote_n
	.section	.text
	.align	32
	#Procedure 0x405a2a
	.globl sub_405a2a
	.type sub_405a2a, @function
sub_405a2a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405a30

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0x10
	mov	r14d, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_334
	call	locale_charset
	mov	rbp, rax
	mov	dword ptr [rsp + 8], 0
	mov	dword ptr [rsp], 0
	mov	esi, 0x55
	mov	edx, 0x54
	mov	ecx, 0x46
	mov	r8d, 0x2d
	mov	r9d, 0x38
	mov	rdi, rbp
	call	strcaseeq0
	test	eax, eax
	je	.label_333
	mov	eax, OFFSET FLAT:.str.14_0
	movzx	ecx, byte ptr [rbx]
	cmp	ecx, 0x60
	je	.label_334
	mov	eax, OFFSET FLAT:.str.15_0
	jmp	.label_334
.label_333:
	mov	dword ptr [rsp + 8], 0x30
	mov	dword ptr [rsp], 0x33
	mov	esi, 0x47
	mov	edx, 0x42
	mov	ecx, 0x31
	mov	r8d, 0x38
	mov	r9d, 0x30
	mov	rdi, rbp
	call	strcaseeq0
	test	eax, eax
	je	.label_335
	mov	eax, OFFSET FLAT:.str.17_1
	movzx	ecx, byte ptr [rbx]
	cmp	ecx, 0x60
	je	.label_334
	mov	eax, OFFSET FLAT:.str.18_1
	jmp	.label_334
.label_335:
	cmp	r14d, 9
	mov	ecx, OFFSET FLAT:.str.10_0
	mov	eax, OFFSET FLAT:.str.12_0
	cmove	rax, rcx
.label_334:
	add	rsp, 0x10
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405b0d
	.globl sub_405b0d
	.type sub_405b0d, @function
sub_405b0d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405b10

	.globl strcaseeq0
	.type strcaseeq0, @function
strcaseeq0:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14d, r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx]
	test	al, al
	je	.label_337
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_338
	jmp	.label_336
.label_337:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_336
.label_338:
	mov	eax, 1
	test	bpl, bpl
	je	.label_336
	mov	al, byte ptr [rsp + 0x40]
	movsx	ecx, byte ptr [rsp + 0x48]
	mov	dword ptr [rsp], ecx
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	movsx	r8d, r14b
	movsx	r9d, al
	mov	rdi, rbx
	call	strcaseeq1
.label_336:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405b93
	.globl sub_405b93
	.type sub_405b93, @function
sub_405b93:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405ba0

	.globl strcaseeq1
	.type strcaseeq1, @function
strcaseeq1:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	dword ptr [rsp + 4], r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	r14b, byte ptr [rsp + 0x40]
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 1]
	test	al, al
	je	.label_341
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_340
	jmp	.label_339
.label_341:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_339
.label_340:
	mov	eax, 1
	test	bpl, bpl
	je	.label_339
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	mov	eax, dword ptr [rsp + 4]
	movsx	r8d, al
	movsx	r9d, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq2
.label_339:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405c2e
	.globl sub_405c2e
	.type sub_405c2e, @function
sub_405c2e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405c30

	.globl strcaseeq2
	.type strcaseeq2, @function
strcaseeq2:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14d, r9d
	mov	r15d, r8d
	mov	r12d, ecx
	mov	r13d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 2]
	test	al, al
	je	.label_342
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_344
	jmp	.label_343
.label_342:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_343
.label_344:
	mov	eax, 1
	test	bpl, bpl
	je	.label_343
	movsx	esi, r13b
	movsx	edx, r12b
	movsx	ecx, r15b
	movsx	r8d, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq3
.label_343:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405caf
	.globl sub_405caf
	.type sub_405caf, @function
sub_405caf:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405cb0

	.globl strcaseeq3
	.type strcaseeq3, @function
strcaseeq3:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r14d, r8d
	mov	r15d, ecx
	mov	r12d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 3]
	test	al, al
	je	.label_347
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_346
	jmp	.label_345
.label_347:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_345
.label_346:
	mov	eax, 1
	test	bpl, bpl
	je	.label_345
	movsx	esi, r12b
	movsx	edx, r15b
	movsx	ecx, r14b
	mov	rdi, rbx
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq4
.label_345:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405d19
	.globl sub_405d19
	.type sub_405d19, @function
sub_405d19:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405d20

	.globl strcaseeq4
	.type strcaseeq4, @function
strcaseeq4:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14d, ecx
	mov	r15d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 4]
	test	al, al
	je	.label_350
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_348
	jmp	.label_349
.label_350:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_349
.label_348:
	mov	eax, 1
	test	bpl, bpl
	je	.label_349
	movsx	esi, r15b
	movsx	edx, r14b
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	jmp	strcaseeq5
.label_349:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405d85
	.globl sub_405d85
	.type sub_405d85, @function
sub_405d85:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405d90

	.globl strcaseeq5
	.type strcaseeq5, @function
strcaseeq5:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 5]
	test	al, al
	je	.label_351
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_353
	jmp	.label_352
.label_351:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_352
.label_353:
	mov	eax, 1
	test	bpl, bpl
	je	.label_352
	movsx	esi, r14b
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	strcaseeq6
.label_352:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405ddf
	.globl sub_405ddf
	.type sub_405ddf, @function
sub_405ddf:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405de0

	.globl strcaseeq6
	.type strcaseeq6, @function
strcaseeq6:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	mov	edi, ebp
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 6]
	test	al, al
	je	.label_356
	and	ecx, 0xffffffdf
	xor	eax, eax
	cmp	ecx, ebp
	je	.label_355
	jmp	.label_354
.label_356:
	xor	eax, eax
	movzx	edx, bpl
	movzx	ecx, cl
	cmp	ecx, edx
	jne	.label_354
.label_355:
	mov	eax, 1
	test	bpl, bpl
	je	.label_354
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	rbp
	jmp	strcaseeq7
.label_354:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405e2b
	.globl sub_405e2b
	.type sub_405e2b, @function
sub_405e2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405e30

	.globl strcaseeq7
	.type strcaseeq7, @function
strcaseeq7:
	push	rbx
	mov	rbx, rdi
	xor	edi, edi
	call	c_isupper
	movsx	ecx, byte ptr [rbx + 7]
	test	al, al
	je	.label_359
	mov	eax, 1
	test	ecx, 0xffffffdf
	jne	.label_358
	jmp	.label_357
.label_359:
	mov	eax, 1
	test	cl, cl
	je	.label_357
.label_358:
	xor	eax, eax
.label_357:
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x405e5f
	.globl sub_405e5f
	.type sub_405e5f, @function
sub_405e5f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405e60

	.globl safe_read
	.type safe_read, @function
safe_read:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15d, edi
	mov	r12d, 0x7ff00000
	nop	word ptr [rax + rax]
.label_361:
	mov	edi, r15d
	mov	rsi, r14
	mov	rdx, rbx
	call	read
	mov	rbp, rax
	test	rbp, rbp
	jns	.label_360
	call	__errno_location
	mov	eax, dword ptr [rax]
	cmp	eax, 4
	je	.label_361
	cmp	eax, 0x16
	sete	cl
	cmp	rbx, 0x7ff00000
	seta	dl
	and	dl, cl
	mov	rcx, rbx
	cmovne	rcx, r12
	test	dl, dl
	cmovne	rbp, r13
	cmp	rbx, 0x7ff00001
	jb	.label_360
	cmp	eax, 0x16
	mov	rbx, rcx
	mov	r13, rbp
	je	.label_361
.label_360:
	mov	rax, rbp
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x405ee7
	.globl sub_405ee7
	.type sub_405ee7, @function
sub_405ee7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405ef0

	.globl dup_safer
	.type dup_safer, @function
dup_safer:
	xor	esi, esi
	mov	edx, 3
	xor	eax, eax
	jmp	rpl_fcntl
	.section	.text
	.align	32
	#Procedure 0x405efe
	.globl sub_405efe
	.type sub_405efe, @function
sub_405efe:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405f00

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_362
	mov	edx, OFFSET FLAT:.str_3
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_371
.label_362:
	mov	edx, OFFSET FLAT:.str.1_1
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_371:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.2_1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.3_0
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_366
	jmp	qword ptr [word ptr [+ (r12 * 8) + label_368]]
.label_1902:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.4_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_366:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.13_0
	jmp	.label_365
.label_1903:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.5_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_1904:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.6_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_1905:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.7_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	jmp	.label_363
.label_1906:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.8_0
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	jmp	.label_364
.label_1907:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.9
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	jmp	.label_370
.label_1908:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.10_1
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	qword ptr [rsp + 0x18], rbx
.label_370:
	mov	qword ptr [rsp + 0x10], rdi
.label_364:
	mov	qword ptr [rsp + 8], rsi
.label_363:
	mov	qword ptr [rsp], rax
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	jmp	.label_367
.label_1910:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.12_1
.label_365:
	mov	edx, 5
	call	dcgettext
	mov	r10, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	r11, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	rdx, qword ptr [r15 + 0x38]
	mov	rax, qword ptr [r15 + 0x40]
	mov	qword ptr [rsp + 0x28], rax
	mov	qword ptr [rsp + 0x20], rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	qword ptr [rsp + 0x10], rdi
	mov	qword ptr [rsp + 8], rsi
	mov	qword ptr [rsp], r11
	jmp	.label_369
.label_1909:
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.11_1
	mov	edx, 5
	call	dcgettext
	mov	r10, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [r15 + 0x20]
	mov	rdi, qword ptr [r15 + 0x28]
	mov	rbx, qword ptr [r15 + 0x30]
	mov	rdx, qword ptr [r15 + 0x38]
	mov	qword ptr [rsp + 0x20], rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	qword ptr [rsp + 0x10], rdi
	mov	qword ptr [rsp + 8], rsi
	mov	qword ptr [rsp], rax
.label_369:
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	mov	rdx, r10
.label_367:
	call	__fprintf_chk
.label_1901:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4061e1
	.globl sub_4061e1
	.type sub_4061e1, @function
sub_4061e1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4061f0
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_372:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_372
	jmp	version_etc_arn
	.section	.text
	.align	32
	#Procedure 0x406211
	.globl sub_406211
	.type sub_406211, @function
sub_406211:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406220

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	sub	rsp, 0x58
	xor	r9d, r9d
	nop	word ptr [rax + rax]
.label_374:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_373
	mov	r11, r10
	add	r11, qword ptr [r8 + 0x10]
	lea	eax, [r10 + 8]
	mov	dword ptr [r8], eax
	jmp	.label_375
	.section	.text
	.align	32
	#Procedure 0x406249
	.globl sub_406249
	.type sub_406249, @function
sub_406249:

	nop	dword ptr [rax]
.label_373:
	mov	r11, qword ptr [r8 + 8]
	lea	rax, [r11 + 8]
	mov	qword ptr [r8 + 8], rax
.label_375:
	mov	rax, qword ptr [r11]
	mov	qword ptr [rsp + r9*8], rax
	test	rax, rax
	je	.label_376
	inc	r9
	cmp	r9, 0xa
	jb	.label_374
.label_376:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	32
	#Procedure 0x40627f
	.globl sub_40627f
	.type sub_40627f, @function
sub_40627f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x406280

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xc8
	test	al, al
	je	.label_377
	movaps	xmmword ptr [rsp + 0x30], xmm0
	movaps	xmmword ptr [rsp + 0x40], xmm1
	movaps	xmmword ptr [rsp + 0x50], xmm2
	movaps	xmmword ptr [rsp + 0x60], xmm3
	movaps	xmmword ptr [rsp + 0x70], xmm4
	movaps	xmmword ptr [rsp + 0x80], xmm5
	movaps	xmmword ptr [rsp + 0x90], xmm6
	movaps	xmmword ptr [rsp + 0xa0], xmm7
.label_377:
	mov	qword ptr [rsp + 0x28], r9
	mov	qword ptr [rsp + 0x20], r8
	lea	rax, [rsp]
	mov	qword ptr [rsp + 0xc0], rax
	lea	rax, [rsp + 0xd0]
	mov	qword ptr [rsp + 0xb8], rax
	mov	dword ptr [rsp + 0xb4], 0x30
	mov	dword ptr [rsp + 0xb0], 0x20
	lea	r8, [rsp + 0xb0]
	call	version_etc_va
	add	rsp, 0xc8
	ret	
	.section	.text
	.align	32
	#Procedure 0x40630d
	.globl sub_40630d
	.type sub_40630d, @function
sub_40630d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406310
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.14_1
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.15_1
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.16_0
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:.str.17
	mov	ecx, OFFSET FLAT:.str.18_0
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:.str.19_0
	mov	edx, 5
	call	dcgettext
	mov	rsi,  qword ptr [word ptr [rip + stdout]]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	32
	#Procedure 0x406384
	.globl sub_406384
	.type sub_406384, @function
sub_406384:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x406390
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_378
	imul	rsi, rdi
	mov	rdi, rsi
	jmp	xmalloc
.label_378:
	push	rax
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4063b3
	.globl sub_4063b3
	.type sub_4063b3, @function
sub_4063b3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4063c0

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_379
	test	rax, rax
	je	.label_380
.label_379:
	pop	rbx
	ret	
.label_380:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4063da
	.globl sub_4063da
	.type sub_4063da, @function
sub_4063da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4063e0
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	mov	rcx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rcx
	cmp	rax, rsi
	jb	.label_381
	imul	rcx, rsi
	mov	rsi, rcx
	jmp	xrealloc
.label_381:
	push	rax
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x406406
	.globl sub_406406
	.type sub_406406, @function
sub_406406:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406410

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_382
	test	rbx, rbx
	jne	.label_382
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_382:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_384
	test	rax, rax
	je	.label_383
.label_384:
	pop	rbx
	ret	
.label_383:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x406440

	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:
	push	rax
	mov	r8, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_385
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	r8
	cmp	rax, rcx
	jbe	.label_388
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_386
.label_385:
	test	rcx, rcx
	jne	.label_389
	mov	eax, 0x80
	xor	edx, edx
	div	r8
	mov	rcx, rax
	cmp	rcx, 1
	adc	rcx, 0
.label_389:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	r8
	cmp	rax, rcx
	jb	.label_387
.label_386:
	mov	qword ptr [rsi], rcx
	imul	r8, rcx
	mov	rsi, r8
	pop	rax
	jmp	xrealloc
.label_388:
	call	xalloc_die
.label_387:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4064b5
	.globl sub_4064b5
	.type sub_4064b5, @function
sub_4064b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4064c0

	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:
	jmp	xmalloc
	.section	.text
	.align	32
	#Procedure 0x4064c5
	.globl sub_4064c5
	.type sub_4064c5, @function
sub_4064c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4064d0
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	mov	edx, 1
	jmp	x2nrealloc
	.section	.text
	.align	32
	#Procedure 0x4064da
	.globl sub_4064da
	.type sub_4064da, @function
sub_4064da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4064e0
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	call	xmalloc
	mov	rbx, rax
	xor	esi, esi
	mov	rdi, rbx
	mov	rdx, r14
	call	memset
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x406507
	.globl sub_406507
	.type sub_406507, @function
sub_406507:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406510
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_390
	call	rpl_calloc
	test	rax, rax
	je	.label_390
	pop	rcx
	ret	
.label_390:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x406536
	.globl sub_406536
	.type sub_406536, @function
sub_406536:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406540

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	r15, rsi
	mov	r14, rdi
	mov	rdi, r15
	call	xmalloc
	mov	rbx, rax
	mov	rdi, rbx
	mov	rsi, r14
	mov	rdx, r15
	call	memcpy
	mov	rax, rbx
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40656d
	.globl sub_40656d
	.type sub_40656d, @function
sub_40656d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406570
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	rbx
	mov	rbx, rdi
	call	strlen
	lea	rsi, [rax + 1]
	mov	rdi, rbx
	pop	rbx
	jmp	xmemdup
	.section	.text
	.align	32
	#Procedure 0x406583
	.globl sub_406583
	.type sub_406583, @function
sub_406583:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406590

	.globl xnumtoimax
	.type xnumtoimax, @function
xnumtoimax:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, r9
	mov	r15, rcx
	mov	r12, rdx
	mov	eax, esi
	mov	r13, rdi
	lea	rcx, [rsp]
	xor	esi, esi
	mov	edx, eax
	call	xstrtoimax
	cmp	eax, 3
	je	.label_396
	cmp	eax, 1
	je	.label_397
	test	eax, eax
	jne	.label_391
	mov	rbx, qword ptr [rsp]
	cmp	rbx, r12
	jl	.label_392
	cmp	rbx, r15
	jle	.label_394
.label_392:
	cmp	rbx, 0x40000000
	jl	.label_395
.label_397:
	call	__errno_location
	mov	dword ptr [rax], 0x4b
	jmp	.label_391
.label_396:
	call	__errno_location
	mov	dword ptr [rax], 0
.label_391:
	mov	eax, dword ptr [rsp + 0x40]
	test	eax, eax
	mov	ebp, 1
	cmovne	ebp, eax
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	eax, eax
	cmp	ebx, 0x16
	cmove	ebx, eax
	mov	rdi, r13
	call	quote
	mov	r8, rax
	mov	edx, OFFSET FLAT:.str_1
	xor	eax, eax
	mov	edi, ebp
	mov	esi, ebx
	mov	rcx, r14
	call	error
.label_394:
	mov	rax, qword ptr [rsp]
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_395:
	call	__errno_location
	cmp	rbx, -0x40000001
	jg	.label_393
	mov	dword ptr [rax], 0x4b
	jmp	.label_391
.label_393:
	mov	dword ptr [rax], 0x22
	jmp	.label_391
	.section	.text
	.align	32
	#Procedure 0x40665f
	.globl sub_40665f
	.type sub_40665f, @function
sub_40665f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x406660

	.globl xdectoimax
	.type xdectoimax, @function
xdectoimax:
	push	rax
	mov	r10, r8
	mov	rax, rcx
	mov	rcx, rdx
	mov	rdx, rsi
	mov	dword ptr [rsp], r9d
	mov	esi, 0xa
	mov	r8, rax
	mov	r9, r10
	call	xnumtoimax
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x406683
	.globl sub_406683
	.type sub_406683, @function
sub_406683:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406690

	.globl xstrtoimax
	.type xstrtoimax, @function
xstrtoimax:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r15, r8
	mov	r14, rcx
	mov	ebp, edx
	mov	r12, rdi
	cmp	ebp, 0x25
	jae	.label_404
	test	rsi, rsi
	lea	r13, [rsp + 0x10]
	cmovne	r13, rsi
	call	__errno_location
	mov	rbx, rax
	mov	dword ptr [rbx], 0
	mov	rdi, r12
	mov	rsi, r13
	mov	edx, ebp
	call	strtoimax
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [r13]
	cmp	rax, r12
	je	.label_414
	mov	eax, dword ptr [rbx]
	xor	r12d, r12d
	test	eax, eax
	je	.label_415
	mov	r12d, 4
	cmp	eax, 0x22
	jne	.label_403
	mov	r12d, 1
.label_415:
	test	r15, r15
	jne	.label_400
	jmp	.label_401
.label_414:
	mov	r12d, 4
	test	r15, r15
	je	.label_403
	movsx	esi, byte ptr [rax]
	test	esi, esi
	je	.label_403
	mov	rdi, r15
	call	strchr
	test	rax, rax
	je	.label_403
	mov	qword ptr [rsp + 8], 1
	xor	r12d, r12d
.label_400:
	mov	rax, qword ptr [r13]
	movsx	ebx, byte ptr [rax]
	test	ebx, ebx
	je	.label_401
	mov	rdi, r15
	mov	esi, ebx
	call	strchr
	test	rax, rax
	je	.label_412
	mov	esi, 0x400
	mov	ebp, 1
	add	ebx, -0x45
	cmp	ebx, 0x2f
	ja	.label_413
	movabs	rax, 0x814400308945
	bt	rax, rbx
	jae	.label_413
	mov	esi, 0x30
	mov	rdi, r15
	call	strchr
	mov	ebp, 1
	test	rax, rax
	je	.label_406
	mov	rax, qword ptr [r13]
	movsx	ecx, byte ptr [rax + 1]
	mov	ebp, 1
	cmp	ecx, 0x42
	je	.label_408
	cmp	ecx, 0x44
	je	.label_408
	cmp	ecx, 0x69
	jne	.label_410
	movzx	eax, byte ptr [rax + 2]
	mov	ebp, 3
	cmp	eax, 0x42
	mov	esi, 0x400
	je	.label_413
	mov	ebp, 1
	jmp	.label_413
.label_406:
	mov	esi, 0x400
	jmp	.label_413
.label_408:
	mov	esi, 0x3e8
	mov	ebp, 2
	jmp	.label_413
.label_410:
	mov	esi, 0x400
.label_413:
	mov	rax, qword ptr [r13]
	movsx	eax, byte ptr [rax]
	cmp	eax, 0x59
	jg	.label_417
	lea	ecx, [rax - 0x42]
	cmp	ecx, 0xe
	ja	.label_418
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_398]]
.label_1914:
	lea	rdi, [rsp + 8]
	mov	esi, 0x400
	jmp	.label_409
.label_417:
	cmp	eax, 0x73
	jg	.label_405
	lea	ecx, [rax - 0x62]
	cmp	ecx, 0xb
	ja	.label_407
	xor	eax, eax
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_416]]
.label_1922:
	lea	rdi, [rsp + 8]
	mov	esi, 0x200
	jmp	.label_409
.label_418:
	cmp	eax, 0x54
	je	.label_411
	cmp	eax, 0x59
	jne	.label_412
	lea	rdi, [rsp + 8]
	mov	edx, 8
	call	bkm_scale_by_power
	jmp	.label_402
.label_405:
	cmp	eax, 0x74
	je	.label_411
	cmp	eax, 0x77
	jne	.label_412
	lea	rdi, [rsp + 8]
	mov	esi, 2
.label_409:
	call	bkm_scale
	jmp	.label_402
.label_1916:
	lea	rdi, [rsp + 8]
	mov	edx, 3
	call	bkm_scale_by_power
	jmp	.label_402
.label_1917:
	lea	rdi, [rsp + 8]
	mov	edx, 1
	call	bkm_scale_by_power
	jmp	.label_402
.label_1918:
	lea	rdi, [rsp + 8]
	mov	edx, 2
	call	bkm_scale_by_power
	jmp	.label_402
.label_411:
	lea	rdi, [rsp + 8]
	mov	edx, 4
	call	bkm_scale_by_power
	jmp	.label_402
.label_407:
	cmp	eax, 0x5a
	jne	.label_412
	lea	rdi, [rsp + 8]
	mov	edx, 7
	call	bkm_scale_by_power
	jmp	.label_402
.label_412:
	mov	rax, qword ptr [rsp + 8]
	mov	qword ptr [r14], rax
	or	r12d, 2
	jmp	.label_403
.label_1915:
	lea	rdi, [rsp + 8]
	mov	edx, 6
	call	bkm_scale_by_power
	jmp	.label_402
.label_1919:
	lea	rdi, [rsp + 8]
	mov	edx, 5
	call	bkm_scale_by_power
.label_402:
	or	eax, r12d
	mov	rcx, qword ptr [r13]
	lea	rdx, [rcx + rbp]
	mov	qword ptr [r13], rdx
	cmp	byte ptr [rcx + rbp], 0
	je	.label_399
	or	eax, 2
.label_399:
	mov	r12d, eax
.label_401:
	mov	rax, qword ptr [rsp + 8]
	mov	qword ptr [r14], rax
.label_403:
	mov	eax, r12d
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_404:
	mov	edi, OFFSET FLAT:.str_4
	mov	esi, OFFSET FLAT:.str.1_2
	mov	edx, 0x54
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.xstrtoimax
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x406952
	.globl sub_406952
	.type sub_406952, @function
sub_406952:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406960

	.globl bkm_scale
	.type bkm_scale, @function
bkm_scale:
	movabs	r8, 0x7fffffffffffffff
	mov	rcx, qword ptr [rdi]
	movsxd	r9, esi
	lea	rsi, [r8 + 1]
	mov	rax, rsi
	cqo	
	idiv	r9
	cmp	rcx, rax
	jge	.label_419
	mov	qword ptr [rdi], rsi
	mov	eax, 1
	ret	
.label_419:
	mov	rax, r8
	cqo	
	idiv	r9
	cmp	rax, rcx
	jge	.label_420
	mov	qword ptr [rdi], r8
	mov	eax, 1
	ret	
.label_420:
	imul	rcx, r9
	mov	qword ptr [rdi], rcx
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x4069aa
	.globl sub_4069aa
	.type sub_4069aa, @function
sub_4069aa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4069b0

	.globl bkm_scale_by_power
	.type bkm_scale_by_power, @function
bkm_scale_by_power:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebp, edx
	mov	r14d, esi
	mov	r15, rdi
	xor	ebx, ebx
	test	ebp, ebp
	je	.label_421
	nop	word ptr cs:[rax + rax]
.label_422:
	mov	rdi, r15
	mov	esi, r14d
	call	bkm_scale
	or	ebx, eax
	dec	ebp
	jne	.label_422
.label_421:
	mov	eax, ebx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4069ee
	.globl sub_4069ee
	.type sub_4069ee, @function
sub_4069ee:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4069f0

	.globl xstrtoumax
	.type xstrtoumax, @function
xstrtoumax:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, r8
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	cmp	r14d, 0x25
	jae	.label_445
	mov	qword ptr [rsp], rcx
	call	__errno_location
	mov	r12, rax
	mov	dword ptr [r12], 0
	call	__ctype_b_loc
	mov	rcx, qword ptr [rax]
	mov	rdx, rbx
	nop	word ptr cs:[rax + rax]
.label_440:
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	byte ptr [rcx + rax*2 + 1], 0x20
	jne	.label_440
	test	rbp, rbp
	lea	rcx, [rsp + 0x10]
	cmovne	rcx, rbp
	movzx	eax, al
	mov	r15d, 4
	cmp	eax, 0x2d
	je	.label_428
	mov	rdi, rbx
	mov	rbp, rcx
	mov	rsi, rbp
	mov	edx, r14d
	call	strtoumax
	mov	rcx, rbp
	mov	qword ptr [rsp + 8], rax
	mov	rax, qword ptr [rcx]
	cmp	rax, rbx
	je	.label_447
	mov	eax, dword ptr [r12]
	xor	r12d, r12d
	test	eax, eax
	mov	rbp, r13
	je	.label_426
	cmp	eax, 0x22
	jne	.label_428
	mov	r12d, 1
.label_426:
	test	rbp, rbp
	jne	.label_433
	mov	rax, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rsp]
	jmp	.label_435
.label_447:
	mov	rbp, r13
	test	rbp, rbp
	je	.label_428
	mov	rbx, rcx
	movsx	esi, byte ptr [rax]
	test	esi, esi
	je	.label_428
	mov	rdi, rbp
	call	strchr
	test	rax, rax
	mov	rcx, rbx
	je	.label_428
	mov	qword ptr [rsp + 8], 1
	xor	r12d, r12d
.label_433:
	mov	rax, qword ptr [rcx]
	movsx	ebx, byte ptr [rax]
	test	ebx, ebx
	je	.label_446
	mov	r13, rcx
	mov	rdi, rbp
	mov	esi, ebx
	call	strchr
	test	rax, rax
	je	.label_424
	mov	r15d, 0x400
	mov	r14d, 1
	add	ebx, -0x45
	cmp	ebx, 0x2f
	ja	.label_444
	movabs	rax, 0x814400308945
	bt	rax, rbx
	jae	.label_437
	mov	esi, 0x30
	mov	rdi, rbp
	call	strchr
	mov	r14d, 1
	mov	rbx, r13
	test	rax, rax
	je	.label_425
	mov	rax, qword ptr [rbx]
	movsx	ecx, byte ptr [rax + 1]
	mov	r14d, 1
	cmp	ecx, 0x42
	je	.label_443
	cmp	ecx, 0x44
	je	.label_443
	cmp	ecx, 0x69
	jne	.label_425
	movzx	eax, byte ptr [rax + 2]
	mov	r14d, 3
	cmp	eax, 0x42
	je	.label_425
	mov	r14d, 1
	jmp	.label_425
.label_443:
	mov	r15d, 0x3e8
	mov	r14d, 2
.label_425:
	mov	rax, qword ptr [rbx]
	movsx	eax, byte ptr [rax]
	cmp	eax, 0x59
	jg	.label_431
	lea	ecx, [rax - 0x42]
	cmp	ecx, 0xe
	ja	.label_434
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_438]]
.label_1926:
	lea	rdi, [rsp + 8]
	mov	esi, 0x400
	jmp	.label_439
.label_431:
	cmp	eax, 0x73
	jg	.label_432
	lea	ecx, [rax - 0x62]
	cmp	ecx, 0xb
	ja	.label_441
	xor	eax, eax
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_430]]
.label_1961:
	lea	rdi, [rsp + 8]
	mov	esi, 0x200
	jmp	.label_439
.label_434:
	cmp	eax, 0x54
	je	.label_423
	cmp	eax, 0x59
	jne	.label_424
	lea	rdi, [rsp + 8]
	mov	edx, 8
	jmp	.label_429
.label_432:
	cmp	eax, 0x74
	je	.label_423
	cmp	eax, 0x77
	jne	.label_424
	lea	rdi, [rsp + 8]
	mov	esi, 2
.label_439:
	call	bkm_scale_0
	jmp	.label_436
.label_1928:
	lea	rdi, [rsp + 8]
	mov	edx, 3
	jmp	.label_429
.label_1929:
	lea	rdi, [rsp + 8]
	mov	edx, 1
	jmp	.label_429
.label_1930:
	lea	rdi, [rsp + 8]
	mov	edx, 2
	jmp	.label_429
.label_423:
	lea	rdi, [rsp + 8]
	mov	edx, 4
	jmp	.label_429
.label_441:
	cmp	eax, 0x5a
	jne	.label_424
	lea	rdi, [rsp + 8]
	mov	edx, 7
	jmp	.label_429
.label_424:
	mov	rax, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rsp]
	mov	qword ptr [rcx], rax
	or	r12d, 2
	jmp	.label_442
.label_1927:
	lea	rdi, [rsp + 8]
	mov	edx, 6
	jmp	.label_429
.label_1931:
	lea	rdi, [rsp + 8]
	mov	edx, 5
.label_429:
	mov	esi, r15d
	call	bkm_scale_by_power_0
.label_436:
	or	eax, r12d
	mov	rcx, qword ptr [rbx]
	lea	rdx, [rcx + r14]
	mov	qword ptr [rbx], rdx
	cmp	byte ptr [rcx + r14], 0
	je	.label_427
	or	eax, 2
.label_427:
	mov	r12d, eax
.label_446:
	mov	rcx, qword ptr [rsp]
	mov	rax, qword ptr [rsp + 8]
.label_435:
	mov	qword ptr [rcx], rax
.label_442:
	mov	r15d, r12d
.label_428:
	mov	eax, r15d
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_444:
	mov	rbx, r13
	jmp	.label_425
.label_437:
	mov	rbx, r13
	jmp	.label_425
.label_445:
	mov	edi, OFFSET FLAT:.str_4
	mov	esi, OFFSET FLAT:.str.1_2
	mov	edx, 0x54
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.xstrtoumax
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x406cf1
	.globl sub_406cf1
	.type sub_406cf1, @function
sub_406cf1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406d00

	.globl bkm_scale_0
	.type bkm_scale_0, @function
bkm_scale_0:
	movsxd	rcx, esi
	mov	rsi, -1
	mov	rax, -1
	xor	edx, edx
	div	rcx
	mov	rdx, qword ptr [rdi]
	imul	rcx, rdx
	cmp	rax, rdx
	cmovb	rcx, rsi
	sbb	eax, eax
	and	eax, 1
	mov	qword ptr [rdi], rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x406d2d
	.globl sub_406d2d
	.type sub_406d2d, @function
sub_406d2d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406d30

	.globl bkm_scale_by_power_0
	.type bkm_scale_by_power_0, @function
bkm_scale_by_power_0:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebp, edx
	mov	r14d, esi
	mov	r15, rdi
	xor	ebx, ebx
	test	ebp, ebp
	je	.label_448
	nop	word ptr cs:[rax + rax]
.label_449:
	mov	rdi, r15
	mov	esi, r14d
	call	bkm_scale_0
	or	ebx, eax
	dec	ebp
	jne	.label_449
.label_448:
	mov	eax, ebx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x406d6e
	.globl sub_406d6e
	.type sub_406d6e, @function
sub_406d6e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x406d70

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_450
	test	rsi, rsi
	mov	ecx, 1
	je	.label_451
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_451
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_450:
	mov	ecx, 1
.label_451:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	32
	#Procedure 0x406dbb
	.globl sub_406dbb
	.type sub_406dbb, @function
sub_406dbb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406dc0

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_452
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_454
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_452
.label_454:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_452
	call	__errno_location
	mov	ebp, dword ptr [rax]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_453
	call	__errno_location
	mov	dword ptr [rax], ebp
	mov	eax, 0xffffffff
.label_453:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_452:
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	rbp
	jmp	fclose
	.section	.text
	.align	32
	#Procedure 0x406e37
	.globl sub_406e37
	.type sub_406e37, @function
sub_406e37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406e40

	.globl rpl_fcntl
	.type rpl_fcntl, @function
rpl_fcntl:
	sub	rsp, 0xc8
	test	al, al
	je	.label_455
	movaps	xmmword ptr [rsp + 0x30], xmm0
	movaps	xmmword ptr [rsp + 0x40], xmm1
	movaps	xmmword ptr [rsp + 0x50], xmm2
	movaps	xmmword ptr [rsp + 0x60], xmm3
	movaps	xmmword ptr [rsp + 0x70], xmm4
	movaps	xmmword ptr [rsp + 0x80], xmm5
	movaps	xmmword ptr [rsp + 0x90], xmm6
	movaps	xmmword ptr [rsp + 0xa0], xmm7
.label_455:
	mov	qword ptr [rsp + 0x28], r9
	mov	qword ptr [rsp + 0x20], r8
	mov	qword ptr [rsp + 0x18], rcx
	mov	qword ptr [rsp + 0x10], rdx
	lea	rax, [rsp]
	mov	qword ptr [rsp + 0xc0], rax
	lea	rax, [rsp + 0xd0]
	mov	qword ptr [rsp + 0xb8], rax
	mov	dword ptr [rsp + 0xb4], 0x30
	mov	dword ptr [rsp + 0xb0], 0x10
	cmp	esi, 0xb
	ja	.label_461
	mov	eax, 0xa0a
	bt	eax, esi
	jb	.label_457
	mov	eax, 0x514
	bt	eax, esi
	jb	.label_460
	test	esi, esi
	jne	.label_461
	movsxd	rcx, dword ptr [rsp + 0xb0]
	cmp	rcx, 0x28
	ja	.label_463
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0xc0]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp + 0xb0], ecx
	jmp	.label_465
.label_461:
	lea	eax, [rsi - 0x400]
	cmp	eax, 8
	ja	.label_458
	mov	ecx, 0x85
	bt	ecx, eax
	jb	.label_460
	mov	ecx, 0x102
	bt	ecx, eax
	jae	.label_464
.label_457:
	xor	eax, eax
	call	fcntl
	add	rsp, 0xc8
	ret	
.label_460:
	movsxd	rcx, dword ptr [rsp + 0xb0]
	cmp	rcx, 0x28
	ja	.label_467
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0xc0]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp + 0xb0], ecx
	jmp	.label_456
.label_467:
	mov	rax, qword ptr [rsp + 0xb8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 0xb8], rcx
.label_456:
	mov	edx, dword ptr [rax]
	xor	eax, eax
	call	fcntl
	add	rsp, 0xc8
	ret	
.label_464:
	cmp	eax, 6
	jne	.label_458
	movsxd	rcx, dword ptr [rsp + 0xb0]
	cmp	rcx, 0x28
	ja	.label_459
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0xc0]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp + 0xb0], ecx
	jmp	.label_462
.label_458:
	movsxd	rcx, dword ptr [rsp + 0xb0]
	cmp	rcx, 0x28
	ja	.label_466
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0xc0]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp + 0xb0], ecx
	jmp	.label_468
.label_463:
	mov	rax, qword ptr [rsp + 0xb8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 0xb8], rcx
.label_465:
	mov	esi, dword ptr [rax]
	call	rpl_fcntl_DUPFD
	add	rsp, 0xc8
	ret	
.label_459:
	mov	rax, qword ptr [rsp + 0xb8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 0xb8], rcx
.label_462:
	mov	esi, dword ptr [rax]
	call	rpl_fcntl_DUPFD_CLOEXEC
	add	rsp, 0xc8
	ret	
.label_466:
	mov	rax, qword ptr [rsp + 0xb8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 0xb8], rcx
.label_468:
	mov	rdx, qword ptr [rax]
	xor	eax, eax
	call	fcntl
	add	rsp, 0xc8
	ret	
	.section	.text
	.align	32
	#Procedure 0x407042
	.globl sub_407042
	.type sub_407042, @function
sub_407042:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407050

	.globl rpl_fcntl_DUPFD
	.type rpl_fcntl_DUPFD, @function
rpl_fcntl_DUPFD:
	mov	ecx, esi
	xor	esi, esi
	xor	eax, eax
	mov	edx, ecx
	jmp	fcntl
	.section	.text
	.align	32
	#Procedure 0x40705d
	.globl sub_40705d
	.type sub_40705d, @function
sub_40705d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x407060

	.globl rpl_fcntl_DUPFD_CLOEXEC
	.type rpl_fcntl_DUPFD_CLOEXEC, @function
rpl_fcntl_DUPFD_CLOEXEC:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, esi
	mov	ebp, edi
	cmp	dword ptr [dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec]],  0
	js	.label_469
	mov	esi, 0x406
	xor	eax, eax
	mov	edi, ebp
	mov	edx, r14d
	call	fcntl
	mov	ebx, eax
	test	ebx, ebx
	jns	.label_471
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_471
	mov	edi, ebp
	mov	esi, r14d
	call	rpl_fcntl_DUPFD
	mov	ebx, eax
	test	ebx, ebx
	js	.label_472
	mov	dword ptr [dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec]],  0xffffffff
	jmp	.label_473
.label_471:
	mov	dword ptr [dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec]],  1
	jmp	.label_473
.label_469:
	mov	edi, ebp
	mov	esi, r14d
	call	rpl_fcntl_DUPFD
	mov	ebx, eax
.label_473:
	test	ebx, ebx
	js	.label_472
	cmp	dword ptr [dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec]],  -1
	jne	.label_472
	mov	esi, 1
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	mov	ecx, eax
	test	ecx, ecx
	js	.label_470
	or	ecx, 1
	mov	esi, 2
	xor	eax, eax
	mov	edi, ebx
	mov	edx, ecx
	call	fcntl
	cmp	eax, -1
	jne	.label_472
.label_470:
	call	__errno_location
	mov	rbp, rax
	mov	r14d, dword ptr [rbp]
	mov	edi, ebx
	call	close
	mov	dword ptr [rbp], r14d
	mov	ebx, 0xffffffff
.label_472:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407123
	.globl sub_407123
	.type sub_407123, @function
sub_407123:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x407130

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_474
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_474
	mov	rdi, rbx
	call	clear_ungetc_buffer_preserving_position
.label_474:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	32
	#Procedure 0x407156
	.globl sub_407156
	.type sub_407156, @function
sub_407156:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407160

	.globl clear_ungetc_buffer_preserving_position
	.type clear_ungetc_buffer_preserving_position, @function
clear_ungetc_buffer_preserving_position:
	test	byte ptr [rdi + 1], 1
	jne	.label_475
	ret	
.label_475:
	xor	esi, esi
	mov	edx, 1
	jmp	rpl_fseeko
	.section	.text
	.align	32
	#Procedure 0x407173
	.globl sub_407173
	.type sub_407173, @function
sub_407173:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x407180

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_476
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_476
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_477
.label_476:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_477:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_478
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_478:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4071ee
	.globl sub_4071ee
	.type sub_4071ee, @function
sub_4071ee:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4071f0

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_479
	cmp	r15, -2
	jb	.label_479
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_479
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_479:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x407246
	.globl sub_407246
	.type sub_407246, @function
sub_407246:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407250

	.globl rpl_re_compile_pattern
	.type rpl_re_compile_pattern, @function
rpl_re_compile_pattern:
	push	rax
	mov	r8, rsi
	mov	rsi, rdi
	mov	rcx,  qword ptr [word ptr [rip + rpl_re_syntax_options]]
	mov	al, byte ptr [rdx + 0x38]
	shr	rcx, 0x15
	and	cl, 0x10
	and	al, 0x6f
	or	al, cl
	or	al, 0x80
	mov	byte ptr [rdx + 0x38], al
	mov	rcx,  qword ptr [word ptr [rip + rpl_re_syntax_options]]
	mov	rdi, rdx
	mov	rdx, r8
	call	re_compile_internal
	test	eax, eax
	je	.label_480
	cdqe	
	mov	esi, OFFSET FLAT:__re_error_msgid
	add	rsi,  qword ptr [word ptr [+ (rax * 8) + __re_error_msgid_idx]]
	xor	edi, edi
	mov	edx, 5
	pop	rax
	jmp	dcgettext
.label_480:
	xor	eax, eax
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x4072a7
	.globl sub_4072a7
	.type sub_4072a7, @function
sub_4072a7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4072b0

	.globl re_compile_internal
	.type re_compile_internal, @function
re_compile_internal:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xa8
	mov	r15, rcx
	mov	r12, rdx
	mov	r13, rsi
	mov	rbx, rdi
	mov	dword ptr [rsp + 0xa4], 0
	mov	al, byte ptr [rbx + 0x38]
	mov	qword ptr [rbx + 0x18], r15
	mov	qword ptr [rbx + 0x10], 0
	mov	qword ptr [rbx + 0x30], 0
	and	al, 0x90
	mov	byte ptr [rbx + 0x38], al
	mov	r14, qword ptr [rbx]
	cmp	qword ptr [rbx + 8], 0xe7
	jbe	.label_487
.label_482:
	mov	qword ptr [rbx + 0x10], 0xe8
	mov	rdi, r14
	mov	rsi, r12
	call	init_dfa
	mov	dword ptr [rsp + 0xa4], eax
	test	eax, eax
	jne	.label_484
	mov	rcx, qword ptr [rbx + 0x28]
	mov	ebp, r15d
	and	ebp, 0x400000
	mov	r8, rbp
	shr	r8, 0x16
	lea	rdi, [rsp + 8]
	mov	rsi, r13
	mov	rdx, r12
	mov	r9, r14
	call	re_string_construct
	mov	dword ptr [rsp + 0xa4], eax
	test	eax, eax
	jne	.label_481
	mov	qword ptr [rbx + 0x30], 0
	lea	rdi, [rsp + 8]
	lea	rcx, [rsp + 0xa4]
	mov	rsi, rbx
	mov	rdx, r15
	call	parse
	mov	qword ptr [r14 + 0x68], rax
	test	rax, rax
	je	.label_481
	mov	rdi, rbx
	call	analyze
	mov	dword ptr [rsp + 0xa4], eax
	test	eax, eax
	jne	.label_481
	test	rbp, rbp
	jne	.label_485
	mov	al, byte ptr [r14 + 0xb0]
	and	al, 4
	je	.label_485
	cmp	qword ptr [rbx + 0x28], 0
	jne	.label_485
	mov	rdi, r14
	call	optimize_utf8
.label_485:
	mov	rdi, r14
	call	create_initial_state
	mov	dword ptr [rsp + 0xa4], eax
	mov	rdi, rbx
	call	free_workarea_compile
	lea	rdi, [rsp + 8]
	call	re_string_destruct
	cmp	dword ptr [rsp + 0xa4], 0
	je	.label_483
	jmp	.label_484
.label_481:
	mov	rdi, rbx
	call	free_workarea_compile
	lea	rdi, [rsp + 8]
	call	re_string_destruct
.label_484:
	mov	rdi, r14
	call	free_dfa_content
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx], xmm0
.label_483:
	mov	eax, dword ptr [rsp + 0xa4]
.label_486:
	add	rsp, 0xa8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_487:
	mov	esi, 0xe8
	mov	rdi, r14
	call	realloc
	mov	r14, rax
	mov	eax, 0xc
	test	r14, r14
	je	.label_486
	mov	qword ptr [rbx + 8], 0xe8
	mov	qword ptr [rbx], r14
	jmp	.label_482
	.section	.text
	.align	32
	#Procedure 0x407448
	.globl sub_407448
	.type sub_407448, @function
sub_407448:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407450
	.globl rpl_re_set_syntax
	.type rpl_re_set_syntax, @function
rpl_re_set_syntax:

	mov	rax,  qword ptr [word ptr [rip + rpl_re_syntax_options]]
	mov	qword ptr [word ptr [rip + rpl_re_syntax_options]],  rdi
	ret	
	.section	.text
	.align	32
	#Procedure 0x40745f
	.globl sub_40745f
	.type sub_40745f, @function
sub_40745f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x407460

	.globl rpl_re_compile_fastmap
	.type rpl_re_compile_fastmap, @function
rpl_re_compile_fastmap:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	mov	r15, qword ptr [r14]
	mov	rbx, qword ptr [r14 + 0x20]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0xf0], xmm0
	movups	xmmword ptr [rbx + 0xe0], xmm0
	movups	xmmword ptr [rbx + 0xd0], xmm0
	movups	xmmword ptr [rbx + 0xc0], xmm0
	movups	xmmword ptr [rbx + 0xb0], xmm0
	movups	xmmword ptr [rbx + 0xa0], xmm0
	movups	xmmword ptr [rbx + 0x90], xmm0
	movups	xmmword ptr [rbx + 0x80], xmm0
	movups	xmmword ptr [rbx + 0x70], xmm0
	movups	xmmword ptr [rbx + 0x60], xmm0
	movups	xmmword ptr [rbx + 0x50], xmm0
	movups	xmmword ptr [rbx + 0x40], xmm0
	movups	xmmword ptr [rbx + 0x30], xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	movups	xmmword ptr [rbx + 0x10], xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	rsi, qword ptr [r15 + 0x48]
	mov	rdx, rbx
	call	re_compile_fastmap_iter
	mov	rsi, qword ptr [r15 + 0x50]
	cmp	qword ptr [r15 + 0x48], rsi
	je	.label_488
	mov	rdi, r14
	mov	rdx, rbx
	call	re_compile_fastmap_iter
.label_488:
	mov	rsi, qword ptr [r15 + 0x58]
	cmp	qword ptr [r15 + 0x48], rsi
	je	.label_489
	mov	rdi, r14
	mov	rdx, rbx
	call	re_compile_fastmap_iter
.label_489:
	mov	rsi, qword ptr [r15 + 0x60]
	cmp	qword ptr [r15 + 0x48], rsi
	je	.label_490
	mov	rdi, r14
	mov	rdx, rbx
	call	re_compile_fastmap_iter
.label_490:
	or	byte ptr [r14 + 0x38], 8
	xor	eax, eax
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x407521
	.globl sub_407521
	.type sub_407521, @function
sub_407521:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407530

	.globl re_compile_fastmap_iter
	.type re_compile_fastmap_iter, @function
re_compile_fastmap_iter:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x158
	mov	qword ptr [rsp + 0x38], rdx
	mov	qword ptr [rsp + 0x10], rsi
	mov	rdx, qword ptr [rdi]
	mov	qword ptr [rsp + 0x28], rdx
	cmp	dword ptr [rdx + 0xb4], 1
	jne	.label_504
	mov	r14b, byte ptr [rdi + 0x1a]
	mov	qword ptr [rsp + 0x20], rdi
	and	r14b, 0x40
	shr	r14b, 6
	jmp	.label_508
.label_504:
	mov	qword ptr [rsp + 0x20], rdi
	xor	r14d, r14d
.label_508:
	cmp	qword ptr [rsi + 0x10], 0
	jle	.label_497
	xor	ecx, ecx
	nop	word ptr cs:[rax + rax]
.label_511:
	mov	rax, qword ptr [rsi + 0x18]
	mov	r13, qword ptr [rax + rcx*8]
	mov	rax, qword ptr [rdx]
	mov	rbx, r13
	shl	rbx, 4
	mov	qword ptr [rsp + 0x30], rbx
	movzx	r12d, byte ptr [rax + rbx + 8]
	add	rax, rbx
	cmp	r12d, 6
	je	.label_495
	mov	qword ptr [rsp + 0x18], rcx
	cmp	r12d, 3
	mov	ebp, 0
	mov	r15d, 0
	je	.label_500
	cmp	r12d, 1
	jne	.label_506
	movzx	edi, byte ptr [rax]
	mov	rax, qword ptr [rsp + 0x38]
	mov	byte ptr [rax + rdi], 1
	test	r14b, r14b
	je	.label_510
	mov	rbp, rdx
	call	tolower
	mov	rdx, rbp
	cdqe	
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
.label_510:
	mov	rax, qword ptr [rsp + 0x20]
	test	byte ptr [rax + 0x1a], 0x40
	je	.label_493
	cmp	dword ptr [rdx + 0xb4], 2
	jl	.label_493
	mov	rax, qword ptr [rdx]
	mov	al, byte ptr [rax + rbx]
	mov	byte ptr [rsp + 0x40], al
	inc	r13
	cmp	r13, qword ptr [rdx + 0x10]
	lea	rbp, [rsp + 0x41]
	lea	r15, [rsp + 0x148]
	lea	r12, [rsp + 0x40]
	mov	esi, 0x2000ff
	jae	.label_502
	add	rbx, 0x18
	lea	rbp, [rsp + 0x41]
	nop	word ptr cs:[rax + rax]
.label_507:
	mov	rax, qword ptr [rdx]
	mov	ecx, dword ptr [rax + rbx]
	and	ecx, esi
	cmp	ecx, 0x200001
	jne	.label_502
	mov	al, byte ptr [rax + rbx - 8]
	mov	byte ptr [rbp], al
	inc	rbp
	inc	r13
	add	rbx, 0x10
	cmp	r13, qword ptr [rdx + 0x10]
	jb	.label_507
.label_502:
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x148], 0
	sub	rbp, r12
	lea	rdi, [rsp + 0x154]
	mov	rsi, r12
	mov	rdx, rbp
	mov	rcx, r15
	call	rpl_mbrtowc
	cmp	rax, rbp
	jne	.label_498
	mov	edi, dword ptr [rsp + 0x154]
	call	towlower
	mov	rdi, r12
	mov	esi, eax
	mov	rdx, r15
	call	wcrtomb
	cmp	rax, -1
	je	.label_498
	movzx	eax, byte ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
	jmp	.label_498
	.section	.text
	.align	32
	#Procedure 0x4076ee
	.globl sub_4076ee
	.type sub_4076ee, @function
sub_4076ee:

	nop	
.label_500:
	mov	rax, qword ptr [rdx]
	mov	rax, qword ptr [rax + rbx]
	mov	rbx, qword ptr [rax + rbp*8]
	mov	rax, qword ptr [rsp + 0x38]
	lea	r13, [rax + r15]
	xor	r12d, r12d
	nop	word ptr [rax + rax]
.label_499:
	bt	rbx, r12
	jae	.label_496
	mov	byte ptr [r13 + r12], 1
	test	r14b, r14b
	je	.label_496
	lea	edi, [r15 + r12]
	call	tolower
	cdqe	
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
.label_496:
	inc	r12
	cmp	r12, 0x40
	jne	.label_499
	inc	rbp
	add	r15, 0x40
	cmp	rbp, 4
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rbx, qword ptr [rsp + 0x30]
	jne	.label_500
	jmp	.label_493
	.section	.text
	.align	32
	#Procedure 0x40775a
	.globl sub_40775a
	.type sub_40775a, @function
sub_40775a:

	nop	word ptr [rax + rax]
.label_495:
	mov	r15, qword ptr [rax]
	cmp	dword ptr [rdx + 0xb4], 1
	jle	.label_501
	cmp	qword ptr [r15 + 0x48], 0
	jne	.label_492
	test	byte ptr [r15 + 0x20], 1
	jne	.label_492
	cmp	qword ptr [r15 + 0x40], 0
	je	.label_501
.label_492:
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rcx
	mov	byte ptr [rsp + 0x148], 0
	lea	rbp, [rsp + 0x148]
	mov	r15, rbp
	lea	rbp, [rsp + 0x40]
	nop	dword ptr [rax]
.label_512:
	mov	qword ptr [rsp + 0x40], 0
	xor	edi, edi
	mov	edx, 1
	mov	rsi, r15
	mov	rcx, rbp
	call	rpl_mbrtowc
	cmp	rax, -2
	jne	.label_503
	movzx	eax, byte ptr [rsp + 0x148]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
.label_503:
	inc	byte ptr [rsp + 0x148]
	jne	.label_512
.label_498:
	mov	rdx, rbx
	jmp	.label_493
	.section	.text
	.align	32
	#Procedure 0x4077f3
	.globl sub_4077f3
	.type sub_4077f3, @function
sub_4077f3:

	nop	word ptr cs:[rax + rax]
.label_506:
	cmp	r12d, 2
	je	.label_491
	mov	eax, r12d
	or	eax, 2
	cmp	eax, 7
	jne	.label_493
	jmp	.label_491
.label_501:
	mov	qword ptr [rsp + 0x18], rcx
	cmp	qword ptr [r15 + 0x28], 0
	jle	.label_493
	xor	ebp, ebp
.label_505:
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x148], 0
	mov	rax, qword ptr [r15]
	mov	esi, dword ptr [rax + rbp*4]
	lea	r13, [rsp + 0x40]
	mov	rdi, r13
	lea	r12, [rsp + 0x148]
	mov	rdx, r12
	call	wcrtomb
	cmp	rax, -1
	je	.label_509
	movzx	edi, byte ptr [rsp + 0x40]
	mov	rax, qword ptr [rsp + 0x38]
	mov	byte ptr [rax + rdi], 1
	test	r14b, r14b
	je	.label_509
	call	tolower
	cdqe	
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
.label_509:
	mov	rax, qword ptr [rsp + 0x20]
	test	byte ptr [rax + 0x1a], 0x40
	mov	rdx, rbx
	je	.label_494
	cmp	dword ptr [rdx + 0xb4], 2
	jl	.label_494
	mov	rax, qword ptr [r15]
	mov	edi, dword ptr [rax + rbp*4]
	mov	rbx, rdx
	call	towlower
	mov	rdi, r13
	mov	esi, eax
	mov	rdx, r12
	call	wcrtomb
	mov	rdx, rbx
	cmp	rax, -1
	je	.label_494
	movzx	eax, byte ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	byte ptr [rcx + rax], 1
	nop	
.label_494:
	inc	rbp
	cmp	rbp, qword ptr [r15 + 0x28]
	jl	.label_505
	nop	dword ptr [rax]
.label_493:
	mov	rcx, qword ptr [rsp + 0x18]
	inc	rcx
	mov	rsi, qword ptr [rsp + 0x10]
	cmp	rcx, qword ptr [rsi + 0x10]
	jl	.label_511
.label_497:
	add	rsp, 0x158
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_491:
	mov	esi, 1
	mov	edx, 0x100
	mov	rdi, qword ptr [rsp + 0x38]
	call	memset
	cmp	r12d, 2
	jne	.label_497
	mov	rax, qword ptr [rsp + 0x20]
	or	byte ptr [rax + 0x38], 1
	jmp	.label_497
	.section	.text
	.align	32
	#Procedure 0x40792e
	.globl sub_40792e
	.type sub_40792e, @function
sub_40792e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x407930
	.globl rpl_regcomp
	.type rpl_regcomp, @function
rpl_regcomp:

	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebp, edx
	mov	r14, rsi
	mov	r15, rdi
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15], xmm0
	mov	qword ptr [r15 + 0x10], 0
	mov	edi, 0x100
	call	malloc
	mov	qword ptr [r15 + 0x20], rax
	mov	ebx, 0xc
	test	rax, rax
	je	.label_513
	test	bpl, 1
	mov	eax, 0x3b2fc
	mov	ecx, 0x10102c6
	cmovne	rcx, rax
	mov	ebx, ebp
	and	ebx, 2
	shl	rbx, 0x15
	or	rbx, rcx
	test	bpl, 4
	jne	.label_516
	and	byte ptr [r15 + 0x38], 0x7f
	jmp	.label_514
.label_516:
	and	ebx, 0x143b2be
	or	rbx, 0x100
	or	byte ptr [r15 + 0x38], 0x80
.label_514:
	mov	al, byte ptr [r15 + 0x38]
	add	ebp, ebp
	and	bpl, 0x10
	and	al, 0xef
	or	al, bpl
	mov	byte ptr [r15 + 0x38], al
	mov	qword ptr [r15 + 0x28], 0
	mov	rdi, r14
	call	strlen
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rax
	mov	rcx, rbx
	call	re_compile_internal
	cmp	eax, 0x10
	mov	ebx, 8
	cmovne	ebx, eax
	test	ebx, ebx
	jne	.label_515
	mov	rdi, r15
	call	rpl_re_compile_fastmap
	xor	ebx, ebx
.label_513:
	mov	eax, ebx
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_515:
	mov	rdi, qword ptr [r15 + 0x20]
	call	free
	mov	qword ptr [r15 + 0x20], 0
	jmp	.label_513
	.section	.text
	.align	32
	#Procedure 0x407a14
	.globl sub_407a14
	.type sub_407a14, @function
sub_407a14:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407a20
	.globl rpl_regerror
	.type rpl_regerror, @function
rpl_regerror:

	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r15, rcx
	mov	r14, rdx
	cmp	edi, 0x11
	jae	.label_517
	movsxd	rax, edi
	mov	esi, OFFSET FLAT:__re_error_msgid
	add	rsi,  qword ptr [word ptr [+ (rax * 8) + __re_error_msgid_idx]]
	xor	edi, edi
	mov	edx, 5
	call	dcgettext
	mov	r12, rax
	mov	rdi, r12
	call	strlen
	mov	rbx, rax
	inc	rbx
	test	r15, r15
	je	.label_520
	cmp	rbx, r15
	mov	rdx, rbx
	ja	.label_518
.label_519:
	mov	rdi, r14
	mov	rsi, r12
	call	memcpy
.label_520:
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_518:
	mov	byte ptr [r14 + r15 - 1], 0
	dec	r15
	mov	rdx, r15
	jmp	.label_519
.label_517:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x407a9a
	.globl sub_407a9a
	.type sub_407a9a, @function
sub_407a9a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407aa0
	.globl rpl_regfree
	.type rpl_regfree, @function
rpl_regfree:

	push	rbx
	mov	rbx, rdi
	mov	rdi, qword ptr [rbx]
	test	rdi, rdi
	je	.label_521
	call	free_dfa_content
.label_521:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	rdi, qword ptr [rbx + 0x20]
	call	free
	mov	qword ptr [rbx + 0x20], 0
	mov	rdi, qword ptr [rbx + 0x28]
	call	free
	mov	qword ptr [rbx + 0x28], 0
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x407adb
	.globl sub_407adb
	.type sub_407adb, @function
sub_407adb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407ae0

	.globl free_dfa_content
	.type free_dfa_content, @function
free_dfa_content:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdi
	cmp	qword ptr [r14], 0
	je	.label_529
	xor	r15d, r15d
	cmp	qword ptr [r14 + 0x10], 0
	je	.label_529
	xor	ebx, ebx
	nop	
.label_524:
	mov	rdi, qword ptr [r14]
	add	rdi, r15
	call	free_token
	inc	rbx
	add	r15, 0x10
	cmp	rbx, qword ptr [r14 + 0x10]
	jb	.label_524
.label_529:
	mov	rdi, qword ptr [r14 + 0x18]
	call	free
	cmp	qword ptr [r14 + 0x10], 0
	je	.label_530
	xor	r15d, r15d
	mov	ebx, 0x10
.label_531:
	mov	rax, qword ptr [r14 + 0x30]
	test	rax, rax
	je	.label_532
	mov	rdi, qword ptr [rax + rbx]
	call	free
.label_532:
	mov	rax, qword ptr [r14 + 0x38]
	test	rax, rax
	je	.label_523
	mov	rdi, qword ptr [rax + rbx]
	call	free
.label_523:
	mov	rax, qword ptr [r14 + 0x28]
	test	rax, rax
	je	.label_526
	mov	rdi, qword ptr [rax + rbx]
	call	free
.label_526:
	inc	r15
	add	rbx, 0x18
	cmp	r15, qword ptr [r14 + 0x10]
	jb	.label_531
.label_530:
	mov	rdi, qword ptr [r14 + 0x28]
	call	free
	mov	rdi, qword ptr [r14 + 0x30]
	call	free
	mov	rdi, qword ptr [r14 + 0x38]
	call	free
	mov	rdi, qword ptr [r14]
	call	free
	cmp	qword ptr [r14 + 0x40], 0
	je	.label_527
	xor	r15d, r15d
.label_528:
	mov	rax, qword ptr [r14 + 0x40]
	lea	rcx, [r15 + r15*2]
	lea	r12, [rax + rcx*8 + 0x10]
	cmp	qword ptr [rax + rcx*8], 0
	jle	.label_522
	lea	r13, [rax + rcx*8]
	xor	ebx, ebx
	nop	word ptr [rax + rax]
.label_525:
	mov	rax, qword ptr [r12]
	mov	rdi, qword ptr [rax + rbx*8]
	call	free_state
	inc	rbx
	cmp	rbx, qword ptr [r13]
	jl	.label_525
.label_522:
	mov	rdi, qword ptr [r12]
	call	free
	inc	r15
	cmp	r15, qword ptr [r14 + 0x88]
	jbe	.label_528
.label_527:
	mov	rdi, qword ptr [r14 + 0x40]
	call	free
	mov	rdi, qword ptr [r14 + 0x78]
	mov	eax, OFFSET FLAT:utf8_sb_map
	cmp	rdi, rax
	je	.label_533
	call	free
.label_533:
	mov	rdi, qword ptr [r14 + 0xe0]
	call	free
	mov	rdi, r14
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x407c24
	.globl sub_407c24
	.type sub_407c24, @function
sub_407c24:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407c30
	.globl rpl_regexec
	.type rpl_regexec, @function
rpl_regexec:

	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x20
	mov	ebp, r8d
	mov	r12, rcx
	mov	r15, rdx
	mov	r14, rsi
	mov	rbx, rdi
	mov	eax, 2
	cmp	ebp, 7
	ja	.label_534
	test	bpl, 4
	jne	.label_536
	mov	rdi, r14
	call	strlen
	mov	rdx, rax
	xor	ecx, ecx
	jmp	.label_535
.label_536:
	mov	rcx, qword ptr [r12]
	mov	rdx, qword ptr [r12 + 8]
.label_535:
	test	byte ptr [rbx + 0x38], 0x10
	jne	.label_538
	mov	dword ptr [rsp + 0x10], ebp
	mov	qword ptr [rsp + 8], r12
	mov	qword ptr [rsp], r15
	jmp	.label_537
.label_538:
	mov	dword ptr [rsp + 0x10], ebp
	mov	qword ptr [rsp + 8], 0
	mov	qword ptr [rsp], 0
.label_537:
	mov	rdi, rbx
	mov	rsi, r14
	mov	r8, rdx
	mov	r9, rdx
	call	re_search_internal
	test	eax, eax
	setne	al
	movzx	eax, al
.label_534:
	add	rsp, 0x20
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407cc3
	.globl sub_407cc3
	.type sub_407cc3, @function
sub_407cc3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407cd0

	.globl re_search_internal
	.type re_search_internal, @function
re_search_internal:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x188
	mov	r15, rcx
	mov	r14, rdi
	mov	r12, qword ptr [rsp + 0x1c0]
	mov	rbx, qword ptr [r14]
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x170], xmm0
	movaps	xmmword ptr [rsp + 0x160], xmm0
	movaps	xmmword ptr [rsp + 0x150], xmm0
	movaps	xmmword ptr [rsp + 0x140], xmm0
	movaps	xmmword ptr [rsp + 0x130], xmm0
	movaps	xmmword ptr [rsp + 0x120], xmm0
	movaps	xmmword ptr [rsp + 0x110], xmm0
	movaps	xmmword ptr [rsp + 0x100], xmm0
	movaps	xmmword ptr [rsp + 0xf0], xmm0
	movaps	xmmword ptr [rsp + 0xe0], xmm0
	movaps	xmmword ptr [rsp + 0xd0], xmm0
	movaps	xmmword ptr [rsp + 0xc0], xmm0
	movaps	xmmword ptr [rsp + 0xb0], xmm0
	movaps	xmmword ptr [rsp + 0xa0], xmm0
	movaps	xmmword ptr [rsp + 0x90], xmm0
	movaps	xmmword ptr [rsp + 0x80], xmm0
	mov	qword ptr [rsp + 0x118], rbx
	mov	rax, qword ptr [r14 + 0x20]
	xor	r10d, r10d
	test	rax, rax
	je	.label_597
	mov	cl, byte ptr [r14 + 0x38]
	and	cl, 9
	movzx	ecx, cl
	xor	edi, edi
	cmp	ecx, 8
	cmovne	rax, rdi
	cmp	r15, r8
	cmove	rax, rdi
	mov	r10, rax
.label_597:
	mov	rax, qword ptr [r14 + 0x30]
	lea	rdi, [r12 - 1]
	mov	rcx, rdi
	sub	rcx, rax
	xor	ebp, ebp
	cmp	rax, r12
	cmovb	rbp, rcx
	mov	r13d, 1
	cmp	qword ptr [r14 + 0x10], 0
	je	.label_545
	mov	rax, qword ptr [rbx + 0x48]
	test	rax, rax
	je	.label_545
	mov	rcx, qword ptr [rbx + 0x50]
	test	rcx, rcx
	je	.label_545
	mov	r11, qword ptr [rbx + 0x58]
	test	r11, r11
	je	.label_545
	cmp	qword ptr [rbx + 0x60], 0
	je	.label_545
	mov	qword ptr [rsp + 0x58], r9
	mov	r9, qword ptr [r14 + 0x28]
	cmp	qword ptr [rax + 0x10], 0
	je	.label_540
	mov	qword ptr [rsp + 0x50], r8
	jmp	.label_548
.label_540:
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_552
	mov	qword ptr [rsp + 0x50], r8
.label_548:
	mov	qword ptr [rsp + 0x30], r9
	mov	qword ptr [rsp + 0x48], r10
	mov	qword ptr [rsp + 0x18], rdi
	mov	byte ptr [rsp + 0x67], 1
	cmp	rbp, r12
	jne	.label_555
	cmp	qword ptr [rbx + 0x98], 0
	setne	byte ptr [rsp + 0x67]
.label_555:
	mov	rcx, qword ptr [rbx + 0x10]
	inc	rcx
	mov	r8, qword ptr [r14 + 0x28]
	mov	r9d, 0x400000
	and	r9, qword ptr [r14 + 0x18]
	shr	r9, 0x16
	mov	qword ptr [rsp], rbx
	mov	qword ptr [rsp + 0x78], rbx
	lea	rdi, [rsp + 0x80]
	mov	qword ptr [rsp + 0x68], rsi
	mov	qword ptr [rsp + 0x70], rdx
	call	re_string_allocate
	mov	r13d, eax
	test	r13d, r13d
	jne	.label_550
	mov	esi, dword ptr [rsp + 0x1d0]
	mov	rax, qword ptr [rsp + 0x58]
	mov	qword ptr [rsp + 0xe8], rax
	mov	qword ptr [rsp + 0xe0], rax
	mov	al, byte ptr [r14 + 0x38]
	shr	al, 7
	mov	byte ptr [rsp + 0x10d], al
	mov	rax, qword ptr [rsp + 0x78]
	mov	rdx, qword ptr [rax + 0x98]
	add	rdx, rdx
	lea	rdi, [rsp + 0x80]
	call	match_ctx_init
	mov	r13d, eax
	test	r13d, r13d
	jne	.label_550
	mov	rax, r12
	sub	rax, rbp
	mov	qword ptr [rsp + 0x40], rax
	cmp	rax, 1
	ja	.label_569
	mov	rax, qword ptr [rsp + 0x78]
	test	byte ptr [rax + 0xb0], 2
	jne	.label_569
	mov	qword ptr [rsp + 0x10], rbp
	mov	qword ptr [rsp + 0x138], 0
	jmp	.label_541
.label_569:
	mov	qword ptr [rsp + 0x10], rbp
	mov	rax, qword ptr [rsp + 0xc0]
	mov	r13d, 0xc
	movabs	rcx, 0x1ffffffffffffffe
	cmp	rax, rcx
	ja	.label_550
	lea	rdi, [rax*8 + 8]
	call	malloc
	mov	qword ptr [rsp + 0x138], rax
	test	rax, rax
	je	.label_550
.label_541:
	mov	qword ptr [rsp + 0x180], r15
	mov	eax, dword ptr [rsp + 0x1d0]
	lea	eax, [rax + rax]
	and	eax, 2
	xor	eax, 6
	mov	dword ptr [rsp + 0xf0], eax
	mov	rax, qword ptr [rsp + 0x50]
	cmp	rax, r15
	mov	r11d, 0xffffffff
	mov	ecx, 1
	cmovge	r11d, ecx
	mov	r13, r15
	cmovle	r13, rax
	mov	qword ptr [rsp + 0x28], r13
	mov	rbp, rax
	cmovl	rbp, r15
	mov	qword ptr [rsp + 0x38], rbp
	mov	r8, qword ptr [rsp + 0x78]
	mov	ecx, dword ptr [r8 + 0xb4]
	mov	dword ptr [rsp + 0x58], ecx
	mov	esi, 8
	mov	rdi, qword ptr [rsp + 0x48]
	test	rdi, rdi
	mov	rbx, qword ptr [rsp + 0x30]
	je	.label_566
	cmp	dword ptr [rsp + 0x58], 1
	je	.label_596
	mov	edx, 0x400000
	xor	r9d, r9d
	test	rbx, rbx
	jne	.label_599
	and	rdx, qword ptr [r14 + 0x18]
	jne	.label_599
.label_596:
	mov	r9d, 4
.label_599:
	cmp	r15, rax
	setle	dl
	test	rbx, rbx
	setne	cl
	movzx	ecx, cl
	movzx	edx, dl
	lea	esi, [rcx + rdx*2]
	or	esi, r9d
.label_566:
	mov	rcx, qword ptr [rsp + 0x180]
	cmp	rcx, r13
	mov	rdx, qword ptr [rsp + 0x70]
	mov	r9, qword ptr [rsp + 0x68]
	jl	.label_542
	cmp	rbp, rcx
	jl	.label_591
	xor	r10d, r10d
	cmp	r15, rax
	lea	rcx, [rsp + 0x180]
	cmovg	rcx, r10
	mov	qword ptr [rsp + 0x20], rcx
	movsxd	r15, r11d
	add	esi, -4
	mov	qword ptr [rsp + 0x50], rsi
.label_567:
	cmp	esi, 4
	ja	.label_561
	mov	rax, qword ptr [rsp + 0x50]
	jmp	qword ptr [word ptr [+ (rax * 8) + label_565]]
.label_1936:
	mov	rcx, qword ptr [rsp + 0x180]
	cmp	rcx, r13
	jl	.label_570
	nop	dword ptr [rax]
.label_595:
	xor	eax, eax
	cmp	rcx, rdx
	jge	.label_575
	movzx	eax, byte ptr [r9 + rcx]
.label_575:
	test	rbx, rbx
	je	.label_578
	movzx	eax, byte ptr [rbx + rax]
.label_578:
	cmp	byte ptr [rdi + rax], 0
	jne	.label_570
	mov	rax, qword ptr [rsp + 0x180]
	lea	rcx, [rax - 1]
	mov	qword ptr [rsp + 0x180], rcx
	cmp	rax, r13
	jg	.label_595
.label_570:
	cmp	qword ptr [rsp + 0x180], r13
	jge	.label_572
	jmp	.label_574
	.section	.text
	.align	32
	#Procedure 0x4080b7
	.globl sub_4080b7
	.type sub_4080b7, @function
sub_4080b7:

	nop	word ptr [rax + rax]
.label_583:
	mov	rax, qword ptr [rsp + 0x180]
	add	rax, r15
	mov	qword ptr [rsp + 0x180], rax
	cmp	rax, r13
	jl	.label_574
	cmp	rax, rbp
	jle	.label_561
	jmp	.label_574
.label_564:
	mov	qword ptr [rsp + 0x30], r15
	mov	qword ptr [rsp + 0x38], rbp
	mov	qword ptr [rsp + 0x28], r13
	mov	r15, r9
	mov	rbp, rdx
	mov	qword ptr [rsp + 0x78], r8
	lea	rdi, [rsp + 0x80]
	mov	edx, dword ptr [rsp + 0x1d0]
	call	re_string_reconstruct
	mov	r13d, eax
	test	r13d, r13d
	jne	.label_550
	mov	rax, qword ptr [rsp + 0x180]
	sub	rax, qword ptr [rsp + 0xa8]
	mov	r8, qword ptr [rsp + 0x78]
	mov	rdx, rbp
	mov	r9, r15
	mov	rdi, qword ptr [rsp + 0x48]
	mov	r13, qword ptr [rsp + 0x28]
	mov	rbp, qword ptr [rsp + 0x38]
	mov	r15, qword ptr [rsp + 0x30]
	jmp	.label_553
	.section	.text
	.align	32
	#Procedure 0x408151
	.globl sub_408151
	.type sub_408151, @function
sub_408151:

	nop	word ptr cs:[rax + rax]
.label_561:
	mov	rsi, qword ptr [rsp + 0x180]
	mov	rax, rsi
	sub	rax, qword ptr [rsp + 0xa8]
	cmp	rax, qword ptr [rsp + 0xb8]
	jae	.label_564
.label_553:
	cmp	qword ptr [rsp + 0x180], rdx
	mov	ecx, 0
	jge	.label_544
	mov	rcx, qword ptr [rsp + 0x88]
	movzx	ecx, byte ptr [rcx + rax]
.label_544:
	cmp	byte ptr [rdi + rcx], 0
	je	.label_583
	jmp	.label_572
.label_1937:
	mov	rax, qword ptr [rsp + 0x180]
	jmp	.label_585
	.section	.text
	.align	32
	#Procedure 0x4081b2
	.globl sub_4081b2
	.type sub_4081b2, @function
sub_4081b2:

	nop	word ptr cs:[rax + rax]
.label_576:
	inc	rax
	mov	qword ptr [rsp + 0x180], rax
.label_585:
	cmp	rax, rbp
	jge	.label_594
	movzx	ecx, byte ptr [r9 + rax]
	cmp	byte ptr [rdi + rcx], 0
	je	.label_576
	jmp	.label_594
.label_1938:
	mov	rax, qword ptr [rsp + 0x180]
	jmp	.label_601
	.section	.text
	.align	32
	#Procedure 0x4081e7
	.globl sub_4081e7
	.type sub_4081e7, @function
sub_4081e7:

	nop	word ptr [rax + rax]
.label_539:
	inc	rax
	mov	qword ptr [rsp + 0x180], rax
.label_601:
	cmp	rax, rbp
	jge	.label_594
	movzx	ecx, byte ptr [r9 + rax]
	movzx	ecx, byte ptr [rbx + rcx]
	cmp	byte ptr [rdi + rcx], 0
	je	.label_539
.label_594:
	mov	rcx, qword ptr [rsp + 0x180]
	cmp	rcx, rbp
	je	.label_547
.label_572:
	mov	rbp, rdi
	mov	rsi, qword ptr [rsp + 0x180]
	lea	rdi, [rsp + 0x80]
	mov	edx, dword ptr [rsp + 0x1d0]
	call	re_string_reconstruct
	test	eax, eax
	jne	.label_558
	cmp	dword ptr [rsp + 0x58], 1
	je	.label_559
	mov	rcx, qword ptr [rsp + 0xb0]
	test	rcx, rcx
	je	.label_559
	mov	rcx, qword ptr [rsp + 0x90]
	cmp	dword ptr [rcx], -1
	je	.label_602
.label_559:
	mov	dword ptr [rsp + 0x30], eax
	mov	dword ptr [rsp + 0x160], 0
	lea	rax, [rsp + 0x140]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax], xmm0
	movzx	esi, byte ptr [rsp + 0x67]
	lea	rdi, [rsp + 0x80]
	mov	rdx, qword ptr [rsp + 0x20]
	call	check_matching
	cmp	rax, -1
	je	.label_584
	mov	r13d, 0xc
	cmp	rax, -2
	je	.label_550
	mov	qword ptr [rsp + 0x128], rax
	cmp	qword ptr [rsp + 0x40], 2
	jb	.label_568
	mov	cl, byte ptr [r14 + 0x38]
	and	cl, 0x10
	je	.label_593
.label_568:
	mov	rcx, qword ptr [rsp + 0x78]
	cmp	qword ptr [rcx + 0x98], 0
	je	.label_598
.label_593:
	mov	rcx, qword ptr [rsp + 0x138]
	mov	rsi, qword ptr [rcx + rax*8]
	lea	rdi, [rsp + 0x80]
	mov	rdx, rax
	call	check_halt_state_context
	mov	qword ptr [rsp + 0x130], rax
.label_598:
	cmp	qword ptr [rsp + 0x40], 2
	jb	.label_543
	mov	al, byte ptr [r14 + 0x38]
	and	al, 0x10
	jne	.label_543
	mov	rax, qword ptr [rsp + 0x78]
	test	byte ptr [rax + 0xb0], 1
	jne	.label_551
.label_543:
	mov	rax, qword ptr [rsp + 0x78]
	cmp	qword ptr [rax + 0x98], 0
	je	.label_554
.label_551:
	lea	rdi, [rsp + 0x80]
	call	prune_impossible_nodes
	mov	r13d, eax
	mov	dword ptr [rsp + 0x30], 0
	test	r13d, r13d
	je	.label_554
	cmp	r13d, 1
	jne	.label_550
.label_584:
	lea	rdi, [rsp + 0x80]
	call	match_ctx_clean
	mov	r13, qword ptr [rsp + 0x28]
.label_602:
	mov	rax, qword ptr [rsp + 0x180]
	add	rax, r15
	mov	qword ptr [rsp + 0x180], rax
	cmp	rax, r13
	mov	rdi, rbp
	jl	.label_590
	mov	rbp, qword ptr [rsp + 0x38]
	cmp	rbp, rax
	mov	r8, qword ptr [rsp + 0x78]
	mov	rdx, qword ptr [rsp + 0x70]
	mov	r9, qword ptr [rsp + 0x68]
	mov	rsi, qword ptr [rsp + 0x50]
	jge	.label_567
	jmp	.label_587
.label_547:
	xor	eax, eax
	cmp	rcx, rdx
	jge	.label_589
	movzx	eax, byte ptr [r9 + rcx]
.label_589:
	test	rbx, rbx
	je	.label_592
	movzx	eax, byte ptr [rbx + rax]
.label_592:
	cmp	byte ptr [rdi + rax], 0
	jne	.label_572
.label_574:
	mov	qword ptr [rsp + 0x78], r8
	mov	r13d, 1
	jmp	.label_550
.label_542:
	mov	r13d, 1
	jmp	.label_550
.label_591:
	mov	r13d, 1
	jmp	.label_550
.label_554:
	mov	rdx, qword ptr [rsp + 0x10]
	cmp	rdx, r12
	je	.label_549
	cmp	qword ptr [rsp + 0x40], 2
	mov	rsi, qword ptr [rsp + 0x1c8]
	jb	.label_546
	mov	rax, qword ptr [rsp + 0x18]
	sub	rax, rdx
	lea	rcx, [rsi + 0x10]
.label_604:
	mov	qword ptr [rcx + 8], -1
	mov	qword ptr [rcx], -1
	add	rcx, 0x10
	dec	rax
	jne	.label_604
.label_546:
	mov	rbx, rdx
	mov	qword ptr [rsi], 0
	mov	rax, qword ptr [rsp + 0x128]
	mov	qword ptr [rsi + 8], rax
	mov	rbp, rsi
	cmp	qword ptr [rsp + 0x40], 2
	jb	.label_562
	mov	al, byte ptr [r14 + 0x38]
	and	al, 0x10
	jne	.label_562
	mov	dword ptr [rsp + 0x30], 0
	mov	rcx, qword ptr [rsp + 0x78]
	test	byte ptr [rcx + 0xb0], 1
	mov	eax, 0
	je	.label_582
	cmp	qword ptr [rcx + 0x98], 0
	setg	al
.label_582:
	movzx	r8d, al
	lea	rsi, [rsp + 0x80]
	mov	rdi, r14
	mov	rdx, qword ptr [rsp + 0x40]
	mov	rcx, rbp
	call	set_regs
	mov	r13d, eax
	test	r13d, r13d
	jne	.label_550
.label_562:
	mov	rdx, rbx
	cmp	rdx, r12
	je	.label_588
	mov	al, byte ptr [rsp + 0x10c]
	lea	r8, [rsp + 0xb8]
	mov	r9, qword ptr [rsp + 0x98]
	lea	rsi, [rbp + 8]
	mov	rdi, qword ptr [rsp + 0x40]
	jmp	.label_577
.label_552:
	cmp	qword ptr [r11 + 0x10], 0
	je	.label_571
	cmp	byte ptr [r14 + 0x38], 0
	js	.label_581
.label_571:
	xor	eax, eax
	mov	qword ptr [rsp + 0x50], rax
	test	r15, r15
	je	.label_605
	test	r8, r8
	mov	r15d, 0
	jne	.label_545
	jmp	.label_548
.label_558:
	mov	r13d, eax
	jmp	.label_550
.label_586:
	cmp	rbx, qword ptr [rsp + 0xb0]
	mov	rcx, r8
	je	.label_573
	lea	rcx, [r9 + rbx*8]
.label_573:
	mov	rcx, qword ptr [rcx]
	mov	qword ptr [rsi - 8], rcx
	mov	rbx, qword ptr [rsi]
	cmp	rbx, qword ptr [rsp + 0xb0]
	mov	rcx, r8
	je	.label_557
	lea	rcx, [r9 + rbx*8]
.label_557:
	mov	rcx, qword ptr [rcx]
	mov	qword ptr [rsi], rcx
	jmp	.label_563
.label_577:
	mov	rbx, qword ptr [rsi - 8]
	cmp	rbx, -1
	je	.label_580
	test	al, al
	jne	.label_586
.label_563:
	mov	rcx, qword ptr [rsp + 0x180]
	add	qword ptr [rsi - 8], rcx
	add	qword ptr [rsi], rcx
.label_580:
	add	rsi, 0x10
	dec	rdi
	jne	.label_577
.label_588:
	test	rdx, rdx
	mov	rbx, qword ptr [rsp + 0x18]
	jle	.label_579
	sub	r12, rdx
	shl	r12, 4
	add	r12, rbp
	mov	rax, rdx
	nop	word ptr cs:[rax + rax]
.label_603:
	mov	qword ptr [r12 + 8], -1
	mov	qword ptr [r12], -1
	add	r12, 0x10
	dec	rax
	jne	.label_603
.label_579:
	mov	rdi, qword ptr [rsp + 0x78]
	cmp	qword ptr [rdi + 0xe0], 0
	je	.label_549
	cmp	qword ptr [rsp + 0x40], 2
	jb	.label_549
	mov	rax, qword ptr [rdi + 0xe0]
	sub	rbx, rdx
	lea	rcx, [rbp + 0x18]
	xor	edx, edx
.label_600:
	mov	rsi, qword ptr [rax + rdx*8]
	cmp	rdx, rsi
	je	.label_560
	shl	rsi, 4
	mov	rsi, qword ptr [rsi + rbp + 0x10]
	mov	qword ptr [rcx - 8], rsi
	mov	rsi, qword ptr [rdi + 0xe0]
	mov	rsi, qword ptr [rsi + rdx*8]
	shl	rsi, 4
	mov	rsi, qword ptr [rsi + rbp + 0x18]
	mov	qword ptr [rcx], rsi
.label_560:
	inc	rdx
	add	rcx, 0x10
	cmp	rbx, rdx
	jne	.label_600
.label_549:
	mov	r13d, dword ptr [rsp + 0x30]
.label_550:
	mov	rdi, qword ptr [rsp + 0x138]
	call	free
	mov	rax, qword ptr [rsp + 0x78]
	cmp	qword ptr [rax + 0x98], 0
	je	.label_556
	lea	rdi, [rsp + 0x80]
	call	match_ctx_free
.label_556:
	lea	rdi, [rsp + 0x80]
	call	re_string_destruct
.label_545:
	mov	eax, r13d
	add	rsp, 0x188
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_581:
	mov	qword ptr [rsp + 0x50], r8
	jmp	.label_548
.label_605:
	xor	r15d, r15d
	jmp	.label_548
.label_590:
	mov	r13d, 1
	jmp	.label_550
.label_587:
	mov	r13d, 1
	jmp	.label_550
	.section	.text
	.align	32
	#Procedure 0x40868c
	.globl sub_40868c
	.type sub_40868c, @function
sub_40868c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408690
	.globl rpl_re_match
	.type rpl_re_match, @function
rpl_re_match:

	sub	rsp, 0x18
	mov	qword ptr [rsp], r8
	mov	dword ptr [rsp + 8], 1
	xor	r8d, r8d
	mov	r9, rdx
	call	re_search_stub
	add	rsp, 0x18
	ret	
	.section	.text
	.align	32
	#Procedure 0x4086b0

	.globl re_search_stub
	.type re_search_stub, @function
re_search_stub:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	test	rcx, rcx
	mov	r14, -1
	js	.label_608
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], r9
	cmp	rcx, rdx
	jg	.label_608
	mov	r14, qword ptr [rsp + 0x80]
	xor	r15d, r15d
	add	r8, rcx
	cmovns	r15, r8
	cmp	r8, rdx
	cmovg	r15, rdx
	movzx	r12d, byte ptr [rdi + 0x38]
	cmp	r15, rcx
	jle	.label_606
	test	r12b, 8
	jne	.label_606
	mov	rax, qword ptr [rdi + 0x20]
	test	rax, rax
	je	.label_606
	mov	rbp, rdi
	mov	r13, rcx
	mov	rbx, rdx
	call	rpl_re_compile_fastmap
	mov	rdx, rbx
	mov	rdi, rbp
	mov	rcx, r13
.label_606:
	xor	esi, esi
	test	r14, r14
	mov	ebx, 1
	je	.label_613
	mov	qword ptr [rsp + 0x38], rdx
	mov	qword ptr [rsp + 0x40], rcx
	mov	al, byte ptr [rdi + 0x38]
	mov	cl, al
	and	cl, 0x10
	jne	.label_612
	and	al, 6
	movzx	eax, al
	cmp	eax, 4
	jne	.label_616
	mov	rax, qword ptr [r14]
	cmp	rax, qword ptr [rdi + 0x30]
	jbe	.label_609
.label_616:
	mov	rbx, qword ptr [rdi + 0x30]
	inc	rbx
.label_614:
	mov	rsi, r14
	jmp	.label_612
.label_613:
	mov	qword ptr [rsp + 0x38], rdx
	mov	qword ptr [rsp + 0x40], rcx
.label_612:
	mov	qword ptr [rsp + 0x20], rsi
	mov	rbp, rdi
	mov	rdi, rbx
	shl	rdi, 4
	call	malloc
	mov	r13, rax
	mov	r14, -2
	test	r13, r13
	mov	rcx, qword ptr [rsp + 0x40]
	mov	rdx, qword ptr [rsp + 0x38]
	je	.label_608
	mov	al, r12b
	shr	al, 5
	and	al, 1
	and	r12d, 0x40
	movzx	eax, al
	shr	r12d, 5
	or	r12d, eax
	mov	dword ptr [rsp + 0x10], r12d
	mov	qword ptr [rsp + 8], r13
	mov	r14, rbx
	mov	qword ptr [rsp], r14
	mov	rdi, rbp
	mov	rsi, qword ptr [rsp + 0x28]
	mov	rbx, rcx
	mov	r8, r15
	mov	r9, qword ptr [rsp + 0x30]
	call	re_search_internal
	test	eax, eax
	je	.label_611
	cmp	eax, 1
	sete	al
	movzx	r14d, al
	or	r14, 0xfffffffffffffffe
	jmp	.label_610
.label_611:
	mov	rdx, r14
	mov	rdi, qword ptr [rsp + 0x20]
	test	rdi, rdi
	je	.label_615
	mov	al, byte ptr [rbp + 0x38]
	shr	al, 1
	and	al, 3
	movzx	ecx, al
	mov	rsi, r13
	call	re_copy_regs
	mov	cl, byte ptr [rbp + 0x38]
	add	al, al
	and	cl, 0xf9
	mov	dl, al
	and	dl, 6
	or	dl, cl
	and	al, 6
	mov	byte ptr [rbp + 0x38], dl
	mov	r14, -2
	je	.label_610
.label_615:
	mov	al, byte ptr [rsp + 0x88]
	mov	r14, qword ptr [r13]
	test	al, al
	je	.label_610
	cmp	r14, rbx
	jne	.label_607
	mov	r14, qword ptr [r13 + 8]
	sub	r14, rbx
.label_610:
	mov	rdi, r13
	call	free
.label_608:
	mov	rax, r14
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_609:
	xor	ecx, ecx
	test	rax, rax
	cmovle	r14, rcx
	mov	ebx, 1
	cmovg	rbx, rax
	jmp	.label_614
.label_607:
	mov	edi, OFFSET FLAT:.str.21_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x1be
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.re_search_stub
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x40889c
	.globl sub_40889c
	.type sub_40889c, @function
sub_40889c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4088a0

	.globl rpl_re_search
	.type rpl_re_search, @function
rpl_re_search:
	sub	rsp, 0x18
	mov	qword ptr [rsp], r9
	mov	dword ptr [rsp + 8], 0
	mov	r9, rdx
	call	re_search_stub
	add	rsp, 0x18
	ret	
	.section	.text
	.align	32
	#Procedure 0x4088bd
	.globl sub_4088bd
	.type sub_4088bd, @function
sub_4088bd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4088c0
	.globl rpl_re_match_2
	.type rpl_re_match_2, @function
rpl_re_match_2:

	sub	rsp, 0x28
	mov	r10, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rsp + 0x38]
	mov	qword ptr [rsp + 0x10], rax
	mov	qword ptr [rsp + 8], r10
	mov	dword ptr [rsp + 0x18], 1
	mov	qword ptr [rsp], 0
	call	re_search_2_stub
	add	rsp, 0x28
	ret	
	.section	.text
	.align	32
	#Procedure 0x4088f2
	.globl sub_4088f2
	.type sub_4088f2, @function
sub_4088f2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408900

	.globl re_search_2_stub
	.type re_search_2_stub, @function
re_search_2_stub:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, r8
	mov	r15, rcx
	mov	r14, rdx
	mov	r13, rsi
	mov	rbp, qword ptr [rsp + 0x70]
	mov	rax, rbx
	or	rax, r14
	or	rax, rbp
	js	.label_617
	movabs	rax, 0x7fffffffffffffff
	test	rbx, rbx
	js	.label_620
	sub	rax, rbx
	cmp	rax, r14
	jl	.label_617
	lea	rdx, [rbx + r14]
	xor	r12d, r12d
	test	rbx, rbx
	jle	.label_618
	mov	qword ptr [rsp + 0x18], rdi
	mov	qword ptr [rsp + 0x20], r9
	xor	r12d, r12d
	test	r14, r14
	jle	.label_622
	mov	rdi, rdx
	mov	qword ptr [rsp + 0x10], rdx
	call	malloc
	mov	r12, rax
	test	r12, r12
	mov	rax, qword ptr [rsp + 0x20]
	mov	rbp, qword ptr [rsp + 0x18]
	je	.label_617
	mov	rdi, r12
	mov	rsi, r13
	mov	rdx, r14
	mov	r13, rax
	call	memcpy
	mov	rdi, r12
	add	rdi, r14
	mov	rsi, r15
	mov	rdx, rbx
	call	memcpy
	mov	rdi, rbp
	mov	rbp, qword ptr [rsp + 0x70]
	mov	r9, r13
	mov	r13, r12
	mov	rdx, qword ptr [rsp + 0x10]
	jmp	.label_618
.label_620:
	inc	rax
	sub	rax, rbx
	cmp	rax, r14
	jle	.label_619
.label_617:
	mov	rax, -2
	jmp	.label_621
.label_619:
	add	rbx, r14
	xor	r12d, r12d
	mov	rdx, rbx
	jmp	.label_618
.label_622:
	mov	r13, r15
	mov	r9, qword ptr [rsp + 0x20]
	mov	rdi, qword ptr [rsp + 0x18]
.label_618:
	mov	rax, qword ptr [rsp + 0x68]
	mov	r8, qword ptr [rsp + 0x60]
	movzx	ecx, byte ptr [rsp + 0x78]
	mov	dword ptr [rsp + 8], ecx
	mov	qword ptr [rsp], rax
	mov	rsi, r13
	mov	rcx, r9
	mov	r9, rbp
	call	re_search_stub
	mov	rbx, rax
	mov	rdi, r12
	call	free
	mov	rax, rbx
.label_621:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408a33
	.globl sub_408a33
	.type sub_408a33, @function
sub_408a33:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408a40
	.globl rpl_re_search_2
	.type rpl_re_search_2, @function
rpl_re_search_2:

	sub	rsp, 0x28
	mov	r10, qword ptr [rsp + 0x30]
	mov	r11, qword ptr [rsp + 0x38]
	mov	rax, qword ptr [rsp + 0x40]
	mov	qword ptr [rsp + 0x10], rax
	mov	qword ptr [rsp + 8], r11
	mov	qword ptr [rsp], r10
	mov	dword ptr [rsp + 0x18], 0
	call	re_search_2_stub
	add	rsp, 0x28
	ret	
	.section	.text
	.align	32
	#Procedure 0x408a73
	.globl sub_408a73
	.type sub_408a73, @function
sub_408a73:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408a80
	.globl rpl_re_set_registers
	.type rpl_re_set_registers, @function
rpl_re_set_registers:

	mov	al, byte ptr [rdi + 0x38]
	and	al, 0xf9
	test	rdx, rdx
	je	.label_623
	or	al, 2
	mov	byte ptr [rdi + 0x38], al
	mov	qword ptr [rsi], rdx
	mov	qword ptr [rsi + 8], rcx
	mov	qword ptr [rsi + 0x10], r8
	ret	
.label_623:
	mov	byte ptr [rdi + 0x38], al
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsi], xmm0
	mov	qword ptr [rsi + 0x10], 0
	ret	
	.section	.text
	.align	32
	#Procedure 0x408aad
	.globl sub_408aad
	.type sub_408aad, @function
sub_408aad:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408ab0

	.globl free_token
	.type free_token, @function
free_token:
	mov	eax, dword ptr [rdi + 8]
	and	eax, 0x400ff
	cmp	eax, 6
	jne	.label_624
	mov	rdi, qword ptr [rdi]
	jmp	free_charset
.label_624:
	cmp	eax, 3
	jne	.label_625
	mov	rdi, qword ptr [rdi]
	jmp	free
.label_625:
	ret	
	.section	.text
	.align	32
	#Procedure 0x408ad0

	.globl free_state
	.type free_state, @function
free_state:
	push	rbx
	mov	rbx, rdi
	mov	rdi, qword ptr [rbx + 0x30]
	call	free
	mov	rdi, qword ptr [rbx + 0x48]
	call	free
	mov	rax, qword ptr [rbx + 0x50]
	lea	rcx, [rbx + 8]
	cmp	rax, rcx
	je	.label_626
	mov	rdi, qword ptr [rax + 0x10]
	call	free
	mov	rdi, qword ptr [rbx + 0x50]
	call	free
.label_626:
	mov	rdi, qword ptr [rbx + 0x18]
	call	free
	mov	rdi, qword ptr [rbx + 0x60]
	call	free
	mov	rdi, qword ptr [rbx + 0x58]
	call	free
	mov	rdi, rbx
	pop	rbx
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x408b29
	.globl sub_408b29
	.type sub_408b29, @function
sub_408b29:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408b30

	.globl free_charset
	.type free_charset, @function
free_charset:
	push	rbx
	mov	rbx, rdi
	mov	rdi, qword ptr [rbx]
	call	free
	mov	rdi, qword ptr [rbx + 8]
	call	free
	mov	rdi, qword ptr [rbx + 0x10]
	call	free
	mov	rdi, qword ptr [rbx + 0x18]
	call	free
	mov	rdi, rbx
	pop	rbx
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x408b60

	.globl init_dfa
	.type init_dfa, @function
init_dfa:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	rbp, rsi
	mov	r15, rdi
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0xd0], xmm0
	movups	xmmword ptr [r15 + 0xc0], xmm0
	movups	xmmword ptr [r15 + 0xb0], xmm0
	movups	xmmword ptr [r15 + 0xa0], xmm0
	movups	xmmword ptr [r15 + 0x90], xmm0
	movups	xmmword ptr [r15 + 0x80], xmm0
	movups	xmmword ptr [r15 + 0x70], xmm0
	movups	xmmword ptr [r15 + 0x60], xmm0
	movups	xmmword ptr [r15 + 0x50], xmm0
	movups	xmmword ptr [r15 + 0x40], xmm0
	movups	xmmword ptr [r15 + 0x30], xmm0
	movups	xmmword ptr [r15 + 0x20], xmm0
	movups	xmmword ptr [r15 + 0x10], xmm0
	movups	xmmword ptr [r15], xmm0
	mov	qword ptr [r15 + 0xe0], 0
	mov	dword ptr [r15 + 0x80], 0xf
	mov	r14d, 0xc
	movabs	rax, 0x555555555555554
	cmp	rbp, rax
	ja	.label_632
	lea	rdi, [rbp + 1]
	mov	qword ptr [r15 + 8], rdi
	shl	rdi, 4
	call	malloc
	mov	qword ptr [r15], rax
	mov	eax, 1
.label_630:
	mov	rbx, rax
	lea	rax, [rbx + rbx]
	cmp	rbx, rbp
	jbe	.label_630
	mov	edi, 0x18
	mov	rsi, rbx
	call	rpl_calloc
	mov	qword ptr [r15 + 0x40], rax
	dec	rbx
	mov	qword ptr [r15 + 0x88], rbx
	call	__ctype_get_mb_cur_max
	mov	dword ptr [r15 + 0xb4], eax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	mov	cl, byte ptr [rax]
	or	cl, 0x20
	movzx	ecx, cl
	cmp	ecx, 0x75
	jne	.label_629
	mov	cl, byte ptr [rax + 1]
	or	cl, 0x20
	movzx	ecx, cl
	cmp	ecx, 0x74
	jne	.label_629
	mov	cl, byte ptr [rax + 2]
	or	cl, 0x20
	movzx	ecx, cl
	cmp	ecx, 0x66
	jne	.label_629
	movzx	ecx, byte ptr [rax + 3]
	cmp	ecx, 0x2d
	sete	cl
	movzx	ecx, cl
	movzx	edx, byte ptr [rax + rcx + 3]
	cmp	edx, 0x38
	jne	.label_629
	cmp	byte ptr [rax + rcx + 4], 0
	jne	.label_629
	or	byte ptr [r15 + 0xb0], 4
.label_629:
	mov	al, byte ptr [r15 + 0xb0]
	mov	cl, al
	and	cl, 0xf7
	mov	byte ptr [r15 + 0xb0], cl
	cmp	dword ptr [r15 + 0xb4], 2
	jl	.label_627
	test	al, 4
	jne	.label_636
	mov	edi, 0x20
	mov	esi, 1
	call	rpl_calloc
	mov	qword ptr [r15 + 0x78], rax
	xor	r12d, r12d
	test	rax, rax
	je	.label_632
	xor	r14d, r14d
	nop	word ptr [rax + rax]
.label_635:
	xor	ebp, ebp
	mov	ebx, r14d
	nop	word ptr cs:[rax + rax]
.label_634:
	mov	edi, ebx
	call	btowc
	cmp	eax, -1
	je	.label_628
	mov	edx, 1
	mov	cl, bpl
	shl	rdx, cl
	mov	rcx, qword ptr [r15 + 0x78]
	or	qword ptr [rcx + r12*8], rdx
.label_628:
	cmp	ebx, 0x7f
	ja	.label_633
	cmp	ebx, eax
	je	.label_633
	or	byte ptr [r15 + 0xb0], 8
.label_633:
	inc	rbp
	inc	ebx
	cmp	rbp, 0x40
	jne	.label_634
	add	r14d, 0x40
	inc	r12
	cmp	r12, 4
	jne	.label_635
	jmp	.label_627
.label_636:
	mov	qword ptr [word ptr [r15 + 120]], OFFSET FLAT:utf8_sb_map
.label_627:
	cmp	qword ptr [r15], 0
	je	.label_631
	xor	r14d, r14d
	cmp	qword ptr [r15 + 0x40], 0
	jne	.label_632
.label_631:
	mov	r14d, 0xc
.label_632:
	mov	eax, r14d
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408d74
	.globl sub_408d74
	.type sub_408d74, @function
sub_408d74:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408d80

	.globl re_string_construct
	.type re_string_construct, @function
re_string_construct:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, r9
	mov	r13d, r8d
	mov	r12, rcx
	mov	r15, rdx
	mov	rbp, rsi
	mov	rbx, rdi
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x80], xmm0
	movups	xmmword ptr [rbx + 0x70], xmm0
	movups	xmmword ptr [rbx + 0x60], xmm0
	movups	xmmword ptr [rbx + 0x50], xmm0
	movups	xmmword ptr [rbx + 0x40], xmm0
	movups	xmmword ptr [rbx + 0x30], xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	movups	xmmword ptr [rbx + 0x10], xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 0x90], 0
	movzx	r8d, r13b
	mov	rdi, rbp
	mov	rsi, r15
	mov	rdx, rbx
	call	re_string_construct_common
	test	r15, r15
	jle	.label_642
	lea	rsi, [r15 + 1]
	mov	rdi, rbx
	call	re_string_realloc_buffers
	test	eax, eax
	jne	.label_638
.label_642:
	cmp	byte ptr [rbx + 0x8b], 0
	je	.label_645
	mov	rbp, qword ptr [rbx + 8]
.label_645:
	mov	qword ptr [rbx + 8], rbp
	mov	eax, dword ptr [r14 + 0xb4]
	test	r13b, r13b
	je	.label_637
	cmp	eax, 2
	jl	.label_641
	nop	
.label_639:
	mov	rdi, rbx
	call	build_wcs_upper_buffer
	test	eax, eax
	jne	.label_638
	xor	eax, eax
	cmp	qword ptr [rbx + 0x38], r15
	jge	.label_638
	mov	rsi, qword ptr [rbx + 0x40]
	movsxd	rcx, dword ptr [r14 + 0xb4]
	add	rcx, qword ptr [rbx + 0x30]
	cmp	rsi, rcx
	jg	.label_638
	add	rsi, rsi
	mov	rdi, rbx
	call	re_string_realloc_buffers
	test	eax, eax
	je	.label_639
	jmp	.label_638
.label_637:
	cmp	eax, 2
	jl	.label_640
	mov	rdi, rbx
	call	build_wcs_buffer
	jmp	.label_643
.label_641:
	mov	rdi, rbx
	call	build_upper_buffer
	jmp	.label_643
.label_640:
	test	r12, r12
	je	.label_644
	mov	rdi, rbx
	call	re_string_translate_buffer
	jmp	.label_643
.label_644:
	mov	rax, qword ptr [rbx + 0x40]
	mov	qword ptr [rbx + 0x30], rax
	mov	qword ptr [rbx + 0x38], rax
.label_643:
	xor	eax, eax
.label_638:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408e9e
	.globl sub_408e9e
	.type sub_408e9e, @function
sub_408e9e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x408ea0

	.globl free_workarea_compile
	.type free_workarea_compile, @function
free_workarea_compile:
	push	r14
	push	rbx
	push	rax
	mov	r14, qword ptr [rdi]
	mov	rdi, qword ptr [r14 + 0x70]
	test	rdi, rdi
	je	.label_646
.label_647:
	mov	rbx, qword ptr [rdi]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_647
.label_646:
	mov	qword ptr [r14 + 0x70], 0
	mov	dword ptr [r14 + 0x80], 0xf
	mov	qword ptr [r14 + 0x68], 0
	mov	rdi, qword ptr [r14 + 0x20]
	call	free
	mov	qword ptr [r14 + 0x20], 0
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x408ef4
	.globl sub_408ef4
	.type sub_408ef4, @function
sub_408ef4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408f00

	.globl re_string_destruct
	.type re_string_destruct, @function
re_string_destruct:
	push	rbx
	mov	rbx, rdi
	mov	rdi, qword ptr [rbx + 0x10]
	call	free
	mov	rdi, qword ptr [rbx + 0x18]
	call	free
	cmp	byte ptr [rbx + 0x8b], 0
	je	.label_648
	mov	rdi, qword ptr [rbx + 8]
	pop	rbx
	jmp	free
.label_648:
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x408f2b
	.globl sub_408f2b
	.type sub_408f2b, @function
sub_408f2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408f30

	.globl parse
	.type parse, @function
parse:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, rcx
	mov	rbx, rdx
	mov	r13, rsi
	mov	rbp, rdi
	mov	r15, qword ptr [r13]
	mov	qword ptr [r15 + 0xd8], rbx
	or	rdx, 0x800000
	lea	rdi, [rsp + 8]
	mov	rsi, rbp
	call	fetch_token
	xor	r12d, r12d
	xor	r8d, r8d
	mov	rdi, rbp
	mov	rsi, r13
	lea	rdx, [rsp + 8]
	mov	rcx, rbx
	mov	r9, r14
	call	parse_reg_exp
	mov	rbx, rax
	test	rbx, rbx
	jne	.label_651
	mov	eax, dword ptr [r14]
	test	eax, eax
	jne	.label_650
.label_651:
	xor	esi, esi
	xor	edx, edx
	mov	ecx, 2
	mov	rdi, r15
	call	create_tree
	mov	r13, rax
	test	rbx, rbx
	je	.label_653
	mov	ecx, 0x10
	mov	rdi, r15
	mov	rsi, rbx
	mov	rdx, r13
	call	create_tree
	mov	r12, rax
	jmp	.label_649
.label_653:
	mov	r12, r13
.label_649:
	test	r13, r13
	je	.label_652
	test	r12, r12
	je	.label_652
.label_650:
	mov	rax, r12
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_652:
	mov	dword ptr [r14], 0xc
	xor	r12d, r12d
	jmp	.label_650
	.section	.text
	.align	32
	#Procedure 0x408ff0

	.globl analyze
	.type analyze, @function
analyze:
	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	mov	rbx, qword ptr [r14]
	mov	rdi, qword ptr [rbx + 8]
	shl	rdi, 3
	call	malloc
	mov	qword ptr [rbx + 0x18], rax
	mov	rdi, qword ptr [rbx + 8]
	shl	rdi, 3
	call	malloc
	mov	qword ptr [rbx + 0x20], rax
	mov	rax, qword ptr [rbx + 8]
	shl	rax, 3
	lea	rdi, [rax + rax*2]
	call	malloc
	mov	qword ptr [rbx + 0x28], rax
	mov	rax, qword ptr [rbx + 8]
	shl	rax, 3
	lea	rdi, [rax + rax*2]
	call	malloc
	mov	rcx, rax
	mov	qword ptr [rbx + 0x30], rcx
	mov	eax, 0xc
	cmp	qword ptr [rbx + 0x18], 0
	je	.label_654
	cmp	qword ptr [rbx + 0x20], 0
	je	.label_654
	test	rcx, rcx
	je	.label_654
	mov	rcx, qword ptr [rbx + 0x28]
	test	rcx, rcx
	je	.label_654
	mov	rdi, qword ptr [r14 + 0x30]
	shl	rdi, 3
	call	malloc
	mov	qword ptr [rbx + 0xe0], rax
	test	rax, rax
	je	.label_660
	cmp	qword ptr [r14 + 0x30], 0
	je	.label_656
	mov	rax, qword ptr [rbx + 0xe0]
	xor	ecx, ecx
	nop	word ptr cs:[rax + rax]
.label_658:
	mov	qword ptr [rax + rcx*8], rcx
	inc	rcx
	cmp	rcx, qword ptr [r14 + 0x30]
	jb	.label_658
.label_656:
	mov	rdi, qword ptr [rbx + 0x68]
	mov	esi, OFFSET FLAT:optimize_subexps
	mov	rdx, rbx
	call	preorder
	xor	eax, eax
	cmp	qword ptr [r14 + 0x30], 0
	je	.label_655
	mov	rcx, qword ptr [rbx + 0xe0]
	xor	eax, eax
.label_659:
	cmp	rax, qword ptr [rcx + rax*8]
	jne	.label_655
	inc	rax
	cmp	rax, qword ptr [r14 + 0x30]
	jb	.label_659
.label_655:
	cmp	rax, qword ptr [r14 + 0x30]
	jne	.label_660
	mov	rdi, qword ptr [rbx + 0xe0]
	call	free
	mov	qword ptr [rbx + 0xe0], 0
.label_660:
	mov	rdi, qword ptr [rbx + 0x68]
	mov	esi, OFFSET FLAT:lower_subexps
	mov	rdx, r14
	call	postorder
	test	eax, eax
	jne	.label_654
	mov	rdi, qword ptr [rbx + 0x68]
	mov	esi, OFFSET FLAT:calc_first
	mov	rdx, rbx
	call	postorder
	test	eax, eax
	jne	.label_654
	mov	rdi, qword ptr [rbx + 0x68]
	mov	esi, OFFSET FLAT:calc_next
	mov	rdx, rbx
	call	preorder
	mov	rdi, qword ptr [rbx + 0x68]
	mov	esi, OFFSET FLAT:link_nfa_nodes
	mov	rdx, rbx
	call	preorder
	test	eax, eax
	jne	.label_654
	mov	rdi, rbx
	call	calc_eclosure
	test	eax, eax
	jne	.label_654
	test	byte ptr [r14 + 0x38], 0x10
	jne	.label_661
	cmp	qword ptr [r14 + 0x30], 0
	je	.label_661
	test	byte ptr [rbx + 0xb0], 1
	jne	.label_657
.label_661:
	xor	eax, eax
	cmp	qword ptr [rbx + 0x98], 0
	je	.label_654
.label_657:
	mov	rax, qword ptr [rbx + 0x10]
	shl	rax, 3
	lea	rdi, [rax + rax*2]
	call	malloc
	mov	qword ptr [rbx + 0x38], rax
	test	rax, rax
	mov	eax, 0xc
	je	.label_654
	mov	rdi, rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	jmp	calc_inveclosure
.label_654:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x4091c9
	.globl sub_4091c9
	.type sub_4091c9, @function
sub_4091c9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4091d0

	.globl optimize_utf8
	.type optimize_utf8, @function
optimize_utf8:
	cmp	qword ptr [rdi + 0x10], 0
	je	.label_670
	mov	r11, qword ptr [rdi]
	xor	r9d, r9d
	movabs	r8, 0x1000000010001
	xor	r10d, r10d
	xor	eax, eax
.label_674:
	mov	rsi, rax
	shl	rsi, 4
	movzx	edx, byte ptr [r11 + rsi + 8]
	dec	edx
	cmp	edx, 0xb
	ja	.label_675
	lea	rcx, [r11 + rsi]
	jmp	qword ptr [word ptr [+ (rdx * 8) + label_667]]
.label_1939:
	mov	dl, 1
	cmp	byte ptr [rcx], 0
	js	.label_671
	mov	dl, r10b
.label_671:
	mov	r10b, dl
	jmp	.label_664
.label_1940:
	mov	rcx, qword ptr [rdi]
	mov	rsi, qword ptr [rcx + rsi]
	mov	edx, 2
	nop	
.label_663:
	cmp	qword ptr [rsi + rdx*8], 0
	jne	.label_666
	inc	rdx
	cmp	rdx, 3
	jle	.label_663
	jmp	.label_664
.label_1941:
	mov	r9b, 1
	jmp	.label_664
.label_1942:
	mov	edx, dword ptr [rcx]
	lea	ecx, [rdx - 0x10]
	cmp	ecx, 0x30
	ja	.label_668
	bt	r8, rcx
	jb	.label_664
.label_668:
	cmp	edx, 0x80
	jne	.label_666
	nop	word ptr [rax + rax]
.label_664:
	inc	rax
	cmp	rax, qword ptr [rdi + 0x10]
	jb	.label_674
	jmp	.label_676
.label_670:
	xor	r9d, r9d
	xor	r10d, r10d
.label_676:
	mov	r8b, r9b
	and	r8b, 1
	or	r10b, r9b
	test	r10b, 1
	je	.label_665
	cmp	qword ptr [rdi + 0x10], 0
	je	.label_665
	xor	eax, eax
	mov	edx, 8
	nop	word ptr cs:[rax + rax]
.label_673:
	mov	rsi, qword ptr [rdi]
	mov	r9d, dword ptr [rsi + rdx]
	movzx	ecx, r9b
	cmp	ecx, 1
	jne	.label_669
	cmp	byte ptr [rsi + rdx - 8], 0
	js	.label_662
.label_669:
	mov	r9, qword ptr [rdi]
	mov	esi, dword ptr [r9 + rdx]
	movzx	ecx, sil
	cmp	ecx, 5
	jne	.label_672
	and	esi, 0xffffff00
	or	esi, 7
	mov	dword ptr [r9 + rdx], esi
	jmp	.label_672
.label_662:
	and	r9d, 0xffdfffff
	mov	dword ptr [rsi + rdx], r9d
	nop	word ptr cs:[rax + rax]
.label_672:
	inc	rax
	add	rdx, 0x10
	cmp	rax, qword ptr [rdi + 0x10]
	jb	.label_673
.label_665:
	mov	dword ptr [rdi + 0xb4], 1
	mov	al, byte ptr [rdi + 0xb0]
	cmp	qword ptr [rdi + 0x98], 0
	setg	cl
	or	cl, r8b
	add	cl, cl
	and	al, 0xf9
	or	al, cl
	mov	byte ptr [rdi + 0xb0], al
.label_666:
	ret	
.label_675:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x40933e
	.globl sub_40933e
	.type sub_40933e, @function
sub_40933e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409340

	.globl create_initial_state
	.type create_initial_state, @function
create_initial_state:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x20
	mov	r15, rdi
	mov	rax, qword ptr [r15 + 0x68]
	mov	rax, qword ptr [rax + 0x18]
	mov	rax, qword ptr [rax + 0x38]
	mov	qword ptr [r15 + 0x90], rax
	mov	rcx, qword ptr [r15 + 0x30]
	lea	rax, [rax + rax*2]
	lea	rsi, [rcx + rax*8]
	lea	rdi, [rsp]
	call	re_node_set_init_copy
	mov	dword ptr [rsp + 0x1c], eax
	test	eax, eax
	jne	.label_679
	cmp	qword ptr [r15 + 0x98], 0
	jle	.label_678
	cmp	qword ptr [rsp + 8], 0
	jle	.label_678
	xor	r13d, r13d
	lea	r14, [rsp]
	nop	word ptr cs:[rax + rax]
.label_685:
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8, qword ptr [rax + r13*8]
	mov	rax, qword ptr [r15]
	mov	r10, r8
	shl	r10, 4
	movzx	r9d, byte ptr [rax + r10 + 8]
	cmp	r9d, 4
	jne	.label_681
	cmp	qword ptr [rsp + 8], 0
	mov	esi, 0
	jle	.label_682
	mov	rdi, qword ptr [r15]
	mov	rax, qword ptr [rsp + 8]
	mov	rcx, qword ptr [rsp + 0x10]
	add	r10, rdi
	xor	esi, esi
	nop	word ptr cs:[rax + rax]
.label_683:
	mov	rbx, qword ptr [rcx + rsi*8]
	shl	rbx, 4
	movzx	edx, byte ptr [rdi + rbx + 8]
	cmp	edx, 9
	jne	.label_677
	mov	rdx, qword ptr [rdi + rbx]
	cmp	rdx, qword ptr [r10]
	je	.label_682
.label_677:
	inc	rsi
	cmp	rsi, rax
	jl	.label_683
.label_682:
	cmp	r9d, 4
	setne	al
	cmp	rsi, qword ptr [rsp + 8]
	je	.label_681
	test	al, al
	jne	.label_681
	mov	rax, qword ptr [r15 + 0x28]
	lea	rcx, [r8 + r8*2]
	mov	rax, qword ptr [rax + rcx*8 + 0x10]
	mov	r12, qword ptr [rax]
	mov	rdi, r14
	mov	rsi, r12
	call	re_node_set_contains
	test	rax, rax
	jne	.label_681
	mov	rax, qword ptr [r15 + 0x30]
	lea	rcx, [r12 + r12*2]
	lea	rsi, [rax + rcx*8]
	mov	rdi, r14
	call	re_node_set_merge
	test	eax, eax
	mov	r13d, 0
	jne	.label_679
	nop	word ptr [rax + rax]
.label_681:
	inc	r13
	cmp	r13, qword ptr [rsp + 8]
	jl	.label_685
.label_678:
	lea	rdi, [rsp + 0x1c]
	lea	rdx, [rsp]
	xor	ecx, ecx
	mov	rsi, r15
	call	re_acquire_state_context
	mov	qword ptr [r15 + 0x48], rax
	test	rax, rax
	je	.label_684
	cmp	byte ptr [rax + 0x68], 0
	js	.label_686
	mov	qword ptr [r15 + 0x60], rax
	mov	qword ptr [r15 + 0x58], rax
	mov	qword ptr [r15 + 0x50], rax
	jmp	.label_687
.label_686:
	lea	rbx, [rsp + 0x1c]
	lea	r14, [rsp]
	mov	ecx, 1
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, r14
	call	re_acquire_state_context
	mov	qword ptr [r15 + 0x50], rax
	mov	ecx, 2
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, r14
	call	re_acquire_state_context
	mov	qword ptr [r15 + 0x58], rax
	mov	ecx, 6
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, r14
	call	re_acquire_state_context
	mov	qword ptr [r15 + 0x60], rax
	cmp	qword ptr [r15 + 0x50], 0
	je	.label_680
	test	rax, rax
	je	.label_680
	mov	rax, qword ptr [r15 + 0x58]
	test	rax, rax
	je	.label_680
.label_687:
	mov	rdi, qword ptr [rsp + 0x10]
	call	free
	xor	eax, eax
.label_679:
	add	rsp, 0x20
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
.label_680:
	mov	eax, dword ptr [rsp + 0x1c]
	jmp	.label_679
.label_684:
	mov	eax, dword ptr [rsp + 0x1c]
	jmp	.label_679
	.section	.text
	.align	32
	#Procedure 0x40954b
	.globl sub_40954b
	.type sub_40954b, @function
sub_40954b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409550

	.globl re_string_construct_common
	.type re_string_construct_common, @function
re_string_construct_common:
	mov	qword ptr [rdx], rdi
	mov	qword ptr [rdx + 0x58], rsi
	mov	qword ptr [rdx + 0x50], rsi
	mov	qword ptr [rdx + 0x78], rcx
	mov	byte ptr [rdx + 0x88], r8b
	test	rcx, rcx
	setne	al
	or	al, r8b
	mov	byte ptr [rdx + 0x8b], al
	mov	eax, dword ptr [r9 + 0xb4]
	mov	dword ptr [rdx + 0x90], eax
	mov	al, byte ptr [r9 + 0xb0]
	shr	al, 2
	and	al, 1
	mov	byte ptr [rdx + 0x89], al
	mov	al, byte ptr [r9 + 0xb0]
	shr	al, 3
	and	al, 1
	mov	byte ptr [rdx + 0x8a], al
	mov	rax, qword ptr [rdx + 0x58]
	mov	qword ptr [rdx + 0x68], rax
	mov	qword ptr [rdx + 0x60], rax
	ret	
	.section	.text
	.align	32
	#Procedure 0x4095b3
	.globl sub_4095b3
	.type sub_4095b3, @function
sub_4095b3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4095c0

	.globl re_string_realloc_buffers
	.type re_string_realloc_buffers, @function
re_string_realloc_buffers:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rsi
	mov	rbx, rdi
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_688
	mov	rax, r14
	shr	rax, 0x3d
	mov	ebp, 0xc
	jne	.label_689
	mov	rdi, qword ptr [rbx + 0x10]
	lea	rsi, [r14*4]
	call	realloc
	test	rax, rax
	je	.label_689
	mov	qword ptr [rbx + 0x10], rax
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_688
	lea	rsi, [r14*8]
	call	realloc
	test	rax, rax
	je	.label_689
	mov	qword ptr [rbx + 0x18], rax
.label_688:
	cmp	byte ptr [rbx + 0x8b], 0
	je	.label_690
	mov	rdi, qword ptr [rbx + 8]
	mov	rsi, r14
	call	realloc
	mov	ebp, 0xc
	test	rax, rax
	je	.label_689
	mov	qword ptr [rbx + 8], rax
.label_690:
	mov	qword ptr [rbx + 0x40], r14
	xor	ebp, ebp
.label_689:
	mov	eax, ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40964a
	.globl sub_40964a
	.type sub_40964a, @function
sub_40964a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409650

	.globl build_wcs_upper_buffer
	.type build_wcs_upper_buffer, @function
build_wcs_upper_buffer:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x78
	mov	r15, rdi
	mov	r13, qword ptr [r15 + 0x30]
	mov	rbx, qword ptr [r15 + 0x40]
	mov	rax, qword ptr [r15 + 0x58]
	cmp	rbx, rax
	cmovg	rbx, rax
	cmp	byte ptr [r15 + 0x8a], 0
	jne	.label_706
	cmp	qword ptr [r15 + 0x78], 0
	jne	.label_706
	cmp	byte ptr [r15 + 0x8c], 0
	je	.label_713
.label_706:
	mov	r12, qword ptr [r15 + 0x38]
	jmp	.label_697
.label_713:
	cmp	rbx, r13
	jle	.label_716
	lea	r14, [r15 + 0x20]
	jmp	.label_696
.label_714:
	mov	r12, rcx
	lea	rax, [rbx + 1]
	cmp	rax, 2
	jb	.label_720
	cmp	rbx, -2
	jne	.label_724
	mov	rax, qword ptr [r15 + 0x40]
	cmp	rax, qword ptr [r15 + 0x58]
	jl	.label_724
.label_720:
	mov	rax, qword ptr [r15 + 0x28]
	add	rax, r13
	mov	rcx, qword ptr [r15]
	mov	rdx, qword ptr [r15 + 8]
	movzx	eax, byte ptr [rcx + rax]
	mov	byte ptr [rdx + r13], al
	mov	rcx, qword ptr [r15 + 0x10]
	mov	dword ptr [rcx + r13*4], eax
	inc	r13
	cmp	rbx, -1
	jne	.label_730
	mov	rax, qword ptr [rsp + 0x70]
	mov	qword ptr [r14], rax
	jmp	.label_730
	.section	.text
	.align	32
	#Procedure 0x4096fd
	.globl sub_4096fd
	.type sub_4096fd, @function
sub_4096fd:

	nop	dword ptr [rax]
.label_696:
	mov	rax, qword ptr [r15 + 0x28]
	add	rax, r13
	mov	rcx, qword ptr [r15]
	movzx	ebp, byte ptr [rcx + rax]
	test	bpl, bpl
	js	.label_691
	mov	rdi, r14
	call	mbsinit
	test	eax, eax
	je	.label_691
	mov	r12, rbx
	call	__ctype_toupper_loc
	mov	rax, qword ptr [rax]
	mov	al, byte ptr [rax + rbp*4]
	mov	rcx, qword ptr [r15 + 8]
	mov	byte ptr [rcx + r13], al
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 0x10]
	movzx	eax, byte ptr [rax + r13]
	mov	dword ptr [rcx + r13*4], eax
	inc	r13
.label_730:
	mov	rax, r13
	jmp	.label_703
	.section	.text
	.align	32
	#Procedure 0x409751
	.globl sub_409751
	.type sub_409751, @function
sub_409751:

	nop	word ptr cs:[rax + rax]
.label_691:
	mov	rdx, rbx
	sub	rdx, r13
	mov	rax, qword ptr [r15 + 0x20]
	mov	qword ptr [rsp + 0x70], rax
	mov	rsi, qword ptr [r15]
	add	rsi, qword ptr [r15 + 0x28]
	add	rsi, r13
	lea	rdi, [rsp + 0x2c]
	mov	rcx, r14
	call	rpl_mbrtowc
	mov	rcx, rbx
	mov	rbx, rax
	lea	rax, [rbx - 1]
	cmp	rax, -4
	lea	rbp, [rsp + 0x30]
	ja	.label_714
	mov	qword ptr [rsp + 0x20], rcx
	mov	edi, dword ptr [rsp + 0x2c]
	call	towupper
	mov	r12d, eax
	cmp	r12d, dword ptr [rsp + 0x2c]
	jne	.label_722
	mov	rdi, qword ptr [r15 + 8]
	add	rdi, r13
	mov	rsi, qword ptr [r15]
	add	rsi, qword ptr [r15 + 0x28]
	add	rsi, r13
	jmp	.label_725
.label_722:
	mov	rdi, rbp
	mov	esi, r12d
	lea	rdx, [rsp + 0x70]
	call	wcrtomb
	cmp	rbx, rax
	jne	.label_732
	mov	rdi, qword ptr [r15 + 8]
	add	rdi, r13
	mov	rsi, rbp
.label_725:
	mov	rdx, rbx
	call	memcpy
	mov	rax, qword ptr [r15 + 0x10]
	mov	dword ptr [rax + r13*4], r12d
	lea	rbp, [rbx + r13]
	lea	rax, [r13 + 1]
	cmp	rax, rbp
	mov	r12, qword ptr [rsp + 0x20]
	jge	.label_703
	mov	rax, qword ptr [r15 + 0x10]
	lea	rdi, [rax + r13*4 + 4]
	lea	rdx, [rbx*4 - 4]
	mov	esi, 0xff
	call	memset
	mov	rax, rbp
.label_703:
	mov	rbx, r12
	cmp	rbx, rax
	mov	r13, rax
	jg	.label_696
	jmp	.label_699
.label_732:
	mov	r12, r13
	mov	rbx, qword ptr [rsp + 0x20]
	jmp	.label_700
.label_724:
	mov	rax, qword ptr [rsp + 0x70]
	mov	qword ptr [r14], rax
.label_716:
	mov	rax, r13
.label_699:
	mov	qword ptr [r15 + 0x30], rax
	mov	qword ptr [r15 + 0x38], rax
	jmp	.label_705
.label_697:
	cmp	r13, rbx
	jge	.label_708
.label_700:
	mov	rdx, rbx
	sub	rdx, r13
	lea	rcx, [r15 + 0x20]
	mov	rax, qword ptr [r15 + 0x20]
	mov	qword ptr [rsp + 0x70], rax
	cmp	qword ptr [r15 + 0x78], 0
	jne	.label_709
	mov	rbp, qword ptr [r15]
	add	rbp, qword ptr [r15 + 0x28]
	add	rbp, r12
.label_693:
	mov	qword ptr [rsp + 0x18], r12
	lea	rdi, [rsp + 0x28]
	mov	rsi, rbp
	mov	qword ptr [rsp + 0x10], rcx
	call	rpl_mbrtowc
	mov	r14, rax
	lea	r12, [r14 - 1]
	cmp	r12, -4
	ja	.label_717
	mov	qword ptr [rsp + 0x20], rbx
	mov	edi, dword ptr [rsp + 0x28]
	call	towupper
	mov	ebx, eax
	cmp	ebx, dword ptr [rsp + 0x28]
	je	.label_726
	lea	rdi, [rsp + 0x30]
	lea	rdx, [rsp + 0x70]
	mov	esi, ebx
	call	wcrtomb
	mov	rdx, rax
	sub	rax, r14
	jne	.label_734
	mov	rdi, qword ptr [r15 + 8]
	add	rdi, r13
	lea	rsi, [rsp + 0x30]
	jmp	.label_736
.label_709:
	lea	rbp, [rsp + 0x30]
	cmp	dword ptr [r15 + 0x90], 0
	jle	.label_693
	xor	eax, eax
	nop	word ptr [rax + rax]
.label_695:
	cmp	rax, rdx
	jge	.label_693
	mov	rdi, qword ptr [r15]
	mov	r8, qword ptr [r15 + 0x78]
	add	rdi, qword ptr [r15 + 0x28]
	add	rdi, r12
	movzx	edi, byte ptr [rax + rdi]
	mov	rsi, rbx
	mov	bl, byte ptr [r8 + rdi]
	mov	byte ptr [rsp + rax + 0x30], bl
	mov	rbx, rsi
	inc	rax
	movsxd	rsi, dword ptr [r15 + 0x90]
	cmp	rax, rsi
	jl	.label_695
	jmp	.label_693
.label_717:
	lea	rax, [r14 + 1]
	cmp	rax, 2
	jb	.label_704
	cmp	r14, -2
	jne	.label_707
	mov	rax, qword ptr [r15 + 0x40]
	cmp	rax, qword ptr [r15 + 0x58]
	jl	.label_707
.label_704:
	mov	rax, qword ptr [r15 + 0x28]
	mov	r12, qword ptr [rsp + 0x18]
	add	rax, r12
	mov	rdx, qword ptr [r15]
	mov	rcx, qword ptr [r15 + 0x78]
	mov	al, byte ptr [rdx + rax]
	movzx	edx, al
	test	rcx, rcx
	jne	.label_710
.label_718:
	movzx	eax, al
	mov	rcx, qword ptr [r15 + 8]
	mov	byte ptr [rcx + r13], al
	cmp	byte ptr [r15 + 0x8c], 0
	jne	.label_698
.label_721:
	inc	r12
	mov	rcx, qword ptr [r15 + 0x10]
	mov	dword ptr [rcx + r13*4], eax
	inc	r13
	cmp	r14, -1
	je	.label_719
	mov	rbp, r13
	jmp	.label_697
.label_734:
	cmp	rdx, -1
	je	.label_726
	lea	rbp, [rdx + r13]
	mov	rdi, qword ptr [r15 + 0x40]
	cmp	rbp, rdi
	jbe	.label_728
.label_707:
	mov	rax, qword ptr [rsp + 0x70]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	qword ptr [rcx], rax
	mov	r12, qword ptr [rsp + 0x18]
.label_708:
	mov	qword ptr [r15 + 0x30], r13
	mov	qword ptr [r15 + 0x38], r12
.label_705:
	xor	eax, eax
.label_729:
	add	rsp, 0x78
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_726:
	mov	rdi, qword ptr [r15 + 8]
	add	rdi, r13
	mov	rsi, rbp
.label_736:
	mov	rdx, r14
	call	memcpy
	mov	r12, qword ptr [rsp + 0x18]
	cmp	byte ptr [r15 + 0x8c], 0
	je	.label_694
	lea	rax, [r13*8]
	add	rax, qword ptr [r15 + 0x18]
	mov	rcx, r12
	mov	rdx, r14
	nop	word ptr [rax + rax]
.label_702:
	mov	qword ptr [rax], rcx
	inc	rcx
	add	rax, 8
	dec	rdx
	jne	.label_702
.label_694:
	add	r12, r14
	mov	rax, qword ptr [r15 + 0x10]
	mov	dword ptr [rax + r13*4], ebx
	lea	rbp, [r14 + r13]
	lea	rax, [r13 + 1]
	cmp	rax, rbp
	jge	.label_733
	mov	rax, qword ptr [r15 + 0x10]
	lea	rdi, [rax + r13*4 + 4]
	lea	rdx, [r14*4 - 4]
	mov	esi, 0xff
	call	memset
	jmp	.label_712
.label_733:
	mov	rbp, rax
.label_712:
	mov	rbx, qword ptr [rsp + 0x20]
	mov	r13, rbp
	jmp	.label_697
.label_728:
	cmp	qword ptr [r15 + 0x18], 0
	jne	.label_715
	shl	rdi, 3
	mov	qword ptr [rsp + 8], rax
	mov	qword ptr [rsp + 0x20], rdx
	call	malloc
	mov	rdx, qword ptr [rsp + 0x20]
	mov	qword ptr [r15 + 0x18], rax
	test	rax, rax
	mov	rax, qword ptr [rsp + 8]
	je	.label_723
.label_715:
	mov	qword ptr [rsp + 8], rax
	cmp	byte ptr [r15 + 0x8c], 0
	jne	.label_727
	test	r13, r13
	je	.label_731
	mov	rax, qword ptr [r15 + 0x18]
	xor	ecx, ecx
.label_701:
	mov	qword ptr [rax + rcx*8], rcx
	inc	rcx
	cmp	r13, rcx
	jne	.label_701
.label_731:
	mov	byte ptr [r15 + 0x8c], 1
.label_727:
	mov	rdi, qword ptr [r15 + 8]
	add	rdi, r13
	lea	rsi, [rsp + 0x30]
	mov	qword ptr [rsp + 0x20], rdx
	call	memcpy
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [r15 + 0x10]
	mov	dword ptr [rax + r13*4], ebx
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [rsp + 0x18]
	mov	qword ptr [rax + r13*8], rsi
	cmp	rdi, 2
	jb	.label_692
	lea	rax, [r13*4]
	add	rax, qword ptr [r15 + 0x10]
	shl	r13, 3
	add	r13, qword ptr [r15 + 0x18]
	mov	ecx, 1
	nop	word ptr cs:[rax + rax]
.label_735:
	cmp	rcx, r14
	mov	rdx, r12
	cmovb	rdx, rcx
	add	rdx, rsi
	mov	qword ptr [r13 + rcx*8], rdx
	mov	dword ptr [rax + rcx*4], 0xffffffff
	inc	rcx
	cmp	rdi, rcx
	jne	.label_735
.label_692:
	mov	rax, qword ptr [rsp + 8]
	add	qword ptr [r15 + 0x58], rax
	cmp	qword ptr [r15 + 0x60], rsi
	mov	r12, rsi
	jle	.label_711
	add	qword ptr [r15 + 0x68], rax
.label_711:
	mov	rbx, qword ptr [r15 + 0x40]
	mov	rax, qword ptr [r15 + 0x58]
	cmp	rbx, rax
	cmovg	rbx, rax
	add	r12, r14
	mov	r13, rbp
	jmp	.label_697
.label_710:
	mov	al, byte ptr [rcx + rdx]
	jmp	.label_718
.label_698:
	mov	rcx, qword ptr [r15 + 0x18]
	mov	qword ptr [rcx + r13*8], r12
	jmp	.label_721
.label_719:
	mov	rax, qword ptr [rsp + 0x70]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	qword ptr [rcx], rax
	mov	rbp, r13
	jmp	.label_697
.label_723:
	mov	eax, 0xc
	jmp	.label_729
	.section	.text
	.align	32
	#Procedure 0x409bd5
	.globl sub_409bd5
	.type sub_409bd5, @function
sub_409bd5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409be0

	.globl build_upper_buffer
	.type build_upper_buffer, @function
build_upper_buffer:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	mov	rbx, qword ptr [r14 + 0x30]
	mov	r15, qword ptr [r14 + 0x40]
	mov	rax, qword ptr [r14 + 0x58]
	cmp	r15, rax
	cmovg	r15, rax
	cmp	rbx, r15
	jge	.label_737
	jmp	.label_739
.label_740:
	mov	cl, byte ptr [rax + rdx]
	jmp	.label_738
	.section	.text
	.align	32
	#Procedure 0x409c07
	.globl sub_409c07
	.type sub_409c07, @function
sub_409c07:

	nop	word ptr [rax + rax]
.label_739:
	mov	rcx, qword ptr [r14]
	mov	rax, qword ptr [r14 + 0x78]
	add	rcx, qword ptr [r14 + 0x28]
	mov	cl, byte ptr [rbx + rcx]
	movzx	edx, cl
	test	rax, rax
	jne	.label_740
.label_738:
	movzx	edi, cl
	call	toupper
	mov	rcx, qword ptr [r14 + 8]
	mov	byte ptr [rcx + rbx], al
	inc	rbx
	cmp	rbx, r15
	jl	.label_739
	mov	rbx, r15
.label_737:
	mov	qword ptr [r14 + 0x30], rbx
	mov	qword ptr [r14 + 0x38], rbx
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x409c4e
	.globl sub_409c4e
	.type sub_409c4e, @function
sub_409c4e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409c50

	.globl build_wcs_buffer
	.type build_wcs_buffer, @function
build_wcs_buffer:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x58
	mov	rbx, rdi
	mov	r13, qword ptr [rbx + 0x30]
	mov	r12, qword ptr [rbx + 0x40]
	mov	rax, qword ptr [rbx + 0x58]
	cmp	r12, rax
	cmovg	r12, rax
	cmp	r12, r13
	jle	.label_744
	lea	r14, [rbx + 0x20]
	lea	r15, [rsp + 0xc]
	jmp	.label_749
	.section	.text
	.align	32
	#Procedure 0x409c8b
	.globl sub_409c8b
	.type sub_409c8b, @function
sub_409c8b:

	nop	dword ptr [rax + rax]
.label_742:
	mov	rax, qword ptr [rbx + 0x28]
	add	rax, r13
	mov	rcx, qword ptr [rbx]
	movzx	eax, byte ptr [rcx + rax]
	mov	dword ptr [rsp + 0xc], eax
	mov	rcx, qword ptr [rbx + 0x78]
	test	rcx, rcx
	jne	.label_743
.label_746:
	mov	qword ptr [r14], rbp
	mov	eax, 1
.label_751:
	mov	ecx, dword ptr [rsp + 0xc]
	mov	rdx, qword ptr [rbx + 0x10]
	mov	dword ptr [rdx + r13*4], ecx
	lea	rbp, [rax + r13]
	lea	rcx, [r13 + 1]
	cmp	rcx, rbp
	jge	.label_750
	mov	rcx, qword ptr [rbx + 0x10]
	lea	rdi, [rcx + r13*4 + 4]
	lea	rdx, [rax*4 - 4]
	mov	esi, 0xff
	call	memset
	mov	rcx, rbp
.label_750:
	cmp	r12, rcx
	mov	r13, rcx
	jg	.label_749
	jmp	.label_752
.label_741:
	cmp	dword ptr [rbx + 0x90], 0
	mov	eax, 0
	lea	rsi, [rsp + 0x10]
	jle	.label_745
	nop	word ptr cs:[rax + rax]
.label_748:
	cmp	rax, rdx
	jge	.label_747
	mov	rcx, qword ptr [rbx]
	mov	rsi, qword ptr [rbx + 0x78]
	add	rcx, qword ptr [rbx + 0x28]
	add	rcx, r13
	movzx	ecx, byte ptr [rax + rcx]
	mov	cl, byte ptr [rsi + rcx]
	mov	rsi, qword ptr [rbx + 8]
	add	rsi, r13
	mov	byte ptr [rax + rsi], cl
	mov	byte ptr [rsp + rax + 0x10], cl
	inc	rax
	movsxd	rcx, dword ptr [rbx + 0x90]
	cmp	rax, rcx
	jl	.label_748
	lea	rsi, [rsp + 0x10]
	jmp	.label_745
.label_743:
	movzx	eax, byte ptr [rcx + rax]
	mov	dword ptr [rsp + 0xc], eax
	jmp	.label_746
.label_747:
	lea	rsi, [rsp + 0x10]
	jmp	.label_745
	.section	.text
	.align	32
	#Procedure 0x409d72
	.globl sub_409d72
	.type sub_409d72, @function
sub_409d72:

	nop	word ptr cs:[rax + rax]
.label_749:
	mov	rdx, r12
	sub	rdx, r13
	mov	rbp, qword ptr [rbx + 0x20]
	cmp	qword ptr [rbx + 0x78], 0
	jne	.label_741
	mov	rsi, qword ptr [rbx]
	add	rsi, qword ptr [rbx + 0x28]
	add	rsi, r13
.label_745:
	mov	rdi, r15
	mov	rcx, r14
	call	rpl_mbrtowc
	lea	rcx, [rax + 1]
	cmp	rcx, 2
	jb	.label_742
	cmp	rax, -2
	jne	.label_751
	mov	rax, qword ptr [rbx + 0x40]
	cmp	rax, qword ptr [rbx + 0x58]
	jge	.label_742
	mov	qword ptr [r14], rbp
.label_744:
	mov	rcx, r13
.label_752:
	mov	qword ptr [rbx + 0x30], rcx
	mov	qword ptr [rbx + 0x38], rcx
	add	rsp, 0x58
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409ded
	.globl sub_409ded
	.type sub_409ded, @function
sub_409ded:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x409df0

	.globl re_string_translate_buffer
	.type re_string_translate_buffer, @function
re_string_translate_buffer:
	mov	rax, qword ptr [rdi + 0x30]
	mov	r8, qword ptr [rdi + 0x40]
	mov	rdx, qword ptr [rdi + 0x58]
	cmp	r8, rdx
	cmovg	r8, rdx
	cmp	rax, r8
	jge	.label_753
	nop	dword ptr [rax + rax]
.label_754:
	mov	rdx, qword ptr [rdi]
	mov	rsi, qword ptr [rdi + 8]
	add	rdx, qword ptr [rdi + 0x28]
	movzx	edx, byte ptr [rax + rdx]
	mov	rcx, qword ptr [rdi + 0x78]
	mov	cl, byte ptr [rcx + rdx]
	mov	byte ptr [rsi + rax], cl
	inc	rax
	cmp	rax, r8
	jl	.label_754
	mov	rax, r8
.label_753:
	mov	qword ptr [rdi + 0x30], rax
	mov	qword ptr [rdi + 0x38], rax
	ret	
	.section	.text
	.align	32
	#Procedure 0x409e3d
	.globl sub_409e3d
	.type sub_409e3d, @function
sub_409e3d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x409e40

	.globl fetch_token
	.type fetch_token, @function
fetch_token:
	push	rbx
	mov	rbx, rsi
	call	peek_token
	cdqe	
	add	qword ptr [rbx + 0x48], rax
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x409e51
	.globl sub_409e51
	.type sub_409e51, @function
sub_409e51:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409e60

	.globl parse_reg_exp
	.type parse_reg_exp, @function
parse_reg_exp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r12, r9
	mov	qword ptr [rsp + 0x20], r8
	mov	qword ptr [rsp + 0x18], rcx
	mov	r13, rdx
	mov	qword ptr [rsp + 8], rsi
	mov	r15, rdi
	mov	rbp, qword ptr [rsi]
	mov	rax, qword ptr [rbp + 0xa8]
	mov	qword ptr [rsp], rax
	call	parse_branch
	mov	rbx, rax
	xor	r14d, r14d
	test	rbx, rbx
	jne	.label_760
	mov	eax, dword ptr [r12]
	test	eax, eax
	jne	.label_755
.label_760:
	mov	r14, qword ptr [rsp + 0x18]
	or	r14, 0x800000
	nop	dword ptr [rax]
.label_756:
	movzx	eax, byte ptr [r13 + 8]
	cmp	eax, 0xa
	jne	.label_757
	mov	rdi, r13
	mov	rsi, r15
	mov	rdx, r14
	call	fetch_token
	movzx	eax, byte ptr [r13 + 8]
	mov	ecx, eax
	or	ecx, 8
	cmp	ecx, 0xa
	mov	edx, 0
	je	.label_759
	cmp	qword ptr [rsp + 0x20], 0
	je	.label_761
	cmp	eax, 9
	mov	edx, 0
	je	.label_759
.label_761:
	mov	rax, qword ptr [rbp + 0xa8]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbp + 0xa8], rax
	mov	rdi, r15
	mov	rsi, qword ptr [rsp + 8]
	mov	rdx, r13
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r8, qword ptr [rsp + 0x20]
	mov	r9, r12
	call	parse_branch
	mov	rdx, rax
	test	rdx, rdx
	jne	.label_758
	mov	eax, dword ptr [r12]
	test	eax, eax
	jne	.label_762
.label_758:
	mov	rax, qword ptr [rsp + 0x10]
	or	qword ptr [rbp + 0xa8], rax
	nop	word ptr cs:[rax + rax]
.label_759:
	mov	ecx, 0xa
	mov	rdi, rbp
	mov	rsi, rbx
	call	create_tree
	mov	rbx, rax
	test	rbx, rbx
	jne	.label_756
	mov	dword ptr [r12], 0xc
	xor	r14d, r14d
	jmp	.label_755
.label_757:
	mov	r14, rbx
.label_755:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_762:
	xor	r14d, r14d
	test	rbx, rbx
	je	.label_755
	xor	r14d, r14d
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, rbx
	call	postorder
	jmp	.label_755
	.section	.text
	.align	32
	#Procedure 0x409fba
	.globl sub_409fba
	.type sub_409fba, @function
sub_409fba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409fc0

	.globl create_tree
	.type create_tree, @function
create_tree:
	sub	rsp, 0x18
	mov	byte ptr [rsp + 0x10], cl
	lea	rcx, [rsp + 8]
	call	create_token_tree
	add	rsp, 0x18
	ret	
	.section	.text
	.align	32
	#Procedure 0x409fd7
	.globl sub_409fd7
	.type sub_409fd7, @function
sub_409fd7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409fe0

	.globl peek_token
	.type peek_token, @function
peek_token:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbp, rsi
	mov	r15, rdi
	mov	rax, qword ptr [rbp + 0x48]
	cmp	qword ptr [rbp + 0x68], rax
	jle	.label_772
	mov	rcx, qword ptr [rbp + 8]
	movzx	r12d, byte ptr [rcx + rax]
	mov	byte ptr [r15], r12b
	mov	eax, dword ptr [r15 + 8]
	mov	ecx, eax
	and	ecx, 0xff9fffff
	mov	dword ptr [r15 + 8], ecx
	cmp	dword ptr [rbp + 0x90], 2
	jl	.label_765
	mov	rcx, qword ptr [rbp + 0x48]
	cmp	rcx, qword ptr [rbp + 0x30]
	je	.label_765
	mov	rsi, qword ptr [rbp + 0x10]
	cmp	dword ptr [rsi + rcx*4], -1
	je	.label_769
.label_765:
	cmp	r12d, 0x5c
	jne	.label_771
	mov	rax, qword ptr [rbp + 0x48]
	inc	rax
	cmp	rax, qword ptr [rbp + 0x58]
	jge	.label_773
	mov	r12, rdx
	mov	rdi, rbp
	call	re_string_peek_byte_case
	mov	r14b, al
	mov	byte ptr [r15], r14b
	mov	ebx, 0xffffff00
	and	ebx, dword ptr [r15 + 8]
	or	ebx, 1
	mov	dword ptr [r15 + 8], ebx
	cmp	dword ptr [rbp + 0x90], 2
	jl	.label_779
	mov	rsi, qword ptr [rbp + 0x48]
	inc	rsi
	mov	rdi, rbp
	call	re_string_wchar_at
	mov	ebp, eax
	mov	edi, ebp
	call	iswalnum
	test	eax, eax
	setne	al
	cmp	ebp, 0x5f
	sete	cl
	or	cl, al
	movzx	eax, cl
	shl	eax, 0x16
	mov	ebx, 0xffbfffff
	and	ebx, dword ptr [r15 + 8]
	jmp	.label_784
.label_772:
	mov	byte ptr [r15 + 8], 2
	xor	r14d, r14d
	jmp	.label_767
.label_771:
	mov	qword ptr [rsp], rdx
	mov	ebx, 0xffffff00
	and	ebx, dword ptr [r15 + 8]
	or	ebx, 1
	mov	dword ptr [r15 + 8], ebx
	cmp	dword ptr [rbp + 0x90], 2
	jl	.label_790
	mov	rsi, qword ptr [rbp + 0x48]
	mov	rdi, rbp
	call	re_string_wchar_at
	mov	ebx, eax
	mov	edi, ebx
	call	iswalnum
	test	eax, eax
	setne	al
	cmp	ebx, 0x5f
	sete	cl
	or	cl, al
	movzx	eax, cl
	shl	eax, 0x16
	mov	ebx, 0xffbfffff
	and	ebx, dword ptr [r15 + 8]
	jmp	.label_763
.label_773:
	mov	byte ptr [r15 + 8], 0x24
	mov	r14d, 1
	jmp	.label_767
.label_790:
	movzx	r14d, byte ptr [r15]
	cmp	r14, 0x5f
	sete	r13b
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	movzx	eax, word ptr [rax + r14*2]
	movzx	ecx, r13b
	shr	eax, 3
	and	eax, 1
	or	eax, ecx
	shl	eax, 0x16
	and	ebx, 0xffbfff01
.label_763:
	or	ebx, eax
	mov	dword ptr [r15 + 8], ebx
	mov	r14d, 1
	cmp	r12d, 0x3e
	jg	.label_776
	lea	eax, [r12 - 0x24]
	cmp	eax, 0xa
	ja	.label_780
	jmp	qword ptr [word ptr [+ (rax * 8) + label_781]]
.label_1894:
	mov	rdx, qword ptr [rsp]
	test	dl, 8
	jne	.label_782
	mov	rax, qword ptr [rbp + 0x48]
	inc	rax
	cmp	rax, qword ptr [rbp + 0x58]
	je	.label_782
	inc	qword ptr [rbp + 0x48]
	lea	rdi, [rsp + 8]
	mov	rsi, rbp
	call	peek_token
	dec	qword ptr [rbp + 0x48]
	movzx	eax, byte ptr [rsp + 0x10]
	add	eax, -9
	cmp	eax, 1
	ja	.label_767
.label_782:
	mov	byte ptr [r15 + 8], 0xc
	mov	dword ptr [r15], 0x20
	jmp	.label_767
.label_776:
	cmp	r12d, 0x7a
	jg	.label_791
	cmp	r12d, 0x3f
	je	.label_792
	cmp	r12d, 0x5b
	je	.label_793
	cmp	r12d, 0x5e
	jne	.label_767
	mov	rcx, qword ptr [rsp]
	test	ecx, 0x800008
	jne	.label_766
	mov	rax, qword ptr [rbp + 0x48]
	test	rax, rax
	je	.label_766
	test	ch, 8
	je	.label_767
	mov	rcx, qword ptr [rbp + 8]
	movzx	eax, byte ptr [rax + rcx - 1]
	cmp	eax, 0xa
	jne	.label_767
.label_766:
	mov	byte ptr [r15 + 8], 0xc
	mov	dword ptr [r15], 0x10
	jmp	.label_767
.label_779:
	movzx	ebp, r14b
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	movzx	eax, word ptr [rax + rbp*2]
	cmp	ebp, 0x5f
	sete	cl
	movzx	ecx, cl
	shr	eax, 3
	and	eax, 1
	or	eax, ecx
	shl	eax, 0x16
	and	ebx, 0xffbfff01
.label_784:
	or	ebx, eax
	mov	dword ptr [r15 + 8], ebx
	movzx	eax, r14b
	mov	r14d, 2
	cmp	eax, 0x5f
	jg	.label_778
	lea	ecx, [rax - 0x27]
	cmp	ecx, 0x2c
	ja	.label_794
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_775]]
.label_1949:
	mov	rcx, r12
	test	ch, 0x40
	jne	.label_767
	mov	byte ptr [r15 + 8], 4
	add	eax, -0x31
	cdqe	
	mov	qword ptr [r15], rax
	jmp	.label_767
.label_791:
	cmp	r12d, 0x7b
	je	.label_785
	cmp	r12d, 0x7c
	je	.label_787
	cmp	r12d, 0x7d
	jne	.label_767
	mov	rax, qword ptr [rsp]
	and	eax, 0x1200
	cmp	rax, 0x1200
	je	.label_788
	jmp	.label_767
.label_769:
	and	eax, 0xff9fff00
	or	eax, 0x200001
	mov	dword ptr [r15 + 8], eax
	mov	r14d, 1
	jmp	.label_767
.label_778:
	lea	ecx, [rax - 0x73]
	cmp	ecx, 0xa
	ja	.label_795
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_768]]
.label_1972:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0x22
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_780:
	cmp	r12d, 0xa
	jne	.label_767
	mov	rax, qword ptr [rsp]
	test	ah, 8
	jne	.label_770
	jmp	.label_767
.label_1895:
	mov	rax, qword ptr [rsp]
	test	ah, 0x20
	jne	.label_774
	jmp	.label_767
.label_1896:
	mov	rax, qword ptr [rsp]
	test	ah, 0x20
	jne	.label_777
	jmp	.label_767
.label_1897:
	and	ebx, 0xffffff00
	or	ebx, 0xb
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1898:
	mov	rax, qword ptr [rsp]
	test	ax, 0x402
	jne	.label_767
	jmp	.label_783
.label_1899:
	and	ebx, 0xffffff00
	or	ebx, 5
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_792:
	mov	rax, qword ptr [rsp]
	test	ax, 0x402
	jne	.label_767
	jmp	.label_786
.label_793:
	and	ebx, 0xffffff00
	or	ebx, 0x14
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_785:
	mov	rax, qword ptr [rsp]
	and	eax, 0x1200
	cmp	rax, 0x1200
	je	.label_789
	jmp	.label_767
.label_787:
	mov	rax, qword ptr [rsp]
	test	ah, 4
	jne	.label_767
	test	ax, ax
	js	.label_770
	jmp	.label_767
.label_795:
	cmp	eax, 0x60
	je	.label_764
	cmp	eax, 0x62
	jne	.label_767
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 0x100
	jmp	.label_767
.label_794:
	cmp	eax, 0x57
	jne	.label_767
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0x21
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1973:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0x20
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1974:
	and	r12d, 0x1200
	cmp	r12, 0x200
	jne	.label_767
.label_789:
	and	ebx, 0xffffff00
	or	ebx, 0x17
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1975:
	mov	rax, r12
	test	ah, 4
	jne	.label_767
	test	ax, ax
	js	.label_767
.label_770:
	and	ebx, 0xffffff00
	or	ebx, 0xa
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1976:
	and	r12d, 0x1200
	cmp	r12, 0x200
	jne	.label_767
.label_788:
	and	ebx, 0xffffff00
	or	ebx, 0x18
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_764:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 0x40
	jmp	.label_767
.label_1945:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 0x80
	jmp	.label_767
.label_1946:
	mov	rax, r12
	test	ah, 0x20
	jne	.label_767
.label_774:
	and	ebx, 0xffffff00
	or	ebx, 8
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1947:
	mov	rax, r12
	test	ah, 0x20
	jne	.label_767
.label_777:
	and	ebx, 0xffffff00
	or	ebx, 9
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1948:
	and	r12d, 0x402
	cmp	r12, 2
	jne	.label_767
.label_783:
	and	ebx, 0xffffff00
	or	ebx, 0x12
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1950:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 6
	jmp	.label_767
.label_1951:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 9
	jmp	.label_767
.label_1952:
	and	r12d, 0x402
	cmp	r12, 2
	jne	.label_767
.label_786:
	and	ebx, 0xffffff00
	or	ebx, 0x13
	mov	dword ptr [r15 + 8], ebx
	jmp	.label_767
.label_1953:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0xc
	mov	dword ptr [r15 + 8], ebx
	mov	dword ptr [r15], 0x200
	jmp	.label_767
.label_1954:
	test	r12d, 0x80000
	jne	.label_767
	and	ebx, 0xffffff00
	or	ebx, 0x23
	mov	dword ptr [r15 + 8], ebx
.label_767:
	mov	eax, r14d
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a643
	.globl sub_40a643
	.type sub_40a643, @function
sub_40a643:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a650

	.globl re_string_peek_byte_case
	.type re_string_peek_byte_case, @function
re_string_peek_byte_case:
	cmp	byte ptr [rdi + 0x8b], 0
	jne	.label_799
.label_797:
	mov	rax, qword ptr [rdi + 8]
	mov	rcx, qword ptr [rdi + 0x48]
	mov	al, byte ptr [rcx + rax + 1]
.label_798:
	movzx	eax, al
	ret	
.label_799:
	cmp	dword ptr [rdi + 0x90], 2
	jl	.label_796
	mov	rax, qword ptr [rdi + 0x10]
	mov	rcx, qword ptr [rdi + 0x48]
	cmp	dword ptr [rax + rcx*4 + 4], -1
	je	.label_797
	lea	rdx, [rcx + 2]
	cmp	qword ptr [rdi + 0x30], rdx
	je	.label_796
	cmp	dword ptr [rax + rcx*4 + 8], -1
	je	.label_797
.label_796:
	mov	rax, qword ptr [rdi + 0x48]
	cmp	byte ptr [rdi + 0x8c], 0
	je	.label_800
	mov	rcx, qword ptr [rdi + 0x18]
	mov	rax, qword ptr [rcx + rax*8 + 8]
	jmp	.label_801
.label_800:
	inc	rax
.label_801:
	add	rax, qword ptr [rdi + 0x28]
	mov	rcx, qword ptr [rdi]
	mov	al, byte ptr [rcx + rax]
	test	al, al
	jns	.label_798
	mov	cl, byte ptr [rdi + 0x8c]
	test	cl, cl
	je	.label_798
	jmp	.label_797
	.section	.text
	.align	32
	#Procedure 0x40a6c7
	.globl sub_40a6c7
	.type sub_40a6c7, @function
sub_40a6c7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a6d0

	.globl re_string_wchar_at
	.type re_string_wchar_at, @function
re_string_wchar_at:
	cmp	dword ptr [rdi + 0x90], 1
	jne	.label_802
	mov	rax, qword ptr [rdi + 8]
	movzx	eax, byte ptr [rax + rsi]
	ret	
.label_802:
	mov	rax, qword ptr [rdi + 0x10]
	mov	eax, dword ptr [rax + rsi*4]
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a6ea
	.globl sub_40a6ea
	.type sub_40a6ea, @function
sub_40a6ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a6f0

	.globl parse_branch
	.type parse_branch, @function
parse_branch:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, r9
	mov	r12, r8
	mov	qword ptr [rsp + 0x10], rcx
	mov	r13, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rbp]
	mov	qword ptr [rsp], rax
	call	parse_expression
	xor	r15d, r15d
	test	rax, rax
	jne	.label_809
	mov	ecx, dword ptr [r14]
	test	ecx, ecx
	je	.label_809
	jmp	.label_803
	.section	.text
	.align	32
	#Procedure 0x40a735
	.globl sub_40a735
	.type sub_40a735, @function
sub_40a735:

	nop	word ptr cs:[rax + rax]
.label_807:
	test	rbx, rbx
	cmovne	r15, rbx
	mov	rax, r15
.label_809:
	mov	rbx, rax
	movzx	eax, byte ptr [r13 + 8]
	mov	ecx, eax
	or	ecx, 8
	cmp	ecx, 0xa
	je	.label_805
	test	r12, r12
	je	.label_808
	cmp	eax, 9
	je	.label_810
.label_808:
	mov	rdi, qword ptr [rsp + 8]
	mov	rsi, rbp
	mov	rdx, r13
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r8, r12
	mov	r9, r14
	call	parse_expression
	mov	r15, rax
	test	r15, r15
	jne	.label_804
	mov	eax, dword ptr [r14]
	test	eax, eax
	jne	.label_806
.label_804:
	test	rbx, rbx
	je	.label_807
	test	r15, r15
	je	.label_807
	mov	ecx, 0x10
	mov	rdi, qword ptr [rsp]
	mov	rsi, rbx
	mov	rdx, r15
	call	create_tree
	test	rax, rax
	jne	.label_809
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, r15
	xor	r15d, r15d
	call	postorder
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, rbx
	call	postorder
	mov	dword ptr [r14], 0xc
	jmp	.label_803
.label_806:
	xor	r15d, r15d
	test	rbx, rbx
	je	.label_803
	xor	r15d, r15d
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, rbx
	call	postorder
	jmp	.label_803
.label_805:
	mov	r15, rbx
	jmp	.label_803
.label_810:
	mov	r15, rbx
.label_803:
	mov	rax, r15
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a81b
	.globl sub_40a81b
	.type sub_40a81b, @function
sub_40a81b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a820

	.globl postorder
	.type postorder, @function
postorder:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	jmp	.label_811
.label_814:
	mov	rdi, qword ptr [rcx + 0x10]
.label_811:
	mov	rcx, rdi
	mov	rdi, qword ptr [rcx + 8]
	test	rdi, rdi
	jne	.label_811
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_812
	mov	rdi, qword ptr [rcx + 8]
	test	rdi, rdi
	jne	.label_811
	jmp	.label_814
.label_812:
	mov	r12, rbx
	nop	word ptr cs:[rax + rax]
.label_815:
	mov	rbx, rcx
	mov	rdi, r14
	mov	rsi, rbx
	call	r15
	test	eax, eax
	jne	.label_813
	mov	rcx, qword ptr [rbx]
	xor	eax, eax
	test	rcx, rcx
	je	.label_813
	cmovne	r12, rbx
	mov	rax, rcx
	cmove	rax, rbx
	mov	rdi, qword ptr [rax + 0x10]
	cmp	rdi, r12
	mov	r12, rbx
	je	.label_815
	test	rdi, rdi
	mov	r12, rbx
	je	.label_815
	jmp	.label_811
.label_813:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a8a7
	.globl sub_40a8a7
	.type sub_40a8a7, @function
sub_40a8a7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40a8b0

	.globl free_tree
	.type free_tree, @function
free_tree:
	push	rax
	lea	rdi, [rsi + 0x28]
	call	free_token
	xor	eax, eax
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40a8be
	.globl sub_40a8be
	.type sub_40a8be, @function
sub_40a8be:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40a8c0

	.globl parse_expression
	.type parse_expression, @function
parse_expression:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 8], r9
	mov	qword ptr [rsp], r8
	mov	qword ptr [rsp + 0x18], rcx
	mov	r13, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 0x20], rdi
	mov	r14d, ecx
	and	r14d, 0x1000000
	mov	ebx, ecx
	and	ebx, 0x20
	mov	r15d, ecx
	and	r15d, 0x10
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	jmp	.label_836
	.section	.text
	.align	32
	#Procedure 0x40a906
	.globl sub_40a906
	.type sub_40a906, @function
sub_40a906:

	nop	word ptr cs:[rax + rax]
.label_827:
	mov	rdi, r13
	mov	rsi, qword ptr [rsp + 0x20]
	mov	rdx, qword ptr [rsp + 0x18]
	call	fetch_token
.label_836:
	movzx	eax, byte ptr [r13 + 8]
	dec	eax
	cmp	eax, 0x23
	ja	.label_825
	mov	r12, qword ptr [rbp]
	jmp	qword ptr [word ptr [+ (rax * 8) + label_823]]
.label_1864:
	test	r14, r14
	jne	.label_826
.label_1861:
	test	rbx, rbx
	jne	.label_826
	test	r15, r15
	jne	.label_827
.label_1860:
	mov	rax, qword ptr [rsp + 0x18]
	test	eax, 0x20000
	jne	.label_828
	movzx	eax, byte ptr [r13 + 8]
	cmp	eax, 9
	jne	.label_828
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 0x10
	jmp	.label_820
.label_826:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 0xd
.label_820:
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
.label_825:
	mov	rax, qword ptr [rsp + 0x10]
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_828:
	mov	byte ptr [r13 + 8], 1
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	r14, rax
	test	r14, r14
	jne	.label_822
	jmp	.label_818
.label_1865:
	mov	rax, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rax + 0x78]
	movzx	eax, byte ptr [r13 + 8]
	cmp	eax, 0x21
	sete	al
	movzx	r8d, al
	mov	edx, OFFSET FLAT:.str.1_3
	mov	ecx, OFFSET FLAT:.str.2_2
	jmp	.label_835
.label_1866:
	mov	rax, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rax + 0x78]
	movzx	eax, byte ptr [r13 + 8]
	cmp	eax, 0x23
	sete	al
	movzx	r8d, al
	mov	edx, OFFSET FLAT:.str.3_1
	mov	ecx, OFFSET FLAT:.str
.label_835:
	mov	rdi, r12
	mov	rbx, qword ptr [rsp + 8]
	mov	r9, rbx
	call	build_charclass_op
	jmp	.label_821
.label_1863:
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, r12
	mov	rdx, r13
	mov	rcx, qword ptr [rsp + 0x18]
	mov	rbx, qword ptr [rsp + 8]
	mov	r8, rbx
	call	parse_bracket_exp
	jmp	.label_821
.label_1856:
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	r14, rax
	test	r14, r14
	je	.label_818
	cmp	dword ptr [r12 + 0xb4], 2
	jl	.label_822
	mov	rbx, qword ptr [rsp + 0x20]
.label_838:
	mov	rax, qword ptr [rbx + 0x48]
	cmp	qword ptr [rbx + 0x68], rax
	jle	.label_822
	cmp	rax, qword ptr [rbx + 0x30]
	je	.label_822
	mov	rcx, qword ptr [rbx + 0x10]
	cmp	dword ptr [rcx + rax*4], -1
	jne	.label_822
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, qword ptr [rsp + 0x18]
	call	fetch_token
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	rbp, rax
	mov	ecx, 0x10
	mov	rdi, r12
	mov	rsi, r14
	mov	rdx, rbp
	call	create_tree
	mov	r14, rax
	test	rbp, rbp
	je	.label_818
	test	r14, r14
	jne	.label_838
	jmp	.label_818
.label_1857:
	mov	cl, byte ptr [r13]
	mov	eax, 1
	shl	eax, cl
	cdqe	
	test	qword ptr [r12 + 0xa8], rax
	je	.label_840
	or	qword ptr [r12 + 0xa0], rax
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	r14, rax
	test	r14, r14
	je	.label_818
	inc	qword ptr [r12 + 0x98]
	or	byte ptr [r12 + 0xb0], 2
	jmp	.label_822
.label_1858:
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	r14, rax
	test	r14, r14
	je	.label_818
	cmp	dword ptr [r12 + 0xb4], 2
	jl	.label_822
	or	byte ptr [r12 + 0xb0], 2
	jmp	.label_822
.label_1859:
	mov	r8, qword ptr [rsp]
	inc	r8
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, rbp
	mov	rdx, r13
	mov	rcx, qword ptr [rsp + 0x18]
	mov	rbx, qword ptr [rsp + 8]
	mov	r9, rbx
	call	parse_sub_exp
.label_821:
	mov	r14, rax
	test	r14, r14
	jne	.label_822
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	mov	eax, dword ptr [rbx]
	test	eax, eax
	jne	.label_825
.label_822:
	mov	rdi, r13
	mov	rsi, qword ptr [rsp + 0x20]
	mov	rbx, qword ptr [rsp + 0x18]
	mov	rdx, rbx
	call	fetch_token
	mov	ebp, ebx
	mov	r15, rbx
	and	ebp, 0x1000000
	mov	rbx, qword ptr [rsp + 8]
	nop	word ptr [rax + rax]
.label_816:
	movzx	eax, byte ptr [r13 + 8]
	cmp	eax, 0x17
	ja	.label_841
	mov	ecx, 0x8c0800
	bt	ecx, eax
	jae	.label_839
	mov	rdi, r14
	mov	rsi, qword ptr [rsp + 0x20]
	mov	rdx, r12
	mov	rcx, r13
	mov	r8, r15
	mov	r9, rbx
	call	parse_dup_op
	test	rax, rax
	jne	.label_842
	mov	ecx, dword ptr [rbx]
	test	ecx, ecx
	jne	.label_843
.label_842:
	test	rbp, rbp
	mov	r14, rax
	je	.label_816
	movzx	ecx, byte ptr [r13 + 8]
	cmp	ecx, 0x17
	je	.label_819
	cmp	ecx, 0xb
	mov	r14, rax
	jne	.label_816
.label_819:
	test	rax, rax
	je	.label_824
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, rax
	call	postorder
.label_824:
	mov	dword ptr [rbx], 0xd
	jmp	.label_820
.label_843:
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	test	r14, r14
	je	.label_825
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, r14
	call	postorder
	jmp	.label_825
.label_841:
	mov	qword ptr [rsp + 0x10], r14
	jmp	.label_825
.label_839:
	mov	qword ptr [rsp + 0x10], r14
	jmp	.label_825
.label_1862:
	mov	eax, dword ptr [r13]
	test	ax, 0x30f
	je	.label_830
	test	byte ptr [r12 + 0xb0], 0x10
	jne	.label_831
	mov	rdi, r12
	call	init_word_char
.label_831:
	mov	eax, dword ptr [r13]
.label_830:
	cmp	eax, 0x200
	je	.label_832
	cmp	eax, 0x100
	jne	.label_833
.label_832:
	cmp	dword ptr [r13], 0x100
	jne	.label_834
	mov	dword ptr [r13], 6
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	rbx, rax
	mov	eax, 9
	jmp	.label_837
.label_1867:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 5
	jmp	.label_820
.label_818:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 0xc
	jmp	.label_820
.label_833:
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	test	rax, rax
	mov	rcx, qword ptr [rsp + 8]
	jne	.label_817
	mov	dword ptr [rcx], 0xc
	jmp	.label_820
.label_834:
	mov	dword ptr [r13], 5
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	rbx, rax
	mov	eax, 0xa
.label_837:
	mov	r14, qword ptr [rsp + 8]
	mov	dword ptr [r13], eax
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	mov	rcx, r13
	call	create_token_tree
	mov	rbp, rax
	mov	ecx, 0xa
	mov	rdi, r12
	mov	rsi, rbx
	mov	rdx, rbp
	call	create_tree
	test	rbx, rbx
	je	.label_829
	test	rbp, rbp
	je	.label_829
	test	rax, rax
	je	.label_829
.label_817:
	mov	qword ptr [rsp + 0x10], rax
	mov	rdi, r13
	mov	rsi, qword ptr [rsp + 0x20]
	mov	rdx, qword ptr [rsp + 0x18]
	call	fetch_token
	jmp	.label_825
.label_840:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 6
	jmp	.label_820
.label_829:
	mov	dword ptr [r14], 0xc
	jmp	.label_820
	.section	.text
	.align	32
	#Procedure 0x40adaa
	.globl sub_40adaa
	.type sub_40adaa, @function
sub_40adaa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40adb0

	.globl create_token_tree
	.type create_token_tree, @function
create_token_tree:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r15, rcx
	mov	r14, rdx
	mov	r12, rsi
	mov	rbx, rdi
	cmp	dword ptr [rbx + 0x80], 0xf
	je	.label_844
.label_847:
	movsxd	rcx, dword ptr [rbx + 0x80]
	lea	eax, [rcx + 1]
	mov	dword ptr [rbx + 0x80], eax
	mov	rdx, qword ptr [rbx + 0x70]
	shl	rcx, 6
	lea	rax, [rdx + rcx + 8]
	mov	qword ptr [rdx + rcx + 8], 0
	mov	qword ptr [rdx + rcx + 0x10], r12
	mov	qword ptr [rdx + rcx + 0x18], r14
	movups	xmm0, xmmword ptr [r15]
	movups	xmmword ptr [rdx + rcx + 0x30], xmm0
	and	byte ptr [rdx + rcx + 0x3a], 0xf3
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdx + rcx + 0x20], xmm0
	mov	qword ptr [rdx + rcx + 0x40], -1
	test	r12, r12
	je	.label_846
	mov	qword ptr [r12], rax
.label_846:
	test	r14, r14
	je	.label_845
	mov	qword ptr [r14], rax
.label_845:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_844:
	mov	edi, 0x3c8
	call	malloc
	mov	rcx, rax
	xor	eax, eax
	test	rcx, rcx
	je	.label_845
	mov	rax, qword ptr [rbx + 0x70]
	mov	qword ptr [rcx], rax
	mov	qword ptr [rbx + 0x70], rcx
	mov	dword ptr [rbx + 0x80], 0
	jmp	.label_847
	.section	.text
	.align	32
	#Procedure 0x40ae67
	.globl sub_40ae67
	.type sub_40ae67, @function
sub_40ae67:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40ae70

	.globl parse_sub_exp
	.type parse_sub_exp, @function
parse_sub_exp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, r9
	mov	qword ptr [rsp + 8], r8
	mov	rbp, rcx
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15, rdi
	mov	rax, qword ptr [r14]
	mov	qword ptr [rsp + 0x10], rax
	mov	r12, qword ptr [r14 + 0x30]
	lea	rax, [r12 + 1]
	mov	qword ptr [r14 + 0x30], rax
	mov	rdx, rbp
	or	rdx, 0x800000
	mov	rdi, rbx
	mov	rsi, r15
	call	fetch_token
	movzx	eax, byte ptr [rbx + 8]
	xor	r8d, r8d
	cmp	eax, 9
	je	.label_852
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	mov	rcx, rbp
	mov	r8, qword ptr [rsp + 8]
	mov	r9, r13
	call	parse_reg_exp
	mov	r8, rax
	xor	eax, eax
	cmp	dword ptr [r13], 0
	jne	.label_849
	movzx	eax, byte ptr [rbx + 8]
	cmp	eax, 9
	jne	.label_851
	xor	eax, eax
	cmp	dword ptr [r13], 0
	jne	.label_849
.label_852:
	cmp	r12, 8
	mov	rdi, qword ptr [rsp + 0x10]
	ja	.label_853
	mov	eax, 1
	mov	cl, r12b
	shl	eax, cl
	cdqe	
	or	qword ptr [rdi + 0xa8], rax
.label_853:
	xor	edx, edx
	mov	ecx, 0x11
	mov	rsi, r8
	call	create_tree
	test	rax, rax
	je	.label_850
	mov	qword ptr [rax + 0x28], r12
.label_849:
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_850:
	mov	dword ptr [r13], 0xc
	xor	eax, eax
	jmp	.label_849
.label_851:
	test	r8, r8
	je	.label_848
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, r8
	call	postorder
.label_848:
	mov	dword ptr [r13], 8
	xor	eax, eax
	jmp	.label_849
	.section	.text
	.align	32
	#Procedure 0x40af70

	.globl parse_bracket_exp
	.type parse_bracket_exp, @function
parse_bracket_exp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	qword ptr [rsp + 0x28], r8
	mov	rbx, rcx
	mov	r12, rdx
	mov	qword ptr [rsp + 0x18], rsi
	mov	r13, rdi
	mov	qword ptr [rsp + 0xb0], 0
	mov	qword ptr [rsp + 0xa8], 0
	mov	edi, 0x20
	mov	esi, 1
	call	rpl_calloc
	mov	r15, rax
	mov	edi, 0x50
	mov	esi, 1
	call	rpl_calloc
	mov	r14, rax
	test	r15, r15
	je	.label_889
	test	r14, r14
	je	.label_889
	mov	rdi, r12
	mov	rsi, r13
	mov	rdx, rbx
	call	peek_token_bracket
	mov	ebp, eax
	movzx	eax, byte ptr [r12 + 8]
	cmp	eax, 0x19
	je	.label_891
	cmp	eax, 2
	je	.label_869
	mov	dword ptr [rsp + 0x14], 0
	jmp	.label_856
.label_891:
	or	byte ptr [r14 + 0x20], 1
	test	bh, 1
	je	.label_858
	mov	esi, 0xa
	mov	rdi, r15
	call	bitset_set
.label_858:
	movsxd	rax, ebp
	add	qword ptr [r13 + 0x48], rax
	mov	rdi, r12
	mov	rsi, r13
	mov	rdx, rbx
	call	peek_token_bracket
	mov	ebp, eax
	movzx	eax, byte ptr [r12 + 8]
	cmp	eax, 2
	je	.label_869
	mov	al, 1
	mov	dword ptr [rsp + 0x14], eax
.label_856:
	mov	qword ptr [rsp + 0x20], r14
	mov	eax, dword ptr [r12 + 8]
	movzx	ecx, al
	cmp	ecx, 0x15
	jne	.label_872
	and	eax, 0xffffff00
	or	eax, 1
	mov	dword ptr [r12 + 8], eax
.label_872:
	lea	rax, [rsp + 0x60]
	mov	qword ptr [rsp + 0xa0], rax
	mov	dword ptr [rsp + 0x98], 3
	lea	rdi, [rsp + 0x98]
	mov	r9d, 1
	mov	rsi, r13
	mov	rdx, r12
	mov	ecx, ebp
	mov	rbp, r13
	mov	r8, rbx
	call	parse_bracket_element
	test	eax, eax
	jne	.label_864
	xor	eax, eax
	mov	qword ptr [rsp + 8], rax
	jmp	.label_855
	.section	.text
	.align	32
	#Procedure 0x40b0bf
	.globl sub_40b0bf
	.type sub_40b0bf, @function
sub_40b0bf:

	nop	
.label_866:
	cmp	eax, 2
	je	.label_887
	mov	qword ptr [rsp + 0x28], r13
	lea	rax, [rsp + 0x60]
	mov	qword ptr [rsp + 0xa0], rax
	mov	dword ptr [rsp + 0x98], 3
	xor	r9d, r9d
	lea	rdi, [rsp + 0x98]
	mov	rsi, rbp
	mov	rdx, r12
	mov	ecx, r14d
	mov	r8, rbx
	call	parse_bracket_element
	test	eax, eax
	je	.label_855
	jmp	.label_864
.label_883:
	lea	rax, [r13 + r13]
	mov	rdi, qword ptr [rbp]
	lea	rsi, [rax*4 + 4]
	call	realloc
	test	rax, rax
	je	.label_863
	lea	rcx, [r13 + r13 + 1]
	mov	qword ptr [rsp + 8], rcx
	mov	qword ptr [rbp], rax
	jmp	.label_865
	.section	.text
	.align	32
	#Procedure 0x40b13d
	.globl sub_40b13d
	.type sub_40b13d, @function
sub_40b13d:

	nop	dword ptr [rax]
.label_855:
	mov	rdi, r12
	mov	rsi, rbp
	mov	rdx, rbx
	call	peek_token_bracket
	mov	r14d, eax
	mov	eax, dword ptr [rsp + 0x98]
	cmp	eax, 2
	je	.label_870
	cmp	eax, 4
	mov	r13, qword ptr [rsp + 0x28]
	je	.label_873
	movzx	eax, byte ptr [r12 + 8]
	cmp	eax, 0x16
	je	.label_880
	cmp	eax, 2
	jne	.label_877
	jmp	.label_876
	.section	.text
	.align	32
	#Procedure 0x40b184
	.globl sub_40b184
	.type sub_40b184, @function
sub_40b184:

	nop	word ptr cs:[rax + rax]
.label_870:
	mov	r13, qword ptr [rsp + 0x28]
	jmp	.label_873
.label_880:
	movsxd	rax, r14d
	add	qword ptr [rbp + 0x48], rax
	lea	rdi, [rsp + 0x30]
	mov	rsi, rbp
	mov	rdx, rbx
	call	peek_token_bracket
	movzx	ecx, byte ptr [rsp + 0x38]
	cmp	ecx, 0x15
	je	.label_885
	cmp	ecx, 2
	je	.label_886
	lea	rcx, [rsp + 0x40]
	mov	qword ptr [rsp + 0x90], rcx
	mov	dword ptr [rsp + 0x88], 3
	mov	r9d, 1
	lea	rdi, [rsp + 0x88]
	mov	rsi, rbp
	lea	rdx, [rsp + 0x30]
	mov	ecx, eax
	mov	r8, rbx
	call	parse_bracket_element
	test	eax, eax
	jne	.label_854
	mov	rdi, r12
	mov	rsi, rbp
	mov	rdx, rbx
	call	peek_token_bracket
	mov	r14d, eax
	mov	rax, qword ptr [rsp + 0x18]
	cmp	dword ptr [rax + 0xb4], 1
	mov	rdx, qword ptr [rsp + 0x20]
	jg	.label_859
	xor	edx, edx
.label_859:
	mov	rdi, rbx
	mov	rsi, r15
	lea	rcx, [rsp + 0xb0]
	lea	r8, [rsp + 0x98]
	lea	r9, [rsp + 0x88]
	call	build_range_exp
	jmp	.label_884
.label_885:
	mov	eax, r14d
	neg	eax
	cdqe	
	add	qword ptr [rbp + 0x48], rax
	mov	byte ptr [r12 + 8], 1
.label_877:
	mov	eax, dword ptr [rsp + 0x98]
.label_873:
	mov	ecx, eax
	cmp	eax, 4
	ja	.label_875
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_879]]
.label_1962:
	movzx	esi, byte ptr [rsp + 0xa0]
	mov	rdi, r15
	call	bitset_set
	jmp	.label_874
.label_1963:
	mov	qword ptr [rsp], rbp
	mov	qword ptr [rsp + 0x28], r13
	mov	rbp, qword ptr [rsp + 0x20]
	mov	r13, qword ptr [rbp + 0x28]
	cmp	qword ptr [rsp + 8], r13
	je	.label_883
.label_865:
	mov	eax, dword ptr [rsp + 0xa0]
	mov	rcx, qword ptr [rbp + 0x28]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbp + 0x28], rdx
	mov	rdx, qword ptr [rbp]
	mov	dword ptr [rdx + rcx*4], eax
	mov	r13, qword ptr [rsp + 0x28]
	mov	rbp, qword ptr [rsp]
	jmp	.label_874
.label_1964:
	mov	rsi, qword ptr [rsp + 0xa0]
	mov	rdi, r15
	call	build_equiv_class
	jmp	.label_884
.label_1965:
	mov	rsi, qword ptr [rsp + 0xa0]
	mov	rdi, r15
	call	build_collating_symbol
	jmp	.label_884
.label_1966:
	mov	rdi, qword ptr [rbp + 0x78]
	mov	r8, qword ptr [rsp + 0xa0]
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x20]
	lea	rcx, [rsp + 0xa8]
	mov	r9, rbx
	call	build_charclass
.label_884:
	mov	dword ptr [r13], eax
	test	eax, eax
	jne	.label_861
.label_874:
	movzx	eax, byte ptr [r12 + 8]
	cmp	eax, 0x15
	jne	.label_866
	movsxd	rax, r14d
	add	qword ptr [rbp + 0x48], rax
	mov	eax, dword ptr [rsp + 0x14]
	test	al, al
	je	.label_868
	mov	rdi, r15
	call	bitset_not
.label_868:
	mov	qword ptr [rsp + 0x28], r13
	mov	r12, qword ptr [rsp + 0x18]
	cmp	dword ptr [r12 + 0xb4], 2
	mov	r14, qword ptr [rsp + 0x20]
	jl	.label_871
	mov	rsi, qword ptr [r12 + 0x78]
	mov	rdi, r15
	call	bitset_mask
.label_871:
	cmp	qword ptr [r14 + 0x28], 0
	jne	.label_878
	cmp	qword ptr [r14 + 0x30], 0
	jne	.label_878
	cmp	qword ptr [r14 + 0x38], 0
	jne	.label_878
	cmp	qword ptr [r14 + 0x40], 0
	jne	.label_878
	cmp	dword ptr [r12 + 0xb4], 2
	jl	.label_882
	cmp	qword ptr [r14 + 0x48], 0
	jne	.label_878
	test	byte ptr [r14 + 0x20], 1
	jne	.label_878
.label_882:
	mov	rdi, r14
	call	free_charset
	mov	byte ptr [rsp + 0xc0], 3
	mov	qword ptr [rsp + 0xb8], r15
	lea	rcx, [rsp + 0xb8]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	call	create_token_tree
	jmp	.label_860
.label_878:
	or	byte ptr [r12 + 0xb0], 2
	mov	byte ptr [rsp + 0xc0], 6
	mov	qword ptr [rsp + 0xb8], r14
	xor	ebx, ebx
	lea	rcx, [rsp + 0xb8]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	call	create_token_tree
	mov	rbp, rax
	test	rbp, rbp
	je	.label_857
	nop	dword ptr [rax]
.label_890:
	cmp	qword ptr [r15 + rbx*8], 0
	jne	.label_862
	inc	rbx
	cmp	rbx, 3
	jle	.label_890
	mov	rdi, r15
	call	free
	jmp	.label_867
.label_862:
	mov	byte ptr [rsp + 0xc0], 3
	mov	qword ptr [rsp + 0xb8], r15
	lea	rcx, [rsp + 0xb8]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r12
	call	create_token_tree
	test	rax, rax
	je	.label_857
	mov	ecx, 0xa
	mov	rdi, r12
	mov	rsi, rax
	mov	rdx, rbp
	call	create_tree
.label_860:
	mov	rbp, rax
	test	rbp, rbp
	jne	.label_867
	jmp	.label_857
.label_864:
	mov	rcx, qword ptr [rsp + 0x28]
	mov	dword ptr [rcx], eax
.label_861:
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_881
.label_869:
	mov	rax, qword ptr [rsp + 0x28]
	mov	dword ptr [rax], 2
	jmp	.label_881
.label_887:
	mov	dword ptr [r13], 7
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_881
.label_889:
	mov	rdi, r15
	call	free
	mov	rdi, r14
	call	free
	mov	rax, qword ptr [rsp + 0x28]
	mov	dword ptr [rax], 0xc
	jmp	.label_888
.label_876:
	mov	dword ptr [r13], 7
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_881
.label_886:
	mov	dword ptr [r13], 7
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_881
.label_854:
	mov	dword ptr [r13], eax
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_881
.label_863:
	mov	r14, rbp
.label_857:
	mov	rax, qword ptr [rsp + 0x28]
	mov	dword ptr [rax], 0xc
.label_881:
	mov	rdi, r15
	call	free
	mov	rdi, r14
	call	free_charset
.label_888:
	xor	ebp, ebp
.label_867:
	mov	rax, rbp
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_875:
	mov	edi, OFFSET FLAT:.str.5_1
	mov	esi, OFFSET FLAT:.str.6_1
	mov	edx, 0xced
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.parse_bracket_exp
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x40b549
	.globl sub_40b549
	.type sub_40b549, @function
sub_40b549:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40b550

	.globl init_word_char
	.type init_word_char, @function
init_word_char:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	mov	al, byte ptr [r14 + 0xb0]
	mov	cl, al
	or	cl, 0x10
	mov	byte ptr [r14 + 0xb0], cl
	xor	ebx, ebx
	test	al, 8
	mov	r15d, 0
	jne	.label_896
	movabs	rax, 0x3ff000000000000
	mov	qword ptr [r14 + 0xb8], rax
	movabs	rax, 0x7fffffe87fffffe
	mov	qword ptr [r14 + 0xc0], rax
	mov	r15d, 2
	mov	ebx, 0x80
	test	byte ptr [r14 + 0xb0], 4
	je	.label_896
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14 + 0xc8], xmm0
.label_895:
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_896:
	call	__ctype_b_loc
	lea	rdx, [rbx + rbx]
	add	rdx, qword ptr [rax]
	nop	dword ptr [rax + rax]
.label_897:
	mov	rax, rdx
	xor	ecx, ecx
	nop	word ptr cs:[rax + rax]
.label_893:
	lea	esi, [rbx + rcx]
	cmp	esi, 0x5f
	je	.label_892
	movzx	esi, word ptr [rax]
	and	esi, 8
	test	si, si
	je	.label_894
.label_892:
	mov	esi, 1
	shl	rsi, cl
	or	qword ptr [r14 + r15*8 + 0xb8], rsi
.label_894:
	inc	rcx
	add	rax, 2
	cmp	rcx, 0x40
	jne	.label_893
	inc	r15
	add	rbx, 0x40
	add	rdx, 0x80
	cmp	r15d, 4
	jne	.label_897
	jmp	.label_895
	.section	.text
	.align	32
	#Procedure 0x40b626
	.globl sub_40b626
	.type sub_40b626, @function
sub_40b626:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40b630

	.globl build_charclass_op
	.type build_charclass_op, @function
build_charclass_op:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r12, r9
	mov	dword ptr [rsp + 0xc], r8d
	mov	rbp, rcx
	mov	r14, rdx
	mov	r13, rsi
	mov	r15, rdi
	mov	qword ptr [rsp + 0x20], 0
	mov	edi, 0x20
	mov	esi, 1
	call	rpl_calloc
	mov	rbx, rax
	test	rbx, rbx
	je	.label_905
	mov	qword ptr [rsp], r12
	mov	edi, 0x50
	mov	esi, 1
	call	rpl_calloc
	mov	r12, rax
	test	r12, r12
	je	.label_901
	mov	al, byte ptr [r12 + 0x20]
	and	al, 0xfe
	mov	ecx, dword ptr [rsp + 0xc]
	or	al, cl
	mov	byte ptr [r12 + 0x20], al
	lea	rcx, [rsp + 0x20]
	xor	r9d, r9d
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	r8, r14
	call	build_charclass
	mov	r14d, eax
	test	r14d, r14d
	jne	.label_898
	mov	al, byte ptr [rbp]
	test	al, al
	je	.label_902
	inc	rbp
	nop	word ptr cs:[rax + rax]
.label_906:
	movsx	rsi, al
	mov	rdi, rbx
	call	bitset_set
	mov	al, byte ptr [rbp]
	inc	rbp
	test	al, al
	jne	.label_906
.label_902:
	mov	eax, dword ptr [rsp + 0xc]
	test	al, al
	je	.label_908
	mov	rdi, rbx
	call	bitset_not
.label_908:
	cmp	dword ptr [r15 + 0xb4], 2
	jl	.label_900
	mov	rsi, qword ptr [r15 + 0x78]
	mov	rdi, rbx
	call	bitset_mask
.label_900:
	mov	byte ptr [rsp + 0x18], 3
	mov	qword ptr [rsp + 0x10], rbx
	lea	rcx, [rsp + 0x10]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r15
	call	create_token_tree
	mov	rbp, rax
	test	rbp, rbp
	je	.label_907
	cmp	dword ptr [r15 + 0xb4], 2
	jl	.label_909
	mov	byte ptr [rsp + 0x18], 6
	mov	qword ptr [rsp + 0x10], r12
	or	byte ptr [r15 + 0xb0], 2
	lea	rcx, [rsp + 0x10]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r15
	call	create_token_tree
	test	rax, rax
	je	.label_907
	mov	ecx, 0xa
	mov	rdi, r15
	mov	rsi, rbp
	mov	rdx, rax
	call	create_tree
	mov	rbp, rax
	jmp	.label_899
.label_909:
	mov	rdi, r12
	call	free_charset
	jmp	.label_899
.label_907:
	mov	rdi, rbx
	call	free
	mov	rdi, r12
	call	free_charset
	jmp	.label_903
.label_905:
	mov	dword ptr [r12], 0xc
	jmp	.label_904
.label_901:
	mov	rdi, rbx
	call	free
.label_903:
	mov	rax, qword ptr [rsp]
	mov	dword ptr [rax], 0xc
	jmp	.label_904
.label_898:
	mov	rdi, rbx
	call	free
	mov	rdi, r12
	call	free_charset
	mov	rax, qword ptr [rsp]
	mov	dword ptr [rax], r14d
.label_904:
	xor	ebp, ebp
.label_899:
	mov	rax, rbp
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40b7ee
	.globl sub_40b7ee
	.type sub_40b7ee, @function
sub_40b7ee:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40b7f0

	.globl parse_dup_op
	.type parse_dup_op, @function
parse_dup_op:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r13, r9
	mov	rbp, r8
	mov	r15, rcx
	mov	qword ptr [rsp + 0x18], rdx
	mov	r14, rsi
	mov	r12, rdi
	mov	rcx, qword ptr [r14 + 0x48]
	movups	xmm0, xmmword ptr [r15]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movzx	eax, byte ptr [r15 + 8]
	cmp	eax, 0x17
	jne	.label_926
	mov	qword ptr [rsp], rcx
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, rbp
	mov	qword ptr [rsp + 8], rbp
	call	fetch_number
	mov	rbx, rax
	cmp	rbx, -1
	jne	.label_919
	mov	qword ptr [rsp + 0x10], r13
	movzx	eax, byte ptr [r15 + 8]
	cmp	eax, 1
	jne	.label_923
	movzx	eax, byte ptr [r15]
	xor	ebx, ebx
	cmp	eax, 0x2c
	je	.label_920
	jmp	.label_923
.label_926:
	mov	qword ptr [rsp + 0x10], r13
	cmp	eax, 0x12
	sete	cl
	movzx	ebx, cl
	cmp	eax, 0x13
	mov	eax, 1
	mov	r13, -1
	cmove	r13, rax
.label_918:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbp
	call	fetch_token
	xor	r14d, r14d
	test	r12, r12
	je	.label_911
	mov	rax, r13
	xor	r14d, r14d
	or	rax, rbx
	je	.label_916
	test	rbx, rbx
	jg	.label_928
	mov	r15, qword ptr [rsp + 0x18]
.label_924:
	movzx	eax, byte ptr [r12 + 0x30]
	cmp	eax, 0x11
	jne	.label_922
	mov	rdx, qword ptr [r12 + 0x28]
	mov	esi, OFFSET FLAT:mark_opt_subexp
	mov	rdi, r12
	call	postorder
.label_922:
	cmp	r13, -1
	sete	al
	movzx	ecx, al
	or	ecx, 0xa
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, r12
	call	create_tree
	mov	rbp, rax
	test	rbp, rbp
	je	.label_910
	lea	rax, [rbx + 2]
	cmp	rax, r13
	jg	.label_914
	inc	rbx
	nop	dword ptr [rax + rax]
.label_927:
	mov	rdi, r12
	mov	rsi, r15
	call	duplicate_tree
	mov	r12, rax
	mov	ecx, 0x10
	mov	rdi, r15
	mov	rsi, rbp
	mov	rdx, r12
	call	create_tree
	test	r12, r12
	je	.label_910
	test	rax, rax
	je	.label_910
	xor	edx, edx
	mov	ecx, 0xa
	mov	rdi, r15
	mov	rsi, rax
	call	create_tree
	mov	rbp, rax
	test	rbp, rbp
	je	.label_910
	inc	rbx
	cmp	rbx, r13
	jl	.label_927
.label_914:
	test	r14, r14
	je	.label_929
	mov	ecx, 0x10
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbp
	call	create_tree
	mov	r14, rax
	jmp	.label_911
.label_919:
	mov	qword ptr [rsp + 0x10], r13
	cmp	rbx, -2
	je	.label_912
.label_920:
	movzx	eax, byte ptr [r15 + 8]
	cmp	eax, 0x18
	mov	r13, rbx
	je	.label_915
	cmp	eax, 1
	jne	.label_912
	movzx	eax, byte ptr [r15]
	cmp	eax, 0x2c
	jne	.label_912
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 8]
	call	fetch_number
	mov	r13, rax
	cmp	r13, -2
	je	.label_912
.label_915:
	cmp	r13, -1
	je	.label_925
	cmp	rbx, r13
	jg	.label_923
.label_925:
	movzx	eax, byte ptr [r15 + 8]
	cmp	eax, 0x18
	jne	.label_923
	cmp	r13, -1
	mov	rax, r13
	cmove	rax, rbx
	cmp	rax, 0x8000
	mov	rbp, qword ptr [rsp + 8]
	jl	.label_918
	mov	rax, qword ptr [rsp + 0x10]
	mov	dword ptr [rax], 0xf
	xor	r14d, r14d
	jmp	.label_911
.label_923:
	mov	rax, qword ptr [rsp + 0x10]
	mov	dword ptr [rax], 0xa
	xor	r14d, r14d
	jmp	.label_911
.label_912:
	mov	rax, qword ptr [rsp + 8]
	test	eax, 0x200000
	je	.label_917
	mov	rax, qword ptr [rsp]
	mov	qword ptr [r14 + 0x48], rax
	movaps	xmm0, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [r15], xmm0
	mov	byte ptr [r15 + 8], 1
	mov	r14, r12
	jmp	.label_911
.label_929:
	mov	r14, rbp
	jmp	.label_911
.label_916:
	mov	esi, OFFSET FLAT:free_tree
	xor	edx, edx
	mov	rdi, r12
	call	postorder
	jmp	.label_911
.label_928:
	mov	ebp, 1
	mov	r14, r12
	cmp	rbx, 2
	jge	.label_930
	mov	r15, qword ptr [rsp + 0x18]
	jmp	.label_913
.label_930:
	mov	r15, qword ptr [rsp + 0x18]
.label_921:
	mov	rdi, r12
	mov	rsi, r15
	call	duplicate_tree
	mov	r12, rax
	mov	ecx, 0x10
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, r12
	call	create_tree
	mov	r14, rax
	test	r12, r12
	je	.label_910
	test	r14, r14
	je	.label_910
	inc	rbp
	cmp	rbp, rbx
	jl	.label_921
.label_913:
	cmp	rbx, r13
	je	.label_911
	mov	rdi, r12
	mov	rsi, r15
	call	duplicate_tree
	mov	r12, rax
	test	r12, r12
	jne	.label_924
.label_910:
	mov	rax, qword ptr [rsp + 0x10]
	mov	dword ptr [rax], 0xc
	xor	r14d, r14d
.label_911:
	mov	rax, r14
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_917:
	movzx	eax, byte ptr [r15 + 8]
	cmp	eax, 2
	setne	al
	movzx	eax, al
	add	eax, 9
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	xor	r14d, r14d
	jmp	.label_911
	.section	.text
	.align	32
	#Procedure 0x40bb27
	.globl sub_40bb27
	.type sub_40bb27, @function
sub_40bb27:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bb30

	.globl peek_token_bracket
	.type peek_token_bracket, @function
peek_token_bracket:
	mov	rax, qword ptr [rsi + 0x48]
	cmp	qword ptr [rsi + 0x68], rax
	jle	.label_938
	mov	rcx, qword ptr [rsi + 8]
	mov	r8b, byte ptr [rcx + rax]
	mov	byte ptr [rdi], r8b
	cmp	dword ptr [rsi + 0x90], 2
	jl	.label_931
	mov	rax, qword ptr [rsi + 0x48]
	cmp	rax, qword ptr [rsi + 0x30]
	je	.label_931
	mov	rcx, qword ptr [rsi + 0x10]
	cmp	dword ptr [rcx + rax*4], -1
	je	.label_935
.label_931:
	movzx	ecx, r8b
	test	dl, 1
	je	.label_939
	cmp	ecx, 0x5c
	jne	.label_939
	mov	rax, qword ptr [rsi + 0x48]
	inc	rax
	cmp	rax, qword ptr [rsi + 0x58]
	jge	.label_939
	mov	qword ptr [rsi + 0x48], rax
	mov	rcx, qword ptr [rsi + 8]
	mov	al, byte ptr [rcx + rax]
	mov	byte ptr [rdi], al
	jmp	.label_935
.label_938:
	mov	byte ptr [rdi + 8], 2
	xor	eax, eax
	ret	
.label_939:
	cmp	ecx, 0x5b
	jne	.label_933
	mov	rax, qword ptr [rsi + 0x48]
	inc	rax
	cmp	rax, qword ptr [rsi + 0x58]
	jge	.label_932
	mov	rcx, qword ptr [rsi + 8]
	mov	al, byte ptr [rcx + rax]
	jmp	.label_940
.label_933:
	cmp	ecx, 0x5e
	je	.label_941
	cmp	ecx, 0x5d
	je	.label_942
	cmp	ecx, 0x2d
	jne	.label_935
	mov	byte ptr [rdi + 8], 0x16
	mov	eax, 1
	ret	
.label_935:
	mov	byte ptr [rdi + 8], 1
	mov	eax, 1
	ret	
.label_932:
	xor	eax, eax
.label_940:
	mov	byte ptr [rdi], al
	movzx	eax, al
	cmp	eax, 0x3d
	je	.label_937
	cmp	eax, 0x3a
	je	.label_936
	cmp	eax, 0x2e
	jne	.label_934
	mov	byte ptr [rdi + 8], 0x1a
	mov	eax, 2
	ret	
.label_942:
	mov	byte ptr [rdi + 8], 0x15
	mov	eax, 1
	ret	
.label_936:
	test	dl, 4
	jne	.label_943
.label_934:
	mov	byte ptr [rdi + 8], 1
	mov	byte ptr [rdi], r8b
	mov	eax, 1
	ret	
.label_941:
	mov	byte ptr [rdi + 8], 0x19
	mov	eax, 1
	ret	
.label_937:
	mov	byte ptr [rdi + 8], 0x1c
	mov	eax, 2
	ret	
.label_943:
	mov	byte ptr [rdi + 8], 0x1e
	mov	eax, 2
	ret	
	.section	.text
	.align	32
	#Procedure 0x40bc2b
	.globl sub_40bc2b
	.type sub_40bc2b, @function
sub_40bc2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bc30

	.globl bitset_set
	.type bitset_set, @function
bitset_set:
	mov	eax, 1
	mov	cl, sil
	shl	rax, cl
	mov	rcx, rsi
	sar	rcx, 0x3f
	shr	rcx, 0x3a
	add	rcx, rsi
	sar	rcx, 6
	or	qword ptr [rdi + rcx*8], rax
	ret	
	.section	.text
	.align	32
	#Procedure 0x40bc52
	.globl sub_40bc52
	.type sub_40bc52, @function
sub_40bc52:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bc60

	.globl parse_bracket_element
	.type parse_bracket_element, @function
parse_bracket_element:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	dword ptr [rsp + 0x14], r9d
	mov	qword ptr [rsp + 8], r8
	mov	ebp, ecx
	mov	r14, rdx
	mov	rbx, rsi
	mov	r15, rdi
	mov	r13, qword ptr [rbx + 0x48]
	mov	rdi, rbx
	mov	rsi, r13
	call	re_string_char_size_at
	mov	r12d, eax
	cmp	r12d, 2
	jl	.label_948
	mov	dword ptr [r15], 1
	mov	rsi, qword ptr [rbx + 0x48]
	mov	rdi, rbx
	call	re_string_wchar_at
	mov	dword ptr [r15 + 8], eax
	movsxd	rax, r12d
	add	qword ptr [rbx + 0x48], rax
	jmp	.label_946
.label_948:
	movsxd	rax, ebp
	add	r13, rax
	mov	qword ptr [rbx + 0x48], r13
	movzx	eax, byte ptr [r14 + 8]
	add	eax, -0x16
	cmp	eax, 8
	ja	.label_944
	jmp	qword ptr [word ptr [+ (rax * 8) + label_945]]
.label_1988:
	mov	rdi, r15
	mov	rsi, rbx
	mov	rdx, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	parse_bracket_symbol
.label_1987:
	mov	eax, dword ptr [rsp + 0x14]
	test	al, al
	jne	.label_944
	lea	rdi, [rsp + 0x18]
	mov	rsi, rbx
	mov	rdx, qword ptr [rsp + 8]
	call	peek_token_bracket
	movzx	ecx, byte ptr [rsp + 0x20]
	mov	eax, 0xb
	cmp	ecx, 0x15
	jne	.label_947
.label_944:
	mov	dword ptr [r15], 0
	mov	al, byte ptr [r14]
	mov	byte ptr [r15 + 8], al
.label_946:
	xor	eax, eax
.label_947:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40bd3d
	.globl sub_40bd3d
	.type sub_40bd3d, @function
sub_40bd3d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40bd40

	.globl build_range_exp
	.type build_range_exp, @function
build_range_exp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, r9
	mov	rbp, r8
	mov	r15, rcx
	mov	r14, rdx
	mov	r13, rsi
	mov	r12, rdi
	mov	ecx, dword ptr [rbp]
	mov	eax, 0xb
	cmp	ecx, 2
	je	.label_950
	cmp	ecx, 4
	je	.label_950
	mov	edx, dword ptr [rbx]
	cmp	edx, 2
	je	.label_950
	cmp	edx, 4
	je	.label_950
	cmp	ecx, 3
	jne	.label_953
	mov	rdi, qword ptr [rbp + 8]
	call	strlen
	mov	rcx, rax
	mov	eax, 3
	cmp	rcx, 1
	ja	.label_950
.label_953:
	cmp	dword ptr [rbx], 3
	jne	.label_958
	mov	rdi, qword ptr [rbx + 8]
	call	strlen
	mov	rcx, rax
	mov	eax, 3
	cmp	rcx, 1
	ja	.label_950
.label_958:
	mov	eax, dword ptr [rbp]
	cmp	eax, 3
	je	.label_961
	test	eax, eax
	jne	.label_964
	mov	al, byte ptr [rbp + 8]
	jmp	.label_965
.label_961:
	mov	rax, qword ptr [rbp + 8]
	mov	al, byte ptr [rax]
	jmp	.label_965
.label_964:
	xor	eax, eax
.label_965:
	mov	ecx, dword ptr [rbx]
	cmp	ecx, 3
	je	.label_968
	test	ecx, ecx
	jne	.label_969
	mov	dl, byte ptr [rbx + 8]
	jmp	.label_970
.label_968:
	mov	rcx, qword ptr [rbx + 8]
	mov	dl, byte ptr [rcx]
	jmp	.label_970
.label_969:
	xor	edx, edx
.label_970:
	mov	ecx, dword ptr [rbp]
	cmp	ecx, 3
	je	.label_949
	test	ecx, ecx
	jne	.label_952
.label_949:
	movzx	edi, al
	mov	rsi, r14
	mov	ebp, edx
	call	parse_byte
	mov	edx, ebp
	mov	ebp, eax
	jmp	.label_956
.label_952:
	mov	ebp, dword ptr [rbp + 8]
.label_956:
	mov	eax, dword ptr [rbx]
	cmp	eax, 3
	je	.label_955
	test	eax, eax
	jne	.label_957
.label_955:
	movzx	edi, dl
	mov	rsi, r14
	call	parse_byte
	mov	ebx, eax
	jmp	.label_960
.label_957:
	mov	ebx, dword ptr [rbx + 8]
.label_960:
	cmp	ebp, -1
	mov	eax, 3
	je	.label_950
	cmp	ebx, -1
	je	.label_950
	test	r12d, 0x10000
	je	.label_962
	cmp	ebp, ebx
	mov	eax, 0xb
	ja	.label_950
.label_962:
	test	r14, r14
	je	.label_966
	mov	r12, qword ptr [r14 + 0x40]
	cmp	qword ptr [r15], r12
	je	.label_967
.label_963:
	mov	rax, qword ptr [r14 + 8]
	mov	rcx, qword ptr [r14 + 0x40]
	mov	dword ptr [rax + rcx*4], ebp
	mov	rax, qword ptr [r14 + 0x40]
	lea	rcx, [rax + 1]
	mov	qword ptr [r14 + 0x40], rcx
	mov	rcx, qword ptr [r14 + 0x10]
	mov	dword ptr [rcx + rax*4], ebx
.label_966:
	mov	r14d, ebx
	mov	ebp, ebp
	xor	ebx, ebx
	nop	word ptr cs:[rax + rax]
.label_959:
	cmp	rbp, rbx
	ja	.label_954
	cmp	rbx, r14
	ja	.label_954
	mov	rdi, r13
	mov	rsi, rbx
	call	bitset_set
.label_954:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_959
.label_950:
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_967:
	lea	rax, [r12 + r12]
	mov	rdi, qword ptr [r14 + 8]
	lea	rsi, [rax*4 + 4]
	mov	qword ptr [rsp + 0x10], rsi
	call	realloc
	mov	qword ptr [rsp + 8], rax
	mov	rdi, qword ptr [r14 + 0x10]
	mov	rsi, qword ptr [rsp + 0x10]
	call	realloc
	mov	rdi, qword ptr [rsp + 8]
	test	rdi, rdi
	je	.label_951
	test	rax, rax
	je	.label_951
	lea	rcx, [r12 + r12 + 1]
	mov	qword ptr [r14 + 8], rdi
	mov	qword ptr [r14 + 0x10], rax
	mov	qword ptr [r15], rcx
	jmp	.label_963
.label_951:
	mov	rbx, rax
	call	free
	mov	rdi, rbx
	call	free
	mov	eax, 0xc
	jmp	.label_950
	.section	.text
	.align	32
	#Procedure 0x40bf3a
	.globl sub_40bf3a
	.type sub_40bf3a, @function
sub_40bf3a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bf40

	.globl build_equiv_class
	.type build_equiv_class, @function
build_equiv_class:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	strlen
	mov	rcx, rax
	mov	eax, 3
	cmp	rcx, 1
	jne	.label_971
	movzx	esi, byte ptr [rbx]
	mov	rdi, r14
	call	bitset_set
	xor	eax, eax
.label_971:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x40bf75
	.globl sub_40bf75
	.type sub_40bf75, @function
sub_40bf75:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bf80

	.globl build_collating_symbol
	.type build_collating_symbol, @function
build_collating_symbol:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	strlen
	mov	rcx, rax
	mov	eax, 3
	cmp	rcx, 1
	jne	.label_972
	movzx	esi, byte ptr [rbx]
	mov	rdi, r14
	call	bitset_set
	xor	eax, eax
.label_972:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x40bfb5
	.globl sub_40bfb5
	.type sub_40bfb5, @function
sub_40bfb5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40bfc0

	.globl build_charclass
	.type build_charclass, @function
build_charclass:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12, r8
	mov	r13, rcx
	mov	rbx, rdx
	mov	r15, rsi
	mov	r14, rdi
	test	r9d, 0x400000
	je	.label_974
	mov	esi, OFFSET FLAT:.str.7_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1034
	mov	esi, OFFSET FLAT:.str.8_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	jne	.label_974
.label_1034:
	mov	r12d, OFFSET FLAT:.str.9_0
.label_974:
	mov	rbp, qword ptr [rbx + 0x48]
	cmp	qword ptr [r13], rbp
	je	.label_978
.label_996:
	mov	rdi, r12
	call	wctype
	mov	rcx, qword ptr [rbx + 0x48]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbx + 0x48], rdx
	mov	rdx, qword ptr [rbx + 0x18]
	mov	qword ptr [rdx + rcx*8], rax
	mov	esi, OFFSET FLAT:.str.1_3
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_990
	mov	esi, OFFSET FLAT:.str.10_2
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_995
	mov	esi, OFFSET FLAT:.str.8_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1003
	mov	esi, OFFSET FLAT:.str.3_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1011
	mov	esi, OFFSET FLAT:.str.9_0
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1019
	mov	esi, OFFSET FLAT:.str.11_2
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1025
	mov	esi, OFFSET FLAT:.str.12_2
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1027
	mov	esi, OFFSET FLAT:.str.7_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1029
	mov	esi, OFFSET FLAT:.str.13_1
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1009
	mov	esi, OFFSET FLAT:.str.14_2
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1036
	mov	esi, OFFSET FLAT:.str.15_2
	mov	rdi, r12
	call	strcmp
	test	eax, eax
	je	.label_1001
	mov	esi, OFFSET FLAT:.str.16_1
	mov	rdi, r12
	call	strcmp
	mov	ecx, eax
	mov	eax, 4
	test	ecx, ecx
	jne	.label_975
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_987
.label_994:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x10
	je	.label_1006
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1006:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_994
	jmp	.label_975
.label_990:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_1008
	nop	word ptr cs:[rax + rax]
.label_1023:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 8
	je	.label_1015
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1015:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1023
	jmp	.label_975
	.section	.text
	.align	32
	#Procedure 0x40c1b8
	.globl sub_40c1b8
	.type sub_40c1b8, @function
sub_40c1b8:

	nop	dword ptr [rax + rax]
.label_1008:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 8
	je	.label_1017
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1017:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1008
	jmp	.label_975
.label_995:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_991
	nop	dword ptr [rax]
.label_980:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 2
	je	.label_973
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_973:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_980
	jmp	.label_975
	.section	.text
	.align	32
	#Procedure 0x40c228
	.globl sub_40c228
	.type sub_40c228, @function
sub_40c228:

	nop	dword ptr [rax + rax]
.label_991:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 2
	je	.label_984
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_984:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_991
	jmp	.label_975
.label_1003:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_998
	nop	dword ptr [rax]
.label_1013:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 2
	je	.label_1004
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1004:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1013
	jmp	.label_975
	.section	.text
	.align	32
	#Procedure 0x40c299
	.globl sub_40c299
	.type sub_40c299, @function
sub_40c299:

	nop	dword ptr [rax]
.label_998:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 2
	je	.label_1021
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1021:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_998
	jmp	.label_975
.label_1011:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_1028
	nop	word ptr [rax + rax]
.label_1035:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x20
	je	.label_1030
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1030:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1035
	jmp	.label_975
.label_1028:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x20
	je	.label_977
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_977:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1028
	jmp	.label_975
.label_978:
	lea	rax, [rbp + rbp]
	mov	rdi, qword ptr [rbx + 0x18]
	lea	rsi, [rax*8 + 8]
	call	realloc
	mov	rcx, rax
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_975
	lea	rax, [rbp + rbp + 1]
	mov	qword ptr [rbx + 0x18], rcx
	mov	qword ptr [r13], rax
	jmp	.label_996
.label_1019:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_1005
	nop	dword ptr [rax]
.label_1012:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 4
	je	.label_1010
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1010:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1012
	jmp	.label_975
.label_1005:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 4
	je	.label_1024
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1024:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1005
	jmp	.label_975
.label_1025:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_985
	nop	word ptr cs:[rax + rax]
.label_976:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 8
	je	.label_1022
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1022:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_976
	jmp	.label_975
.label_985:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 8
	je	.label_981
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_981:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_985
	jmp	.label_975
.label_1027:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_992
	nop	word ptr cs:[rax + rax]
.label_1007:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x40
	je	.label_999
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_999:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1007
	jmp	.label_975
.label_992:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x40
	je	.label_986
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_986:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_992
	jmp	.label_975
.label_1029:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_979
	nop	word ptr cs:[rax + rax]
.label_1033:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 1
	je	.label_1031
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1031:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1033
	jmp	.label_975
.label_979:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 1
	je	.label_1000
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1000:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_979
	jmp	.label_975
.label_1009:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_983
	nop	word ptr cs:[rax + rax]
.label_982:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 1
	je	.label_989
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_989:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_982
	jmp	.label_975
.label_983:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 1
	je	.label_1002
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1002:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_983
	jmp	.label_975
.label_1036:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_1032
.label_1026:
	mov	rax, qword ptr [r12]
	cmp	word ptr [rax + rbx*2], 0
	jns	.label_1014
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_1014:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1026
	jmp	.label_975
.label_1032:
	mov	rax, qword ptr [r12]
	cmp	word ptr [rax + rbx*2], 0
	jns	.label_997
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_997:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1032
	jmp	.label_975
.label_987:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2 + 1], 0x10
	je	.label_1016
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1016:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_987
	jmp	.label_975
.label_1001:
	call	__ctype_b_loc
	mov	r12, rax
	xor	ebx, ebx
	test	r14, r14
	jne	.label_1018
.label_988:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 4
	je	.label_993
	mov	rdi, r15
	mov	rsi, rbx
	call	bitset_set
.label_993:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_988
.label_975:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1018:
	mov	rax, qword ptr [r12]
	test	byte ptr [rax + rbx*2], 4
	je	.label_1020
	movzx	esi, byte ptr [r14 + rbx]
	mov	rdi, r15
	call	bitset_set
.label_1020:
	inc	rbx
	xor	eax, eax
	cmp	rbx, 0x100
	jne	.label_1018
	jmp	.label_975
	.section	.text
	.align	32
	#Procedure 0x40c682
	.globl sub_40c682
	.type sub_40c682, @function
sub_40c682:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40c690

	.globl bitset_not
	.type bitset_not, @function
bitset_not:
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_1037:
	not	qword ptr [rdi + rax*8]
	inc	rax
	cmp	rax, 4
	jne	.label_1037
	ret	
	.section	.text
	.align	32
	#Procedure 0x40c6ae
	.globl sub_40c6ae
	.type sub_40c6ae, @function
sub_40c6ae:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40c6b0

	.globl bitset_mask
	.type bitset_mask, @function
bitset_mask:
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_1038:
	mov	rcx, qword ptr [rsi + rax*8]
	and	qword ptr [rdi + rax*8], rcx
	inc	rax
	cmp	rax, 4
	jne	.label_1038
	ret	
	.section	.text
	.align	32
	#Procedure 0x40c6d2
	.globl sub_40c6d2
	.type sub_40c6d2, @function
sub_40c6d2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40c6e0

	.globl re_string_char_size_at
	.type re_string_char_size_at, @function
re_string_char_size_at:
	mov	eax, 1
	cmp	dword ptr [rdi + 0x90], 1
	je	.label_1039
	lea	rcx, [rsi + 1]
	cmp	rcx, qword ptr [rdi + 0x30]
	jge	.label_1039
	lea	rcx, [rsi*4]
	add	rcx, qword ptr [rdi + 0x10]
	mov	eax, 1
	nop	dword ptr [rax]
.label_1040:
	cmp	dword ptr [rcx + rax*4], -1
	jne	.label_1039
	lea	rdx, [rsi + rax + 1]
	inc	rax
	cmp	rdx, qword ptr [rdi + 0x30]
	jl	.label_1040
.label_1039:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40c725
	.globl sub_40c725
	.type sub_40c725, @function
sub_40c725:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40c730

	.globl parse_bracket_symbol
	.type parse_bracket_symbol, @function
parse_bracket_symbol:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	rbx, rsi
	mov	r15, rdi
	mov	rax, qword ptr [rbx + 0x68]
	mov	r14d, 7
	cmp	rax, qword ptr [rbx + 0x48]
	jle	.label_1043
	mov	rbp, -1
	movzx	r13d, byte ptr [r12]
.label_1044:
	movzx	eax, byte ptr [r12 + 8]
	cmp	eax, 0x1e
	jne	.label_1041
	mov	rdi, rbx
	call	re_string_fetch_byte_case
	jmp	.label_1045
	.section	.text
	.align	32
	#Procedure 0x40c775
	.globl sub_40c775
	.type sub_40c775, @function
sub_40c775:

	nop	word ptr cs:[rax + rax]
.label_1041:
	mov	rax, qword ptr [rbx + 0x48]
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 0x48], rcx
	mov	rcx, qword ptr [rbx + 8]
	mov	al, byte ptr [rcx + rax]
.label_1045:
	mov	rcx, qword ptr [rbx + 0x48]
	cmp	qword ptr [rbx + 0x68], rcx
	jle	.label_1043
	movzx	edx, al
	cmp	edx, r13d
	jne	.label_1047
	mov	rdx, qword ptr [rbx + 8]
	movzx	edx, byte ptr [rdx + rcx]
	cmp	edx, 0x5d
	je	.label_1042
.label_1047:
	mov	rcx, qword ptr [r15 + 8]
	mov	byte ptr [rcx + rbp + 1], al
	inc	rbp
	cmp	rbp, 0x1e
	jle	.label_1044
.label_1043:
	mov	eax, r14d
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1042:
	inc	rcx
	mov	qword ptr [rbx + 0x48], rcx
	mov	rax, qword ptr [r15 + 8]
	mov	byte ptr [rax + rbp + 1], 0
	movzx	eax, byte ptr [r12 + 8]
	xor	r14d, r14d
	cmp	eax, 0x1e
	je	.label_1046
	cmp	eax, 0x1c
	je	.label_1048
	cmp	eax, 0x1a
	jne	.label_1043
	mov	dword ptr [r15], 3
	jmp	.label_1043
.label_1046:
	mov	dword ptr [r15], 4
	jmp	.label_1043
.label_1048:
	mov	dword ptr [r15], 2
	jmp	.label_1043
	.section	.text
	.align	32
	#Procedure 0x40c818
	.globl sub_40c818
	.type sub_40c818, @function
sub_40c818:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40c820

	.globl re_string_fetch_byte_case
	.type re_string_fetch_byte_case, @function
re_string_fetch_byte_case:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	cmp	byte ptr [rbx + 0x8b], 0
	jne	.label_1049
	mov	rax, qword ptr [rbx + 0x48]
.label_1051:
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 0x48], rcx
	mov	rcx, qword ptr [rbx + 8]
.label_1055:
	mov	bpl, byte ptr [rcx + rax]
.label_1050:
	movzx	eax, bpl
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_1049:
	cmp	byte ptr [rbx + 0x8c], 0
	je	.label_1053
	mov	rax, qword ptr [rbx + 0x48]
	cmp	rax, qword ptr [rbx + 0x30]
	je	.label_1054
	mov	rcx, qword ptr [rbx + 0x10]
	cmp	dword ptr [rcx + rax*4], -1
	je	.label_1051
.label_1054:
	mov	r14, qword ptr [rbx + 0x48]
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 0x18]
	mov	rdx, qword ptr [rbx + 0x28]
	add	rdx, qword ptr [rcx + r14*8]
	mov	bpl, byte ptr [rax + rdx]
	test	bpl, bpl
	js	.label_1052
	mov	rdi, rbx
	mov	rsi, r14
	call	re_string_char_size_at
	cdqe	
	add	rax, r14
	mov	qword ptr [rbx + 0x48], rax
	jmp	.label_1050
.label_1053:
	mov	rax, qword ptr [rbx + 0x48]
	lea	rcx, [rax + 1]
	add	rax, qword ptr [rbx + 0x28]
	mov	qword ptr [rbx + 0x48], rcx
	mov	rcx, qword ptr [rbx]
	jmp	.label_1055
.label_1052:
	lea	rax, [r14 + 1]
	mov	qword ptr [rbx + 0x48], rax
	mov	rax, qword ptr [rbx + 8]
	mov	bpl, byte ptr [rax + r14]
	jmp	.label_1050
	.section	.text
	.align	32
	#Procedure 0x40c8c3
	.globl sub_40c8c3
	.type sub_40c8c3, @function
sub_40c8c3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40c8d0

	.globl parse_byte
	.type parse_byte, @function
parse_byte:
	test	rsi, rsi
	je	.label_1056
	jmp	btowc
.label_1056:
	mov	eax, edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x40c8dd
	.globl sub_40c8dd
	.type sub_40c8dd, @function
sub_40c8dd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40c8e0

	.globl fetch_number
	.type fetch_number, @function
fetch_number:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	r12, rsi
	mov	r15, rdi
	mov	rcx, -1
	mov	r13d, 0x8000
	jmp	.label_1057
.label_1060:
	lea	rcx, [rbx + rbx*4]
	lea	rcx, [rax + rcx*2 - 0x30]
	cmp	rcx, 0x8000
	cmovg	rcx, r13
	nop	word ptr cs:[rax + rax]
.label_1057:
	mov	rbx, rcx
	mov	rdi, r12
	mov	rsi, r15
	mov	rdx, r14
	call	fetch_token
	movzx	eax, byte ptr [r12]
	movzx	edx, byte ptr [r12 + 8]
	cmp	edx, 0x18
	je	.label_1058
	cmp	edx, 2
	je	.label_1059
	cmp	eax, 0x2c
	je	.label_1058
	cmp	eax, 0x30
	mov	rcx, -2
	jb	.label_1057
	cmp	edx, 1
	jne	.label_1057
	cmp	rbx, -2
	je	.label_1057
	movzx	edx, al
	cmp	edx, 0x39
	ja	.label_1057
	cmp	rbx, -1
	jne	.label_1060
	add	rax, -0x30
	mov	rcx, rax
	jmp	.label_1057
.label_1059:
	mov	rbx, -2
.label_1058:
	mov	rax, rbx
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40c98d
	.globl sub_40c98d
	.type sub_40c98d, @function
sub_40c98d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40c990

	.globl duplicate_tree
	.type duplicate_tree, @function
duplicate_tree:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rsi
	mov	rbx, rdi
	mov	r12, qword ptr [rbx]
	lea	rcx, [rbx + 0x28]
	xor	r14d, r14d
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r15
	call	create_token_tree
	mov	qword ptr [rsp], rax
	test	rax, rax
	je	.label_1068
	lea	r13, [rsp]
	xor	r14d, r14d
.label_1063:
	mov	qword ptr [rax], r12
	mov	rax, qword ptr [r13]
	or	dword ptr [rax + 0x30], 0x40000
	mov	r12, qword ptr [r13]
	mov	rbp, qword ptr [rbx + 8]
	test	rbp, rbp
	je	.label_1065
	lea	r13, [r12 + 8]
	jmp	.label_1064
	.section	.text
	.align	32
	#Procedure 0x40c9ed
	.globl sub_40c9ed
	.type sub_40c9ed, @function
sub_40c9ed:

	nop	dword ptr [rax]
.label_1065:
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_1067:
	mov	rcx, rax
	mov	rax, rbx
	mov	rbp, qword ptr [rax + 0x10]
	cmp	rbp, rcx
	je	.label_1061
	test	rbp, rbp
	jne	.label_1066
.label_1061:
	mov	rbx, qword ptr [rax]
	mov	r12, qword ptr [r12]
	test	rbx, rbx
	jne	.label_1067
	jmp	.label_1062
	.section	.text
	.align	32
	#Procedure 0x40ca22
	.globl sub_40ca22
	.type sub_40ca22, @function
sub_40ca22:

	nop	word ptr cs:[rax + rax]
.label_1066:
	lea	r13, [r12 + 0x10]
.label_1064:
	lea	rcx, [rbp + 0x28]
	xor	esi, esi
	xor	edx, edx
	mov	rdi, r15
	call	create_token_tree
	mov	qword ptr [r13], rax
	test	rax, rax
	mov	rbx, rbp
	jne	.label_1063
	jmp	.label_1068
.label_1062:
	mov	r14, qword ptr [rsp]
.label_1068:
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40ca6d
	.globl sub_40ca6d
	.type sub_40ca6d, @function
sub_40ca6d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40ca70

	.globl mark_opt_subexp
	.type mark_opt_subexp, @function
mark_opt_subexp:
	mov	eax, dword ptr [rsi + 0x30]
	movzx	ecx, al
	cmp	ecx, 0x11
	jne	.label_1069
	cmp	qword ptr [rsi + 0x28], rdi
	jne	.label_1069
	or	eax, 0x80000
	mov	dword ptr [rsi + 0x30], eax
.label_1069:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x40ca8c
	.globl sub_40ca8c
	.type sub_40ca8c, @function
sub_40ca8c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40ca90

	.globl preorder
	.type preorder, @function
preorder:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	mov	rbx, rdi
	mov	rdi, r14
	mov	rsi, rbx
	call	r15
	test	eax, eax
	jne	.label_1071
.label_1072:
	mov	r12, qword ptr [rbx + 8]
	test	r12, r12
	mov	ecx, 0
	jne	.label_1073
	nop	dword ptr [rax]
.label_1070:
	mov	rax, rcx
	mov	rcx, rbx
	mov	r12, qword ptr [rcx + 0x10]
	cmp	r12, rax
	je	.label_1074
	test	r12, r12
	jne	.label_1073
.label_1074:
	mov	rbx, qword ptr [rcx]
	xor	eax, eax
	test	rbx, rbx
	jne	.label_1070
	jmp	.label_1071
.label_1073:
	mov	rdi, r14
	mov	rsi, r12
	call	r15
	test	eax, eax
	mov	rbx, r12
	je	.label_1072
.label_1071:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cafc
	.globl sub_40cafc
	.type sub_40cafc, @function
sub_40cafc:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40cb00

	.globl optimize_subexps
	.type optimize_subexps, @function
optimize_subexps:
	movzx	eax, byte ptr [rsi + 0x30]
	cmp	eax, 4
	jne	.label_1075
	mov	rax, qword ptr [rdi + 0xe0]
	test	rax, rax
	je	.label_1075
	movsxd	rcx, dword ptr [rsi + 0x28]
	mov	rcx, qword ptr [rax + rcx*8]
	mov	qword ptr [rsi + 0x28], rcx
	mov	eax, 1
	shl	eax, cl
	cdqe	
	or	qword ptr [rdi + 0xa0], rax
	xor	eax, eax
	ret	
.label_1075:
	movzx	eax, byte ptr [rsi + 0x30]
	cmp	eax, 0x11
	jne	.label_1076
	mov	rax, qword ptr [rsi + 8]
	test	rax, rax
	je	.label_1076
	movzx	ecx, byte ptr [rax + 0x30]
	cmp	ecx, 0x11
	jne	.label_1076
	mov	rdx, qword ptr [rax + 8]
	mov	rcx, qword ptr [rax + 0x28]
	mov	qword ptr [rsi + 8], rdx
	test	rdx, rdx
	je	.label_1077
	mov	qword ptr [rdx], rsi
.label_1077:
	mov	rax, qword ptr [rsi + 0x28]
	mov	rdx, qword ptr [rdi + 0xe0]
	mov	rax, qword ptr [rdx + rax*8]
	mov	qword ptr [rdx + rcx*8], rax
	cmp	rcx, 0x3f
	jg	.label_1076
	mov	rax, -2
	rol	rax, cl
	and	qword ptr [rdi + 0xa0], rax
.label_1076:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cb90

	.globl lower_subexps
	.type lower_subexps, @function
lower_subexps:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	dword ptr [rsp + 4], 0
	mov	rdx, qword ptr [rbx + 8]
	test	rdx, rdx
	je	.label_1078
	movzx	eax, byte ptr [rdx + 0x30]
	cmp	eax, 0x11
	jne	.label_1078
	lea	rdi, [rsp + 4]
	mov	rsi, r14
	call	lower_subexp
	mov	qword ptr [rbx + 8], rax
	test	rax, rax
	je	.label_1078
	mov	qword ptr [rax], rbx
.label_1078:
	mov	rdx, qword ptr [rbx + 0x10]
	test	rdx, rdx
	je	.label_1079
	movzx	eax, byte ptr [rdx + 0x30]
	cmp	eax, 0x11
	jne	.label_1079
	lea	rdi, [rsp + 4]
	mov	rsi, r14
	call	lower_subexp
	mov	qword ptr [rbx + 0x10], rax
	test	rax, rax
	je	.label_1079
	mov	qword ptr [rax], rbx
.label_1079:
	mov	eax, dword ptr [rsp + 4]
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cc04
	.globl sub_40cc04
	.type sub_40cc04, @function
sub_40cc04:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40cc10

	.globl calc_first
	.type calc_first, @function
calc_first:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	movzx	eax, byte ptr [rbx + 0x30]
	cmp	eax, 0x10
	jne	.label_1080
	mov	rax, qword ptr [rbx + 8]
	mov	rax, qword ptr [rax + 0x18]
	mov	qword ptr [rbx + 0x18], rax
	mov	rax, qword ptr [rbx + 8]
	mov	rax, qword ptr [rax + 0x38]
	mov	qword ptr [rbx + 0x38], rax
	xor	eax, eax
	jmp	.label_1081
.label_1080:
	mov	qword ptr [rbx + 0x18], rbx
	mov	rsi, qword ptr [rbx + 0x28]
	mov	rdx, qword ptr [rbx + 0x30]
	mov	rdi, r14
	call	re_dfa_add_node
	mov	rcx, rax
	mov	qword ptr [rbx + 0x38], rcx
	mov	eax, 0xc
	cmp	rcx, -1
	je	.label_1081
	xor	eax, eax
	movzx	edx, byte ptr [rbx + 0x30]
	cmp	edx, 0xc
	jne	.label_1081
	mov	edx, dword ptr [rbx + 0x28]
	mov	rsi, qword ptr [r14]
	shl	rcx, 4
	shl	edx, 8
	and	edx, 0x3ff00
	mov	edi, 0xfffc00ff
	and	edi, dword ptr [rsi + rcx + 8]
	or	edi, edx
	mov	dword ptr [rsi + rcx + 8], edi
.label_1081:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cc9a
	.globl sub_40cc9a
	.type sub_40cc9a, @function
sub_40cc9a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40cca0

	.globl calc_next
	.type calc_next, @function
calc_next:
	movzx	eax, byte ptr [rsi + 0x30]
	cmp	eax, 0x10
	je	.label_1082
	cmp	eax, 0xb
	jne	.label_1083
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rax + 0x20], rsi
	xor	eax, eax
	ret	
.label_1082:
	mov	rax, qword ptr [rsi + 8]
	mov	rcx, qword ptr [rsi + 0x10]
	mov	rcx, qword ptr [rcx + 0x18]
	mov	qword ptr [rax + 0x20], rcx
	mov	rax, qword ptr [rsi + 0x10]
	jmp	.label_1084
.label_1083:
	mov	rax, qword ptr [rsi + 8]
	test	rax, rax
	je	.label_1086
	mov	rcx, qword ptr [rsi + 0x20]
	mov	qword ptr [rax + 0x20], rcx
.label_1086:
	mov	rax, qword ptr [rsi + 0x10]
	test	rax, rax
	je	.label_1085
.label_1084:
	mov	rcx, qword ptr [rsi + 0x20]
	mov	qword ptr [rax + 0x20], rcx
.label_1085:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x40ccf4
	.globl sub_40ccf4
	.type sub_40ccf4, @function
sub_40ccf4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40cd00

	.globl link_nfa_nodes
	.type link_nfa_nodes, @function
link_nfa_nodes:
	push	rax
	mov	rcx, qword ptr [rsi + 0x38]
	movzx	eax, byte ptr [rsi + 0x30]
	lea	edx, [rax - 2]
	cmp	edx, 0xe
	ja	.label_1087
	jmp	qword ptr [word ptr [+ (rdx * 8) + label_1091]]
.label_1959:
	lea	rax, [rcx + rcx*2]
	shl	rax, 3
	add	rax, qword ptr [rdi + 0x28]
	mov	rcx, qword ptr [rsi + 0x20]
	mov	rsi, qword ptr [rcx + 0x38]
.label_1090:
	mov	rdi, rax
	pop	rax
	jmp	re_node_set_init_1
.label_1960:
	or	byte ptr [rdi + 0xb0], 1
	mov	rax, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rsi + 0x10]
	add	rsi, 0x20
	test	rax, rax
	lea	rax, [rax + 0x18]
	cmove	rax, rsi
	mov	rax, qword ptr [rax]
	mov	rax, qword ptr [rax + 0x38]
	test	rdx, rdx
	lea	rdx, [rdx + 0x18]
	cmove	rdx, rsi
	test	rax, rax
	js	.label_1092
	mov	rdx, qword ptr [rdx]
	mov	rdx, qword ptr [rdx + 0x38]
	test	rdx, rdx
	js	.label_1089
	lea	rcx, [rcx + rcx*2]
	shl	rcx, 3
	add	rcx, qword ptr [rdi + 0x28]
	mov	rdi, rcx
	mov	rsi, rax
	pop	rax
	jmp	re_node_set_init_2
.label_1957:
	cmp	qword ptr [rsi + 0x20], 0
	je	.label_1093
	mov	edi, OFFSET FLAT:.str.17_2
	mov	esi, OFFSET FLAT:.str.6_1
	mov	edx, 0x59f
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.link_nfa_nodes
	call	__assert_fail
.label_1958:
	mov	rax, qword ptr [rsi + 0x20]
	mov	rax, qword ptr [rax + 0x38]
	mov	rdx, qword ptr [rdi + 0x18]
	mov	qword ptr [rdx + rcx*8], rax
	movzx	eax, byte ptr [rsi + 0x30]
	cmp	eax, 4
	jne	.label_1093
	lea	rax, [rcx + rcx*2]
	shl	rax, 3
	add	rax, qword ptr [rdi + 0x28]
	mov	rdx, qword ptr [rdi + 0x18]
	mov	rsi, qword ptr [rdx + rcx*8]
	jmp	.label_1090
.label_1087:
	test	al, 8
	jne	.label_1088
	mov	rax, qword ptr [rsi + 0x20]
	mov	rax, qword ptr [rax + 0x38]
	mov	rdx, qword ptr [rdi + 0x18]
	mov	qword ptr [rdx + rcx*8], rax
.label_1093:
	xor	eax, eax
	pop	rcx
	ret	
.label_1092:
	mov	edi, OFFSET FLAT:.str.18_2
	mov	esi, OFFSET FLAT:.str.6_1
	mov	edx, 0x5af
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.link_nfa_nodes
	call	__assert_fail
.label_1089:
	mov	edi, OFFSET FLAT:.str.19_1
	mov	esi, OFFSET FLAT:.str.6_1
	mov	edx, 0x5b0
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.link_nfa_nodes
	call	__assert_fail
.label_1088:
	mov	edi, OFFSET FLAT:.str.20_0
	mov	esi, OFFSET FLAT:.str.6_1
	mov	edx, 0x5c2
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.link_nfa_nodes
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x40ce4f
	.globl sub_40ce4f
	.type sub_40ce4f, @function
sub_40ce4f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40ce50

	.globl calc_eclosure
	.type calc_eclosure, @function
calc_eclosure:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x20
	mov	r14, rdi
	xor	ebx, ebx
	lea	r15, [rsp + 8]
	xor	r12d, r12d
	jmp	.label_1096
	.section	.text
	.align	32
	#Procedure 0x40ce6c
	.globl sub_40ce6c
	.type sub_40ce6c, @function
sub_40ce6c:

	nop	dword ptr [rax]
.label_1094:
	inc	rbx
.label_1096:
	cmp	rbx, qword ptr [r14 + 0x10]
	jne	.label_1097
	xor	ebx, ebx
	test	r12b, 1
	mov	r12d, 0
	je	.label_1098
.label_1097:
	mov	rax, qword ptr [r14 + 0x30]
	lea	r13, [rbx + rbx*2]
	cmp	qword ptr [rax + r13*8 + 8], 0
	jne	.label_1094
	mov	ecx, 1
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	calc_eclosure_iter
	test	eax, eax
	jne	.label_1095
	mov	rax, qword ptr [r14 + 0x30]
	cmp	qword ptr [rax + r13*8 + 8], 0
	jne	.label_1094
	mov	rdi, qword ptr [rsp + 0x18]
	call	free
	mov	r12b, 1
	jmp	.label_1094
.label_1095:
	mov	ebx, eax
.label_1098:
	mov	eax, ebx
	add	rsp, 0x20
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cedb
	.globl sub_40cedb
	.type sub_40cedb, @function
sub_40cedb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40cee0

	.globl calc_inveclosure
	.type calc_inveclosure, @function
calc_inveclosure:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r13, rdi
	xor	eax, eax
	cmp	qword ptr [r13 + 0x10], 0
	je	.label_1099
	xor	eax, eax
	xorps	xmm0, xmm0
	xor	ecx, ecx
.label_1100:
	mov	rdx, qword ptr [r13 + 0x38]
	movups	xmmword ptr [rdx + rax], xmm0
	mov	qword ptr [rdx + rax + 0x10], 0
	inc	rcx
	mov	rdx, qword ptr [r13 + 0x10]
	add	rax, 0x18
	cmp	rcx, rdx
	jb	.label_1100
	xor	eax, eax
	test	rdx, rdx
	je	.label_1099
	xor	r14d, r14d
.label_1101:
	mov	rax, qword ptr [r13 + 0x30]
	lea	r15, [r14 + r14*2]
	cmp	qword ptr [rax + r15*8 + 8], 0
	jle	.label_1102
	mov	r12, qword ptr [rax + r15*8 + 0x10]
	xor	ebx, ebx
	nop	word ptr cs:[rax + rax]
.label_1103:
	mov	rax, qword ptr [r13 + 0x38]
	mov	rcx, qword ptr [r12 + rbx*8]
	lea	rcx, [rcx + rcx*2]
	lea	rdi, [rax + rcx*8]
	mov	rsi, r14
	call	re_node_set_insert_last
	mov	cl, al
	mov	eax, 0xc
	test	cl, cl
	je	.label_1099
	inc	rbx
	mov	rax, qword ptr [r13 + 0x30]
	cmp	rbx, qword ptr [rax + r15*8 + 8]
	jl	.label_1103
.label_1102:
	inc	r14
	xor	eax, eax
	cmp	r14, qword ptr [r13 + 0x10]
	jb	.label_1101
.label_1099:
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40cf96
	.globl sub_40cf96
	.type sub_40cf96, @function
sub_40cf96:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40cfa0

	.globl lower_subexp
	.type lower_subexp, @function
lower_subexp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rdx
	mov	r13, qword ptr [rsi]
	mov	rbp, qword ptr [r15 + 8]
	test	rbp, rbp
	je	.label_1104
	mov	al, byte ptr [rsi + 0x38]
	and	al, 0x10
	je	.label_1104
	mov	rax, qword ptr [r15 + 0x28]
	cmp	rax, 0x3f
	jg	.label_1106
	mov	rcx, qword ptr [r13 + 0xa0]
	bt	rcx, rax
	jae	.label_1106
.label_1104:
	mov	qword ptr [rsp], rdi
	xor	esi, esi
	xor	edx, edx
	mov	ecx, 8
	mov	rdi, r13
	call	create_tree
	mov	r12, rax
	xor	esi, esi
	xor	edx, edx
	mov	ecx, 9
	mov	rdi, r13
	call	create_tree
	mov	rbx, rax
	test	rbp, rbp
	mov	r14, rbx
	je	.label_1107
	mov	ecx, 0x10
	mov	rdi, r13
	mov	rsi, rbp
	mov	rdx, rbx
	call	create_tree
	mov	r14, rax
.label_1107:
	mov	ecx, 0x10
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r14
	call	create_tree
	test	rbx, rbx
	je	.label_1105
	test	r12, r12
	je	.label_1105
	test	r14, r14
	je	.label_1105
	test	rax, rax
	je	.label_1105
	mov	rcx, qword ptr [r15 + 0x28]
	mov	qword ptr [rbx + 0x28], rcx
	mov	qword ptr [r12 + 0x28], rcx
	mov	ecx, 0x80000
	and	ecx, dword ptr [r15 + 0x30]
	mov	edx, 0xfff7ffff
	mov	esi, dword ptr [rbx + 0x30]
	and	esi, edx
	or	esi, ecx
	mov	dword ptr [rbx + 0x30], esi
	and	edx, dword ptr [r12 + 0x30]
	or	edx, ecx
	mov	dword ptr [r12 + 0x30], edx
	jmp	.label_1108
.label_1106:
	mov	rax, qword ptr [r15 + 8]
.label_1108:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1105:
	mov	rax, qword ptr [rsp]
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	jmp	.label_1108
	.section	.text
	.align	32
	#Procedure 0x40d0a5
	.globl sub_40d0a5
	.type sub_40d0a5, @function
sub_40d0a5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d0b0

	.globl re_dfa_add_node
	.type re_dfa_add_node, @function
re_dfa_add_node:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r15, rdx
	mov	r12, rsi
	mov	rbx, rdi
	mov	rbp, qword ptr [rbx + 8]
	cmp	qword ptr [rbx + 0x10], rbp
	jae	.label_1113
.label_1114:
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 0x10]
	shl	rcx, 4
	mov	qword ptr [rax + rcx], r12
	mov	qword ptr [rax + rcx + 8], r15
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 0x10]
	shl	rcx, 4
	and	dword ptr [rax + rcx + 8], 0xfffc00ff
	movzx	eax, r15b
	cmp	eax, 5
	jne	.label_1111
	mov	cl, 1
	cmp	dword ptr [rbx + 0xb4], 1
	jg	.label_1110
.label_1111:
	cmp	eax, 6
	sete	cl
.label_1110:
	movzx	eax, cl
	mov	rcx, qword ptr [rbx]
	mov	rdx, qword ptr [rbx + 0x10]
	shl	rdx, 4
	shl	eax, 0x14
	mov	esi, 0xffefffff
	and	esi, dword ptr [rcx + rdx + 8]
	or	esi, eax
	mov	dword ptr [rcx + rdx + 8], esi
	mov	rax, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rbx + 0x18]
	mov	qword ptr [rcx + rax*8], -1
	mov	rax, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rbx + 0x28]
	lea	rax, [rax + rax*2]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rcx + rax*8], xmm0
	mov	qword ptr [rcx + rax*8 + 0x10], 0
	mov	rax, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rbx + 0x30]
	lea	rax, [rax + rax*2]
	movups	xmmword ptr [rcx + rax*8], xmm0
	mov	qword ptr [rcx + rax*8 + 0x10], 0
	mov	r14, qword ptr [rbx + 0x10]
	lea	rax, [r14 + 1]
	mov	qword ptr [rbx + 0x10], rax
.label_1109:
	mov	rax, r14
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1113:
	lea	r13, [rbp + rbp]
	mov	r14, -1
	movabs	rax, 0xaaaaaaaaaaaaaaa
	cmp	r13, rax
	ja	.label_1109
	mov	rdi, qword ptr [rbx]
	mov	rsi, rbp
	shl	rsi, 5
	call	realloc
	test	rax, rax
	je	.label_1109
	mov	qword ptr [rsp], r13
	mov	qword ptr [rbx], rax
	mov	rdi, qword ptr [rbx + 0x18]
	shl	rbp, 4
	mov	rsi, rbp
	call	realloc
	mov	qword ptr [rsp + 0x10], rax
	mov	rdi, qword ptr [rbx + 0x20]
	mov	rsi, rbp
	call	realloc
	mov	qword ptr [rsp + 8], rax
	mov	rdi, qword ptr [rbx + 0x28]
	lea	rbp, [rbp + rbp*2]
	mov	rsi, rbp
	call	realloc
	mov	r13, rax
	mov	rdi, qword ptr [rbx + 0x30]
	mov	rsi, rbp
	mov	rbp, qword ptr [rsp + 8]
	call	realloc
	mov	rdi, qword ptr [rsp + 0x10]
	test	rdi, rdi
	je	.label_1112
	test	rbp, rbp
	je	.label_1112
	test	r13, r13
	je	.label_1112
	test	rax, rax
	je	.label_1112
	mov	qword ptr [rbx + 0x18], rdi
	mov	qword ptr [rbx + 0x20], rbp
	mov	qword ptr [rbx + 0x28], r13
	mov	qword ptr [rbx + 0x30], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbx + 8], rax
	jmp	.label_1114
.label_1112:
	mov	r15, rax
	call	free
	mov	rdi, rbp
	call	free
	mov	rdi, r13
	call	free
	mov	rdi, r15
	call	free
	jmp	.label_1109
	.section	.text
	.align	32
	#Procedure 0x40d275
	.globl sub_40d275
	.type sub_40d275, @function
sub_40d275:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d280

	.globl re_node_set_init_2
	.type re_node_set_init_2, @function
re_node_set_init_2:
	push	r15
	push	r14
	push	rbx
	mov	r15, rdx
	mov	r14, rsi
	mov	rbx, rdi
	mov	qword ptr [rbx], 2
	mov	edi, 0x10
	call	malloc
	mov	rcx, rax
	mov	qword ptr [rbx + 0x10], rcx
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1118
	cmp	r14, r15
	jne	.label_1115
	mov	qword ptr [rbx + 8], 1
	mov	rax, qword ptr [rbx + 0x10]
	mov	qword ptr [rax], r14
	jmp	.label_1116
.label_1115:
	mov	qword ptr [rbx + 8], 2
	mov	rax, qword ptr [rbx + 0x10]
	jge	.label_1117
	mov	qword ptr [rax], r14
	mov	rax, qword ptr [rbx + 0x10]
	mov	qword ptr [rax + 8], r15
	jmp	.label_1116
.label_1117:
	mov	qword ptr [rax], r15
	mov	rax, qword ptr [rbx + 0x10]
	mov	qword ptr [rax + 8], r14
.label_1116:
	xor	eax, eax
.label_1118:
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40d2f4
	.globl sub_40d2f4
	.type sub_40d2f4, @function
sub_40d2f4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d300

	.globl re_node_set_init_1
	.type re_node_set_init_1, @function
re_node_set_init_1:
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	qword ptr [rbx], 1
	mov	qword ptr [rbx + 8], 1
	mov	edi, 8
	call	malloc
	mov	qword ptr [rbx + 0x10], rax
	test	rax, rax
	je	.label_1120
	mov	qword ptr [rax], r14
	xor	eax, eax
.label_1119:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_1120:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	eax, 0xc
	jmp	.label_1119
	.section	.text
	.align	32
	#Procedure 0x40d346
	.globl sub_40d346
	.type sub_40d346, @function
sub_40d346:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d350

	.globl calc_eclosure_iter
	.type calc_eclosure_iter, @function
calc_eclosure_iter:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	dword ptr [rsp + 4], ecx
	mov	r15, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rdi
	mov	rax, qword ptr [rbp + 0x28]
	lea	r14, [r15 + r15*2]
	mov	rsi, qword ptr [rax + r14*8 + 8]
	inc	rsi
	lea	rdi, [rsp + 0x30]
	call	re_node_set_alloc
	test	eax, eax
	jne	.label_1122
	mov	rax, qword ptr [rbp + 0x30]
	mov	qword ptr [rax + r14*8 + 8], -1
	mov	rax, qword ptr [rbp]
	mov	rbx, r15
	shl	rbx, 4
	mov	r8d, dword ptr [rax + rbx + 8]
	shr	r8d, 8
	and	r8d, 0x3ff
	je	.label_1123
	mov	rcx, qword ptr [rbp + 0x28]
	cmp	qword ptr [rcx + r14*8 + 8], 0
	je	.label_1123
	mov	rcx, qword ptr [rcx + r14*8 + 0x10]
	mov	rcx, qword ptr [rcx]
	shl	rcx, 4
	test	byte ptr [rax + rcx + 0xa], 4
	jne	.label_1123
	mov	rdi, rbp
	mov	rsi, r15
	mov	rdx, r15
	mov	rcx, r15
	call	duplicate_node_closure
	test	eax, eax
	jne	.label_1122
.label_1123:
	mov	rax, qword ptr [rbp]
	test	byte ptr [rax + rbx + 8], 8
	jne	.label_1131
	mov	rbx, r15
	xor	r15d, r15d
	jmp	.label_1132
.label_1131:
	mov	rbx, r15
	mov	rax, qword ptr [rbp + 0x28]
	cmp	qword ptr [rax + r14*8 + 8], 0
	jle	.label_1130
	xor	r15d, r15d
	xor	r13d, r13d
.label_1128:
	mov	rcx, qword ptr [rbp + 0x28]
	mov	rax, qword ptr [rbp + 0x30]
	mov	rcx, qword ptr [rcx + r14*8 + 0x10]
	mov	rdx, qword ptr [rcx + r13*8]
	lea	r12, [rdx + rdx*2]
	mov	rcx, qword ptr [rax + r12*8 + 8]
	cmp	rcx, -1
	je	.label_1127
	test	rcx, rcx
	jne	.label_1121
	xor	ecx, ecx
	lea	rdi, [rsp + 0x10]
	mov	rsi, rbp
	call	calc_eclosure_iter
	test	eax, eax
	je	.label_1126
	jmp	.label_1122
	.section	.text
	.align	32
	#Procedure 0x40d45d
	.globl sub_40d45d
	.type sub_40d45d, @function
sub_40d45d:

	nop	dword ptr [rax]
.label_1121:
	mov	rcx, qword ptr [rax + r12*8 + 0x10]
	mov	qword ptr [rsp + 0x20], rcx
	movups	xmm0, xmmword ptr [rax + r12*8]
	movaps	xmmword ptr [rsp + 0x10], xmm0
.label_1126:
	lea	rdi, [rsp + 0x30]
	lea	rsi, [rsp + 0x10]
	call	re_node_set_merge
	test	eax, eax
	jne	.label_1122
	mov	rax, qword ptr [rbp + 0x30]
	cmp	qword ptr [rax + r12*8 + 8], 0
	jne	.label_1124
	mov	rdi, qword ptr [rsp + 0x20]
	call	free
.label_1127:
	mov	r15b, 1
.label_1124:
	inc	r13
	mov	rax, qword ptr [rbp + 0x28]
	cmp	r13, qword ptr [rax + r14*8 + 8]
	jl	.label_1128
	jmp	.label_1132
.label_1130:
	xor	r15d, r15d
.label_1132:
	lea	rdi, [rsp + 0x30]
	mov	rsi, rbx
	call	re_node_set_insert
	mov	cl, al
	mov	eax, 0xc
	test	cl, cl
	je	.label_1122
	test	r15b, 1
	mov	rax, qword ptr [rbp + 0x30]
	je	.label_1125
	mov	ecx, dword ptr [rsp + 4]
	test	cl, cl
	jne	.label_1125
	mov	qword ptr [rax + r14*8 + 8], 0
	jmp	.label_1129
.label_1125:
	mov	rcx, qword ptr [rsp + 0x40]
	mov	qword ptr [rax + r14*8 + 0x10], rcx
	movups	xmm0, xmmword ptr [rsp + 0x30]
	movups	xmmword ptr [rax + r14*8], xmm0
.label_1129:
	mov	rcx, qword ptr [rsp + 8]
	mov	rax, qword ptr [rsp + 0x40]
	mov	qword ptr [rcx + 0x10], rax
	movups	xmm0, xmmword ptr [rsp + 0x30]
	movups	xmmword ptr [rcx], xmm0
	xor	eax, eax
.label_1122:
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40d52b
	.globl sub_40d52b
	.type sub_40d52b, @function
sub_40d52b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d530

	.globl re_node_set_alloc
	.type re_node_set_alloc, @function
re_node_set_alloc:
	push	rbx
	mov	rbx, rdi
	mov	qword ptr [rbx], rsi
	mov	qword ptr [rbx + 8], 0
	lea	rdi, [rsi*8]
	call	malloc
	mov	qword ptr [rbx + 0x10], rax
	xor	ecx, ecx
	test	rax, rax
	mov	eax, 0xc
	cmovne	eax, ecx
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40d55f
	.globl sub_40d55f
	.type sub_40d55f, @function
sub_40d55f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40d560

	.globl duplicate_node_closure
	.type duplicate_node_closure, @function
duplicate_node_closure:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	ebx, r8d
	mov	qword ptr [rsp + 8], rcx
	mov	r13, rdx
	mov	r14, rsi
	mov	rbp, rdi
.label_1139:
	mov	dword ptr [rsp + 0x10], ebx
	nop	word ptr cs:[rax + rax]
.label_1134:
	mov	rcx, qword ptr [rbp]
	mov	rax, r14
	shl	rax, 4
	movzx	ecx, byte ptr [rcx + rax + 8]
	cmp	ecx, 4
	jne	.label_1140
	mov	rax, qword ptr [rbp + 0x18]
	mov	rcx, qword ptr [rbp + 0x28]
	mov	rbx, qword ptr [rax + r14*8]
	mov	r15, rbp
	lea	r12, [r13 + r13*2]
	mov	qword ptr [rcx + r12*8 + 8], 0
	mov	rdi, r15
	mov	rsi, rbx
	mov	edx, dword ptr [rsp + 0x10]
	call	duplicate_node
	mov	rbp, rax
	cmp	rbp, -1
	je	.label_1141
	mov	dword ptr [rsp + 0x14], 0xc
	mov	rax, qword ptr [r15 + 0x18]
	mov	rcx, qword ptr [rax + r14*8]
	mov	qword ptr [rax + r13*8], rcx
	mov	rax, qword ptr [r15 + 0x28]
	lea	rdi, [rax + r12*8]
	mov	rsi, rbp
	call	re_node_set_insert
	test	al, al
	mov	r14, rbx
	mov	r13, rbp
	mov	rbp, r15
	jne	.label_1134
	jmp	.label_1135
	.section	.text
	.align	32
	#Procedure 0x40d614
	.globl sub_40d614
	.type sub_40d614, @function
sub_40d614:

	nop	word ptr cs:[rax + rax]
.label_1140:
	mov	rcx, qword ptr [rbp + 0x28]
	lea	r15, [r14 + r14*2]
	mov	rdx, qword ptr [rcx + r15*8 + 8]
	test	rdx, rdx
	je	.label_1133
	mov	rsi, qword ptr [rcx + r15*8 + 0x10]
	mov	rsi, qword ptr [rsi]
	lea	r12, [r13 + r13*2]
	mov	qword ptr [rcx + r12*8 + 8], 0
	cmp	rdx, 1
	je	.label_1143
	mov	rdi, rbp
	mov	rbx, rsi
	mov	r13d, dword ptr [rsp + 0x10]
	mov	edx, r13d
	call	search_duplicated_node
	cmp	rax, -1
	je	.label_1142
	mov	rcx, qword ptr [rbp + 0x28]
	lea	rdi, [rcx + r12*8]
	mov	rsi, rax
	call	re_node_set_insert
	mov	dword ptr [rsp + 0x14], 0xc
	test	al, al
	jne	.label_1145
	jmp	.label_1135
.label_1142:
	mov	rdi, rbp
	mov	rsi, rbx
	mov	edx, r13d
	call	duplicate_node
	mov	r14, rax
	mov	dword ptr [rsp + 0x14], 0xc
	cmp	r14, -1
	je	.label_1135
	mov	rax, qword ptr [rbp + 0x28]
	lea	rdi, [rax + r12*8]
	mov	rsi, r14
	call	re_node_set_insert
	test	al, al
	mov	rsi, rbx
	je	.label_1135
	mov	rdi, rbp
	mov	rdx, r14
	mov	rcx, qword ptr [rsp + 8]
	mov	r8d, r13d
	call	duplicate_node_closure
	mov	dword ptr [rsp + 0x14], eax
	test	eax, eax
	jne	.label_1135
.label_1145:
	mov	rax, qword ptr [rbp + 0x28]
	mov	rax, qword ptr [rax + r15*8 + 0x10]
	mov	r14, qword ptr [rax + 8]
	mov	rdi, rbp
	mov	rsi, r14
	mov	edx, r13d
	call	duplicate_node
	mov	r13, rax
	cmp	r13, -1
	je	.label_1137
	mov	dword ptr [rsp + 0x14], 0xc
	mov	rax, qword ptr [rbp + 0x28]
	lea	rdi, [rax + r12*8]
	mov	rsi, r13
	call	re_node_set_insert
	test	al, al
	jne	.label_1134
	jmp	.label_1135
.label_1143:
	cmp	r14, qword ptr [rsp + 8]
	jne	.label_1144
	cmp	r13, r14
	jne	.label_1136
.label_1144:
	mov	rcx, qword ptr [rbp]
	mov	eax, dword ptr [rcx + rax + 8]
	shr	eax, 8
	and	eax, 0x3ff
	mov	ebx, dword ptr [rsp + 0x10]
	or	ebx, eax
	mov	rdi, rbp
	mov	r14, rsi
	mov	edx, ebx
	call	duplicate_node
	mov	r13, rax
	mov	dword ptr [rsp + 0x14], 0xc
	cmp	r13, -1
	je	.label_1135
	mov	rax, qword ptr [rbp + 0x28]
	lea	rdi, [rax + r12*8]
	mov	rsi, r13
	call	re_node_set_insert
	test	al, al
	jne	.label_1139
	jmp	.label_1135
.label_1141:
	mov	dword ptr [rsp + 0x14], 0xc
	jmp	.label_1135
.label_1137:
	mov	dword ptr [rsp + 0x14], 0xc
	jmp	.label_1135
.label_1133:
	mov	rax, qword ptr [rbp + 0x18]
	mov	rcx, qword ptr [rax + r14*8]
	mov	qword ptr [rax + r13*8], rcx
.label_1138:
	mov	dword ptr [rsp + 0x14], 0
.label_1135:
	mov	eax, dword ptr [rsp + 0x14]
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1136:
	mov	rax, qword ptr [rbp + 0x28]
	lea	rdi, [rax + r12*8]
	call	re_node_set_insert
	mov	dword ptr [rsp + 0x14], 0xc
	test	al, al
	je	.label_1135
	jmp	.label_1138
	.section	.text
	.align	32
	#Procedure 0x40d7ee
	.globl sub_40d7ee
	.type sub_40d7ee, @function
sub_40d7ee:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40d7f0

	.globl re_node_set_merge
	.type re_node_set_merge, @function
re_node_set_merge:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r15, rsi
	mov	r14, rdi
	xor	eax, eax
	test	r15, r15
	je	.label_1147
	mov	rdx, qword ptr [r15 + 8]
	test	rdx, rdx
	je	.label_1147
	mov	rbx, qword ptr [r14]
	mov	rcx, qword ptr [r14 + 8]
	lea	rax, [rcx + rdx*2]
	cmp	rbx, rax
	jge	.label_1149
	add	rbx, rdx
	mov	rdi, qword ptr [r14 + 0x10]
	mov	rsi, rbx
	shl	rsi, 4
	call	realloc
	mov	rcx, rax
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1147
	add	rbx, rbx
	mov	qword ptr [r14 + 0x10], rcx
	mov	qword ptr [r14], rbx
	mov	rcx, qword ptr [r14 + 8]
.label_1149:
	mov	rax, qword ptr [r15 + 8]
	test	rcx, rcx
	je	.label_1157
	lea	rbx, [rcx + rax*2]
	dec	rax
	dec	rcx
	mov	rdx, rax
	or	rdx, rcx
	js	.label_1154
	mov	rdx, qword ptr [r14 + 0x10]
	mov	rsi, qword ptr [r15 + 0x10]
	jmp	.label_1155
.label_1148:
	dec	rax
.label_1150:
	dec	rcx
	jmp	.label_1146
	.section	.text
	.align	32
	#Procedure 0x40d88a
	.globl sub_40d88a
	.type sub_40d88a, @function
sub_40d88a:

	nop	word ptr [rax + rax]
.label_1155:
	mov	rdi, qword ptr [rsi + rax*8]
	cmp	qword ptr [rdx + rcx*8], rdi
	je	.label_1148
	jge	.label_1150
	dec	rax
	mov	qword ptr [rdx + rbx*8 - 8], rdi
	dec	rbx
.label_1146:
	mov	rdi, rax
	or	rdi, rcx
	jns	.label_1155
.label_1154:
	test	rax, rax
	js	.label_1156
	lea	rcx, [rax + 1]
	sub	rbx, rcx
	lea	rdi, [rbx*8]
	add	rdi, qword ptr [r14 + 0x10]
	mov	rsi, qword ptr [r15 + 0x10]
	lea	rdx, [rax*8 + 8]
	call	memcpy
.label_1156:
	mov	r11, qword ptr [r14 + 8]
	mov	rax, qword ptr [r15 + 8]
	lea	r10, [r11 + rax*2 - 1]
	mov	r15, r10
	sub	r15, rbx
	inc	r15
	mov	eax, 0
	je	.label_1147
	lea	rax, [r15 + r11]
	mov	qword ptr [r14 + 8], rax
	lea	r8, [r11 - 1]
.label_1151:
	lea	r9, [r11 - 1]
	mov	rcx, qword ptr [r14 + 0x10]
	lea	rdx, [r15*8]
	lea	rax, [r15 + r8]
	lea	r12, [rcx + rax*8]
	lea	r13, [rcx + r10*8]
	xor	esi, esi
	nop	word ptr cs:[rax + rax]
.label_1158:
	mov	rax, qword ptr [r13 + rsi*8]
	mov	rdi, qword ptr [rcx + r11*8 - 8]
	cmp	rax, rdi
	jle	.label_1152
	mov	qword ptr [r12 + rsi*8], rax
	add	rdx, -8
	dec	rsi
	xor	eax, eax
	mov	rdi, r15
	add	rdi, rsi
	jne	.label_1158
	jmp	.label_1147
	.section	.text
	.align	32
	#Procedure 0x40d956
	.globl sub_40d956
	.type sub_40d956, @function
sub_40d956:

	nop	word ptr cs:[rax + rax]
.label_1152:
	mov	qword ptr [r12 + rsi*8], rdi
	add	r15, rsi
	dec	r8
	add	r10, rsi
	cmp	r11, 1
	mov	r11, r9
	jg	.label_1151
	mov	rdi, qword ptr [r14 + 0x10]
	lea	rsi, [rdi + rbx*8]
	jmp	.label_1153
.label_1157:
	mov	qword ptr [r14 + 8], rax
	mov	rdi, qword ptr [r14 + 0x10]
	mov	rdx, qword ptr [r15 + 8]
	mov	rsi, qword ptr [r15 + 0x10]
	shl	rdx, 3
.label_1153:
	call	memcpy
	xor	eax, eax
.label_1147:
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40d9a5
	.globl sub_40d9a5
	.type sub_40d9a5, @function
sub_40d9a5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40d9b0

	.globl re_node_set_insert
	.type re_node_set_insert, @function
re_node_set_insert:
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	rsi, qword ptr [rbx]
	test	rsi, rsi
	je	.label_1165
	mov	rax, qword ptr [rbx + 8]
	test	rax, rax
	je	.label_1161
	cmp	rsi, rax
	jne	.label_1164
	lea	rax, [rsi + rsi]
	mov	qword ptr [rbx], rax
	mov	rdi, qword ptr [rbx + 0x10]
	shl	rsi, 4
	call	realloc
	test	rax, rax
	je	.label_1162
	mov	qword ptr [rbx + 0x10], rax
.label_1164:
	mov	rax, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rbx + 0x10]
	cmp	qword ptr [rcx], r14
	jle	.label_1166
	test	rax, rax
	jle	.label_1159
	mov	rcx, qword ptr [rbx + 0x10]
	nop	word ptr [rax + rax]
.label_1167:
	mov	rdx, qword ptr [rcx + rax*8 - 8]
	mov	qword ptr [rcx + rax*8], rdx
	cmp	rax, 1
	lea	rax, [rax - 1]
	jg	.label_1167
	jmp	.label_1159
.label_1165:
	mov	rdi, rbx
	mov	rsi, r14
	call	re_node_set_init_1
	test	eax, eax
	sete	al
	jmp	.label_1160
.label_1161:
	mov	rax, qword ptr [rbx + 0x10]
	mov	qword ptr [rax], r14
	jmp	.label_1168
.label_1166:
	mov	rsi, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rsi + rax*8 - 8]
	cmp	rcx, r14
	jle	.label_1159
	mov	rdx, qword ptr [rbx + 0x10]
	nop	word ptr cs:[rax + rax]
.label_1163:
	mov	qword ptr [rsi + rax*8], rcx
	mov	rcx, qword ptr [rdx + rax*8 - 0x10]
	dec	rax
	cmp	rcx, r14
	mov	rsi, rdx
	jg	.label_1163
.label_1159:
	mov	rcx, qword ptr [rbx + 0x10]
	mov	qword ptr [rcx + rax*8], r14
.label_1168:
	inc	qword ptr [rbx + 8]
	mov	al, 1
.label_1160:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_1162:
	xor	eax, eax
	jmp	.label_1160
	.section	.text
	.align	32
	#Procedure 0x40da8e
	.globl sub_40da8e
	.type sub_40da8e, @function
sub_40da8e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40da90

	.globl duplicate_node
	.type duplicate_node, @function
duplicate_node:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebp, edx
	mov	r14, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx]
	mov	r15, r14
	shl	r15, 4
	mov	rsi, qword ptr [rax + r15]
	mov	rdx, qword ptr [rax + r15 + 8]
	call	re_dfa_add_node
	cmp	rax, -1
	je	.label_1169
	mov	rcx, qword ptr [rbx]
	mov	rdx, rax
	shl	rdx, 4
	shl	ebp, 8
	and	ebp, 0x3ff00
	mov	esi, 0xfffc00ff
	and	esi, dword ptr [rcx + rdx + 8]
	or	esi, ebp
	mov	dword ptr [rcx + rdx + 8], esi
	mov	rcx, qword ptr [rbx]
	mov	esi, 0x3ff00
	and	esi, dword ptr [rcx + r15 + 8]
	or	dword ptr [rcx + rdx + 8], esi
	mov	rcx, qword ptr [rbx]
	or	dword ptr [rcx + rdx + 8], 0x40000
	mov	rcx, qword ptr [rbx + 0x20]
	mov	qword ptr [rcx + rax*8], r14
.label_1169:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40db0e
	.globl sub_40db0e
	.type sub_40db0e, @function
sub_40db0e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40db10

	.globl search_duplicated_node
	.type search_duplicated_node, @function
search_duplicated_node:
	mov	r8, qword ptr [rdi + 0x10]
	lea	r10, [r8 - 1]
	mov	rax, -1
	test	r10, r10
	jle	.label_1170
	mov	r9, qword ptr [rdi]
	mov	rcx, r10
	shl	rcx, 4
	mov	r11d, dword ptr [r9 + rcx + 8]
	mov	ecx, r11d
	and	ecx, 0x40000
	je	.label_1170
	mov	r9, qword ptr [rdi + 0x20]
	shl	r8, 4
	add	r8, -0x18
	nop	word ptr [rax + rax]
.label_1172:
	cmp	qword ptr [r9 + r10*8], rsi
	jne	.label_1171
	shr	r11d, 8
	and	r11d, 0x3ff
	cmp	r11d, edx
	je	.label_1173
.label_1171:
	dec	r10
	test	r10, r10
	jle	.label_1170
	mov	rcx, qword ptr [rdi]
	mov	r11d, dword ptr [rcx + r8]
	mov	ecx, r11d
	and	ecx, 0x40000
	add	r8, -0x10
	test	ecx, ecx
	jne	.label_1172
	jmp	.label_1170
.label_1173:
	mov	rax, r10
.label_1170:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40db8c
	.globl sub_40db8c
	.type sub_40db8c, @function
sub_40db8c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40db90

	.globl re_node_set_insert_last
	.type re_node_set_insert_last, @function
re_node_set_insert_last:
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_1174
	lea	rcx, [rax + rax + 2]
	lea	rax, [rax + rax]
	mov	qword ptr [rbx], rcx
	mov	rdi, qword ptr [rbx + 0x10]
	lea	rsi, [rax*8 + 0x10]
	call	realloc
	test	rax, rax
	je	.label_1175
	mov	qword ptr [rbx + 0x10], rax
.label_1174:
	mov	rax, qword ptr [rbx + 8]
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 8], rcx
	mov	rcx, qword ptr [rbx + 0x10]
	mov	qword ptr [rcx + rax*8], r14
	mov	al, 1
.label_1176:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_1175:
	xor	eax, eax
	jmp	.label_1176
	.section	.text
	.align	32
	#Procedure 0x40dbeb
	.globl sub_40dbeb
	.type sub_40dbeb, @function
sub_40dbeb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40dbf0

	.globl re_node_set_init_copy
	.type re_node_set_init_copy, @function
re_node_set_init_copy:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, qword ptr [rbx + 8]
	mov	qword ptr [r14 + 8], rdi
	cmp	qword ptr [rbx + 8], 0
	jle	.label_1177
	mov	qword ptr [r14], rdi
	shl	rdi, 3
	call	malloc
	mov	qword ptr [r14 + 0x10], rax
	test	rax, rax
	je	.label_1179
	mov	rdx, qword ptr [rbx + 8]
	mov	rsi, qword ptr [rbx + 0x10]
	shl	rdx, 3
	mov	rdi, rax
	call	memcpy
	jmp	.label_1178
.label_1177:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 0x10], 0
.label_1178:
	xor	eax, eax
.label_1180:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_1179:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14], xmm0
	mov	eax, 0xc
	jmp	.label_1180
	.section	.text
	.align	32
	#Procedure 0x40dc5b
	.globl sub_40dc5b
	.type sub_40dc5b, @function
sub_40dc5b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40dc60

	.globl re_node_set_contains
	.type re_node_set_contains, @function
re_node_set_contains:
	mov	r9, qword ptr [rdi + 8]
	xor	eax, eax
	test	r9, r9
	jle	.label_1181
	xor	eax, eax
	dec	r9
	je	.label_1183
	mov	r8, qword ptr [rdi + 0x10]
	xor	eax, eax
	nop	dword ptr [rax + rax]
.label_1182:
	lea	rdx, [r9 + rax]
	shr	rdx, 1
	cmp	qword ptr [r8 + rdx*8], rsi
	lea	rcx, [rdx + 1]
	cmovl	rax, rcx
	cmovge	r9, rdx
	cmp	rax, r9
	jb	.label_1182
.label_1183:
	mov	rcx, qword ptr [rdi + 0x10]
	cmp	qword ptr [rcx + rax*8], rsi
	jne	.label_1184
	inc	rax
	ret	
.label_1184:
	xor	eax, eax
.label_1181:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40dcad
	.globl sub_40dcad
	.type sub_40dcad, @function
sub_40dcad:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40dcb0

	.globl re_acquire_state_context
	.type re_acquire_state_context, @function
re_acquire_state_context:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13d, ecx
	mov	rbp, rsi
	cmp	qword ptr [rdx + 8], 0
	je	.label_1187
	mov	qword ptr [rsp], rdi
	mov	rdi, rdx
	mov	qword ptr [rsp + 0x10], rdx
	mov	esi, r13d
	call	calc_state_hash
	mov	rbx, rax
	mov	rax, qword ptr [rbp + 0x40]
	mov	rcx, qword ptr [rbp + 0x88]
	mov	qword ptr [rsp + 8], rbp
	and	rcx, rbx
	lea	rcx, [rcx + rcx*2]
	cmp	qword ptr [rax + rcx*8], 0
	jle	.label_1186
	lea	r14, [rax + rcx*8]
	mov	r15, qword ptr [rax + rcx*8 + 0x10]
	xor	r12d, r12d
.label_1189:
	mov	rbp, qword ptr [r15 + r12*8]
	cmp	qword ptr [rbp], rbx
	jne	.label_1185
	movzx	eax, byte ptr [rbp + 0x68]
	and	eax, 0xf
	cmp	eax, r13d
	jne	.label_1185
	mov	rdi, qword ptr [rbp + 0x50]
	mov	rsi, qword ptr [rsp + 0x10]
	call	re_node_set_compare
	test	al, al
	jne	.label_1188
.label_1185:
	inc	r12
	cmp	r12, qword ptr [r14]
	jl	.label_1189
.label_1186:
	mov	rdi, qword ptr [rsp + 8]
	mov	rsi, qword ptr [rsp + 0x10]
	mov	edx, r13d
	mov	rcx, rbx
	call	create_cd_newstate
	mov	rbp, rax
	test	rbp, rbp
	jne	.label_1188
	mov	rax, qword ptr [rsp]
	mov	dword ptr [rax], 0xc
	jmp	.label_1190
.label_1187:
	mov	dword ptr [rdi], 0
.label_1190:
	xor	ebp, ebp
.label_1188:
	mov	rax, rbp
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40dd83
	.globl sub_40dd83
	.type sub_40dd83, @function
sub_40dd83:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40dd90

	.globl calc_state_hash
	.type calc_state_hash, @function
calc_state_hash:
	mov	rcx, qword ptr [rdi + 8]
	mov	eax, esi
	add	rax, rcx
	test	rcx, rcx
	jle	.label_1191
	mov	rcx, qword ptr [rdi + 8]
	mov	rdx, qword ptr [rdi + 0x10]
	xor	esi, esi
	nop	dword ptr [rax + rax]
.label_1192:
	add	rax, qword ptr [rdx + rsi*8]
	inc	rsi
	cmp	rsi, rcx
	jl	.label_1192
.label_1191:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40ddbd
	.globl sub_40ddbd
	.type sub_40ddbd, @function
sub_40ddbd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40ddc0

	.globl re_node_set_compare
	.type re_node_set_compare, @function
re_node_set_compare:
	xor	eax, eax
	test	rdi, rdi
	je	.label_1193
	test	rsi, rsi
	je	.label_1193
	mov	rcx, qword ptr [rdi + 8]
	cmp	rcx, qword ptr [rsi + 8]
	jne	.label_1195
	nop	word ptr cs:[rax + rax]
.label_1194:
	mov	al, 1
	test	rcx, rcx
	jle	.label_1193
	mov	rax, qword ptr [rdi + 0x10]
	mov	rax, qword ptr [rax + rcx*8 - 8]
	mov	rdx, qword ptr [rsi + 0x10]
	cmp	rax, qword ptr [rdx + rcx*8 - 8]
	lea	rcx, [rcx - 1]
	je	.label_1194
.label_1195:
	xor	eax, eax
.label_1193:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40de02
	.globl sub_40de02
	.type sub_40de02, @function
sub_40de02:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40de10

	.globl create_cd_newstate
	.type create_cd_newstate, @function
create_cd_newstate:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 0x10], rcx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	edi, 0x70
	mov	esi, 1
	call	rpl_calloc
	mov	r15, rax
	xor	eax, eax
	test	r15, r15
	je	.label_1201
	mov	r12, r15
	add	r12, 8
	mov	rdi, r12
	mov	rsi, rbp
	call	re_node_set_init_copy
	test	eax, eax
	jne	.label_1202
	mov	al, byte ptr [r15 + 0x68]
	mov	cl, r14b
	and	cl, 0xf
	and	al, 0xf0
	or	al, cl
	mov	byte ptr [r15 + 0x68], al
	mov	qword ptr [r15 + 0x50], r12
	mov	qword ptr [rsp + 0x20], r12
	cmp	qword ptr [rbp + 8], 0
	jle	.label_1205
	mov	eax, r14d
	and	eax, 1
	mov	dword ptr [rsp + 0x1c], eax
	mov	eax, r14d
	and	eax, 2
	mov	dword ptr [rsp + 0xc], eax
	and	r14d, 4
	mov	dword ptr [rsp + 8], r14d
	xor	r14d, r14d
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_1199:
	mov	rax, qword ptr [rbx]
	mov	rcx, qword ptr [rbp + 0x10]
	mov	rcx, qword ptr [rcx + r14*8]
	shl	rcx, 4
	mov	esi, dword ptr [rax + rcx + 8]
	movzx	ecx, sil
	mov	r13d, esi
	shr	r13d, 8
	mov	eax, r13d
	and	eax, 0x3ff
	cmp	ecx, 1
	jne	.label_1209
	test	eax, eax
	je	.label_1196
.label_1209:
	mov	rdi, rbx
	shr	esi, 0x14
	mov	bl, byte ptr [r15 + 0x68]
	mov	dl, bl
	shr	dl, 5
	movzx	edx, dl
	or	edx, esi
	shl	dl, 5
	and	dl, 0x20
	and	bl, 0xdf
	or	bl, dl
	mov	byte ptr [r15 + 0x68], bl
	cmp	ecx, 4
	je	.label_1200
	cmp	ecx, 2
	jne	.label_1198
	or	bl, 0x10
	jmp	.label_1204
.label_1200:
	or	bl, 0x40
.label_1204:
	mov	byte ptr [r15 + 0x68], bl
.label_1198:
	test	eax, eax
	je	.label_1203
	mov	rax, qword ptr [rsp + 0x20]
	cmp	qword ptr [r15 + 0x50], rax
	mov	rbx, rdi
	jne	.label_1206
	mov	edi, 0x18
	call	malloc
	mov	qword ptr [r15 + 0x50], rax
	test	rax, rax
	je	.label_1197
	mov	rdi, rax
	mov	rsi, rbp
	call	re_node_set_init_copy
	test	eax, eax
	mov	eax, 0
	jne	.label_1201
	or	byte ptr [r15 + 0x68], 0x80
	xor	r12d, r12d
.label_1206:
	cmp	dword ptr [rsp + 0x1c], 0
	jne	.label_1207
	mov	eax, r13d
	and	eax, 1
	jne	.label_1210
.label_1207:
	cmp	dword ptr [rsp + 0x1c], 0
	je	.label_1211
	mov	eax, r13d
	and	eax, 2
	jne	.label_1210
.label_1211:
	cmp	dword ptr [rsp + 0xc], 0
	jne	.label_1208
	mov	eax, r13d
	and	eax, 0x10
	jne	.label_1210
.label_1208:
	cmp	dword ptr [rsp + 8], 0
	jne	.label_1196
	and	r13d, 0x40
	je	.label_1196
	nop	word ptr cs:[rax + rax]
.label_1210:
	mov	rsi, r14
	sub	rsi, r12
	mov	rdi, qword ptr [rsp + 0x20]
	call	re_node_set_remove_at
	inc	r12
	jmp	.label_1196
.label_1203:
	mov	rbx, rdi
	nop	dword ptr [rax + rax]
.label_1196:
	inc	r14
	cmp	r14, qword ptr [rbp + 8]
	jl	.label_1199
.label_1205:
	mov	rdi, rbx
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	call	register_state
	test	eax, eax
	mov	rax, r15
	je	.label_1201
.label_1197:
	mov	rdi, r15
	call	free_state
	jmp	.label_1212
.label_1202:
	mov	rdi, r15
	call	free
.label_1212:
	xor	eax, eax
.label_1201:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40e017
	.globl sub_40e017
	.type sub_40e017, @function
sub_40e017:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40e020

	.globl re_node_set_remove_at
	.type re_node_set_remove_at, @function
re_node_set_remove_at:
	test	rsi, rsi
	js	.label_1213
	mov	rax, qword ptr [rdi + 8]
	cmp	rax, rsi
	jle	.label_1213
	dec	rax
	mov	qword ptr [rdi + 8], rax
	cmp	rax, rsi
	jle	.label_1213
	mov	rax, qword ptr [rdi + 0x10]
	nop	
.label_1214:
	mov	rcx, qword ptr [rax + rsi*8 + 8]
	mov	qword ptr [rax + rsi*8], rcx
	inc	rsi
	cmp	rsi, qword ptr [rdi + 8]
	jl	.label_1214
.label_1213:
	ret	
	.section	.text
	.align	32
	#Procedure 0x40e053
	.globl sub_40e053
	.type sub_40e053, @function
sub_40e053:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40e060

	.globl register_state
	.type register_state, @function
register_state:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rdx
	mov	rbx, rsi
	mov	r13, rdi
	mov	qword ptr [rbx], r15
	lea	r12, [rbx + 0x20]
	mov	rsi, qword ptr [rbx + 0x10]
	mov	rdi, r12
	call	re_node_set_alloc
	mov	r14d, 0xc
	test	eax, eax
	jne	.label_1216
	cmp	qword ptr [rbx + 0x10], 0
	jle	.label_1220
	xor	ebp, ebp
	nop	word ptr [rax + rax]
.label_1217:
	mov	rax, qword ptr [rbx + 0x18]
	mov	rsi, qword ptr [rax + rbp*8]
	mov	rax, qword ptr [r13]
	mov	rcx, rsi
	shl	rcx, 4
	test	byte ptr [rax + rcx + 8], 8
	jne	.label_1215
	mov	rdi, r12
	call	re_node_set_insert_last
	test	al, al
	je	.label_1216
.label_1215:
	inc	rbp
	cmp	rbp, qword ptr [rbx + 0x10]
	jl	.label_1217
.label_1220:
	mov	r12, qword ptr [r13 + 0x40]
	and	r15, qword ptr [r13 + 0x88]
	lea	rbp, [r15 + r15*2]
	mov	r15, qword ptr [r12 + rbp*8]
	cmp	qword ptr [r12 + rbp*8 + 8], r15
	jle	.label_1218
.label_1219:
	lea	rax, [r12 + rbp*8]
	mov	rcx, qword ptr [rax]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rax], rdx
	mov	rax, qword ptr [r12 + rbp*8 + 0x10]
	mov	qword ptr [rax + rcx*8], rbx
	xor	r14d, r14d
.label_1216:
	mov	eax, r14d
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1218:
	lea	rax, [r15 + r15]
	mov	rdi, qword ptr [r12 + rbp*8 + 0x10]
	lea	rsi, [rax*8 + 0x10]
	call	realloc
	test	rax, rax
	je	.label_1216
	lea	rcx, [r12 + rbp*8 + 8]
	lea	rdx, [r15 + r15 + 2]
	lea	rsi, [r12 + rbp*8 + 0x10]
	mov	qword ptr [rsi], rax
	mov	qword ptr [rcx], rdx
	jmp	.label_1219
	.section	.text
	.align	32
	#Procedure 0x40e147
	.globl sub_40e147
	.type sub_40e147, @function
sub_40e147:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40e150

	.globl re_copy_regs
	.type re_copy_regs, @function
re_copy_regs:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, rdx
	mov	rbx, rsi
	mov	r15, rdi
	cmp	ecx, 2
	je	.label_1226
	lea	r13, [r14 + 1]
	cmp	ecx, 1
	je	.label_1223
	test	ecx, ecx
	jne	.label_1232
	lea	r12, [r13*8]
	mov	rdi, r12
	call	malloc
	mov	qword ptr [r15 + 8], rax
	xor	ebp, ebp
	test	rax, rax
	je	.label_1222
	mov	rdi, r12
	call	malloc
	mov	qword ptr [r15 + 0x10], rax
	test	rax, rax
	je	.label_1227
	mov	qword ptr [r15], r13
	mov	r12d, 1
	jmp	.label_1228
.label_1226:
	mov	r12d, 2
	cmp	qword ptr [r15], r14
	jae	.label_1228
	mov	edi, OFFSET FLAT:.str.24_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x1fb
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.re_copy_regs
	call	__assert_fail
.label_1223:
	mov	r12d, 1
	cmp	r13, qword ptr [r15]
	ja	.label_1225
.label_1228:
	xor	eax, eax
	test	r14, r14
	jle	.label_1230
	mov	rax, qword ptr [r15 + 8]
	mov	rcx, qword ptr [r15 + 0x10]
	add	rbx, 8
	mov	rdx, r14
	nop	word ptr cs:[rax + rax]
.label_1224:
	mov	rsi, qword ptr [rbx - 8]
	mov	qword ptr [rax], rsi
	mov	rsi, qword ptr [rbx]
	mov	qword ptr [rcx], rsi
	add	rax, 8
	add	rcx, 8
	add	rbx, 0x10
	dec	rdx
	jne	.label_1224
	mov	rax, r14
.label_1230:
	cmp	rax, qword ptr [r15]
	jae	.label_1231
	mov	rcx, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r15 + 0x10]
	nop	
.label_1221:
	mov	qword ptr [rdx + rax*8], -1
	mov	qword ptr [rcx + rax*8], -1
	inc	rax
	cmp	rax, qword ptr [r15]
	jb	.label_1221
.label_1231:
	mov	ebp, r12d
.label_1222:
	mov	eax, ebp
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1225:
	mov	rdi, qword ptr [r15 + 8]
	lea	rsi, [r13*8]
	mov	qword ptr [rsp + 0x10], rsi
	call	realloc
	xor	ebp, ebp
	test	rax, rax
	je	.label_1222
	mov	qword ptr [rsp + 8], rax
	mov	rdi, qword ptr [r15 + 0x10]
	mov	rsi, qword ptr [rsp + 0x10]
	call	realloc
	test	rax, rax
	je	.label_1229
	mov	rcx, qword ptr [rsp + 8]
	mov	qword ptr [r15 + 8], rcx
	mov	qword ptr [r15 + 0x10], rax
	mov	qword ptr [r15], r13
	jmp	.label_1228
.label_1227:
	mov	rdi, qword ptr [r15 + 8]
	call	free
	jmp	.label_1222
.label_1229:
	mov	rdi, qword ptr [rsp + 8]
	call	free
	jmp	.label_1222
.label_1232:
	mov	edi, OFFSET FLAT:.str.23_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x1f9
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.re_copy_regs
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x40e2e6
	.globl sub_40e2e6
	.type sub_40e2e6, @function
sub_40e2e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40e2f0

	.globl re_string_allocate
	.type re_string_allocate, @function
re_string_allocate:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	r12, rsi
	mov	r13, rdi
	mov	r15, qword ptr [rsp + 0x30]
	movsxd	rax, dword ptr [r15 + 0xb4]
	cmp	rax, rcx
	cmovge	rcx, rax
	lea	rbx, [r14 + 1]
	cmp	rbx, rcx
	cmovg	rbx, rcx
	movzx	eax, r9b
	mov	rdi, r12
	mov	rsi, r14
	mov	rdx, r13
	mov	rcx, r8
	mov	r8d, eax
	mov	r9, r15
	call	re_string_construct_common
	mov	rdi, r13
	mov	rsi, rbx
	call	re_string_realloc_buffers
	test	eax, eax
	jne	.label_1233
	lea	rax, [r15 + 0xb8]
	mov	qword ptr [r13 + 0x80], rax
	mov	al, byte ptr [r15 + 0xb0]
	shr	al, 4
	and	al, 1
	mov	byte ptr [r13 + 0x8e], al
	cmp	byte ptr [r13 + 0x8b], 0
	je	.label_1235
	mov	r12, qword ptr [r13 + 8]
.label_1235:
	mov	qword ptr [r13 + 8], r12
	xor	eax, eax
	cmp	byte ptr [r13 + 0x8b], 0
	mov	ecx, 0
	jne	.label_1234
	xor	ecx, ecx
	cmp	dword ptr [r15 + 0xb4], 1
	jg	.label_1234
	mov	rcx, r14
.label_1234:
	mov	qword ptr [r13 + 0x30], rcx
	mov	qword ptr [r13 + 0x38], rcx
.label_1233:
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40e3af
	.globl sub_40e3af
	.type sub_40e3af, @function
sub_40e3af:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40e3b0

	.globl match_ctx_init
	.type match_ctx_init, @function
match_ctx_init:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rdx
	mov	rbx, rdi
	mov	dword ptr [rbx + 0xa0], esi
	mov	qword ptr [rbx + 0xa8], -1
	test	r14, r14
	jle	.label_1236
	mov	r15d, 0xc
	movabs	rax, 0x666666666666666
	cmp	r14, rax
	ja	.label_1237
	lea	rbp, [r14*8]
	lea	rdi, [rbp + rbp*4]
	call	malloc
	mov	qword ptr [rbx + 0xd8], rax
	mov	rdi, rbp
	call	malloc
	mov	qword ptr [rbx + 0xf8], rax
	test	rax, rax
	je	.label_1237
	mov	rax, qword ptr [rbx + 0xd8]
	test	rax, rax
	je	.label_1237
.label_1236:
	mov	qword ptr [rbx + 0xd0], r14
	mov	dword ptr [rbx + 0xe0], 1
	mov	qword ptr [rbx + 0xf0], r14
	xor	r15d, r15d
.label_1237:
	mov	eax, r15d
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40e44a
	.globl sub_40e44a
	.type sub_40e44a, @function
sub_40e44a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40e450

	.globl re_string_reconstruct
	.type re_string_reconstruct, @function
re_string_reconstruct:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r15d, edx
	mov	r14, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, r14
	jle	.label_1256
	lea	rax, [rbx + 0x28]
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_1283
	mov	qword ptr [rbx + 0x20], 0
.label_1283:
	mov	rcx, qword ptr [rbx + 0x50]
	mov	qword ptr [rbx + 0x58], rcx
	mov	rcx, qword ptr [rbx + 0x60]
	mov	qword ptr [rbx + 0x68], rcx
	mov	byte ptr [rbx + 0x8c], 0
	lea	ecx, [r15 + r15]
	and	ecx, 2
	xor	ecx, 6
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax], xmm0
	mov	qword ptr [rax + 0x10], 0
	mov	dword ptr [rbx + 0x70], ecx
	cmp	byte ptr [rbx + 0x8b], 0
	mov	r13, r14
	jne	.label_1265
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rbx + 8], rax
	mov	r13, r14
.label_1265:
	test	r13, r13
	je	.label_1248
	cmp	r13, qword ptr [rbx + 0x38]
	jge	.label_1277
	cmp	byte ptr [rbx + 0x8c], 0
	jne	.label_1253
	lea	rsi, [r13 - 1]
	mov	rdi, rbx
	mov	edx, r15d
	call	re_string_context_at
	mov	dword ptr [rbx + 0x70], eax
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_1282
	mov	rdi, qword ptr [rbx + 0x10]
	mov	rdx, qword ptr [rbx + 0x30]
	lea	rsi, [rdi + r13*4]
	sub	rdx, r13
	shl	rdx, 2
	call	memmove
.label_1282:
	cmp	byte ptr [rbx + 0x8b], 0
	jne	.label_1244
.label_1279:
	sub	qword ptr [rbx + 0x30], r13
	sub	qword ptr [rbx + 0x38], r13
.label_1263:
	cmp	byte ptr [rbx + 0x8b], 0
	jne	.label_1248
	add	qword ptr [rbx + 8], r13
.label_1248:
	mov	qword ptr [rbx + 0x28], r14
	sub	qword ptr [rbx + 0x58], r13
	sub	qword ptr [rbx + 0x68], r13
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_1254
	cmp	byte ptr [rbx + 0x88], 0
	je	.label_1258
	mov	rdi, rbx
	call	build_wcs_upper_buffer
	test	eax, eax
	jne	.label_1259
	jmp	.label_1252
.label_1254:
	cmp	byte ptr [rbx + 0x8b], 0
	jne	.label_1262
	mov	rax, qword ptr [rbx + 0x58]
	mov	qword ptr [rbx + 0x30], rax
	jmp	.label_1252
.label_1258:
	mov	rdi, rbx
	call	build_wcs_buffer
.label_1252:
	mov	qword ptr [rbx + 0x48], 0
	xor	eax, eax
.label_1259:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1256:
	mov	r13, r14
	sub	r13, rax
	jmp	.label_1265
.label_1277:
	mov	rdx, qword ptr [rbx + 0x30]
	cmp	byte ptr [rbx + 0x8c], 0
	jne	.label_1270
.label_1241:
	mov	qword ptr [rbx + 0x30], 0
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_1275
	mov	qword ptr [rsp], rdx
	mov	dword ptr [rsp + 0x24], 0xffffffff
	cmp	byte ptr [rbx + 0x89], 0
	je	.label_1278
	mov	rdx, qword ptr [rbx]
	mov	rax, qword ptr [rbx + 0x28]
	add	rax, rdx
	movsxd	rsi, dword ptr [rbx + 0x90]
	mov	rcx, r13
	sub	rcx, rsi
	add	rcx, rax
	cmp	rcx, rdx
	cmovb	rcx, rdx
	lea	r12, [rax + r13]
	mov	rbp, r12
	nop	dword ptr [rax + rax]
.label_1246:
	dec	rbp
	cmp	rbp, rcx
	jb	.label_1260
	mov	dl, byte ptr [rbp]
	and	dl, 0xc0
	movzx	edx, dl
	cmp	edx, 0x80
	je	.label_1246
	add	rax, qword ptr [rbx + 0x58]
	mov	rdx, rax
	sub	rdx, rbp
	cmp	qword ptr [rbx + 0x78], 0
	mov	rsi, rbp
	jne	.label_1250
.label_1239:
	mov	qword ptr [rsp + 0x18], 0
	lea	rdi, [rsp + 0x14]
	lea	rcx, [rsp + 0x18]
	call	rpl_mbrtowc
	sub	r12, rbp
	mov	rcx, rax
	sub	rcx, r12
	jb	.label_1260
	cmp	rax, -3
	ja	.label_1260
	mov	qword ptr [rbx + 0x20], 0
	mov	qword ptr [rbx + 0x30], rcx
	mov	eax, dword ptr [rsp + 0x14]
	mov	dword ptr [rsp + 0x24], eax
.label_1260:
	mov	edi, dword ptr [rsp + 0x24]
	cmp	edi, -1
	jne	.label_1266
.label_1278:
	lea	rdx, [rsp + 0x24]
	mov	rdi, rbx
	mov	rsi, r14
	call	re_string_skip_chars
	sub	rax, r14
	mov	qword ptr [rbx + 0x30], rax
	mov	edi, dword ptr [rsp + 0x24]
	cmp	edi, -1
	je	.label_1269
.label_1266:
	cmp	byte ptr [rbx + 0x8e], 0
	jne	.label_1271
	mov	ecx, dword ptr [rsp + 0x24]
.label_1281:
	xor	eax, eax
	cmp	ecx, 0xa
	jne	.label_1242
	mov	eax, 2
	cmp	byte ptr [rbx + 0x8d], 0
	jne	.label_1242
	xor	eax, eax
	jmp	.label_1242
.label_1253:
	mov	rax, qword ptr [rbx + 0x18]
	mov	rsi, qword ptr [rbx + 0x30]
	xor	edx, edx
	nop	word ptr [rax + rax]
.label_1245:
	lea	rdi, [rdx + rsi]
	mov	rcx, rdi
	shr	rcx, 0x3f
	add	rcx, rdi
	sar	rcx, 1
	cmp	qword ptr [rax + rcx*8], r13
	mov	rdi, rcx
	jg	.label_1238
	jge	.label_1243
	lea	rdx, [rcx + 1]
	mov	rdi, rsi
.label_1238:
	cmp	rdx, rdi
	mov	rsi, rdi
	jl	.label_1245
.label_1243:
	mov	rax, qword ptr [rbx + 0x18]
	cmp	qword ptr [rax + rcx*8], r13
	setl	al
	movzx	eax, al
	lea	rbp, [rax + rcx]
	lea	rsi, [rax + rcx - 1]
	mov	rdi, rbx
	mov	edx, r15d
	call	re_string_context_at
	mov	dword ptr [rbx + 0x70], eax
	mov	rdx, qword ptr [rbx + 0x30]
	sub	rdx, r13
	jle	.label_1255
	cmp	rbp, r13
	jne	.label_1255
	mov	rax, qword ptr [rbx + 0x18]
	cmp	qword ptr [rax + rbp*8], r13
	jne	.label_1255
	mov	rdi, qword ptr [rbx + 0x10]
	lea	rsi, [rdi + r13*4]
	shl	rdx, 2
	call	memmove
	mov	rdi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 0x30]
	sub	rdx, r13
	lea	rsi, [rdi + r13]
	call	memmove
	mov	rax, qword ptr [rbx + 0x30]
	sub	rax, r13
	mov	qword ptr [rbx + 0x30], rax
	sub	qword ptr [rbx + 0x38], r13
	test	rax, rax
	jle	.label_1263
	mov	rax, qword ptr [rbx + 0x18]
	lea	rcx, [rax + r13*8]
	xor	edx, edx
	nop	dword ptr [rax + rax]
.label_1273:
	mov	rsi, qword ptr [rcx + rdx*8]
	sub	rsi, r13
	mov	qword ptr [rax + rdx*8], rsi
	inc	rdx
	cmp	rdx, qword ptr [rbx + 0x30]
	jl	.label_1273
	jmp	.label_1263
.label_1244:
	mov	rdi, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rbx + 0x30]
	sub	rdx, r13
	lea	rsi, [rdi + r13]
	call	memmove
	jmp	.label_1279
.label_1255:
	mov	rax, r13
	sub	rax, r14
	mov	rcx, qword ptr [rbx + 0x50]
	add	rcx, rax
	mov	qword ptr [rbx + 0x58], rcx
	add	rax, qword ptr [rbx + 0x60]
	mov	qword ptr [rbx + 0x68], rax
	mov	byte ptr [rbx + 0x8c], 0
	nop	word ptr cs:[rax + rax]
.label_1280:
	mov	rax, rbp
	test	rax, rax
	jle	.label_1274
	lea	rbp, [rax - 1]
	mov	rcx, qword ptr [rbx + 0x18]
	cmp	qword ptr [rcx + rax*8 - 8], r13
	je	.label_1280
.label_1274:
	cmp	rax, qword ptr [rbx + 0x30]
	jge	.label_1249
	mov	rcx, qword ptr [rbx + 0x10]
	nop	word ptr cs:[rax + rax]
.label_1257:
	cmp	dword ptr [rcx + rax*4], -1
	jne	.label_1249
	inc	rax
	cmp	rax, qword ptr [rbx + 0x30]
	jl	.label_1257
.label_1249:
	cmp	rax, qword ptr [rbx + 0x30]
	jne	.label_1251
	mov	qword ptr [rbx + 0x30], 0
	jmp	.label_1247
.label_1262:
	cmp	byte ptr [rbx + 0x88], 0
	je	.label_1264
	mov	rdi, rbx
	call	build_upper_buffer
	jmp	.label_1252
.label_1275:
	mov	rax, qword ptr [rbx + 0x28]
	add	rax, r13
	mov	rcx, qword ptr [rbx]
	mov	al, byte ptr [rcx + rax - 1]
	movzx	ecx, al
	mov	qword ptr [rbx + 0x38], 0
	mov	rdx, qword ptr [rbx + 0x78]
	test	rdx, rdx
	je	.label_1267
	mov	al, byte ptr [rdx + rcx]
.label_1267:
	mov	rdi, qword ptr [rbx + 0x80]
	movzx	r15d, al
	mov	rsi, r15
	call	bitset_contain
	mov	ecx, 1
	test	al, al
	jne	.label_1272
	xor	ecx, ecx
	cmp	r15d, 0xa
	jne	.label_1272
	mov	ecx, 2
	cmp	byte ptr [rbx + 0x8d], 0
	jne	.label_1272
	xor	ecx, ecx
.label_1272:
	mov	dword ptr [rbx + 0x70], ecx
	jmp	.label_1263
.label_1251:
	mov	rcx, qword ptr [rbx + 0x18]
	mov	rax, qword ptr [rcx + rax*8]
	sub	rax, r13
	mov	qword ptr [rbx + 0x30], rax
	je	.label_1247
	mov	r15, qword ptr [rbx + 0x30]
	test	r15, r15
	jle	.label_1240
	mov	rdi, qword ptr [rbx + 0x10]
	mov	r15, qword ptr [rbx + 0x30]
	test	r15, r15
	mov	edx, 1
	cmovg	rdx, r15
	shl	rdx, 2
	mov	esi, 0xff
	call	memset
.label_1240:
	mov	rdi, qword ptr [rbx + 8]
	mov	esi, 0xff
	mov	rdx, r15
	call	memset
	jmp	.label_1247
.label_1264:
	cmp	qword ptr [rbx + 0x78], 0
	je	.label_1252
	mov	rdi, rbx
	call	re_string_translate_buffer
	jmp	.label_1252
.label_1269:
	mov	rsi, qword ptr [rsp]
	dec	rsi
	mov	rdi, rbx
	mov	edx, r15d
	call	re_string_context_at
.label_1242:
	mov	dword ptr [rbx + 0x70], eax
	cmp	qword ptr [rbx + 0x30], 0
	jne	.label_1261
.label_1247:
	mov	rax, qword ptr [rbx + 0x30]
	mov	qword ptr [rbx + 0x38], rax
	jmp	.label_1263
.label_1270:
	mov	rax, r13
	sub	rax, r14
	mov	rcx, qword ptr [rbx + 0x50]
	add	rcx, rax
	mov	qword ptr [rbx + 0x58], rcx
	add	rax, qword ptr [rbx + 0x60]
	mov	qword ptr [rbx + 0x68], rax
	mov	byte ptr [rbx + 0x8c], 0
	jmp	.label_1241
.label_1261:
	mov	r15, qword ptr [rbx + 0x30]
	test	r15, r15
	jle	.label_1268
	mov	rdi, qword ptr [rbx + 0x10]
	mov	r15, qword ptr [rbx + 0x30]
	test	r15, r15
	mov	edx, 1
	cmovg	rdx, r15
	shl	rdx, 2
	mov	esi, 0xff
	call	memset
.label_1268:
	cmp	byte ptr [rbx + 0x8b], 0
	jne	.label_1240
	jmp	.label_1247
.label_1271:
	call	iswalnum
	test	eax, eax
	mov	eax, 1
	jne	.label_1242
	mov	ecx, dword ptr [rsp + 0x24]
	cmp	ecx, 0x5f
	jne	.label_1281
	jmp	.label_1242
.label_1250:
	lea	rsi, [rsp + 0xe]
	cmp	rdx, 6
	mov	ecx, 6
	cmovl	ecx, edx
	test	ecx, ecx
	jle	.label_1239
	lea	rcx, [rbp - 1]
	sub	rcx, rax
	cmp	rcx, -8
	mov	r10, -7
	cmovg	r10, rcx
	xor	r10, 0xffffffffffffffff
	shl	r10, 0x20
	sar	r10, 0x20
	lea	r8, [rsp + r10 + 0xd]
	lea	r9, [r10 + rbp - 1]
	xor	ecx, ecx
.label_1276:
	movzx	edi, byte ptr [r9 + rcx]
	mov	rax, qword ptr [rbx + 0x78]
	mov	al, byte ptr [rax + rdi]
	mov	byte ptr [r8 + rcx], al
	lea	rax, [r10 + rcx - 1]
	dec	rcx
	inc	rax
	cmp	rax, 1
	jg	.label_1276
	jmp	.label_1239
	.section	.text
	.align	32
	#Procedure 0x40ea71
	.globl sub_40ea71
	.type sub_40ea71, @function
sub_40ea71:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40ea80

	.globl check_matching
	.type check_matching, @function
check_matching:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r13, rdx
	mov	dword ptr [rsp + 0x1c], esi
	mov	rbp, rdi
	mov	r14, qword ptr [rbp + 0x98]
	mov	r12, qword ptr [rbp + 0x48]
	test	r13, r13
	setne	al
	mov	dword ptr [rsp + 0x20], eax
	mov	dword ptr [rsp + 0x24], 0
	mov	r15, qword ptr [rbp + 0x98]
	mov	rbx, qword ptr [r15 + 0x48]
	cmp	byte ptr [rbx + 0x68], 0
	jns	.label_1284
	lea	rsi, [r12 - 1]
	mov	edx, dword ptr [rbp + 0xa0]
	mov	rdi, rbp
	call	re_string_context_at
	test	al, 1
	jne	.label_1309
	test	eax, eax
	je	.label_1284
	mov	ecx, eax
	and	ecx, 4
	sete	sil
	mov	edx, eax
	and	edx, 2
	je	.label_1310
	test	sil, sil
	jne	.label_1310
	mov	rbx, qword ptr [r15 + 0x60]
	jmp	.label_1284
.label_1309:
	mov	rbx, qword ptr [r15 + 0x50]
.label_1284:
	test	rbx, rbx
	je	.label_1287
	mov	rax, qword ptr [rbp + 0xb8]
	test	rax, rax
	je	.label_1290
	mov	qword ptr [rax + r12*8], rbx
	cmp	qword ptr [r14 + 0x98], 0
	jne	.label_1302
.label_1290:
	mov	al, byte ptr [rbx + 0x68]
	mov	rdx, -1
	xor	ecx, ecx
	test	al, 0x10
	jne	.label_1295
.label_1308:
	mov	qword ptr [rsp], rdx
	mov	qword ptr [rsp + 8], r13
	mov	qword ptr [rsp + 0x10], r12
	lea	r13, [rsp + 0x24]
.label_1296:
	mov	rsi, qword ptr [rbp + 0x48]
	cmp	qword ptr [rbp + 0x68], rsi
	jle	.label_1286
	test	rcx, rcx
	sete	r12b
	mov	eax, dword ptr [rsp + 0x1c]
	or	r12b, al
	mov	r15, rbx
	nop	word ptr cs:[rax + rax]
.label_1292:
	lea	r14, [rsi + 1]
	mov	rax, qword ptr [rbp + 0x40]
	cmp	r14, rax
	jge	.label_1285
.label_1307:
	mov	rax, qword ptr [rbp + 0x30]
	cmp	r14, rax
	jge	.label_1311
.label_1294:
	mov	rdi, r13
	mov	rsi, rbp
	mov	rdx, r15
	call	transit_state
	mov	rbx, rax
	cmp	qword ptr [rbp + 0xb8], 0
	je	.label_1298
	mov	rdi, r13
	mov	rsi, rbp
	mov	rdx, rbx
	call	merge_state_with_log
	mov	rbx, rax
.label_1298:
	test	rbx, rbx
	jne	.label_1304
	mov	rax, -2
	cmp	dword ptr [rsp + 0x24], 0
	jne	.label_1288
	cmp	qword ptr [rbp + 0xb8], 0
	setne	al
	and	al, r12b
	movzx	eax, al
	cmp	eax, 1
	jne	.label_1286
	mov	rdi, r13
	mov	rsi, rbp
	call	find_recover_state
	mov	rbx, rax
	test	rbx, rbx
	je	.label_1286
.label_1304:
	mov	eax, dword ptr [rsp + 0x20]
	test	al, 1
	jne	.label_1291
.label_1299:
	mov	al, byte ptr [rbx + 0x68]
	test	al, 0x10
	je	.label_1313
	test	al, al
	jns	.label_1300
	mov	rdx, qword ptr [rbp + 0x48]
	mov	rdi, rbp
	mov	rsi, rbx
	call	check_halt_state_context
	test	rax, rax
	jne	.label_1300
.label_1313:
	mov	rsi, qword ptr [rbp + 0x48]
	cmp	qword ptr [rbp + 0x68], rsi
	mov	r15, rbx
	jg	.label_1292
	jmp	.label_1286
.label_1285:
	cmp	rax, qword ptr [rbp + 0x58]
	jl	.label_1306
	jmp	.label_1307
.label_1311:
	cmp	rax, qword ptr [rbp + 0x58]
	jge	.label_1294
.label_1306:
	add	esi, 2
	mov	rdi, rbp
	call	extend_buffers
	mov	ecx, eax
	mov	dword ptr [rsp + 0x24], ecx
	test	ecx, ecx
	jne	.label_1312
	jmp	.label_1294
.label_1291:
	cmp	r15, rbx
	je	.label_1314
	mov	dword ptr [rsp + 0x20], 0
.label_1314:
	mov	rax, qword ptr [rsp + 0x10]
	cmove	rax, r14
	mov	qword ptr [rsp + 0x10], rax
	jmp	.label_1299
	.section	.text
	.align	32
	#Procedure 0x40ec98
	.globl sub_40ec98
	.type sub_40ec98, @function
sub_40ec98:

	nop	dword ptr [rax + rax]
.label_1300:
	mov	rdx, qword ptr [rbp + 0x48]
	mov	qword ptr [rsp], rdx
	mov	eax, dword ptr [rsp + 0x1c]
	test	al, al
	mov	ecx, 1
	mov	eax, 0
	mov	qword ptr [rsp + 8], rax
	mov	rax, rdx
	jne	.label_1296
	jmp	.label_1288
.label_1286:
	mov	rcx, qword ptr [rsp + 8]
	test	rcx, rcx
	je	.label_1305
	mov	rax, qword ptr [rsp + 0x10]
	add	qword ptr [rcx], rax
.label_1305:
	mov	rax, qword ptr [rsp]
	jmp	.label_1288
.label_1312:
	mov	rax, -2
	cmp	ecx, 0xc
	je	.label_1288
	mov	edi, OFFSET FLAT:.str.25_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x46c
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.check_matching
	call	__assert_fail
.label_1287:
	mov	rax, -2
	cmp	dword ptr [rsp + 0x24], 0xc
	je	.label_1288
	mov	edi, OFFSET FLAT:.str.25_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x435
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.check_matching
	call	__assert_fail
.label_1310:
	test	edx, edx
	jne	.label_1301
	test	ecx, ecx
	je	.label_1284
	mov	rdx, qword ptr [rbx + 0x50]
	lea	rdi, [rsp + 0x24]
	mov	rsi, r15
	mov	ecx, eax
	call	re_acquire_state_context
	mov	rbx, rax
	jmp	.label_1284
.label_1295:
	test	al, al
	js	.label_1303
	mov	ecx, 1
	mov	eax, dword ptr [rsp + 0x1c]
	test	al, al
	mov	rdx, r12
	jne	.label_1308
	mov	rax, r12
	jmp	.label_1288
.label_1302:
	lea	r15, [rbx + 8]
	xor	edx, edx
	mov	rdi, rbp
	mov	rsi, r15
	call	check_subexp_matching_top
	mov	dword ptr [rsp + 0x24], eax
	test	eax, eax
	jne	.label_1289
	test	byte ptr [rbx + 0x68], 0x40
	je	.label_1293
	mov	rdi, rbp
	mov	rsi, r15
	call	transit_state_bkref
	mov	dword ptr [rsp + 0x24], eax
	test	eax, eax
	jne	.label_1297
.label_1293:
	mov	dword ptr [rsp + 0x20], 0
	jmp	.label_1290
.label_1301:
	mov	rbx, qword ptr [r15 + 0x58]
	jmp	.label_1284
.label_1303:
	mov	rdi, rbp
	mov	rsi, rbx
	mov	rdx, r12
	call	check_halt_state_context
	cmp	rax, 1
	sbb	rdx, rdx
	or	rdx, r12
	test	rax, rax
	setne	al
	movzx	ecx, al
	je	.label_1308
	mov	eax, dword ptr [rsp + 0x1c]
	test	al, al
	jne	.label_1308
	mov	rax, r12
.label_1288:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1289:
	cdqe	
	jmp	.label_1288
.label_1297:
	cdqe	
	jmp	.label_1288
	.section	.text
	.align	32
	#Procedure 0x40ee13
	.globl sub_40ee13
	.type sub_40ee13, @function
sub_40ee13:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40ee20

	.globl check_halt_state_context
	.type check_halt_state_context, @function
check_halt_state_context:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	eax, dword ptr [rbx + 0xa0]
	mov	rsi, rdx
	mov	edx, eax
	call	re_string_context_at
	mov	r15d, eax
	xor	ebp, ebp
	cmp	qword ptr [r14 + 0x10], 0
	jle	.label_1315
	mov	r12, qword ptr [rbx + 0x98]
	mov	r13, qword ptr [r14 + 0x18]
	xor	ebx, ebx
	nop	word ptr [rax + rax]
.label_1316:
	mov	rbp, qword ptr [r13 + rbx*8]
	mov	rdi, r12
	mov	rsi, rbp
	mov	edx, r15d
	call	check_halt_node_context
	test	al, al
	jne	.label_1315
	inc	rbx
	cmp	rbx, qword ptr [r14 + 0x10]
	mov	ebp, 0
	jl	.label_1316
.label_1315:
	mov	rax, rbp
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40ee97
	.globl sub_40ee97
	.type sub_40ee97, @function
sub_40ee97:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40eea0

	.globl prune_impossible_nodes
	.type prune_impossible_nodes, @function
prune_impossible_nodes:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x58
	mov	r12, rdi
	mov	rbx, qword ptr [r12 + 0xa8]
	mov	r13d, 0xc
	movabs	rax, 0x1ffffffffffffffe
	cmp	rbx, rax
	ja	.label_1322
	mov	r14, qword ptr [r12 + 0x98]
	mov	rax, qword ptr [r12 + 0xb0]
	mov	qword ptr [rsp + 0x18], rax
	lea	rbp, [rbx*8 + 8]
	mov	rdi, rbp
	call	malloc
	mov	r15, rax
	mov	r13d, 0xc
	test	r15, r15
	je	.label_1328
	cmp	qword ptr [r14 + 0x98], 0
	je	.label_1320
	mov	qword ptr [rsp + 8], r14
	mov	rdi, rbp
	call	malloc
	test	rax, rax
	je	.label_1317
	mov	qword ptr [rsp + 0x10], r12
	lea	rbp, [rsp + 0x20]
	mov	r12, qword ptr [rsp + 0x18]
	mov	r14, r15
	mov	r15, rax
	jmp	.label_1324
.label_1320:
	lea	r14, [rsp + 0x20]
	xor	edx, edx
	mov	rdi, r14
	mov	rbp, r15
	mov	rsi, rbp
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r8, rbx
	call	sift_ctx_init
	mov	rdi, r12
	mov	rsi, r14
	call	sift_states_backward
	mov	r13d, eax
	mov	rdi, qword ptr [rsp + 0x50]
	call	free
	test	r13d, r13d
	jne	.label_1327
	xor	r15d, r15d
	cmp	qword ptr [rbp], 0
	jne	.label_1330
	mov	r13d, 1
	jmp	.label_1319
	.section	.text
	.align	32
	#Procedure 0x40ef97
	.globl sub_40ef97
	.type sub_40ef97, @function
sub_40ef97:

	nop	word ptr [rax + rax]
.label_1323:
	mov	rdx, rbx
	call	check_halt_state_context
	mov	r12, rax
.label_1324:
	lea	rdx, [rbx*8 + 8]
	xor	esi, esi
	mov	rdi, r15
	call	memset
	mov	rdi, rbp
	mov	rsi, r14
	mov	rdx, r15
	mov	rcx, r12
	mov	r8, rbx
	call	sift_ctx_init
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, rbp
	call	sift_states_backward
	mov	r13d, eax
	mov	rdi, qword ptr [rsp + 0x50]
	call	free
	test	r13d, r13d
	jne	.label_1321
	cmp	qword ptr [r14], 0
	jne	.label_1325
	cmp	qword ptr [r15], 0
	jne	.label_1325
	mov	r13d, 1
	test	rbx, rbx
	mov	rdi, qword ptr [rsp + 0x10]
	jle	.label_1329
	mov	rax, qword ptr [rdi + 0xb8]
	dec	rbx
	nop	word ptr [rax + rax]
.label_1326:
	mov	rsi, qword ptr [rax + rbx*8]
	test	rsi, rsi
	je	.label_1318
	test	byte ptr [rsi + 0x68], 0x10
	jne	.label_1323
.label_1318:
	lea	rcx, [rbx - 1]
	inc	rbx
	cmp	rbx, 2
	mov	rbx, rcx
	jge	.label_1326
	mov	rbp, r14
	jmp	.label_1319
.label_1328:
	mov	rbp, r15
	xor	r15d, r15d
	jmp	.label_1319
.label_1321:
	mov	rbp, r14
	jmp	.label_1319
.label_1325:
	mov	qword ptr [rsp + 0x18], r12
	lea	rcx, [rbx + 1]
	mov	rdi, qword ptr [rsp + 8]
	mov	rbp, r14
	mov	rsi, rbp
	mov	rdx, r15
	call	merge_state_array
	mov	r13d, eax
	mov	rdi, r15
	call	free
	xor	r15d, r15d
	test	r13d, r13d
	mov	r12, qword ptr [rsp + 0x10]
	jne	.label_1319
.label_1330:
	mov	rdi, qword ptr [r12 + 0xb8]
	call	free
	mov	qword ptr [r12 + 0xb8], rbp
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [r12 + 0xb0], rax
	mov	qword ptr [r12 + 0xa8], rbx
	xor	r13d, r13d
	xor	ebp, ebp
.label_1327:
	xor	r15d, r15d
.label_1319:
	mov	rdi, rbp
	call	free
	mov	rdi, r15
	call	free
.label_1322:
	mov	eax, r13d
	add	rsp, 0x58
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1317:
	mov	rbp, r15
	mov	r15, rax
	jmp	.label_1319
.label_1329:
	mov	rbp, r14
	jmp	.label_1319
	.section	.text
	.align	32
	#Procedure 0x40f0ea
	.globl sub_40f0ea
	.type sub_40f0ea, @function
sub_40f0ea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40f0f0

	.globl match_ctx_clean
	.type match_ctx_clean, @function
match_ctx_clean:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdi
	cmp	qword ptr [r14 + 0xe8], 0
	jle	.label_1333
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_1335:
	mov	rax, qword ptr [r14 + 0xf8]
	mov	r15, qword ptr [rax + r12*8]
	cmp	qword ptr [r15 + 0x20], 0
	mov	ebx, 0
	jle	.label_1331
	nop	word ptr [rax + rax]
.label_1332:
	mov	rax, qword ptr [r15 + 0x28]
	mov	r13, qword ptr [rax + rbx*8]
	mov	rdi, qword ptr [r13 + 0x20]
	call	free
	mov	rdi, r13
	call	free
	inc	rbx
	cmp	rbx, qword ptr [r15 + 0x20]
	jl	.label_1332
.label_1331:
	mov	rdi, qword ptr [r15 + 0x28]
	call	free
	mov	rax, qword ptr [r15 + 0x10]
	test	rax, rax
	je	.label_1334
	mov	rdi, qword ptr [rax + 0x10]
	call	free
	mov	rdi, qword ptr [r15 + 0x10]
	call	free
.label_1334:
	mov	rdi, r15
	call	free
	inc	r12
	cmp	r12, qword ptr [r14 + 0xe8]
	jl	.label_1335
.label_1333:
	mov	qword ptr [r14 + 0xe8], 0
	mov	qword ptr [r14 + 0xc8], 0
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40f1aa
	.globl sub_40f1aa
	.type sub_40f1aa, @function
sub_40f1aa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40f1b0

	.globl set_regs
	.type set_regs, @function
set_regs:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x68
	mov	r12, rcx
	mov	rbx, rdx
	mov	qword ptr [rbp - 0x78], rsi
	mov	r15, qword ptr [rdi]
	mov	rax,  qword ptr [word ptr [rip + label_1343]]
	mov	qword ptr [rbp - 0x60], rax
	movups	xmm0,  xmmword ptr [word ptr [rip + label_1344]]
	movaps	xmmword ptr [rbp - 0x70], xmm0
	xor	r14d, r14d
	test	r8b, r8b
	je	.label_1345
	mov	rax, qword ptr [rbp - 0x68]
	shl	rax, 4
	lea	rdi, [rax + rax*2]
	call	malloc
	mov	qword ptr [rbp - 0x60], rax
	mov	r14d, 0xc
	test	rax, rax
	je	.label_1347
	lea	r14, [rbp - 0x70]
.label_1345:
	mov	qword ptr [rbp - 0x88], r15
	mov	r15, qword ptr [r15 + 0x90]
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rbp - 0x50], xmm0
	mov	qword ptr [rbp - 0x40], 0
	mov	r13, rbx
	shl	r13, 4
	cmp	r13, 0xfbf
	ja	.label_1339
	mov	rdi, rsp
	lea	rax, [r13 + 0xf]
	and	rax, 0xfffffffffffffff0
	sub	rdi, rax
	mov	rsp, rdi
	mov	dword ptr [rbp - 0x8c], 0
	jmp	.label_1353
.label_1339:
	mov	rdi, r13
	call	malloc
	mov	rdi, rax
	test	rdi, rdi
	je	.label_1355
	mov	al, 1
	mov	dword ptr [rbp - 0x8c], eax
.label_1353:
	mov	qword ptr [rbp - 0x80], rdi
	mov	rsi, r12
	mov	rdx, r13
	call	memcpy
	mov	r8, qword ptr [r12]
	mov	qword ptr [rbp - 0x30], r8
	cmp	r8, qword ptr [r12 + 8]
	jg	.label_1337
	lea	r13, [r12 + 8]
	jmp	.label_1341
.label_1351:
	cmp	r15, -2
	je	.label_1346
	test	r14, r14
	je	.label_1348
	mov	rdi, r14
	lea	rsi, [rbp - 0x30]
	mov	rdx, rbx
	mov	rcx, r12
	lea	r8, [rbp - 0x50]
	call	pop_fail_stack
	mov	r15, rax
	jmp	.label_1340
	.section	.text
	.align	32
	#Procedure 0x40f2d4
	.globl sub_40f2d4
	.type sub_40f2d4, @function
sub_40f2d4:

	nop	word ptr cs:[rax + rax]
.label_1341:
	mov	rdi, qword ptr [rbp - 0x88]
	mov	rsi, r12
	mov	rdx, qword ptr [rbp - 0x80]
	mov	rcx, r15
	mov	r9, rbx
	call	update_regs
	mov	rax, qword ptr [rbp - 0x30]
	cmp	rax, qword ptr [r12 + 8]
	jne	.label_1336
	mov	rax, qword ptr [rbp - 0x78]
	cmp	r15, qword ptr [rax + 0xb0]
	jne	.label_1336
	test	r14, r14
	je	.label_1338
	test	rbx, rbx
	mov	rcx, r13
	mov	eax, 0
	je	.label_1342
	nop	word ptr [rax + rax]
.label_1352:
	cmp	qword ptr [rcx - 8], 0
	js	.label_1349
	cmp	qword ptr [rcx], -1
	je	.label_1342
.label_1349:
	inc	rax
	add	rcx, 0x10
	cmp	rax, rbx
	jb	.label_1352
.label_1342:
	cmp	rax, rbx
	je	.label_1337
	mov	rdi, r14
	lea	rsi, [rbp - 0x30]
	mov	rdx, rbx
	mov	rcx, r12
	lea	r8, [rbp - 0x50]
	call	pop_fail_stack
	mov	r15, rax
.label_1336:
	sub	rsp, 0x10
	mov	qword ptr [rsp], r14
	mov	rdi, qword ptr [rbp - 0x78]
	mov	rsi, rbx
	mov	rdx, r12
	lea	rcx, [rbp - 0x30]
	mov	r8, r15
	lea	r9, [rbp - 0x50]
	call	proceed_next_node
	add	rsp, 0x10
	mov	r15, rax
	test	r15, r15
	js	.label_1351
.label_1340:
	mov	r8, qword ptr [rbp - 0x30]
	cmp	r8, qword ptr [r12 + 8]
	jle	.label_1341
.label_1337:
	mov	rdi, qword ptr [rbp - 0x40]
	call	free
	mov	eax, dword ptr [rbp - 0x8c]
	test	al, al
	je	.label_1350
	mov	rdi, qword ptr [rbp - 0x80]
	call	free
.label_1350:
	mov	rdi, r14
	call	free_fail_stack_return
	xor	r14d, r14d
	jmp	.label_1347
.label_1338:
	mov	rdi, qword ptr [rbp - 0x40]
	call	free
	xor	r14d, r14d
	jmp	.label_1354
.label_1346:
	mov	rdi, qword ptr [rbp - 0x40]
	call	free
	mov	eax, dword ptr [rbp - 0x8c]
	test	al, al
	je	.label_1355
	mov	rdi, qword ptr [rbp - 0x80]
	call	free
.label_1355:
	mov	rdi, r14
	call	free_fail_stack_return
	mov	r14d, 0xc
.label_1347:
	mov	eax, r14d
	lea	rsp, [rbp - 0x28]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1348:
	mov	rdi, qword ptr [rbp - 0x40]
	call	free
	mov	r14d, 1
.label_1354:
	mov	eax, dword ptr [rbp - 0x8c]
	test	al, al
	je	.label_1347
	mov	rdi, qword ptr [rbp - 0x80]
	call	free
	jmp	.label_1347
	.section	.text
	.align	32
	#Procedure 0x40f43f
	.globl sub_40f43f
	.type sub_40f43f, @function
sub_40f43f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40f440

	.globl match_ctx_free
	.type match_ctx_free, @function
match_ctx_free:
	push	rbx
	mov	rbx, rdi
	call	match_ctx_clean
	mov	rdi, qword ptr [rbx + 0xf8]
	call	free
	mov	rdi, qword ptr [rbx + 0xd8]
	pop	rbx
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x40f462
	.globl sub_40f462
	.type sub_40f462, @function
sub_40f462:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40f470

	.globl re_string_context_at
	.type re_string_context_at, @function
re_string_context_at:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rsi, rsi
	js	.label_1363
	cmp	qword ptr [rbx + 0x58], rsi
	je	.label_1364
	cmp	dword ptr [rbx + 0x90], 2
	jl	.label_1357
	mov	rax, qword ptr [rbx + 0x10]
	inc	rsi
	nop	dword ptr [rax]
.label_1361:
	mov	ebp, dword ptr [rax + rsi*4 - 4]
	cmp	ebp, -1
	jne	.label_1360
	dec	rsi
	test	rsi, rsi
	jg	.label_1361
	mov	edx, dword ptr [rbx + 0x70]
	jmp	.label_1356
.label_1357:
	mov	rax, qword ptr [rbx + 8]
	mov	rdi, qword ptr [rbx + 0x80]
	movzx	ebp, byte ptr [rax + rsi]
	mov	rsi, rbp
	call	bitset_contain
	mov	edx, 1
	test	al, al
	jne	.label_1356
	xor	edx, edx
	cmp	ebp, 0xa
	jne	.label_1356
	jmp	.label_1358
.label_1360:
	cmp	byte ptr [rbx + 0x8e], 0
	jne	.label_1359
.label_1362:
	xor	edx, edx
	cmp	ebp, 0xa
	jne	.label_1356
.label_1358:
	mov	edx, 2
	cmp	byte ptr [rbx + 0x8d], 0
	jne	.label_1356
	xor	edx, edx
	jmp	.label_1356
.label_1363:
	mov	edx, dword ptr [rbx + 0x70]
	jmp	.label_1356
.label_1364:
	and	edx, 2
	xor	edx, 0xa
.label_1356:
	mov	eax, edx
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_1359:
	mov	edi, ebp
	call	iswalnum
	cmp	ebp, 0x5f
	mov	edx, 1
	je	.label_1356
	test	eax, eax
	jne	.label_1356
	jmp	.label_1362
	.section	.text
	.align	32
	#Procedure 0x40f52c
	.globl sub_40f52c
	.type sub_40f52c, @function
sub_40f52c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40f530

	.globl re_string_skip_chars
	.type re_string_skip_chars, @function
re_string_skip_chars:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r15, rsi
	mov	r12, rdi
	mov	rbx, qword ptr [r12 + 0x38]
	add	rbx, qword ptr [r12 + 0x28]
	mov	ecx, 0xffffffff
	cmp	rbx, r15
	jge	.label_1367
	mov	qword ptr [rsp + 8], rdx
	lea	r13, [r12 + 0x20]
	jmp	.label_1366
.label_1370:
	xor	ecx, ecx
	cmp	rbp, rbx
	je	.label_1365
	test	rax, rax
	je	.label_1365
	mov	rax, qword ptr [r12]
	movzx	ecx, byte ptr [rax + rbx]
.label_1365:
	mov	qword ptr [r13], r14
	mov	eax, 1
	jmp	.label_1368
	.section	.text
	.align	32
	#Procedure 0x40f583
	.globl sub_40f583
	.type sub_40f583, @function
sub_40f583:

	nop	word ptr cs:[rax + rax]
.label_1366:
	mov	r14, qword ptr [r12 + 0x20]
	mov	rbp, qword ptr [r12 + 0x50]
	mov	rdx, rbp
	sub	rdx, rbx
	mov	rsi, qword ptr [r12]
	add	rsi, rbx
	lea	rdi, [rsp + 0x14]
	mov	rcx, r13
	call	rpl_mbrtowc
	test	rax, rax
	je	.label_1370
	mov	rcx, rax
	or	rcx, 1
	cmp	rcx, -1
	je	.label_1370
	mov	ecx, dword ptr [rsp + 0x14]
.label_1368:
	add	rbx, rax
	cmp	rbx, r15
	jl	.label_1366
	jmp	.label_1369
.label_1367:
	mov	qword ptr [rsp + 8], rdx
.label_1369:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], ecx
	mov	rax, rbx
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40f5f2
	.globl sub_40f5f2
	.type sub_40f5f2, @function
sub_40f5f2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40f600

	.globl bitset_contain
	.type bitset_contain, @function
bitset_contain:
	mov	rax, rsi
	sar	rax, 0x3f
	shr	rax, 0x3a
	add	rax, rsi
	sar	rax, 6
	mov	rax, qword ptr [rdi + rax*8]
	bt	rax, rsi
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x40f61e
	.globl sub_40f61e
	.type sub_40f61e, @function
sub_40f61e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x40f620

	.globl check_subexp_matching_top
	.type check_subexp_matching_top, @function
check_subexp_matching_top:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	r13, rsi
	mov	r15, rdi
	xor	eax, eax
	cmp	qword ptr [r13 + 8], 0
	jle	.label_1371
	mov	r12, qword ptr [r15 + 0x98]
	xor	ebx, ebx
	nop	word ptr cs:[rax + rax]
.label_1372:
	mov	rax, qword ptr [r13 + 0x10]
	mov	rsi, qword ptr [rax + rbx*8]
	mov	rax, qword ptr [r12]
	mov	rcx, rsi
	shl	rcx, 4
	movzx	edx, byte ptr [rax + rcx + 8]
	cmp	edx, 8
	jne	.label_1373
	mov	rax, qword ptr [rax + rcx]
	cmp	rax, 0x3f
	jg	.label_1373
	mov	rcx, qword ptr [r12 + 0xa0]
	bt	rcx, rax
	jae	.label_1373
	mov	rdi, r15
	mov	rdx, r14
	call	match_ctx_add_subtop
	test	eax, eax
	jne	.label_1371
	nop	word ptr cs:[rax + rax]
.label_1373:
	inc	rbx
	xor	eax, eax
	cmp	rbx, qword ptr [r13 + 8]
	jl	.label_1372
.label_1371:
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40f6b5
	.globl sub_40f6b5
	.type sub_40f6b5, @function
sub_40f6b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40f6c0

	.globl transit_state_bkref
	.type transit_state_bkref, @function
transit_state_bkref:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x68
	mov	r14, rsi
	mov	qword ptr [rsp + 0x38], r14
	mov	r13, rdi
	cmp	qword ptr [r14 + 8], 0
	jle	.label_1384
	mov	r8, qword ptr [r13 + 0x98]
	mov	qword ptr [rsp + 0x10], r8
	mov	rax, qword ptr [r13 + 0x48]
	mov	qword ptr [rsp + 0x40], rax
	xor	r15d, r15d
	nop	dword ptr [rax]
.label_1383:
	mov	rax, qword ptr [r14 + 0x10]
	mov	rsi, qword ptr [rax + r15*8]
	mov	rax, qword ptr [r8]
	mov	rcx, rsi
	shl	rcx, 4
	mov	ebx, dword ptr [rax + rcx + 8]
	movzx	eax, bl
	cmp	eax, 4
	jne	.label_1374
	mov	ebp, ebx
	shr	ebp, 8
	test	bp, 0x3ff
	je	.label_1377
	mov	r14, rsi
	mov	edx, dword ptr [r13 + 0xa0]
	mov	rdi, r13
	mov	r12, r8
	mov	rsi, qword ptr [rsp + 0x40]
	call	re_string_context_at
	mov	rsi, r14
	mov	r14, qword ptr [rsp + 0x38]
	mov	r8, r12
	mov	ecx, eax
	and	ecx, 1
	test	bpl, 4
	je	.label_1385
	test	ecx, ecx
	je	.label_1374
.label_1385:
	test	bh, 8
	je	.label_1389
	test	ecx, ecx
	jne	.label_1374
.label_1389:
	test	bh, 0x20
	je	.label_1390
	mov	ecx, eax
	and	ecx, 2
	je	.label_1374
.label_1390:
	test	bpl, bpl
	jns	.label_1377
	and	eax, 8
	je	.label_1374
	nop	word ptr cs:[rax + rax]
.label_1377:
	mov	qword ptr [rsp + 8], rsi
	mov	r12, qword ptr [r13 + 0xc8]
	mov	rdi, r13
	mov	rbx, r8
	mov	rbp, rsi
	mov	rdx, qword ptr [rsp + 0x40]
	call	get_subexp
	mov	rdx, rbp
	mov	r8, rbx
	mov	dword ptr [rsp + 0x64], eax
	test	eax, eax
	jne	.label_1375
	cmp	r12, qword ptr [r13 + 0xc8]
	jge	.label_1374
	lea	rax, [r12 + r12*4]
	lea	rbp, [rax*8 + 0x18]
	nop	word ptr [rax + rax]
.label_1379:
	mov	rax, qword ptr [r13 + 0xd8]
	cmp	qword ptr [rax + rbp - 0x18], rdx
	jne	.label_1376
	mov	rcx, qword ptr [rsp + 0x40]
	cmp	qword ptr [rax + rbp - 0x10], rcx
	jne	.label_1376
	mov	rcx, qword ptr [rax + rbp - 8]
	mov	rsi, qword ptr [rax + rbp]
	mov	rdi, qword ptr [r8 + 0x30]
	cmp	rsi, rcx
	jne	.label_1380
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x18], rsi
	mov	qword ptr [rsp + 0x20], rcx
	mov	rcx, qword ptr [r8 + 0x28]
	lea	rdx, [rdx + rdx*2]
	mov	rcx, qword ptr [rcx + rdx*8 + 0x10]
	jmp	.label_1387
.label_1380:
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x18], rsi
	mov	qword ptr [rsp + 0x20], rcx
	lea	rcx, [rdx*8]
	add	rcx, qword ptr [r8 + 0x18]
.label_1387:
	mov	rcx, qword ptr [rcx]
	lea	rcx, [rcx + rcx*2]
	mov	qword ptr [rsp + 0x30], rcx
	mov	r14, qword ptr [rax + rbp]
	mov	rbx, qword ptr [rsp + 0x40]
	add	r14, rbx
	sub	r14, qword ptr [rax + rbp - 8]
	lea	rsi, [r14 - 1]
	mov	edx, dword ptr [r13 + 0xa0]
	mov	rdi, r13
	call	re_string_context_at
	mov	rcx, qword ptr [r13 + 0xb8]
	mov	r8, qword ptr [rcx + r14*8]
	mov	rcx, qword ptr [rcx + rbx*8]
	test	rcx, rcx
	mov	esi, 0
	je	.label_1378
	mov	rsi, qword ptr [rcx + 0x10]
.label_1378:
	mov	rcx, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x30]
	lea	rdx, [rcx + rdx*8]
	test	r8, r8
	lea	rbx, [rsp + 0x48]
	mov	rdi, rbx
	je	.label_1382
	mov	ebx, eax
	mov	qword ptr [rsp + 0x30], rsi
	mov	rsi, qword ptr [r8 + 0x50]
	mov	qword ptr [rsp + 0x28], rdx
	call	re_node_set_init_union
	mov	dword ptr [rsp + 0x64], eax
	test	eax, eax
	jne	.label_1388
	lea	rdi, [rsp + 0x64]
	mov	rsi, qword ptr [rsp + 0x10]
	lea	rdx, [rsp + 0x48]
	mov	ecx, ebx
	call	re_acquire_state_context
	mov	rcx, qword ptr [r13 + 0xb8]
	mov	qword ptr [rcx + r14*8], rax
	mov	rdi, qword ptr [rsp + 0x58]
	call	free
	mov	rax, qword ptr [r13 + 0xb8]
	cmp	qword ptr [rax + r14*8], 0
	jne	.label_1386
	mov	eax, dword ptr [rsp + 0x64]
	test	eax, eax
	jne	.label_1375
.label_1386:
	mov	r14, qword ptr [rsp + 0x38]
	mov	r8, qword ptr [rsp + 0x10]
	mov	rdx, qword ptr [rsp + 8]
	jmp	.label_1381
.label_1382:
	mov	qword ptr [rsp + 0x30], rsi
	lea	rdi, [rsp + 0x64]
	mov	rbx, qword ptr [rsp + 0x10]
	mov	rsi, rbx
	mov	qword ptr [rsp + 0x28], rdx
	mov	ecx, eax
	call	re_acquire_state_context
	mov	r8, rbx
	mov	rcx, qword ptr [r13 + 0xb8]
	mov	qword ptr [rcx + r14*8], rax
	mov	rax, qword ptr [r13 + 0xb8]
	cmp	qword ptr [rax + r14*8], 0
	mov	r14, qword ptr [rsp + 0x38]
	mov	rdx, qword ptr [rsp + 8]
	jne	.label_1381
	mov	eax, dword ptr [rsp + 0x64]
	test	eax, eax
	jne	.label_1375
	nop	dword ptr [rax]
.label_1381:
	mov	rax, qword ptr [rsp + 0x18]
	cmp	rax, qword ptr [rsp + 0x20]
	jne	.label_1376
	mov	rax, qword ptr [r13 + 0xb8]
	mov	rcx, qword ptr [rsp + 0x40]
	mov	rax, qword ptr [rax + rcx*8]
	mov	rcx, qword ptr [rsp + 0x30]
	cmp	qword ptr [rax + 0x10], rcx
	jle	.label_1376
	mov	rdi, r13
	mov	qword ptr [rsp + 0x38], r14
	mov	r14, r8
	mov	rsi, qword ptr [rsp + 0x28]
	mov	rbx, rdx
	mov	rdx, qword ptr [rsp + 0x40]
	call	check_subexp_matching_top
	mov	rdx, rbx
	mov	rcx, r14
	mov	dword ptr [rsp + 0x64], eax
	test	eax, eax
	jne	.label_1375
	mov	rdi, r13
	mov	r14, rcx
	mov	rsi, qword ptr [rsp + 0x28]
	mov	rbx, rdx
	call	transit_state_bkref
	mov	rdx, rbx
	mov	r8, r14
	mov	r14, qword ptr [rsp + 0x38]
	mov	dword ptr [rsp + 0x64], eax
	test	eax, eax
	jne	.label_1375
	nop	dword ptr [rax + rax]
.label_1376:
	inc	r12
	add	rbp, 0x28
	cmp	r12, qword ptr [r13 + 0xc8]
	jl	.label_1379
	nop	word ptr cs:[rax + rax]
.label_1374:
	inc	r15
	cmp	r15, qword ptr [r14 + 8]
	jl	.label_1383
.label_1384:
	mov	dword ptr [rsp + 0x64], 0
	jmp	.label_1375
.label_1388:
	mov	rdi, qword ptr [rsp + 0x58]
	call	free
.label_1375:
	mov	eax, dword ptr [rsp + 0x64]
	add	rsp, 0x68
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40fa64
	.globl sub_40fa64
	.type sub_40fa64, @function
sub_40fa64:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40fa70

	.globl extend_buffers
	.type extend_buffers, @function
extend_buffers:
	push	rbx
	mov	ecx, esi
	mov	rbx, rdi
	mov	rsi, qword ptr [rbx + 0x40]
	mov	eax, 0xc
	movabs	rdx, 0xffffffffffffffe
	cmp	rsi, rdx
	ja	.label_1395
	movsxd	rax, ecx
	mov	rcx, qword ptr [rbx + 0x58]
	add	rsi, rsi
	cmp	rcx, rsi
	cmovle	rsi, rcx
	cmp	rax, rsi
	cmovge	rsi, rax
	mov	rdi, rbx
	call	re_string_realloc_buffers
	test	eax, eax
	jne	.label_1395
	mov	rdi, qword ptr [rbx + 0xb8]
	test	rdi, rdi
	je	.label_1392
	mov	rax, qword ptr [rbx + 0x40]
	lea	rsi, [rax*8 + 8]
	call	realloc
	mov	rcx, rax
	test	rcx, rcx
	mov	eax, 0xc
	je	.label_1395
	mov	qword ptr [rbx + 0xb8], rcx
.label_1392:
	cmp	byte ptr [rbx + 0x88], 0
	mov	eax, dword ptr [rbx + 0x90]
	je	.label_1393
	mov	rdi, rbx
	cmp	eax, 2
	jl	.label_1396
	call	build_wcs_upper_buffer
	test	eax, eax
	je	.label_1391
	jmp	.label_1395
.label_1393:
	cmp	eax, 2
	jl	.label_1394
	mov	rdi, rbx
	call	build_wcs_buffer
	jmp	.label_1391
.label_1396:
	call	build_upper_buffer
	jmp	.label_1391
.label_1394:
	cmp	qword ptr [rbx + 0x78], 0
	je	.label_1391
	mov	rdi, rbx
	call	re_string_translate_buffer
.label_1391:
	xor	eax, eax
.label_1395:
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40fb32
	.globl sub_40fb32
	.type sub_40fb32, @function
sub_40fb32:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40fb40

	.globl transit_state
	.type transit_state, @function
transit_state:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	rbx, rsi
	mov	r15, rdi
	test	byte ptr [r14 + 0x68], 0x20
	jne	.label_1397
.label_1402:
	mov	rax, qword ptr [rbx + 0x48]
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 0x48], rcx
	mov	rcx, qword ptr [rbx + 8]
	movzx	r12d, byte ptr [rcx + rax]
.label_1401:
	mov	rax, qword ptr [r14 + 0x58]
	test	rax, rax
	jne	.label_1400
	mov	r13, qword ptr [r14 + 0x60]
	test	r13, r13
	jne	.label_1399
	mov	rdi, qword ptr [rbx + 0x98]
	mov	rsi, r14
	call	build_trtable
	test	al, al
	jne	.label_1401
	mov	dword ptr [r15], 0xc
	xor	eax, eax
	jmp	.label_1398
.label_1400:
	mov	rax, qword ptr [rax + r12*8]
.label_1398:
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
.label_1397:
	mov	rdi, rbx
	mov	rsi, r14
	call	transit_state_mb
	mov	ecx, eax
	mov	dword ptr [r15], ecx
	xor	eax, eax
	test	ecx, ecx
	je	.label_1402
	jmp	.label_1398
.label_1399:
	mov	rsi, qword ptr [rbx + 0x48]
	dec	rsi
	mov	edx, dword ptr [rbx + 0xa0]
	mov	rdi, rbx
	call	re_string_context_at
	and	eax, 1
	shl	rax, 8
	or	rax, r12
	mov	rax, qword ptr [r13 + rax*8]
	jmp	.label_1398
	.section	.text
	.align	32
	#Procedure 0x40fbea
	.globl sub_40fbea
	.type sub_40fbea, @function
sub_40fbea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40fbf0

	.globl merge_state_with_log
	.type merge_state_with_log, @function
merge_state_with_log:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rdx
	mov	r13, rsi
	mov	r15, rdi
	mov	r14, qword ptr [r13 + 0x48]
	mov	r12, qword ptr [r13 + 0x98]
	mov	rax, qword ptr [r13 + 0xb8]
	cmp	r14, qword ptr [r13 + 0xc0]
	jle	.label_1408
	mov	qword ptr [rax + r14*8], rbx
	mov	qword ptr [r13 + 0xc0], r14
	jmp	.label_1406
.label_1408:
	cmp	qword ptr [rax + r14*8], 0
	je	.label_1409
	mov	rax, qword ptr [r13 + 0xb8]
	mov	rax, qword ptr [rax + r14*8]
	mov	rdx, qword ptr [rax + 0x50]
	test	rbx, rbx
	je	.label_1410
	mov	rbp, qword ptr [rbx + 0x50]
	lea	rdi, [rsp]
	mov	rsi, rbp
	call	re_node_set_init_union
	mov	dword ptr [r15], eax
	test	eax, eax
	je	.label_1407
	xor	eax, eax
	jmp	.label_1404
.label_1409:
	mov	qword ptr [rax + r14*8], rbx
	jmp	.label_1406
.label_1410:
	mov	rax, qword ptr [rdx + 0x10]
	mov	qword ptr [rsp + 0x10], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp], xmm0
	xor	ebp, ebp
.label_1407:
	mov	rsi, qword ptr [r13 + 0x48]
	dec	rsi
	mov	edx, dword ptr [r13 + 0xa0]
	mov	rdi, r13
	call	re_string_context_at
	lea	rdx, [rsp]
	mov	rdi, r15
	mov	rsi, r12
	mov	ecx, eax
	call	re_acquire_state_context
	mov	rbx, rax
	mov	rax, qword ptr [r13 + 0xb8]
	mov	qword ptr [rax + r14*8], rbx
	test	rbp, rbp
	je	.label_1406
	mov	rdi, qword ptr [rsp + 0x10]
	call	free
.label_1406:
	test	rbx, rbx
	je	.label_1403
	mov	rax, qword ptr [r12 + 0x98]
	test	rax, rax
	je	.label_1405
	lea	rbp, [rbx + 8]
	mov	rdi, r13
	mov	rsi, rbp
	mov	rdx, r14
	call	check_subexp_matching_top
	mov	ecx, eax
	mov	dword ptr [r15], ecx
	xor	eax, eax
	test	ecx, ecx
	jne	.label_1404
	test	byte ptr [rbx + 0x68], 0x40
	mov	rax, rbx
	je	.label_1404
	mov	rdi, r13
	mov	rsi, rbp
	call	transit_state_bkref
	mov	ecx, eax
	mov	dword ptr [r15], ecx
	xor	eax, eax
	test	ecx, ecx
	jne	.label_1404
	mov	rax, qword ptr [r13 + 0xb8]
	mov	rax, qword ptr [rax + r14*8]
	jmp	.label_1404
.label_1403:
	mov	rax, rbx
	jmp	.label_1404
.label_1405:
	mov	rax, rbx
.label_1404:
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40fd39
	.globl sub_40fd39
	.type sub_40fd39, @function
sub_40fd39:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x40fd40

	.globl find_recover_state
	.type find_recover_state, @function
find_recover_state:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
.label_1412:
	mov	rcx, qword ptr [rbx + 0x48]
	mov	rdx, qword ptr [rbx + 0xc0]
	nop	word ptr cs:[rax + rax]
.label_1413:
	cmp	rcx, rdx
	mov	eax, 0
	jge	.label_1411
	inc	qword ptr [rbx + 0x48]
	mov	rax, qword ptr [rbx + 0xb8]
	cmp	qword ptr [rax + rcx*8 + 8], 0
	lea	rcx, [rcx + 1]
	je	.label_1413
	xor	edx, edx
	mov	rdi, r14
	mov	rsi, rbx
	call	merge_state_with_log
	test	rax, rax
	jne	.label_1411
	mov	ecx, dword ptr [r14]
	test	ecx, ecx
	je	.label_1412
.label_1411:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	32
	#Procedure 0x40fda2
	.globl sub_40fda2
	.type sub_40fda2, @function
sub_40fda2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40fdb0

	.globl match_ctx_add_subtop
	.type match_ctx_add_subtop, @function
match_ctx_add_subtop:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	mov	rbx, rdi
	mov	r12, qword ptr [rbx + 0xf0]
	cmp	qword ptr [rbx + 0xe8], r12
	je	.label_1414
.label_1416:
	mov	edi, 1
	mov	esi, 0x30
	call	rpl_calloc
	mov	rcx, qword ptr [rbx + 0xe8]
	mov	rdx, qword ptr [rbx + 0xf8]
	mov	qword ptr [rdx + rcx*8], rax
	mov	rax, qword ptr [rbx + 0xe8]
	mov	rcx, qword ptr [rbx + 0xf8]
	mov	rcx, qword ptr [rcx + rax*8]
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1415
	mov	qword ptr [rcx + 8], r15
	mov	rax, qword ptr [rbx + 0xe8]
	lea	rcx, [rax + 1]
	mov	qword ptr [rbx + 0xe8], rcx
	mov	rcx, qword ptr [rbx + 0xf8]
	mov	rax, qword ptr [rcx + rax*8]
	mov	qword ptr [rax], r14
	xor	eax, eax
.label_1415:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_1414:
	mov	rdi, qword ptr [rbx + 0xf8]
	mov	rsi, r12
	shl	rsi, 4
	call	realloc
	mov	rcx, rax
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1415
	add	r12, r12
	mov	qword ptr [rbx + 0xf8], rcx
	mov	qword ptr [rbx + 0xf0], r12
	jmp	.label_1416
	.section	.text
	.align	32
	#Procedure 0x40fe76
	.globl sub_40fe76
	.type sub_40fe76, @function
sub_40fe76:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x40fe80

	.globl get_subexp
	.type get_subexp, @function
get_subexp:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x58
	mov	qword ptr [rsp + 0x40], rdx
	mov	qword ptr [rsp + 0x50], rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 8]
	mov	qword ptr [rsp + 0x48], rax
	mov	rax, qword ptr [rbx + 0x98]
	mov	qword ptr [rsp + 0x20], rax
	mov	rsi, rdx
	call	search_cur_bkref_entry
	mov	rbp, rbx
	cmp	rax, -1
	je	.label_1430
	lea	rcx, [rax + rax*4]
	shl	rcx, 3
	add	rcx, qword ptr [rbp + 0xd8]
.label_1431:
	xor	eax, eax
	mov	rdx, qword ptr [rsp + 0x50]
	cmp	qword ptr [rcx], rdx
	je	.label_1424
	cmp	byte ptr [rcx + 0x20], 0
	lea	rcx, [rcx + 0x28]
	jne	.label_1431
.label_1430:
	xor	eax, eax
	cmp	qword ptr [rbp + 0xe8], 0
	jle	.label_1424
	mov	rax, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rsp + 0x50]
	shl	rcx, 4
	mov	rax, qword ptr [rax + rcx]
	mov	qword ptr [rsp + 0x18], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x28], rax
	jmp	.label_1422
.label_1418:
	mov	r13, r15
	jmp	.label_1425
	.section	.text
	.align	32
	#Procedure 0x40ff25
	.globl sub_40ff25
	.type sub_40ff25, @function
sub_40ff25:

	nop	word ptr cs:[rax + rax]
.label_1422:
	mov	rax, qword ptr [rbp + 0xf8]
	mov	rcx, qword ptr [rsp + 0x28]
	mov	rbx, qword ptr [rax + rcx*8]
	mov	rax, qword ptr [rbx + 8]
	mov	rcx, qword ptr [rsp + 0x20]
	mov	rcx, qword ptr [rcx]
	shl	rax, 4
	mov	rdx, qword ptr [rsp + 0x18]
	cmp	qword ptr [rcx + rax], rdx
	jne	.label_1420
	mov	r15, qword ptr [rbx]
	cmp	qword ptr [rbx + 0x20], 0
	jle	.label_1435
	mov	r8, qword ptr [rsp + 0x40]
	xor	r14d, r14d
	jmp	.label_1429
.label_1435:
	mov	r8, qword ptr [rsp + 0x40]
	mov	r13, r15
	xor	r14d, r14d
	jmp	.label_1425
.label_1434:
	cmp	rsi, qword ptr [rbp + 0x58]
	jg	.label_1418
	mov	qword ptr [rsp + 0x38], rdx
	mov	qword ptr [rsp + 0x10], r8
	mov	rdi, rbp
	call	clean_state_log_if_needed
	test	eax, eax
	jne	.label_1424
	mov	qword ptr [rsp + 0x30], r13
	mov	rax, qword ptr [rbp + 8]
	mov	qword ptr [rsp + 0x48], rax
	mov	r8, qword ptr [rsp + 0x10]
	jmp	.label_1426
	.section	.text
	.align	32
	#Procedure 0x40ffb8
	.globl sub_40ffb8
	.type sub_40ffb8, @function
sub_40ffb8:

	nop	dword ptr [rax + rax]
.label_1429:
	mov	rax, qword ptr [rbx + 0x28]
	mov	rdx, qword ptr [rax + r14*8]
	mov	r13, qword ptr [rdx + 8]
	mov	r12, r13
	sub	r12, r15
	jle	.label_1432
	lea	rsi, [r12 + r8]
	cmp	rsi, qword ptr [rbp + 0x30]
	jg	.label_1434
	mov	qword ptr [rsp + 0x38], rdx
	mov	qword ptr [rsp + 0x30], r13
.label_1426:
	mov	rax, qword ptr [rsp + 0x48]
	lea	rdi, [rax + r8]
	lea	rsi, [rax + r15]
	mov	r13, r8
	mov	rdx, r12
	call	memcmp
.label_1887:
	mov	r8, r13
	test	eax, eax
	mov	r13, qword ptr [rsp + 0x30]
	mov	rdx, qword ptr [rsp + 0x38]
	jne	.label_1417
.label_1432:
	mov	r15, r8
	mov	rdi, rbp
	mov	rsi, rbx
	mov	rcx, qword ptr [rsp + 0x50]
	mov	r8, qword ptr [rsp + 0x40]
	call	get_subexp_sub
	cmp	eax, 1
	ja	.label_1424
	mov	r8, r15
	add	r8, r12
	mov	rax, qword ptr [rbp + 8]
	mov	qword ptr [rsp + 0x48], rax
	inc	r14
	cmp	r14, qword ptr [rbx + 0x20]
	mov	r15, r13
	jl	.label_1429
	jmp	.label_1425
.label_1417:
	mov	r13, r15
	nop	word ptr cs:[rax + rax]
.label_1425:
	mov	rcx, r13
	cmp	r14, qword ptr [rbx + 0x20]
	jl	.label_1420
	test	r14, r14
	setg	al
	movzx	r13d, al
	add	r13, rcx
	cmp	r13, qword ptr [rsp + 0x40]
	jg	.label_1420
	jmp	.label_1419
.label_1433:
	cmp	r8, qword ptr [rbp + 0x58]
	jge	.label_1420
	lea	esi, [r8 + 1]
	mov	r14, r8
	mov	rdi, rbp
	call	extend_buffers
	test	eax, eax
	jne	.label_1424
	mov	rax, qword ptr [rbp + 8]
	mov	qword ptr [rsp + 0x48], rax
	mov	r8, r14
	jmp	.label_1428
	.section	.text
	.align	32
	#Procedure 0x4100b6
	.globl sub_4100b6
	.type sub_4100b6, @function
sub_4100b6:

	nop	word ptr cs:[rax + rax]
.label_1419:
	cmp	r13, qword ptr [rbx]
	jle	.label_1421
	cmp	r8, qword ptr [rbp + 0x30]
	jge	.label_1433
.label_1428:
	mov	rcx, qword ptr [rsp + 0x48]
	movzx	eax, byte ptr [rcx + r13 - 1]
	movzx	ecx, byte ptr [rcx + r8]
	cmp	ecx, eax
	jne	.label_1420
	inc	r8
.label_1421:
	mov	r14, rbx
	mov	rax, qword ptr [rbp + 0xb8]
	mov	rsi, qword ptr [rax + r13*8]
	test	rsi, rsi
	je	.label_1436
	mov	r15, r8
	add	rsi, 8
	mov	ecx, 9
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rdx, qword ptr [rsp + 0x18]
	call	find_subexp_node
	mov	rbx, rax
	cmp	rbx, -1
	je	.label_1423
	cmp	qword ptr [r14 + 0x10], 0
	mov	rdi, rbp
	jne	.label_1427
	mov	rsi, r13
	sub	rsi, qword ptr [r14]
	inc	rsi
	mov	rbp, rdi
	mov	edi, 0x18
	call	rpl_calloc
	mov	rdi, rbp
	mov	rcx, rax
	mov	qword ptr [r14 + 0x10], rcx
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1424
.label_1427:
	mov	rsi, qword ptr [r14 + 0x10]
	mov	rcx, qword ptr [r14]
	mov	rdx, qword ptr [r14 + 8]
	mov	dword ptr [rsp], 9
	mov	rbp, rdi
	mov	r8, rbx
	mov	r9, r13
	call	check_arrival
	cmp	eax, 1
	mov	r8, r15
	je	.label_1436
	mov	r15, r8
	test	eax, eax
	mov	rdi, r14
	jne	.label_1424
	mov	rsi, rbx
	mov	rdx, r13
	mov	rbx, rdi
	call	match_ctx_add_sublast
	mov	rsi, rbx
	mov	rdx, rbp
	mov	rcx, rax
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1424
	mov	rbx, rdx
	mov	rdi, rbx
	mov	rdx, rcx
	mov	rcx, qword ptr [rsp + 0x50]
	mov	rbp, rsi
	mov	r8, qword ptr [rsp + 0x40]
	call	get_subexp_sub
	mov	rcx, rbp
	cmp	eax, 1
	ja	.label_1424
	mov	r14, rcx
	mov	rax, qword ptr [rbx + 8]
	mov	qword ptr [rsp + 0x48], rax
	mov	rbp, rbx
.label_1423:
	mov	r8, r15
.label_1436:
	cmp	r13, qword ptr [rsp + 0x40]
	lea	r13, [r13 + 1]
	mov	rbx, r14
	jl	.label_1419
	nop	dword ptr [rax + rax]
.label_1420:
	mov	rax, qword ptr [rsp + 0x28]
	mov	rcx, rax
	inc	rcx
	mov	qword ptr [rsp + 0x28], rcx
	xor	eax, eax
	cmp	rcx, qword ptr [rbp + 0xe8]
	jl	.label_1422
.label_1424:
	add	rsp, 0x58
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x41022e
	.globl sub_41022e
	.type sub_41022e, @function
sub_41022e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x410230

	.globl re_node_set_init_union
	.type re_node_set_init_union, @function
re_node_set_init_union:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rdx
	mov	r12, rsi
	mov	r14, rdi
	test	r12, r12
	je	.label_1444
	mov	rax, qword ptr [r12 + 8]
	test	r15, r15
	je	.label_1440
	test	rax, rax
	jle	.label_1440
	mov	rdi, qword ptr [r15 + 8]
	test	rdi, rdi
	jle	.label_1447
	add	rdi, rax
	mov	qword ptr [r14], rdi
	shl	rdi, 3
	call	malloc
	mov	rcx, rax
	mov	qword ptr [r14 + 0x10], rcx
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1437
	xor	r13d, r13d
	cmp	qword ptr [r12 + 8], 0
	mov	ebx, 0
	mov	ebp, 0
	jle	.label_1438
	xor	edx, edx
	xor	esi, esi
	xor	r13d, r13d
.label_1449:
	mov	rbx, rdx
	mov	rbp, rsi
	nop	word ptr [rax + rax]
.label_1443:
	cmp	rbp, qword ptr [r15 + 8]
	jge	.label_1438
	mov	rax, qword ptr [r12 + 0x10]
	mov	rcx, qword ptr [rax + r13*8]
	mov	rax, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [rax + rbp*8]
	cmp	rcx, rax
	jle	.label_1439
	inc	rbp
	mov	rcx, qword ptr [r14 + 0x10]
	mov	qword ptr [rcx + rbx*8], rax
	inc	rbx
	cmp	r13, qword ptr [r12 + 8]
	jl	.label_1443
	jmp	.label_1438
.label_1439:
	sete	sil
	inc	r13
	mov	rdx, qword ptr [r14 + 0x10]
	mov	qword ptr [rdx + rbx*8], rcx
	lea	rdx, [rbx + 1]
	movzx	esi, sil
	add	rsi, rbp
	cmp	r13, qword ptr [r12 + 8]
	jl	.label_1449
	cmp	rcx, rax
	sete	al
	inc	rbx
	movzx	eax, al
	add	rbp, rax
.label_1438:
	mov	rdx, qword ptr [r12 + 8]
	sub	rdx, r13
	jle	.label_1442
	lea	rdi, [rbx*8]
	add	rdi, qword ptr [r14 + 0x10]
	lea	rsi, [r13*8]
	add	rsi, qword ptr [r12 + 0x10]
	shl	rdx, 3
	call	memcpy
	sub	rbx, r13
	add	rbx, qword ptr [r12 + 8]
	jmp	.label_1445
.label_1447:
	mov	rax, qword ptr [r12 + 8]
.label_1440:
	test	rax, rax
	jle	.label_1444
	mov	rdi, r14
	mov	rsi, r12
	jmp	.label_1446
.label_1444:
	test	r15, r15
	je	.label_1448
	cmp	qword ptr [r15 + 8], 0
	jle	.label_1448
	mov	rdi, r14
	mov	rsi, r15
.label_1446:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	re_node_set_init_copy
.label_1448:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14], xmm0
	mov	qword ptr [r14 + 0x10], 0
	jmp	.label_1441
.label_1442:
	mov	rdx, qword ptr [r15 + 8]
	sub	rdx, rbp
	jle	.label_1445
	lea	rdi, [rbx*8]
	add	rdi, qword ptr [r14 + 0x10]
	lea	rsi, [rbp*8]
	add	rsi, qword ptr [r15 + 0x10]
	shl	rdx, 3
	call	memcpy
	sub	rbx, rbp
	add	rbx, qword ptr [r15 + 8]
.label_1445:
	mov	qword ptr [r14 + 8], rbx
.label_1441:
	xor	eax, eax
.label_1437:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4103e7
	.globl sub_4103e7
	.type sub_4103e7, @function
sub_4103e7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4103f0

	.globl search_cur_bkref_entry
	.type search_cur_bkref_entry, @function
search_cur_bkref_entry:
	mov	r8, qword ptr [rdi + 0xc8]
	xor	eax, eax
	test	r8, r8
	jle	.label_1450
	mov	r9, qword ptr [rdi + 0xd8]
	xor	eax, eax
	mov	r11, r8
	nop	word ptr [rax + rax]
.label_1452:
	lea	r10, [rax + r11]
	mov	rdx, r10
	shr	rdx, 0x3f
	add	rdx, r10
	sar	rdx, 1
	lea	rcx, [rdx + rdx*4]
	cmp	qword ptr [r9 + rcx*8 + 8], rsi
	cmovge	r11, rdx
	lea	rcx, [rdx + 1]
	cmovl	rax, rcx
	cmp	rax, r11
	jl	.label_1452
.label_1450:
	cmp	rax, r8
	jge	.label_1453
	mov	rcx, qword ptr [rdi + 0xd8]
	lea	rdx, [rax + rax*4]
	cmp	qword ptr [rcx + rdx*8 + 8], rsi
	je	.label_1451
.label_1453:
	mov	rax, -1
.label_1451:
	ret	
	.section	.text
	.align	32
	#Procedure 0x41045a
	.globl sub_41045a
	.type sub_41045a, @function
sub_41045a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x410460

	.globl clean_state_log_if_needed
	.type clean_state_log_if_needed, @function
clean_state_log_if_needed:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x40]
	mov	r15, qword ptr [rbx + 0xc0]
	cmp	rax, r14
	jg	.label_1454
	cmp	rax, qword ptr [rbx + 0x58]
	jl	.label_1457
.label_1454:
	mov	rax, qword ptr [rbx + 0x30]
	cmp	rax, r14
	jg	.label_1455
	cmp	rax, qword ptr [rbx + 0x58]
	jge	.label_1455
.label_1457:
	lea	esi, [r14 + 1]
	mov	rdi, rbx
	call	extend_buffers
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_1456
.label_1455:
	xor	ebp, ebp
	cmp	r15, r14
	jge	.label_1456
	mov	rax, qword ptr [rbx + 0xb8]
	lea	rdi, [rax + r15*8 + 8]
	mov	rdx, r14
	sub	rdx, r15
	shl	rdx, 3
	xor	ebp, ebp
	xor	esi, esi
	call	memset
	mov	qword ptr [rbx + 0xc0], r14
.label_1456:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4104de
	.globl sub_4104de
	.type sub_4104de, @function
sub_4104de:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4104e0

	.globl get_subexp_sub
	.type get_subexp_sub, @function
get_subexp_sub:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x10
	mov	r12, r8
	mov	r13, rcx
	mov	rbx, rdx
	mov	r15, rsi
	mov	r14, rdi
	lea	rsi, [rbx + 0x10]
	mov	rdx, qword ptr [rbx]
	mov	rcx, qword ptr [rbx + 8]
	mov	dword ptr [rsp], 8
	mov	r8, r13
	mov	r9, r12
	call	check_arrival
	test	eax, eax
	jne	.label_1458
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [rbx + 8]
	mov	rdi, r14
	mov	rsi, r13
	mov	rdx, r12
	call	match_ctx_add_entry
	test	eax, eax
	jne	.label_1458
	add	r12, qword ptr [rbx + 8]
	sub	r12, qword ptr [r15]
	mov	rdi, r14
	mov	rsi, r12
	add	rsp, 0x10
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	jmp	clean_state_log_if_needed
.label_1458:
	add	rsp, 0x10
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x410563
	.globl sub_410563
	.type sub_410563, @function
sub_410563:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x410570

	.globl find_subexp_node
	.type find_subexp_node, @function
find_subexp_node:
	cmp	qword ptr [rsi + 8], 0
	jle	.label_1459
	mov	r8, qword ptr [rsi + 0x10]
	mov	r9, qword ptr [rdi]
	xor	r11d, r11d
	nop	word ptr cs:[rax + rax]
.label_1461:
	mov	rax, qword ptr [r8 + r11*8]
	mov	r10, rax
	shl	r10, 4
	movzx	edi, byte ptr [r9 + r10 + 8]
	cmp	edi, ecx
	jne	.label_1460
	cmp	qword ptr [r9 + r10], rdx
	je	.label_1462
.label_1460:
	inc	r11
	cmp	r11, qword ptr [rsi + 8]
	jl	.label_1461
.label_1459:
	mov	rax, -1
.label_1462:
	ret	
	.section	.text
	.align	32
	#Procedure 0x4105bc
	.globl sub_4105bc
	.type sub_4105bc, @function
sub_4105bc:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4105c0

	.globl check_arrival
	.type check_arrival, @function
check_arrival:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x78
	mov	qword ptr [rsp + 0x38], r9
	mov	qword ptr [rsp + 8], r8
	mov	r13, rcx
	mov	r12, rdx
	mov	rax, qword ptr [rdi + 0x98]
	mov	qword ptr [rsp + 0x40], rax
	mov	dword ptr [rsp + 0x74], 0
	mov	rax, qword ptr [rax]
	mov	rcx, r12
	shl	rcx, 4
	mov	rax, qword ptr [rax + rcx]
	mov	qword ptr [rsp + 0x28], rax
	mov	rbp, qword ptr [rsi + 8]
	movsxd	rax, dword ptr [rdi + 0xe0]
	lea	rcx, [rax + r9]
	cmp	rbp, rcx
	jle	.label_1474
.label_1482:
	mov	qword ptr [rsp + 0x20], rsi
	mov	r15d, dword ptr [rsp + 0xb0]
	mov	r14, qword ptr [rsi]
	mov	rax, qword ptr [rsi + 0x10]
	test	r14, r14
	cmove	r14, r13
	mov	rcx, qword ptr [rdi + 0x48]
	mov	qword ptr [rsp + 0x18], rcx
	mov	rcx, qword ptr [rdi + 0xb8]
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rdi + 0xb8], rax
	mov	qword ptr [rdi + 0x48], r14
	lea	rsi, [r14 - 1]
	mov	edx, dword ptr [rdi + 0xa0]
	mov	rbx, rdi
	call	re_string_context_at
	cmp	r14, r13
	jne	.label_1481
	mov	r13d, eax
	mov	ebp, r15d
	lea	rdi, [rsp + 0x50]
	mov	rsi, r12
	call	re_node_set_init_1
	mov	r15d, eax
	mov	dword ptr [rsp + 0x74], r15d
	test	r15d, r15d
	jne	.label_1463
	lea	rsi, [rsp + 0x50]
	mov	rdi, qword ptr [rsp + 0x40]
	mov	rdx, qword ptr [rsp + 0x28]
	mov	r15d, ebp
	mov	ecx, r15d
	call	check_arrival_expand_ecl
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	mov	rcx, rbx
	je	.label_1470
	jmp	.label_1465
.label_1481:
	mov	rcx, qword ptr [rbx + 0xb8]
	mov	rbp, qword ptr [rcx + r14*8]
	test	rbp, rbp
	mov	rcx, rbx
	je	.label_1475
	mov	rbx, rcx
	mov	r12d, r15d
	test	byte ptr [rbp + 0x68], 0x40
	jne	.label_1477
	mov	r13d, eax
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x50], xmm0
	mov	qword ptr [rsp + 0x60], 0
	jmp	.label_1479
.label_1475:
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x50], xmm0
	mov	qword ptr [rsp + 0x60], 0
	xor	ebp, ebp
	jmp	.label_1471
.label_1477:
	mov	r13d, eax
	lea	rsi, [rbp + 8]
	lea	rdi, [rsp + 0x50]
	call	re_node_set_init_copy
	mov	r15d, eax
	mov	dword ptr [rsp + 0x74], r15d
	test	r15d, r15d
	jne	.label_1463
.label_1479:
	test	byte ptr [rbp + 0x68], 0x40
	mov	r15d, r12d
	mov	rcx, rbx
	je	.label_1471
.label_1470:
	cmp	qword ptr [rsp + 0x58], 0
	je	.label_1480
	lea	rsi, [rsp + 0x50]
	mov	rbx, rcx
	mov	rdi, rbx
	mov	rdx, r14
	mov	rcx, qword ptr [rsp + 0x28]
	mov	r8d, r15d
	call	expand_bkref_cache
	mov	rcx, rbx
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	jne	.label_1465
.label_1480:
	mov	rbx, rcx
	lea	rdi, [rsp + 0x74]
	lea	rdx, [rsp + 0x50]
	mov	rsi, qword ptr [rsp + 0x40]
	mov	ecx, r13d
	call	re_acquire_state_context
	mov	rbp, rax
	test	rbp, rbp
	jne	.label_1466
	mov	eax, dword ptr [rsp + 0x74]
	test	eax, eax
	jne	.label_1465
.label_1466:
	mov	rcx, rbx
	mov	rax, qword ptr [rcx + 0xb8]
	mov	qword ptr [rax + r14*8], rbp
.label_1471:
	cmp	r14, qword ptr [rsp + 0x38]
	jge	.label_1468
	inc	r14
	lea	rbx, [rsp + 0x50]
	mov	r12, r14
	xor	r13d, r13d
.label_1476:
	lea	r14, [r12 - 1]
	movsxd	rax, dword ptr [rcx + 0xe0]
	cmp	r13, rax
	jg	.label_1468
	mov	qword ptr [rsp + 0x58], 0
	mov	rax, qword ptr [rcx + 0xb8]
	mov	qword ptr [rsp + 0x48], rcx
	mov	rsi, qword ptr [rax + r12*8]
	test	rsi, rsi
	je	.label_1478
	add	rsi, 8
	mov	rdi, rbx
	call	re_node_set_merge
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	jne	.label_1465
.label_1478:
	test	rbp, rbp
	je	.label_1469
	add	rbp, 0x20
	mov	rdi, qword ptr [rsp + 0x48]
	mov	rsi, r14
	mov	rdx, rbp
	mov	rcx, rbx
	call	check_arrival_add_next_nodes
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	jne	.label_1465
.label_1469:
	mov	qword ptr [rsp + 0x30], r14
	cmp	qword ptr [rsp + 0x58], 0
	mov	r14, rbx
	je	.label_1472
	mov	rdi, qword ptr [rsp + 0x40]
	mov	rsi, r14
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rdx, rbp
	mov	ebx, dword ptr [rsp + 0xb0]
	mov	ecx, ebx
	call	check_arrival_expand_ecl
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	jne	.label_1465
	mov	rdi, qword ptr [rsp + 0x48]
	mov	rsi, r14
	mov	rdx, r12
	mov	rcx, rbp
	mov	r8d, ebx
	call	expand_bkref_cache
	mov	dword ptr [rsp + 0x74], eax
	test	eax, eax
	jne	.label_1465
.label_1472:
	mov	r15, qword ptr [rsp + 0x48]
	mov	edx, dword ptr [r15 + 0xa0]
	mov	rdi, r15
	mov	rsi, qword ptr [rsp + 0x30]
	call	re_string_context_at
	lea	rdi, [rsp + 0x74]
	mov	rsi, qword ptr [rsp + 0x40]
	mov	rdx, r14
	mov	ecx, eax
	call	re_acquire_state_context
	mov	rbp, rax
	test	rbp, rbp
	jne	.label_1473
	mov	eax, dword ptr [rsp + 0x74]
	test	eax, eax
	jne	.label_1465
.label_1473:
	mov	rbx, r14
	inc	r13
	test	rbp, rbp
	mov	rcx, r15
	mov	rax, qword ptr [rcx + 0xb8]
	mov	qword ptr [rax + r12*8], rbp
	mov	eax, 0
	cmovne	r13, rax
	cmp	r12, qword ptr [rsp + 0x38]
	lea	r12, [r12 + 1]
	jl	.label_1476
	mov	rbx, rcx
	dec	r12
	mov	r14, r12
	jmp	.label_1464
.label_1468:
	mov	rbx, rcx
.label_1464:
	mov	r15, qword ptr [rsp + 0x18]
	mov	rbp, qword ptr [rsp + 0x10]
	mov	rdi, qword ptr [rsp + 0x60]
	call	free
	mov	rax, qword ptr [rbx + 0xb8]
	mov	rcx, qword ptr [rsp + 0x38]
	mov	rdi, qword ptr [rax + rcx*8]
	test	rdi, rdi
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rax], r14
	mov	qword ptr [rbx + 0xb8], rbp
	mov	qword ptr [rbx + 0x48], r15
	je	.label_1467
	add	rdi, 8
	mov	rsi, qword ptr [rsp + 8]
	call	re_node_set_contains
	xor	r15d, r15d
	test	rax, rax
	jne	.label_1463
.label_1467:
	mov	r15d, 1
	jmp	.label_1463
.label_1465:
	mov	rdi, qword ptr [rsp + 0x60]
	call	free
	mov	r15d, dword ptr [rsp + 0x74]
.label_1463:
	mov	eax, r15d
	add	rsp, 0x78
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1474:
	movabs	rdx, 0x7fffffffffffffff
	sub	rdx, rbp
	mov	r15d, 0xc
	cmp	rdx, rcx
	jle	.label_1463
	mov	rcx, qword ptr [rsp + 0x38]
	lea	r14, [rax + rcx + 1]
	lea	rbx, [r14 + rbp]
	mov	rax, rbx
	shr	rax, 0x3d
	jne	.label_1463
	mov	qword ptr [rsp + 0x48], rdi
	mov	rdi, qword ptr [rsi + 0x10]
	mov	qword ptr [rsp + 0x20], rsi
	lea	rsi, [rbx*8]
	call	realloc
	test	rax, rax
	je	.label_1463
	mov	r15, qword ptr [rsp + 0x20]
	mov	qword ptr [r15 + 0x10], rax
	mov	qword ptr [r15 + 8], rbx
	lea	rdi, [rax + rbp*8]
	shl	r14, 3
	xor	esi, esi
	mov	rdx, r14
	call	memset
	mov	rsi, r15
	mov	rdi, qword ptr [rsp + 0x48]
	jmp	.label_1482
	.section	.text
	.align	32
	#Procedure 0x410a07
	.globl sub_410a07
	.type sub_410a07, @function
sub_410a07:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x410a10

	.globl match_ctx_add_sublast
	.type match_ctx_add_sublast, @function
match_ctx_add_sublast:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	mov	rbx, rdi
	mov	r12, qword ptr [rbx + 0x18]
	cmp	qword ptr [rbx + 0x20], r12
	je	.label_1483
.label_1484:
	mov	edi, 1
	mov	esi, 0x28
	call	rpl_calloc
	test	rax, rax
	je	.label_1485
	mov	rcx, qword ptr [rbx + 0x20]
	mov	rdx, qword ptr [rbx + 0x28]
	mov	qword ptr [rdx + rcx*8], rax
	mov	qword ptr [rax], r15
	mov	qword ptr [rax + 8], r14
	inc	qword ptr [rbx + 0x20]
.label_1485:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_1483:
	lea	rax, [r12 + r12]
	mov	rdi, qword ptr [rbx + 0x28]
	lea	rsi, [rax*8 + 8]
	call	realloc
	mov	rcx, rax
	xor	eax, eax
	test	rcx, rcx
	je	.label_1485
	lea	rax, [r12 + r12 + 1]
	mov	qword ptr [rbx + 0x28], rcx
	mov	qword ptr [rbx + 0x18], rax
	jmp	.label_1484
	.section	.text
	.align	32
	#Procedure 0x410a90

	.globl match_ctx_add_entry
	.type match_ctx_add_entry, @function
match_ctx_add_entry:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, r8
	mov	r15, rcx
	mov	r12, rdx
	mov	r13, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0xc8]
	mov	rcx, qword ptr [rbx + 0xd0]
	cmp	rax, rcx
	jl	.label_1488
	mov	rdi, qword ptr [rbx + 0xd8]
	shl	rcx, 4
	lea	rsi, [rcx + rcx*4]
	call	realloc
	test	rax, rax
	je	.label_1489
	mov	qword ptr [rbx + 0xd8], rax
	mov	rcx, qword ptr [rbx + 0xc8]
	mov	rbp, qword ptr [rbx + 0xd0]
	lea	rcx, [rcx + rcx*4]
	lea	rdi, [rax + rcx*8]
	lea	rax, [rbp*8]
	lea	rdx, [rax + rax*4]
	xor	esi, esi
	call	memset
	add	rbp, rbp
	mov	qword ptr [rbx + 0xd0], rbp
	mov	rax, qword ptr [rbx + 0xc8]
.label_1488:
	test	rax, rax
	jle	.label_1486
	dec	rax
	mov	rcx, qword ptr [rbx + 0xd8]
	lea	rax, [rax + rax*4]
	cmp	qword ptr [rcx + rax*8 + 8], r12
	jne	.label_1486
	mov	byte ptr [rcx + rax*8 + 0x20], 1
.label_1486:
	mov	rax, qword ptr [rbx + 0xc8]
	mov	rcx, qword ptr [rbx + 0xd8]
	lea	rax, [rax + rax*4]
	mov	qword ptr [rcx + rax*8], r13
	mov	rax, qword ptr [rbx + 0xc8]
	mov	rcx, qword ptr [rbx + 0xd8]
	lea	rax, [rax + rax*4]
	mov	qword ptr [rcx + rax*8 + 8], r12
	mov	rax, qword ptr [rbx + 0xc8]
	mov	rcx, qword ptr [rbx + 0xd8]
	lea	rax, [rax + rax*4]
	mov	qword ptr [rcx + rax*8 + 0x10], r15
	mov	rax, qword ptr [rbx + 0xc8]
	mov	rcx, qword ptr [rbx + 0xd8]
	lea	rax, [rax + rax*4]
	mov	qword ptr [rcx + rax*8 + 0x18], r14
	xor	eax, eax
	sub	r14, r15
	mov	cx, 0xffff
	cmovne	cx, ax
	mov	rdx, qword ptr [rbx + 0xc8]
	mov	rsi, qword ptr [rbx + 0xd8]
	lea	rdx, [rdx + rdx*4]
	mov	word ptr [rsi + rdx*8 + 0x22], cx
	mov	rcx, qword ptr [rbx + 0xc8]
	lea	rdx, [rcx + 1]
	mov	qword ptr [rbx + 0xc8], rdx
	mov	rdx, qword ptr [rbx + 0xd8]
	lea	rcx, [rcx + rcx*4]
	mov	byte ptr [rdx + rcx*8 + 0x20], 0
	movsxd	rcx, dword ptr [rbx + 0xe0]
	cmp	rcx, r14
	jge	.label_1487
	mov	dword ptr [rbx + 0xe0], r14d
.label_1487:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1489:
	mov	rdi, qword ptr [rbx + 0xd8]
	call	free
	mov	eax, 0xc
	jmp	.label_1487
	.section	.text
	.align	32
	#Procedure 0x410c10

	.globl check_arrival_expand_ecl
	.type check_arrival_expand_ecl, @function
check_arrival_expand_ecl:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r14d, ecx
	mov	r13, rdx
	mov	rbp, rsi
	mov	qword ptr [rsp + 8], rbp
	mov	rbx, rdi
	mov	rsi, qword ptr [rbp + 8]
	lea	rdi, [rsp + 0x10]
	call	re_node_set_alloc
	mov	r12d, eax
	test	r12d, r12d
	jne	.label_1494
	mov	r15d, r14d
	cmp	qword ptr [rbp + 8], 0
	jle	.label_1492
	xor	r14d, r14d
	nop	word ptr [rax + rax]
.label_1495:
	mov	rax, qword ptr [rbp + 0x10]
	mov	r12, qword ptr [rax + r14*8]
	mov	rax, qword ptr [rbx + 0x30]
	lea	rcx, [r12 + r12*2]
	lea	rbp, [rax + rcx*8]
	mov	rdi, rbx
	mov	rsi, rbp
	mov	rdx, r13
	mov	ecx, r15d
	call	find_subexp_node
	cmp	rax, -1
	je	.label_1490
	mov	rdi, rbx
	lea	rsi, [rsp + 0x10]
	mov	rdx, r12
	mov	rcx, r13
	mov	r8d, r15d
	call	check_arrival_expand_ecl_sub
	jmp	.label_1491
	.section	.text
	.align	32
	#Procedure 0x410ca3
	.globl sub_410ca3
	.type sub_410ca3, @function
sub_410ca3:

	nop	word ptr cs:[rax + rax]
.label_1490:
	lea	rdi, [rsp + 0x10]
	mov	rsi, rbp
	call	re_node_set_merge
.label_1491:
	mov	r12d, eax
	test	r12d, r12d
	jne	.label_1493
	inc	r14
	mov	rbp, qword ptr [rsp + 8]
	cmp	r14, qword ptr [rbp + 8]
	jl	.label_1495
.label_1492:
	mov	rdi, qword ptr [rbp + 0x10]
	call	free
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rbp + 0x10], rax
	movups	xmm0, xmmword ptr [rsp + 0x10]
	movups	xmmword ptr [rbp], xmm0
	xor	r12d, r12d
	jmp	.label_1494
.label_1493:
	mov	rdi, qword ptr [rsp + 0x20]
	call	free
.label_1494:
	mov	eax, r12d
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x410d0f
	.globl sub_410d0f
	.type sub_410d0f, @function
sub_410d0f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x410d10

	.globl expand_bkref_cache
	.type expand_bkref_cache, @function
expand_bkref_cache:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x68
	mov	dword ptr [rsp + 0x18], r8d
	mov	qword ptr [rsp + 0x10], rcx
	mov	qword ptr [rsp + 0x40], rdx
	mov	r13, rsi
	mov	qword ptr [rsp + 0x28], r13
	mov	qword ptr [rsp + 0x38], rdi
	mov	r14, qword ptr [rdi + 0x98]
	mov	qword ptr [rsp + 0x20], r14
	mov	rsi, rdx
	call	search_cur_bkref_entry
	cmp	rax, -1
	je	.label_1502
	lea	rcx, [rax + rax*4]
	mov	qword ptr [rsp + 8], rcx
	lea	r12, [rsp + 0x48]
.label_1510:
	mov	dword ptr [rsp + 0x34], eax
	mov	rax, qword ptr [rsp + 0x38]
	mov	rax, qword ptr [rax + 0xd8]
	lea	r15, [rax + rcx*8 + 0x20]
	nop	dword ptr [rax + rax]
.label_1499:
	mov	rsi, qword ptr [r15 - 0x20]
	mov	rdi, r13
	call	re_node_set_contains
	test	rax, rax
	je	.label_1496
	mov	rbp, qword ptr [r15 - 8]
	mov	rax, qword ptr [rsp + 0x40]
	add	rbp, rax
	sub	rbp, qword ptr [r15 - 0x10]
	cmp	rbp, rax
	jne	.label_1504
	mov	rax, qword ptr [r15 - 0x20]
	mov	rcx, qword ptr [r14 + 0x28]
	lea	rax, [rax + rax*2]
	mov	rax, qword ptr [rcx + rax*8 + 0x10]
	mov	rbx, qword ptr [rax]
	mov	rdi, r13
	mov	rsi, rbx
	call	re_node_set_contains
	mov	ecx, 4
	test	rax, rax
	je	.label_1498
	mov	rbx, r14
	jmp	.label_1500
	.section	.text
	.align	32
	#Procedure 0x410ddb
	.globl sub_410ddb
	.type sub_410ddb, @function
sub_410ddb:

	nop	dword ptr [rax + rax]
.label_1504:
	mov	rax, qword ptr [r15 - 0x20]
	mov	rcx, qword ptr [r14 + 0x18]
	mov	r14, qword ptr [rcx + rax*8]
	mov	rax, qword ptr [rsp + 0x38]
	mov	rax, qword ptr [rax + 0xb8]
	mov	rbx, qword ptr [rax + rbp*8]
	test	rbx, rbx
	je	.label_1509
	add	rbx, 8
	mov	rdi, rbx
	mov	rsi, r14
	call	re_node_set_contains
	mov	ecx, 4
	test	rax, rax
	je	.label_1503
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_1501
.label_1498:
	mov	rdi, r12
	mov	rsi, rbx
	call	re_node_set_init_1
	mov	rdi, r14
	mov	r14d, eax
	mov	dword ptr [rsp + 0x64], r14d
	mov	rbx, rdi
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x10]
	mov	ecx, dword ptr [rsp + 0x18]
	call	check_arrival_expand_ecl
	mov	dword ptr [rsp + 0x1c], eax
	mov	rdi, r13
	mov	rsi, r12
	call	re_node_set_merge
	mov	ebp, eax
	mov	rdi, qword ptr [rsp + 0x58]
	call	free
	mov	edx, r14d
	mov	r14d, dword ptr [rsp + 0x1c]
	mov	eax, ebp
	or	eax, r14d
	mov	ecx, 2
	or	eax, edx
	jne	.label_1511
.label_1506:
	mov	r14, rbx
	jmp	.label_1500
.label_1509:
	mov	rdi, r12
	mov	rsi, r14
	call	re_node_set_init_1
	mov	dword ptr [rsp + 0x64], eax
	test	eax, eax
	je	.label_1508
	mov	ecx, 1
	mov	dword ptr [rsp + 0x34], eax
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_1501
.label_1503:
	mov	rdi, r12
	mov	rsi, rbx
	call	re_node_set_init_copy
	mov	ebx, eax
	mov	dword ptr [rsp + 0x64], ebx
	mov	rdi, r12
	mov	rsi, r14
	call	re_node_set_insert
	test	ebx, ebx
	jne	.label_1507
	xor	al, 1
	jne	.label_1507
.label_1508:
	lea	rdi, [rsp + 0x64]
	mov	r14, qword ptr [rsp + 0x20]
	mov	rsi, r14
	mov	rdx, r12
	call	re_acquire_state
	mov	rbx, qword ptr [rsp + 0x38]
	mov	rcx, qword ptr [rbx + 0xb8]
	mov	qword ptr [rcx + rbp*8], rax
	mov	rdi, qword ptr [rsp + 0x58]
	call	free
	mov	rax, qword ptr [rbx + 0xb8]
	cmp	qword ptr [rax + rbp*8], 0
	sete	al
	mov	edx, dword ptr [rsp + 0x64]
	test	edx, edx
	setne	cl
	and	cl, al
	movzx	ecx, cl
	mov	eax, dword ptr [rsp + 0x34]
	cmovne	eax, edx
	mov	dword ptr [rsp + 0x34], eax
.label_1501:
	mov	r13, qword ptr [rsp + 0x28]
.label_1500:
	test	ecx, ecx
	je	.label_1496
	cmp	ecx, 4
	jne	.label_1505
.label_1496:
	cmp	byte ptr [r15], 0
	lea	r15, [r15 + 0x28]
	jne	.label_1499
	jmp	.label_1502
.label_1511:
	test	r14d, r14d
	cmovne	ebp, r14d
	test	edx, edx
	cmovne	ebp, edx
	mov	dword ptr [rsp + 0x64], ebp
	mov	ecx, 1
	mov	dword ptr [rsp + 0x34], ebp
	jmp	.label_1506
.label_1507:
	mov	rdi, qword ptr [rsp + 0x58]
	call	free
	mov	ecx, dword ptr [rsp + 0x64]
	test	ecx, ecx
	mov	eax, 0xc
	cmove	ecx, eax
	mov	dword ptr [rsp + 0x34], ecx
	mov	dword ptr [rsp + 0x64], ecx
	mov	ecx, 1
	mov	r14, qword ptr [rsp + 0x20]
	jmp	.label_1501
	.section	.text
	.align	32
	#Procedure 0x410fa4
	.globl sub_410fa4
	.type sub_410fa4, @function
sub_410fa4:

	nop	word ptr cs:[rax + rax]
.label_1505:
	cmp	ecx, 2
	mov	rcx, qword ptr [rsp + 8]
	mov	eax, dword ptr [rsp + 0x34]
	je	.label_1510
	jmp	.label_1497
.label_1502:
	xor	eax, eax
.label_1497:
	add	rsp, 0x68
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x410fd5
	.globl sub_410fd5
	.type sub_410fd5, @function
sub_410fd5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x410fe0

	.globl check_arrival_add_next_nodes
	.type check_arrival_add_next_nodes, @function
check_arrival_add_next_nodes:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x58
	mov	qword ptr [rsp + 0x28], rcx
	mov	rbp, rdx
	mov	qword ptr [rsp + 0x20], rbp
	mov	rcx, rsi
	mov	qword ptr [rsp + 0x18], rcx
	mov	r12, rdi
	mov	qword ptr [rsp + 0x10], r12
	mov	r14, qword ptr [r12 + 0x98]
	mov	dword ptr [rsp + 0x54], 0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x30], xmm0
	mov	qword ptr [rsp + 0x40], 0
	cmp	qword ptr [rbp + 8], 0
	jle	.label_1518
	xor	r15d, r15d
	nop	word ptr [rax + rax]
.label_1519:
	mov	rax, qword ptr [rbp + 0x10]
	mov	r13, qword ptr [rax + r15*8]
	mov	rax, qword ptr [r14]
	mov	rbx, r13
	shl	rbx, 4
	test	byte ptr [rax + rbx + 0xa], 0x10
	je	.label_1512
	mov	rdi, r14
	mov	rsi, r13
	mov	rdx, r12
	mov	rbp, rcx
	call	check_node_accept_bytes
	cmp	eax, 2
	jl	.label_1520
	mov	rcx, qword ptr [r14 + 0x18]
	mov	rcx, qword ptr [rcx + r13*8]
	movsxd	rbx, eax
	add	rbx, rbp
	mov	rax, qword ptr [r12 + 0xb8]
	mov	rsi, qword ptr [rax + rbx*8]
	mov	qword ptr [rsp + 0x38], 0
	test	rsi, rsi
	lea	rbp, [rsp + 0x30]
	je	.label_1521
	add	rsi, 8
	mov	rdi, rbp
	mov	r12, rcx
	call	re_node_set_merge
	mov	rcx, r12
	mov	dword ptr [rsp + 0x54], eax
	test	eax, eax
	jne	.label_1517
.label_1521:
	mov	rdi, rbp
	mov	rsi, rcx
	call	re_node_set_insert
	test	al, al
	je	.label_1516
	lea	rdi, [rsp + 0x54]
	mov	rsi, r14
	mov	rdx, rbp
	call	re_acquire_state
	mov	r12, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [r12 + 0xb8]
	mov	qword ptr [rcx + rbx*8], rax
	mov	rax, qword ptr [r12 + 0xb8]
	cmp	qword ptr [rax + rbx*8], 0
	mov	rcx, qword ptr [rsp + 0x18]
	mov	rbp, qword ptr [rsp + 0x20]
	jne	.label_1513
	mov	eax, dword ptr [rsp + 0x54]
	test	eax, eax
	je	.label_1513
	jmp	.label_1517
	.section	.text
	.align	32
	#Procedure 0x411119
	.globl sub_411119
	.type sub_411119, @function
sub_411119:

	nop	dword ptr [rax]
.label_1520:
	test	eax, eax
	mov	rcx, rbp
	mov	rbp, qword ptr [rsp + 0x20]
	jne	.label_1513
	nop	dword ptr [rax]
.label_1512:
	add	rbx, qword ptr [r14]
	mov	rdi, r12
	mov	rsi, rbx
	mov	rdx, rcx
	mov	rbx, rcx
	call	check_node_accept
	mov	rcx, rbx
	test	al, al
	je	.label_1514
.label_1513:
	mov	rax, qword ptr [r14 + 0x18]
	mov	rsi, qword ptr [rax + r13*8]
	mov	rdi, qword ptr [rsp + 0x28]
	mov	rbx, rcx
	call	re_node_set_insert
	mov	rcx, rbx
	test	al, al
	je	.label_1516
.label_1514:
	inc	r15
	cmp	r15, qword ptr [rbp + 8]
	jl	.label_1519
.label_1518:
	mov	rdi, qword ptr [rsp + 0x40]
	call	free
	xor	eax, eax
	jmp	.label_1515
.label_1516:
	mov	rdi, qword ptr [rsp + 0x40]
	call	free
	mov	eax, 0xc
	jmp	.label_1515
.label_1517:
	mov	rdi, qword ptr [rsp + 0x40]
	call	free
	mov	eax, dword ptr [rsp + 0x54]
.label_1515:
	add	rsp, 0x58
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4111b0

	.globl check_arrival_expand_ecl_sub
	.type check_arrival_expand_ecl_sub, @function
check_arrival_expand_ecl_sub:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r15d, r8d
	mov	r14, rcx
	mov	rbx, rdx
	mov	r12, rsi
	mov	rbp, rdi
	jmp	.label_1526
	.section	.text
	.align	32
	#Procedure 0x4111c9
	.globl sub_4111c9
	.type sub_4111c9, @function
sub_4111c9:

	nop	dword ptr [rax]
.label_1527:
	mov	rax, qword ptr [rbp + 0x28]
	mov	rax, qword ptr [rax + rbx*8 + 0x10]
	mov	rbx, qword ptr [rax]
.label_1526:
	mov	rdi, r12
	mov	rsi, rbx
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1523
	mov	rax, qword ptr [rbp]
	mov	rcx, rbx
	shl	rcx, 4
	movzx	edx, byte ptr [rax + rcx + 8]
	cmp	edx, r15d
	jne	.label_1522
	cmp	qword ptr [rax + rcx], r14
	je	.label_1524
.label_1522:
	mov	rdi, r12
	mov	rsi, rbx
	call	re_node_set_insert
	mov	cl, al
	mov	eax, 0xc
	test	cl, cl
	je	.label_1525
	mov	rax, qword ptr [rbp + 0x28]
	lea	rbx, [rbx + rbx*2]
	mov	rcx, qword ptr [rax + rbx*8 + 8]
	cmp	rcx, 2
	je	.label_1528
	test	rcx, rcx
	jne	.label_1527
	jmp	.label_1523
	.section	.text
	.align	32
	#Procedure 0x41123b
	.globl sub_41123b
	.type sub_41123b, @function
sub_41123b:

	nop	dword ptr [rax + rax]
.label_1528:
	mov	rax, qword ptr [rax + rbx*8 + 0x10]
	mov	rdx, qword ptr [rax + 8]
	mov	rdi, rbp
	mov	rsi, r12
	mov	rcx, r14
	mov	r8d, r15d
	call	check_arrival_expand_ecl_sub
	test	eax, eax
	je	.label_1527
	jmp	.label_1525
.label_1524:
	cmp	r15d, 9
	jne	.label_1523
	mov	rdi, r12
	mov	rsi, rbx
	call	re_node_set_insert
	mov	cl, al
	mov	eax, 0xc
	test	cl, cl
	je	.label_1525
.label_1523:
	xor	eax, eax
.label_1525:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x41128b
	.globl sub_41128b
	.type sub_41128b, @function
sub_41128b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x411290

	.globl re_acquire_state
	.type re_acquire_state, @function
re_acquire_state:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r12, rdx
	mov	rbx, rsi
	cmp	qword ptr [r12 + 8], 0
	je	.label_1532
	mov	qword ptr [rsp + 8], rdi
	xor	esi, esi
	mov	rdi, r12
	call	calc_state_hash
	mov	r13, rax
	mov	rax, qword ptr [rbx + 0x40]
	mov	rcx, r13
	and	rcx, qword ptr [rbx + 0x88]
	mov	qword ptr [rsp + 0x10], rbx
	lea	rcx, [rcx + rcx*2]
	cmp	qword ptr [rax + rcx*8], 0
	jle	.label_1535
	lea	rbp, [rax + rcx*8]
	mov	r14, qword ptr [rax + rcx*8 + 0x10]
	xor	r15d, r15d
	nop	dword ptr [rax]
.label_1531:
	mov	rbx, qword ptr [r14 + r15*8]
	cmp	r13, qword ptr [rbx]
	jne	.label_1534
	lea	rdi, [rbx + 8]
	mov	rsi, r12
	call	re_node_set_compare
	test	al, al
	jne	.label_1530
.label_1534:
	inc	r15
	cmp	r15, qword ptr [rbp]
	jl	.label_1531
.label_1535:
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r12
	mov	rdx, r13
	call	create_ci_newstate
	mov	rbx, rax
	test	rbx, rbx
	je	.label_1529
.label_1530:
	mov	rax, rbx
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1532:
	mov	dword ptr [rdi], 0
	jmp	.label_1533
.label_1529:
	mov	rax, qword ptr [rsp + 8]
	mov	dword ptr [rax], 0xc
.label_1533:
	xor	ebx, ebx
	jmp	.label_1530
	.section	.text
	.align	32
	#Procedure 0x411353
	.globl sub_411353
	.type sub_411353, @function
sub_411353:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x411360

	.globl create_ci_newstate
	.type create_ci_newstate, @function
create_ci_newstate:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	rbx, rdx
	mov	r14, rsi
	mov	r15, rdi
	mov	edi, 0x70
	mov	esi, 1
	call	rpl_calloc
	mov	r12, rax
	xor	eax, eax
	test	r12, r12
	je	.label_1537
	mov	r13, r12
	add	r13, 8
	mov	rdi, r13
	mov	rsi, r14
	call	re_node_set_init_copy
	test	eax, eax
	jne	.label_1542
	mov	rdx, rbx
	mov	qword ptr [r12 + 0x50], r13
	cmp	qword ptr [r14 + 8], 0
	jle	.label_1543
	xor	eax, eax
.label_1545:
	mov	r8, qword ptr [r15]
	mov	rcx, qword ptr [r14 + 0x10]
	mov	rbp, qword ptr [rcx + rax*8]
	shl	rbp, 4
	mov	edi, dword ptr [r8 + rbp + 8]
	mov	esi, edi
	and	esi, 0x3ffff
	cmp	esi, 1
	je	.label_1536
	movzx	esi, dil
	shr	edi, 0x14
	mov	cl, byte ptr [r12 + 0x68]
	mov	bl, cl
	shr	bl, 5
	movzx	ebx, bl
	or	ebx, edi
	shl	bl, 5
	and	bl, 0x20
	and	cl, 0xdf
	or	cl, bl
	mov	byte ptr [r12 + 0x68], cl
	cmp	esi, 0xc
	je	.label_1541
	cmp	esi, 4
	je	.label_1538
	cmp	esi, 2
	jne	.label_1539
	or	cl, 0x10
	mov	byte ptr [r12 + 0x68], cl
	jmp	.label_1536
.label_1538:
	or	cl, 0x40
	mov	byte ptr [r12 + 0x68], cl
	jmp	.label_1536
.label_1539:
	lea	rcx, [r8 + rbp + 8]
	test	dword ptr [rcx], 0x3ff00
	je	.label_1536
.label_1541:
	or	byte ptr [r12 + 0x68], 0x80
.label_1536:
	inc	rax
	cmp	rax, qword ptr [r14 + 8]
	jl	.label_1545
.label_1543:
	mov	rdi, r15
	mov	rsi, r12
	call	register_state
	test	eax, eax
	mov	rax, r12
	jne	.label_1540
.label_1537:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1542:
	mov	rdi, r12
	call	free
	jmp	.label_1544
.label_1540:
	mov	rdi, r12
	call	free_state
.label_1544:
	xor	eax, eax
	jmp	.label_1537
	.section	.text
	.align	32
	#Procedure 0x411481
	.globl sub_411481
	.type sub_411481, @function
sub_411481:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x411490

	.globl check_node_accept_bytes
	.type check_node_accept_bytes, @function
check_node_accept_bytes:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12, rcx
	mov	r13, rdx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	r14, qword ptr [rbx]
	shl	rbp, 4
	movzx	r15d, byte ptr [r14 + rbp + 8]
	cmp	r15d, 7
	je	.label_1550
	mov	rdi, r13
	mov	rsi, r12
	call	re_string_char_size_at
	mov	esi, eax
	cmp	r15d, 5
	jne	.label_1563
	xor	eax, eax
	cmp	esi, 2
	jl	.label_1546
	test	byte ptr [rbx + 0xd8], 0x40
	jne	.label_1556
	mov	rcx, qword ptr [r13 + 8]
	movzx	ecx, byte ptr [rcx + r12]
	cmp	ecx, 0xa
	je	.label_1546
.label_1556:
	cmp	byte ptr [rbx + 0xd8], 0
	js	.label_1573
	mov	eax, esi
	jmp	.label_1546
.label_1563:
	cmp	esi, 1
	setg	cl
	xor	eax, eax
	cmp	r15d, 6
	jne	.label_1546
	test	cl, cl
	je	.label_1546
	mov	rbp, qword ptr [r14 + rbp]
	cmp	qword ptr [rbp + 0x40], 0
	jne	.label_1554
	cmp	qword ptr [rbp + 0x48], 0
	jne	.label_1554
	xor	r14d, r14d
	cmp	qword ptr [rbp + 0x28], 0
	je	.label_1562
.label_1554:
	mov	rdi, r13
	mov	ebx, esi
	mov	rsi, r12
	call	re_string_wchar_at
	mov	esi, ebx
	mov	r14d, eax
.label_1562:
	cmp	qword ptr [rbp + 0x28], 0
	jle	.label_1565
	mov	rax, qword ptr [rbp]
	xor	ecx, ecx
.label_1566:
	cmp	r14d, dword ptr [rax + rcx*4]
	je	.label_1568
	inc	rcx
	cmp	rcx, qword ptr [rbp + 0x28]
	jl	.label_1566
.label_1565:
	mov	r15d, esi
	cmp	qword ptr [rbp + 0x48], 0
	jle	.label_1572
	xor	ebx, ebx
	nop	
.label_1551:
	mov	rax, qword ptr [rbp + 0x18]
	mov	rsi, qword ptr [rax + rbx*8]
	mov	edi, r14d
	call	iswctype
	test	eax, eax
	jne	.label_1569
	inc	rbx
	cmp	rbx, qword ptr [rbp + 0x48]
	jl	.label_1551
.label_1572:
	xor	ecx, ecx
	cmp	qword ptr [rbp + 0x40], 0
	mov	esi, r15d
	jle	.label_1553
	mov	rax, qword ptr [rbp + 8]
	xor	edx, edx
	nop	
.label_1560:
	cmp	dword ptr [rax + rdx*4], r14d
	jg	.label_1571
	mov	rcx, qword ptr [rbp + 0x10]
	cmp	r14d, dword ptr [rcx + rdx*4]
	jle	.label_1561
.label_1571:
	inc	rdx
	xor	ecx, ecx
	cmp	rdx, qword ptr [rbp + 0x40]
	jl	.label_1560
	jmp	.label_1553
.label_1573:
	mov	rcx, qword ptr [r13 + 8]
	cmp	byte ptr [rcx + r12], 0
	je	.label_1546
	mov	eax, esi
	jmp	.label_1546
.label_1550:
	mov	rsi, qword ptr [r13 + 8]
	movzx	edx, byte ptr [rsi + r12]
	xor	eax, eax
	cmp	edx, 0xc2
	jb	.label_1546
	lea	rcx, [r12 + 2]
	cmp	rcx, qword ptr [r13 + 0x58]
	jle	.label_1570
	xor	eax, eax
	jmp	.label_1546
.label_1569:
	mov	esi, r15d
.label_1568:
	mov	ecx, esi
.label_1553:
	test	byte ptr [rbp + 0x20], 1
	jne	.label_1547
	mov	eax, ecx
	jmp	.label_1546
.label_1547:
	test	ecx, ecx
	mov	eax, 0
	jg	.label_1546
	test	esi, esi
	mov	eax, 1
	cmovg	eax, esi
.label_1546:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1561:
	mov	ecx, esi
	jmp	.label_1553
.label_1570:
	mov	cl, byte ptr [r12 + rsi + 1]
	movzx	edx, dl
	cmp	edx, 0xdf
	ja	.label_1559
	movzx	eax, cl
	cmp	eax, 0xc0
	sbb	edx, edx
	and	edx, 2
	test	cl, cl
	mov	eax, 0
	cmovs	eax, edx
	jmp	.label_1546
.label_1559:
	cmp	edx, 0xef
	ja	.label_1567
	mov	eax, 3
	cmp	edx, 0xe0
	jne	.label_1549
	movzx	ecx, cl
	cmp	ecx, 0xa0
	jae	.label_1549
	xor	eax, eax
	jmp	.label_1546
.label_1567:
	cmp	edx, 0xf7
	ja	.label_1548
	mov	eax, 4
	cmp	edx, 0xf0
	jne	.label_1549
	movzx	ecx, cl
	cmp	ecx, 0x90
	jae	.label_1549
	xor	eax, eax
	jmp	.label_1546
.label_1548:
	cmp	edx, 0xfb
	ja	.label_1557
	mov	eax, 5
	cmp	edx, 0xf8
	jne	.label_1549
	movzx	ecx, cl
	cmp	ecx, 0x88
	jae	.label_1549
	xor	eax, eax
	jmp	.label_1546
.label_1557:
	cmp	edx, 0xfd
	ja	.label_1564
	mov	eax, 6
	cmp	edx, 0xfc
	jne	.label_1549
	movzx	ecx, cl
	cmp	ecx, 0x84
	jae	.label_1549
	xor	eax, eax
	jmp	.label_1546
.label_1549:
	mov	ecx, eax
	lea	rdx, [rcx + r12]
	cmp	rdx, qword ptr [r13 + 0x58]
	jle	.label_1574
	xor	eax, eax
	jmp	.label_1546
.label_1574:
	add	r12, qword ptr [r13 + 8]
	mov	edx, 1
.label_1555:
	mov	bl, byte ptr [r12 + rdx]
	test	bl, bl
	jns	.label_1552
	movzx	esi, bl
	cmp	esi, 0xbf
	ja	.label_1558
	inc	rdx
	cmp	rdx, rcx
	jl	.label_1555
	jmp	.label_1546
.label_1564:
	xor	eax, eax
	jmp	.label_1546
.label_1552:
	xor	eax, eax
	jmp	.label_1546
.label_1558:
	xor	eax, eax
	jmp	.label_1546
	.section	.text
	.align	32
	#Procedure 0x41174a
	.globl sub_41174a
	.type sub_41174a, @function
sub_41174a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x411750

	.globl check_node_accept
	.type check_node_accept, @function
check_node_accept:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rdx
	mov	rbx, rsi
	mov	r15, rdi
	mov	rax, qword ptr [r15 + 8]
	movzx	esi, byte ptr [rax + r14]
	movzx	ecx, byte ptr [rbx + 8]
	xor	eax, eax
	dec	ecx
	cmp	ecx, 6
	ja	.label_1576
	jmp	qword ptr [word ptr [+ (rcx * 8) + label_1583]]
.label_1995:
	movzx	eax, byte ptr [rbx]
	cmp	eax, esi
	je	.label_1575
	xor	eax, eax
	jmp	.label_1576
.label_1996:
	mov	rdi, qword ptr [rbx]
	call	bitset_contain
	test	al, al
	jne	.label_1575
	xor	eax, eax
	jmp	.label_1576
.label_1998:
	test	sil, sil
	js	.label_1579
.label_1997:
	test	sil, sil
	je	.label_1581
	movzx	eax, sil
	cmp	eax, 0xa
	jne	.label_1575
	mov	rax, qword ptr [r15 + 0x98]
	test	byte ptr [rax + 0xd8], 0x40
	jne	.label_1575
	xor	eax, eax
	jmp	.label_1576
.label_1581:
	mov	rax, qword ptr [r15 + 0x98]
	cmp	byte ptr [rax + 0xd8], 0
	js	.label_1577
.label_1575:
	mov	ecx, dword ptr [rbx + 8]
	mov	ebx, ecx
	shr	ebx, 8
	mov	al, 1
	test	bx, 0x3ff
	je	.label_1576
	mov	ebp, ecx
	mov	edx, dword ptr [r15 + 0xa0]
	mov	rdi, r15
	mov	rsi, r14
	call	re_string_context_at
	mov	ecx, eax
	and	ecx, 1
	test	bl, 4
	je	.label_1582
	test	ecx, ecx
	jne	.label_1582
	xor	eax, eax
	jmp	.label_1576
.label_1582:
	mov	edx, ebp
	test	dh, 8
	je	.label_1578
	test	ecx, ecx
	je	.label_1578
	xor	eax, eax
	jmp	.label_1576
.label_1579:
	xor	eax, eax
	jmp	.label_1576
.label_1578:
	test	dh, 0x20
	je	.label_1580
	mov	ecx, eax
	and	ecx, 2
	jne	.label_1580
	xor	eax, eax
	jmp	.label_1576
.label_1577:
	xor	eax, eax
	jmp	.label_1576
.label_1580:
	and	eax, 8
	test	bl, bl
	setns	cl
	shr	eax, 3
	or	al, cl
.label_1576:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x41184f
	.globl sub_41184f
	.type sub_41184f, @function
sub_41184f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x411850
	.globl re_string_elem_size_at
	.type re_string_elem_size_at, @function
re_string_elem_size_at:

	ret	
	.section	.text
	.align	32
	#Procedure 0x411851
	.globl sub_411851
	.type sub_411851, @function
sub_411851:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x411860

	.globl transit_state_mb
	.type transit_state_mb, @function
transit_state_mb:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r12, rsi
	mov	r15, rdi
	xor	eax, eax
	cmp	qword ptr [r12 + 0x10], 0
	jle	.label_1590
	mov	rax, qword ptr [r15 + 0x98]
	mov	qword ptr [rsp + 8], rax
	xor	r13d, r13d
	nop	word ptr cs:[rax + rax]
.label_1584:
	mov	rax, qword ptr [r12 + 0x18]
	mov	r14, qword ptr [rax + r13*8]
	mov	rax, qword ptr [rsp + 8]
	mov	rax, qword ptr [rax]
	mov	rcx, r14
	shl	rcx, 4
	mov	ebx, dword ptr [rax + rcx + 8]
	test	ebx, 0x100000
	je	.label_1585
	mov	ebp, ebx
	shr	ebp, 8
	test	bp, 0x3ff
	je	.label_1587
	mov	rsi, qword ptr [r15 + 0x48]
	mov	edx, dword ptr [r15 + 0xa0]
	mov	rdi, r15
	call	re_string_context_at
	mov	ecx, eax
	and	ecx, 1
	test	bpl, 4
	je	.label_1591
	test	ecx, ecx
	je	.label_1585
.label_1591:
	test	bh, 8
	je	.label_1593
	test	ecx, ecx
	jne	.label_1585
.label_1593:
	test	bh, 0x20
	je	.label_1586
	mov	ecx, eax
	and	ecx, 2
	je	.label_1585
.label_1586:
	test	bpl, bpl
	jns	.label_1587
	and	eax, 8
	je	.label_1585
	nop	word ptr cs:[rax + rax]
.label_1587:
	mov	rcx, qword ptr [r15 + 0x48]
	mov	rdi, qword ptr [rsp + 8]
	mov	rsi, r14
	mov	rdx, r15
	call	check_node_accept_bytes
	test	eax, eax
	je	.label_1585
	mov	rbp, r12
	movsxd	r12, eax
	add	r12, qword ptr [r15 + 0x48]
	mov	ecx, dword ptr [r15 + 0xe0]
	cmp	ecx, eax
	cmovl	ecx, eax
	mov	dword ptr [r15 + 0xe0], ecx
	mov	rdi, r15
	mov	rsi, r12
	call	clean_state_log_if_needed
	mov	dword ptr [rsp + 0x34], eax
	test	eax, eax
	jne	.label_1590
	mov	rcx, qword ptr [rsp + 8]
	mov	rax, qword ptr [rcx + 0x18]
	mov	rax, qword ptr [rax + r14*8]
	lea	rdx, [rax + rax*2]
	shl	rdx, 3
	add	rdx, qword ptr [rcx + 0x30]
	mov	rax, qword ptr [r15 + 0xb8]
	mov	rbx, qword ptr [rax + r12*8]
	test	rbx, rbx
	je	.label_1588
	mov	rsi, qword ptr [rbx + 0x50]
	lea	rdi, [rsp + 0x10]
	call	re_node_set_init_union
	mov	dword ptr [rsp + 0x34], eax
	test	eax, eax
	je	.label_1592
	jmp	.label_1590
.label_1588:
	mov	rax, qword ptr [rdx + 0x10]
	mov	qword ptr [rsp + 0x20], rax
	movups	xmm0, xmmword ptr [rdx]
	movaps	xmmword ptr [rsp + 0x10], xmm0
.label_1592:
	lea	rsi, [r12 - 1]
	mov	edx, dword ptr [r15 + 0xa0]
	mov	rdi, r15
	call	re_string_context_at
	lea	rdi, [rsp + 0x34]
	mov	rsi, qword ptr [rsp + 8]
	lea	rdx, [rsp + 0x10]
	mov	ecx, eax
	call	re_acquire_state_context
	test	rbx, rbx
	mov	rcx, qword ptr [r15 + 0xb8]
	mov	qword ptr [rcx + r12*8], rax
	je	.label_1589
	mov	rdi, qword ptr [rsp + 0x20]
	call	free
.label_1589:
	mov	rax, qword ptr [r15 + 0xb8]
	cmp	qword ptr [rax + r12*8], 0
	mov	r12, rbp
	jne	.label_1585
	mov	eax, dword ptr [rsp + 0x34]
	test	eax, eax
	jne	.label_1590
	nop	word ptr cs:[rax + rax]
.label_1585:
	inc	r13
	xor	eax, eax
	cmp	r13, qword ptr [r12 + 0x10]
	jl	.label_1584
.label_1590:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x411a5f
	.globl sub_411a5f
	.type sub_411a5f, @function
sub_411a5f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x411a60

	.globl build_trtable
	.type build_trtable, @function
build_trtable:
	push	rbp
	mov	rbp, rsp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	rbx, rsi
	mov	r14, rdi
	mov	edi, 0x3800
	call	malloc
	mov	r15, rax
	mov	qword ptr [rbp - 0x80], r15
	test	r15, r15
	je	.label_1615
	lea	rcx, [r15 + 0x1800]
	mov	qword ptr [rbp - 0x90], rcx
	lea	r13, [rbx + 0x58]
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x58], xmm0
	mov	rdi, r14
	mov	rsi, rbx
	mov	qword ptr [rbp - 0xb8], rbx
	mov	rdx, r15
	call	group_nodes_into_DFAstates
	mov	r12, rax
	test	r12, r12
	jle	.label_1624
	lea	rsi, [r12 + 1]
	lea	rdi, [rbp - 0x48]
	call	re_node_set_alloc
	mov	dword ptr [rbp - 0x2c], eax
	movabs	rcx, 0xaaaaaaaaaaaa855
	cmp	r12, rcx
	ja	.label_1605
	test	eax, eax
	jne	.label_1605
	lea	rax, [r12*8]
	lea	rdi, [rax + rax*2]
	lea	rax, [rax + rax*2 + 0x3800]
	cmp	rax, 0xfbf
	ja	.label_1634
	mov	qword ptr [rbp - 0xc0], r13
	mov	rax, rsp
	add	rdi, 0xf
	and	rdi, 0xfffffffffffffff0
	sub	rax, rdi
	mov	rsp, rax
	mov	dword ptr [rbp - 0xa4], 0
	jmp	.label_1598
.label_1634:
	call	malloc
	test	rax, rax
	je	.label_1605
	mov	qword ptr [rbp - 0xc0], r13
	mov	cl, 1
	mov	dword ptr [rbp - 0xa4], ecx
.label_1598:
	mov	qword ptr [rbp - 0x88], rax
	lea	rax, [rax + r12*8]
	mov	qword ptr [rbp - 0x98], rax
	lea	rax, [rax + r12*8]
	mov	qword ptr [rbp - 0xa0], rax
	lea	rdi, [rbp - 0x70]
	call	bitset_empty
	xor	r13d, r13d
	xor	eax, eax
	mov	qword ptr [rbp - 0xb0], rax
.label_1602:
	mov	qword ptr [rbp - 0x78], r13
	mov	qword ptr [rbp - 0x40], 0
	lea	rax, [r13 + r13*2]
	cmp	qword ptr [r15 + rax*8 + 8], 0
	mov	rbx, r14
	jle	.label_1617
	mov	rcx, qword ptr [rbp - 0x80]
	lea	r14, [rcx + rax*8 + 8]
	mov	r13, qword ptr [rcx + rax*8 + 0x10]
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_1633:
	mov	rax, qword ptr [r13 + r15*8]
	mov	rcx, qword ptr [rbx + 0x18]
	mov	rax, qword ptr [rcx + rax*8]
	cmp	rax, -1
	je	.label_1614
	mov	rcx, qword ptr [rbx + 0x30]
	lea	rax, [rax + rax*2]
	lea	rsi, [rcx + rax*8]
	lea	rdi, [rbp - 0x48]
	call	re_node_set_merge
	mov	dword ptr [rbp - 0x2c], eax
	test	eax, eax
	jne	.label_1594
.label_1614:
	inc	r15
	cmp	r15, qword ptr [r14]
	jl	.label_1633
.label_1617:
	xor	ecx, ecx
	lea	rdi, [rbp - 0x2c]
	mov	rsi, rbx
	lea	rdx, [rbp - 0x48]
	call	re_acquire_state_context
	mov	rsi, rbx
	mov	rcx, qword ptr [rbp - 0x88]
	mov	rdx, qword ptr [rbp - 0x78]
	mov	qword ptr [rcx + rdx*8], rax
	test	rax, rax
	jne	.label_1597
	mov	ecx, dword ptr [rbp - 0x2c]
	test	ecx, ecx
	jne	.label_1594
.label_1597:
	cmp	byte ptr [rax + 0x68], 0
	js	.label_1603
	mov	rcx, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rbp - 0x78]
	mov	qword ptr [rcx + rdx*8], rax
	mov	rax, qword ptr [rbp - 0x88]
	mov	rax, qword ptr [rax + rdx*8]
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	qword ptr [rcx + rdx*8], rax
	mov	r13, rdx
	jmp	.label_1604
	.section	.text
	.align	32
	#Procedure 0x411c62
	.globl sub_411c62
	.type sub_411c62, @function
sub_411c62:

	nop	word ptr cs:[rax + rax]
.label_1603:
	mov	ecx, 1
	lea	rdi, [rbp - 0x2c]
	lea	rdx, [rbp - 0x48]
	mov	rbx, rsi
	call	re_acquire_state_context
	mov	rsi, rbx
	mov	rcx, qword ptr [rbp - 0x98]
	mov	rdx, qword ptr [rbp - 0x78]
	mov	qword ptr [rcx + rdx*8], rax
	test	rax, rax
	jne	.label_1616
	mov	ecx, dword ptr [rbp - 0x2c]
	test	ecx, ecx
	jne	.label_1594
.label_1616:
	mov	rcx, qword ptr [rbp - 0x88]
	mov	rbx, qword ptr [rbp - 0x78]
	cmp	qword ptr [rcx + rbx*8], rax
	je	.label_1620
	mov	al, 1
	cmp	dword ptr [rsi + 0xb4], 1
	jg	.label_1622
	mov	rax, qword ptr [rbp - 0xb0]
.label_1622:
	mov	qword ptr [rbp - 0xb0], rax
.label_1620:
	mov	ecx, 2
	lea	rdi, [rbp - 0x2c]
	mov	r14, rsi
	lea	rdx, [rbp - 0x48]
	call	re_acquire_state_context
	mov	rcx, qword ptr [rbp - 0xa0]
	mov	qword ptr [rcx + rbx*8], rax
	mov	r13, rbx
	test	rax, rax
	jne	.label_1630
	mov	eax, dword ptr [rbp - 0x2c]
	test	eax, eax
	mov	rsi, r14
	je	.label_1604
	jmp	.label_1594
.label_1630:
	mov	rsi, r14
	nop	dword ptr [rax + rax]
.label_1604:
	mov	r14, rsi
	mov	rsi, r13
	shl	rsi, 5
	mov	rbx, qword ptr [rbp - 0x90]
	add	rsi, rbx
	lea	rdi, [rbp - 0x70]
	call	bitset_merge
	inc	r13
	cmp	r13, r12
	mov	r15, qword ptr [rbp - 0x80]
	jl	.label_1602
	mov	rax, qword ptr [rbp - 0xb0]
	and	al, 1
	jne	.label_1610
	mov	qword ptr [rbp - 0xb0], rax
	mov	edi, 8
	mov	esi, 0x100
	call	rpl_calloc
	mov	r15, rax
	mov	rax, qword ptr [rbp - 0xc0]
	mov	qword ptr [rax], r15
	test	r15, r15
	mov	r11, r14
	je	.label_1594
	mov	r13, qword ptr [rbp - 0x88]
	lea	r10, [r13 - 8]
	mov	rax, qword ptr [rbp - 0x80]
	lea	rbx, [rax + 0x1800]
	xor	r8d, r8d
	xor	r9d, r9d
	nop	word ptr [rax + rax]
.label_1596:
	mov	rdi, qword ptr [rbp + r9*8 - 0x70]
	test	rdi, rdi
	je	.label_1619
	mov	rdx, r8
	mov	esi, 1
	jmp	.label_1621
	.section	.text
	.align	32
	#Procedure 0x411db4
	.globl sub_411db4
	.type sub_411db4, @function
sub_411db4:

	nop	word ptr cs:[rax + rax]
.label_1623:
	add	rax, 8
	test	qword ptr [rcx], rsi
	lea	rcx, [rcx + 0x20]
	je	.label_1623
	test	qword ptr [r11 + r9*8 + 0xb8], rsi
	je	.label_1626
	mov	rax, qword ptr [rax + r12*8]
	jmp	.label_1628
.label_1626:
	mov	rax, qword ptr [rax]
.label_1628:
	mov	qword ptr [r15 + rdx*8], rax
	jmp	.label_1606
	.section	.text
	.align	32
	#Procedure 0x411de6
	.globl sub_411de6
	.type sub_411de6, @function
sub_411de6:

	nop	word ptr cs:[rax + rax]
.label_1621:
	test	dil, 1
	mov	rcx, rbx
	mov	rax, r10
	jne	.label_1623
.label_1606:
	add	rsi, rsi
	shr	rdi, 1
	inc	rdx
	test	rdi, rdi
	jne	.label_1621
.label_1619:
	inc	r9
	add	r8, 0x40
	add	rbx, 8
	cmp	r9, 4
	jne	.label_1596
.label_1629:
	mov	r14, r15
	lea	rdi, [rbp - 0x70]
	mov	esi, 0xa
	call	bitset_contain
	test	al, al
	je	.label_1601
	test	r12, r12
	jle	.label_1601
	mov	rax, qword ptr [rbp - 0x80]
	lea	r15, [rax + 0x1800]
	xor	ebx, ebx
	nop	word ptr [rax + rax]
.label_1609:
	mov	esi, 0xa
	mov	rdi, r15
	call	bitset_contain
	test	al, al
	jne	.label_1607
	inc	rbx
	add	r15, 0x20
	cmp	rbx, r12
	jl	.label_1609
	jmp	.label_1601
.label_1615:
	xor	eax, eax
	jmp	.label_1599
.label_1624:
	mov	rdi, r15
	call	free
	test	r12, r12
	je	.label_1612
	xor	eax, eax
	jmp	.label_1599
.label_1612:
	mov	edi, 8
	mov	esi, 0x100
	call	rpl_calloc
	mov	qword ptr [r13], rax
	test	rax, rax
	setne	al
	jmp	.label_1599
.label_1607:
	mov	rax, r12
	shl	rax, 4
	add	rax, r13
	mov	rcx, qword ptr [rbp - 0xb0]
	test	cl, cl
	mov	rcx, qword ptr [rax + rbx*8]
	mov	qword ptr [r14 + 0x50], rcx
	je	.label_1601
	mov	rax, qword ptr [rax + rbx*8]
	mov	qword ptr [r14 + 0x850], rax
.label_1601:
	mov	eax, dword ptr [rbp - 0xa4]
	test	al, al
	je	.label_1627
	mov	rdi, r13
	call	free
.label_1627:
	mov	rdi, qword ptr [rbp - 0x38]
	call	free
	test	r12, r12
	jle	.label_1631
	mov	rbx, qword ptr [rbp - 0x80]
	add	rbx, 0x10
	nop	dword ptr [rax + rax]
.label_1632:
	mov	rdi, qword ptr [rbx]
	call	free
	add	rbx, 0x18
	dec	r12
	jne	.label_1632
.label_1631:
	mov	rdi, qword ptr [rbp - 0x80]
	call	free
	mov	al, 1
	jmp	.label_1599
.label_1610:
	mov	qword ptr [rbp - 0xb0], rax
	mov	edi, 8
	mov	esi, 0x200
	call	rpl_calloc
	mov	r15, rax
	mov	rax, qword ptr [rbp - 0xb8]
	mov	qword ptr [rax + 0x60], r15
	test	r15, r15
	je	.label_1594
	mov	r13, qword ptr [rbp - 0x88]
	lea	r10, [r13 - 8]
	xor	r8d, r8d
	xor	r9d, r9d
.label_1625:
	mov	rsi, qword ptr [rbp + r9*8 - 0x70]
	test	rsi, rsi
	mov	rdi, r8
	mov	ecx, 1
	jne	.label_1608
	jmp	.label_1611
	.section	.text
	.align	32
	#Procedure 0x411f73
	.globl sub_411f73
	.type sub_411f73, @function
sub_411f73:

	nop	word ptr cs:[rax + rax]
.label_1613:
	add	rax, 8
	test	qword ptr [rdx], rcx
	lea	rdx, [rdx + 0x20]
	je	.label_1613
	mov	rdx, qword ptr [rax]
	mov	qword ptr [r15 + rdi*8], rdx
	mov	rax, qword ptr [rax + r12*8]
	mov	qword ptr [r15 + rdi*8 + 0x800], rax
	jmp	.label_1618
	.section	.text
	.align	32
	#Procedure 0x411fa2
	.globl sub_411fa2
	.type sub_411fa2, @function
sub_411fa2:

	nop	word ptr cs:[rax + rax]
.label_1608:
	test	sil, 1
	mov	rdx, rbx
	mov	rax, r10
	jne	.label_1613
.label_1618:
	add	rcx, rcx
	shr	rsi, 1
	inc	rdi
	test	rsi, rsi
	jne	.label_1608
.label_1611:
	inc	r9
	add	r8, 0x40
	add	rbx, 8
	cmp	r9, 4
	jne	.label_1625
	jmp	.label_1629
.label_1594:
	mov	eax, dword ptr [rbp - 0xa4]
	test	al, al
	mov	rdi, qword ptr [rbp - 0x88]
	mov	r15, qword ptr [rbp - 0x80]
	je	.label_1605
	call	free
.label_1605:
	mov	r14, r15
	mov	rdi, qword ptr [rbp - 0x38]
	call	free
	test	r12, r12
	jle	.label_1595
	mov	rbx, r14
	add	rbx, 0x10
	nop	word ptr cs:[rax + rax]
.label_1600:
	mov	rdi, qword ptr [rbx]
	call	free
	add	rbx, 0x18
	dec	r12
	jne	.label_1600
.label_1595:
	mov	rdi, r14
	call	free
	xor	eax, eax
.label_1599:
	lea	rsp, [rbp - 0x28]
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x41204a
	.globl sub_41204a
	.type sub_41204a, @function
sub_41204a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412050

	.globl group_nodes_into_DFAstates
	.type group_nodes_into_DFAstates, @function
group_nodes_into_DFAstates:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xa8
	mov	qword ptr [rsp + 0x30], rcx
	mov	r14, rdx
	mov	rbx, rsi
	mov	qword ptr [rsp + 0x20], rbx
	mov	rbp, rdi
	mov	qword ptr [rsp + 0x10], rbp
	lea	rdi, [rsp + 0x80]
	call	bitset_empty
	mov	r8, rbp
	xor	r15d, r15d
	cmp	qword ptr [rbx + 0x10], 0
	jle	.label_1657
	xor	ebp, ebp
	xor	r15d, r15d
	nop	dword ptr [rax]
.label_1662:
	mov	qword ptr [rsp + 0x28], rbp
	mov	rax, qword ptr [rbx + 0x18]
	mov	rbx, qword ptr [rax + rbp*8]
	mov	r12, qword ptr [r8]
	shl	rbx, 4
	lea	rax, [r12 + rbx]
	mov	r13d, dword ptr [r12 + rbx + 8]
	movzx	ebp, r13b
	mov	dword ptr [rsp + 0x3c], ebp
	cmp	ebp, 1
	jne	.label_1667
	movzx	esi, byte ptr [rax]
	mov	qword ptr [rsp + 0x18], rax
	lea	rdi, [rsp + 0x80]
	call	bitset_set
	jmp	.label_1641
	.section	.text
	.align	32
	#Procedure 0x4120e4
	.globl sub_4120e4
	.type sub_4120e4, @function
sub_4120e4:

	nop	word ptr cs:[rax + rax]
.label_1667:
	cmp	ebp, 7
	je	.label_1660
	cmp	ebp, 5
	je	.label_1669
	cmp	ebp, 3
	jne	.label_1636
	mov	rsi, qword ptr [rax]
	mov	qword ptr [rsp + 0x18], rax
	lea	rdi, [rsp + 0x80]
	call	bitset_merge
	jmp	.label_1641
.label_1660:
	mov	qword ptr [rsp + 0x18], rax
	mov	qword ptr [rsp + 0x88], -1
	mov	qword ptr [rsp + 0x80], -1
	test	byte ptr [r8 + 0xd8], 0x40
	jne	.label_1654
	mov	esi, 0xa
	lea	rdi, [rsp + 0x80]
	mov	rbp, r8
	call	bitset_clear
	mov	r8, rbp
	mov	ebp, dword ptr [rsp + 0x3c]
.label_1654:
	cmp	byte ptr [r8 + 0xd8], 0
	mov	qword ptr [rsp + 0x10], r8
	jns	.label_1641
	jmp	.label_1664
.label_1669:
	mov	qword ptr [rsp + 0x18], rax
	cmp	dword ptr [r8 + 0xb4], 2
	jl	.label_1666
	mov	rsi, qword ptr [r8 + 0x78]
	lea	rdi, [rsp + 0x80]
	mov	rbp, r8
	call	bitset_merge
	jmp	.label_1659
.label_1666:
	lea	rdi, [rsp + 0x80]
	mov	rbp, r8
	call	bitset_set_all
.label_1659:
	test	byte ptr [rbp + 0xd8], 0x40
	mov	rax, rbp
	jne	.label_1661
	mov	esi, 0xa
	lea	rdi, [rsp + 0x80]
	mov	rbp, rax
	call	bitset_clear
	mov	rax, rbp
.label_1661:
	mov	qword ptr [rsp + 0x10], rax
	cmp	byte ptr [rax + 0xd8], 0
	mov	ebp, dword ptr [rsp + 0x3c]
	jns	.label_1641
.label_1664:
	xor	esi, esi
	lea	rdi, [rsp + 0x80]
	call	bitset_clear
	nop	
.label_1641:
	shr	r13d, 8
	mov	eax, r13d
	and	eax, 0x3ff
	je	.label_1638
	test	r13b, 0x20
	je	.label_1635
	mov	dword ptr [rsp + 0x3c], ebp
	mov	esi, 0xa
	lea	rbp, [rsp + 0x80]
	mov	rdi, rbp
	call	bitset_contain
	mov	byte ptr [rsp + 8], al
	mov	rdi, rbp
	call	bitset_empty
	cmp	byte ptr [rsp + 8], 0
	je	.label_1647
	mov	esi, 0xa
	mov	rdi, rbp
	call	bitset_set
	mov	ebp, dword ptr [rsp + 0x3c]
.label_1635:
	test	r13b, r13b
	js	.label_1643
	lea	rax, [r12 + rbx + 8]
	test	r13b, 4
	mov	r8, qword ptr [rsp + 0x10]
	je	.label_1652
	cmp	ebp, 1
	lea	rdi, [rsp + 0x80]
	jne	.label_1653
	test	byte ptr [rax + 2], 0x40
	jne	.label_1653
	mov	rbp, r8
	call	bitset_empty
	mov	r8, rbp
	jmp	.label_1636
.label_1653:
	cmp	dword ptr [r8 + 0xb4], 2
	mov	ecx, 0
	mov	edx, 0
	jl	.label_1650
	mov	rdx, qword ptr [r8 + 0x78]
	xor	ecx, ecx
	xor	esi, esi
	nop	word ptr cs:[rax + rax]
.label_1663:
	mov	rdi, qword ptr [rdx + rsi*8]
	not	rdi
	or	rdi, qword ptr [r8 + rsi*8 + 0xb8]
	and	rdi, qword ptr [rsp + rsi*8 + 0x80]
	mov	qword ptr [rsp + rsi*8 + 0x80], rdi
	or	rcx, rdi
	inc	rsi
	cmp	rsi, 4
	jne	.label_1663
	jmp	.label_1645
	.section	.text
	.align	32
	#Procedure 0x4122dd
	.globl sub_4122dd
	.type sub_4122dd, @function
sub_4122dd:

	nop	dword ptr [rax]
.label_1650:
	mov	rsi, qword ptr [rsp + rdx*8 + 0x80]
	and	rsi, qword ptr [r8 + rdx*8 + 0xb8]
	mov	qword ptr [rsp + rdx*8 + 0x80], rsi
	or	rcx, rsi
	inc	rdx
	cmp	rdx, 4
	jne	.label_1650
.label_1645:
	test	rcx, rcx
	je	.label_1636
.label_1652:
	test	r13b, 8
	je	.label_1638
	cmp	ebp, 1
	jne	.label_1640
	test	byte ptr [rax + 2], 0x40
	jne	.label_1643
.label_1640:
	mov	rdi, qword ptr [rsp + 0x10]
	cmp	dword ptr [rdi + 0xb4], 2
	mov	eax, 0
	mov	ecx, 0
	jl	.label_1646
	mov	rcx, qword ptr [rdi + 0x78]
	xor	eax, eax
	xor	edx, edx
	nop	word ptr cs:[rax + rax]
.label_1651:
	mov	rsi, qword ptr [rcx + rdx*8]
	and	rsi, qword ptr [rdi + rdx*8 + 0xb8]
	not	rsi
	and	rsi, qword ptr [rsp + rdx*8 + 0x80]
	mov	qword ptr [rsp + rdx*8 + 0x80], rsi
	or	rax, rsi
	inc	rdx
	cmp	rdx, 4
	jne	.label_1651
	jmp	.label_1655
	.section	.text
	.align	32
	#Procedure 0x41237d
	.globl sub_41237d
	.type sub_41237d, @function
sub_41237d:

	nop	dword ptr [rax]
.label_1646:
	mov	rdx, qword ptr [rdi + rcx*8 + 0xb8]
	not	rdx
	and	rdx, qword ptr [rsp + rcx*8 + 0x80]
	mov	qword ptr [rsp + rcx*8 + 0x80], rdx
	or	rax, rdx
	inc	rcx
	cmp	rcx, 4
	jne	.label_1646
.label_1655:
	test	rax, rax
	je	.label_1647
.label_1638:
	test	r15, r15
	jle	.label_1670
	mov	rbx, qword ptr [rsp + 0x30]
	xor	r12d, r12d
	nop	word ptr cs:[rax + rax]
.label_1637:
	cmp	ebp, 1
	mov	rcx, rbx
	mov	eax, 0
	mov	edx, 0
	jne	.label_1639
	mov	rdi, r12
	shl	rdi, 5
	add	rdi, qword ptr [rsp + 0x30]
	mov	rax, qword ptr [rsp + 0x18]
	movzx	esi, byte ptr [rax]
	call	bitset_contain
	test	al, al
	mov	rcx, rbx
	mov	eax, 0
	mov	edx, 0
	je	.label_1648
.label_1639:
	mov	rsi, qword ptr [rcx]
	and	rsi, qword ptr [rsp + rdx*8 + 0x80]
	mov	qword ptr [rsp + rdx*8 + 0x60], rsi
	or	rax, rsi
	inc	rdx
	add	rcx, 8
	cmp	rdx, 4
	jne	.label_1639
	test	rax, rax
	mov	ebp, 0
	mov	eax, 0
	mov	ecx, 0
	je	.label_1648
	nop	dword ptr [rax + rax]
.label_1658:
	mov	rdx, qword ptr [rsp + rcx*8 + 0x80]
	not	rdx
	mov	rsi, qword ptr [rbx + rcx*8]
	and	rdx, rsi
	mov	qword ptr [rsp + rcx*8 + 0x40], rdx
	or	rax, rdx
	not	rsi
	and	rsi, qword ptr [rsp + rcx*8 + 0x80]
	mov	qword ptr [rsp + rcx*8 + 0x80], rsi
	or	rbp, rsi
	inc	rcx
	cmp	rcx, 4
	jne	.label_1658
	test	rax, rax
	je	.label_1649
	mov	rdi, r15
	shl	rdi, 5
	mov	r13, qword ptr [rsp + 0x30]
	add	rdi, r13
	lea	rsi, [rsp + 0x40]
	call	bitset_copy
	mov	rdi, r12
	shl	rdi, 5
	add	rdi, r13
	lea	rsi, [rsp + 0x60]
	call	bitset_copy
	lea	rax, [r15 + r15*2]
	lea	rdi, [r14 + rax*8]
	lea	rax, [r12 + r12*2]
	lea	rsi, [r14 + rax*8]
	call	re_node_set_init_copy
	test	eax, eax
	jne	.label_1656
	inc	r15
.label_1649:
	lea	rax, [r12 + r12*2]
	lea	rdi, [r14 + rax*8]
	mov	rax, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [rax + 0x18]
	mov	rcx, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rax + rcx*8]
	call	re_node_set_insert
	test	al, al
	je	.label_1656
	test	rbp, rbp
	je	.label_1642
.label_1648:
	inc	r12
	add	rbx, 0x20
	cmp	r12, r15
	mov	ebp, dword ptr [rsp + 0x3c]
	jl	.label_1637
	jmp	.label_1642
.label_1636:
	mov	rbx, qword ptr [rsp + 0x20]
	mov	rbp, qword ptr [rsp + 0x28]
	jmp	.label_1644
.label_1643:
	lea	rdi, [rsp + 0x80]
	call	bitset_empty
	jmp	.label_1647
.label_1670:
	xor	r12d, r12d
.label_1642:
	cmp	r12, r15
	jne	.label_1647
	mov	rdi, r15
	shl	rdi, 5
	mov	rax, qword ptr [rsp + 0x30]
	add	rdi, rax
	lea	r12, [rsp + 0x80]
	mov	rsi, r12
	call	bitset_copy
	lea	rax, [r15 + r15*2]
	lea	rdi, [r14 + rax*8]
	mov	rbx, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [rbx + 0x18]
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rax + rbp*8]
	call	re_node_set_init_1
	test	eax, eax
	jne	.label_1656
	inc	r15
	mov	rdi, r12
	call	bitset_empty
	mov	r8, qword ptr [rsp + 0x10]
	jmp	.label_1644
	.section	.text
	.align	32
	#Procedure 0x412597
	.globl sub_412597
	.type sub_412597, @function
sub_412597:

	nop	word ptr [rax + rax]
.label_1647:
	mov	rbx, qword ptr [rsp + 0x20]
	mov	r8, qword ptr [rsp + 0x10]
	mov	rbp, qword ptr [rsp + 0x28]
.label_1644:
	inc	rbp
	cmp	rbp, qword ptr [rbx + 0x10]
	jl	.label_1662
	jmp	.label_1657
.label_1656:
	test	r15, r15
	jle	.label_1665
	add	r14, 0x10
	nop	word ptr [rax + rax]
.label_1668:
	mov	rdi, qword ptr [r14]
	call	free
	add	r14, 0x18
	dec	r15
	jne	.label_1668
.label_1665:
	mov	r15, -1
.label_1657:
	mov	rax, r15
	add	rsp, 0xa8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4125fd
	.globl sub_4125fd
	.type sub_4125fd, @function
sub_4125fd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x412600

	.globl bitset_empty
	.type bitset_empty, @function
bitset_empty:
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 0x10], xmm0
	movups	xmmword ptr [rdi], xmm0
	ret	
	.section	.text
	.align	32
	#Procedure 0x41260b
	.globl sub_41260b
	.type sub_41260b, @function
sub_41260b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412610

	.globl bitset_merge
	.type bitset_merge, @function
bitset_merge:
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_1671:
	mov	rcx, qword ptr [rsi + rax*8]
	or	qword ptr [rdi + rax*8], rcx
	inc	rax
	cmp	rax, 4
	jne	.label_1671
	ret	
	.section	.text
	.align	32
	#Procedure 0x412632
	.globl sub_412632
	.type sub_412632, @function
sub_412632:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412640

	.globl bitset_set_all
	.type bitset_set_all, @function
bitset_set_all:
	mov	qword ptr [rdi + 0x18], -1
	mov	qword ptr [rdi + 0x10], -1
	mov	qword ptr [rdi + 8], -1
	mov	qword ptr [rdi], -1
	ret	
	.section	.text
	.align	32
	#Procedure 0x412660

	.globl bitset_clear
	.type bitset_clear, @function
bitset_clear:
	mov	rax, -2
	mov	cl, sil
	rol	rax, cl
	mov	rcx, rsi
	sar	rcx, 0x3f
	shr	rcx, 0x3a
	add	rcx, rsi
	sar	rcx, 6
	and	qword ptr [rdi + rcx*8], rax
	ret	
	.section	.text
	.align	32
	#Procedure 0x412684
	.globl sub_412684
	.type sub_412684, @function
sub_412684:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412690

	.globl bitset_copy
	.type bitset_copy, @function
bitset_copy:
	movups	xmm0, xmmword ptr [rsi]
	movups	xmm1, xmmword ptr [rsi + 0x10]
	movups	xmmword ptr [rdi + 0x10], xmm1
	movups	xmmword ptr [rdi], xmm0
	ret	
	.section	.text
	.align	32
	#Procedure 0x41269f
	.globl sub_41269f
	.type sub_41269f, @function
sub_41269f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4126a0

	.globl check_halt_node_context
	.type check_halt_node_context, @function
check_halt_node_context:
	mov	rax, qword ptr [rdi]
	shl	rsi, 4
	mov	ecx, dword ptr [rax + rsi + 8]
	movzx	eax, cl
	cmp	eax, 2
	jne	.label_1672
	shr	ecx, 8
	mov	al, 1
	test	cx, 0x3ff
	je	.label_1675
	mov	eax, edx
	and	eax, 1
	jne	.label_1674
	mov	esi, ecx
	and	esi, 4
	je	.label_1674
	xor	eax, eax
	ret	
.label_1672:
	xor	eax, eax
	ret	
.label_1674:
	test	eax, eax
	je	.label_1676
	mov	eax, ecx
	and	eax, 8
	je	.label_1676
	xor	eax, eax
	ret	
.label_1676:
	test	dl, 2
	jne	.label_1673
	mov	eax, ecx
	and	eax, 0x20
	je	.label_1673
	xor	eax, eax
	ret	
.label_1673:
	and	edx, 8
	test	cl, cl
	setns	al
	shr	edx, 3
	or	dl, al
	mov	al, dl
.label_1675:
	ret	
	.section	.text
	.align	32
	#Procedure 0x412700

	.globl sift_ctx_init
	.type sift_ctx_init, @function
sift_ctx_init:
	mov	qword ptr [rdi], rsi
	mov	qword ptr [rdi + 8], rdx
	mov	qword ptr [rdi + 0x10], rcx
	mov	qword ptr [rdi + 0x18], r8
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 0x20], xmm0
	mov	qword ptr [rdi + 0x30], 0
	ret	
	.section	.text
	.align	32
	#Procedure 0x41271f
	.globl sub_41271f
	.type sub_41271f, @function
sub_41271f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x412720

	.globl sift_states_backward
	.type sift_states_backward, @function
sift_states_backward:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, rsi
	mov	r15, rdi
	mov	rbx, qword ptr [r14 + 0x18]
	mov	rsi, qword ptr [r14 + 0x10]
	lea	rdi, [rsp]
	call	re_node_set_init_1
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_1679
	lea	rcx, [rsp]
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	update_cur_sifted_state
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_1677
	lea	r12, [rsp]
	xor	r13d, r13d
	nop	word ptr cs:[rax + rax]
.label_1681:
	test	rbx, rbx
	jle	.label_1678
	mov	rdi, qword ptr [r14]
	cmp	qword ptr [rdi + rbx*8], 0
	je	.label_1684
	xor	r13d, r13d
	jmp	.label_1683
	.section	.text
	.align	32
	#Procedure 0x412794
	.globl sub_412794
	.type sub_412794, @function
sub_412794:

	nop	word ptr cs:[rax + rax]
.label_1684:
	inc	r13d
.label_1683:
	cmp	r13d, dword ptr [r15 + 0xe0]
	jg	.label_1682
	mov	qword ptr [rsp + 8], 0
	mov	rax, qword ptr [r15 + 0xb8]
	cmp	qword ptr [rax + rbx*8 - 8], 0
	lea	rbx, [rbx - 1]
	je	.label_1680
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	mov	rcx, r12
	call	build_sifted_states
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_1677
.label_1680:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	mov	rcx, r12
	call	update_cur_sifted_state
	mov	ebp, eax
	test	ebp, ebp
	je	.label_1681
	jmp	.label_1677
.label_1678:
	xor	ebp, ebp
	jmp	.label_1677
.label_1682:
	shl	rbx, 3
	xor	ebp, ebp
	xor	esi, esi
	mov	rdx, rbx
	call	memset
.label_1677:
	mov	rdi, qword ptr [rsp + 0x10]
	call	free
.label_1679:
	mov	eax, ebp
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x412827
	.globl sub_412827
	.type sub_412827, @function
sub_412827:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412830

	.globl merge_state_array
	.type merge_state_array, @function
merge_state_array:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r14, rcx
	mov	r15, rdx
	mov	rbx, rsi
	mov	r12, rdi
	xor	eax, eax
	test	r14, r14
	jle	.label_1686
	xor	ebp, ebp
	lea	r13, [rsp + 8]
	nop	dword ptr [rax + rax]
.label_1685:
	mov	rax, qword ptr [r15 + rbp*8]
	cmp	qword ptr [rbx + rbp*8], 0
	je	.label_1687
	test	rax, rax
	je	.label_1688
	mov	rsi, qword ptr [rbx + rbp*8]
	add	rsi, 8
	mov	rdx, qword ptr [r15 + rbp*8]
	add	rdx, 8
	mov	rdi, r13
	call	re_node_set_init_union
	mov	dword ptr [rsp + 0x24], eax
	test	eax, eax
	jne	.label_1686
	lea	rdi, [rsp + 0x24]
	mov	rsi, r12
	mov	rdx, r13
	call	re_acquire_state
	mov	qword ptr [rbx + rbp*8], rax
	mov	rdi, qword ptr [rsp + 0x18]
	call	free
	mov	eax, dword ptr [rsp + 0x24]
	test	eax, eax
	je	.label_1688
	jmp	.label_1686
	.section	.text
	.align	32
	#Procedure 0x4128b8
	.globl sub_4128b8
	.type sub_4128b8, @function
sub_4128b8:

	nop	dword ptr [rax + rax]
.label_1687:
	mov	qword ptr [rbx + rbp*8], rax
.label_1688:
	inc	rbp
	xor	eax, eax
	cmp	rbp, r14
	jl	.label_1685
.label_1686:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4128dd
	.globl sub_4128dd
	.type sub_4128dd, @function
sub_4128dd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4128e0

	.globl update_cur_sifted_state
	.type update_cur_sifted_state, @function
update_cur_sifted_state:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, rcx
	mov	r15, rdx
	mov	rbx, rdi
	mov	rdx, qword ptr [rbx + 0x98]
	mov	dword ptr [rsp + 0x14], 0
	mov	rax, qword ptr [rbx + 0xb8]
	mov	r14, qword ptr [rax + r15*8]
	lea	r12, [r14 + 8]
	test	r14, r14
	cmove	r12, r14
	cmp	qword ptr [r13 + 8], 0
	je	.label_1689
	test	r14, r14
	je	.label_1692
	mov	rdi, rdx
	mov	qword ptr [rsp + 8], rsi
	mov	rsi, r13
	mov	rbp, rdx
	mov	rdx, r12
	call	add_epsilon_src_nodes
	mov	rdx, rbp
	mov	rsi, qword ptr [rsp + 8]
	mov	dword ptr [rsp + 0x14], eax
	test	eax, eax
	jne	.label_1690
	cmp	qword ptr [rsi + 0x28], 0
	je	.label_1692
	lea	rcx, [rsi + 0x20]
	mov	r8, qword ptr [rbx + 0xd8]
	mov	rdi, rdx
	mov	rsi, r13
	mov	rbp, rdx
	mov	rdx, r12
	mov	r9, r15
	call	check_subexp_limits
	mov	rdx, rbp
	mov	rsi, qword ptr [rsp + 8]
	mov	dword ptr [rsp + 0x14], eax
	test	eax, eax
	jne	.label_1690
.label_1692:
	lea	rdi, [rsp + 0x14]
	mov	rbp, rsi
	mov	rsi, rdx
	mov	rdx, r13
	call	re_acquire_state
	mov	rsi, rbp
	mov	rcx, qword ptr [rsi]
	mov	qword ptr [rcx + r15*8], rax
	mov	eax, dword ptr [rsp + 0x14]
	test	eax, eax
	je	.label_1693
	jmp	.label_1690
.label_1689:
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rax + r15*8], 0
.label_1693:
	test	r14, r14
	je	.label_1691
	mov	rax, qword ptr [rbx + 0xb8]
	mov	rax, qword ptr [rax + r15*8]
	test	byte ptr [rax + 0x68], 0x40
	je	.label_1691
	mov	rdi, rbx
	mov	rdx, r15
	mov	rcx, r12
	call	sift_states_bkref
	mov	dword ptr [rsp + 0x14], eax
	test	eax, eax
	jne	.label_1690
.label_1691:
	xor	eax, eax
.label_1690:
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4129fb
	.globl sub_4129fb
	.type sub_4129fb, @function
sub_4129fb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412a00

	.globl build_sifted_states
	.type build_sifted_states, @function
build_sifted_states:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	qword ptr [rsp + 0x10], rcx
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rsi
	mov	qword ptr [rsp + 0x20], rdi
	mov	rax, qword ptr [rdi + 0xb8]
	mov	r14, qword ptr [rax + rbx*8]
	xor	eax, eax
	cmp	qword ptr [r14 + 0x28], 0
	jle	.label_1694
	mov	rax, qword ptr [rsp + 0x20]
	mov	r12, qword ptr [rax + 0x98]
	mov	rax, qword ptr [rsp + 0x18]
	lea	rax, [rax + 0x20]
	mov	qword ptr [rsp + 8], rax
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_1698:
	mov	rax, qword ptr [r14 + 0x30]
	mov	rbp, qword ptr [rax + r15*8]
	mov	rax, qword ptr [r12]
	mov	r13, rbp
	shl	r13, 4
	test	byte ptr [rax + r13 + 0xa], 0x10
	je	.label_1695
	mov	rsi, qword ptr [rsp + 0x18]
	mov	r8, qword ptr [rsi + 0x18]
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rdx, rbp
	mov	rcx, rbx
	call	sift_states_iter_mb
	test	eax, eax
	jne	.label_1699
.label_1695:
	add	r13, qword ptr [r12]
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, r13
	mov	rdx, rbx
	call	check_node_accept
	test	al, al
	je	.label_1697
	mov	rax, qword ptr [rsp + 0x18]
	mov	rax, qword ptr [rax]
	mov	rdi, qword ptr [rax + rbx*8 + 8]
	test	rdi, rdi
	je	.label_1697
	add	rdi, 8
	mov	rax, qword ptr [r12 + 0x18]
	mov	rsi, qword ptr [rax + rbp*8]
	call	re_node_set_contains
	mov	rcx, rax
	mov	eax, 1
	test	rcx, rcx
	je	.label_1697
.label_1699:
	mov	rcx, qword ptr [rsp + 0x18]
	cmp	qword ptr [rcx + 0x28], 0
	je	.label_1696
	movsxd	rcx, eax
	add	rcx, rbx
	mov	rax, qword ptr [r12 + 0x18]
	mov	rdx, qword ptr [rax + rbp*8]
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 8]
	mov	r8, rbp
	mov	r9, rbx
	call	check_dst_limits
	test	al, al
	jne	.label_1697
.label_1696:
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, rbp
	call	re_node_set_insert
	mov	cl, al
	mov	eax, 0xc
	test	cl, cl
	je	.label_1694
.label_1697:
	inc	r15
	xor	eax, eax
	cmp	r15, qword ptr [r14 + 0x28]
	jl	.label_1698
.label_1694:
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x412b4b
	.globl sub_412b4b
	.type sub_412b4b, @function
sub_412b4b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412b50

	.globl add_epsilon_src_nodes
	.type add_epsilon_src_nodes, @function
add_epsilon_src_nodes:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	rbx, rsi
	mov	r15, rdi
	mov	dword ptr [rsp + 4], 0
	lea	rdi, [rsp + 4]
	mov	rsi, r15
	mov	rdx, rbx
	call	re_acquire_state
	mov	r12, rax
	mov	r13d, dword ptr [rsp + 4]
	test	r13d, r13d
	jne	.label_1700
	mov	rax, r12
	add	r12, 0x38
	cmp	qword ptr [rax + 0x38], 0
	jne	.label_1702
	mov	rsi, qword ptr [rbx + 8]
	mov	rdi, r12
	call	re_node_set_alloc
	mov	dword ptr [rsp + 4], eax
	mov	r13d, 0xc
	test	eax, eax
	jne	.label_1700
	cmp	qword ptr [rbx + 8], 0
	jle	.label_1702
	xor	ebp, ebp
	nop	word ptr [rax + rax]
.label_1701:
	mov	rax, qword ptr [r15 + 0x38]
	mov	rcx, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rcx + rbp*8]
	lea	rcx, [rcx + rcx*2]
	lea	rsi, [rax + rcx*8]
	mov	rdi, r12
	call	re_node_set_merge
	test	eax, eax
	jne	.label_1703
	inc	rbp
	cmp	rbp, qword ptr [rbx + 8]
	jl	.label_1701
	mov	dword ptr [rsp + 4], eax
.label_1702:
	mov	rdi, rbx
	mov	rsi, r14
	mov	rdx, r12
	call	re_node_set_add_intersect
	mov	r13d, eax
.label_1700:
	mov	eax, r13d
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1703:
	mov	dword ptr [rsp + 4], eax
	jmp	.label_1700
	.section	.text
	.align	32
	#Procedure 0x412c16
	.globl sub_412c16
	.type sub_412c16, @function
sub_412c16:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x412c20

	.globl check_subexp_limits
	.type check_subexp_limits, @function
check_subexp_limits:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r14, r9
	mov	qword ptr [rsp + 0x18], r14
	mov	qword ptr [rsp + 0x20], r8
	mov	r9, rcx
	mov	qword ptr [rsp + 0x28], r9
	mov	qword ptr [rsp + 8], rdx
	mov	rdx, rsi
	mov	qword ptr [rsp + 0x30], rdx
	mov	r11, rdi
	xor	eax, eax
	cmp	qword ptr [r9 + 8], 0
	jle	.label_1715
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_1713:
	mov	rax, qword ptr [r9 + 0x10]
	mov	rax, qword ptr [rax + r15*8]
	lea	rax, [rax + rax*4]
	cmp	qword ptr [r8 + rax*8 + 0x10], r14
	jge	.label_1706
	cmp	qword ptr [r8 + rax*8 + 8], r14
	jl	.label_1706
	mov	rcx, qword ptr [r8 + rax*8]
	mov	rsi, qword ptr [r11]
	shl	rcx, 4
	mov	r13, qword ptr [rsi + rcx]
	mov	qword ptr [rsp], r13
	cmp	qword ptr [r8 + rax*8 + 0x18], r14
	jne	.label_1712
	cmp	qword ptr [rdx + 8], 0
	jle	.label_1706
	mov	r12, r8
	mov	r9, r14
	mov	r8, qword ptr [rdx + 8]
	mov	r10, qword ptr [rdx + 0x10]
	mov	rcx, qword ptr [r11]
	mov	r14, -1
	xor	edi, edi
	mov	rsi, -1
	nop	dword ptr [rax]
.label_1714:
	mov	rbx, qword ptr [r10 + rdi*8]
	mov	rbp, rbx
	shl	rbp, 4
	movzx	eax, byte ptr [rcx + rbp + 8]
	cmp	eax, 9
	je	.label_1717
	cmp	eax, 8
	jne	.label_1705
	cmp	r13, qword ptr [rcx + rbp]
	je	.label_1719
	mov	rbx, rsi
.label_1719:
	mov	rsi, rbx
	jmp	.label_1705
	.section	.text
	.align	32
	#Procedure 0x412d08
	.globl sub_412d08
	.type sub_412d08, @function
sub_412d08:

	nop	dword ptr [rax + rax]
.label_1717:
	mov	rax, qword ptr [r11]
	cmp	r13, qword ptr [rax + rbp]
	je	.label_1711
	mov	rbx, r14
.label_1711:
	mov	r14, rbx
.label_1705:
	inc	rdi
	cmp	rdi, r8
	jl	.label_1714
	mov	r13, r14
	test	rsi, rsi
	mov	r14, r9
	mov	r8, r12
	mov	r9, qword ptr [rsp + 0x28]
	js	.label_1716
	mov	rdi, r11
	mov	rcx, qword ptr [rsp + 8]
	mov	qword ptr [rsp + 0x30], rdx
	mov	rbx, r11
	mov	r12, r8
	mov	rbp, r9
	call	sub_epsilon_src_nodes
	mov	r9, rbp
	mov	r8, r12
	mov	r11, rbx
	mov	rdx, qword ptr [rsp + 0x30]
	test	eax, eax
	jne	.label_1715
.label_1716:
	test	r13, r13
	js	.label_1706
	cmp	qword ptr [rdx + 8], 0
	mov	ebp, 0
	jg	.label_1708
	jmp	.label_1706
.label_1712:
	cmp	qword ptr [rdx + 8], 0
	mov	ebp, 0
	jle	.label_1706
	nop	dword ptr [rax]
.label_1709:
	mov	rax, qword ptr [rdx + 0x10]
	mov	rsi, qword ptr [rax + rbp*8]
	mov	rax, qword ptr [r11]
	mov	rcx, rsi
	shl	rcx, 4
	mov	edi, dword ptr [rax + rcx + 8]
	mov	ebx, 0xfe
	and	edi, ebx
	or	edi, 1
	cmp	edi, 9
	jne	.label_1707
	cmp	r13, qword ptr [rax + rcx]
	jne	.label_1707
	mov	rdi, r11
	mov	rcx, qword ptr [rsp + 8]
	mov	r13, rdx
	mov	rbx, r11
	mov	r12, r8
	mov	qword ptr [rsp + 0x10], r15
	mov	r15, r14
	mov	r14, r9
	call	sub_epsilon_src_nodes
	mov	r9, r14
	mov	r14, r15
	mov	r15, qword ptr [rsp + 0x10]
	mov	r8, r12
	mov	r11, rbx
	mov	rdx, r13
	mov	r13, qword ptr [rsp]
	test	eax, eax
	jne	.label_1715
.label_1707:
	inc	rbp
	cmp	rbp, qword ptr [rdx + 8]
	jl	.label_1709
	jmp	.label_1706
.label_1710:
	mov	rdi, r12
	mov	rsi, r14
	mov	rbx, qword ptr [rsp + 0x30]
	mov	rdx, rbx
	mov	rcx, qword ptr [rsp + 8]
	call	sub_epsilon_src_nodes
	mov	rdx, rbx
	test	eax, eax
	mov	r14, qword ptr [rsp + 0x18]
	mov	r8, qword ptr [rsp + 0x20]
	mov	r9, qword ptr [rsp + 0x28]
	mov	r11, r12
	jne	.label_1715
	dec	rbp
	jmp	.label_1704
.label_1708:
	mov	rax, qword ptr [rdx + 0x10]
	mov	r14, qword ptr [rax + rbp*8]
	mov	rax, qword ptr [r11 + 0x38]
	lea	rbx, [r14 + r14*2]
	lea	rdi, [rax + rbx*8]
	mov	rsi, r13
	mov	r12, r11
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1718
	mov	rax, qword ptr [r12 + 0x30]
	lea	rdi, [rax + rbx*8]
	mov	rsi, r13
	call	re_node_set_contains
	test	rax, rax
	je	.label_1710
.label_1718:
	mov	r14, qword ptr [rsp + 0x18]
	mov	r8, qword ptr [rsp + 0x20]
	mov	r9, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x30]
	mov	r11, r12
.label_1704:
	inc	rbp
	cmp	rbp, qword ptr [rdx + 8]
	jl	.label_1708
	nop	word ptr [rax + rax]
.label_1706:
	inc	r15
	xor	eax, eax
	cmp	r15, qword ptr [r9 + 8]
	jl	.label_1713
.label_1715:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x412ece
	.globl sub_412ece
	.type sub_412ece, @function
sub_412ece:

	nop	
	.section	.text
	.align	32
	#Procedure 0x412ed0

	.globl sift_states_bkref
	.type sift_states_bkref, @function
sift_states_bkref:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	rbx, rcx
	mov	qword ptr [rsp + 0x28], rbx
	mov	qword ptr [rsp + 0x58], rdx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x48], rdi
	mov	rbp, qword ptr [rdi + 0x98]
	mov	qword ptr [rsp + 0x50], rbp
	mov	rsi, rdx
	call	search_cur_bkref_entry
	mov	qword ptr [rsp + 0x20], rax
	xor	r12d, r12d
	cmp	rax, -1
	je	.label_1722
	mov	qword ptr [rsp + 0x60], 0
	cmp	qword ptr [rbx + 8], 0
	jle	.label_1722
	mov	rdx, r14
	mov	qword ptr [rsp + 0x38], rdx
	lea	rax, [rdx + 0x20]
	mov	qword ptr [rsp + 0x30], rax
	mov	rax, qword ptr [rsp + 0x58]
	lea	rax, [rax + 1]
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rsp + 0x20]
	lea	rax, [rax*8]
	lea	rax, [rax + rax*4]
	mov	qword ptr [rsp + 0x18], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x40], rax
	nop	dword ptr [rax]
.label_1729:
	mov	rax, qword ptr [rbx + 0x10]
	mov	rcx, qword ptr [rsp + 0x40]
	mov	r15, qword ptr [rax + rcx*8]
	mov	rsi, rbp
	mov	rax, qword ptr [rsi]
	mov	rcx, r15
	shl	rcx, 4
	movzx	eax, byte ptr [rax + rcx + 8]
	cmp	r15, qword ptr [rdx + 0x10]
	jne	.label_1731
	cmp	eax, 4
	jne	.label_1724
	mov	rax, qword ptr [rsp + 0x58]
	cmp	qword ptr [rdx + 0x18], rax
	jne	.label_1726
	jmp	.label_1724
	.section	.text
	.align	32
	#Procedure 0x412fae
	.globl sub_412fae
	.type sub_412fae, @function
sub_412fae:

	nop	
.label_1731:
	cmp	eax, 4
	jne	.label_1724
.label_1726:
	mov	r14, qword ptr [rsp + 0x20]
	lea	rbp, [r14 + r14*4]
	shl	rbp, 3
	mov	rax, qword ptr [rsp + 0x48]
	add	rbp, qword ptr [rax + 0xd8]
	mov	r13, qword ptr [rsp + 0x18]
	nop	word ptr [rax + rax]
.label_1732:
	cmp	qword ptr [rbp], r15
	jne	.label_1727
	mov	rax, qword ptr [rbp + 0x10]
	mov	rcx, qword ptr [rbp + 0x18]
	mov	rbx, rcx
	sub	rbx, rax
	add	rbx, qword ptr [rsp + 0x58]
	cmp	rcx, rax
	jne	.label_1730
	mov	rax, qword ptr [rsi + 0x28]
	lea	rcx, [r15 + r15*2]
	mov	rax, qword ptr [rax + rcx*8 + 0x10]
	jmp	.label_1720
	.section	.text
	.align	32
	#Procedure 0x413011
	.globl sub_413011
	.type sub_413011, @function
sub_413011:

	nop	word ptr cs:[rax + rax]
.label_1730:
	lea	rax, [r15*8]
	add	rax, qword ptr [rsi + 0x18]
.label_1720:
	cmp	rbx, qword ptr [rdx + 0x18]
	jg	.label_1727
	mov	rcx, qword ptr [rdx]
	mov	rdi, qword ptr [rcx + rbx*8]
	test	rdi, rdi
	je	.label_1727
	mov	r12, qword ptr [rax]
	add	rdi, 8
	mov	rsi, r12
	call	re_node_set_contains
	test	rax, rax
	je	.label_1733
	mov	rdi, qword ptr [rsp + 0x48]
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rdx, r15
	mov	rcx, qword ptr [rsp + 0x58]
	mov	r8, r12
	mov	r9, rbx
	call	check_dst_limits
	test	al, al
	mov	rdx, qword ptr [rsp + 0x38]
	mov	rsi, qword ptr [rsp + 0x50]
	jne	.label_1727
	cmp	qword ptr [rsp + 0x60], 0
	jne	.label_1723
	mov	rax, qword ptr [rdx + 0x30]
	mov	qword ptr [rsp + 0x90], rax
	movups	xmm0, xmmword ptr [rdx]
	movups	xmm1, xmmword ptr [rdx + 0x10]
	movups	xmm2, xmmword ptr [rdx + 0x20]
	movaps	xmmword ptr [rsp + 0x80], xmm2
	movaps	xmmword ptr [rsp + 0x70], xmm1
	movaps	xmmword ptr [rsp + 0x60], xmm0
	lea	rdi, [rsp + 0x80]
	mov	rsi, qword ptr [rsp + 0x30]
	mov	rbx, rdx
	call	re_node_set_init_copy
	mov	rdx, rbx
	mov	r12d, eax
	test	r12d, r12d
	jne	.label_1721
.label_1723:
	mov	qword ptr [rsp + 0x70], r15
	mov	rax, qword ptr [rsp + 0x58]
	mov	qword ptr [rsp + 0x78], rax
	lea	rdi, [rsp + 0x80]
	mov	rsi, r14
	mov	rbx, rdx
	call	re_node_set_insert
	mov	rdx, rbx
	mov	r12d, 0xc
	test	al, al
	je	.label_1721
	mov	rax, qword ptr [rsp + 0x60]
	mov	rcx, qword ptr [rsp + 0x58]
	mov	rbx, qword ptr [rax + rcx*8]
	mov	rdi, qword ptr [rsp + 0x48]
	lea	rsi, [rsp + 0x60]
	mov	rbp, rdx
	call	sift_states_backward
	mov	rdx, rbp
	mov	r12d, eax
	test	r12d, r12d
	jne	.label_1721
	mov	rsi, qword ptr [rdx + 8]
	test	rsi, rsi
	je	.label_1725
	mov	rbp, rdx
	mov	rdx, qword ptr [rsp + 0x60]
	mov	rdi, qword ptr [rsp + 0x50]
	mov	rcx, qword ptr [rsp + 0x10]
	call	merge_state_array
	mov	rdx, rbp
	mov	r12d, eax
	test	r12d, r12d
	jne	.label_1721
.label_1725:
	mov	rax, qword ptr [rsp + 0x60]
	mov	rcx, qword ptr [rsp + 0x58]
	mov	qword ptr [rax + rcx*8], rbx
	lea	rbp, [rsp + 0x80]
	mov	rdi, rbp
	mov	rsi, r14
	mov	rbx, rdx
	call	re_node_set_contains
	lea	rsi, [rax - 1]
	mov	rdi, rbp
	call	re_node_set_remove_at
	mov	rdx, rbx
	mov	rax, qword ptr [rsp + 0x48]
	mov	rbp, qword ptr [rax + 0xd8]
	add	rbp, r13
	jmp	.label_1728
.label_1733:
	mov	rdx, qword ptr [rsp + 0x38]
.label_1728:
	mov	rsi, qword ptr [rsp + 0x50]
	nop	word ptr cs:[rax + rax]
.label_1727:
	inc	r14
	add	r13, 0x28
	cmp	byte ptr [rbp + 0x20], 0
	lea	rbp, [rbp + 0x28]
	jne	.label_1732
.label_1724:
	mov	rbp, rsi
	mov	rax, qword ptr [rsp + 0x40]
	inc	rax
	mov	qword ptr [rsp + 0x40], rax
	xor	r12d, r12d
	mov	rbx, qword ptr [rsp + 0x28]
	cmp	rax, qword ptr [rbx + 8]
	jl	.label_1729
.label_1721:
	cmp	qword ptr [rsp + 0x60], 0
	je	.label_1722
	mov	rdi, qword ptr [rsp + 0x90]
	call	free
.label_1722:
	mov	eax, r12d
	add	rsp, 0x98
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x413231
	.globl sub_413231
	.type sub_413231, @function
sub_413231:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413240

	.globl re_node_set_add_intersect
	.type re_node_set_add_intersect, @function
re_node_set_add_intersect:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r12, rsi
	mov	r15, rdi
	mov	rdx, qword ptr [r12 + 8]
	xor	eax, eax
	test	rdx, rdx
	je	.label_1734
	mov	rcx, qword ptr [r14 + 8]
	test	rcx, rcx
	je	.label_1734
	add	rcx, rdx
	mov	rax, qword ptr [r15 + 8]
	add	rax, rcx
	mov	rbx, qword ptr [r15]
	cmp	rax, rbx
	jle	.label_1745
	add	rbx, rcx
	mov	rdi, qword ptr [r15 + 0x10]
	lea	rsi, [rbx*8]
	call	realloc
	mov	rcx, rax
	mov	eax, 0xc
	test	rcx, rcx
	je	.label_1734
	mov	qword ptr [r15 + 0x10], rcx
	mov	qword ptr [r15], rbx
.label_1745:
	mov	rcx, qword ptr [r15 + 8]
	mov	rdx, qword ptr [r12 + 8]
	lea	r8, [rdx + rcx]
	mov	r9, qword ptr [r14 + 8]
	add	r8, r9
	dec	rcx
.label_1749:
	dec	rdx
	mov	rax, qword ptr [r12 + 0x10]
	mov	rbx, qword ptr [r14 + 0x10]
	mov	rdi, r9
.label_1742:
	lea	r9, [rdi - 1]
	mov	rsi, qword ptr [rbx + rdi*8 - 8]
	nop	dword ptr [rax + rax]
.label_1744:
	cmp	qword ptr [rax + rdx*8], rsi
	je	.label_1741
	jl	.label_1743
	test	rdx, rdx
	lea	rdx, [rdx - 1]
	jg	.label_1744
	jmp	.label_1738
	.section	.text
	.align	32
	#Procedure 0x4132f6
	.globl sub_4132f6
	.type sub_4132f6, @function
sub_4132f6:

	nop	word ptr cs:[rax + rax]
.label_1743:
	cmp	rdi, 2
	mov	rdi, r9
	jge	.label_1742
	jmp	.label_1738
	.section	.text
	.align	32
	#Procedure 0x41330b
	.globl sub_41330b
	.type sub_41330b, @function
sub_41330b:

	nop	dword ptr [rax + rax]
.label_1741:
	test	rcx, rcx
	js	.label_1737
	mov	rax, qword ptr [r15 + 0x10]
	mov	rsi, qword ptr [r12 + 0x10]
	mov	rsi, qword ptr [rsi + rdx*8]
	nop	word ptr cs:[rax + rax]
.label_1748:
	cmp	qword ptr [rax + rcx*8], rsi
	jle	.label_1747
	test	rcx, rcx
	lea	rcx, [rcx - 1]
	jg	.label_1748
	jmp	.label_1737
.label_1747:
	test	rcx, rcx
	js	.label_1737
	mov	rax, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [rax + rcx*8]
	mov	rsi, qword ptr [r12 + 0x10]
	cmp	rax, qword ptr [rsi + rdx*8]
	je	.label_1736
	nop	dword ptr [rax]
.label_1737:
	mov	rax, qword ptr [r12 + 0x10]
	mov	rax, qword ptr [rax + rdx*8]
	mov	rsi, qword ptr [r15 + 0x10]
	mov	qword ptr [rsi + r8*8 - 8], rax
	dec	r8
.label_1736:
	test	rdx, rdx
	jle	.label_1738
	cmp	rdi, 2
	jge	.label_1749
.label_1738:
	mov	rcx, qword ptr [r15 + 8]
	mov	r10, qword ptr [r12 + 8]
	mov	rax, qword ptr [r14 + 8]
	lea	rdx, [rcx + r10]
	lea	r11, [rax + rdx - 1]
	mov	rdx, r11
	sub	rdx, r8
	lea	r9, [rdx + 1]
	lea	rsi, [rdx + rcx + 1]
	mov	qword ptr [r15 + 8], rsi
	test	rcx, rcx
	jle	.label_1735
	test	rdx, rdx
	js	.label_1735
	add	r10, rax
	add	r10, rcx
	dec	rcx
	sub	r10, r8
	xor	edx, edx
.label_1740:
	mov	rdi, qword ptr [r15 + 0x10]
	lea	rax, [rdi + r10*8]
	nop	dword ptr [rax]
.label_1746:
	mov	rsi, qword ptr [rdi + r11*8]
	mov	rbx, qword ptr [rdi + rcx*8]
	cmp	rsi, rbx
	jg	.label_1739
	mov	qword ptr [rax + rcx*8], rbx
	test	rcx, rcx
	lea	rcx, [rcx - 1]
	jg	.label_1746
	jmp	.label_1735
.label_1739:
	dec	r11
	dec	r10
	dec	r9
	mov	qword ptr [rax + rcx*8], rsi
	jne	.label_1740
	jmp	.label_1750
.label_1735:
	mov	rdx, r9
.label_1750:
	mov	rdi, qword ptr [r15 + 0x10]
	lea	rsi, [rdi + r8*8]
	shl	rdx, 3
	call	memcpy
	xor	eax, eax
.label_1734:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x41341f
	.globl sub_41341f
	.type sub_41341f, @function
sub_41341f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x413420

	.globl sub_epsilon_src_nodes
	.type sub_epsilon_src_nodes, @function
sub_epsilon_src_nodes:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	qword ptr [rsp + 8], rcx
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x20], rdi
	mov	rax, qword ptr [rdi + 0x38]
	lea	rcx, [rsi + rsi*2]
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x30], xmm0
	mov	qword ptr [rsp + 0x40], 0
	cmp	qword ptr [rax + rcx*8 + 8], 0
	jle	.label_1754
	mov	qword ptr [rsp + 0x10], rdx
	lea	rdx, [rax + rcx*8]
	mov	qword ptr [rsp + 0x18], rdx
	lea	r13, [rax + rcx*8 + 8]
	lea	r15, [rax + rcx*8 + 0x10]
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_1753:
	mov	rax, qword ptr [r15]
	mov	rax, qword ptr [rax + r12*8]
	cmp	rax, qword ptr [rsp + 0x28]
	je	.label_1751
	mov	rcx, qword ptr [rsp + 0x20]
	mov	rcx, qword ptr [rcx]
	mov	rdx, rax
	shl	rdx, 4
	test	byte ptr [rcx + rdx + 8], 8
	je	.label_1751
	mov	rcx, qword ptr [rsp + 0x20]
	mov	rcx, qword ptr [rcx + 0x28]
	lea	rbx, [rax + rax*2]
	mov	rax, qword ptr [rcx + rbx*8 + 0x10]
	mov	r14, qword ptr [rax]
	mov	rbp, -1
	cmp	qword ptr [rcx + rbx*8 + 8], 2
	jl	.label_1756
	mov	rbp, qword ptr [rax + 8]
.label_1756:
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, r14
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1755
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r14
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1759
.label_1755:
	test	rbp, rbp
	jle	.label_1751
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, rbp
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1751
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, rbp
	call	re_node_set_contains
	test	rax, rax
	je	.label_1751
.label_1759:
	mov	rax, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [rax + 0x38]
	lea	rdx, [rax + rbx*8]
	lea	rdi, [rsp + 0x30]
	mov	rsi, qword ptr [rsp + 8]
	call	re_node_set_add_intersect
	mov	ebp, eax
	test	ebp, ebp
	jne	.label_1758
	nop	word ptr [rax + rax]
.label_1751:
	inc	r12
	mov	rax, qword ptr [r13]
	cmp	r12, rax
	jl	.label_1753
	test	rax, rax
	mov	r12, qword ptr [rsp + 0x10]
	jle	.label_1754
	xor	ebx, ebx
	lea	r14, [rsp + 0x30]
	nop	word ptr cs:[rax + rax]
.label_1757:
	mov	rax, qword ptr [r15]
	mov	rbp, qword ptr [rax + rbx*8]
	mov	rdi, r14
	mov	rsi, rbp
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1752
	mov	rdi, r12
	mov	rsi, rbp
	call	re_node_set_contains
	lea	rsi, [rax - 1]
	mov	rdi, r12
	call	re_node_set_remove_at
.label_1752:
	inc	rbx
	cmp	rbx, qword ptr [r13]
	jl	.label_1757
.label_1754:
	mov	rdi, qword ptr [rsp + 0x40]
	call	free
	xor	ebp, ebp
.label_1760:
	mov	eax, ebp
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1758:
	mov	rdi, qword ptr [rsp + 0x40]
	call	free
	jmp	.label_1760
	.section	.text
	.align	32
	#Procedure 0x4135e0

	.globl check_dst_limits
	.type check_dst_limits, @function
check_dst_limits:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r14, r9
	mov	qword ptr [rsp + 0x30], r14
	mov	qword ptr [rsp + 0x28], r8
	mov	qword ptr [rsp + 0x20], rcx
	mov	qword ptr [rsp + 0x18], rdx
	mov	rbx, rsi
	mov	rbp, rdi
	mov	rsi, rcx
	call	search_cur_bkref_entry
	mov	qword ptr [rsp + 0x10], rax
	mov	rdi, rbp
	mov	rsi, r14
	call	search_cur_bkref_entry
	mov	qword ptr [rsp + 8], rax
	cmp	qword ptr [rbx + 8], 0
	jle	.label_1761
	mov	r14, qword ptr [rbp + 0x98]
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_1763:
	mov	rax, qword ptr [rbp + 0xd8]
	mov	rcx, qword ptr [rbx + 0x10]
	mov	rsi, qword ptr [rcx + r12*8]
	lea	rcx, [rsi + rsi*4]
	mov	rax, qword ptr [rax + rcx*8]
	mov	rcx, qword ptr [r14]
	shl	rax, 4
	mov	r15, qword ptr [rcx + rax]
	mov	rdi, rbp
	mov	rdx, r15
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r8, qword ptr [rsp + 0x20]
	mov	r9, qword ptr [rsp + 0x10]
	call	check_dst_limits_calc_pos
	mov	r13d, eax
	mov	rax, qword ptr [rbx + 0x10]
	mov	rsi, qword ptr [rax + r12*8]
	mov	rdi, rbp
	mov	rdx, r15
	mov	rcx, qword ptr [rsp + 0x28]
	mov	r8, qword ptr [rsp + 0x30]
	mov	r9, qword ptr [rsp + 8]
	call	check_dst_limits_calc_pos
	cmp	eax, r13d
	mov	al, 1
	jne	.label_1762
	inc	r12
	cmp	r12, qword ptr [rbx + 8]
	jl	.label_1763
	xor	eax, eax
	jmp	.label_1762
.label_1761:
	xor	eax, eax
.label_1762:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4136c6
	.globl sub_4136c6
	.type sub_4136c6, @function
sub_4136c6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4136d0

	.globl check_dst_limits_calc_pos
	.type check_dst_limits_calc_pos, @function
check_dst_limits_calc_pos:
	mov	r10, qword ptr [rdi + 0xd8]
	lea	rsi, [rsi + rsi*4]
	mov	r11, qword ptr [r10 + rsi*8 + 0x10]
	mov	eax, 0xffffffff
	cmp	r11, r8
	jg	.label_1764
	mov	r10, qword ptr [r10 + rsi*8 + 0x18]
	mov	eax, 1
	cmp	r10, r8
	jl	.label_1764
	cmp	r11, r8
	sete	al
	movzx	r11d, al
	cmp	r10, r8
	sete	al
	movzx	esi, al
	add	esi, esi
	xor	eax, eax
	or	esi, r11d
	je	.label_1764
	mov	r8, r9
	jmp	check_dst_limits_calc_pos_1
.label_1764:
	ret	
	.section	.text
	.align	32
	#Procedure 0x41371b
	.globl sub_41371b
	.type sub_41371b, @function
sub_41371b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413720

	.globl check_dst_limits_calc_pos_1
	.type check_dst_limits_calc_pos_1, @function
check_dst_limits_calc_pos_1:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x48
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x30], rcx
	mov	rbx, rdx
	mov	r13d, esi
	mov	qword ptr [rsp + 0x38], rdi
	mov	rbp, qword ptr [rdi + 0x98]
	mov	rax, qword ptr [rbp + 0x30]
	lea	rcx, [rcx + rcx*2]
	cmp	qword ptr [rax + rcx*8 + 8], 0
	jle	.label_1771
	lea	rdx, [rax + rcx*8 + 8]
	mov	qword ptr [rsp + 0x20], rdx
	lea	rax, [rax + rcx*8 + 0x10]
	mov	qword ptr [rsp + 0x28], rax
	mov	eax, 1
	mov	cl, bl
	shl	rax, cl
	mov	qword ptr [rsp + 0x18], rax
	xor	rax, 0xffff
	mov	qword ptr [rsp + 0x10], rax
	mov	eax, r13d
	and	eax, 2
	mov	dword ptr [rsp + 8], eax
	shr	eax, 1
	cmp	rbx, 0x3f
	setg	cl
	or	cl, al
	mov	byte ptr [rsp + 0xf], cl
	mov	eax, r13d
	and	eax, 1
	mov	dword ptr [rsp + 4], eax
	xor	r15d, r15d
	nop	word ptr cs:[rax + rax]
.label_1776:
	mov	rax, qword ptr [rsp + 0x28]
	mov	rax, qword ptr [rax]
	mov	r12, qword ptr [rax + r15*8]
	mov	rax, qword ptr [rbp]
	mov	rdx, r12
	shl	rdx, 4
	lea	rcx, [rax + rdx]
	movzx	eax, byte ptr [rax + rdx + 8]
	cmp	eax, 9
	je	.label_1765
	cmp	eax, 8
	je	.label_1772
	cmp	eax, 4
	jne	.label_1766
	cmp	qword ptr [rsp + 0x40], -1
	je	.label_1766
	mov	rax, qword ptr [rsp + 0x40]
	lea	r14, [rax + rax*4]
	shl	r14, 3
	mov	rax, qword ptr [rsp + 0x38]
	add	r14, qword ptr [rax + 0xd8]
.label_1775:
	cmp	qword ptr [r14], r12
	jne	.label_1768
	cmp	rbx, 0x3f
	jg	.label_1777
	movzx	eax, word ptr [r14 + 0x22]
	test	qword ptr [rsp + 0x18], rax
	je	.label_1768
.label_1777:
	mov	rax, qword ptr [rbp + 0x28]
	lea	rcx, [r12 + r12*2]
	mov	rax, qword ptr [rax + rcx*8 + 0x10]
	mov	rcx, qword ptr [rax]
	cmp	rcx, qword ptr [rsp + 0x30]
	je	.label_1778
	mov	rdi, qword ptr [rsp + 0x38]
	mov	esi, r13d
	mov	rdx, rbx
	mov	r8, qword ptr [rsp + 0x40]
	call	check_dst_limits_calc_pos_1
	mov	ecx, eax
	test	ecx, ecx
	je	.label_1773
	mov	eax, 0xffffffff
	cmp	ecx, -1
	je	.label_1774
	cmp	rbx, 0x3f
	jg	.label_1768
	jmp	.label_1770
.label_1773:
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_1770
	xor	eax, eax
	cmp	dword ptr [rsp + 8], 0
	je	.label_1768
	jmp	.label_1774
.label_1770:
	movzx	eax, word ptr [r14 + 0x22]
	mov	rcx, qword ptr [rsp + 0x10]
	and	eax, ecx
	mov	word ptr [r14 + 0x22], ax
	nop	dword ptr [rax]
.label_1768:
	cmp	byte ptr [r14 + 0x20], 0
	lea	r14, [r14 + 0x28]
	jne	.label_1775
	jmp	.label_1766
	.section	.text
	.align	32
	#Procedure 0x4138c1
	.globl sub_4138c1
	.type sub_4138c1, @function
sub_4138c1:

	nop	word ptr cs:[rax + rax]
.label_1765:
	cmp	dword ptr [rsp + 8], 0
	je	.label_1766
	xor	eax, eax
	jmp	.label_1769
	.section	.text
	.align	32
	#Procedure 0x4138db
	.globl sub_4138db
	.type sub_4138db, @function
sub_4138db:

	nop	dword ptr [rax + rax]
.label_1772:
	cmp	dword ptr [rsp + 4], 0
	je	.label_1766
	mov	eax, 0xffffffff
.label_1769:
	cmp	qword ptr [rcx], rbx
	je	.label_1774
.label_1766:
	inc	r15
	mov	rax, qword ptr [rsp + 0x20]
	cmp	r15, qword ptr [rax]
	jl	.label_1776
.label_1771:
	shr	r13d, 1
	and	r13d, 1
	jmp	.label_1767
.label_1778:
	shl	r13d, 0x1f
	sar	r13d, 0x1f
.label_1767:
	mov	eax, r13d
.label_1774:
	add	rsp, 0x48
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x413925
	.globl sub_413925
	.type sub_413925, @function
sub_413925:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413930

	.globl sift_states_iter_mb
	.type sift_states_iter_mb, @function
sift_states_iter_mb:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r13, r8
	mov	rbp, rcx
	mov	r14, rdx
	mov	r12, rsi
	mov	rax, rdi
	mov	r15, qword ptr [rax + 0x98]
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rax
	call	check_node_accept_bytes
	mov	ebx, eax
	test	ebx, ebx
	jle	.label_1780
	movsxd	rax, ebx
	add	rax, rbp
	cmp	rax, r13
	jg	.label_1780
	mov	rcx, qword ptr [r12]
	mov	rdi, qword ptr [rcx + rax*8]
	test	rdi, rdi
	je	.label_1779
	add	rdi, 8
	mov	rax, qword ptr [r15 + 0x18]
	mov	rsi, qword ptr [rax + r14*8]
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1780
.label_1779:
	xor	ebx, ebx
.label_1780:
	mov	eax, ebx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4139a6
	.globl sub_4139a6
	.type sub_4139a6, @function
sub_4139a6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4139b0

	.globl free_fail_stack_return
	.type free_fail_stack_return, @function
free_fail_stack_return:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	test	r14, r14
	je	.label_1781
	xor	ebx, ebx
	cmp	qword ptr [r14], 0
	jle	.label_1783
	xor	r15d, r15d
	nop	dword ptr [rax + rax]
.label_1782:
	mov	rax, qword ptr [r14 + 0x10]
	mov	rdi, qword ptr [rax + rbx + 0x28]
	call	free
	mov	rax, qword ptr [r14 + 0x10]
	mov	rdi, qword ptr [rax + rbx + 0x10]
	call	free
	inc	r15
	add	rbx, 0x30
	cmp	r15, qword ptr [r14]
	jl	.label_1782
.label_1783:
	mov	rdi, qword ptr [r14 + 0x10]
	pop	rbx
	pop	r14
	pop	r15
	jmp	free
.label_1781:
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x413a0c
	.globl sub_413a0c
	.type sub_413a0c, @function
sub_413a0c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x413a10

	.globl update_regs
	.type update_regs, @function
update_regs:
	mov	rdi, qword ptr [rdi]
	shl	rcx, 4
	lea	rax, [rdi + rcx]
	mov	ecx, dword ptr [rdi + rcx + 8]
	movzx	edi, cl
	cmp	edi, 9
	je	.label_1785
	cmp	edi, 8
	jne	.label_1784
	mov	rax, qword ptr [rax]
	inc	rax
	cmp	rax, r9
	jge	.label_1784
	shl	rax, 4
	mov	qword ptr [rsi + rax], r8
	mov	qword ptr [rsi + rax + 8], -1
	ret	
.label_1785:
	mov	rax, qword ptr [rax]
	inc	rax
	cmp	rax, r9
	jge	.label_1784
	shl	rax, 4
	cmp	qword ptr [rsi + rax], r8
	jge	.label_1787
	mov	qword ptr [rsi + rax + 8], r8
	shl	r9, 4
	mov	rdi, rdx
	mov	rdx, r9
	jmp	memcpy
.label_1787:
	test	ecx, 0x80000
	je	.label_1786
	cmp	qword ptr [rdx + rax], -1
	je	.label_1786
	shl	r9, 4
	mov	rdi, rsi
	mov	rsi, rdx
	mov	rdx, r9
	jmp	memcpy
.label_1786:
	mov	qword ptr [rsi + rax + 8], r8
.label_1784:
	ret	
	.section	.text
	.align	32
	#Procedure 0x413a99
	.globl sub_413a99
	.type sub_413a99, @function
sub_413a99:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x413aa0

	.globl pop_fail_stack
	.type pop_fail_stack, @function
pop_fail_stack:
	push	r15
	push	r14
	push	rbx
	mov	r14, r8
	mov	r15, rdi
	mov	rdi, qword ptr [r15]
	lea	rax, [rdi - 1]
	mov	qword ptr [r15], rax
	test	rdi, rdi
	jle	.label_1788
	mov	rdi, qword ptr [r15 + 0x10]
	shl	rax, 4
	lea	rbx, [rax + rax*2]
	mov	rax, qword ptr [rdi + rbx]
	mov	qword ptr [rsi], rax
	mov	rax, qword ptr [r15 + 0x10]
	mov	rsi, qword ptr [rax + rbx + 0x10]
	shl	rdx, 4
	mov	rdi, rcx
	call	memcpy
	mov	rdi, qword ptr [r14 + 0x10]
	call	free
	mov	rax, qword ptr [r15 + 0x10]
	mov	rdi, qword ptr [rax + rbx + 0x10]
	call	free
	mov	rax, qword ptr [r15 + 0x10]
	mov	rcx, qword ptr [rax + rbx + 0x28]
	mov	qword ptr [r14 + 0x10], rcx
	movups	xmm0, xmmword ptr [rax + rbx + 0x18]
	movups	xmmword ptr [r14], xmm0
	mov	rax, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [rax + rbx + 8]
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_1788:
	mov	edi, OFFSET FLAT:.str.26_0
	mov	esi, OFFSET FLAT:.str.22_0
	mov	edx, 0x555
	mov	ecx, OFFSET FLAT:__PRETTY_FUNCTION__.pop_fail_stack
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x413b37
	.globl sub_413b37
	.type sub_413b37, @function
sub_413b37:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413b40

	.globl proceed_next_node
	.type proceed_next_node, @function
proceed_next_node:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r13, r8
	mov	rbx, rcx
	mov	rbp, rdi
	mov	r15, qword ptr [rbp + 0x98]
	mov	rax, qword ptr [r15]
	mov	r14, r13
	shl	r14, 4
	mov	ecx, dword ptr [rax + r14 + 8]
	test	cl, 8
	jne	.label_1796
	test	ecx, 0x100000
	jne	.label_1800
	mov	qword ptr [rsp + 0x20], rbx
	mov	qword ptr [rsp + 0x18], r9
	movzx	ecx, cl
	cmp	ecx, 4
	jne	.label_1789
	mov	rax, qword ptr [rax + r14]
	shl	rax, 4
	mov	rdi, qword ptr [rax + rdx + 0x10]
	mov	rax, qword ptr [rax + rdx + 0x18]
	mov	rbx, rax
	sub	rbx, rdi
	cmp	qword ptr [rsp + 0x60], 0
	je	.label_1794
	cmp	rax, -1
	mov	r12, -1
	je	.label_1792
	cmp	rdi, -1
	je	.label_1792
	cmp	rax, rdi
	je	.label_1794
	mov	qword ptr [rsp + 0x10], rax
	mov	rax, qword ptr [rbp + 0x30]
	mov	rcx, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rcx]
	sub	rax, rsi
	cmp	rax, rbx
	jl	.label_1792
	mov	rax, qword ptr [rbp + 8]
	add	rsi, rax
	mov	qword ptr [rsp + 8], rdi
	mov	rcx, qword ptr [rsp + 8]
	lea	rdi, [rax + rcx]
	mov	rdx, rbx
	call	memcmp
	mov	rdi, qword ptr [rsp + 8]
	test	eax, eax
	mov	rax, qword ptr [rsp + 0x10]
	jne	.label_1792
.label_1794:
	cmp	rax, rdi
	jne	.label_1790
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, r13
	call	re_node_set_insert
	mov	r12, -2
	test	al, al
	je	.label_1792
	mov	rax, qword ptr [r15 + 0x28]
	lea	rcx, [r13 + r13*2]
	mov	rax, qword ptr [rax + rcx*8 + 0x10]
	mov	r12, qword ptr [rax]
	mov	rax, qword ptr [rsp + 0x20]
	mov	rax, qword ptr [rax]
	mov	rcx, qword ptr [rbp + 0xb8]
	mov	rdi, qword ptr [rcx + rax*8]
	add	rdi, 8
	mov	rsi, r12
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1792
	jmp	.label_1790
.label_1796:
	mov	qword ptr [rsp + 8], rsi
	mov	qword ptr [rsp + 0x10], rdx
	mov	rax, qword ptr [rbx]
	mov	qword ptr [rsp + 0x20], rbx
	mov	rcx, qword ptr [rbp + 0xb8]
	mov	r14, qword ptr [rcx + rax*8]
	mov	rbx, qword ptr [r15 + 0x28]
	mov	rdi, r9
	mov	qword ptr [rsp + 0x18], r9
	mov	rsi, r13
	call	re_node_set_insert
	mov	r12, -2
	test	al, al
	je	.label_1792
	lea	rax, [r13 + r13*2]
	mov	r12, -1
	cmp	qword ptr [rbx + rax*8 + 8], 0
	jle	.label_1792
	add	r14, 8
	lea	r15, [rbx + rax*8 + 8]
	mov	r13, qword ptr [rbx + rax*8 + 0x10]
	mov	r12, -1
	xor	ebp, ebp
	nop	word ptr cs:[rax + rax]
.label_1795:
	mov	rbx, qword ptr [r13 + rbp*8]
	mov	rdi, r14
	mov	rsi, rbx
	call	re_node_set_contains
	test	rax, rax
	je	.label_1791
	cmp	r12, -1
	jne	.label_1793
	mov	r12, rbx
.label_1791:
	inc	rbp
	cmp	rbp, qword ptr [r15]
	jl	.label_1795
	jmp	.label_1792
.label_1800:
	mov	qword ptr [rsp + 0x18], r9
	mov	rcx, qword ptr [rbx]
	mov	qword ptr [rsp + 0x20], rbx
	mov	rdi, r15
	mov	rsi, r13
	mov	rdx, rbp
	call	check_node_accept_bytes
	movsxd	rbx, eax
.label_1790:
	test	rbx, rbx
	jne	.label_1797
.label_1789:
	add	r14, qword ptr [r15]
	mov	rax, qword ptr [rsp + 0x20]
	mov	rdx, qword ptr [rax]
	mov	rdi, rbp
	mov	rsi, r14
	call	check_node_accept
	mov	r12, -1
	mov	ebx, 1
	test	al, al
	je	.label_1792
.label_1797:
	mov	rax, qword ptr [r15 + 0x18]
	mov	r14, qword ptr [rax + r13*8]
	mov	rax, qword ptr [rsp + 0x20]
	add	rbx, qword ptr [rax]
	mov	qword ptr [rax], rbx
	cmp	qword ptr [rsp + 0x60], 0
	je	.label_1798
	mov	r12, -1
	cmp	rbx, qword ptr [rbp + 0xa8]
	jg	.label_1792
	mov	rax, qword ptr [rbp + 0xb8]
	mov	rdi, qword ptr [rax + rbx*8]
	test	rdi, rdi
	je	.label_1792
	add	rdi, 8
	mov	rsi, r14
	call	re_node_set_contains
	test	rax, rax
	je	.label_1792
.label_1798:
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [rax + 8], 0
	mov	r12, r14
	jmp	.label_1792
.label_1793:
	mov	rbp, qword ptr [rsp + 0x18]
	mov	rdi, rbp
	mov	rsi, r12
	call	re_node_set_contains
	test	rax, rax
	jne	.label_1799
	mov	r9, rbp
	mov	rdi, qword ptr [rsp + 0x60]
	test	rdi, rdi
	je	.label_1792
	mov	rax, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rax]
	mov	rdx, rbx
	mov	rcx, qword ptr [rsp + 8]
	mov	r8, qword ptr [rsp + 0x10]
	call	push_fail_stack
	mov	rbx, -2
	test	eax, eax
	je	.label_1792
.label_1799:
	mov	r12, rbx
.label_1792:
	mov	rax, r12
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x413e36
	.globl sub_413e36
	.type sub_413e36, @function
sub_413e36:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413e40

	.globl push_fail_stack
	.type push_fail_stack, @function
push_fail_stack:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	qword ptr [rsp + 0x10], r9
	mov	qword ptr [rsp + 8], r8
	mov	r15, rcx
	mov	r13, rdx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	r14, qword ptr [rbx]
	lea	rcx, [r14 + 1]
	mov	qword ptr [rbx], rcx
	mov	rax, qword ptr [rbx + 8]
	cmp	rcx, rax
	jne	.label_1801
	mov	rdi, qword ptr [rbx + 0x10]
	shl	rax, 5
	lea	rsi, [rax + rax*2]
	call	realloc
	test	rax, rax
	je	.label_1802
	shl	qword ptr [rbx + 8], 1
	mov	qword ptr [rbx + 0x10], rax
.label_1801:
	mov	rax, qword ptr [rbx + 0x10]
	mov	rcx, r14
	shl	rcx, 4
	lea	r12, [rcx + rcx*2]
	mov	qword ptr [rax + r12], rbp
	mov	rax, qword ptr [rbx + 0x10]
	mov	qword ptr [rax + r12 + 8], r13
	shl	r15, 4
	mov	rdi, r15
	call	malloc
	mov	rcx, qword ptr [rbx + 0x10]
	mov	qword ptr [rcx + r12 + 0x10], rax
	mov	rax, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rax + r12 + 0x10]
	test	rdi, rdi
	je	.label_1802
	mov	rsi, qword ptr [rsp + 8]
	mov	rdx, r15
	call	memcpy
	mov	rax, qword ptr [rbx + 0x10]
	lea	rcx, [r14 + r14*2]
	shl	rcx, 4
	lea	rdi, [rax + rcx + 0x18]
	mov	rsi, qword ptr [rsp + 0x10]
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	jmp	re_node_set_init_copy
.label_1802:
	mov	eax, 0xc
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x413f1e
	.globl sub_413f1e
	.type sub_413f1e, @function
sub_413f1e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x413f20
	.globl c_isalnum
	.type c_isalnum, @function
c_isalnum:

	mov	al, 1
	lea	ecx, [rdi - 0x41]
	cmp	ecx, 0x39
	ja	.label_1803
	movabs	rdx, 0x3ffffff03ffffff
	bt	rdx, rcx
	jae	.label_1803
.label_1804:
	ret	
.label_1803:
	add	edi, -0x30
	cmp	edi, 0xa
	jb	.label_1804
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x413f46
	.globl sub_413f46
	.type sub_413f46, @function
sub_413f46:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413f50
	.globl c_isalpha
	.type c_isalpha, @function
c_isalpha:

	add	edi, -0x41
	cmp	edi, 0x39
	ja	.label_1805
	movabs	rax, 0x3ffffff03ffffff
	mov	cl, dil
	shr	rax, cl
	and	eax, 1
	ret	
.label_1805:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x413f6f
	.globl sub_413f6f
	.type sub_413f6f, @function
sub_413f6f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x413f70
	.globl c_isascii
	.type c_isascii, @function
c_isascii:

	cmp	edi, 0x80
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x413f7a
	.globl sub_413f7a
	.type sub_413f7a, @function
sub_413f7a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413f80
	.globl c_isblank
	.type c_isblank, @function
c_isblank:

	cmp	edi, 0x20
	sete	cl
	cmp	edi, 9
	sete	al
	or	al, cl
	ret	
	.section	.text
	.align	32
	#Procedure 0x413f8f
	.globl sub_413f8f
	.type sub_413f8f, @function
sub_413f8f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x413f90
	.globl c_iscntrl
	.type c_iscntrl, @function
c_iscntrl:

	mov	al, 1
	cmp	edi, 0x20
	jae	.label_1806
.label_1807:
	ret	
.label_1806:
	cmp	edi, 0x7f
	je	.label_1807
	xor	eax, eax
	jmp	.label_1807
	.section	.text
	.align	32
	#Procedure 0x413fa1
	.globl sub_413fa1
	.type sub_413fa1, @function
sub_413fa1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413fb0
	.globl c_isdigit
	.type c_isdigit, @function
c_isdigit:

	add	edi, -0x30
	cmp	edi, 0xa
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x413fba
	.globl sub_413fba
	.type sub_413fba, @function
sub_413fba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413fc0
	.globl c_isgraph
	.type c_isgraph, @function
c_isgraph:

	add	edi, -0x21
	cmp	edi, 0x5e
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x413fca
	.globl sub_413fca
	.type sub_413fca, @function
sub_413fca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413fd0
	.globl c_islower
	.type c_islower, @function
c_islower:

	add	edi, -0x61
	cmp	edi, 0x1a
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x413fda
	.globl sub_413fda
	.type sub_413fda, @function
sub_413fda:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413fe0
	.globl c_isprint
	.type c_isprint, @function
c_isprint:

	add	edi, -0x20
	cmp	edi, 0x5f
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x413fea
	.globl sub_413fea
	.type sub_413fea, @function
sub_413fea:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x413ff0
	.globl c_ispunct
	.type c_ispunct, @function
c_ispunct:

	mov	al, 1
	lea	ecx, [rdi - 0x21]
	cmp	ecx, 0x3f
	ja	.label_1808
	movabs	rdx, 0xfc000000fe007fff
	bt	rdx, rcx
	jae	.label_1808
.label_1809:
	ret	
.label_1808:
	add	edi, -0x7b
	cmp	edi, 4
	jb	.label_1809
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x414016
	.globl sub_414016
	.type sub_414016, @function
sub_414016:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x414020
	.globl c_isspace
	.type c_isspace, @function
c_isspace:

	add	edi, -9
	cmp	edi, 0x17
	ja	.label_1810
	mov	eax, 0x80001f
	mov	cl, dil
	shr	eax, cl
	and	eax, 1
	ret	
.label_1810:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x414039
	.globl sub_414039
	.type sub_414039, @function
sub_414039:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x414040

	.globl c_isupper
	.type c_isupper, @function
c_isupper:
	add	edi, -0x41
	cmp	edi, 0x1a
	setb	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x41404a
	.globl sub_41404a
	.type sub_41404a, @function
sub_41404a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x414050
	.globl c_isxdigit
	.type c_isxdigit, @function
c_isxdigit:

	add	edi, -0x30
	cmp	edi, 0x36
	ja	.label_1811
	movabs	rax, 0x7e0000007e03ff
	mov	cl, dil
	shr	rax, cl
	and	eax, 1
	ret	
.label_1811:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x41406f
	.globl sub_41406f
	.type sub_41406f, @function
sub_41406f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x414070
	.globl c_tolower
	.type c_tolower, @function
c_tolower:

	lea	ecx, [rdi - 0x41]
	lea	eax, [rdi + 0x20]
	cmp	ecx, 0x1a
	cmovae	eax, edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x41407d
	.globl sub_41407d
	.type sub_41407d, @function
sub_41407d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x414080
	.globl c_toupper
	.type c_toupper, @function
c_toupper:

	lea	ecx, [rdi - 0x61]
	lea	eax, [rdi - 0x20]
	cmp	ecx, 0x1a
	cmovae	eax, edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x41408d
	.globl sub_41408d
	.type sub_41408d, @function
sub_41408d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x414090

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	rdi, rbx
	call	ferror_unlocked
	mov	ebp, eax
	mov	rdi, rbx
	call	rpl_fclose
	test	ebp, ebp
	je	.label_1813
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_1812
	call	__errno_location
	mov	dword ptr [rax], 0
	jmp	.label_1812
.label_1813:
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_1812
	test	cl, cl
	jne	.label_1812
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
.label_1812:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4140f6
	.globl sub_4140f6
	.type sub_4140f6, @function
sub_4140f6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x414100

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_1815
	movzx	ecx, byte ptr [rax]
	cmp	ecx, 0x43
	jne	.label_1816
	cmp	byte ptr [rax + 1], 0
	je	.label_1814
.label_1816:
	mov	esi, OFFSET FLAT:.str.1_4
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_1815
.label_1814:
	xor	ebx, ebx
.label_1815:
	mov	al, bl
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x414134
	.globl sub_414134
	.type sub_414134, @function
sub_414134:

	nop	word ptr cs:[rax + rax]
	nop	
	.section	.text
	.align	32
	#Procedure 0x414140

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:.str
	cmovne	rcx, rax
	mov	eax, OFFSET FLAT:.str.1_5
	cmp	byte ptr [rcx], 0
	je	.label_1817
	mov	rax, rcx
.label_1817:
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x414166
	.globl sub_414166
	.type sub_414166, @function
sub_414166:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x414170

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	32
	#Procedure 0x414187
	.globl sub_414187
	.type sub_414187, @function
sub_414187:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4141f5
	.globl sub_4141f5
	.type sub_4141f5, @function
sub_4141f5:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x414202
	.globl sub_414202
	.type sub_414202, @function
sub_414202:

	nop	word ptr cs:[rax + rax]
	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x414226
	.globl sub_414226
	.type sub_414226, @function
sub_414226:

	nop	word ptr cs:[rax + rax]
	.section .plt.got
	.align 16
	.label_2008:
	.section .text
	.align 32
	.label_2009:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_13:
	.quad .label_1848
	.quad .label_15
	.quad .label_15
	.quad .label_1849
	.quad .label_15
	.quad .label_15
	.quad .label_1850
	.quad .label_15
	.quad .label_1850
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl longopts
	.type longopts, @object
longopts:
	.quad .str.28
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 110
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.29
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 113
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.30
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.31
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 107
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 122
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.33
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.34
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 98
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.35
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.36
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad .str.37
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.long 0xe
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 0
	.byte 0
	.byte 0
label_20:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl emit_ancillary_info.infomap
	.type emit_ancillary_info.infomap, @object
emit_ancillary_info.infomap:
	.quad .str.66
	.quad .str.67
	.quad .str.3
	.quad .str.68
	.quad .str.69
	.quad .str.70
	.quad .str.71
	.quad .str.70
	.quad .str.72
	.quad .str.70
	.quad .str.73
	.quad .str.70
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl .str.1
	.type .str.1, @object
.str.1:
	.asciz "memory exhausted"
	.globl .str.4
	.type .str.4, @object
.str.4:
	.ascii "/usr/local/share/"
	.globl .str.8_2
	.type .str.8_2, @object
.str.8_2:
	.asciz "locale"
	.globl .str.5
	.type .str.5, @object
.str.5:
	.asciz "xx"
	.globl .str.6
	.type .str.6, @object
.str.6:
	.asciz "f:b:kn:sqz"
	.globl .str.7
	.type .str.7, @object
.str.7:
	.asciz "invalid number"
	.globl .str.8
	.type .str.8, @object
.str.8:
	.asciz "csplit"
	.globl .str.17
	.type .str.17, @object
.str.17:
	.ascii "GNU "
	.globl .str.3
	.type .str.3, @object
.str.3:
	.asciz "coreutils"
	.globl .str.10
	.type .str.10, @object
.str.10:
	.asciz "Stuart Kemp"
	.globl .str.11
	.type .str.11, @object
.str.11:
	.asciz "David MacKenzie"
	.globl .str.12
	.type .str.12, @object
.str.12:
	.asciz "missing operand"
	.globl .str.13
	.type .str.13, @object
.str.13:
	.asciz "missing operand after %s"
	.globl .str.14
	.type .str.14, @object
.str.14:
	.asciz "read error"
	.globl .str.15
	.type .str.15, @object
.str.15:
	.asciz "Try '%s --help' for more information.\n"
	.globl .str.16
	.type .str.16, @object
.str.16:
	.asciz "Usage: %s [OPTION]... FILE PATTERN...\n"
	.globl .str.17_0
	.type .str.17_0, @object
.str.17_0:
	.asciz "Output pieces of FILE separated by PATTERN(s) to files 'xx00', 'xx01', ...,\nand output byte counts of each piece to standard output.\n"
	.globl .str.18
	.type .str.18, @object
.str.18:
	.asciz "\nRead standard input if FILE is -\n"
	.globl .str.19
	.type .str.19, @object
.str.19:
	.asciz "  -b, --suffix-format=FORMAT  use sprintf FORMAT instead of %02d\n  -f, --prefix=PREFIX        use PREFIX instead of 'xx'\n  -k, --keep-files           do not remove output files on errors\n"
	.globl .str.20
	.type .str.20, @object
.str.20:
	.asciz "      --suppress-matched     suppress the lines matching PATTERN\n"
	.globl .str.21
	.type .str.21, @object
.str.21:
	.asciz "  -n, --digits=DIGITS        use specified number of digits instead of 2\n  -s, --quiet, --silent      do not print counts of output file sizes\n  -z, --elide-empty-files    remove empty output files\n"
	.globl .str.22
	.type .str.22, @object
.str.22:
	.asciz "      --help     display this help and exit\n"
	.globl .str.23
	.type .str.23, @object
.str.23:
	.asciz "      --version  output version information and exit\n"
	.globl .str.24
	.type .str.24, @object
.str.24:
	.asciz "\nEach PATTERN may be:\n  INTEGER            copy up to but not including specified line number\n  /REGEXP/[OFFSET]   copy up to but not including a matching line\n  %REGEXP%[OFFSET]   skip to, but not including a matching line\n  {INTEGER}          repeat the previous pattern specified number of times\n  {*}                repeat the previous pattern as many times as possible\n\nA line OFFSET is a required '+' or '-' followed by a positive integer.\n"
	.globl .str.25
	.type .str.25, @object
.str.25:
	.asciz "write error for %s"
	.globl .str.27
	.type .str.27, @object
.str.27:
	.asciz "%0*u"
	.globl .str.28
	.type .str.28, @object
.str.28:
	.asciz "digits"
	.globl .str.29
	.type .str.29, @object
.str.29:
	.asciz "quiet"
	.globl .str.30
	.type .str.30, @object
.str.30:
	.asciz "silent"
	.globl .str.31
	.type .str.31, @object
.str.31:
	.asciz "keep-files"
	.globl .str.32
	.type .str.32, @object
.str.32:
	.asciz "elide-empty-files"
	.globl .str.33
	.type .str.33, @object
.str.33:
	.asciz "prefix"
	.globl .str.34
	.type .str.34, @object
.str.34:
	.asciz "suffix-format"
	.globl .str.35
	.type .str.35, @object
.str.35:
	.asciz "suppress-matched"
	.globl .str.36
	.type .str.36, @object
.str.36:
	.asciz "help"
	.globl .str.37
	.type .str.37, @object
.str.37:
	.asciz "version"
	.globl .str.38
	.type .str.38, @object
.str.38:
	.asciz "too many %% conversion specifications in suffix"
	.globl .str.39
	.type .str.39, @object
.str.39:
	.asciz "missing %% conversion specification in suffix"
	.globl .str.40
	.type .str.40, @object
.str.40:
	.asciz "missing conversion specifier in suffix"
	.globl .str.41
	.type .str.41, @object
.str.41:
	.ascii "invalid conversion specifier in suffix: %"
	.globl .str.5_2
	.type .str.5_2, @object
.str.5_2:
	.asciz "c"
	.globl .str.42
	.type .str.42, @object
.str.42:
	.asciz "invalid conversion specifier in suffix: \\%.3o"
	.globl .str.43
	.type .str.43, @object
.str.43:
	.asciz "invalid flags in conversion specification: %%%c%c"
	.globl .str.45
	.type .str.45, @object
.str.45:
	.asciz "cannot open %s for reading"
	.globl .str.46
	.type .str.46, @object
.str.46:
	.asciz "%s: invalid pattern"
	.globl .str.47
	.type .str.47, @object
.str.47:
	.asciz "%s: line number must be greater than zero"
	.globl .str.48
	.type .str.48, @object
.str.48:
	.ascii "line number %s is smaller than preceding line number, "
	.globl .str.2
	.type .str.2, @object
.str.2:
	.asciz "%s"
	.globl .str.49
	.type .str.49, @object
.str.49:
	.asciz "warning: line number %s is the same as preceding line number"
	.globl .str.50
	.type .str.50, @object
.str.50:
	.asciz "%s: closing delimiter '%c' missing"
	.globl .str.51
	.type .str.51, @object
.str.51:
	.asciz "%s: invalid regular expression: %s"
	.globl .str.52
	.type .str.52, @object
.str.52:
	.asciz "%s: integer expected after delimiter"
	.globl .str.53
	.type .str.53, @object
.str.53:
	.asciz "%s: '}' is required in repeat count"
	.globl .str.54
	.type .str.54, @object
.str.54:
	.ascii "%s}: integer required between '{' and '}"
	.globl .str.12_0
	.type .str.12_0, @object
.str.12_0:
	.asciz "'"
	.globl .str.55
	.type .str.55, @object
.str.55:
	.asciz "error in regular expression search"
	.globl .str.56
	.type .str.56, @object
.str.56:
	.asciz "b"
	.globl .str.57
	.type .str.57, @object
.str.57:
	.asciz "src/csplit.c"
	.globl __PRETTY_FUNCTION__.find_line
	.type __PRETTY_FUNCTION__.find_line, @object
__PRETTY_FUNCTION__.find_line:
	.asciz "struct cstring *find_line(uintmax_t)"
	.globl .str.58
	.type .str.58, @object
.str.58:
	.asciz "%s: %s: match not found"
	.globl .str.59
	.type .str.59, @object
.str.59:
	.asciz " on repetition %s\n"
	.globl .str.62
	.type .str.62, @object
.str.62:
	.asciz "input disappeared"
	.globl .str.63
	.type .str.63, @object
.str.63:
	.ascii "%s: "
	.globl .str.61
	.type .str.61, @object
.str.61:
	.asciz "%s: line number out of range"
	.globl .str.64
	.type .str.64, @object
.str.64:
	.asciz "w"
	.globl .str.65
	.type .str.65, @object
.str.65:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
	.globl .str.66
	.type .str.66, @object
.str.66:
	.asciz "["
	.globl .str.67
	.type .str.67, @object
.str.67:
	.asciz "test invocation"
	.globl .str.68
	.type .str.68, @object
.str.68:
	.ascii "Multi-call"
	.globl .str.80
	.type .str.80, @object
.str.80:
	.asciz " invocation"
	.globl .str.69
	.type .str.69, @object
.str.69:
	.asciz "sha224sum"
	.globl .str.70
	.type .str.70, @object
.str.70:
	.asciz "sha2 utilities"
	.globl .str.71
	.type .str.71, @object
.str.71:
	.asciz "sha256sum"
	.globl .str.72
	.type .str.72, @object
.str.72:
	.asciz "sha384sum"
	.globl .str.73
	.type .str.73, @object
.str.73:
	.asciz "sha512sum"
	.globl .str.74
	.type .str.74, @object
.str.74:
	.asciz "\n%s online help: <%s>\n"
	.globl .str.18_0
	.type .str.18_0, @object
.str.18_0:
	.asciz "https://www.gnu.org/software/coreutils/"
	.globl .str.76
	.type .str.76, @object
.str.76:
	.ascii "en"
	.globl .str.2_2
	.type .str.2_2, @object
.str.2_2:
	.asciz "_"
	.globl .str.77
	.type .str.77, @object
.str.77:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
	.globl .str.78
	.type .str.78, @object
.str.78:
	.asciz "Full documentation <%s%s>\n"
	.globl .str.79
	.type .str.79, @object
.str.79:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
	.globl .str_6
	.type .str_6, @object
.str_6:
	.asciz "8.31"
	.globl .str_0
	.type .str_0, @object
.str_0:
	.asciz "write error"
	.globl .str_1
	.type .str_1, @object
.str_1:
	.asciz "%s: %s"
	.globl .str_2
	.type .str_2, @object
.str_2:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
	.globl .str.1_0
	.type .str.1_0, @object
.str.1_0:
	.asciz "/.libs/"
	.globl .str.2_0
	.type .str.2_0, @object
.str.2_0:
	.asciz "lt-"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_202:
	.quad .label_1999
	.quad .label_2000
	.quad .label_2001
	.quad .label_2002
	.quad .label_2003
	.quad .label_2004
	.quad .label_2005
	.quad .label_194
	.quad .label_2006
	.quad .label_2006
	.quad .label_2007
label_238:
	.quad .label_1824
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_281
	.quad .label_1825
	.quad .label_1826
	.quad .label_284
	.quad .label_1827
	.quad .label_1828
	.quad .label_1829
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_299
	.quad .label_305
	.quad .label_1830
	.quad .label_1830
	.quad .label_1831
	.quad .label_1830
	.quad .label_246
	.quad .label_1830
	.quad .label_1832
	.quad .label_1830
	.quad .label_1830
	.quad .label_1830
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_1830
	.quad .label_1830
	.quad .label_1830
	.quad .label_1830
	.quad .label_1833
	.quad .label_299
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_1830
	.quad .label_1834
	.quad .label_246
	.quad .label_1830
	.quad .label_246
	.quad .label_1830
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_246
	.quad .label_1835
	.quad .label_1830
	.quad .label_1835
	.quad .label_1831
	.quad .str_5
	.quad .str.1_6
	.quad .str.2_3
	.quad .str.3_2
	.quad .str.4_1
	.quad .str.5_2
	.quad .str.6_2
	.quad .str.7_2
	.quad .str.8_2
	.quad .str.9_1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.globl .str_5
	.type .str_5, @object
.str_5:
	.asciz "literal"
	.globl .str.1_6
	.type .str.1_6, @object
.str.1_6:
	.asciz "shell"
	.globl .str.2_3
	.type .str.2_3, @object
.str.2_3:
	.asciz "shell-always"
	.globl .str.3_2
	.type .str.3_2, @object
.str.3_2:
	.ascii "shell-"
	.globl .str.7_2
	.type .str.7_2, @object
.str.7_2:
	.asciz "escape"
	.globl .str.4_1
	.type .str.4_1, @object
.str.4_1:
	.asciz "shell-escape-always"
	.globl .str.6_2
	.type .str.6_2, @object
.str.6_2:
	.asciz "c-maybe"
	.globl .str.9_1
	.type .str.9_1, @object
.str.9_1:
	.asciz "clocale"
	.globl .str.10_0
	.type .str.10_0, @object
.str.10_0:
	.byte 34
	.byte 0
	.globl .str.11_0
	.type .str.11_0, @object
.str.11_0:
	.asciz "`"
	.asciz "UTF-8"
	.globl .str.14_0
	.type .str.14_0, @object
.str.14_0:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
	.globl .str.15_0
	.type .str.15_0, @object
.str.15_0:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
	.byte 71
	.byte 66
	.byte 49
	.byte 56
	.byte 48
	.byte 51
	.byte 48
	.byte 0
	.globl .str.17_1
	.type .str.17_1, @object
.str.17_1:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
	.globl .str.18_1
	.type .str.18_1, @object
.str.18_1:
	.byte 161
	.byte 175
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_368:
	.quad .label_1901
	.quad .label_1902
	.quad .label_1903
	.quad .label_1904
	.quad .label_1905
	.quad .label_1906
	.quad .label_1907
	.quad .label_1908
	.quad .label_1909
	.quad .label_1910
	.globl .str_3
	.type .str_3, @object
.str_3:
	.ascii "%s (%s) "
	.globl .str.26
	.type .str.26, @object
.str.26:
	.asciz "%s\n"
	.globl .str.1_1
	.type .str.1_1, @object
.str.1_1:
	.asciz "%s %s\n"
	.globl .str.2_1
	.type .str.2_1, @object
.str.2_1:
	.asciz "(C)"
	.globl .str.3_0
	.type .str.3_0, @object
.str.3_0:
	.ascii "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"
	.globl .str.60
	.type .str.60, @object
.str.60:
	.ascii "\n"
	.globl .str
	.type .str, @object
.str:
	.byte 0
	.globl .str.4_0
	.type .str.4_0, @object
.str.4_0:
	.asciz "Written by %s.\n"
	.globl .str.5_0
	.type .str.5_0, @object
.str.5_0:
	.asciz "Written by %s and %s.\n"
	.globl .str.6_0
	.type .str.6_0, @object
.str.6_0:
	.asciz "Written by %s, %s, and %s.\n"
	.globl .str.7_0
	.type .str.7_0, @object
.str.7_0:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
	.globl .str.8_0
	.type .str.8_0, @object
.str.8_0:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
	.globl .str.9
	.type .str.9, @object
.str.9:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
	.globl .str.10_1
	.type .str.10_1, @object
.str.10_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
	.globl .str.11_1
	.type .str.11_1, @object
.str.11_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
	.globl .str.12_1
	.type .str.12_1, @object
.str.12_1:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
	.globl .str.13_0
	.type .str.13_0, @object
.str.13_0:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
	.globl .str.14_1
	.type .str.14_1, @object
.str.14_1:
	.asciz "\nReport bugs to: %s\n"
	.globl .str.15_1
	.type .str.15_1, @object
.str.15_1:
	.asciz "bug-coreutils@gnu.org"
	.globl .str.16_0
	.type .str.16_0, @object
.str.16_0:
	.asciz "%s home page: <%s>\n"
	.globl .str.19_0
	.type .str.19_0, @object
.str.19_0:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.byte 0
label_398:
	.quad .label_1914
	.quad .label_412
	.quad .label_412
	.quad .label_1915
	.quad .label_412
	.quad .label_1916
	.quad .label_412
	.quad .label_412
	.quad .label_412
	.quad .label_1917
	.quad .label_412
	.quad .label_1918
	.quad .label_412
	.quad .label_412
	.quad .label_1919
label_416:
	.quad .label_1922
	.quad .label_402
	.quad .label_412
	.quad .label_412
	.quad .label_412
	.quad .label_1916
	.quad .label_412
	.quad .label_412
	.quad .label_412
	.quad .label_1917
	.quad .label_412
	.quad .label_1918
	.globl .str_4
	.type .str_4, @object
.str_4:
	.asciz "0 <= strtol_base && strtol_base <= 36"
	.globl .str.1_2
	.type .str.1_2, @object
.str.1_2:
	.asciz "./lib/xstrtol.c"
	.globl __PRETTY_FUNCTION__.xstrtoimax
	.type __PRETTY_FUNCTION__.xstrtoimax, @object
__PRETTY_FUNCTION__.xstrtoimax:
	.asciz "strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_438:
	.quad .label_1926
	.quad .label_424
	.quad .label_424
	.quad .label_1927
	.quad .label_424
	.quad .label_1928
	.quad .label_424
	.quad .label_424
	.quad .label_424
	.quad .label_1929
	.quad .label_424
	.quad .label_1930
	.quad .label_424
	.quad .label_424
	.quad .label_1931
label_430:
	.quad .label_1961
	.quad .label_436
	.quad .label_424
	.quad .label_424
	.quad .label_424
	.quad .label_1928
	.quad .label_424
	.quad .label_424
	.quad .label_424
	.quad .label_1929
	.quad .label_424
	.quad .label_1930
	.globl __PRETTY_FUNCTION__.xstrtoumax
	.type __PRETTY_FUNCTION__.xstrtoumax, @object
__PRETTY_FUNCTION__.xstrtoumax:
	.asciz "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_565:
	.quad .label_1936
	.quad .label_1936
	.quad .label_1937
	.quad .label_1938
	.quad .label_572
label_667:
	.quad .label_1939
	.quad .label_664
	.quad .label_1940
	.quad .label_664
	.quad .label_1941
	.quad .label_666
	.quad .label_675
	.quad .label_664
	.quad .label_664
	.quad .label_664
	.quad .label_664
	.quad .label_1942
label_781:
	.quad .label_1894
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_1895
	.quad .label_1896
	.quad .label_1897
	.quad .label_1898
	.quad .label_767
	.quad .label_767
	.quad .label_1899
label_775:
	.quad .label_1945
	.quad .label_1946
	.quad .label_1947
	.quad .label_767
	.quad .label_1948
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_1949
	.quad .label_767
	.quad .label_767
	.quad .label_1950
	.quad .label_767
	.quad .label_1951
	.quad .label_1952
	.quad .label_767
	.quad .label_767
	.quad .label_1953
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_1954
label_768:
	.quad .label_1972
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_1973
	.quad .label_767
	.quad .label_767
	.quad .label_767
	.quad .label_1974
	.quad .label_1975
	.quad .label_1976
label_823:
	.quad .label_1856
	.quad .label_825
	.quad .label_825
	.quad .label_1857
	.quad .label_1858
	.quad .label_825
	.quad .label_825
	.quad .label_1859
	.quad .label_1860
	.quad .label_825
	.quad .label_1861
	.quad .label_1862
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_1861
	.quad .label_1861
	.quad .label_1863
	.quad .label_825
	.quad .label_825
	.quad .label_1864
	.quad .label_828
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_825
	.quad .label_1865
	.quad .label_1865
	.quad .label_1866
	.quad .label_1866
	.quad .label_1867
label_879:
	.quad .label_1962
	.quad .label_1963
	.quad .label_1964
	.quad .label_1965
	.quad .label_1966
label_945:
	.quad .label_1987
	.quad .label_944
	.quad .label_944
	.quad .label_944
	.quad .label_1988
	.quad .label_944
	.quad .label_1988
	.quad .label_944
	.quad .label_1988
label_1091:
	.quad .label_1957
	.quad .label_1087
	.quad .label_1958
	.quad .label_1087
	.quad .label_1087
	.quad .label_1087
	.quad .label_1959
	.quad .label_1959
	.quad .label_1960
	.quad .label_1960
	.quad .label_1959
	.quad .label_1087
	.quad .label_1087
	.quad .label_1087
	.quad .label_1093
label_1583:
	.quad .label_1995
	.quad .label_1576
	.quad .label_1996
	.quad .label_1576
	.quad .label_1997
	.quad .label_1576
	.quad .label_1998
	.globl __re_error_msgid
	.type __re_error_msgid, @object
__re_error_msgid:
	.asciz "Success"
	.asciz "No match"
	.asciz "Invalid regular expression"
	.asciz "Invalid collation character"
	.asciz "Invalid character class name"
	.asciz "Trailing backslash"
	.asciz "Invalid back reference"
	.asciz "Unmatched [, [^, [:, [., or [="
	.asciz "Unmatched ( or \\("
	.asciz "Unmatched \\{"
	.asciz "Invalid content of \\{\\}"
	.asciz "Invalid range end"
	.asciz "Memory exhausted"
	.asciz "Invalid preceding regular expression"
	.asciz "Premature end of regular expression"
	.asciz "Regular expression too big"
	.asciz "Unmatched ) or \\)"
	.byte 0
	.byte 0
	.globl __re_error_msgid_idx
	.type __re_error_msgid_idx, @object
__re_error_msgid_idx:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 44
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 101
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 120
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 143
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 174
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 192
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 205
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 229
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 247
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 45
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 81
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 108
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl utf8_sb_map
	.type utf8_sb_map, @object
utf8_sb_map:
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_1344:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_1343:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl .str.1_3
	.type .str.1_3, @object
.str.1_3:
	.asciz "alnum"
	.globl .str.3_1
	.type .str.3_1, @object
.str.3_1:
	.asciz "space"
	.globl .str.6_1
	.type .str.6_1, @object
.str.6_1:
	.asciz "./lib/regcomp.c"
	.globl __PRETTY_FUNCTION__.parse_bracket_exp
	.type __PRETTY_FUNCTION__.parse_bracket_exp, @object
__PRETTY_FUNCTION__.parse_bracket_exp:
	.asciz "bin_tree_t *parse_bracket_exp(re_string_t *, re_dfa_t *, re_token_t *, reg_syntax_t, reg_errcode_t *)"
	.globl .str.7_1
	.type .str.7_1, @object
.str.7_1:
	.asciz "upper"
	.globl .str.8_1
	.type .str.8_1, @object
.str.8_1:
	.asciz "lower"
	.globl .str.9_0
	.type .str.9_0, @object
.str.9_0:
	.asciz "alpha"
	.globl .str.10_2
	.type .str.10_2, @object
.str.10_2:
	.asciz "cntrl"
	.globl .str.12_2
	.type .str.12_2, @object
.str.12_2:
	.asciz "print"
	.globl .str.13_1
	.type .str.13_1, @object
.str.13_1:
	.asciz "blank"
	.globl .str.14_2
	.type .str.14_2, @object
.str.14_2:
	.asciz "graph"
	.globl .str.15_2
	.type .str.15_2, @object
.str.15_2:
	.asciz "punct"
	.globl .str.16_1
	.type .str.16_1, @object
.str.16_1:
	.ascii "x"
	.globl .str.11_2
	.type .str.11_2, @object
.str.11_2:
	.asciz "digit"
	.globl .str.17_2
	.type .str.17_2, @object
.str.17_2:
	.asciz "node->next == NULL"
	.globl __PRETTY_FUNCTION__.link_nfa_nodes
	.type __PRETTY_FUNCTION__.link_nfa_nodes, @object
__PRETTY_FUNCTION__.link_nfa_nodes:
	.asciz "reg_errcode_t link_nfa_nodes(void *, bin_tree_t *)"
	.globl .str.18_2
	.type .str.18_2, @object
.str.18_2:
	.asciz "left > -1"
	.globl .str.19_1
	.type .str.19_1, @object
.str.19_1:
	.asciz "right > -1"
	.globl .str.20_0
	.type .str.20_0, @object
.str.20_0:
	.asciz "!IS_EPSILON_NODE (node->token.type)"
	.globl .str.21_0
	.type .str.21_0, @object
.str.21_0:
	.asciz "pmatch[0].rm_so == start"
	.globl .str.22_0
	.type .str.22_0, @object
.str.22_0:
	.asciz "./lib/regexec.c"
	.globl __PRETTY_FUNCTION__.re_search_stub
	.type __PRETTY_FUNCTION__.re_search_stub, @object
__PRETTY_FUNCTION__.re_search_stub:
	.asciz "regoff_t re_search_stub(struct re_pattern_buffer *, const char *, Idx, Idx, regoff_t, Idx, struct re_registers *, _Bool)"
	.globl .str.23_0
	.type .str.23_0, @object
.str.23_0:
	.asciz "regs_allocated == REGS_FIXED"
	.globl __PRETTY_FUNCTION__.re_copy_regs
	.type __PRETTY_FUNCTION__.re_copy_regs, @object
__PRETTY_FUNCTION__.re_copy_regs:
	.asciz "unsigned int re_copy_regs(struct re_registers *, regmatch_t *, Idx, int)"
	.globl .str.24_0
	.type .str.24_0, @object
.str.24_0:
	.asciz "regs->num_regs >= nregs"
	.globl .str.25_0
	.type .str.25_0, @object
.str.25_0:
	.asciz "err == REG_ESPACE"
	.globl __PRETTY_FUNCTION__.check_matching
	.type __PRETTY_FUNCTION__.check_matching, @object
__PRETTY_FUNCTION__.check_matching:
	.asciz "Idx check_matching(re_match_context_t *, _Bool, Idx *)"
	.globl .str.26_0
	.type .str.26_0, @object
.str.26_0:
	.ascii "num >= "
	.globl .str.5_1
	.type .str.5_1, @object
.str.5_1:
	.asciz "0"
	.globl __PRETTY_FUNCTION__.pop_fail_stack
	.type __PRETTY_FUNCTION__.pop_fail_stack, @object
__PRETTY_FUNCTION__.pop_fail_stack:
	.asciz "Idx pop_fail_stack(struct re_fail_stack_t *, Idx *, Idx, regmatch_t *, re_node_set *)"
	.asciz "C"
	.globl .str.1_4
	.type .str.1_4, @object
.str.1_4:
	.asciz "POSIX"
	.globl .str.1_5
	.type .str.1_5, @object
.str.1_5:
	.asciz "ASCII"
	.label_2010:
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl digits
	.type digits, @object
digits:
	.long 0x2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad .str_6
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_321:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl completed.7594
	.type completed.7594, @object
completed.7594:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl global_argv
	.type global_argv, @object
global_argv:
	.quad 0x0
	.globl controls
	.type controls, @object
controls:
	.quad 0x0
	.globl control_used
	.type control_used, @object
control_used:
	.quad 0x0
	.globl suppress_count
	.type suppress_count, @object
suppress_count:
	.byte 0x0
	.globl remove_files
	.type remove_files, @object
remove_files:
	.byte 0x0
	.globl suppress_matched
	.type suppress_matched, @object
suppress_matched:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl prefix
	.type prefix, @object
prefix:
	.quad 0x0
	.globl suffix
	.type suffix, @object
suffix:
	.quad 0x0
	.globl elide_empty_files
	.type elide_empty_files, @object
elide_empty_files:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl filename_space
	.type filename_space, @object
filename_space:
	.quad 0x0
	.globl caught_signals
	.type caught_signals, @object
caught_signals:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_29:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_28:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_27:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_26:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_25:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_24:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_23:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl output_stream
	.type output_stream, @object
output_stream:
	.quad 0x0
	.globl output_filename
	.type output_filename, @object
output_filename:
	.quad 0x0
	.globl bytes_written
	.type bytes_written, @object
bytes_written:
	.quad 0x0
	.globl files_created
	.type files_created, @object
files_created:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl parse_patterns.last_val
	.type parse_patterns.last_val, @object
parse_patterns.last_val:
	.quad 0x0
	.globl new_control_record.control_allocated
	.type new_control_record.control_allocated, @object
new_control_record.control_allocated:
	.quad 0x0
	.globl current_line
	.type current_line, @object
current_line:
	.quad 0x0
	.globl remove_line.prev_buf
	.type remove_line.prev_buf, @object
remove_line.prev_buf:
	.quad 0x0
	.globl head
	.type head, @object
head:
	.quad 0x0
	.globl have_read_eof
	.type have_read_eof, @object
have_read_eof:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl hold_count
	.type hold_count, @object
hold_count:
	.quad 0x0
	.globl hold_area
	.type hold_area, @object
hold_area:
	.quad 0x0
	.globl last_line_number
	.type last_line_number, @object
last_line_number:
	.quad 0x0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_332:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_331:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_330:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec
	.type rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, @object
rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl rpl_re_syntax_options
	.type rpl_re_syntax_options, @object
rpl_re_syntax_options:
	.quad 0x0
		.globl _end
	.type _end, @notype
_end: