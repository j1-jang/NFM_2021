Build cfg of: "usage" (62 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "close_stdout_set_ignore_EPIPE" (60 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (61 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "set_program_name" (59 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (55 text sections remaining)
Build cfg of: "set_char_quoting" (56 text sections remaining)
Build cfg of: "set_quoting_style" (57 text sections remaining)
Build cfg of: "get_quoting_style" (58 text sections remaining)
Build cfg of: "set_custom_quoting" (54 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (53 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (52 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "version_etc_arn" (51 text sections remaining)
Build cfg of: "version_etc_ar" (50 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (49 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (48 text sections remaining)
Build cfg of: "rpl_calloc" (47 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "hard_locale" (46 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Calling "rpl_fseeko" but CFG not yet computed.
Delayed building cfg of: rpl_fflush
Build cfg of: "rpl_fseeko" (45 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (44 text sections remaining)
Build cfg of: "main" (43 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (42 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "xnmalloc" (41 text sections remaining)
Build cfg of: "xmalloc" (40 text sections remaining)
Build cfg of: "xnrealloc" (39 text sections remaining)
Build cfg of: "xrealloc" (38 text sections remaining)
Build cfg of: "x2nrealloc" (37 text sections remaining)
Build cfg of: "xcharalloc" (36 text sections remaining)
Build cfg of: "x2realloc" (35 text sections remaining)
Build cfg of: "xzalloc" (34 text sections remaining)
Build cfg of: "xcalloc" (33 text sections remaining)
Build cfg of: "xmemdup" (32 text sections remaining)
Build cfg of: "xstrdup" (31 text sections remaining)
Build cfg of: "rpl_mbrtowc" (30 text sections remaining)
Build cfg of: "locale_charset" (29 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (28 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (27 text sections remaining)
Build cfg of: "quotearg_alloc" (26 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (25 text sections remaining)
Build cfg of: "quotearg_n" (24 text sections remaining)
Build cfg of: "quotearg_n_options" (23 text sections remaining)
Build cfg of: "quotearg_n_mem" (22 text sections remaining)
Build cfg of: "quotearg" (21 text sections remaining)
Build cfg of: "quotearg_mem" (20 text sections remaining)
Build cfg of: "quotearg_n_style" (19 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (18 text sections remaining)
Build cfg of: "quotearg_style" (17 text sections remaining)
Build cfg of: "quotearg_style_mem" (16 text sections remaining)
Build cfg of: "quotearg_char_mem" (15 text sections remaining)
Build cfg of: "quotearg_char" (14 text sections remaining)
Build cfg of: "quotearg_colon" (13 text sections remaining)
Build cfg of: "quotearg_colon_mem" (12 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (11 text sections remaining)
Build cfg of: "quotearg_n_custom" (10 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (9 text sections remaining)
Build cfg of: "quotearg_custom" (8 text sections remaining)
Build cfg of: "quotearg_custom_mem" (7 text sections remaining)
Build cfg of: "quote_n_mem" (6 text sections remaining)
Build cfg of: "quote_mem" (5 text sections remaining)
Build cfg of: "quote_n" (4 text sections remaining)
Build cfg of: "quote" (3 text sections remaining)
Build cfg of: "gettext_quote" (2 text sections remaining)
Build cfg of: "rpl_fclose" (1 text sections remaining)
Build cfg of: "close_stdout" (0 text sections remaining)
Build cfg of: "usage" (62 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "close_stdout_set_ignore_EPIPE" (60 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (61 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "set_program_name" (59 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (55 text sections remaining)
Build cfg of: "set_char_quoting" (56 text sections remaining)
Build cfg of: "set_quoting_style" (57 text sections remaining)
Build cfg of: "get_quoting_style" (58 text sections remaining)
Build cfg of: "set_custom_quoting" (54 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (53 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (52 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "version_etc_arn" (51 text sections remaining)
Build cfg of: "version_etc_ar" (50 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (49 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (48 text sections remaining)
Build cfg of: "rpl_calloc" (47 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "hard_locale" (46 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Calling "rpl_fseeko" but CFG not yet computed.
Delayed building cfg of: rpl_fflush
Build cfg of: "rpl_fseeko" (45 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (44 text sections remaining)
Build cfg of: "main" (43 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (42 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "xnmalloc" (41 text sections remaining)
Build cfg of: "xmalloc" (40 text sections remaining)
Build cfg of: "xnrealloc" (39 text sections remaining)
Build cfg of: "xrealloc" (38 text sections remaining)
Build cfg of: "x2nrealloc" (37 text sections remaining)
Build cfg of: "xcharalloc" (36 text sections remaining)
Build cfg of: "x2realloc" (35 text sections remaining)
Build cfg of: "xzalloc" (34 text sections remaining)
Build cfg of: "xcalloc" (33 text sections remaining)
Build cfg of: "xmemdup" (32 text sections remaining)
Build cfg of: "xstrdup" (31 text sections remaining)
Build cfg of: "rpl_mbrtowc" (30 text sections remaining)
Build cfg of: "locale_charset" (29 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (28 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (27 text sections remaining)
Build cfg of: "quotearg_alloc" (26 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (25 text sections remaining)
Build cfg of: "quotearg_n" (24 text sections remaining)
Build cfg of: "quotearg_n_options" (23 text sections remaining)
Build cfg of: "quotearg_n_mem" (22 text sections remaining)
Build cfg of: "quotearg" (21 text sections remaining)
Build cfg of: "quotearg_mem" (20 text sections remaining)
Build cfg of: "quotearg_n_style" (19 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (18 text sections remaining)
Build cfg of: "quotearg_style" (17 text sections remaining)
Build cfg of: "quotearg_style_mem" (16 text sections remaining)
Build cfg of: "quotearg_char_mem" (15 text sections remaining)
Build cfg of: "quotearg_char" (14 text sections remaining)
Build cfg of: "quotearg_colon" (13 text sections remaining)
Build cfg of: "quotearg_colon_mem" (12 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (11 text sections remaining)
Build cfg of: "quotearg_n_custom" (10 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (9 text sections remaining)
Build cfg of: "quotearg_custom" (8 text sections remaining)
Build cfg of: "quotearg_custom_mem" (7 text sections remaining)
Build cfg of: "quote_n_mem" (6 text sections remaining)
Build cfg of: "quote_mem" (5 text sections remaining)
Build cfg of: "quote_n" (4 text sections remaining)
Build cfg of: "quote" (3 text sections remaining)
Build cfg of: "gettext_quote" (2 text sections remaining)
Build cfg of: "rpl_fclose" (1 text sections remaining)
Build cfg of: "close_stdout" (0 text sections remaining)
(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(18,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(18,RSP == Var: RSP0 && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
Considering text section (0/60): "close_stdout"
--------
.dot code for CFG of text section close_stdout for Vanilla
diGraph close_stdout_Vanilla{
	close_stdout_0  [label="[close_stdout_197,close_stdout_198]"]
	close_stdout_1  [label="[close_stdout_218,close_stdout_222]"]
	close_stdout_2  [label="[close_stdout_223,close_stdout_223]"]
	close_stdout_3  [label="[.label_10,.label_10]"]
	close_stdout_4  [label="[close_stdout_231,close_stdout_236]"]
	close_stdout_5  [label="[close_stdout_237,close_stdout_237]"]
	close_stdout_6  [label="[.label_12,close_stdout_211]"]
	close_stdout_7  [label="[close_stdout_212,close_stdout_212]"]
	close_stdout_8  [label="[close_stdout_213,close_stdout_217]"]
	close_stdout_9  [label="[close_stdout_192,close_stdout_192]"]
	close_stdout_10  [label="[close_stdout_193,close_stdout_193]"]
	close_stdout_11  [label="[close_stdout_194,close_stdout_196]"]
	close_stdout_12  [label="[close_stdout_204,close_stdout_207]"]
	close_stdout_13  [label="[.label_11,.label_11]"]
	close_stdout_14  [label="[close_stdout_228,close_stdout_228]"]
	close_stdout_15  [label="[.label_13,.label_13]"]
	close_stdout_16  [label="[close_stdout_201,close_stdout_201]"]
	close_stdout_17  [label="[close_stdout_202,close_stdout_203]"]
	close_stdout_18  [label="[close_stdout,close_stdout_188]"]
	close_stdout_19  [label="[close_stdout_189,close_stdout_189]"]
	close_stdout_20  [label="[close_stdout_190,close_stdout_191]"]

	close_stdout_0 -> close_stdout_6 [label="!ZF"];
	close_stdout_0 -> close_stdout_15 [label="ZF"];
	close_stdout_1 -> close_stdout_2;

	close_stdout_3 -> close_stdout_4;
	close_stdout_4 -> close_stdout_5;

	close_stdout_6 -> close_stdout_7;
	close_stdout_7 -> close_stdout_8;
	close_stdout_8 -> close_stdout_3 [label="!ZF"];
	close_stdout_8 -> close_stdout_1 [label="ZF"];
	close_stdout_9 -> close_stdout_10;
	close_stdout_10 -> close_stdout_11;
	close_stdout_11 -> close_stdout_6 [label="ZF"];
	close_stdout_11 -> close_stdout_0 [label="!ZF"];

	close_stdout_13 -> close_stdout_14;

	close_stdout_15 -> close_stdout_16;
	close_stdout_16 -> close_stdout_17;
	close_stdout_17 -> close_stdout_13 [label="!ZF"];
	close_stdout_17 -> close_stdout_12 [label="ZF"];
	close_stdout_18 -> close_stdout_19;
	close_stdout_19 -> close_stdout_20;
	close_stdout_20 -> close_stdout_15 [label="ZF"];
	close_stdout_20 -> close_stdout_9 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section close_stdout for Randomized
diGraph close_stdout_Randomized{
	close_stdout_0  [label="[close_stdout_266,close_stdout_268]"]
	close_stdout_1  [label="[close_stdout_294,close_stdout_303]"]
	close_stdout_2  [label="[close_stdout_304,close_stdout_304]"]
	close_stdout_3  [label="[.label_12,.label_12]"]
	close_stdout_4  [label="[close_stdout_314,close_stdout_314]"]
	close_stdout_5  [label="[close_stdout_315,close_stdout_324]"]
	close_stdout_6  [label="[close_stdout_325,close_stdout_325]"]
	close_stdout_7  [label="[.label_10,close_stdout_286]"]
	close_stdout_8  [label="[close_stdout_287,close_stdout_287]"]
	close_stdout_9  [label="[close_stdout_288,close_stdout_293]"]
	close_stdout_10  [label="[close_stdout_259,close_stdout_259]"]
	close_stdout_11  [label="[close_stdout_260,close_stdout_260]"]
	close_stdout_12  [label="[close_stdout_261,close_stdout_265]"]
	close_stdout_13  [label="[close_stdout_275,close_stdout_279]"]
	close_stdout_14  [label="[.label_13,close_stdout_310]"]
	close_stdout_15  [label="[close_stdout_311,close_stdout_311]"]
	close_stdout_16  [label="[.label_11,.label_11]"]
	close_stdout_17  [label="[close_stdout_271,close_stdout_271]"]
	close_stdout_18  [label="[close_stdout_272,close_stdout_274]"]
	close_stdout_19  [label="[close_stdout,close_stdout_255]"]
	close_stdout_20  [label="[close_stdout_256,close_stdout_256]"]
	close_stdout_21  [label="[close_stdout_257,close_stdout_258]"]

	close_stdout_0 -> close_stdout_7 [label="!ZF"];
	close_stdout_0 -> close_stdout_16 [label="ZF"];
	close_stdout_1 -> close_stdout_2;

	close_stdout_3 -> close_stdout_4;
	close_stdout_4 -> close_stdout_5;
	close_stdout_5 -> close_stdout_6;

	close_stdout_7 -> close_stdout_8;
	close_stdout_8 -> close_stdout_9;
	close_stdout_9 -> close_stdout_3 [label="!ZF"];
	close_stdout_9 -> close_stdout_1 [label="ZF"];
	close_stdout_10 -> close_stdout_11;
	close_stdout_11 -> close_stdout_12;
	close_stdout_12 -> close_stdout_7 [label="ZF"];
	close_stdout_12 -> close_stdout_0 [label="!ZF"];

	close_stdout_14 -> close_stdout_15;

	close_stdout_16 -> close_stdout_17;
	close_stdout_17 -> close_stdout_18;
	close_stdout_18 -> close_stdout_14 [label="!ZF"];
	close_stdout_18 -> close_stdout_13 [label="ZF"];
	close_stdout_19 -> close_stdout_20;
	close_stdout_20 -> close_stdout_21;
	close_stdout_21 -> close_stdout_16 [label="ZF"];
	close_stdout_21 -> close_stdout_10 [label="!ZF"];
}
--------
Starting Node: 18

Edges: 0 --!ZF--> 6, 0 --ZF--> 15, 1 ----> 2, , 3 ----> 4, 4 ----> 5, , 6 ----> 7, 7 ----> 8, 8 --!ZF--> 3, 8 --ZF--> 1, 9 ----> 10, 10 ----> 11, 11 --ZF--> 6, 11 --!ZF--> 0, , 13 ----> 14, , 15 ----> 16, 16 ----> 17, 17 --!ZF--> 13, 17 --ZF--> 12, 18 ----> 19, 19 ----> 20, 20 --ZF--> 15, 20 --!ZF--> 9

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout"
node 0:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 1:
RAX := Value: 0, RCX := Reg: RBX, RDX := Dereference: [Var: .str_1,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := error@()
node 3:
RAX := quotearg_colon@()
node 4:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := error@()
node 6:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str_2,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := dcgettext@()
node 8:
RBX := Reg: RAX, RDI := Dereference: [(Var: close_stdout_214 + Var: file_name),8]
ZF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), CF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), SF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), OF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), PF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8])
node 9:
RBX := (TakeBits: <63,8>(Reg: RBX) . Dereference: [(Var: returned + Var: ignore_EPIPE),1])
node 10:
RAX := __errno_location@()
node 11:
ZF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), CF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), SF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), OF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), PF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0)
node 12:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 13:
RDI := Dereference: [(Var: returned + Var: exit_failure),4]
node 14:
RAX := _exit@()
node 15:
RDI := Dereference: [(Var: returned + Var: stderr),8]
node 16:
RAX := close_stream@()
node 17:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 18:
RDI := Dereference: [(Var: returned + Var: stdout),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg:(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(19,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(19,RSP == Var: RSP0 && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
 RAX
node 19:
RAX := close_stream@()
node 20:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

Starting Node: 19

Edges: 0 --!ZF--> 7, 0 --ZF--> 16, 1 ----> 2, , 3 ----> 4, 4 ----> 5, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 --!ZF--> 3, 9 --ZF--> 1, 10 ----> 11, 11 ----> 12, 12 --ZF--> 7, 12 --!ZF--> 0, , 14 ----> 15, , 16 ----> 17, 17 ----> 18, 18 --!ZF--> 14, 18 --ZF--> 13, 19 ----> 20, 20 ----> 21, 21 --ZF--> 16, 21 --!ZF--> 10

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout"
node 0:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 1:
RAX := Value: 0, RCX := Reg: RBX, RDX := Dereference: [Var: .str_2,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := error@()
node 3:
skip'
node 4:
RAX := quotearg_colon@()
node 5:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := error@()
node 7:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str_1,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := dcgettext@()
node 9:
RBX := Reg: RAX, RDI := Dereference: [(Var: close_stdout_290 + Var: file_name),8]
ZF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), CF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), SF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), OF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), PF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8])
node 10:
RBX := (TakeBits: <63,8>(Reg: RBX) . Dereference: [(Var: returned + Var: ignore_EPIPE),1])
node 11:
RAX := __errno_location@()
node 12:
ZF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), CF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), SF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), OF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), PF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0)
node 13:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 14:
RDI := Dereference: [(Var: .label_13 + Var: exit_failure),4]
node 15:
RAX := _exit@()
node 16:
RDI := Dereference: [(Var: returned + Var: stderr),8]
node 17:
RAX := close_stream@()
node 18:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 19:
RDI := Dereference: [(Var: close_stdout_254 + Var: stdout),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 20:
RAX := close_stream@()
node 21:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

same_behavior for the nodes: close_stdout -> close_stdout_188 and close_stdout -> close_stdout_255

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: stdout),8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := Dereference: [(Var: close_stdout_254 + Var: stdout),8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op ADD) [E_var "close_stdout_254" 64,E_var "stdout" 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "close_stdout_254" 64,E_var "stdout" 64]) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout -> close_stdout_188 and close_stdout -> close_stdout_255 have been verified to do the same.

same_behavior for the nodes: close_stdout_189 -> close_stdout_189 and close_stdout_256 -> close_stdout_256

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "close_stream" "") [])]
Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_189 -> close_stdout_189 and close_stdout_256 -> close_stdout_256 have been verified to do the same.

same_behavior for the nodes: close_stdout_190 -> close_stdout_191 and close_stdout_257 -> close_stdout_258

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_190 -> close_stdout_191 and close_stdout_257 -> close_stdout_258 have been verified to do the same.

same_behavior for the nodes: .label_13 -> .label_13 and .label_11 -> .label_11

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: stderr),8]

SB || RDI := Dereference: [(Var: returned + Var: stderr),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stderr" 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stderr" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stderr" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_13 -> .label_13 and .label_11 -> .label_11 have been verified to do the same.

same_behavior for the nodes: close_stdout_201 -> close_stdout_201 and close_stdout_271 -> close_stdout_271

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "close_stream" "") [])]
Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_201 -> close_stdout_201 and close_stdout_271 -> close_stdout_271 have been verified to do the same.

same_behavior for the nodes: close_stdout_202 -> close_stdout_203 and close_stdout_272 -> close_stdout_274

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_202 -> close_stdout_203 and close_stdout_272 -> close_stdout_274 have been verified to do the same.

same_behavior for the nodes: .label_11 -> .label_11 and .label_13 -> close_stdout_310

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: exit_failure),4]

SB || RDI := Dereference: [(Var: .label_13 + Var: exit_failure),4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op ADD) [E_var ".label_13" 64,E_var "exit_failure" 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "exit_failure" 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_var ".label_13" 64,E_var "exit_failure" 64]) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_11 -> .label_11 and .label_13 -> close_stdout_310 have been verified to do the same.

same_behavior for the nodes: close_stdout_228 -> close_stdout_228 and close_stdout_311 -> close_stdout_311

same_behavior checking these two SStates:

SA || RAX := _exit@()

SB || RAX := _exit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "_exit" "") [])]
Resulting values:
Value A:
E_app (F2 "_exit" "") []
Value B:
E_app (F2 "_exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_228 -> close_stdout_228 and close_stdout_311 -> close_stdout_311 have been verified to do the same.

same_behavior for the nodes: close_stdout_204 -> close_stdout_207 and close_stdout_275 -> close_stdout_279

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_204 -> close_stdout_207 and close_stdout_275 -> close_stdout_279 have been verified to do the same.

same_behavior for the nodes: close_stdout_192 -> close_stdout_192 and close_stdout_259 -> close_stdout_259

same_behavior checking these two SStates:

SA || RBX := (TakeBits: <63,8>(Reg: RBX) . Dereference: [(Var: returned + Var: ignore_EPIPE),1])

SB || RBX := (TakeBits: <63,8>(Reg: RBX) . Dereference: [(Var: returned + Var: ignore_EPIPE),1])

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "ignore_EPIPE" 64]) 1])]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "ignore_EPIPE" 64]) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "ignore_EPIPE" 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_192 -> close_stdout_192 and close_stdout_259 -> close_stdout_259 have been verified to do the same.

same_behavior for the nodes: close_stdout_193 -> close_stdout_193 and close_stdout_260 -> close_stdout_260

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_193 -> close_stdout_193 and close_stdout_260 -> close_stdout_260 have been verified to do the same.

same_behavior for the nodes: close_stdout_194 -> close_stdout_196 and close_stdout_261 -> close_stdout_265

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), CF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), SF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), OF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), PF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0)

SB || ZF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), CF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), SF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), OF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0), PF := CMP(TakeBits: <7,0>(Reg: RBX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_194 -> close_stdout_196 and close_stdout_261 -> close_stdout_265 have been verified to do the same.

same_behavior for the nodes: .label_12 -> close_stdout_211 and .label_10 -> close_stdout_286

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str_2,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str_1,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str_1" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str_1" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str_1" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str_2" 64) 4
Value B:
E_deref (E_var ".str_1" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_12 -> close_stdout_211 and .label_10 -> close_stdout_286 have been verified to do the same.

same_behavior for the nodes: close_stdout_212 -> close_stdout_212 and close_stdout_287 -> close_stdout_287

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_212 -> close_stdout_212 and close_stdout_287 -> close_stdout_287 have been verified to do the same.

same_behavior for the nodes: close_stdout_213 -> close_stdout_217 and close_stdout_288 -> close_stdout_293

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDI := Dereference: [(Var: close_stdout_214 + Var: file_name),8]
SA || ZF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), CF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), SF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), OF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8]), PF := TEST(Dereference: [(Var: close_stdout_214 + Var: file_name),8],Dereference: [(Var: close_stdout_214 + Var: file_name),8])

SB || RBX := Reg: RAX, RDI := Dereference: [(Var: close_stdout_290 + Var: file_name),8]
SB || ZF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), CF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), SF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), OF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8]), PF := TEST(Dereference: [(Var: close_stdout_290 + Var: file_name),8],Dereference: [(Var: close_stdout_290 + Var: file_name),8])

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_deref (E_app (Op ADD) [E_var "close_stdout_290" 64,E_var "file_name" 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_deref (E_app (Op ADD) [E_var "close_stdout_290" 64,E_var "file_name" 64]) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "close_stdout_214" 64,E_var "file_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "close_stdout_290" 64,E_var "file_name" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_213 -> close_stdout_217 and close_stdout_288 -> close_stdout_293 have been verified to do the same.

same_behavior for the nodes: .label_10 -> .label_10 and .label_12 -> .label_12

same_behavior checking these two SStates:

SA || RAX := quotearg_colon@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_10 -> .label_10 and close_stdout_314 -> close_stdout_314

same_behavior checking these two SStates:

SA || RAX := quotearg_colon@()

SB || RAX := quotearg_colon@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_colon" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_colon" "") []
Value B:
E_app (F2 "quotearg_colon" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_10 -> .label_10 and close_stdout_314 -> close_stdout_314 have been verified to do the same.

same_behavior for the nodes: close_stdout_231 -> close_stdout_236 and close_stdout_315 -> close_stdout_324

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4),(R8,E_reg RBX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.1_0" 64) 4
Value B:
E_deref (E_var ".str.1_0" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_231 -> close_stdout_236 and close_stdout_315 -> close_stdout_324 have been verified to do the same.

same_behavior for the nodes: close_stdout_237 -> close_stdout_237 and close_stdout_325 -> close_stdout_325

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_237 -> close_stdout_237 and close_stdout_325 -> close_stdout_325 have been verified to do the same.

same_behavior for the nodes: close_stdout_218 -> close_stdout_222 and close_stdout_294 -> close_stdout_303

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RBX, RDX := Dereference: [Var: .str_1,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RBX, RDX := Dereference: [Var: .str_2,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RBX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RBX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RBX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RBX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RBX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_var ".str_1" 64) 4
Value B:
E_deref (E_var ".str_2" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_218 -> close_stdout_222 and close_stdout_294 -> close_stdout_303 have been verified to do the same.

same_behavior for the nodes: close_stdout_223 -> close_stdout_223 and close_stdout_304 -> close_stdout_304

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_223 -(20,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(19,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == Var: RSP0 && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
> close_stdout_223 and close_stdout_304 -> close_stdout_304 have been verified to do the same.

same_behavior for the nodes: close_stdout_197 -> close_stdout_198 and close_stdout_266 -> close_stdout_268

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

SB || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_197 -> close_stdout_198 and close_stdout_266 -> close_stdout_268 have been verified to do the same.

Label relationship:
.str_1 <--> .str_2
.str.1_0 <--> .str.1_0
file_name <--> file_name
close_stdout_214 <--> close_stdout_290
.str_2 <--> .str_1
ignore_EPIPE <--> ignore_EPIPE
exit_failure <--> exit_failure
returned <--> .label_13,returned,close_stdout_254
stderr <--> stderr
 <--> 
stdout <--> stdout

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (1/60): "rpl_fclose"
--------
.dot code for CFG of text section rpl_fclose for Vanilla
diGraph rpl_fclose_Vanilla{
	rpl_fclose_0  [label="[rpl_fclose_3467,rpl_fclose_3467]"]
	rpl_fclose_1  [label="[rpl_fclose_3468,rpl_fclose_3468]"]
	rpl_fclose_2  [label="[rpl_fclose_3469,rpl_fclose_3471]"]
	rpl_fclose_3  [label="[rpl_fclose_3472,rpl_fclose_3472]"]
	rpl_fclose_4  [label="[rpl_fclose_3473,rpl_fclose_3474]"]
	rpl_fclose_5  [label="[rpl_fclose_3487,rpl_fclose_3488]"]
	rpl_fclose_6  [label="[.label_233,rpl_fclose_3493]"]
	rpl_fclose_7  [label="[rpl_fclose_3480,rpl_fclose_3480]"]
	rpl_fclose_8  [label="[rpl_fclose_3481,rpl_fclose_3483]"]
	rpl_fclose_9  [label="[rpl_fclose_3484,rpl_fclose_3484]"]
	rpl_fclose_10  [label="[rpl_fclose_3485,rpl_fclose_3486]"]
	rpl_fclose_11  [label="[.label_234,.label_234]"]
	rpl_fclose_12  [label="[rpl_fclose_3477,rpl_fclose_3477]"]
	rpl_fclose_13  [label="[rpl_fclose_3478,rpl_fclose_3479]"]
	rpl_fclose_14  [label="[rpl_fclose_3463,rpl_fclose_3463]"]
	rpl_fclose_15  [label="[rpl_fclose_3464,rpl_fclose_3464]"]
	rpl_fclose_16  [label="[rpl_fclose_3465,rpl_fclose_3466]"]
	rpl_fclose_17  [label="[.label_232,rpl_fclose_3498]"]
	rpl_fclose_18  [label="[rpl_fclose_3499,rpl_fclose_3499]"]
	rpl_fclose_19  [label="[rpl_fclose_3499_ret,rpl_fclose_3499_ret]"]
	rpl_fclose_20  [label="[rpl_fclose,rpl_fclose_3459]"]
	rpl_fclose_21  [label="[rpl_fclose_3460,rpl_fclose_3460]"]
	rpl_fclose_22  [label="[rpl_fclose_3461,rpl_fclose_3462]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_3;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_17 [label="ZF"];
	rpl_fclose_4 -> rpl_fclose_11 [label="!ZF"];
	rpl_fclose_5 -> rpl_fclose_6;

	rpl_fclose_7 -> rpl_fclose_8;
	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_10;
	rpl_fclose_10 -> rpl_fclose_6 [label="ZF"];
	rpl_fclose_10 -> rpl_fclose_5 [label="!ZF"];
	rpl_fclose_11 -> rpl_fclose_12;
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_17 [label="ZF"];
	rpl_fclose_13 -> rpl_fclose_7 [label="!ZF"];
	rpl_fclose_14 -> rpl_fclose_15;
	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_11 [label="ZF"];
	rpl_fclose_16 -> rpl_fclose_0 [label="!ZF"];
	rpl_fclose_17 -> rpl_fclose_18;
	rpl_fclose_18 -> rpl_fclose_19;

	rpl_fclose_20 -> rpl_fclose_21;
	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_17 [label="SF"];
	rpl_fclose_22 -> rpl_fclose_14 [label="!SF"];
}
--------
--------
.dot code for CFG of text section rpl_fclose for Randomized
diGraph rpl_fclose_Randomized{
	rpl_fclose_0  [label="[rpl_fclose_4819,rpl_fclose_4819]"]
	rpl_fclose_1  [label="[rpl_fclose_4820,rpl_fclose_4820]"]
	rpl_fclose_2  [label="[rpl_fclose_4821,rpl_fclose_4826]"]
	rpl_fclose_3  [label="[rpl_fclose_4827,rpl_fclose_4827]"]
	rpl_fclose_4  [label="[rpl_fclose_4828,rpl_fclose_4830]"]
	rpl_fclose_5  [label="[rpl_fclose_4848,rpl_fclose_4850]"]
	rpl_fclose_6  [label="[.label_233,rpl_fclose_4857]"]
	rpl_fclose_7  [label="[rpl_fclose_4838,rpl_fclose_4838]"]
	rpl_fclose_8  [label="[rpl_fclose_4839,rpl_fclose_4844]"]
	rpl_fclose_9  [label="[rpl_fclose_4845,rpl_fclose_4845]"]
	rpl_fclose_10  [label="[rpl_fclose_4846,rpl_fclose_4847]"]
	rpl_fclose_11  [label="[.label_234,rpl_fclose_4833]"]
	rpl_fclose_12  [label="[rpl_fclose_4834,rpl_fclose_4834]"]
	rpl_fclose_13  [label="[rpl_fclose_4835,rpl_fclose_4837]"]
	rpl_fclose_14  [label="[rpl_fclose_4813,rpl_fclose_4814]"]
	rpl_fclose_15  [label="[rpl_fclose_4815,rpl_fclose_4815]"]
	rpl_fclose_16  [label="[rpl_fclose_4816,rpl_fclose_4818]"]
	rpl_fclose_17  [label="[.label_232,rpl_fclose_4865]"]
	rpl_fclose_18  [label="[rpl_fclose_4866,rpl_fclose_4866]"]
	rpl_fclose_19  [label="[rpl_fclose_4866_ret,rpl_fclose_4866_ret]"]
	rpl_fclose_20  [label="[rpl_fclose,rpl_fclose_4808]"]
	rpl_fclose_21  [label="[rpl_fclose_4809,rpl_fclose_4809]"]
	rpl_fclose_22  [label="[rpl_fclose_4810,rpl_fclose_4812]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_3;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_17 [label="ZF"];
	rpl_fclose_4 -> rpl_fclose_11 [label="!ZF"];
	rpl_fclose_5 -> rpl_fclose_6;

	rpl_fclose_7 -> rpl_fclose_8;
	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_10;
	rpl_fclose_10 -> rpl_fclose_6 [label="ZF"];
	rpl_fclose_10 -> rpl_fclose_5 [label="!ZF"];
	rpl_fclose_11 -> rpl_fclose_12;
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_17 [label="ZF"];
	rpl_fclose_13 -> rpl_fclose_7 [label="!ZF"];
	rpl_fclose_14 -> rpl_fclose_15;
	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_11 [label="ZF"];
	rpl_fclose_16 -> rpl_fclose_0 [label="!ZF"];
	rpl_fclose_17 -> rpl_fclose_18;
	rpl_fclose_18 -> rpl_fclose_19;

	rpl_fclose_20 -> rpl_fclose_21;
	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_17 [label="SF"];
	rpl_fclose_22 -> rpl_fclose_14 [label="!SF"];
}
--------
Starting Node: 20

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 --ZF--> 17, 4 --!ZF--> 11, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 6, 10 --!ZF--> 5, 11 ----> 12, 12 ----> 13, 13 --ZF--> 17, 13 --!ZF--> 7, 14 ----> 15, 15 ----> 16, 16 --ZF--> 11, 16 --!ZF--> 0, 17 ----> 18, 18 ----> 19, , 20 ----> 21, 21 ----> 22, 22 --SF--> 17, 22 --!SF--> 14

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fclose"
node 0:
RDI := Reg: RBX
node 1:
RAX := fileno@()
node 2:
RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := lseek@()
node 4:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 5:
RAX := Value: 4294967295
[Reg: R14,4] := Dereference: [Reg: RAX,4]
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 7:
RAX := __errno_location@()
node 8:
RDI := Reg: RBX, R14 := Reg: RAX
node 9:
RAX := fclose@()
node 10:
ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])
node 11:
RDI := Reg: RBX
node 12:
RAX := rpl_fflush@()
node 13:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,(20,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(19,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == Var: RSP0 && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 14:
RDI := Reg: RBX
node 15:
RAX := __freading@()
node 16:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 18:
RAX := fclose@()
node 19:
skip'
node 20:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 21:
RAX := fileno@()
node 22:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

Starting Node: 20

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 --ZF--> 17, 4 --!ZF--> 11, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 6, 10 --!ZF--> 5, 11 ----> 12, 12 ----> 13, 13 --ZF--> 17, 13 --!ZF--> 7, 14 ----> 15, 15 ----> 16, 16 --ZF--> 11, 16 --!ZF--> 0, 17 ----> 18, 18 ----> 19, , 20 ----> 21, 21 ----> 22, 22 --SF--> 17, 22 --!SF--> 14

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fclose"
node 0:
RDI := Reg: RBX
node 1:
RAX := fileno@()
node 2:
RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := lseek@()
node 4:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 5:
RAX := Value: 4294967295
[Reg: R14,4] := Dereference: [Reg: RAX,4]
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 7:
RAX := __errno_location@()
node 8:
RDI := Reg: RBX, R14 := Reg: RAX
node 9:
RAX := fclose@()
node 10:
ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])
node 11:
RDI := Reg: RBX
node 12:
RAX := rpl_fflush@()
node 13:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 14:
RDI := Reg: RBX
node 15:
RAX := __freading@()
node 16:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 18:
RAX := fclose@()
node 19:
skip'
node 20:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 21:
RAX := fileno@()
node 22:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

same_behavior for the nodes: rpl_fclose -> rpl_fclose_3459 and rpl_fclose -> rpl_fclose_4808

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose -> rpl_fclose_3459 and rpl_fclose -> rpl_fclose_4808 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3460 -> rpl_fclose_3460 and rpl_fclose_4809 -> rpl_fclose_4809

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3460 -> rpl_fclose_3460 and rpl_fclose_4809 -> rpl_fclose_4809 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3461 -> rpl_fclose_3462 and rpl_fclose_4810 -> rpl_fclose_4812

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3461 -> rpl_fclose_3462 and rpl_fclose_4810 -> rpl_fclose_4812 have been verified to do the same.

same_behavior for the nodes: .label_232 -> rpl_fclose_3498 and .label_232 -> rpl_fclose_4865

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_232 -> rpl_fclose_3498 and .label_232 -> rpl_fclose_4865 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3499 -> rpl_fclose_3499 and rpl_fclose_4866 -> rpl_fclose_4866

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fclose" "") [])]
Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3499 -> rpl_fclose_3499 and rpl_fclose_4866 -> rpl_fclose_4866 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3499_ret -> rpl_fclose_3499_ret and rpl_fclose_4866_ret -> rpl_fclose_4866_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3499_ret -> rpl_fclose_3499_ret and rpl_fclose_4866_ret -> rpl_fclose_4866_ret have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3463 -> rpl_fclose_3463 and rpl_fclose_4813 -> rpl_fclose_4814

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3463 -> rpl_fclose_3463 and rpl_fclose_4813 -> rpl_fclose_4814 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3464 -> rpl_fclose_3464 and rpl_fclose_4815 -> rpl_fclose_4815

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__freading" "") [])]
Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3464 -> rpl_fclose_3464 and rpl_fclose_4815 -> rpl_fclose_4815 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3465 -> rpl_fclose_3466 and rpl_fclose_4816 -> rpl_fclose_4818

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3465 -> rpl_fclose_3466 and rpl_fclose_4816 -> rpl_fclose_4818 have been verified to do the same.

same_behavior for the nodes: .label_234 -> .label_234 and .label_234 -> rpl_fclose_4833

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_234 -> .label_234 and .label_234 -> rpl_fclose_4833 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3477 -> rpl_fclose_3477 and rpl_fclose_4834 -> rpl_fclose_4834

same_behavior checking these two SStates:

SA || RAX := rpl_fflush@()

SB || RAX := rpl_fflush@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_fflush" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_fflush" "") []
Value B:
E_app (F2 "rpl_fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3477 -> rpl_fclose_3477 and rpl_fclose_4834 -> rpl_fclose_4834 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3478 -> rpl_fclose_3479 and rpl_fclose_4835 -> rpl_fclose_4837

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3478 -> rpl_fclose_3479 and rpl_fclose_4835 -> rpl_fclose_4837 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3480 -> rpl_fclose_3480 and rpl_fclose_4838 -> rpl_fclose_4838

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3480 -> rpl_fclose_3480 and rpl_fclose_4838 -> rpl_fclose_4838 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3481 -> rpl_fclose_3483 and rpl_fclose_4839 -> rpl_fclose_4844

same_behavior checking these two SStates:

SA || RDI := Reg: RBX, R14 := Reg: RAX

SB || RDI := Reg: RBX, R14 := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_reg RAX)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3481 -> rpl_fclose_3483 and rpl_fclose_4839 -> rpl_fclose_4844 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3484 -> rpl_fclose_3484 and rpl_fclose_4845 -> rpl_fclose_4845

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fclose" "") [])]
Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3484 -> rpl_fclose_3484 and rpl_fclose_4845 -> rpl_fclose_4845 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3485 -> rpl_fclose_3486 and rpl_fclose_4846 -> rpl_fclose_4847

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])

SB || ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3485 -> rpl_fclose_3486 and rpl_fclose_4846 -> rpl_fclose_4847 have been verified to do the same.

same_behavior for the nodes: .label_233 -> rpl_fclose_3493 and .label_233 -> rpl_fclose_4857

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_233 -> rpl_fclose_3493 and .label_233 -> rpl_fclose_4857 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3487 -> rpl_fclose_3488 and rpl_fclose_4848 -> rpl_fclose_4850

same_behavior checking these two SStates:

SA || RAX := Value: 4294967295
SA || [Reg: R14,4] := Dereference: [Reg: RAX,4]

SB || RAX := Value: 4294967295
SB || [Reg: R14,4] := Dereference: [Reg: RAX,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 4294967295 32),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 4294967295 32
Value B:
E_val 4294967295 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_fclose_3487 -> rpl_fclose_3488 and rpl_fclose_4848 -> rpl_fclose_4850 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3467 -> rpl_fclose_3467 and rpl_fclose_4819 -> rpl_fclose_4819

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3467 -> rpl_fclose_3467 and rpl_fclose_4819 -> rpl_fclose_4819 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3468 -> rpl_fclose_3468 and rpl_fclose_4820 -> rpl_fclose_4820

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3468 -> rpl_fclose_3468 and rpl_fclose_4820 -> rpl_fclose_4820 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3469 -> rpl_fclose_3471 and rpl_fclose_4821 -> rpl_fclose_4826

same_behavior checking these two SStates:

SA || RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 64)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3469 -> rpl_fclose_3471 and rpl_fclose_4821 -> rpl_fclose_4826 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3472 -> rpl_fclose_3472 and rpl_fclose_4827 -> rpl_fclose_4827

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "lseek" "") [])]
Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3472 -> rpl_fclose_3472 and rpl_fclose_4827 -> rpl_fclose_4827 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3473 -> rpl_fclose_3474 and rpl_fclose_4828 -> rpl_fclose_4830

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3473 -> rpl_fclose_3474 and rpl_fclose_4828 -> rpl_fclose_4830 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (2/60): "gettext_quote"
--------
.dot code for CFG of text section gettext_quote for Vanilla
diGraph gettext_quote_Vanilla{
	gettext_quote_0  [label="[gettext_quote_2484,gettext_quote_2485]"]
	gettext_quote_1  [label="[gettext_quote_2480,gettext_quote_2483]"]
	gettext_quote_2  [label="[gettext_quote_2478,gettext_quote_2479]"]
	gettext_quote_3  [label="[gettext_quote_2475,gettext_quote_2477]"]
	gettext_quote_4  [label="[gettext_quote_2472,gettext_quote_2474]"]
	gettext_quote_5  [label="[gettext_quote_2468,gettext_quote_2471]"]
	gettext_quote_6  [label="[gettext_quote_2464,gettext_quote_2467]"]
	gettext_quote_7  [label="[gettext_quote_2462,gettext_quote_2463]"]
	gettext_quote_8  [label="[gettext_quote_2523,gettext_quote_2524]"]
	gettext_quote_9  [label="[.label_168,gettext_quote_2522]"]
	gettext_quote_10  [label="[gettext_quote_2506,gettext_quote_2507]"]
	gettext_quote_11  [label="[gettext_quote_2503,gettext_quote_2505]"]
	gettext_quote_12  [label="[gettext_quote_2500,gettext_quote_2502]"]
	gettext_quote_13  [label="[gettext_quote_2497,gettext_quote_2499]"]
	gettext_quote_14  [label="[gettext_quote_2494,gettext_quote_2496]"]
	gettext_quote_15  [label="[gettext_quote_2491,gettext_quote_2493]"]
	gettext_quote_16  [label="[.label_169,gettext_quote_2512]"]
	gettext_quote_17  [label="[.label_171,gettext_quote_2490]"]
	gettext_quote_18  [label="[gettext_quote_2457,gettext_quote_2457]"]
	gettext_quote_19  [label="[gettext_quote_2458,gettext_quote_2461]"]
	gettext_quote_20  [label="[.label_170,gettext_quote_2517]"]
	gettext_quote_21  [label="[gettext_quote,gettext_quote_2453]"]
	gettext_quote_22  [label="[gettext_quote_2454,gettext_quote_2454]"]
	gettext_quote_23  [label="[gettext_quote_2455,gettext_quote_2456]"]

	gettext_quote_0 -> gettext_quote_20;
	gettext_quote_1 -> gettext_quote_20 [label="ZF"];
	gettext_quote_1 -> gettext_quote_0 [label="!ZF"];
	gettext_quote_2 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_2 -> gettext_quote_1 [label="ZF"];
	gettext_quote_3 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_3 -> gettext_quote_2 [label="ZF"];
	gettext_quote_4 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_4 -> gettext_quote_3 [label="ZF"];
	gettext_quote_5 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_5 -> gettext_quote_4 [label="ZF"(21,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(21,RSP == Var: RSP0 && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
];
	gettext_quote_6 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_6 -> gettext_quote_5 [label="ZF"];
	gettext_quote_7 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_6 [label="ZF"];
	gettext_quote_8 -> gettext_quote_20;
	gettext_quote_9 -> gettext_quote_20 [label="ZF"];
	gettext_quote_9 -> gettext_quote_8 [label="!ZF"];
	gettext_quote_10 -> gettext_quote_9 [label="ZF"];
	gettext_quote_10 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_10 [label="ZF"];
	gettext_quote_12 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_12 -> gettext_quote_11 [label="ZF"];
	gettext_quote_13 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_13 -> gettext_quote_12 [label="ZF"];
	gettext_quote_14 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_14 -> gettext_quote_13 [label="ZF"];
	gettext_quote_15 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_15 -> gettext_quote_14 [label="ZF"];
	gettext_quote_16 -> gettext_quote_20;
	gettext_quote_17 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_17 -> gettext_quote_15 [label="ZF"];
	gettext_quote_18 -> gettext_quote_19;
	gettext_quote_19 -> gettext_quote_17 [label="ZF"];
	gettext_quote_19 -> gettext_quote_7 [label="!ZF"];

	gettext_quote_21 -> gettext_quote_22;
	gettext_quote_22 -> gettext_quote_23;
	gettext_quote_23 -> gettext_quote_20 [label="!ZF"];
	gettext_quote_23 -> gettext_quote_18 [label="ZF"];
}
--------
--------
.dot code for CFG of text section gettext_quote for Randomized
diGraph gettext_quote_Randomized{
	gettext_quote_0  [label="[gettext_quote_3468,gettext_quote_3469]"]
	gettext_quote_1  [label="[gettext_quote_3461,gettext_quote_3467]"]
	gettext_quote_2  [label="[gettext_quote_3458,gettext_quote_3460]"]
	gettext_quote_3  [label="[gettext_quote_3453,gettext_quote_3457]"]
	gettext_quote_4  [label="[gettext_quote_3449,gettext_quote_3452]"]
	gettext_quote_5  [label="[gettext_quote_3443,gettext_quote_3448]"]
	gettext_quote_6  [label="[gettext_quote_3438,gettext_quote_3442]"]
	gettext_quote_7  [label="[gettext_quote_3434,gettext_quote_3437]"]
	gettext_quote_8  [label="[gettext_quote_3527,gettext_quote_3528]"]
	gettext_quote_9  [label="[.label_168,gettext_quote_3526]"]
	gettext_quote_10  [label="[gettext_quote_3501,gettext_quote_3504]"]
	gettext_quote_11  [label="[gettext_quote_3495,gettext_quote_3500]"]
	gettext_quote_12  [label="[gettext_quote_3490,gettext_quote_3494]"]
	gettext_quote_13  [label="[gettext_quote_3486,gettext_quote_3489]"]
	gettext_quote_14  [label="[gettext_quote_3482,gettext_quote_3485]"]
	gettext_quote_15  [label="[gettext_quote_3477,gettext_quote_3481]"]
	gettext_quote_16  [label="[.label_170,gettext_quote_3511]"]
	gettext_quote_17  [label="[.label_171,gettext_quote_3476]"]
	gettext_quote_18  [label="[gettext_quote_3426,gettext_quote_3426]"]
	gettext_quote_19  [label="[gettext_quote_3427,gettext_quote_3427]"]
	gettext_quote_20  [label="[gettext_quote_3428,gettext_quote_3433]"]
	gettext_quote_21  [label="[.label_169,gettext_quote_3520]"]
	gettext_quote_22  [label="[gettext_quote,gettext_quote_3421]"]
	gettext_quote_23  [label="[gettext_quote_3422,gettext_quote_3422]"]
	gettext_quote_24  [label="[gettext_quote_3423,gettext_quote_3425]"]

	gettext_quote_0 -> gettext_quote_21;
	gettext_quote_1 -> gettext_quote_21 [label="ZF"];
	gettext_quote_1 -> gettext_quote_0 [label="!ZF"];
	gettext_quote_2 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_2 -> gettext_quote_1 [label="ZF"];
	gettext_quote_3 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_3 -> gettext_quote_2 [label="ZF"];
	gettext_quote_4 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_4 -> gettext_quote_3 [label="ZF"];
	gettext_quote_5 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_5 -> gettext_quote_4 [label="ZF"];
	gettext_quote_6 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_6 -> gettext_quote_5 [label="ZF"];
	gettext_quote_7 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_6 [label="ZF"];
	gettext_quote_8 -> gettext_quote_21;
	gettext_quote_9 -> gettext_quote_21 [label="ZF"];
	gettext_quote_9 -> gettext_quote_8 [label="!ZF"];
	gettext_quote_10 -> gettext_quote_9 [label="ZF"];
	gettext_quote_10 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_10 [label="ZF"];
	gettext_quote_12 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_12 -> gettext_quote_11 [label="ZF"];
	gettext_quote_13 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_13 -> gettext_quote_12 [label="ZF"];
	gettext_quote_14 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_14 -> gettext_quote_13 [label="ZF"];
	gettext_quote_15 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_15 -> gettext_quote_14 [label="ZF"];
	gettext_quote_16 -> gettext_quote_21;
	gettext_quote_17 -> gettext_quote_16 [label="!ZF"];
	gettext_quote_17 -> gettext_quote_15 [label="ZF"];
	gettext_quote_18 -> gettext_quote_19;
	gettext_quote_19 -> gettext_quote_20;
	gettext_quote_20 -> gettext_quote_17 [label="ZF"];
	gettext_quote_20 -> gettext_quote_7 [label="!ZF"];

	gettext_quote_22 -> gettext_quote_23;
	gettext_quote_23 -> gettext_quote_24;
	gettext_quote_24 -> gettext_quote_21 [label="!ZF"];
	gettext_quote_24 -> gettext_quote_18 [label="ZF"];
}
--------
Starting Node: 21

Edges: 0 ----> 20, 1 --ZF--> 20, 1 --!ZF--> 0, 2 --!ZF--> 16, 2 --ZF--> 1, 3 --!ZF--> 16, 3 --ZF--> 2, 4 --!ZF--> 16, 4 --ZF--> 3, 5 --!ZF--> 16, 5 --ZF--> 4, 6 --!ZF--> 16, 6 --ZF--> 5, 7 --!ZF--> 16, 7 --ZF--> 6, 8 ----> 20, 9 --ZF--> 20, 9 --!ZF--> 8, 10 --ZF--> 9, 10 --!ZF--> 16, 11 --!ZF--> 16, 11 --ZF--> 10, 12 --!ZF--> 16, 12 --ZF--> 11, 13 --!ZF--> 16, 13 --ZF--> 12, 14 --!ZF--> 16, 14 --ZF--> 13, 15 --!ZF--> 16, 15 --ZF--> 14, 16 ----> 20, 17 --!ZF--> 16, 17 --ZF--> 15, 18 ----> 19, 19 --ZF--> 17, 19 --!ZF--> 7, , 21 ----> 22, 22 ----> 23, 23 --!ZF--> 20, 23 --ZF--> 18

Symbolic Execution for Binary "Vanilla":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [Var: .str.15,4]
node 1:
RAX := Dereference: [Var: .str.14,4], RCX := Dereference: [Reg: RBX,1]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 2:
ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0)
node 3:
RCX := Dereference: [(Reg: RAX + Value: 4),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56)
node 4:
RCX := Dereference: [(Reg: RAX + Value: 3),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45)
node 5:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70)
node 6:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),V(22,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(22,RSP == Var: RSP0 && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
alue: 4294967263),Value: 84), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84)
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), CF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), SF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), OF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), PF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85)
node 8:
RAX := Dereference: [Var: .str.18_0,4]
node 9:
RAX := Dereference: [Var: .str.17_0,4], RCX := Dereference: [Reg: RBX,1]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 10:
ZF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0)
node 11:
RCX := Dereference: [(Reg: RAX + Value: 6),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48)
node 12:
RCX := Dereference: [(Reg: RAX + Value: 5),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51)
node 13:
RCX := Dereference: [(Reg: RAX + Value: 4),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48)
node 14:
RCX := Dereference: [(Reg: RAX + Value: 3),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56)
node 15:
RCX := Dereference: [(Reg: RAX + Value: 2),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), CF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), SF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), OF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), PF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49)
node 16:
RAX := (if (TakeBits: <31,0>(Reg: RSI) == Value: 9) then Dereference: [Var: .str.10_0,4] else Dereference: [Var: .str.12,4]), RCX := Dereference: [Var: .str.10_0,4]
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9)
node 17:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66)
node 18:
RAX := locale_charset@()
node 19:
RCX := AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), CF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), SF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), OF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), PF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71)
node 20:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 21:
RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := dcgettext@()
node 23:
ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)
--------

Starting Node: 22

Edges: 0 ----> 21, 1 --ZF--> 21, 1 --!ZF--> 0, 2 --!ZF--> 16, 2 --ZF--> 1, 3 --!ZF--> 16, 3 --ZF--> 2, 4 --!ZF--> 16, 4 --ZF--> 3, 5 --!ZF--> 16, 5 --ZF--> 4, 6 --!ZF--> 16, 6 --ZF--> 5, 7 --!ZF--> 16, 7 --ZF--> 6, 8 ----> 21, 9 --ZF--> 21, 9 --!ZF--> 8, 10 --ZF--> 9, 10 --!ZF--> 16, 11 --!ZF--> 16, 11 --ZF--> 10, 12 --!ZF--> 16, 12 --ZF--> 11, 13 --!ZF--> 16, 13 --ZF--> 12, 14 --!ZF--> 16, 14 --ZF--> 13, 15 --!ZF--> 16, 15 --ZF--> 14, 16 ----> 21, 17 --!ZF--> 16, 17 --ZF--> 15, 18 ----> 19, 19 ----> 20, 20 --ZF--> 17, 20 --!ZF--> 7, , 22 ----> 23, 23 ----> 24, 24 --!ZF--> 21, 24 --ZF--> 18

Symbolic Execution for Binary "Randomized":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [Var: .str.15,4]
node 1:
RAX := Dereference: [Var: .str.14,4], RCX := Dereference: [Reg: RBX,1]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 2:
ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0)
node 3:
RCX := Dereference: [(Reg: RAX + Value: 4),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56)
node 4:
RCX := Dereference: [(Reg: RAX + Value: 3),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45)
node 5:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70)
node 6:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84)
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), CF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), SF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), OF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), PF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85)
node 8:
RAX := Dereference: [Var: .str.18_0,4]
node 9:
RAX := Dereference: [Var: .str.17_0,4], RCX := Dereference: [Reg: RBX,1]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 10:
ZF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0)
node 11:
RCX := Dereference: [(Reg: RAX + Value: 6),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48)
node 12:
RCX := Dereference: [(Reg: RAX + Value: 5),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51)
node 13:
RCX := Dereference: [(Reg: RAX + Value: 4),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48)
node 14:
RCX := Dereference: [(Reg: RAX + Value: 3),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56)
node 15:
RCX := Dereference: [(Reg: RAX + Value: 2),1]
ZF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), CF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), SF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), OF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), PF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49)
node 16:
RAX := (if (TakeBits: <31,0>(Reg: RSI) == Value: 9) then Dereference: [Var: .str.10_0,4] else Dereference: [Var: .str.12,4]), RCX := Dereference: [Var: .str.10_0,4]
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9)
node 17:
RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66)
node 18:
skip'
node 19:
RAX := locale_charset@()
node 20:
RCX := AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263)
ZF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), CF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), SF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), OF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), PF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71)
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 22:
RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 23:
RAX := dcgettext@()
node 24:
ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)
--------

same_behavior for the nodes: gettext_quote -> gettext_quote_2453 and gettext_quote -> gettext_quote_3421

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote -> gettext_quote_2453 and gettext_quote -> gettext_quote_3421 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2454 -> gettext_quote_2454 and gettext_quote_3422 -> gettext_quote_3422

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2454 -> gettext_quote_2454 and gettext_quote_3422 -> gettext_quote_3422 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2455 -> gettext_quote_2456 and gettext_quote_3423 -> gettext_quote_3425

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)

SB || ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2455 -> gettext_quote_2456 and gettext_quote_3423 -> gettext_quote_3425 have been verified to do the same.

same_behavior for the nodes: .label_170 -> gettext_quote_2517 and .label_169 -> gettext_quote_3520

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_170 -> gettext_quote_2517 and .label_169 -> gettext_quote_3520 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2457 -> gettext_quote_2457 and gettext_quote_3426 -> gettext_quote_3426

same_behavior checking these two SStates:

SA || RAX := locale_charset@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: gettext_quote_2457 -> gettext_quote_2457 and gettext_quote_3427 -> gettext_quote_3427

same_behavior checking these two SStates:

SA || RAX := locale_charset@()

SB || RAX := locale_charset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "locale_charset" "") [])]
Resulting values:
Value A:
E_app (F2 "locale_charset" "") []
Value B:
E_app (F2 "locale_charset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2457 -> gettext_quote_2457 and gettext_quote_3427 -> gettext_quote_3427 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2458 -> gettext_quote_2461 and gettext_quote_3428 -> gettext_quote_3433

same_behavior checking these two SStates:

SA || RCX := AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263)
SA || ZF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), CF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), SF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), OF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), PF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71)

SB || RCX := AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263)
SB || ZF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), CF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), SF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), OF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71), PF := CMP(AND(sextend(Dereference: [Reg: RAX,1],8,32),Value: 4294967263),Value: 71)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_reg RAX) 1],E_val 4294967263 32])]
Resulting values:
Value A:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_reg RAX) 1],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_reg RAX) 1],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2458 -> gettext_quote_2461 and gettext_quote_3428 -> gettext_quote_3433 have been verified to do the same.

same_behavior for the nodes: .label_171 -> gettext_quote_2490 and .label_171 -> gettext_quote_3476

same_behavior checking these two SStates:

SA || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
SA || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66)

SB || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
SB || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 66)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32])]
Resulting values:
Value A:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> gettext_quote_2490 and .label_171 -> gettext_quote_3476 have been verified to do the same.

same_behavior for the nodes: .label_169 -> gettext_quote_2512 and .label_170 -> gettext_quote_3511

same_behavior checking these two SStates:

SA || RAX := (if (TakeBits: <31,0>(Reg: RSI) == Value: 9) then Dereference: [Var: .str.10_0,4] else Dereference: [Var: .str.12,4]), RCX := Dereference: [Var: .str.10_0,4]
SA || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9)

SB || RAX := (if (TakeBits: <31,0>(Reg: RSI) == Value: 9) then Dereference: [Var: .str.10_0,4] else Dereference: [Var: .str.12,4]), RCX := Dereference: [Var: .str.10_0,4]
SB || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 9)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RSI],E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 4) (E_deref (E_var ".str.12" 64) 4)),(RCX,E_deref (E_var ".str.10_0" 64) 4),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RSI],E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 4) (E_deref (E_var ".str.12" 64) 4)),(RCX,E_deref (E_var ".str.10_0" 64) 4),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RSI],E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 4) (E_deref (E_var ".str.12" 64) 4)
Value B:
E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RSI],E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 4) (E_deref (E_var ".str.12" 64) 4)
Resulting values:
Value A:
E_deref (E_var ".str.10_0" 64) 4
Value B:
E_deref (E_var ".str.10_0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_169 -> gettext_quote_2512 and .label_170 -> gettext_quote_3511 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2491 -> gettext_quote_2493 and gettext_quote_3477 -> gettext_quote_3481

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 2),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), CF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), SF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), OF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), PF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49)

SB || RCX := Dereference: [(Reg: RAX + Value: 2),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), CF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), SF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), OF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49), PF := CMP(Dereference: [(Reg: RAX + Value: 2),1],Value: 49)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2491 -> gettext_quote_2493 and gettext_quote_3477 -> gettext_quote_3481 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2494 -> gettext_quote_2496 and gettext_quote_3482 -> gettext_quote_3485

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 3),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56)

SB || RCX := Dereference: [(Reg: RAX + Value: 3),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 56)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2494 -> gettext_quote_2496 and gettext_quote_3482 -> gettext_quote_3485 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2497 -> gettext_quote_2499 and gettext_quote_3486 -> gettext_quote_3489

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 4),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48)

SB || RCX := Dereference: [(Reg: RAX + Value: 4),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 48)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2497 -> gettext_quote_2499 and gettext_quote_3486 -> gettext_quote_3489 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2500 -> gettext_quote_2502 and gettext_quote_3490 -> gettext_quote_3494

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 5),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51)

SB || RCX := Dereference: [(Reg: RAX + Value: 5),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 51)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 5 64]) 1),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 5 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 5 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2500 -> gettext_quote_2502 and gettext_quote_3490 -> gettext_quote_3494 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2503 -> gettext_quote_2505 and gettext_quote_3495 -> gettext_quote_3500

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 6),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48)

SB || RCX := Dereference: [(Reg: RAX + Value: 6),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), CF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), SF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), OF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48), PF := CMP(Dereference: [(Reg: RAX + Value: 6),1],Value: 48)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 6 64]) 1),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 6 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 6 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2503 -> gettext_quote_2505 and gettext_quote_3495 -> gettext_quote_3500 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2506 -> gettext_quote_2507 and gettext_quote_3501 -> gettext_quote_3504

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 7),1],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2506 -> gettext_quote_2507 and gettext_quote_3501 -> gettext_quote_3504 have been verified to do the same.

same_behavior for the nodes: .label_168 -> gettext_quote_2522 and .label_168 -> gettext_quote_3526

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.17_0,4], RCX := Dereference: [Reg: RBX,1]
SA || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

SB || RAX := Dereference: [Var: .str.17_0,4], RCX := Dereference: [Reg: RBX,1]
SB || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.17_0" 64) 4),(RCX,E_deref (E_reg RBX) 1)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.17_0" 64) 4),(RCX,E_deref (E_reg RBX) 1)]
Resulting values:
Value A:
E_deref (E_var ".str.17_0" 64) 4
Value B:
E_deref (E_var ".str.17_0" 64) 4
Resulting values:
Value A:
E_deref (E_reg RBX) 1
Value B:
E_deref (E_reg RBX) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_168 -> gettext_quote_2522 and .label_168 -> gettext_quote_3526 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2523 -> gettext_quote_2524 and gettext_quote_3527 -> gettext_quote_3528

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.18_0,4]

SB || RAX := Dereference: [Var: .str.18_0,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.18_0" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.18_0" 64) 4
Value B:
E_deref (E_var ".str.18_0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2523 -> gettext_quote_2524 and gettext_quote_3527 -> gettext_quote_3528 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2462 -> gettext_quote_2463 and gettext_quote_3434 -> gettext_quote_3437

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), CF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), SF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), OF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), PF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), CF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), SF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), OF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85), PF := CMP(TakeBits: <31,0>(Reg: RCX),Value: 85)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2462 -> gettext_quote_2463 and gettext_quote_3434 -> gettext_quote_3437 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2464 -> gettext_quote_2467 and gettext_quote_3438 -> gettext_quote_3442

same_behavior checking these two SStates:

SA || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
SA || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84)

SB || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263)
SB || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 1),1],8,32),Value: 4294967263),Value: 84)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32])]
Resulting values:
Value A:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 1 64]) 1],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2464 -> gettext_quote_2467 and gettext_quote_3438 -> gettext_quote_3442 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2468 -> gettext_quote_2471 and gettext_quote_3443 -> gettext_quote_3448

same_behavior checking these two SStates:

SA || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263)
SA || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70)

SB || RCX := AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263)
SB || ZF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), CF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), SF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), OF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70), PF := CMP(AND(sextend(Dereference: [(Reg: RAX + Value: 2),1],8,32),Value: 4294967263),Value: 70)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1],E_val 4294967263 32]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RAX,E_val 2 64]) 1],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2468 -> gettext_quote_2471 and gettext_quote_3443 -> gettext_quote_3448 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2472 -> gettext_quote_2474 and gettext_quote_3449 -> gettext_quote_3452

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 3),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45)

SB || RCX := Dereference: [(Reg: RAX + Value: 3),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), CF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), SF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), OF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45), PF := CMP(Dereference: [(Reg: RAX + Value: 3),1],Value: 45)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 3 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2472 -> gettext_quote_2474 and gettext_quote_3449 -> gettext_quote_3452 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2475 -> gettext_quote_2477 and gettext_quote_3453 -> gettext_quote_3457

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Reg: RAX + Value: 4),1]
SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56)

SB || RCX := Dereference: [(Reg: RAX + Value: 4),1]
SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), CF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), SF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), OF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56), PF := CMP(Dereference: [(Reg: RAX + Value: 4),1],Value: 56)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1
Value B:
E_deref (E_app (Op ADD) [E_reg RAX,E_val 4 64]) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2475 -> gettext_quote_2477 and gettext_quote_3453 -> gettext_quote_3457 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2478 -> gettext_quote_2479 and gettext_quote_3458 -> gettext_quote_3460

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 5),1],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2478 -> gettext_quote_2479 and gettext_quote_3458 -> gettext_quote_3460 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2480 -> gettext_quote_2483 and gettext_quote_3461 -> gettext_quote_3467

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.14,4], RCX := Dereference: [Reg: RBX,1]
SA || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

SB || RAX := Dereference: [Var: .str.14,4], RCX := Dereference: [Reg: RBX,1]
SB || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.14" 64) 4),(RCX,E_deref (E_reg RBX) 1)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.14" 64) 4),(RCX,E_deref (E_reg RBX) 1)]
Resulting values:
Value A:
E_deref (E_var ".str.14" 64) 4
Value B:
E_deref (E_var ".str.14" 64) 4
Resulting values:
Value A:
E_deref (E_reg RBX) 1
Value B:
E_deref (E_reg RBX) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2480 -> gettext_quote_2483 and gettext_quote_3461 -> gettext_quote_3467 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2484 -> gettext_quote_2485 and gettext_quote_3468 -> gettext_quote_3469

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.15,4]

SB || RAX := Dereference: [Var: .str.15,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.15" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.15" 64) 4
Value B:
E_deref (E_var ".str.15" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2484 -> gettext_quote_2485 and gettext_quote_3468 -> gettext_quote_3469 have been verified to do the same.

Label relationship:
.str.15 <--> .str.15
.str.14 <--> .str.14
.str.18_0 <--> .str.18_0
.str.17_0 <--> .str.17_0
.str.12 <--> .str.12
.str.10_0 <--> .str.10_0
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (3/60): "quote"
--------
.dot code for CFG of text section quote for Vanilla
diGraph quote_Vanilla{
	quote_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quote_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quote_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quote_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quote_4  [label="[.label_154,.label_154]"]
	quote_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quote_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quote_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quote_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quote_9  [label="[.label_153,quotearg_n_options_1907]"]
	quote_10  [label="[.label_150,quotearg_n_options_1835]"]
	quote_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quote_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quote_13  [label="[.label_155,quotearg_n_options_1862]"]
	quote_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quote_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quote_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quote_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quote_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quote_19  [label="[.label_151,.label_151]"]
	quote_20  [label="[.label_152,quotearg_n_options_1808]"]
	quote_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quote_22  [label="[.label_149,.label_149]"]
	quote_23  [label="[quote,quotearg_n_options_1794]"]
	quote_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quote_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quote_0 -> quote_13;
	quote_1 -> quote_10;
	quote_2 -> quote_3;
	quote_3 -> quote_4;
	quote_4 -> quote_5;
	quote_5 -> quote_6;
	quote_6 -> quote_7;
	quote_7 -> quote_9;
	quote_8 -> quote_4 [label="ZF"];
	quote_8 -> quote_2 [label="!ZF"];

	quote_10 -> quote_11;
	quote_11 -> quote_12;
	quote_12 -> quote_13;
	quote_13 -> quote_14;
	quote_14 -> quote_15;
	quote_15 -> quote_9 [label="!CF && !ZF"];
	quote_15 -> quote_8 [label="CF || ZF"];
	quote_16 -> quote_17;
	quote_17 -> quote_18;
	quote_18 -> quote_10 [label="!ZF"];
	quote_18 -> quote_1 [label="ZF"];

	quote_20 -> quote_19 [label="ZF"];
	quote_20 -> quote_16 [label="!ZF"];
	quote_21 -> quote_20 [label="ZF || SF != OF"];
	quote_21 -> quote_0 [label="!ZF && SF == OF"];

	quote_23 -> quote_24;
	quote_24 -> quote_25;
	quote_25 -> quote_22 [label="SF"];
	quote_25 -> quote_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote for Randomized
diGraph quote_Randomized{
	quote_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quote_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quote_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quote_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quote_4  [label="[.label_149,quotearg_n_options_2643]"]
	quote_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quote_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quote_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quote_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quote_9  [label="[.label_153,quotearg_n_options_2690]"]
	quote_10  [label="[.label_154,quotearg_n_options_2578]"]
	quote_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quote_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quote_13  [label="[.label_151,quotearg_n_options_2619]"]
	quote_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quote_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quote_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quote_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quote_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quote_19  [label="[.label_152,.label_152]"]
	quote_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quote_21  [label="[.label_150,quotearg_n_options_2545]"]
	quote_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quote_23  [label="[.label_155,.label_155]"]
	quote_(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quote_25  [label="[quote,quotearg_n_options_2525]"]
	quote_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quote_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quote_0 -> quote_13;
	quote_1 -> quote_10;
	quote_2 -> quote_3;
	quote_3 -> quote_4;
	quote_4 -> quote_5;
	quote_5 -> quote_6;
	quote_6 -> quote_7;
	quote_7 -> quote_9;
	quote_8 -> quote_4 [label="ZF"];
	quote_8 -> quote_2 [label="!ZF"];

	quote_10 -> quote_11;
	quote_11 -> quote_12;
	quote_12 -> quote_13;
	quote_13 -> quote_14;
	quote_14 -> quote_15;
	quote_15 -> quote_9 [label="!CF && !ZF"];
	quote_15 -> quote_8 [label="CF || ZF"];
	quote_16 -> quote_17;
	quote_17 -> quote_18;
	quote_18 -> quote_10 [label="!ZF"];
	quote_18 -> quote_1 [label="ZF"];
	quote_19 -> quote_20;

	quote_21 -> quote_19 [label="ZF"];
	quote_21 -> quote_16 [label="!ZF"];
	quote_22 -> quote_21 [label="ZF || SF != OF"];
	quote_22 -> quote_0 [label="!ZF && SF == OF"];
	quote_23 -> quote_24;

	quote_25 -> quote_26;
	quote_26 -> quote_27;
	quote_27 -> quote_23 [label="SF"];
	quote_27 -> quote_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quote"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(R(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
eg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quote -> quotearg_n_options_1794 and quote -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote -> quotearg_n_options_1794 and quote -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (4/60): "quote_n"
--------
.dot code for CFG of text section quote_n for Vanilla
diGraph quote_n_Vanilla{
	quote_n_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quote_n_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quote_n_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quote_n_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quote_n_4  [label="[.label_154,.label_154]"]
	quote_n_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quote_n_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quote_n_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quote_n_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quote_n_9  [label="[.label_153,quotearg_n_options_1907]"]
	quote_n_10  [label="[.label_150,quotearg_n_options_1835]"]
	quote_n_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quote_n_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quote_n_13  [label="[.label_155,quotearg_n_options_1862]"]
	quote_n_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quote_n_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quote_n_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quote_n_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quote_n_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quote_n_19  [label="[.label_151,.label_151]"]
	quote_n_20  [label="[.label_152,quotearg_n_options_1808]"]
	quote_n_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quote_n_22  [label="[.label_149,.label_149]"]
	quote_n_23  [label="[quote_n,quotearg_n_options_1794]"]
	quote_n_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quote_n_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quote_n_0 -> quote_n_13;
	quote_n_1 -> quote_n_10;
	quote_n_2 -> quote_n_3;
	quote_n_3 -> quote_n_4;
	quote_n_4 -> quote_n_5;
	quote_n_5 -> quote_n_6;
	quote_n_6 -> quote_n_7;
	quote_n_7 -> quote_n_9;
	quote_n_8 -> quote_n_4 [label="ZF"];
	quote_n_8 -> quote_n_2 [label="!ZF"];

	quote_n_10 -> quote_n_11;
	quote_n_11 -> quote_n_12;
	quote_n_12 -> quote_n_13;
	quote_n_13 -> quote_n_14;
	quote_n_14 -> quote_n_15;
	quote_n_15 -> quote_n_9 [label="!CF && !ZF"];
	quote_n_15 -> quote_n_8 [label="CF || ZF"];
	quote_n_16 -> quote_n_17;
	quote_n_17 -> quote_n_18;
	quote_n_18 -> quote_n_10 [label="!ZF"];
	quote_n_18 -> quote_n_1 [label="ZF"];

	quote_n_20 -> quote_n_19 [label="ZF"];
	quote_n_20 -> quote_n_16 [label="!ZF"];
	quote_n_21 -> quote_n_20 [label="ZF || SF != OF"];
	quote_n_21 -> quote_n_0 [label="!ZF && SF == OF"];

	quote_n_23 -> quote_n_24;
	quote_n_24 -> quote_n_25;
	quote_n_25 -> quote_n_22 [label="SF"];
	quote_n_25 -> quote_n_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_n for Randomized
diGraph quote_n_Randomized{
	quote_n_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quote_n_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quote_n_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quote_n_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quote_n_4  [label="[.label_149,quotearg_n_options_2643]"]
	quote_n_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
	quote_n_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quote_n_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quote_n_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quote_n_9  [label="[.label_153,quotearg_n_options_2690]"]
	quote_n_10  [label="[.label_154,quotearg_n_options_2578]"]
	quote_n_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quote_n_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quote_n_13  [label="[.label_151,quotearg_n_options_2619]"]
	quote_n_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quote_n_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quote_n_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quote_n_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quote_n_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quote_n_19  [label="[.label_152,.label_152]"]
	quote_n_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quote_n_21  [label="[.label_150,quotearg_n_options_2545]"]
	quote_n_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quote_n_23  [label="[.label_155,.label_155]"]
	quote_n_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quote_n_25  [label="[quote_n,quotearg_n_options_2525]"]
	quote_n_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quote_n_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quote_n_0 -> quote_n_13;
	quote_n_1 -> quote_n_10;
	quote_n_2 -> quote_n_3;
	quote_n_3 -> quote_n_4;
	quote_n_4 -> quote_n_5;
	quote_n_5 -> quote_n_6;
	quote_n_6 -> quote_n_7;
	quote_n_7 -> quote_n_9;
	quote_n_8 -> quote_n_4 [label="ZF"];
	quote_n_8 -> quote_n_2 [label="!ZF"];

	quote_n_10 -> quote_n_11;
	quote_n_11 -> quote_n_12;
	quote_n_12 -> quote_n_13;
	quote_n_13 -> quote_n_14;
	quote_n_14 -> quote_n_15;
	quote_n_15 -> quote_n_9 [label="!CF && !ZF"];
	quote_n_15 -> quote_n_8 [label="CF || ZF"];
	quote_n_16 -> quote_n_17;
	quote_n_17 -> quote_n_18;
	quote_n_18 -> quote_n_10 [label="!ZF"];
	quote_n_18 -> quote_n_1 [label="ZF"];
	quote_n_19 -> quote_n_20;

	quote_n_21 -> quote_n_19 [label="ZF"];
	quote_n_21 -> quote_n_16 [label="!ZF"];
	quote_n_22 -> quote_n_21 [label="ZF || SF != OF"];
	quote_n_22 -> quote_n_0 [label="!ZF && SF == OF"];
	quote_n_23 -> quote_n_24;

	quote_n_25 -> quote_n_26;
	quote_n_26 -> quote_n_27;
	quote_n_27 -> quote_n_23 [label="SF"];
	quote_n_27 -> quote_n_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),V(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
alue: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quote_n -> quotearg_n_options_1794 and quote_n -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: quote_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n -> quotearg_n_options_1794 and quote_n -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (5/60): "quote_mem"
--------
.dot code for CFG of text section quote_mem for Vanilla
diGraph quote_mem_Vanilla{
	quote_mem_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quote_mem_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quote_mem_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quote_mem_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quote_mem_4  [label="[.label_154,.label_154]"]
	quote_mem_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quote_mem_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quote_mem_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quote_mem_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quote_mem_9  [label="[.label_153,quotearg_n_options_1907]"]
	quote_mem_10  [label="[.label_150,quotearg_n_options_1835]"]
	quote_mem_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quote_mem_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quote_mem_13  [label="[.label_155,quotearg_n_options_1862]"]
	quote_mem_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quote_mem_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quote_mem_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quote_mem_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quote_mem_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quote_mem_19  [label="[.label_151,.label_151]"]
	quote_mem_20  [label="[.label_152,quotearg_n_options_1808]"]
	quote_mem_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quote_mem_22  [label="[.label_149,.label_149]"]
	quote_mem_23  [label="[quote_mem,quotearg_n_options_1794]"]
	quote_mem_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quote_mem_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quote_mem_0 -> quote_mem_13;
	quote_mem_1 -> quote_mem_10;
	quote_mem_2 -> quote_mem_3;
	quote_mem_3 -> quote_mem_4;
	quote_mem_4 -> quote_mem_5;
	quote_mem_5 -> quote_mem_6;
	quote_mem_6 -> quote_mem_7;
	quote_mem_7 -> quote_mem_9;
	quote_mem_8 -> quote_mem_4 [label="ZF"];
	quote_mem_8 -> quote_mem_2 [label="!ZF"];

	quote_mem_10 -> quote_mem_11;
	quote_mem_11 -> quote_mem_12;
	quote_mem_12 -> quote_mem_13;
	quote_mem_13 -> quote_mem_14;
	quote_mem_14 -> quote_mem_15;
	quote_mem_15 -> quote_mem_9 [label="!CF && !ZF"];
	quote_mem_15 -> quote_mem_8 [label="CF || ZF"];
	quote_mem_16 -> quote_mem_17;
	quote_mem_17 -> quote_mem_18;
	quote_mem_18 -> quote_mem_10 [label="!ZF"];
	quote_mem_18 -> quote_mem_1 [label="ZF"];

	quote_mem_20 -> quote_mem_19 [label="ZF"];
	quote_mem_20 -> quote_mem_16 [label="!ZF"];
	quote_mem_21 -> quote_mem_20 [label="ZF || SF != OF"];
	quote_mem_21 -> quote_mem_0 [label="!ZF && SF == OF"];

	quote_mem_23 -> quote_mem_24;
	quote_mem_24 -> quote_mem_25;
	quote_mem_25 -> quote_mem_22 [label="SF"];
	quote_mem_25 -> quote_mem_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_mem for Randomized
diGraph quote_mem_Randomized{
	quote_mem_0  [label="[quotearg_n_options_2534,quotearg_n_options_25(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
38]"]
	quote_mem_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quote_mem_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quote_mem_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quote_mem_4  [label="[.label_149,quotearg_n_options_2643]"]
	quote_mem_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quote_mem_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quote_mem_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quote_mem_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quote_mem_9  [label="[.label_153,quotearg_n_options_2690]"]
	quote_mem_10  [label="[.label_154,quotearg_n_options_2578]"]
	quote_mem_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quote_mem_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quote_mem_13  [label="[.label_151,quotearg_n_options_2619]"]
	quote_mem_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quote_mem_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quote_mem_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quote_mem_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quote_mem_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quote_mem_19  [label="[.label_152,.label_152]"]
	quote_mem_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quote_mem_21  [label="[.label_150,quotearg_n_options_2545]"]
	quote_mem_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quote_mem_23  [label="[.label_155,.label_155]"]
	quote_mem_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quote_mem_25  [label="[quote_mem,quotearg_n_options_2525]"]
	quote_mem_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quote_mem_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quote_mem_0 -> quote_mem_13;
	quote_mem_1 -> quote_mem_10;
	quote_mem_2 -> quote_mem_3;
	quote_mem_3 -> quote_mem_4;
	quote_mem_4 -> quote_mem_5;
	quote_mem_5 -> quote_mem_6;
	quote_mem_6 -> quote_mem_7;
	quote_mem_7 -> quote_mem_9;
	quote_mem_8 -> quote_mem_4 [label="ZF"];
	quote_mem_8 -> quote_mem_2 [label="!ZF"];

	quote_mem_10 -> quote_mem_11;
	quote_mem_11 -> quote_mem_12;
	quote_mem_12 -> quote_mem_13;
	quote_mem_13 -> quote_mem_14;
	quote_mem_14 -> quote_mem_15;
	quote_mem_15 -> quote_mem_9 [label="!CF && !ZF"];
	quote_mem_15 -> quote_mem_8 [label="CF || ZF"];
	quote_mem_16 -> quote_mem_17;
	quote_mem_17 -> quote_mem_18;
	quote_mem_18 -> quote_mem_10 [label="!ZF"];
	quote_mem_18 -> quote_mem_1 [label="ZF"];
	quote_mem_19 -> quote_mem_20;

	quote_mem_21 -> quote_mem_19 [label="ZF"];
	quote_mem_21 -> quote_mem_16 [label="!ZF"];
	quote_mem_22 -> quote_mem_21 [label="ZF || SF != OF"];
	quote_mem_22 -> quote_mem_0 [label="!ZF && SF == OF"];
	quote_mem_23 -> quote_mem_24;

	quote_mem_25 -> quote_mem_26;
	quote_mem_26 -> quote_mem_27;
	quote_mem_27 -> quote_mem_23 [label="SF"];
	quote_mem_27 -> quote_mem_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_mem"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := Take(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
Bits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_mem"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quote_mem -> quotearg_n_options_1794 and quote_mem -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: quote_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: quote_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_mem -> quotearg_n_options_1794 and quote_mem -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (6/60): "quote_n_mem"
--------
.dot code for CFG of text section quote_n_mem for Vanilla
diGraph quote_n_mem_Vanilla{
	quote_n_mem_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quote_n_mem_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quote_n_mem_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quote_n_mem_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quote_n_mem_4  [label="[.label_154,.label_154]"]
	quote_n_mem_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quote_n_mem_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quote_n_mem_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quote_n_mem_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quote_n_mem_9  [label="[.label_153,quotearg_n_options_1907]"]
	quote_n_mem_10  [label="[.label_150,quotearg_n_options_1835]"]
	quote_n_mem_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quote_n_mem_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quote_n_mem_13  [label="[.label_155,quotearg_n_options_1862]"]
	quote_n_mem_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quote_n_mem_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quote_n_mem_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quote_n_mem_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quote_n_mem_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quote_n_mem_19  [label="[.label_151,.label_151]"]
	quote_n_mem_20  [label="[.label_152,quotearg_n_options_1808]"]
	quote_n_mem_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quote_n_mem_22  [label="[.label_149,.label_149]"]
	quote_n_mem_23  [label="[quote_n_mem,quotearg_n_options_1794]"]
	quote_n_mem_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quote_n_mem_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quote_n_mem_0 (13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
-> quote_n_mem_13;
	quote_n_mem_1 -> quote_n_mem_10;
	quote_n_mem_2 -> quote_n_mem_3;
	quote_n_mem_3 -> quote_n_mem_4;
	quote_n_mem_4 -> quote_n_mem_5;
	quote_n_mem_5 -> quote_n_mem_6;
	quote_n_mem_6 -> quote_n_mem_7;
	quote_n_mem_7 -> quote_n_mem_9;
	quote_n_mem_8 -> quote_n_mem_4 [label="ZF"];
	quote_n_mem_8 -> quote_n_mem_2 [label="!ZF"];

	quote_n_mem_10 -> quote_n_mem_11;
	quote_n_mem_11 -> quote_n_mem_12;
	quote_n_mem_12 -> quote_n_mem_13;
	quote_n_mem_13 -> quote_n_mem_14;
	quote_n_mem_14 -> quote_n_mem_15;
	quote_n_mem_15 -> quote_n_mem_9 [label="!CF && !ZF"];
	quote_n_mem_15 -> quote_n_mem_8 [label="CF || ZF"];
	quote_n_mem_16 -> quote_n_mem_17;
	quote_n_mem_17 -> quote_n_mem_18;
	quote_n_mem_18 -> quote_n_mem_10 [label="!ZF"];
	quote_n_mem_18 -> quote_n_mem_1 [label="ZF"];

	quote_n_mem_20 -> quote_n_mem_19 [label="ZF"];
	quote_n_mem_20 -> quote_n_mem_16 [label="!ZF"];
	quote_n_mem_21 -> quote_n_mem_20 [label="ZF || SF != OF"];
	quote_n_mem_21 -> quote_n_mem_0 [label="!ZF && SF == OF"];

	quote_n_mem_23 -> quote_n_mem_24;
	quote_n_mem_24 -> quote_n_mem_25;
	quote_n_mem_25 -> quote_n_mem_22 [label="SF"];
	quote_n_mem_25 -> quote_n_mem_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_n_mem for Randomized
diGraph quote_n_mem_Randomized{
	quote_n_mem_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quote_n_mem_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quote_n_mem_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quote_n_mem_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quote_n_mem_4  [label="[.label_149,quotearg_n_options_2643]"]
	quote_n_mem_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quote_n_mem_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quote_n_mem_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quote_n_mem_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quote_n_mem_9  [label="[.label_153,quotearg_n_options_2690]"]
	quote_n_mem_10  [label="[.label_154,quotearg_n_options_2578]"]
	quote_n_mem_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quote_n_mem_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quote_n_mem_13  [label="[.label_151,quotearg_n_options_2619]"]
	quote_n_mem_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quote_n_mem_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quote_n_mem_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quote_n_mem_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quote_n_mem_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quote_n_mem_19  [label="[.label_152,.label_152]"]
	quote_n_mem_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quote_n_mem_21  [label="[.label_150,quotearg_n_options_2545]"]
	quote_n_mem_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quote_n_mem_23  [label="[.label_155,.label_155]"]
	quote_n_mem_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quote_n_mem_25  [label="[quote_n_mem,quotearg_n_options_2525]"]
	quote_n_mem_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quote_n_mem_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quote_n_mem_0 -> quote_n_mem_13;
	quote_n_mem_1 -> quote_n_mem_10;
	quote_n_mem_2 -> quote_n_mem_3;
	quote_n_mem_3 -> quote_n_mem_4;
	quote_n_mem_4 -> quote_n_mem_5;
	quote_n_mem_5 -> quote_n_mem_6;
	quote_n_mem_6 -> quote_n_mem_7;
	quote_n_mem_7 -> quote_n_mem_9;
	quote_n_mem_8 -> quote_n_mem_4 [label="ZF"];
	quote_n_mem_8 -> quote_n_mem_2 [label="!ZF"];

	quote_n_mem_10 -> quote_n_mem_11;
	quote_n_mem_11 -> quote_n_mem_12;
	quote_n_mem_12 -> quote_n_mem_13;
	quote_n_mem_13 -> quote_n_mem_14;
	quote_n_mem_14 -> quote_n_mem_15;
	quote_n_mem_15 -> quote_n_mem_9 [label="!CF && !ZF"];
	quote_n_mem_15 -> quote_n_mem_8 [label="CF || ZF"];
	quote_n_mem_16 -> quote_n_mem_17;
	quote_n_mem_17 -> quote_n_mem_18;
	quote_n_mem_18 -> quote_n_mem_10 [label="!ZF"];
	quote_n_mem_18 -> quote_n_mem_1 [label="ZF"];
	quote_n_mem_19 -> quote_n_mem_20;

	quote_n_mem_21 -> quote_n_mem_19 [label="ZF"];
	quote_n_mem_21 -> quote_n_mem_16 [label="!ZF"];
	quote_n_mem_22 -> quote_n_mem_21 [label="ZF || SF != OF"];
	quote_n_mem_22 -> quote_n_mem_0 [label="!ZF && SF == OF"];
	quote_n_mem_23 -> quote_n_mem_24;

	quote_n_mem_25 -> quote_n_mem_26;
	quote_n_mem_26 -> quote_n_mem_27;
	quote_n_mem_27 -> quote_n_mem_23 [label="SF"];
	quote_n_mem_27 -> quote_n_mem_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n_mem"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg:(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
 RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n_mem"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: quote_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quote_n_mem -> quotearg_n_options_1794 and quote_n_mem -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: quote_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: quote_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: quote_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "quote_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "quote_quoting_options" 64) 4)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n_mem -> quotearg_n_options_1794 and quote_n_mem -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (7/60): "quotearg_custom_mem"
--------
.dot code for CFG of text section quotearg_custom_mem for Vanilla
diGraph quotearg_custom_mem_Vanilla{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem_2376,quotearg_custom_mem_2382]"]
	quotearg_custom_mem_1  [label="[quotearg_custom_mem_2383,quotearg_custom_mem_2383]"]
	quotearg_custom_mem_2  [label="[quotearg_custom_mem_2384,quotearg_custom_mem_2385]"]
	quotearg_custom_mem_3  [label="[quotearg_custom_mem_2374,quotearg_custom_mem_2375]"]
	quotearg_custom_mem_4  [label="[.label_167,.label_167]"]
	quotearg_custom_mem_5  [label="[quotearg_custom_mem,quotearg_custom_mem_2373]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quotearg_custom_mem_1 -> quotearg_custom_mem_2;

	quotearg_custom_mem_3 -> quotearg_custom_mem_4 [label="ZF"];
	quotearg_custom_mem_3 -> quotearg_custom_mem_0 [label="!ZF"];

	quotearg_custom_mem_5 -> quotearg_custom_mem_4 [label="ZF"];
	quotearg_custom_mem_5 -> quotearg_custom_mem_3 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_custom_mem for Randomized
diGraph quotearg_custom_mem_Randomized{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem_3328,quotearg_custom_mem_3338]"]
	quotearg_custom_mem_1  [label="[quotearg_custom_mem_3339,quotearg_custom_mem_3339]"]
	quotearg_custom_mem_2  [label="[quotearg_custom_mem_3340,quotearg_custom_mem_3343]"]
	quotearg_custom_mem_3  [label="[quotearg_custom_mem_3326,quotearg_custom_mem_3327]"]
	quotearg_custom_mem_4  [label="[.label_167,.label_167]"]
	quotearg_custom_mem_5  [label="[quotearg_custom_mem,quotearg_custom_mem_3325]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quotearg_custom_mem_1 -> quotearg_custom_mem_2;

	quotearg_custom_mem_3 -> quotearg_custom_mem_4 [label="ZF"];
	quotearg_custom_mem_3 -> quotearg_custom_mem_0 [label="!ZF"];

	quotearg_custom_mem_5 -> quotearg_custom_mem_4 [label="ZF"];
	quotearg_custom_mem_5 -> quotearg_custom_mem_3 [labe(5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
l="!ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RDI := Value: 0, RSI := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 4:
RAX := abort@()
node 5:
RAX := Dereference: [(Var: quotearg_custom_mem_2363 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_mem_2369 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_mem_2363 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_mem_2365 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_mem_2367 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_mem_2369 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RDI := Value: 0, RSI := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 4:
RAX := abort@()
node 5:
RAX := Dereference: [(Var: quotearg_custom_mem_3307 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_mem_3319 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_mem_3307 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_mem_3311 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_mem_3315 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_mem_3319 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: quotearg_custom_mem -> quotearg_custom_mem_2373 and quotearg_custom_mem -> quotearg_custom_mem_3325

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_custom_mem_2363 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_mem_2369 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_mem_2363 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_mem_2365 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_mem_2367 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_mem_2369 + Var: default_quoting_options),16]) . Value: 10)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [(Var: quotearg_custom_mem_3307 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_mem_3319 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_mem_3307 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_mem_3311 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_mem_3315 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_mem_3319 + Var: default_quoting_options),16]) . Value: 10)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3307" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3319" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3307" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3319" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2363" 64,E_var "label_160" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3307" 64,E_var "label_160" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2369" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3319" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2363" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3307" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2365" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3311" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2365" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3315" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2367" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3311" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2367" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3315" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_2369" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_custom_mem_3319" 64,E_var "default_quoting_options" (5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
64]) 16],E_val 10 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem -> quotearg_custom_mem_2373 and quotearg_custom_mem -> quotearg_custom_mem_3325 have been verified to do the same.

same_behavior for the nodes: .label_167 -> .label_167 and .label_167 -> .label_167

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_167 -> .label_167 and .label_167 -> .label_167 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2374 -> quotearg_custom_mem_2375 and quotearg_custom_mem_3326 -> quotearg_custom_mem_3327

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2374 -> quotearg_custom_mem_2375 and quotearg_custom_mem_3326 -> quotearg_custom_mem_3327 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2376 -> quotearg_custom_mem_2382 and quotearg_custom_mem_3328 -> quotearg_custom_mem_3338

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RDI := Value: 0, RSI := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RDI := Value: 0, RSI := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RDI,E_val 0 64),(RSI,E_reg RDX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RDI,E_val 0 64),(RSI,E_reg RDX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RDI,E_val 0 64),(RSI,E_reg RDX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RDI,E_val 0 64),(RSI,E_reg RDX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RDI,E_val 0 64),(RSI,E_reg RDX)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2376 -> quotearg_custom_mem_2382 and quotearg_custom_mem_3328 -> quotearg_custom_mem_3338 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2383 -> quotearg_custom_mem_2383 and quotearg_custom_mem_3339 -> quotearg_custom_mem_3339

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2383 -> quotearg_custom_mem_2383 and quotearg_custom_mem_3339 -> quotearg_custom_mem_3339 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2384 -> quotearg_custom_mem_2385 and quotearg_custom_mem_3340 -> quotearg_custom_mem_3343

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2384 -> quotearg_custom_mem_2385 and quotearg_custom_mem_3340 -> quotearg_custom_mem_3343 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_custom_mem_2367 <--> quotearg_custom_mem_3315,quotearg_custom_mem_3311
label_161 <--> label_162,label_161
quotearg_custom_mem_2365 <--> quotearg_custom_mem_3315,quotearg_custom_mem_3311
default_quoting_options <--> default_quoting_options
quotearg_custom_mem_2369 <--> quotearg_custom_mem_3319
label_160 <--> label_160
quotearg_custom_mem_2363 <--> quotearg_custom_mem_3307

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (8/60): "quotearg_custom"
--------
.dot code for CFG of text section quotearg_custom for Vanilla
diGraph quotearg_custom_Vanilla{
	quotearg_custom_0  [label="[quotearg_custom_2344,quotearg_custom_2349]"]
	quotearg_custom_1  [label="[quotearg_custom_2350,quotearg_custom_2350]"]
	quotearg_custom_2  [label="[quotearg_custom_2351,quotearg_custom_2352]"]
	quotearg_custom_3  [label="[quotearg_custom_2342,quotearg_custom_2343]"]
	quotearg_custom_4  [label="[.label_166,.label_166]"]
	quotearg_custom_5  [label="[quotearg_custom,quotearg_custom_2341]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;

	quotearg_custom_3 -> quotearg_custom_4 [label="ZF"];
	quotearg_custom_3 -> quotearg_custom_0 [label="!ZF"];

	quotearg_custom_5 -> quotearg_custom_4 [label="ZF"];
	quotearg_custom_5 -> quotearg_custom_3 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_custom for Randomized
diGraph quotearg_custom_Randomized{
	quotearg_custom_0  [label="[quotearg_custom_3281,quotearg_custom_3289]"]
	quotearg_custom_1  [label="[quotearg_custom_3290,quotearg_custom_3290]"]
	quotearg_custom_2  [label="[quotearg_custom_3291,quotearg_custom_3294]"]
	quotearg_custom_3  [label="[quotearg_custom_3278,quotearg_custom_3280]"]
	quotearg_custom_4  [label="[.label_166,.label_166]"]
	quotearg_custom_5  [label="[quotearg_custom,quotearg_custom_3277]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;

	quotearg_custom_3 -> quotearg_custom_4 [label="ZF"];
	quotearg_custom_3 -> quotearg_custom_0 [label="!ZF"];

	quotearg_custom_5 -> quotearg_custom_4 [label="ZF"];
	quotearg_custom_5 -> quotearg_custom_3 [label="!ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Vanilla":
Curren(5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
t text section: "quotearg_custom"
node 0:
RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RAX
[(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 4:
RAX := abort@()
node 5:
RAX := Reg: RDX, RCX := Dereference: [(Var: quotearg_custom_2331 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_2337 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_2331 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_2333 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_2335 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_2337 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom"
node 0:
RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RAX
[(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 4:
RAX := abort@()
node 5:
RAX := Reg: RDX, RCX := Dereference: [(Var: quotearg_custom_3261 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_3271 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_3261 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_3264 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_3268 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_3271 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: quotearg_custom -> quotearg_custom_2341 and quotearg_custom -> quotearg_custom_3277

same_behavior checking these two SStates:

SA || RAX := Reg: RDX, RCX := Dereference: [(Var: quotearg_custom_2331 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_2337 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_2331 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_2333 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_2335 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_2337 + Var: default_quoting_options),16]) . Value: 10)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Reg: RDX, RCX := Dereference: [(Var: quotearg_custom_3261 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_custom_3271 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_custom_3261 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_custom_3264 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_custom_3268 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_custom_3271 + Var: default_quoting_options),16]) . Value: 10)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RCX,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3261" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3271" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RCX,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3261" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3271" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RCX,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3261" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_custom_3271" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2331" 64,E_var "label_160" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3261" 64,E_var "label_160" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2337" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3271" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2331" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3261" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2333" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3264" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2333" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3268" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2335" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3264" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_custom_2335" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_custom_3268" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_custom_2337" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotea(5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
rg_custom_3271" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom -> quotearg_custom_2341 and quotearg_custom -> quotearg_custom_3277 have been verified to do the same.

same_behavior for the nodes: .label_166 -> .label_166 and .label_166 -> .label_166

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_166 -> .label_166 and .label_166 -> .label_166 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2342 -> quotearg_custom_2343 and quotearg_custom_3278 -> quotearg_custom_3280

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2342 -> quotearg_custom_2343 and quotearg_custom_3278 -> quotearg_custom_3280 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2344 -> quotearg_custom_2349 and quotearg_custom_3281 -> quotearg_custom_3289

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RAX
SA || [(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RAX
SB || [(Var: RSP0 - Value: 8),8] := Reg: RSI, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2344 -> quotearg_custom_2349 and quotearg_custom_3281 -> quotearg_custom_3289 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2350 -> quotearg_custom_2350 and quotearg_custom_3290 -> quotearg_custom_3290

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2350 -> quotearg_custom_2350 and quotearg_custom_3290 -> quotearg_custom_3290 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2351 -> quotearg_custom_2352 and quotearg_custom_3291 -> quotearg_custom_3294

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2351 -> quotearg_custom_2352 and quotearg_custom_3291 -> quotearg_custom_3294 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_custom_2335 <--> quotearg_custom_3268,quotearg_custom_3264
label_161 <--> label_162,label_161
quotearg_custom_2333 <--> quotearg_custom_3268,quotearg_custom_3264
default_quoting_options <--> default_quoting_options
quotearg_custom_2337 <--> quotearg_custom_3271
label_160 <--> label_160
quotearg_custom_2331 <--> quotearg_custom_3261

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (9/60): "quotearg_n_custom_mem"
--------
.dot code for CFG of text section quotearg_n_custom_mem for Vanilla
diGraph quotearg_n_custom_mem_Vanilla{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem_2310,quotearg_n_custom_mem_2315]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_2316,quotearg_n_custom_mem_2316]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_2317,quotearg_n_custom_mem_2318]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_2308,quotearg_n_custom_mem_2309]"]
	quotearg_n_custom_mem_4  [label="[.label_165,.label_165]"]
	quotearg_n_custom_mem_5  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_2307]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;

	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4 [label="ZF"];
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_0 [label="!ZF"];

	quotearg_n_custom_mem_5 -> quotearg_n_custom_mem_4 [label="ZF"];
	quotearg_n_custom_mem_5 -> quotearg_n_custom_mem_3 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_custom_mem for Randomized
diGraph quotearg_n_custom_mem_Randomized{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem_3233,quotearg_n_custom_mem_3241]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_3242,quotearg_n_custom_mem_3242]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_3243,quotearg_n_custom_mem_3245]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_3231,quotearg_n_custom_mem_3232]"]
	quotearg_n_custom_mem_4  [label="[.label_165,.label_165]"]
	quotearg_n_custom_mem_5  [label="[quotearg_n_custom_mem_3248,quotearg_n_custom_mem_3248]"]
	quotearg_n_custom_mem_6  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_3230]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;

	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4 [label="ZF"];
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_0 [label="!ZF"];
	quotearg_n_custom_mem_4 -> quotearg_n_custom_mem_5;

	quotearg_n_custom_mem_6 -> quotearg_n_custom_mem_4 [label="ZF"];
	quotearg_n_custom_mem_6 -> quotearg_n_custom_mem_3 [label="!ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX :(6,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0)])
= (Var: RSP0 - Value: 56), RDX := Reg: R8, RSI := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 4:
RAX := abort@()
node 5:
RAX := Dereference: [(Var: quotearg_n_custom_mem_2297 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2303 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_mem_2297 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_mem_2299 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_mem_2301 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_mem_2303 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 6

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, 4 ----> 5, , 6 --ZF--> 4, 6 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: R8, RSI := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 4:
skip'
node 5:
RAX := abort@()
node 6:
RAX := Dereference: [(Var: quotearg_n_custom_mem_3217 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3226 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_mem_3217 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_mem_3219 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_mem_3223 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_mem_3226 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: quotearg_n_custom_mem -> quotearg_n_custom_mem_2307 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3230

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_mem_2297 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2303 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_mem_2297 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_mem_2299 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_mem_2301 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_mem_2303 + Var: default_quoting_options),16]) . Value: 10)
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RAX := Dereference: [(Var: quotearg_n_custom_mem_3217 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3226 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_mem_3217 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_mem_3219 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_mem_3223 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_mem_3226 + Var: default_quoting_options),16]) . Value: 10)
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3217" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3226" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3217" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3226" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2297" 64,E_var "label_160" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3217" 64,E_var "label_160" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2303" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3226" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2297" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3217" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2299" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3219" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2299" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3223" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2301" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3219" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2301" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3223" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2303" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3226" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem -> quotearg_n_custom_mem_2307 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3230 have been verified to do the same.

same_behavior for the nodes: .label_165 -> .label_165 and .label_165 -> .label_165

same_behavior checking (5,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_165 -> .label_165 and quotearg_n_custom_mem_3248 -> quotearg_n_custom_mem_3248

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_165 -> .label_165 and quotearg_n_custom_mem_3248 -> quotearg_n_custom_mem_3248 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2308 -> quotearg_n_custom_mem_2309 and quotearg_n_custom_mem_3231 -> quotearg_n_custom_mem_3232

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2308 -> quotearg_n_custom_mem_2309 and quotearg_n_custom_mem_3231 -> quotearg_n_custom_mem_3232 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2310 -> quotearg_n_custom_mem_2315 and quotearg_n_custom_mem_3233 -> quotearg_n_custom_mem_3241

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: R8, RSI := Reg: RCX
SA || [(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI

SB || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: R8, RSI := Reg: RCX
SB || [(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg R8),(RSI,E_reg RCX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg R8),(RSI,E_reg RCX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg R8),(RSI,E_reg RCX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg R8),(RSI,E_reg RCX)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_reg R8
Value B:
E_reg R8
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2310 -> quotearg_n_custom_mem_2315 and quotearg_n_custom_mem_3233 -> quotearg_n_custom_mem_3241 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2316 -> quotearg_n_custom_mem_2316 and quotearg_n_custom_mem_3242 -> quotearg_n_custom_mem_3242

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2316 -> quotearg_n_custom_mem_2316 and quotearg_n_custom_mem_3242 -> quotearg_n_custom_mem_3242 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2317 -> quotearg_n_custom_mem_2318 and quotearg_n_custom_mem_3243 -> quotearg_n_custom_mem_3245

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2317 -> quotearg_n_custom_mem_2318 and quotearg_n_custom_mem_3243 -> quotearg_n_custom_mem_3245 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_n_custom_mem_2301 <--> quotearg_n_custom_mem_3223,quotearg_n_custom_mem_3219
label_161 <--> label_162,label_161
quotearg_n_custom_mem_2299 <--> quotearg_n_custom_mem_3223,quotearg_n_custom_mem_3219
default_quoting_options <--> default_quoting_options
quotearg_n_custom_mem_2303 <--> quotearg_n_custom_mem_3226
label_160 <--> label_160
quotearg_n_custom_mem_2297 <--> quotearg_n_custom_mem_3217

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (10/60): "quotearg_n_custom"
--------
.dot code for CFG of text section quotearg_n_custom for Vanilla
diGraph quotearg_n_custom_Vanilla{
	quotearg_n_custom_0  [label="[quotearg_n_custom_2277,quotearg_n_custom_2282]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_2283,quotearg_n_custom_2283]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_2284,quotearg_n_custom_2285]"]
	quotearg_n_custom_3  [label="[quotearg_n_custom_2275,quotearg_n_custom_2276]"]
	quotearg_n_custom_4  [label="[.label_164,.label_164]"]
	quotearg_n_custom_5  [label="[quotearg_n_custom,quotearg_n_custom_2274]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;

	quotearg_n_custom_3 -> quotearg_n_custom_4 [label="ZF"];
	quotearg_n_custom_3 -> quotearg_n_custom_0 [label="!ZF"];

	quotearg_n_custom_5 -> quotearg_n_custom_4 [label="ZF"];
	quotearg_n_custom_5 -> quotearg_n_custom_3 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_custom for Randomized
diGraph quotearg_n_custom_Randomized{
	quotearg_n_custom_0  [label="[quotearg_n_custom_3191,quotearg_n_custom_3199]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_3200,quotearg_n_custom_3200]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_3201,quotearg_n_custom_3203]"]
	quotearg_n_custom_3  [label="[quotearg_n_custom_3188,quotearg_n_custom_3190]"]
	quotearg_n_custom_4  [label="[.label_164,.label_164]"]
	quotearg_n_custom_5  [label="[quotearg_n_custom_3206,quotearg_n_custom_3206]"]
	quotearg_n_custom_6  [label="[quotearg_n_custom,quotearg_n_custom_3187]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;

	quotearg_n_custom_3 -> quotearg_n_custom_4 [label="ZF"];
	quotearg_n_custom_3 -> quotearg_n_custom_0 [label="!ZF"];
	quotearg_n_custom_4 -> quotearg_n_custom_5;

	quotearg_n_custom_6 -> quotearg_n_custom_4 [label="ZF"];
	quotearg_n_custom_6 -> quotearg_n_custom_3 [label="!ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --ZF--> 4, 5 --!ZF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Value: 1844674407370955(6,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0)])
1615, RSI := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 4:
RAX := abort@()
node 5:
RAX := Dereference: [(Var: quotearg_n_custom_2264 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_2270 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_2264 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_2266 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_2268 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_2270 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 6

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 4, 3 --!ZF--> 0, 4 ----> 5, , 6 --ZF--> 4, 6 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 4:
skip'
node 5:
RAX := abort@()
node 6:
RAX := Dereference: [(Var: quotearg_n_custom_3171 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_3181 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_3171 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_3175 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_3178 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_3181 + Var: default_quoting_options),16]) . Value: 10)
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: quotearg_n_custom -> quotearg_n_custom_2274 and quotearg_n_custom -> quotearg_n_custom_3187

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_2264 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_2270 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_2264 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_2266 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_2268 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_2270 + Var: default_quoting_options),16]) . Value: 10)
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RAX := Dereference: [(Var: quotearg_n_custom_3171 + Var: label_160),8], XMM0 := Dereference: [(Var: quotearg_n_custom_3181 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_n_custom_3171 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_n_custom_3175 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_n_custom_3178 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (TakeBits: <127,32>(Dereference: [(Var: quotearg_n_custom_3181 + Var: default_quoting_options),16]) . Value: 10)
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3171" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3181" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3171" 64,E_var "label_160" 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3181" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2264" 64,E_var "label_160" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3171" 64,E_var "label_160" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2270" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3181" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2264" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3171" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2266" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3175" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2266" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3178" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2268" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3175" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2268" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3178" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_2270" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
E_app Concat [E_app (TakeBits 127 32) [E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_3181" 64,E_var "default_quoting_options" 64]) 16],E_val 10 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom -> quotearg_n_custom_2274 and quotearg_n_custom -> quotearg_n_custom_3187 have been verified to do the same.

same_behavior for the nodes: .label_164 -> .label_164 and .label_164 -> .label_164

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_beh(4,fromList [(0,RSP == (Var: RSP0 - Value: 168) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 168) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 168) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 168) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
avior for the nodes: .label_164 -> .label_164 and quotearg_n_custom_3206 -> quotearg_n_custom_3206

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_164 -> .label_164 and quotearg_n_custom_3206 -> quotearg_n_custom_3206 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2275 -> quotearg_n_custom_2276 and quotearg_n_custom_3188 -> quotearg_n_custom_3190

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2275 -> quotearg_n_custom_2276 and quotearg_n_custom_3188 -> quotearg_n_custom_3190 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2277 -> quotearg_n_custom_2282 and quotearg_n_custom_3191 -> quotearg_n_custom_3199

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RCX
SA || [(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI

SB || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RCX
SB || [(Var: RSP0 - Value: 8),8] := Reg: RDX, [(Var: RSP0 - Value: 16),8] := Reg: RSI

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RSI,E_reg RCX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RSI,E_reg RCX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RSI,E_reg RCX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RSI,E_reg RCX)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2277 -> quotearg_n_custom_2282 and quotearg_n_custom_3191 -> quotearg_n_custom_3199 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2283 -> quotearg_n_custom_2283 and quotearg_n_custom_3200 -> quotearg_n_custom_3200

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2283 -> quotearg_n_custom_2283 and quotearg_n_custom_3200 -> quotearg_n_custom_3200 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2284 -> quotearg_n_custom_2285 and quotearg_n_custom_3201 -> quotearg_n_custom_3203

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2284 -> quotearg_n_custom_2285 and quotearg_n_custom_3201 -> quotearg_n_custom_3203 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_n_custom_2268 <--> quotearg_n_custom_3178,quotearg_n_custom_3175
label_161 <--> label_162,label_161
quotearg_n_custom_2266 <--> quotearg_n_custom_3178,quotearg_n_custom_3175
default_quoting_options <--> default_quoting_options
quotearg_n_custom_2270 <--> quotearg_n_custom_3181
label_160 <--> label_160
quotearg_n_custom_2264 <--> quotearg_n_custom_3171

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (11/60): "quotearg_n_style_colon"
--------
.dot code for CFG of text section quotearg_n_style_colon for Vanilla
diGraph quotearg_n_style_colon_Vanilla{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon_2229,quotearg_n_style_colon_2249]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_2250,quotearg_n_style_colon_2250]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_2251,quotearg_n_style_colon_2252]"]
	quotearg_n_style_colon_3  [label="[.label_163,.label_163]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon,quotearg_n_style_colon_2228]"]

	quotearg_n_style_colon_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;


	quotearg_n_style_colon_4 -> quotearg_n_style_colon_3 [label="ZF"];
	quotearg_n_style_colon_4 -> quotearg_n_style_colon_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_style_colon for Randomized
diGraph quotearg_n_style_colon_Randomized{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon_3121,quotearg_n_style_colon_3152]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_3153,quotearg_n_style_colon_3153]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_3154,quotearg_n_style_colon_3157]"]
	quotearg_n_style_colon_3  [label="[.label_163,.label_163]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon_3160,quotearg_n_style_colon_3160]"]
	quotearg_n_style_colon_5  [label="[quotearg_n_style_colon,quotearg_n_style_colon_3120]"]

	quotearg_n_style_colon_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;

	quotearg_n_style_colon_3 -> quotearg_n_style_colon_4;

	quotearg_n_style_colon_5 -> quotearg_n_style_colon_3 [label="ZF"];
	quotearg_n_style_colon_5 -> quotearg_n_style_colon_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_colon"
node 0:
RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := (Tak(5,fromList [(0,RSP == (Var: RSP0 - Value: 184) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 184) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 184) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 184) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 184) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
eBits: <127,96>(Dereference: [(Var: RSP0 - Value: 56),16]) . (OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4) . TakeBits: <87,0>(Dereference: [(Var: RSP0 - Value: 56),16]))), [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 120),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 56),16]
ZF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), CF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), SF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), OF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), PF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
RAX := Reg: RDX, XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 ----> 4, , 5 --ZF--> 3, 5 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_colon"
node 0:
RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 184),16], XMM1 := Dereference: [(Var: RSP0 - Value: 168),16], XMM2 := Dereference: [(Var: RSP0 - Value: 152),16]
[(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 136),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 152),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 168),16], [(Var: RSP0 - Value: 52),16] := (TakeBits: <127,96>(Dereference: [(Var: RSP0 - Value: 184),16]) . (OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4) . TakeBits: <87,0>(Dereference: [(Var: RSP0 - Value: 184),16]))), [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 72),4] := Dereference: [(Var: RSP0 - Value: 136),4], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 152),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 168),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 184),16]
ZF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), CF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), SF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), OF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), PF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
skip'
node 4:
RAX := abort@()
node 5:
RAX := Reg: RDX, XMM0 := Value: 0
[(Var: RSP0 - Value: 136),4] := Value: 0, [(Var: RSP0 - Value: 152),16] := Value: 0, [(Var: RSP0 - Value: 168),16] := Value: 0, [(Var: RSP0 - Value: 184),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

same_behavior for the nodes: quotearg_n_style_colon -> quotearg_n_style_colon_2228 and quotearg_n_style_colon -> quotearg_n_style_colon_3120

same_behavior checking these two SStates:

SA || RAX := Reg: RDX, XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

SB || RAX := Reg: RDX, XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 136),4] := Value: 0, [(Var: RSP0 - Value: 152),16] := Value: 0, [(Var: RSP0 - Value: 168),16] := Value: 0, [(Var: RSP0 - Value: 184),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RSI,E_reg RSI),(XMM0,E_val 0 64)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RSI,E_reg RSI),(XMM0,E_val 0 64)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon -> quotearg_n_style_colon_2228 and quotearg_n_style_colon -> quotearg_n_style_colon_3120 have been verified to do the same.

same_behavior for the nodes: .label_163 -> .label_163 and .label_163 -> .label_163

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_163 -> .label_163 and quotearg_n_style_colon_3160 -> quotearg_n_style_colon_3160

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_163 -> .label_163 and quotearg_n_style_colon_3160 -> quotearg_n_style_colon_3160 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2229 -> quotearg_n_style_colon_2249 and quotearg_n_style_colon_3121 -> quotearg_n_style_colon_3152

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := (TakeBits: <127,96>(Dereference: [(Var: RSP0 - Value: 56),16]) . (OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4) . TakeBits: <87,0>(Dereference: [(Var: RSP0 - Value: 56),16]))), [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 120),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 136),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 152),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 168),16] := Dereference: [(Var: RSP0 - Value: 56),16]
SA || ZF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), CF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), SF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), OF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4), PF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 56),16]),Value: 4)

SB || RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 184),16], XMM1 := Dereference: [(Var: RSP0 - Value: 168),16], XMM2 := Dereference: [(Var: RSP0 - Value: 152),16]
SB || [(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 136),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 152),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 168),16], [(Var: RSP0 - Value: 52),16] := (TakeBits: <127,96>(Dereference: [(Var: RSP0 - Value: 184),16]) . (OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4) . TakeBits: <87,0>(Dereference: [(Var: RSP0 - Value: 184),16]))), [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 72),4] := Dereference: [(Var: RSP0 - Value: 136),4], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: RSP0 - Value: 152),16], [(Var: RSP0 - Value: 104),16] := Dereference: [(Var: RSP0 - Value: 168),16], [(Var: RSP0 - Value: 120),16] := Dereference: [(Var: RSP0 - Value: 184),16]
SB || ZF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), CF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), SF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), OF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4), PF := OR(TakeBits: <95,88>(Dereference: [(Var: RSP0 - Value: 184),16]),Value: 4)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 127 96) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16],E_app Concat [E_app (Op OR) [E_app (TakeBits 95 88) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16],E_val 4 8],E_app (TakeBits 87 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16]]]
E_app Concat [E_app (TakeBits 127 96) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16],E_app Concat [E_app (Op OR) [E_app (TakeBits 95 88) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16],E_val 4 8],E_app (TakeBits 87 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16]]]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 168 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2229 -> quotearg_n_style_colon_2249 and quotearg_n_style_colon_3121 -> quotearg_n_style_colon_3152 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2250 -> quotearg_n_style_colon_2250 and quotearg_n_style_colon_3153 -> quotearg_n_style_colon_3153

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2250 -> quotearg_n_style_colon_2250 and quotearg_n_style_colon_3153 -> quotearg_n_style_colon_3153 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2251 -> quotearg_n_style_colon_2252 and quotearg_n_style_colon_3154 -> quotearg_n_style_colon_3157

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2251 -> quotearg_n_style_colon_2252 and quotearg_n_style_colon_3154 -> quotearg_n_style_colon_3157 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 168) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
,(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 136),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 4)
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 52)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 136),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 4)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 184),(Var: RSP0 - Value: 168),(Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 136)

Succesful check!
Considering text section (12/60): "quotearg_colon_mem"
--------
.dot code for CFG of text section quotearg_colon_mem for Vanilla
diGraph quotearg_colon_mem_Vanilla{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_colon_mem_2208]"]
	quotearg_colon_mem_1  [label="[quotearg_colon_mem_2209,quotearg_colon_mem_2209]"]
	quotearg_colon_mem_2  [label="[quotearg_colon_mem_2210,quotearg_colon_mem_2211]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_colon_mem for Randomized
diGraph quotearg_colon_mem_Randomized{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_colon_mem_3098]"]
	quotearg_colon_mem_1  [label="[quotearg_colon_mem_3099,quotearg_colon_mem_3099]"]
	quotearg_colon_mem_2  [label="[quotearg_colon_mem_3100,quotearg_colon_mem_3102]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon_mem"
node 0:
RAX := Reg: RSI, RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_mem_2196 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_mem_2198 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_mem_2200 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]))
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon_mem"
node 0:
RAX := Reg: RSI, RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_mem_3079 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_mem_3081 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_mem_3083 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]))
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

same_behavior for the nodes: quotearg_colon_mem -> quotearg_colon_mem_2208 and quotearg_colon_mem -> quotearg_colon_mem_3098

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_mem_2196 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_mem_2198 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_mem_2200 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_mem_2202 + Var: default_quoting_options),16]))
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Reg: RSI, RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_mem_3079 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_mem_3081 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_mem_3083 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_mem_3087 + Var: default_quoting_options),16]))
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
 A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2202" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2196" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3079" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2198" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3081" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2198" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3083" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2200" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3081" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2200" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3083" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (Op OR) [E_app (TakeBits 127 120) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2202" 64,E_var "default_quoting_options" 64]) 16],E_val 4 8],E_app (TakeBits 119 0) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_2202" 64,E_var "default_quoting_options" 64]) 16]]
E_app Concat [E_app (Op OR) [E_app (TakeBits 127 120) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16],E_val 4 8],E_app (TakeBits 119 0) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_mem_3087" 64,E_var "default_quoting_options" 64]) 16]]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem -> quotearg_colon_mem_2208 and quotearg_colon_mem -> quotearg_colon_mem_3098 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_mem_2209 -> quotearg_colon_mem_2209 and quotearg_colon_mem_3099 -> quotearg_colon_mem_3099

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem_2209 -> quotearg_colon_mem_2209 and quotearg_colon_mem_3099 -> quotearg_colon_mem_3099 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_mem_2210 -> quotearg_colon_mem_2211 and quotearg_colon_mem_3100 -> quotearg_colon_mem_3102

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem_2210 -> quotearg_colon_mem_2211 and quotearg_colon_mem_3100 -> quotearg_colon_mem_3102 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_colon_mem_2200 <--> quotearg_colon_mem_3083,quotearg_colon_mem_3081
label_161 <--> label_162,label_161
quotearg_colon_mem_2198 <--> quotearg_colon_mem_3083,quotearg_colon_mem_3081
label_160 <--> label_160
quotearg_colon_mem_2196 <--> quotearg_colon_mem_3079
default_quoting_options <--> default_quoting_options
quotearg_colon_mem_2202 <--> quotearg_colon_mem_3087

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)

Succesful check!
Considering text section (13/60): "quotearg_colon"
--------
.dot code for CFG of text section quotearg_colon for Vanilla
diGraph quotearg_colon_Vanilla{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_colon_2181]"]
	quotearg_colon_1  [label="[quotearg_colon_2182,quotearg_colon_2182]"]
	quotearg_colon_2  [label="[quotearg_colon_2183,quotearg_colon_2184]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;

}
--------
--------
.dot code for CFG of text section quotearg_colon for Randomized
diGraph quotearg_colon_Randomized{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_colon_3062]"]
	quotearg_colon_1  [label="[quotearg_colon_3063,quotearg_colon_3063]"]
	quotearg_colon_2  [label="[quotearg_colon_3064,quotearg_colon_3066]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon"
node 0:
RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_2169 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_2171 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_2173 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]))
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon"
node 0:
RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_3043 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_3046 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_3048 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]))
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

same_behavior for the nodes: quotearg_colon -> quotearg_colon_2181 and quotearg_colon -> quotearg_colon_3062

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_2169 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_2171 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_2173 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_2175 + Var: default_quoting_options),16]))
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_colon_3043 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_colon_3046 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_colon_3048 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := (OR(TakeBits: <127,120>(Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]),Value: 4) . TakeBits: <119,0>(Dereference: [(Var: quotearg_colon_3052 + Var: default_quoting_options),16]))
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2175" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2169" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3043" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2171" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3046" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2171" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3048" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2173" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3046" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_colon_2173" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_colon_3048" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (Op OR) [E_app (TakeBits 127 120) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_2175" 64,E_var "default_quoting_options" 64]) 16],E_val 4 8],E_app (TakeBits 119 0) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_2175" 64,E_var "default_quoting_options" 64]) 16]]
E_app Concat [E_app (Op OR) [E_app (TakeBits 127 120) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16],E_val 4 8],E_app (TakeBits 119 0) [E_deref (E_app (Op ADD) [E_var "quotearg_colon_3052" 64,E_var "default_quoting_options" 64]) 16]]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon -> quotearg_colon_2181 and quotearg_colon -> quotearg_colon_3062 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_2182 -> quotearg_colon_2182 and quotearg_colon_3063 -> quotearg_colon_3063

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_2182 -> quotearg_colon_2182 and quotearg_colon_3063 -> quotearg_colon_3063 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_2183 -> quotearg_colon_2184 and quotearg_colon_3064 -> quotearg_colon_3066

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_2183 -> quotearg_colon_2184 and quotearg_colon_3064 -> quotearg_colon_3066 have been verified to do the same.

Label relationship:
 <--> 
label_162 <--> label_162,label_161
quotearg_colon_2173 <--> quotearg_colon_3048,quotearg_colon_3046
label_161 <--> label_162,label_161
quotearg_colon_2171 <--> quotearg_colon_3048,quotearg_colon_3046
label_160 <--> label_160
quotearg_colon_2169 <--> quotearg_colon_3043
default_quoting_options <--> default_quoting_option(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
s
quotearg_colon_2175 <--> quotearg_colon_3052

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)

Succesful check!
Considering text section (14/60): "quotearg_char"
--------
.dot code for CFG of text section quotearg_char for Vanilla
diGraph quotearg_char_Vanilla{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_2155]"]
	quotearg_char_1  [label="[quotearg_char_2156,quotearg_char_2156]"]
	quotearg_char_2  [label="[quotearg_char_2157,quotearg_char_2158]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;

}
--------
--------
.dot code for CFG of text section quotearg_char for Randomized
diGraph quotearg_char_Randomized{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_3026]"]
	quotearg_char_1  [label="[quotearg_char_3027,quotearg_char_3027]"]
	quotearg_char_2  [label="[quotearg_char_3028,quotearg_char_3029]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char"
node 0:
RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_char_2139 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_2133 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_2135 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_2137 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_2139 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RSI))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char"
node 0:
RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_char_3000 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_2993 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_2995 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_2998 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_3000 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RSI))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

same_behavior for the nodes: quotearg_char -> quotearg_char_2155 and quotearg_char -> quotearg_char_3026

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_char_2139 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_2133 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_2135 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_2137 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_2139 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RSI))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Reg: RDI, RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, XMM0 := Dereference: [(Var: quotearg_char_3000 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_2993 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_2995 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_2998 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_3000 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RSI))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(RSI,E_reg RDI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_2139" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2133" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_2993" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2135" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2995" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2135" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2998" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2135" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2137" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2995" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2137" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2998" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2137" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2139" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2995" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2139" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_2998" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_2139" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_3000" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Else resulting values:
(a1 := a2):
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]
(v1 := v2):
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op NOT) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4]
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op NOT) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_char -> quotearg_char_2155 and quotearg_char -> quotearg_char_3026 have been verified to do the same.

same_behavior for the nodes: quotearg_char_2156 -> quotearg_char_2156 and quotearg_char_3027 -> quotearg_char_3027

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_2156 -> quotearg_char_2156 and quotearg_char_3027 -> quotearg_char_3027 have been verified to do the same.

same_behavior for the nodes: quotearg_char_2157 -> quotearg_char_2158 and quotearg_char_3028 -> quotearg_char_3029

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_2157 -> quotearg_char_2158 and quotearg_char_3028 -> quotearg_char_3029 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_162,label_161,default_quoting_options
quotearg_char_2139 <--> quotearg_char_2998,quotearg_char_2995,quotearg_char_3000
label_162 <--> default_quoting_options,label_162,label_161
quotearg_char_2137 <--> quotearg_char_3000,quotearg_char_2998,quotearg_char_2995
label_161 <--> default_quoting_options,label_162,label_161
quotearg_char_2135 <--> quotearg_char_3000,quotearg_char_2998,quotearg_char(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0)])
_2995
label_160 <--> label_160
quotearg_char_2133 <--> quotearg_char_2993

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (15/60): "quotearg_char_mem"
--------
.dot code for CFG of text section quotearg_char_mem for Vanilla
diGraph quotearg_char_mem_Vanilla{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_2118]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_2119,quotearg_char_mem_2119]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_2120,quotearg_char_mem_2121]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_char_mem for Randomized
diGraph quotearg_char_mem_Randomized{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_2973]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_2974,quotearg_char_mem_2974]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_2975,quotearg_char_mem_2978]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char_mem"
node 0:
RAX := SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2102 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_mem_2096 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_mem_2098 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_mem_2100 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2102 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RDX))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RDX)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char_mem"
node 0:
RAX := SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2944 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_mem_2935 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_mem_2938 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_mem_2940 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2944 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RDX))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RDX)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
--------

same_behavior for the nodes: quotearg_char_mem -> quotearg_char_mem_2118 and quotearg_char_mem -> quotearg_char_mem_2973

same_behavior checking these two SStates:

SA || RAX := SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2102 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_mem_2096 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_mem_2098 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_mem_2100 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2102 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RDX))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RDX)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2944 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: quotearg_char_mem_2935 + Var: label_160),8], [(Var: RSP0 - Value: 24),16] := Dereference: [(Var: quotearg_char_mem_2938 + Var: label_161),16], [(Var: RSP0 - Value: 40),16] := Dereference: [(Var: quotearg_char_mem_2940 + Var: label_162),16], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2944 + Var: default_quoting_options),16], [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4] := XOR(SHL(zextend(AND(NOT(SHR(zextend(Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4],Value: 32),TakeBits: <7,0>(Reg: RDX))),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RDX)),Dereference: [((Var: RSP0 + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RDX),Value: 8),Value: 5) * Value: 4)) + Value: 8)) - Value: 56),4])
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RSI),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16)]
Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2102" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2096" 64,E_var "label_160" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2935" 64,E_var "label_160" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2098" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2938" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2098" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2940" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2098" 64,E_var "label_161" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2100" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2938" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2100" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2940" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2100" 64,E_var "label_162" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2102" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2938" 64,E_var "label_161" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2102" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2940" 64,E_var "label_162" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2102" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2944" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Else resulting values:
(a1 := a2):
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]
(v1 := v2):
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op NOT) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDX]]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDX]],E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4]
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op NOT) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDX]]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDX]],E_deref (E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RDX],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]],E_val 56 64]) 4]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_char_mem -> qu(4,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
otearg_char_mem_2118 and quotearg_char_mem -> quotearg_char_mem_2973 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2119 -> quotearg_char_mem_2119 and quotearg_char_mem_2974 -> quotearg_char_mem_2974

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2119 -> quotearg_char_mem_2119 and quotearg_char_mem_2974 -> quotearg_char_mem_2974 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2120 -> quotearg_char_mem_2121 and quotearg_char_mem_2975 -> quotearg_char_mem_2978

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2120 -> quotearg_char_mem_2121 and quotearg_char_mem_2975 -> quotearg_char_mem_2978 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_162,label_161,default_quoting_options
quotearg_char_mem_2102 <--> quotearg_char_mem_2940,quotearg_char_mem_2938,quotearg_char_mem_2944
label_162 <--> default_quoting_options,label_162,label_161
quotearg_char_mem_2100 <--> quotearg_char_mem_2944,quotearg_char_mem_2940,quotearg_char_mem_2938
label_161 <--> default_quoting_options,label_162,label_161
quotearg_char_mem_2098 <--> quotearg_char_mem_2944,quotearg_char_mem_2940,quotearg_char_mem_2938
label_160 <--> label_160
quotearg_char_mem_2096 <--> quotearg_char_mem_2935

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (16/60): "quotearg_style_mem"
--------
.dot code for CFG of text section quotearg_style_mem for Vanilla
diGraph quotearg_style_mem_Vanilla{
	quotearg_style_mem_0  [label="[quotearg_style_mem_2068,quotearg_style_mem_2078]"]
	quotearg_style_mem_1  [label="[quotearg_style_mem_2079,quotearg_style_mem_2079]"]
	quotearg_style_mem_2  [label="[quotearg_style_mem_2080,quotearg_style_mem_2081]"]
	quotearg_style_mem_3  [label="[.label_159,.label_159]"]
	quotearg_style_mem_4  [label="[quotearg_style_mem,quotearg_style_mem_2067]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;


	quotearg_style_mem_4 -> quotearg_style_mem_3 [label="ZF"];
	quotearg_style_mem_4 -> quotearg_style_mem_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_style_mem for Randomized
diGraph quotearg_style_mem_Randomized{
	quotearg_style_mem_0  [label="[quotearg_style_mem_2902,quotearg_style_mem_2915]"]
	quotearg_style_mem_1  [label="[quotearg_style_mem_2916,quotearg_style_mem_2916]"]
	quotearg_style_mem_2  [label="[quotearg_style_mem_2917,quotearg_style_mem_2919]"]
	quotearg_style_mem_3  [label="[.label_159,.label_159]"]
	quotearg_style_mem_4  [label="[quotearg_style_mem,quotearg_style_mem_2901]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;


	quotearg_style_mem_4 -> quotearg_style_mem_3 [label="ZF"];
	quotearg_style_mem_4 -> quotearg_style_mem_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style_mem"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)
--------

Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style_mem"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)
--------

same_behavior for the nodes: quotearg_style_mem -> quotearg_style_mem_2067 and quotearg_style_mem -> quotearg_style_mem_2901

same_behavior checking these two SStates:

SA || XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)

SB || XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI),(XMM0,E_val 0 64)]
Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem -> quotearg_style_mem_2067 and quotearg_style_mem -> quotearg_style_mem_2901 have been verified to do the same.

same_behavior for the nodes: .label_159 -> .label_159 and .label_159 -> .label_159

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_159 -> .label_159 and .label_159 -> .label_159 have been verified to do the same.

same_behavior for the nodes: quotearg_style_mem_2068 -> quotearg_style_mem_2078 and quotearg_style_mem_2902 -> quotearg_style_mem_2915

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SB || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem_2068 -> quotearg_style_mem_2078 and quotearg_style_mem_2902 -> quotearg_style_mem_2915 have been verified to do the same.

same_behavior for the nodes: quotearg_style_mem_2079 -> quotearg_style_mem_2079 and quotearg_style_mem_2916 -> quotearg_style_mem_2916

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem_2079 -> quotearg_style_mem_2079 and quotearg_style_mem_2916 -> quotearg_style_mem_2916 have been verified to do the same.

same_behavior for the nodes: quotearg_style_mem_2080 -> quotearg_style_mem_2081 and quotearg_style_mem_2917 -> quotearg_style_mem_2919

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem_2080 -> quotearg_style_mem_2081 and quotearg_style_mem_2917 -> quotearg_style_mem_2919 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 108),(Var: RSP0 - Value: 92),(Var: RSP0 - Value: 76),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 108),(Var: RSP0 - Value: 92),(Var: RSP0 - Value: 76),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 108),(Var: RSP0 - Value: 92),(Var: RSP0 - Value: 76),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 60),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (17/60): "quotearg_style"
--------
.dot code for CFG of text section quotearg_style for Vanilla
diGraph quotearg_style_Vanilla{
	quotearg_style_0  [label="[quotearg_style_2035,quotearg_styl(4,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
e_2046]"]
	quotearg_style_1  [label="[quotearg_style_2047,quotearg_style_2047]"]
	quotearg_style_2  [label="[quotearg_style_2048,quotearg_style_2049]"]
	quotearg_style_3  [label="[.label_158,.label_158]"]
	quotearg_style_4  [label="[quotearg_style,quotearg_style_2034]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;


	quotearg_style_4 -> quotearg_style_3 [label="ZF"];
	quotearg_style_4 -> quotearg_style_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_style for Randomized
diGraph quotearg_style_Randomized{
	quotearg_style_0  [label="[quotearg_style_2861,quotearg_style_2876]"]
	quotearg_style_1  [label="[quotearg_style_2877,quotearg_style_2877]"]
	quotearg_style_2  [label="[quotearg_style_2878,quotearg_style_2881]"]
	quotearg_style_3  [label="[.label_158,.label_158]"]
	quotearg_style_4  [label="[quotearg_style_2884,quotearg_style_2884]"]
	quotearg_style_5  [label="[quotearg_style,quotearg_style_2860]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;

	quotearg_style_3 -> quotearg_style_4;

	quotearg_style_5 -> quotearg_style_3 [label="ZF"];
	quotearg_style_5 -> quotearg_style_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 ----> 4, , 5 --ZF--> 3, 5 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 72),4], RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
[(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RDI)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
skip'
node 4:
RAX := abort@()
node 5:
XMM0 := Value: 0
[(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)
--------

same_behavior for the nodes: quotearg_style -> quotearg_style_2034 and quotearg_style -> quotearg_style_2860

same_behavior checking these two SStates:

SA || XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)

SB || XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 10)

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_val 0 64)]
Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style -> quotearg_style_2034 and quotearg_style -> quotearg_style_2860 have been verified to do the same.

same_behavior for the nodes: .label_158 -> .label_158 and .label_158 -> .label_158

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_158 -> .label_158 and quotearg_style_2884 -> quotearg_style_2884

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_158 -> .label_158 and quotearg_style_2884 -> quotearg_style_2884 have been verified to do the same.

same_behavior for the nodes: quotearg_style_2035 -> quotearg_style_2046 and quotearg_style_2861 -> quotearg_style_2876

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),4], RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RDI)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),4], RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RDI := Value: 0, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
SB || [(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RDI)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 32),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_style_2035 -> quotearg_style_2046 and quotearg_style_2861 -> quotearg_style_2876 have been verified to do the same.

same_behavior for the nodes: quotearg_style_2047 -> quotearg_style_2047 and quotearg_style_2877 -> quotearg_style_2877

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_2047 -> quotearg_style_2047 and quotearg_style_2877 -> quotearg_style_2877 have been verified to do the same.

same_behavior for the nodes: quotearg_style_2048 -> quotearg_style_2049 and quotearg_style_2878 -> quotearg_style_2881

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_2048 -> quotearg_style_2049 and quotearg_style_2878 -> quotearg_style_2881 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 4)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 72)

Succesful check!
Considering text section (18/60): "quotearg_n_style_mem"
--------
.dot code for CFG of text section quotearg_n_style_mem for Vanilla
diGraph quotearg_n_style_mem_Vanilla{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem_2001,quotearg_n_style_mem_2013]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_2014,quotearg_n_style_mem_2014]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_2015,quotearg_n_style_mem_2016]"]
	quotearg_n_style_mem_3  [label="[.label_157,.label_157]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem,quotearg_n_style_mem_2000]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;


	quotearg_n_style_mem_4 -> quotearg_n_style_mem_3 [label="ZF"];
	quotearg_n_style_mem_4 -> quotearg_n_style_mem_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_style_mem for Randomized
diGraph quotearg_n_style_mem_Randomized{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem_2814,quotearg_n_style_mem_2835]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_2836,quotearg_n_style_mem_2836]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_2837,quotearg_n_style_mem_2838]"]
	quotearg_n_style_mem_3  [label="[.label_157,.label_157]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem_2841,quotearg_n_style_mem_2841]"]
	quotearg_n_style_mem_5  [label="[quotearg_n_style_mem,quotearg_n_style_mem_2813]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;

	quotearg_n_style_mem_3 -> quotearg_n_style_mem_4;

	quotearg_n_style_me(4,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
m_5 -> quotearg_n_style_mem_3 [label="ZF"];
	quotearg_n_style_mem_5 -> quotearg_n_style_mem_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_mem"
node 0:
RAX := (Var: RSP0 - Value: 112), RCX := (Var: RSP0 - Value: 112), RDX := Reg: RCX, RSI := Reg: RDX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 ----> 4, , 5 --ZF--> 3, 5 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_mem"
node 0:
RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RSI := Reg: RDX, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
[(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
skip'
node 4:
RAX := abort@()
node 5:
XMM0 := Value: 0
[(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

same_behavior for the nodes: quotearg_n_style_mem -> quotearg_n_style_mem_2000 and quotearg_n_style_mem -> quotearg_n_style_mem_2813

same_behavior checking these two SStates:

SA || XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

SB || XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI),(XMM0,E_val 0 64)]
Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem -> quotearg_n_style_mem_2000 and quotearg_n_style_mem -> quotearg_n_style_mem_2813 have been verified to do the same.

same_behavior for the nodes: .label_157 -> .label_157 and .label_157 -> .label_157

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_157 -> .label_157 and quotearg_n_style_mem_2841 -> quotearg_n_style_mem_2841

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_157 -> .label_157 and quotearg_n_style_mem_2841 -> quotearg_n_style_mem_2841 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2001 -> quotearg_n_style_mem_2013 and quotearg_n_style_mem_2814 -> quotearg_n_style_mem_2835

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 112), RCX := (Var: RSP0 - Value: 112), RDX := Reg: RCX, RSI := Reg: RDX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI)

SB || RAX := (Var: RSP0 - Value: 56), RCX := (Var: RSP0 - Value: 56), RDX := Reg: RCX, RSI := Reg: RDX, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
SB || [(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_reg RCX),(RSI,E_reg RDX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp (4,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2001 -> quotearg_n_style_mem_2013 and quotearg_n_style_mem_2814 -> quotearg_n_style_mem_2835 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2014 -> quotearg_n_style_mem_2014 and quotearg_n_style_mem_2836 -> quotearg_n_style_mem_2836

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2014 -> quotearg_n_style_mem_2014 and quotearg_n_style_mem_2836 -> quotearg_n_style_mem_2836 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2015 -> quotearg_n_style_mem_2016 and quotearg_n_style_mem_2837 -> quotearg_n_style_mem_2838

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2015 -> quotearg_n_style_mem_2016 and quotearg_n_style_mem_2837 -> quotearg_n_style_mem_2838 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 4)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 72)

Succesful check!
Considering text section (19/60): "quotearg_n_style"
--------
.dot code for CFG of text section quotearg_n_style for Vanilla
diGraph quotearg_n_style_Vanilla{
	quotearg_n_style_0  [label="[quotearg_n_style_1968,quotearg_n_style_1979]"]
	quotearg_n_style_1  [label="[quotearg_n_style_1980,quotearg_n_style_1980]"]
	quotearg_n_style_2  [label="[quotearg_n_style_1981,quotearg_n_style_1982]"]
	quotearg_n_style_3  [label="[.label_156,.label_156]"]
	quotearg_n_style_4  [label="[quotearg_n_style,quotearg_n_style_1967]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;


	quotearg_n_style_4 -> quotearg_n_style_3 [label="ZF"];
	quotearg_n_style_4 -> quotearg_n_style_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_style for Randomized
diGraph quotearg_n_style_Randomized{
	quotearg_n_style_0  [label="[quotearg_n_style_2768,quotearg_n_style_2784]"]
	quotearg_n_style_1  [label="[quotearg_n_style_2785,quotearg_n_style_2785]"]
	quotearg_n_style_2  [label="[quotearg_n_style_2786,quotearg_n_style_2787]"]
	quotearg_n_style_3  [label="[.label_156,.label_156]"]
	quotearg_n_style_4  [label="[quotearg_n_style_2790,quotearg_n_style_2790]"]
	quotearg_n_style_5  [label="[quotearg_n_style,quotearg_n_style_2767]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;

	quotearg_n_style_3 -> quotearg_n_style_4;

	quotearg_n_style_5 -> quotearg_n_style_3 [label="ZF"];
	quotearg_n_style_5 -> quotearg_n_style_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, , , 4 --ZF--> 3, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style"
node 0:
RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
RAX := abort@()
node 4:
RAX := Reg: RDX, XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

Starting Node: 5

Edges: 0 ----> 1, 1 ----> 2, , 3 ----> 4, , 5 --ZF--> 3, 5 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style"
node 0:
RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
[(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 3:
skip'
node 4:
RAX := abort@()
node 5:
RAX := Reg: RDX, XMM0 := Value: 0
[(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

same_behavior for the nodes: quotearg_n_style -> quotearg_n_style_1967 and quotearg_n_style -> quotearg_n_style_2767

same_behavior checking these two SStates:

SA || RAX := Reg: RDX, XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

SB || RAX := Reg: RDX, XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 72),4] := Value: 0, [(Var: RSP0 - Value: 88),16] := Value: 0, [(Var: RSP0 - Value: 104),16] := Value: 0, [(Var: RSP0 - Value: 120),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RDI,E_reg RDI),(XMM0,E_val 0 64)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDX),(RDI,E_reg RDI),(XMM0,E_val 0 64)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style -> quotearg_n_style_1967 and quotearg_n_style -> quotearg_n_style_2767 have been verified to do the same.

same_behavior for the nodes: .label_156 -> .label_156 and .label_156 -> .label_156

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_156 -> .label_156 and quotearg_n_style_2790 -> quotearg_n_style_2790

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_156 -> .label_156 and quotearg_n_style_2790 -> quotearg_n_style_2790 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1968 -> quotearg_n_style_1979 and quotearg_n_style_2768 -> quotearg_n_style_2784

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 112), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [(Var: RSP0 - Value: 8),4], [(Var: RSP0 - Value: 76),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Var: RSP0 - Value: 92),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Var: RSP0 - Value: 108),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Var: RSP0 - Value: 112),4] := TakeBits: <31,0>(Reg: RSI)

SB || RCX := (Var: RSP0 - Value: 56), RDX := Value: 18446744073709551615, RSI := Reg: RAX, XMM0 := Dereference: [(Var: RSP0 - Value: 120),16], XMM1 := Dereference: [(Var: RSP0 - Value: 104),16], XMM2 := Dereference: [(Var: RSP0 - Value: 88),16]
SB || [(Var: RSP0 - Value: 4),4] := Dereference: [(Var: RSP0 - Value: 72),4], [(Var: RSP0 - Value: 20),16] := Dereference: [(Var: RSP0 - Value: 88),16], [(Var: RSP0 - Value: 36),16] := Dereference: [(Var: RSP0 - Value: 104),16], [(Var: RSP0 - Value: 52),16] := Dereference: [(Var: RSP0 - Value: 120),16], [(Var: RSP0 - Value: 56),4] := TakeBits: <31,0>(Reg: RSI)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM1fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
reg_chk debug XMM2fromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(RSI,E_reg RAX),(XMM0,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16),(XMM1,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16),(XMM2,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]) 16
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_n_style_1968 -> quotearg_n_style_1979 and quotearg_n_style_2768 -> quotearg_n_style_2784 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1980 -> quotearg_n_style_1980 and quotearg_n_style_2785 -> quotearg_n_style_2785

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1980 -> quotearg_n_style_1980 and quotearg_n_style_2785 -> quotearg_n_style_2785 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1981 -> quotearg_n_style_1982 and quotearg_n_style_2786 -> quotearg_n_style_2787

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1981 -> quotearg_n_style_1982 and quotearg_n_style_2786 -> quotearg_n_style_2787 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88),(Var: RSP0 - Value: 52),(Var: RSP0 - Value: 36),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 4)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 120),(Var: RSP0 - Value: 104),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 72)

Succesful check!
Considering text section (20/60): "quotearg_mem"
--------
.dot code for CFG of text section quotearg_mem for Vanilla
diGraph quotearg_mem_Vanilla{
	quotearg_mem_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quotearg_mem_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quotearg_mem_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quotearg_mem_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quotearg_mem_4  [label="[.label_154,.label_154]"]
	quotearg_mem_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quotearg_mem_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quotearg_mem_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quotearg_mem_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quotearg_mem_9  [label="[.label_153,quotearg_n_options_1907]"]
	quotearg_mem_10  [label="[.label_150,quotearg_n_options_1835]"]
	quotearg_mem_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quotearg_mem_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quotearg_mem_13  [label="[.label_155,quotearg_n_options_1862]"]
	quotearg_mem_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quotearg_mem_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quotearg_mem_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quotearg_mem_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quotearg_mem_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quotearg_mem_19  [label="[.label_151,.label_151]"]
	quotearg_mem_20  [label="[.label_152,quotearg_n_options_1808]"]
	quotearg_mem_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quotearg_mem_22  [label="[.label_149,.label_149]"]
	quotearg_mem_23  [label="[quotearg_mem,quotearg_n_options_1794]"]
	quotearg_mem_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quotearg_mem_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quotearg_mem_0 -> quotearg_mem_13;
	quotearg_mem_1 -> quotearg_mem_10;
	quotearg_mem_2 -> quotearg_mem_3;
	quotearg_mem_3 -> quotearg_mem_4;
	quotearg_mem_4 -> quotearg_mem_5;
	quotearg_mem_5 -> quotearg_mem_6;
	quotearg_mem_6 -> quotearg_mem_7;
	quotearg_mem_7 -> quotearg_mem_9;
	quotearg_mem_8 -> quotearg_mem_4 [label="ZF"];
	quotearg_mem_8 -> quotearg_mem_2 [label="!ZF"];

	quotearg_mem_10 -> quotearg_mem_11;
	quotearg_mem_11 -> quotearg_mem_12;
	quotearg_mem_12 -> quotearg_mem_13;
	quotearg_mem_13 -> quotearg_mem_14;
	quotearg_mem_14 -> quotearg_mem_15;
	quotearg_mem_15 -> quotearg_mem_9 [label="!CF && !ZF"];
	quotearg_mem_15 -> quotearg_mem_8 [label="CF || ZF"];
	quotearg_mem_16 -> quotearg_mem_17;
	quotearg_mem_17 -> quotearg_mem_18;
	quotearg_mem_18 -> quotearg_mem_10 [label="!ZF"];
	quotearg_mem_18 -> quotearg_mem_1 [label="ZF"];

	quotearg_mem_20 -> quotearg_mem_19 [label="ZF"];
	quotearg_mem_20 -> quotearg_mem_16 [label="!ZF"];
	quotearg_mem_21 -> quotearg_mem_20 [label="ZF || SF != OF"];
	quotearg_mem_21 -> quotearg_mem_0 [label="!ZF && SF == OF"];

	quotearg_mem_23 -> quotearg_mem_24;
	quotearg_mem_24 -> quotearg_mem_25;
	quotearg_mem_25 -> quotearg_mem_22 [label="SF"];
	quotearg_mem_25 -> quotearg_mem_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_mem for Randomized
diGraph quotearg_mem_Randomized{
	quotearg_mem_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quotearg_mem_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quotearg_mem_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quotearg_mem_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quotearg_mem_4  [label="[.label_149,quotearg_n_options_2643]"]
	quotearg_mem_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quotearg_mem_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quotearg_mem_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quotearg_mem_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quotearg_mem_9  [label="[.label_153,quotearg_n_options_2690]"]
	quotearg_mem_10  [label="[.label_154,quotearg_n_options_2578]"]
	quotearg_mem_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quotearg_mem_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quotearg_mem_13  [label="[.label_151,quotearg_n_options_2619]"]
	quotearg_mem_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quotearg_mem_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quotearg_mem_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quotearg_mem_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quotearg_mem_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quotearg_mem_19  [label="[.label_152,.label_152]"]
	quotearg_mem_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quotearg_mem_21  [label="[.label_150,quotearg_n_options_2545]"]
	quotearg_mem_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quotearg_mem_23  [label="[.label_155,.label_155]"]
	quotearg_mem_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quotearg_mem_25  [label="[quotearg_mem,quotearg_n_options_2525]"]
	quotearg_mem_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quotearg_mem_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quotearg_mem_0 -> quotearg_mem_13;
	quotearg_mem_1 -> quotearg_mem_10;
	quotearg_mem_2 -> quotearg_mem_3;
	quotear(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
g_mem_3 -> quotearg_mem_4;
	quotearg_mem_4 -> quotearg_mem_5;
	quotearg_mem_5 -> quotearg_mem_6;
	quotearg_mem_6 -> quotearg_mem_7;
	quotearg_mem_7 -> quotearg_mem_9;
	quotearg_mem_8 -> quotearg_mem_4 [label="ZF"];
	quotearg_mem_8 -> quotearg_mem_2 [label="!ZF"];

	quotearg_mem_10 -> quotearg_mem_11;
	quotearg_mem_11 -> quotearg_mem_12;
	quotearg_mem_12 -> quotearg_mem_13;
	quotearg_mem_13 -> quotearg_mem_14;
	quotearg_mem_14 -> quotearg_mem_15;
	quotearg_mem_15 -> quotearg_mem_9 [label="!CF && !ZF"];
	quotearg_mem_15 -> quotearg_mem_8 [label="CF || ZF"];
	quotearg_mem_16 -> quotearg_mem_17;
	quotearg_mem_17 -> quotearg_mem_18;
	quotearg_mem_18 -> quotearg_mem_10 [label="!ZF"];
	quotearg_mem_18 -> quotearg_mem_1 [label="ZF"];
	quotearg_mem_19 -> quotearg_mem_20;

	quotearg_mem_21 -> quotearg_mem_19 [label="ZF"];
	quotearg_mem_21 -> quotearg_mem_16 [label="!ZF"];
	quotearg_mem_22 -> quotearg_mem_21 [label="ZF || SF != OF"];
	quotearg_mem_22 -> quotearg_mem_0 [label="!ZF && SF == OF"];
	quotearg_mem_23 -> quotearg_mem_24;

	quotearg_mem_25 -> quotearg_mem_26;
	quotearg_mem_26 -> quotearg_mem_27;
	quotearg_mem_27 -> quotearg_mem_23 [label="SF"];
	quotearg_mem_27 -> quotearg_mem_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_mem"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_mem"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quotearg_mem -> quotearg_n_options_1794 and quotearg_mem -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: default_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := Reg: RSI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R14 := Reg: RSI, R12 := Dereference: [Var: default_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_reg RSI),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_mem -> quotearg_n_options_1794 and quotearg_mem -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (21/60): "quotearg"
--------
.dot code for CFG of text section quotearg for Vanilla
diGraph quotearg_Vanilla{
	quotearg_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quotearg_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quotearg_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quotearg_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quotearg_4  [label="[.label_154,.label_154]"]
	quotearg_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quotearg_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quotearg_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quotearg_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quotearg_9  [label="[.label_153,quotearg_n_options_1907]"]
	quotearg_10  [label="[.label_150,quotearg_n_options_1835]"]
	quotearg_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quotearg_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quotearg_13  [label="[.label_155,quotearg_n_options_1862]"]
	quotearg_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quotearg_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quotearg_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quotearg_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quotearg_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quotearg_19  [label="[.label_151,.label_151]"]
	quotearg_20  [label="[.label_152,quotearg_n_options_1808]"]
	quotearg_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quotearg_22  [label="[.label_149,.label_149]"]
	quotearg_23  [label="[quotearg,quotearg_n_options_1794]"]
	quotearg_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quotearg_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quotearg_0 -> quotearg_13;
	quotearg_1 -> quotearg_10;
	quotearg_2 -> quotearg_3;
	quotearg_3 -> quotearg_4;
	quotearg_4 -> quotearg_5;
	quotearg_5 -> quotearg_6;
	quotearg_6 -> quotearg_7;
	quotearg_7 -> quotearg_9;
	quotearg_8 -> quotearg_4 [label="ZF"];
	quotearg_8 -> quotearg_2 [label="!ZF"];

	quotearg_10 -> quotearg_11;
	quotearg_11 -> quotearg_12;
	quotearg_12 -> quotearg_13;
	quotearg_13 -> quotearg_14;
	quotearg_14 -> quotearg_15;
	quotearg_15 -> quotearg_9 [label="!CF && !ZF"];
	quotearg_15 -> quotearg_8 [label="CF || ZF"];
	quotearg_16 -> quotearg_17;
	quotearg_17 -> quotearg_18;
	quotearg_18 -> quotearg_10 [label="!ZF"];
	quotearg_18 -> quotearg_1 [label="ZF"];

	quotearg_20 -> quotearg_19 [label="ZF"];
	quotearg_20 -> quotearg_16 [label="!ZF"];
	quotearg_21 -> quotearg_20 [label="ZF || SF != OF"];
	quotearg_21 -> quotearg_0 [label="!ZF && SF == OF"];

	quotearg_23 -> quotearg_24;
	quotearg_24 -> quotearg_25;
	quotearg_25 -> quotearg_22 [label="SF"];
	quotearg_25 -> quotearg_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg for Randomized
diGraph quotearg_Randomized{
	quotearg_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quotearg_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quotearg_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quotearg_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quotearg_4  [label="[.label_149,quotearg_n_options_2643]"]
	quotearg_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quotearg_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quotearg_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quotearg_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quotearg_9  [label="[.label_153,quotearg_n_options_2690]"]
	quotearg_10  [(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
label="[.label_154,quotearg_n_options_2578]"]
	quotearg_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quotearg_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quotearg_13  [label="[.label_151,quotearg_n_options_2619]"]
	quotearg_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quotearg_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quotearg_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quotearg_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quotearg_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quotearg_19  [label="[.label_152,.label_152]"]
	quotearg_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quotearg_21  [label="[.label_150,quotearg_n_options_2545]"]
	quotearg_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quotearg_23  [label="[.label_155,.label_155]"]
	quotearg_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quotearg_25  [label="[quotearg,quotearg_n_options_2525]"]
	quotearg_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quotearg_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quotearg_0 -> quotearg_13;
	quotearg_1 -> quotearg_10;
	quotearg_2 -> quotearg_3;
	quotearg_3 -> quotearg_4;
	quotearg_4 -> quotearg_5;
	quotearg_5 -> quotearg_6;
	quotearg_6 -> quotearg_7;
	quotearg_7 -> quotearg_9;
	quotearg_8 -> quotearg_4 [label="ZF"];
	quotearg_8 -> quotearg_2 [label="!ZF"];

	quotearg_10 -> quotearg_11;
	quotearg_11 -> quotearg_12;
	quotearg_12 -> quotearg_13;
	quotearg_13 -> quotearg_14;
	quotearg_14 -> quotearg_15;
	quotearg_15 -> quotearg_9 [label="!CF && !ZF"];
	quotearg_15 -> quotearg_8 [label="CF || ZF"];
	quotearg_16 -> quotearg_17;
	quotearg_17 -> quotearg_18;
	quotearg_18 -> quotearg_10 [label="!ZF"];
	quotearg_18 -> quotearg_1 [label="ZF"];
	quotearg_19 -> quotearg_20;

	quotearg_21 -> quotearg_19 [label="ZF"];
	quotearg_21 -> quotearg_16 [label="!ZF"];
	quotearg_22 -> quotearg_21 [label="ZF || SF != OF"];
	quotearg_22 -> quotearg_0 [label="!ZF && SF == OF"];
	quotearg_23 -> quotearg_24;

	quotearg_25 -> quotearg_26;
	quotearg_26 -> quotearg_27;
	quotearg_27 -> quotearg_23 [label="SF"];
	quotearg_27 -> quotearg_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var:(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
 slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quotearg -> quotearg_n_options_1794 and quotearg -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := Reg: RDI, RBX := Value: 0, RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RBX,E_val 0 32),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_val 0 64),(RSI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg -> quotearg_n_options_1794 and quotearg -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (22/60): "quotearg_n_mem"
--------
.dot code for CFG of text section quotearg_n_mem for Vanilla
diGraph quotearg_n_mem_Vanilla{
	quotearg_n_mem_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quotearg_n_mem_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quotearg_n_mem_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quotearg_n_mem_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quotearg_n_mem_4  [label="[.label_154,.label_154]"]
	quotearg_n_mem_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quotearg_n_mem_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quotearg_n_mem_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quotearg_n_mem_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quotearg_n_mem_9  [label="[.label_153,quotearg_n_options_1907]"]
	quotearg_n_mem_10  [label="[.label_150,quotearg_n_options_1835]"]
	quotearg_n_mem_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quotearg_n_mem_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quotearg_n_mem_13  [label="[.label_155,quotearg_n_options_1862]"]
	quotearg_n_mem_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quotearg_n_mem_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quotearg_n_mem_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quotearg_n_mem_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quotearg_n_mem_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quotearg_n_mem_19  [label="[.label_151,.label_151]"]
	quotearg_n_mem_20  [label="[.label_152,quotearg_n_options_1808]"]
	quotearg_n_mem_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quotearg_n_mem_22  [label="[.label_149,.label_149]"]
	quotearg_n_mem_23  [label="[quotearg_n_mem,quotearg_n_options_1794]"]
	quotearg_n_mem_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quotearg_n_mem_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quotearg_n_mem_0 -> quotearg_n_mem_13;
	quotearg_n_mem_1 ->(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
 quotearg_n_mem_10;
	quotearg_n_mem_2 -> quotearg_n_mem_3;
	quotearg_n_mem_3 -> quotearg_n_mem_4;
	quotearg_n_mem_4 -> quotearg_n_mem_5;
	quotearg_n_mem_5 -> quotearg_n_mem_6;
	quotearg_n_mem_6 -> quotearg_n_mem_7;
	quotearg_n_mem_7 -> quotearg_n_mem_9;
	quotearg_n_mem_8 -> quotearg_n_mem_4 [label="ZF"];
	quotearg_n_mem_8 -> quotearg_n_mem_2 [label="!ZF"];

	quotearg_n_mem_10 -> quotearg_n_mem_11;
	quotearg_n_mem_11 -> quotearg_n_mem_12;
	quotearg_n_mem_12 -> quotearg_n_mem_13;
	quotearg_n_mem_13 -> quotearg_n_mem_14;
	quotearg_n_mem_14 -> quotearg_n_mem_15;
	quotearg_n_mem_15 -> quotearg_n_mem_9 [label="!CF && !ZF"];
	quotearg_n_mem_15 -> quotearg_n_mem_8 [label="CF || ZF"];
	quotearg_n_mem_16 -> quotearg_n_mem_17;
	quotearg_n_mem_17 -> quotearg_n_mem_18;
	quotearg_n_mem_18 -> quotearg_n_mem_10 [label="!ZF"];
	quotearg_n_mem_18 -> quotearg_n_mem_1 [label="ZF"];

	quotearg_n_mem_20 -> quotearg_n_mem_19 [label="ZF"];
	quotearg_n_mem_20 -> quotearg_n_mem_16 [label="!ZF"];
	quotearg_n_mem_21 -> quotearg_n_mem_20 [label="ZF || SF != OF"];
	quotearg_n_mem_21 -> quotearg_n_mem_0 [label="!ZF && SF == OF"];

	quotearg_n_mem_23 -> quotearg_n_mem_24;
	quotearg_n_mem_24 -> quotearg_n_mem_25;
	quotearg_n_mem_25 -> quotearg_n_mem_22 [label="SF"];
	quotearg_n_mem_25 -> quotearg_n_mem_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_mem for Randomized
diGraph quotearg_n_mem_Randomized{
	quotearg_n_mem_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quotearg_n_mem_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quotearg_n_mem_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quotearg_n_mem_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quotearg_n_mem_4  [label="[.label_149,quotearg_n_options_2643]"]
	quotearg_n_mem_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quotearg_n_mem_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quotearg_n_mem_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quotearg_n_mem_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quotearg_n_mem_9  [label="[.label_153,quotearg_n_options_2690]"]
	quotearg_n_mem_10  [label="[.label_154,quotearg_n_options_2578]"]
	quotearg_n_mem_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quotearg_n_mem_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quotearg_n_mem_13  [label="[.label_151,quotearg_n_options_2619]"]
	quotearg_n_mem_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quotearg_n_mem_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quotearg_n_mem_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quotearg_n_mem_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quotearg_n_mem_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quotearg_n_mem_19  [label="[.label_152,.label_152]"]
	quotearg_n_mem_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quotearg_n_mem_21  [label="[.label_150,quotearg_n_options_2545]"]
	quotearg_n_mem_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quotearg_n_mem_23  [label="[.label_155,.label_155]"]
	quotearg_n_mem_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quotearg_n_mem_25  [label="[quotearg_n_mem,quotearg_n_options_2525]"]
	quotearg_n_mem_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quotearg_n_mem_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quotearg_n_mem_0 -> quotearg_n_mem_13;
	quotearg_n_mem_1 -> quotearg_n_mem_10;
	quotearg_n_mem_2 -> quotearg_n_mem_3;
	quotearg_n_mem_3 -> quotearg_n_mem_4;
	quotearg_n_mem_4 -> quotearg_n_mem_5;
	quotearg_n_mem_5 -> quotearg_n_mem_6;
	quotearg_n_mem_6 -> quotearg_n_mem_7;
	quotearg_n_mem_7 -> quotearg_n_mem_9;
	quotearg_n_mem_8 -> quotearg_n_mem_4 [label="ZF"];
	quotearg_n_mem_8 -> quotearg_n_mem_2 [label="!ZF"];

	quotearg_n_mem_10 -> quotearg_n_mem_11;
	quotearg_n_mem_11 -> quotearg_n_mem_12;
	quotearg_n_mem_12 -> quotearg_n_mem_13;
	quotearg_n_mem_13 -> quotearg_n_mem_14;
	quotearg_n_mem_14 -> quotearg_n_mem_15;
	quotearg_n_mem_15 -> quotearg_n_mem_9 [label="!CF && !ZF"];
	quotearg_n_mem_15 -> quotearg_n_mem_8 [label="CF || ZF"];
	quotearg_n_mem_16 -> quotearg_n_mem_17;
	quotearg_n_mem_17 -> quotearg_n_mem_18;
	quotearg_n_mem_18 -> quotearg_n_mem_10 [label="!ZF"];
	quotearg_n_mem_18 -> quotearg_n_mem_1 [label="ZF"];
	quotearg_n_mem_19 -> quotearg_n_mem_20;

	quotearg_n_mem_21 -> quotearg_n_mem_19 [label="ZF"];
	quotearg_n_mem_21 -> quotearg_n_mem_16 [label="!ZF"];
	quotearg_n_mem_22 -> quotearg_n_mem_21 [label="ZF || SF != OF"];
	quotearg_n_mem_22 -> quotearg_n_mem_0 [label="!ZF && SF == OF"];
	quotearg_n_mem_23 -> quotearg_n_mem_24;

	quotearg_n_mem_25 -> quotearg_n_mem_26;
	quotearg_n_mem_26 -> quotearg_n_mem_27;
	quotearg_n_mem_27 -> quotearg_n_mem_23 [label="SF"];
	quotearg_n_mem_27 -> quotearg_n_mem_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_mem"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R1(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
2 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_mem"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quotearg_n_mem -> quotearg_n_options_1794 and quotearg_n_mem -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: default_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], R14 := Reg: RDX, R12 := Dereference: [Var: default_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_mem -> quotearg_n_options_1794 and quotearg_n_mem -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (23/60): "quotearg_n_options"
--------
.dot code for CFG of text section quotearg_n_options for Vanilla
diGraph quotearg_n_options_Vanilla{
	quotearg_n_options_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quotearg_n_options_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quotearg_n_options_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quotearg_n_options_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quotearg_n_options_4  [label="[.label_154,.label_154]"]
	quotearg_n_options_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quotearg_n_options_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quotearg_n_options_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quotearg_n_options_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quotearg_n_options_9  [label="[.label_153,quotearg_n_options_1907]"]
	quotearg_n_options_10  [label="[.label_150,quotearg_n_options_1835]"]
	quotearg_n_options_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quotearg_n_options_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quotearg_n_options_13  [label="[.label_155,quotearg_n_options_1862]"]
	quotearg_n_options_14  [label="[quotearg_n_options_1863,quotearg_n_options_1863]"]
	quotearg_n_options_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quotearg_n_options_16  [label="[quotearg_n_option(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
s_1809,quotearg_n_options_1818]"]
	quotearg_n_options_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quotearg_n_options_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quotearg_n_options_19  [label="[.label_151,.label_151]"]
	quotearg_n_options_20  [label="[.label_152,quotearg_n_options_1808]"]
	quotearg_n_options_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quotearg_n_options_22  [label="[.label_149,.label_149]"]
	quotearg_n_options_23  [label="[quotearg_n_options,quotearg_n_options_1794]"]
	quotearg_n_options_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quotearg_n_options_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quotearg_n_options_0 -> quotearg_n_options_13;
	quotearg_n_options_1 -> quotearg_n_options_10;
	quotearg_n_options_2 -> quotearg_n_options_3;
	quotearg_n_options_3 -> quotearg_n_options_4;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_7;
	quotearg_n_options_7 -> quotearg_n_options_9;
	quotearg_n_options_8 -> quotearg_n_options_4 [label="ZF"];
	quotearg_n_options_8 -> quotearg_n_options_2 [label="!ZF"];

	quotearg_n_options_10 -> quotearg_n_options_11;
	quotearg_n_options_11 -> quotearg_n_options_12;
	quotearg_n_options_12 -> quotearg_n_options_13;
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_9 [label="!CF && !ZF"];
	quotearg_n_options_15 -> quotearg_n_options_8 [label="CF || ZF"];
	quotearg_n_options_16 -> quotearg_n_options_17;
	quotearg_n_options_17 -> quotearg_n_options_18;
	quotearg_n_options_18 -> quotearg_n_options_10 [label="!ZF"];
	quotearg_n_options_18 -> quotearg_n_options_1 [label="ZF"];

	quotearg_n_options_20 -> quotearg_n_options_19 [label="ZF"];
	quotearg_n_options_20 -> quotearg_n_options_16 [label="!ZF"];
	quotearg_n_options_21 -> quotearg_n_options_20 [label="ZF || SF != OF"];
	quotearg_n_options_21 -> quotearg_n_options_0 [label="!ZF && SF == OF"];

	quotearg_n_options_23 -> quotearg_n_options_24;
	quotearg_n_options_24 -> quotearg_n_options_25;
	quotearg_n_options_25 -> quotearg_n_options_22 [label="SF"];
	quotearg_n_options_25 -> quotearg_n_options_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_options for Randomized
diGraph quotearg_n_options_Randomized{
	quotearg_n_options_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quotearg_n_options_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quotearg_n_options_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quotearg_n_options_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quotearg_n_options_4  [label="[.label_149,quotearg_n_options_2643]"]
	quotearg_n_options_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quotearg_n_options_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quotearg_n_options_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quotearg_n_options_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quotearg_n_options_9  [label="[.label_153,quotearg_n_options_2690]"]
	quotearg_n_options_10  [label="[.label_154,quotearg_n_options_2578]"]
	quotearg_n_options_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quotearg_n_options_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quotearg_n_options_13  [label="[.label_151,quotearg_n_options_2619]"]
	quotearg_n_options_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quotearg_n_options_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quotearg_n_options_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quotearg_n_options_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quotearg_n_options_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quotearg_n_options_19  [label="[.label_152,.label_152]"]
	quotearg_n_options_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quotearg_n_options_21  [label="[.label_150,quotearg_n_options_2545]"]
	quotearg_n_options_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quotearg_n_options_23  [label="[.label_155,.label_155]"]
	quotearg_n_options_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quotearg_n_options_25  [label="[quotearg_n_options,quotearg_n_options_2525]"]
	quotearg_n_options_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quotearg_n_options_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quotearg_n_options_0 -> quotearg_n_options_13;
	quotearg_n_options_1 -> quotearg_n_options_10;
	quotearg_n_options_2 -> quotearg_n_options_3;
	quotearg_n_options_3 -> quotearg_n_options_4;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_7;
	quotearg_n_options_7 -> quotearg_n_options_9;
	quotearg_n_options_8 -> quotearg_n_options_4 [label="ZF"];
	quotearg_n_options_8 -> quotearg_n_options_2 [label="!ZF"];

	quotearg_n_options_10 -> quotearg_n_options_11;
	quotearg_n_options_11 -> quotearg_n_options_12;
	quotearg_n_options_12 -> quotearg_n_options_13;
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_9 [label="!CF && !ZF"];
	quotearg_n_options_15 -> quotearg_n_options_8 [label="CF || ZF"];
	quotearg_n_options_16 -> quotearg_n_options_17;
	quotearg_n_options_17 -> quotearg_n_options_18;
	quotearg_n_options_18 -> quotearg_n_options_10 [label="!ZF"];
	quotearg_n_options_18 -> quotearg_n_options_1 [label="ZF"];
	quotearg_n_options_19 -> quotearg_n_options_20;

	quotearg_n_options_21 -> quotearg_n_options_19 [label="ZF"];
	quotearg_n_options_21 -> quotearg_n_options_16 [label="!ZF"];
	quotearg_n_options_22 -> quotearg_n_options_21 [label="ZF || SF != OF"];
	quotearg_n_options_22 -> quotearg_n_options_0 [label="!ZF && SF == OF"];
	quotearg_n_options_23 -> quotearg_n_options_24;

	quotearg_n_options_25 -> quotearg_n_options_26;
	quotearg_n_options_26 -> quotearg_n_options_27;
	quotearg_n_options_27 -> quotearg_n_options_23 [label="SF"];
	quotearg_n_options_27 -> quotearg_n_options_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_options"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereferenc(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
e: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RBX := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RDX, R12 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_options"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RBX := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RDX, R12 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quotearg_n_options -> quotearg_n_options_1794 and quotearg_n_options -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RDX, R12 := Reg: RCX
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RBX := TakeBits: <31,0>(Reg: RDI), R14 := Reg: RDX, R12 := Reg: RCX
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_reg RCX)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_reg RCX)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDI,E_reg RDI),(R14,E_reg RDX),(R12,E_reg RCX)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options -> quotearg_n_options_1794 and quotearg_n_options -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (24/60): "quotearg_n"
--------
.dot code for CFG of text section quotearg_n for Vanilla
diGraph quotearg_n_Vanilla{
	quotearg_n_0  [label="[quotearg_n_options_1802,quotearg_n_options_1804]"]
	quotearg_n_1  [label="[quotearg_n_options_1824,quotearg_n_options_1825]"]
	quotearg_n_2  [label="[quotearg_n_options_1874,quotearg_n_options_1874]"]
	quotearg_n_3  [label="[quotearg_n_options_1875,quotearg_n_options_1875]"]
	quotearg_n_4  [label="[.label_154,.label_154]"]
	quotearg_n_5  [label="[quotearg_n_options_1878,quotearg_n_options_1878]"]
	quotearg_n_6  [label="[quotearg_n_options_1879,quotearg_n_options_1893]"]
	quotearg_n_7  [label="[quotearg_n_options_1894,quotearg_n_options_1894]"]
	quotearg_n_8  [label="[quotearg_n_options_1867,quotearg_n_options_1873]"]
	quotearg_n_9  [label="[.label_153,quotearg_n_options_1907]"]
	quotearg_n_10  [label="[.label_150,quotearg_n_options_1835]"]
	quotearg_n_11  [label="[quotearg_n_options_1836,quotearg_n_options_1836]"]
	quotearg_n_12  [label="[quotearg_n_options_1837,quotearg_n_options_1839]"]
	quotearg_n_13  [label="[.label_155,quotearg_n_options_1862]"]
	quotearg_n_14  [label="[quotearg_n_options_1863,quotearg_n_options_(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(23,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == Var: RSP0 && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
1863]"]
	quotearg_n_15  [label="[quotearg_n_options_1864,quotearg_n_options_1866]"]
	quotearg_n_16  [label="[quotearg_n_options_1809,quotearg_n_options_1818]"]
	quotearg_n_17  [label="[quotearg_n_options_1819,quotearg_n_options_1819]"]
	quotearg_n_18  [label="[quotearg_n_options_1820,quotearg_n_options_1823]"]
	quotearg_n_19  [label="[.label_151,.label_151]"]
	quotearg_n_20  [label="[.label_152,quotearg_n_options_1808]"]
	quotearg_n_21  [label="[quotearg_n_options_1798,quotearg_n_options_1801]"]
	quotearg_n_22  [label="[.label_149,.label_149]"]
	quotearg_n_23  [label="[quotearg_n,quotearg_n_options_1794]"]
	quotearg_n_24  [label="[quotearg_n_options_1795,quotearg_n_options_1795]"]
	quotearg_n_25  [label="[quotearg_n_options_1796,quotearg_n_options_1797]"]

	quotearg_n_0 -> quotearg_n_13;
	quotearg_n_1 -> quotearg_n_10;
	quotearg_n_2 -> quotearg_n_3;
	quotearg_n_3 -> quotearg_n_4;
	quotearg_n_4 -> quotearg_n_5;
	quotearg_n_5 -> quotearg_n_6;
	quotearg_n_6 -> quotearg_n_7;
	quotearg_n_7 -> quotearg_n_9;
	quotearg_n_8 -> quotearg_n_4 [label="ZF"];
	quotearg_n_8 -> quotearg_n_2 [label="!ZF"];

	quotearg_n_10 -> quotearg_n_11;
	quotearg_n_11 -> quotearg_n_12;
	quotearg_n_12 -> quotearg_n_13;
	quotearg_n_13 -> quotearg_n_14;
	quotearg_n_14 -> quotearg_n_15;
	quotearg_n_15 -> quotearg_n_9 [label="!CF && !ZF"];
	quotearg_n_15 -> quotearg_n_8 [label="CF || ZF"];
	quotearg_n_16 -> quotearg_n_17;
	quotearg_n_17 -> quotearg_n_18;
	quotearg_n_18 -> quotearg_n_10 [label="!ZF"];
	quotearg_n_18 -> quotearg_n_1 [label="ZF"];

	quotearg_n_20 -> quotearg_n_19 [label="ZF"];
	quotearg_n_20 -> quotearg_n_16 [label="!ZF"];
	quotearg_n_21 -> quotearg_n_20 [label="ZF || SF != OF"];
	quotearg_n_21 -> quotearg_n_0 [label="!ZF && SF == OF"];

	quotearg_n_23 -> quotearg_n_24;
	quotearg_n_24 -> quotearg_n_25;
	quotearg_n_25 -> quotearg_n_22 [label="SF"];
	quotearg_n_25 -> quotearg_n_21 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n for Randomized
diGraph quotearg_n_Randomized{
	quotearg_n_0  [label="[quotearg_n_options_2534,quotearg_n_options_2538]"]
	quotearg_n_1  [label="[quotearg_n_options_2564,quotearg_n_options_2565]"]
	quotearg_n_2  [label="[quotearg_n_options_2637,quotearg_n_options_2638]"]
	quotearg_n_3  [label="[quotearg_n_options_2639,quotearg_n_options_2639]"]
	quotearg_n_4  [label="[.label_149,quotearg_n_options_2643]"]
	quotearg_n_5  [label="[quotearg_n_options_2644,quotearg_n_options_2644]"]
	quotearg_n_6  [label="[quotearg_n_options_2645,quotearg_n_options_2671]"]
	quotearg_n_7  [label="[quotearg_n_options_2672,quotearg_n_options_2672]"]
	quotearg_n_8  [label="[quotearg_n_options_2625,quotearg_n_options_2636]"]
	quotearg_n_9  [label="[.label_153,quotearg_n_options_2690]"]
	quotearg_n_10  [label="[.label_154,quotearg_n_options_2578]"]
	quotearg_n_11  [label="[quotearg_n_options_2579,quotearg_n_options_2579]"]
	quotearg_n_12  [label="[quotearg_n_options_2580,quotearg_n_options_2583]"]
	quotearg_n_13  [label="[.label_151,quotearg_n_options_2619]"]
	quotearg_n_14  [label="[quotearg_n_options_2620,quotearg_n_options_2620]"]
	quotearg_n_15  [label="[quotearg_n_options_2621,quotearg_n_options_2624]"]
	quotearg_n_16  [label="[quotearg_n_options_2546,quotearg_n_options_2558]"]
	quotearg_n_17  [label="[quotearg_n_options_2559,quotearg_n_options_2559]"]
	quotearg_n_18  [label="[quotearg_n_options_2560,quotearg_n_options_2563]"]
	quotearg_n_19  [label="[.label_152,.label_152]"]
	quotearg_n_20  [label="[quotearg_n_options_2696,quotearg_n_options_2696]"]
	quotearg_n_21  [label="[.label_150,quotearg_n_options_2545]"]
	quotearg_n_22  [label="[quotearg_n_options_2529,quotearg_n_options_2533]"]
	quotearg_n_23  [label="[.label_155,.label_155]"]
	quotearg_n_24  [label="[quotearg_n_options_2693,quotearg_n_options_2693]"]
	quotearg_n_25  [label="[quotearg_n,quotearg_n_options_2525]"]
	quotearg_n_26  [label="[quotearg_n_options_2526,quotearg_n_options_2526]"]
	quotearg_n_27  [label="[quotearg_n_options_2527,quotearg_n_options_2528]"]

	quotearg_n_0 -> quotearg_n_13;
	quotearg_n_1 -> quotearg_n_10;
	quotearg_n_2 -> quotearg_n_3;
	quotearg_n_3 -> quotearg_n_4;
	quotearg_n_4 -> quotearg_n_5;
	quotearg_n_5 -> quotearg_n_6;
	quotearg_n_6 -> quotearg_n_7;
	quotearg_n_7 -> quotearg_n_9;
	quotearg_n_8 -> quotearg_n_4 [label="ZF"];
	quotearg_n_8 -> quotearg_n_2 [label="!ZF"];

	quotearg_n_10 -> quotearg_n_11;
	quotearg_n_11 -> quotearg_n_12;
	quotearg_n_12 -> quotearg_n_13;
	quotearg_n_13 -> quotearg_n_14;
	quotearg_n_14 -> quotearg_n_15;
	quotearg_n_15 -> quotearg_n_9 [label="!CF && !ZF"];
	quotearg_n_15 -> quotearg_n_8 [label="CF || ZF"];
	quotearg_n_16 -> quotearg_n_17;
	quotearg_n_17 -> quotearg_n_18;
	quotearg_n_18 -> quotearg_n_10 [label="!ZF"];
	quotearg_n_18 -> quotearg_n_1 [label="ZF"];
	quotearg_n_19 -> quotearg_n_20;

	quotearg_n_21 -> quotearg_n_19 [label="ZF"];
	quotearg_n_21 -> quotearg_n_16 [label="!ZF"];
	quotearg_n_22 -> quotearg_n_21 [label="ZF || SF != OF"];
	quotearg_n_22 -> quotearg_n_0 [label="!ZF && SF == OF"];
	quotearg_n_23 -> quotearg_n_24;

	quotearg_n_25 -> quotearg_n_26;
	quotearg_n_26 -> quotearg_n_27;
	quotearg_n_27 -> quotearg_n_23 [label="SF"];
	quotearg_n_27 -> quotearg_n_22 [label="!SF"];
}
--------
Starting Node: 23

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, , 20 --ZF--> 19, 20 --!ZF--> 16, 21 --ZF || SF != OF--> 20, 21 --!ZF && SF == OF--> 0, , 23 ----> 24, 24 ----> 25, 25 --SF--> 22, 25 --!SF--> 21

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n"
node 0:
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX :(13,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(14,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(8,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == (Reg: RBP + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] + (Reg: R13 + Value: 8)),RSP == (Var: RSP0 - Value: 120) && RBP == Reg: RBP,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(25,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(5,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(6,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(7,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(8,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(9,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(11,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(12,RSP == (Var: RSP0 - Value: 120) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(13,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(14,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(17,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(18,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(19,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8]),(22,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(25,RSP == Var: RSP0 && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0)])
= memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)
node 19:
RAX := xalloc_die@()
node 20:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 21:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 22:
RAX := abort@()
node 23:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 24:
RAX := __errno_location@()
node 25:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

Starting Node: 25

Edges: 0 ----> 13, 1 ----> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 9, 8 --ZF--> 4, 8 --!ZF--> 2, , 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 --!CF && !ZF--> 9, 15 --CF || ZF--> 8, 16 ----> 17, 17 ----> 18, 18 --!ZF--> 10, 18 --ZF--> 1, 19 ----> 20, , 21 --ZF--> 19, 21 --!ZF--> 16, 22 --ZF || SF != OF--> 21, 22 --!ZF && SF == OF--> 0, 23 ----> 24, , 25 ----> 26, 26 ----> 27, 27 --SF--> 23, 27 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n"
node 0:
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
node 1:
XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
node 2:
RDI := Reg: RBX
node 3:
RAX := free@()
node 4:
RDI := Reg: R14
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
[(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])
node 9:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 10:
RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := memset@()
node 12:
R14 := Dereference: [(Var: RSP0 - Value: 64),8]
[(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 13:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)
node 14:
RAX := quotearg_buffer_restyled@()
node 15:
R14 := Reg: RAX
ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)
node 16:
RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)
node 17:
RAX := xrealloc@()
node 18:
R14 := Reg: RAX
[(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)
node 19:
skip'
node 20:
RAX := xalloc_die@()
node 21:
[(Var: RSP0 - Value: 64),8] := Reg: R14
ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)
node 22:
RCX := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))
node 23:
skip'
node 24:
RAX := abort@()
node 25:
RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 26:
RAX := __errno_location@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))
--------

same_behavior for the nodes: quotearg_n -> quotearg_n_options_1794 and quotearg_n -> quotearg_n_options_2525

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RBX := TakeBits: <31,0>(Reg: RDI), RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R14 := Value: 18446744073709551615, R12 := Dereference: [Var: default_quoting_options,4]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 88),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RCX,E_deref (E_var "default_quoting_options" 64) 4),(RDX,E_val 18446744073709551615 64),(RDI,E_reg RDI),(R14,E_val 18446744073709551615 64),(R12,E_deref (E_var "default_quoting_options" 64) 4)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n -> quotearg_n_options_1794 and quotearg_n -> quotearg_n_options_2525 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1795 -> quotearg_n_options_1795 and quotearg_n_options_2526 -> quotearg_n_options_2526 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), CF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), SF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), OF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX)), PF := TEST(TakeBits: <31,0>(Reg: RBX),TakeBits: <31,0>(Reg: RBX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1796 -> quotearg_n_options_1797 and quotearg_n_options_2527 -> quotearg_n_options_2528 have been verified to do the same.

same_behavior for the nodes: .label_149 -> .label_149 and .label_155 -> .label_155

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_149 -> .label_149 and quotearg_n_options_2693 -> quotearg_n_options_2693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_1800 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

SB || RCX := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), CF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), SF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), OF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX)), PF := CMP(Dereference: [(Var: quotearg_n_options_2532 + Var: nslots),4],TakeBits: <31,0>(Reg: RBX))

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1798 -> quotearg_n_options_1801 and quotearg_n_options_2529 -> quotearg_n_options_2533 have been verified to do the same.

same_behavior for the nodes: .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 64),8] := Reg: R14
SA || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

SB || [(Var: RSP0 - Value: 64),8] := Reg: R14
SB || ZF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: RBX),Value: 2147483647)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_152 -> quotearg_n_options_1808 and .label_150 -> quotearg_n_options_2545 have been verified to do the same.

same_behavior for the nodes: .label_151 -> .label_151 and .label_152 -> .label_152

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_151 -> .label_151 and quotearg_n_options_2696 -> quotearg_n_options_2696 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558

same_behavior checking these two SStates:

SA || RDI := (if (Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

SB || RDI := (if (Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: RBX + Value: 1)), R13 := Dereference: [Var: slotvec0,4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 16)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)),(RSI,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]),(R15,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]),(R13,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1799" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2531" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RBX,E_val 1 64]]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1809 -> quotearg_n_options_1818 and quotearg_n_options_2546 -> quotearg_n_options_2558 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1819 -> quotearg_n_options_1819 and quotearg_n_options_2559 -> quotearg_n_options_2559 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1822 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_1799 + Var: slotvec),8],Reg: R13)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_2562 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), CF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), SF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), OF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13), PF := CMP(Dereference: [(Var: quotearg_n_options_2531 + Var: slotvec),8],Reg: R13)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1822" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2562" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1820 -> quotearg_n_options_1823 and quotearg_n_options_2560 -> quotearg_n_options_2563 have been verified to do the same.

same_behavior for the nodes: .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_150 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: quotearg_n_options_2568 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_150" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2568" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_150 -> quotearg_n_options_1835 and .label_154 -> quotearg_n_options_2578 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1836 -> quotearg_n_options_1836 and quotearg_n_options_2579 -> quotearg_n_options_2579 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [(Var: quotearg_n_options_1837 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || R14 := Dereference: [(Var: RSP0 - Value: 64),8]
SB || [(Var: quotearg_n_options_2580 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1837" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_2580" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1837 -> quotearg_n_options_1839 and quotearg_n_options_2580 -> quotearg_n_options_2583 have been verified to do the same.

same_behavior for the nodes: .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 88),8] := Reg: R12, [(Var: RSP0 - Value: 96),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RBX := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RCX := Reg: R14, RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R15 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4), R12 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R9 := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := (Reg: R12 + Value: 8), [(Var: RSP0 - Value: 64),8] := Reg: R14, [(Var: RSP0 - Value: 72),8] := Reg: R12, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), CF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), SF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), OF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1), PF := OR(Dereference: [(Reg: R12 + Value: 4),4],Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RCX,E_reg R14),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8),(RSI,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R15,E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8),(R13,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]),(R12,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg RBX]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_155 -> quotearg_n_options_1862 and .label_151 -> quotearg_n_options_2619 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1863 -> quotearg_n_options_1863 and quotearg_n_options_2620 -> quotearg_n_options_2620 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

SB || R14 := Reg: RAX
SB || ZF := CMP(Reg: R15,Reg: RAX), CF := CMP(Reg: R15,Reg: RAX), SF := CMP(Reg: R15,Reg: RAX), OF := CMP(Reg: R15,Reg: RAX), PF := CMP(Reg: R15,Reg: RAX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1864 -> quotearg_n_options_1866 and quotearg_n_options_2621 -> quotearg_n_options_2624 have been verified to do the same.

same_behavior for the nodes: .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 76),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 72),8],4] := Dereference: [(Var: RSP0 - Value: 76),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 92),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 80),8],4] := Dereference: [(Var: RSP0 - Value: 92),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg RBX),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_153 -> quotearg_n_options_1907 and .label_153 -> quotearg_n_options_2690 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SA || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R14 := (Reg: R14 + Value: 1)
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R14 + Value: 1)
SB || ZF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), CF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), SF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), OF := CMP(Reg: RBX,Dereference: [Var: slot0,4]), PF := CMP(Reg: RBX,Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (Op ADD) [E_reg R14,E_val 1 8])]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R14,E_val 1 8]
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 1 8]
E_app (Op ADD) [E_reg R14,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1867 -> quotearg_n_options_1873 and quotearg_n_options_2625 -> quotearg_n_options_2636 have been verified to do the same.

same_behavior for the nodes: .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_154 -> .label_154 and .label_149 -> quotearg_n_options_2643 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1878 -> quotearg_n_options_1878 and quotearg_n_options_2644 -> quotearg_n_options_2644 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 96),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 88),8],4]
SA || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 88),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 96),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 64),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R14, R9 := TakeBits: <31,0>(Reg: R12), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: RBP,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R14),(R9,E_app (TakeBits 31 0) [E_reg R12]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R12]
Value B:
E_app (TakeBits 31 0) [E_reg R12]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBP
E_reg RBP
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1879 -> quotearg_n_options_1893 and quotearg_n_options_2645 -> quotearg_n_options_2671 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1894 -> quotearg_n_options_1894 and quotearg_n_options_2672 -> quotearg_n_options_2672 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1874 -> quotearg_n_options_1874 and quotearg_n_options_2637 -> quotearg_n_options_2638 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1875 -> quotearg_n_options_1875 and quotearg_n_options_2639 -> quotearg_n_options_2639 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1824 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_2564 + Var: slotvec0),16]

reg_chk debug XMM0fromList [(RIP,E_var "returned" 64),(XMM0,E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1824" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_2564" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1824 -> quotearg_n_options_1825 and quotearg_n_options_2564 -> quotearg_n_options_2565 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 76),4] := TakeBits: <31,0>(Reg: RCX)

SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 92),4] := TakeBits: <31,0>(Reg: RCX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 76 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RCX]
E_app (TakeBits 31 0) [E_reg RCX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1802 -> quotearg_n_options_1804 and quotearg_n_options_2534 -> quotearg_n_options_2538 have been verified to do the same.

Label relationship:
quotearg_n_options_1824 <--> quotearg_n_options_2564
slot0 <--> slot0
quotearg_n_options_1837 <--> quotearg_n_options_2580
nslots <--> nslots
.label_150 <--> quotearg_n_options_2568
quotearg_n_options_1822 <--> quotearg_n_options_2562
slotvec0 <--> slotvec0
slotvec <--> slotvec
quotearg_n_options_1799 <--> quotearg_n_options_2531
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 64),(Var: RSP0 - Value: 120),(Var: RSP0 - Value: 56)
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: RBX),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 76) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (25/60): "quotearg_alloc_mem"
--------
.dot code for CFG of text section quotearg_alloc_mem for Vanilla
diGraph quotearg_alloc_mem_Vanilla{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_1708,quotearg_alloc_mem_1708]"]
	quotearg_alloc_mem_1  [label="[.label_143,quotearg_alloc_mem_1718]"]
	quotearg_alloc_mem_2  [label="[quotearg_alloc_mem,quotearg_alloc_mem_1663]"]
	quotearg_alloc_mem_3(2,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
(2,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 120) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
  [label="[quotearg_alloc_mem_1664,quotearg_alloc_mem_1664]"]
	quotearg_alloc_mem_4  [label="[quotearg_alloc_mem_1665,quotearg_alloc_mem_1683]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_1684,quotearg_alloc_mem_1684]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_1685,quotearg_alloc_mem_1687]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_1688,quotearg_alloc_mem_1688]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_1689,quotearg_alloc_mem_1700]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_1701,quotearg_alloc_mem_1701]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_1702,quotearg_alloc_mem_1707]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_1;

	quotearg_alloc_mem_2 -> quotearg_alloc_mem_3;
	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_1 [label="ZF"];
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_alloc_mem for Randomized
diGraph quotearg_alloc_mem_Randomized{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_2419,quotearg_alloc_mem_2419]"]
	quotearg_alloc_mem_1  [label="[.label_143,quotearg_alloc_mem_2430]"]
	quotearg_alloc_mem_2  [label="[quotearg_alloc_mem,quotearg_alloc_mem_2352]"]
	quotearg_alloc_mem_3  [label="[quotearg_alloc_mem_2353,quotearg_alloc_mem_2353]"]
	quotearg_alloc_mem_4  [label="[quotearg_alloc_mem_2354,quotearg_alloc_mem_2382]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_2383,quotearg_alloc_mem_2383]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_2384,quotearg_alloc_mem_2388]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_2389,quotearg_alloc_mem_2389]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_2390,quotearg_alloc_mem_2409]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_2410,quotearg_alloc_mem_2410]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_2411,quotearg_alloc_mem_2418]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_1;

	quotearg_alloc_mem_2 -> quotearg_alloc_mem_3;
	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_1 [label="ZF"];
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc_mem"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 72),8] := Reg: RDX, [(Var: RSP0 - Value: 80),8] := Reg: RSI, [(Var: RSP0 - Value: 88),8] := Reg: RDI
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 3:
RAX := __errno_location@()
node 4:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
node 7:
RAX := xmalloc@()
node 8:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], RDX := Dereference: [(Var: RSP0 - Value: 64),8]
[Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8])
--------

Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc_mem"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI, [(Var: RSP0 - Value: 72),8] := Reg: RDX, [(Var: RSP0 - Value: 80),8] := Reg: RDI
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 3:
RAX := __errno_location@()
node 4:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 88),8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
node 7:
RAX := xmalloc@()
node 8:
RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 60),4], RDX := Dereference: [(Var: RSP0 - Value: 88),8]
[Dereference: [(Var: RSP0 - Value: 88),8],4] := Dereference: [(Var: RSP0 - Value: 60),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8])
--------

same_behavior for the nodes: quotearg_alloc_mem -> quotearg_alloc_mem_1663 and quotearg_alloc_mem -> quotearg_alloc_mem_2352

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 72),8] := Reg: RDX, [(Var: RSP0 - Value: 80),8] := Reg: RSI, [(Var: RSP0 - Value: 88),8] := Reg: RDI
SA || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

SB || RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI, [(Var: RSP0 - Value: 72),8] := Reg: RDX, [(Var: RSP0 - Value: 80),8] := Reg: RDI
SB || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RSI,E_reg RSI),(R15,E_reg RDI),(R14,E_reg RSI),(R12,E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4))]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RSI,E_reg RSI),(R15,E_reg RDI),(R14,E_reg RSI),(R12,E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4))]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RSI,E_reg RSI),(R15,E_reg RDI),(R14,E_reg RSI),(R12,E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4))]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RSI,E_reg RSI),(R15,E_reg RDI),(R14,E_reg RSI),(R12,E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4))]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem -> quotearg_alloc_mem_1663 and quotearg_alloc_mem -> quotearg_alloc_mem_2352 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1664 -> quotearg_alloc_mem_1664 and quotearg_alloc_mem_2353 -> quotearg_alloc_mem_2353

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1664 -> quotearg_alloc_mem_1664 and quotearg_alloc_mem_2353 -> quotearg_alloc_mem_2353 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1665 -> quotearg_alloc_mem_1683 and quotearg_alloc_mem_2354 -> quotearg_alloc_mem_2382

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 88),8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_reg R14),(RDX,E_reg R15),(RDI,E_val 0 64),(RSI,E_val 0 64),(R13,E_app (Op ADD) [E_reg R12,E_val 8 64]),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1665 -> quotearg_alloc_mem_1683 and quotearg_alloc_mem_2354 -> quotearg_alloc_mem_2382 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1684 -> quotearg_alloc_mem_1684 and quotearg_alloc_mem_2383 -> quotearg_alloc_mem_2383

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1684 -> quotearg_alloc_mem_1684 and quotearg_alloc_mem_2383 -> quotearg_alloc_mem_2383 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1685 -> quotearg_alloc_mem_1687 and quotearg_alloc_mem_2384 -> quotearg_alloc_mem_2388

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)

SB || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1685 -> quotearg_alloc_mem_1687 and quotearg_alloc_mem_2384 -> quotearg_alloc_mem_2388 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1688 -> quotearg_alloc_mem_1688 and quotearg_alloc_mem_2389 -> quotearg_alloc_mem_2389

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1688 -> quotearg_alloc_mem_1688 and quotearg_alloc_mem_2389 -> quotearg_alloc_mem_2389 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1689 -> quotearg_alloc_mem_1700 and quotearg_alloc_mem_2390 -> quotearg_alloc_mem_2409

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 88),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13

SB || RAX := Dereference: [(Reg: R12 + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RDI,E_reg RAX),(RSI,E_reg R15),(R14,E_reg RAX),(R9,E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]),(R8,E_deref (E_reg R12) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1689 -> quotearg_alloc_mem_1700 and quotearg_alloc_mem_2390 -> quotearg_alloc_mem_2409 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1701 -> quotearg_alloc_mem_1701 and quotearg_alloc_mem_2410 -> quotearg_alloc_mem_2410

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1701 -> quotearg_alloc_mem_1701 and quotearg_alloc_mem_2410 -> quotearg_alloc_mem_2410 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1702 -> quotearg_alloc_mem_1707 and quotearg_alloc_mem_2411 -> quotearg_alloc_mem_2418

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], RDX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || [Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 52),4]
SA || ZF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8])

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 60),4], RDX := Dereference: [(Var: RSP0 - Value: 88),8]
SB || [Dereference: [(Var: RSP0 - Value: 88),8],4] := Dereference: [(Var: RSP0 - Value: 60),4]
SB || ZF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 72),8],Dereference: [(Var: RSP0 - Value: 72),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1702 -> quotearg_alloc_mem_1707 and quotearg_alloc_mem_2411 -> quotearg_alloc_mem_2418 have been verified to do the same.

same_behavior for the nodes: .label_143 -> quotearg_alloc_mem_1718 and .label_143 -> quotearg_alloc_mem_2430

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R1(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 104) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 104) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(4,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(5,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(6,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(7,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(8,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 104) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 104) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(4,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(5,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(6,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(7,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1)),(8,RSP == (Var: RSP0 - Value: 104) && RBP == OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1))])
3,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_143 -> quotearg_alloc_mem_1718 and .label_143 -> quotearg_alloc_mem_2430 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1708 -> quotearg_alloc_mem_1708 and quotearg_alloc_mem_2419 -> quotearg_alloc_mem_2419

same_behavior checking these two SStates:

SA || [Reg: RAX,8] := Reg: RBX

SB || [Reg: RAX,8] := Reg: RBX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1708 -> quotearg_alloc_mem_1708 and quotearg_alloc_mem_2419 -> quotearg_alloc_mem_2419 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 52) <--> (Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (26/60): "quotearg_alloc"
--------
.dot code for CFG of text section quotearg_alloc for Vanilla
diGraph quotearg_alloc_Vanilla{
	quotearg_alloc_0  [label="[quotearg_alloc,quotearg_alloc_1591]"]
	quotearg_alloc_1  [label="[quotearg_alloc_1592,quotearg_alloc_1592]"]
	quotearg_alloc_2  [label="[quotearg_alloc_1593,quotearg_alloc_1609]"]
	quotearg_alloc_3  [label="[quotearg_alloc_1610,quotearg_alloc_1610]"]
	quotearg_alloc_4  [label="[quotearg_alloc_1611,quotearg_alloc_1613]"]
	quotearg_alloc_5  [label="[quotearg_alloc_1614,quotearg_alloc_1614]"]
	quotearg_alloc_6  [label="[quotearg_alloc_1615,quotearg_alloc_1626]"]
	quotearg_alloc_7  [label="[quotearg_alloc_1627,quotearg_alloc_1627]"]
	quotearg_alloc_8  [label="[quotearg_alloc_1628,quotearg_alloc_1639]"]

	quotearg_alloc_0 -> quotearg_alloc_1;
	quotearg_alloc_1 -> quotearg_alloc_2;
	quotearg_alloc_2 -> quotearg_alloc_3;
	quotearg_alloc_3 -> quotearg_alloc_4;
	quotearg_alloc_4 -> quotearg_alloc_5;
	quotearg_alloc_5 -> quotearg_alloc_6;
	quotearg_alloc_6 -> quotearg_alloc_7;
	quotearg_alloc_7 -> quotearg_alloc_8;

}
--------
--------
.dot code for CFG of text section quotearg_alloc for Randomized
diGraph quotearg_alloc_Randomized{
	quotearg_alloc_0  [label="[quotearg_alloc,quotearg_alloc_2244]"]
	quotearg_alloc_1  [label="[quotearg_alloc_2245,quotearg_alloc_2245]"]
	quotearg_alloc_2  [label="[quotearg_alloc_2246,quotearg_alloc_2275]"]
	quotearg_alloc_3  [label="[quotearg_alloc_2276,quotearg_alloc_2276]"]
	quotearg_alloc_4  [label="[quotearg_alloc_2277,quotearg_alloc_2281]"]
	quotearg_alloc_5  [label="[quotearg_alloc_2282,quotearg_alloc_2282]"]
	quotearg_alloc_6  [label="[quotearg_alloc_2283,quotearg_alloc_2300]"]
	quotearg_alloc_7  [label="[quotearg_alloc_2301,quotearg_alloc_2301]"]
	quotearg_alloc_8  [label="[quotearg_alloc_2302,quotearg_alloc_2320]"]

	quotearg_alloc_0 -> quotearg_alloc_1;
	quotearg_alloc_1 -> quotearg_alloc_2;
	quotearg_alloc_2 -> quotearg_alloc_3;
	quotearg_alloc_3 -> quotearg_alloc_4;
	quotearg_alloc_4 -> quotearg_alloc_5;
	quotearg_alloc_5 -> quotearg_alloc_6;
	quotearg_alloc_6 -> quotearg_alloc_7;
	quotearg_alloc_7 -> quotearg_alloc_8;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc"
node 0:
RBX := Reg: RDI, R14 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4]), R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 72),8] := Reg: RDI
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Reg: RBX, RDI := Value: 0, RSI := Value: 0, R15 := (Reg: R14 + Value: 8), R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
[(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := (Reg: R14 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Dereference: [(Var: RSP0 - Value: 72),8], RDI := Reg: RAX, RSI := Reg: RBX, R13 := Reg: RAX, R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
[(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := Reg: R15
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Reg: R13, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 64),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc"
node 0:
RBX := Reg: RDI, R14 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4]), R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Reg: RBX, RDI := Value: 0, RSI := Value: 0, R15 := (Reg: R14 + Value: 8), R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
[(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 68),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := (Reg: R14 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 5:
RAX := xmalloc@()
node 6:
RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: RBX, R13 := Reg: RAX, R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
[(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := Reg: R15
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := Reg: R13, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 64),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 68),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

same_behavior for the nodes: quotearg_alloc -> quotearg_alloc_1591 and quotearg_alloc -> quotearg_alloc_2244

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, R14 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4]), R12 := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 72),8] := Reg: RDI
SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || RBX := Reg: RDI, R14 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4]), R12 := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)),(R12,E_reg RSI)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)),(R12,E_reg RSI)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)),(R12,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc -> quotearg_alloc_1591 and quotearg_alloc -> quotearg_alloc_2244 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1592 -> quotearg_alloc_1592 and quotearg_alloc_2245 -> quotearg_alloc_2245

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1592 -> quotearg_alloc_1592 and quotearg_alloc_2245 -> quotearg_alloc_2245 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1593 -> quotearg_alloc_1609 and quotearg_alloc_2246 -> quotearg_alloc_2275

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Reg: RBX, RDI := Value: 0, RSI := Value: 0, R15 := (Reg: R14 + Value: 8), R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
SA || [(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := (Reg: R14 + Value: 8)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Reg: RBX, RDI := Value: 0, RSI := Value: 0, R15 := (Reg: R14 + Value: 8), R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: RAX, [(Var: RSP0 - Value: 68),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := (Reg: R14 + Value: 8)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_reg RBX),(RDI,E_val 0 64),(RSI,E_val 0 64),(R15,E_app (Op ADD) [E_reg R14,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
Resulting values:
Value A:
E_reg R12
Value B:
E_reg R12
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg R14,E_val 8 64]
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R14) 4
Value B:
E_deref (E_reg R14) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 68 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R14,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R14,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 8 64]
E_app (Op ADD) [E_reg R14,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1593 -> quotearg_alloc_1609 and quotearg_alloc_2246 -> quotearg_alloc_2275 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1610 -> quotearg_alloc_1610 and quotearg_alloc_2276 -> quotearg_alloc_2276

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1610 -> quotearg_alloc_1610 and quotearg_alloc_2276 -> quotearg_alloc_2276 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1611 -> quotearg_alloc_1613 and quotearg_alloc_2277 -> quotearg_alloc_2281

same_behavior checking these two SStates:

SA || RBX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
SA || ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

SB || RBX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
SB || ZF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (Op ADD) [E_reg RAX,E_val 1 8]),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 8])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_app (Op ADD) [E_reg RAX,E_val 1 8]),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 8])]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1611 -> quotearg_alloc_1613 and quotearg_alloc_2277 -> quotearg_alloc_2281 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1614 -> quotearg_alloc_1614 and quotearg_alloc_2282 -> quotearg_alloc_2282

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1614 -> quotearg_alloc_1614 and quotearg_alloc_2282 -> quotearg_alloc_2282 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1615 -> quotearg_alloc_1626 and quotearg_alloc_2283 -> quotearg_alloc_2300

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Dereference: [(Var: RSP0 - Value: 72),8], RDI := Reg: RAX, RSI := Reg: RBX, R13 := Reg: RAX, R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
SA || [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := Reg: R15

SB || RAX := Dereference: [(Reg: R14 + Value: 40),8], RCX := Reg: R12, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: RBX, R13 := Reg: RAX, R9 := OR(Dereference: [(Reg: R14 + Value: 4),4],Value: 1), R8 := Dereference: [Reg: R14,4]
SB || [(Var: RSP0 - Value: 88),8] := Dereference: [(Reg: R14 + Value: 48),8], [(Var: RSP0 - Value: 96),8] := Dereference: [(Reg: R14 + Value: 40),8], [(Var: RSP0 - Value: 104),8] := Reg: R15

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8),(RCX,E_reg R12),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDI,E_reg RAX),(RSI,E_reg RBX),(R13,E_reg RAX),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_reg R14) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
Resulting values:
Value A:
E_reg R12
Value B:
E_reg R12
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg R14,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg R14) 4
Value B:
E_deref (E_reg R14) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R14,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R14,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R14,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1615 -> quotearg_alloc_1626 and quotearg_alloc_2283 -> quotearg_alloc_2300 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1627 -> quotearg_alloc_1627 and quotearg_alloc_2301 -> quotearg_alloc_2301

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1627 -> quotearg_alloc_1627 and quotearg_alloc_2301 -> quotearg_alloc_2301 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1628 -> quotearg_alloc_1639 and quotearg_alloc_2302 -> quotearg_alloc_2320

same_behavior checking these two SStates:

SA || RAX := Reg: R13, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 64),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 52),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R13, RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 64),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 64),8],4] := Dereference: [(Var: RSP0 - Value: 68),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4])])
 := (Var: RSP0 - Value: 48)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R13),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_reg R13
Value B:
E_reg R13
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 68 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_1628 -> quotearg_alloc_1639 and quotearg_alloc_2302 -> quotearg_alloc_2320 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 96)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 52) <--> (Var: RSP0 - Value: 68)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (27/60): "clone_quoting_options"
--------
.dot code for CFG of text section clone_quoting_options for Vanilla
diGraph clone_quoting_options_Vanilla{
	clone_quoting_options_0  [label="[clone_quoting_options,clone_quoting_options_307]"]
	clone_quoting_options_1  [label="[clone_quoting_options_308,clone_quoting_options_308]"]
	clone_quoting_options_2  [label="[clone_quoting_options_309,clone_quoting_options_315]"]
	clone_quoting_options_3  [label="[clone_quoting_options_316,clone_quoting_options_316]"]
	clone_quoting_options_4  [label="[clone_quoting_options_317,clone_quoting_options_321]"]

	clone_quoting_options_0 -> clone_quoting_options_1;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;

}
--------
--------
.dot code for CFG of text section clone_quoting_options for Randomized
diGraph clone_quoting_options_Randomized{
	clone_quoting_options_0  [label="[clone_quoting_options,clone_quoting_options_424]"]
	clone_quoting_options_1  [label="[clone_quoting_options_425,clone_quoting_options_425]"]
	clone_quoting_options_2  [label="[clone_quoting_options_426,clone_quoting_options_436]"]
	clone_quoting_options_3  [label="[clone_quoting_options_437,clone_quoting_options_437]"]
	clone_quoting_options_4  [label="[clone_quoting_options_438,clone_quoting_options_445]"]

	clone_quoting_options_0 -> clone_quoting_options_1;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "clone_quoting_options"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xmemdup@()
node 4:
RBX := (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4])])
Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[Reg: R14,4] := Dereference: [Reg: RAX,4]
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "clone_quoting_options"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xmemdup@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[Reg: R14,4] := Dereference: [Reg: RAX,4]
--------

same_behavior for the nodes: clone_quoting_options -> clone_quoting_options_307 and clone_quoting_options -> clone_quoting_options_424

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options -> clone_quoting_options_307 and clone_quoting_options -> clone_quoting_options_424 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_308 -> clone_quoting_options_308 and clone_quoting_options_425 -> clone_quoting_options_425

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_308 -> clone_quoting_options_308 and clone_quoting_options_425 -> clone_quoting_options_425 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_309 -> clone_quoting_options_315 and clone_quoting_options_426 -> clone_quoting_options_436

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 4),(RBX,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RDI,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RSI,E_val 56 64),(R14,E_reg RAX)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 4),(RBX,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RDI,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RSI,E_val 56 64),(R14,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 4),(RBX,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RDI,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RSI,E_val 56 64),(R14,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 4),(RBX,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RDI,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RSI,E_val 56 64),(R14,E_reg RAX)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 4),(RBX,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RDI,E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)),(RSI,E_val 56 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Value B:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Value B:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 64
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_309 -> clone_quoting_options_315 and clone_quoting_options_426 -> clone_quoting_options_436 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_316 -> clone_quoting_options_316 and clone_quoting_options_437 -> clone_quoting_options_437

same_behavior checking these two SStates:

SA || RAX := xmemdup@()

SB || RAX := xmemdup@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmemdup" "") [])]
Resulting values:
Value A:
E_app (F2 "xmemdup" "") []
Value B:
E_app (F2 "xmemdup" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_316 -> clone_quoting_options_316 and clone_quoting_options_437 -> clone_quoting_options_437 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_317 -> clone_quoting_options_321 and clone_quoting_options_438 -> clone_quoting_options_445

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [Reg: R14,4] := Dereference: [Reg: RAX,4]

SB || RBX := Dereference: [(Var: RSP0(9,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
(9,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [Reg: R14,4] := Dereference: [Reg: RAX,4]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes clone_quoting_options_317 -> clone_quoting_options_321 and clone_quoting_options_438 -> clone_quoting_options_445 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (28/60): "rpl_fflush"
--------
.dot code for CFG of text section rpl_fflush for Vanilla
diGraph rpl_fflush_Vanilla{
	rpl_fflush_0  [label="[rpl_fflush_3519,rpl_fflush_3521]"]
	rpl_fflush_1  [label="[rpl_fflush_3522,rpl_fflush_3522]"]
	rpl_fflush_2  [label="[rpl_fflush_3517,rpl_fflush_3518]"]
	rpl_fflush_3  [label="[rpl_fflush_3513,rpl_fflush_3513]"]
	rpl_fflush_4  [label="[rpl_fflush_3514,rpl_fflush_3514]"]
	rpl_fflush_5  [label="[rpl_fflush_3515,rpl_fflush_3516]"]
	rpl_fflush_6  [label="[.label_235,rpl_fflush_3525]"]
	rpl_fflush_7  [label="[rpl_fflush_3526,rpl_fflush_3526]"]
	rpl_fflush_8  [label="[rpl_fflush_3526_ret,rpl_fflush_3526_ret]"]
	rpl_fflush_9  [label="[rpl_fflush,rpl_fflush_3512]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_6;
	rpl_fflush_2 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_2 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_5;
	rpl_fflush_5 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_5 -> rpl_fflush_2 [label="!ZF"];
	rpl_fflush_6 -> rpl_fflush_7;
	rpl_fflush_7 -> rpl_fflush_8;

	rpl_fflush_9 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_9 -> rpl_fflush_3 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fflush for Randomized
diGraph rpl_fflush_Randomized{
	rpl_fflush_0  [label="[rpl_fflush_4886,rpl_fflush_4890]"]
	rpl_fflush_1  [label="[rpl_fflush_4891,rpl_fflush_4891]"]
	rpl_fflush_2  [label="[rpl_fflush_4884,rpl_fflush_4885]"]
	rpl_fflush_3  [label="[rpl_fflush_4878,rpl_fflush_4880]"]
	rpl_fflush_4  [label="[rpl_fflush_4881,rpl_fflush_4881]"]
	rpl_fflush_5  [label="[rpl_fflush_4882,rpl_fflush_4883]"]
	rpl_fflush_6  [label="[.label_235,rpl_fflush_4894]"]
	rpl_fflush_7  [label="[rpl_fflush_4895,rpl_fflush_4895]"]
	rpl_fflush_8  [label="[rpl_fflush_4895_ret,rpl_fflush_4895_ret]"]
	rpl_fflush_9  [label="[rpl_fflush,rpl_fflush_4877]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_6;
	rpl_fflush_2 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_2 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_5;
	rpl_fflush_5 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_5 -> rpl_fflush_2 [label="!ZF"];
	rpl_fflush_6 -> rpl_fflush_7;
	rpl_fflush_7 -> rpl_fflush_8;

	rpl_fflush_9 -> rpl_fflush_6 [label="ZF"];
	rpl_fflush_9 -> rpl_fflush_3 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, 1 ----> 6, 2 --ZF--> 6, 2 --!ZF--> 0, 3 ----> 4, 4 ----> 5, 5 --ZF--> 6, 5 --!ZF--> 2, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 6, 9 --!ZF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fflush"
node 0:
RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := rpl_fseeko@()
node 2:
ZF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1)
node 3:
RDI := Reg: RBX
node 4:
RAX := __freading@()
node 5:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX
node 7:
RAX := fflush@()
node 8:
skip'
node 9:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 9

Edges: 0 ----> 1, 1 ----> 6, 2 --ZF--> 6, 2 --!ZF--> 0, 3 ----> 4, 4 ----> 5, 5 --ZF--> 6, 5 --!ZF--> 2, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 6, 9 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fflush"
node 0:
RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := rpl_fseeko@()
node 2:
ZF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1)
node 3:
RDI := Reg: RBX
node 4:
RAX := __freading@()
node 5:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX
node 7:
RAX := fflush@()
node 8:
skip'
node 9:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: rpl_fflush -> rpl_fflush_3512 and rpl_fflush -> rpl_fflush_4877

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fflush -> rpl_fflush_3512 and rpl_fflush -> rpl_fflush_4877 have been verified to do the same.

same_behavior for the nodes: .label_235 -> rpl_fflush_3525 and .label_235 -> rpl_fflush_4894

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0(2,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
" 64,E_val 8 64]) 8),(RDI,E_reg RBX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RBX)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_235 -> rpl_fflush_3525 and .label_235 -> rpl_fflush_4894 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3526 -> rpl_fflush_3526 and rpl_fflush_4895 -> rpl_fflush_4895

same_behavior checking these two SStates:

SA || RAX := fflush@()

SB || RAX := fflush@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fflush" "") [])]
Resulting values:
Value A:
E_app (F2 "fflush" "") []
Value B:
E_app (F2 "fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3526 -> rpl_fflush_3526 and rpl_fflush_4895 -> rpl_fflush_4895 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3526_ret -> rpl_fflush_3526_ret and rpl_fflush_4895_ret -> rpl_fflush_4895_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3526_ret -> rpl_fflush_3526_ret and rpl_fflush_4895_ret -> rpl_fflush_4895_ret have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3513 -> rpl_fflush_3513 and rpl_fflush_4878 -> rpl_fflush_4880

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3513 -> rpl_fflush_3513 and rpl_fflush_4878 -> rpl_fflush_4880 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3514 -> rpl_fflush_3514 and rpl_fflush_4881 -> rpl_fflush_4881

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__freading" "") [])]
Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3514 -> rpl_fflush_3514 and rpl_fflush_4881 -> rpl_fflush_4881 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3515 -> rpl_fflush_3516 and rpl_fflush_4882 -> rpl_fflush_4883

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3515 -> rpl_fflush_3516 and rpl_fflush_4882 -> rpl_fflush_4883 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3517 -> rpl_fflush_3518 and rpl_fflush_4884 -> rpl_fflush_4885

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1)

SB || ZF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RBX + Value: 1),1],Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3517 -> rpl_fflush_3518 and rpl_fflush_4884 -> rpl_fflush_4885 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3519 -> rpl_fflush_3521 and rpl_fflush_4886 -> rpl_fflush_4890

same_behavior checking these two SStates:

SA || RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_reg RBX),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_reg RBX),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 1 32),(RDI,E_reg RBX),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3519 -> rpl_fflush_3521 and rpl_fflush_4886 -> rpl_fflush_4890 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3522 -> rpl_fflush_3522 and rpl_fflush_4891 -> rpl_fflush_4891

same_behavior checking these two SStates:

SA || RAX := rpl_fseeko@()

SB || RAX := rpl_fseeko@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_fseeko" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_fseeko" "") []
Value B:
E_app (F2 "rpl_fseeko" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3522 -> rpl_fflush_3522 and rpl_fflush_4891 -> rpl_fflush_4891 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (29/60): "locale_charset"
--------
.dot code for CFG of text section locale_charset for Vanilla
diGraph locale_charset_Vanilla{
	locale_charset_0  [label="[locale_charset_3444,locale_charset_3444]"]
	locale_charset_1  [label="[.label_231,locale_charset_3447]"]
	locale_charset_2  [label="[locale_charset,locale_charset_3436]"]
	locale_charset_3  [label="[locale_charset_3437,locale_charset_3437]"]
	locale_charset_4  [label="[locale_charset_3438,locale_charset_3443]"]

	locale_charset_0 -> locale_charset_1;

	locale_charset_2 -> locale_charset_3;
	locale_charset_3 -> locale_charset_4;
	locale_charset_4 -> locale_charset_1 [label="ZF"];
	locale_charset_4 -> locale_charset_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section locale_charset for Randomized
diGraph locale_charset_Randomized{
	locale_charset_0  [label="[locale_charset_4789,locale_charset_4790]"]
	locale_charset_1  [label="[.label_231,locale_charset_4794]"]
	locale_charset_2  [label="[locale_charset,locale_charset_4778]"]
	locale_charset_3  [label="[locale_charset_4779,locale_charset_4779]"]
	locale_charset_4  [label="[locale_charset_4780,locale_charset_4788]"]

	locale_charset_0 -> locale_charset_1;

	locale_charset_2 -> locale_charset_3;
	locale_charset_3 -> locale_charset_4;
	locale_charset_4 -> locale_charset_1 [label="ZF"];
	locale_charset_4 -> locale_charset_0 [label="!ZF"];
}
--------
Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 --ZF--> 1, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "locale_charset"
node 0:
RAX := Reg: RCX
node 1:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 2:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := rpl_nl_langinfo@()
node 4:
RAX := Dereference: [Var: .str.1_5,4], RCX := (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4])
ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX !(2,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
= Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0)
--------

Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 --ZF--> 1, 4 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "locale_charset"
node 0:
RAX := Reg: RCX
node 1:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 2:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := rpl_nl_langinfo@()
node 4:
RAX := Dereference: [Var: .str.1_5,4], RCX := (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4])
ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0)
--------

same_behavior for the nodes: locale_charset -> locale_charset_3436 and locale_charset -> locale_charset_4778

same_behavior checking these two SStates:

SA || RDI := Value: 14
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || RDI := Value: 14
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 14 32)]
Resulting values:
Value A:
E_val 14 32
Value B:
E_val 14 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset -> locale_charset_3436 and locale_charset -> locale_charset_4778 have been verified to do the same.

same_behavior for the nodes: locale_charset_3437 -> locale_charset_3437 and locale_charset_4779 -> locale_charset_4779

same_behavior checking these two SStates:

SA || RAX := rpl_nl_langinfo@()

SB || RAX := rpl_nl_langinfo@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_nl_langinfo" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_nl_langinfo" "") []
Value B:
E_app (F2 "rpl_nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_3437 -> locale_charset_3437 and locale_charset_4779 -> locale_charset_4779 have been verified to do the same.

same_behavior for the nodes: locale_charset_3438 -> locale_charset_3443 and locale_charset_4780 -> locale_charset_4788

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.1_5,4], RCX := (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4])
SA || ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0)

SB || RAX := Dereference: [Var: .str.1_5,4], RCX := (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4])
SB || ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: .str_0,4]),1],Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_5" 64) 4),(RCX,E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var ".str_0" 64) 4)),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_5" 64) 4),(RCX,E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var ".str_0" 64) 4)),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var ".str.1_5" 64) 4
Value B:
E_deref (E_var ".str.1_5" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var ".str_0" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var ".str_0" 64) 4)
Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_3438 -> locale_charset_3443 and locale_charset_4780 -> locale_charset_4788 have been verified to do the same.

same_behavior for the nodes: .label_231 -> locale_charset_3447 and .label_231 -> locale_charset_4794

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_231 -> locale_charset_3447 and .label_231 -> locale_charset_4794 have been verified to do the same.

same_behavior for the nodes: locale_charset_3444 -> locale_charset_3444 and locale_charset_4789 -> locale_charset_4790

same_behavior checking these two SStates:

SA || RAX := Reg: RCX

SB || RAX := Reg: RCX

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RCX)]
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_3444 -> locale_charset_3444 and locale_charset_4789 -> locale_charset_4790 have been verified to do the same.

Label relationship:
.str_0 <--> .str_0
.str.1_5 <--> .str.1_5
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (30/60): "rpl_mbrtowc"
--------
.dot code for CFG of text section rpl_mbrtowc for Vanilla
diGraph rpl_mbrtowc_Vanilla{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_3340,rpl_mbrtowc_3342]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_3336,rpl_mbrtowc_3336]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_3337,rpl_mbrtowc_3337]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_3338,rpl_mbrtowc_3339]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_3334,rpl_mbrtowc_3335]"]
	rpl_mbrtowc_5  [label="[.label_225,rpl_mbrtowc_3350]"]
	rpl_mbrtowc_6  [label="[rpl_mbrtowc,rpl_mbrtowc_3329]"]
	rpl_mbrtowc_7  [label="[rpl_mbrtowc_3330,rpl_mbrtowc_3330]"]
	rpl_mbrtowc_8  [label="[rpl_mbrtowc_3331,rpl_mbrtowc_3333]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_5;
	rpl_mbrtowc_1 -> rpl_mbrtowc_2;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_5 [label="!ZF"];
	rpl_mbrtowc_3 -> rpl_mbrtowc_0 [label="ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_5 [label="CF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="!CF"];

	rpl_mbrtowc_6 -> rpl_mbrtowc_7;
	rpl_mbrtowc_7 -> rpl_mbrtowc_8;
	rpl_mbrtowc_8 -> rpl_mbrtowc_5 [label="ZF"];
	rpl_mbrtowc_8 -> rpl_mbrtowc_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_mbrtowc for Randomized
diGraph rpl_mbrtowc_Randomized{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_4642,rpl_mbrtowc_4646]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_4635,rpl_mbrtowc_4637]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_4638,rpl(6,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0)])
(6,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0)])
_mbrtowc_4638]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_4639,rpl_mbrtowc_4641]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_4632,rpl_mbrtowc_4634]"]
	rpl_mbrtowc_5  [label="[.label_225,rpl_mbrtowc_4660]"]
	rpl_mbrtowc_6  [label="[rpl_mbrtowc,rpl_mbrtowc_4626]"]
	rpl_mbrtowc_7  [label="[rpl_mbrtowc_4627,rpl_mbrtowc_4627]"]
	rpl_mbrtowc_8  [label="[rpl_mbrtowc_4628,rpl_mbrtowc_4631]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_5;
	rpl_mbrtowc_1 -> rpl_mbrtowc_2;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_5 [label="!ZF"];
	rpl_mbrtowc_3 -> rpl_mbrtowc_0 [label="ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_5 [label="CF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="!CF"];

	rpl_mbrtowc_6 -> rpl_mbrtowc_7;
	rpl_mbrtowc_7 -> rpl_mbrtowc_8;
	rpl_mbrtowc_8 -> rpl_mbrtowc_5 [label="ZF"];
	rpl_mbrtowc_8 -> rpl_mbrtowc_4 [label="!ZF"];
}
--------
Starting Node: 6

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, 3 --!ZF--> 5, 3 --ZF--> 0, 4 --CF--> 5, 4 --!CF--> 1, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_mbrtowc"
node 0:
RAX := Dereference: [Reg: R14,1], R15 := Value: 1
[Reg: RBX,4] := Dereference: [Reg: R14,1]
node 1:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := hard_locale@()
node 3:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 4:
ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)
node 5:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 6:
RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 7:
RAX := mbrtowc@()
node 8:
R15 := Reg: RAX
ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)
--------

Starting Node: 6

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, 3 --!ZF--> 5, 3 --ZF--> 0, 4 --CF--> 5, 4 --!CF--> 1, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_mbrtowc"
node 0:
RAX := Dereference: [Reg: R14,1], R15 := Value: 1
[Reg: RBX,4] := Dereference: [Reg: R14,1]
node 1:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := hard_locale@()
node 3:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 4:
ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)
node 5:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 6:
RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 7:
RAX := mbrtowc@()
node 8:
R15 := Reg: RAX
ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)
--------

same_behavior for the nodes: rpl_mbrtowc -> rpl_mbrtowc_3329 and rpl_mbrtowc -> rpl_mbrtowc_4626

same_behavior checking these two SStates:

SA || RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RDI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RSI,E_reg RSI),(R14,E_reg RSI),(R12,E_reg RDX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RDI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RSI,E_reg RSI),(R14,E_reg RSI),(R12,E_reg RDX)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RDI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RSI,E_reg RSI),(R14,E_reg RSI),(R12,E_reg RDX)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RBX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RDI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])),(RSI,E_reg RSI),(R14,E_reg RSI),(R12,E_reg RDX)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
local_var_cmp called

Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc -> rpl_mbrtowc_3329 and rpl_mbrtowc -> rpl_mbrtowc_4626 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3330 -> rpl_mbrtowc_3330 and rpl_mbrtowc_4627 -> rpl_mbrtowc_4627

same_behavior checking these two SStates:

SA || RAX := mbrtowc@()

SB || RAX := mbrtowc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "mbrtowc" "") [])]
Resulting values:
Value A:
E_app (F2 "mbrtowc" "") []
Value B:
E_app (F2 "mbrtowc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3330 -> rpl_mbrtowc_3330 and rpl_mbrtowc_4627 -> rpl_mbrtowc_4627 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3331 -> rpl_mbrtowc_3333 and rpl_mbrtowc_4628 -> rpl_mbrtowc_4631

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)

SB || R15 := Reg: RAX
SB || ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)

reg_chk debug R15fromList [(RIP,E_var "returned" 64),(R15,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3331 -> rpl_mbrtowc_3333 and rpl_mbrtowc_4628 -> rpl_mbrtowc_4631 have been verified to do the same.

same_behavior for the nodes: .label_225 -> rpl_mbrtowc_3350 and .label_225 -> rpl_mbrtowc_4660

same_behavior checking these two SStates:

SA || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_225 -> rpl_mbrtowc_3350 and .label_225 -> rpl_mbrtowc_4660 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3334 -> rpl_mbrtowc_3335 and rpl_mbrtowc_4632 -> rpl_mbrtowc_4634

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)

SB || ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3334 -> rpl_mbrtowc_3335 and rpl_mbrtowc_4632 -> rpl_mbrtowc_4634 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3336 -> rpl_mbrtowc_3336 and rpl_mbrtowc_4635 -> rpl_mbrtowc_4637

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3336 -> rpl_mbrtowc_3336 and rpl_mbrtowc_4(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
635 -> rpl_mbrtowc_4637 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3337 -> rpl_mbrtowc_3337 and rpl_mbrtowc_4638 -> rpl_mbrtowc_4638

same_behavior checking these two SStates:

SA || RAX := hard_locale@()

SB || RAX := hard_locale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "hard_locale" "") [])]
Resulting values:
Value A:
E_app (F2 "hard_locale" "") []
Value B:
E_app (F2 "hard_locale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3337 -> rpl_mbrtowc_3337 and rpl_mbrtowc_4638 -> rpl_mbrtowc_4638 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3338 -> rpl_mbrtowc_3339 and rpl_mbrtowc_4639 -> rpl_mbrtowc_4641

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3338 -> rpl_mbrtowc_3339 and rpl_mbrtowc_4639 -> rpl_mbrtowc_4641 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3340 -> rpl_mbrtowc_3342 and rpl_mbrtowc_4642 -> rpl_mbrtowc_4646

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R14,1], R15 := Value: 1
SA || [Reg: RBX,4] := Dereference: [Reg: R14,1]

SB || RAX := Dereference: [Reg: R14,1], R15 := Value: 1
SB || [Reg: RBX,4] := Dereference: [Reg: R14,1]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_reg R14) 1),(RDI,E_reg RDI),(R15,E_val 1 32)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_reg R14) 1),(RDI,E_reg RDI),(R15,E_val 1 32)]
Resulting values:
Value A:
E_deref (E_reg R14) 1
Value B:
E_deref (E_reg R14) 1
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_deref (E_reg R14) 1
E_deref (E_reg R14) 1
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3340 -> rpl_mbrtowc_3342 and rpl_mbrtowc_4642 -> rpl_mbrtowc_4646 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)

Succesful check!
Considering text section (31/60): "xstrdup"
--------
.dot code for CFG of text section xstrdup for Vanilla
diGraph xstrdup_Vanilla{
	xstrdup_0  [label="[.label_221,.label_221]"]
	xstrdup_1  [label="[xstrdup_3242,xstrdup_3243]"]
	xstrdup_2  [label="[.label_222,xstrdup_3247]"]
	xstrdup_3  [label="[xstrdup_3248,xstrdup_3248]"]
	xstrdup_4  [label="[xstrdup_3249,xstrdup_3253]"]
	xstrdup_5  [label="[xstrdup,xstrdup_3234]"]
	xstrdup_6  [label="[xstrdup_3235,xstrdup_3235]"]
	xstrdup_7  [label="[xstrdup_3236,xstrdup_3237]"]
	xstrdup_8  [label="[xstrdup_3238,xstrdup_3238]"]
	xstrdup_9  [label="[xstrdup_3239,xstrdup_3241]"]


	xstrdup_1 -> xstrdup_0 [label="ZF"];
	xstrdup_1 -> xstrdup_2 [label="!ZF"];
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;

	xstrdup_5 -> xstrdup_6;
	xstrdup_6 -> xstrdup_7;
	xstrdup_7 -> xstrdup_8;
	xstrdup_8 -> xstrdup_9;
	xstrdup_9 -> xstrdup_2 [label="ZF"];
	xstrdup_9 -> xstrdup_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xstrdup for Randomized
diGraph xstrdup_Randomized{
	xstrdup_0  [label="[.label_222,.label_222]"]
	xstrdup_1  [label="[xstrdup_4507,xstrdup_4509]"]
	xstrdup_2  [label="[.label_221,xstrdup_4514]"]
	xstrdup_3  [label="[xstrdup_4515,xstrdup_4515]"]
	xstrdup_4  [label="[xstrdup_4516,xstrdup_4522]"]
	xstrdup_5  [label="[xstrdup,xstrdup_4494]"]
	xstrdup_6  [label="[xstrdup_4495,xstrdup_4495]"]
	xstrdup_7  [label="[xstrdup_4496,xstrdup_4499]"]
	xstrdup_8  [label="[xstrdup_4500,xstrdup_4500]"]
	xstrdup_9  [label="[xstrdup_4501,xstrdup_4506]"]


	xstrdup_1 -> xstrdup_0 [label="ZF"];
	xstrdup_1 -> xstrdup_2 [label="!ZF"];
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;

	xstrdup_5 -> xstrdup_6;
	xstrdup_6 -> xstrdup_7;
	xstrdup_7 -> xstrdup_8;
	xstrdup_8 -> xstrdup_9;
	xstrdup_9 -> xstrdup_2 [label="ZF"];
	xstrdup_9 -> xstrdup_1 [label="!ZF"];
}
--------
Starting Node: 5

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 --ZF--> 2, 9 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xstrdup"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)
node 2:
RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14
node 3:
RAX := memcpy@()
node 4:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 5:
R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 6:
RAX := strlen@()
node 7:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1)
node 8:
RAX := malloc@()
node 9:
RBX := (Reg: RBX + Value: 1), R15 := Reg: RAX
ZF := (Reg: RBX + Value: 1), SF := (Reg: RBX + Value: 1), OF := (Reg: RBX + Value: 1), PF := (Reg: RBX + Value: 1)
--------

Starting Node: 5

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 --ZF--> 2, 9 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xstrdup"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)
node 2:
RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14
node 3:
RAX := memcpy@()
node 4:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 5:
R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 6:
RAX := strlen@()
node 7:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1)
node 8:
RAX := malloc@()
node 9:
RBX := (Reg: RBX + Value: 1), R15 := Reg: RAX
ZF := (Reg: RBX + Value: 1), SF := (Reg: RBX + Value: 1), OF := (Reg: RBX + Value: 1), PF := (Reg: RBX + Value: 1)
--------

same_behavior for the nodes: xstrdup -> xstrdup_3234 and xstrdup -> xstrdup_4494

same_behavior checking these two SStates:

SA || R14 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || R14 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI),(R14,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xstrdup -> xstrdup_3234 and xstrdup -> xstrdup_4494 have been verified to do the same.

same_behavior for the nodes: xstrdup_3235 -> xstrdup_3235 and xstrdup_4495 -> xstrdup_4495

same_behavior checking these two SStates:

SA || RAX := strlen@()

SB || RAX := strlen@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strlen" "") [])]
Resulting values:
Value A:
E_app (F2 "strlen" "") []
Value B:
E_app (F2 "strlen" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3235 -> xstrdup_3235 and xstrdup_4495 -> xstrdup_4495 have been verified to do the same.

same_behavior for the nodes: xstrdup_3236 -> xstrdup_3237 and xstrdup_4496 -> xstrdup_4499

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1)

SB || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RAX),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3236 -> xstrdup_3237 and xstrdup_4496 -> xstrdup_4499 have been verified to do the same.

same_behavior for the nodes: xstrdup_3238 -> xstrdup_3238 and xstrdup_4500 -> xstrdup_4500

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3238 -> xstrdup_3238 and xstrdup_4500 -> xstrdup_4500 have been verified to do the same.

same_behavior for the nodes: xstrdup_3239 -> xstrdup_3241 and xstrdup_4501 -> xstrdup_4506

same_behavior checking these two SStates:

SA || RBX := (Reg: RBX + Value: 1), R15 := Reg: RAX
SA || ZF := (Reg: RBX + Value: 1), SF := (Reg: RBX + Value: 1), OF := (Reg: RBX + Value: 1), PF := (Reg: RBX + Value: 1)

SB || RBX := (Reg: RBX + Value: 1), R15 := Reg: RAX
SB || ZF := (Reg: RBX + Value: 1), SF := (Reg: RBX + Value: 1), OF := (Reg: RBX + Value: 1), PF := (Reg: RBX + Value: 1)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (Op ADD) [E_reg RBX,E_val 1 8]),(RSI,E_reg RSI),(R15,E_reg RAX)]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RBX,E_app (Op ADD) [E_reg RBX,E_val 1 8]),(RSI,E_reg RSI),(R15,E_reg RAX)]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3239 -> xstrdup_3241 and xstrdup_4501 -> xstrdup_4506 have been verified to do the same.

same_behavior for the nodes: .label_222 -> xstrdup_3247 and .label_221 -> xstrdup_4514

same_behavior checking these two SStates:

SA || RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14

SB || RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_222 -> xstrdup_3247 and .label_221 -> xstrdup_4514 have been verified to do the same.

same_behavior for the nodes: xstrdup_3248 -> xstrdup_3248 and xstrdup_4515 -> xstrdup_4515

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3248 -> xstrdup_3248 and xstrdup_4515 -> xstrdup_4515 have been verified to do the same.

same_behavior for the nodes: xstrdup_3249 -> xstrdup_3253 and xstrdup_4516 -> xstrdup_4522

same_behavior checking these two SStates:

SA || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3249 -> xstrdup_3253 and xstrdup_4516 -> xstrdup_4522 have been verified to do the same.

same_behavior for the nodes: xstrdup_3242 -> xstrdup_3243 and xstrdup_4507 -> xstrdup_4509

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)

SB || ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3242 -> xstrdup_3243 and xstrdup_4507 -> xstrdup_4509 have been verified to do the same.

same_behavior for the nodes: .label_221 -> .label_221 and .label_222 -> .label_222

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_221 -> .label_221 and .label_222 -> .label_222 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (32/60): "xmemdup"
--------
.dot code for CFG of text section xmemdup for V(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(6,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
anilla
diGraph xmemdup_Vanilla{
	xmemdup_0  [label="[.label_220,.label_220]"]
	xmemdup_1  [label="[xmemdup_3209,xmemdup_3210]"]
	xmemdup_2  [label="[.label_219,xmemdup_3214]"]
	xmemdup_3  [label="[xmemdup_3215,xmemdup_3215]"]
	xmemdup_4  [label="[xmemdup_3216,xmemdup_3220]"]
	xmemdup_5  [label="[xmemdup,xmemdup_3204]"]
	xmemdup_6  [label="[xmemdup_3205,xmemdup_3205]"]
	xmemdup_7  [label="[xmemdup_3206,xmemdup_3208]"]


	xmemdup_1 -> xmemdup_0 [label="ZF"];
	xmemdup_1 -> xmemdup_2 [label="!ZF"];
	xmemdup_2 -> xmemdup_3;
	xmemdup_3 -> xmemdup_4;

	xmemdup_5 -> xmemdup_6;
	xmemdup_6 -> xmemdup_7;
	xmemdup_7 -> xmemdup_2 [label="ZF"];
	xmemdup_7 -> xmemdup_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xmemdup for Randomized
diGraph xmemdup_Randomized{
	xmemdup_0  [label="[.label_219,.label_219]"]
	xmemdup_1  [label="[xmemdup_4480,xmemdup_4480]"]
	xmemdup_2  [label="[xmemdup_4461,xmemdup_4464]"]
	xmemdup_3  [label="[.label_220,xmemdup_4469]"]
	xmemdup_4  [label="[xmemdup_4470,xmemdup_4470]"]
	xmemdup_5  [label="[xmemdup_4471,xmemdup_4477]"]
	xmemdup_6  [label="[xmemdup,xmemdup_4454]"]
	xmemdup_7  [label="[xmemdup_4455,xmemdup_4455]"]
	xmemdup_8  [label="[xmemdup_4456,xmemdup_4460]"]

	xmemdup_0 -> xmemdup_1;

	xmemdup_2 -> xmemdup_0 [label="ZF"];
	xmemdup_2 -> xmemdup_3 [label="!ZF"];
	xmemdup_3 -> xmemdup_4;
	xmemdup_4 -> xmemdup_5;

	xmemdup_6 -> xmemdup_7;
	xmemdup_7 -> xmemdup_8;
	xmemdup_8 -> xmemdup_3 [label="ZF"];
	xmemdup_8 -> xmemdup_2 [label="!ZF"];
}
--------
Starting Node: 5

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 --ZF--> 2, 7 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xmemdup"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)
node 2:
RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14
node 3:
RAX := memcpy@()
node 4:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 5:
RBX := Reg: RSI, RDI := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 6:
RAX := malloc@()
node 7:
R15 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 6

Edges: 0 ----> 1, , 2 --ZF--> 0, 2 --!ZF--> 3, 3 ----> 4, 4 ----> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 3, 8 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "xmemdup"
node 0:
skip'
node 1:
RAX := xalloc_die@()
node 2:
ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)
node 3:
RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14
node 4:
RAX := memcpy@()
node 5:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 6:
RBX := Reg: RSI, RDI := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 7:
RAX := malloc@()
node 8:
R15 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xmemdup -> xmemdup_3204 and xmemdup -> xmemdup_4454

same_behavior checking these two SStates:

SA || RBX := Reg: RSI, RDI := Reg: RSI, R14 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RBX := Reg: RSI, RDI := Reg: RSI, R14 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RSI),(RDI,E_reg RSI),(RSI,E_reg RSI),(R14,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_reg RSI),(RDI,E_reg RSI),(RSI,E_reg RSI),(R14,E_reg RDI)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_reg RSI),(RDI,E_reg RSI),(RSI,E_reg RSI),(R14,E_reg RDI)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmemdup -> xmemdup_3204 and xmemdup -> xmemdup_4454 have been verified to do the same.

same_behavior for the nodes: xmemdup_3205 -> xmemdup_3205 and xmemdup_4455 -> xmemdup_4455

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3205 -> xmemdup_3205 and xmemdup_4455 -> xmemdup_4455 have been verified to do the same.

same_behavior for the nodes: xmemdup_3206 -> xmemdup_3208 and xmemdup_4456 -> xmemdup_4460

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || R15 := Reg: RAX
SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

reg_chk debug R15fromList [(RIP,E_var "returned" 64),(R15,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3206 -> xmemdup_3208 and xmemdup_4456 -> xmemdup_4460 have been verified to do the same.

same_behavior for the nodes: .label_219 -> xmemdup_3214 and .label_220 -> xmemdup_4469

same_behavior checking these two SStates:

SA || RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14

SB || RDX := Reg: RBX, RDI := Reg: R15, RSI := Reg: R14

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R15),(RSI,E_reg R14)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_219 -> xmemdup_3214 and .label_220 -> xmemdup_4469 have been verified to do the same.

same_behavior for the nodes: xmemdup_3215 -> xmemdup_3215 and xmemdup_4470 -> xmemdup_4470

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3215 -> xmemdup_3215 and xmemdup_4470 -> xmemdup_4470 have been verified to do the same.

same_behavior for the nodes: xmemdup_3216 -> xmemdup_3220 and(4,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
 xmemdup_4471 -> xmemdup_4477

same_behavior checking these two SStates:

SA || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R15),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3216 -> xmemdup_3220 and xmemdup_4471 -> xmemdup_4477 have been verified to do the same.

same_behavior for the nodes: xmemdup_3209 -> xmemdup_3210 and xmemdup_4461 -> xmemdup_4464

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)

SB || ZF := TEST(Reg: R15,Reg: R15), CF := TEST(Reg: R15,Reg: R15), SF := TEST(Reg: R15,Reg: R15), OF := TEST(Reg: R15,Reg: R15), PF := TEST(Reg: R15,Reg: R15)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3209 -> xmemdup_3210 and xmemdup_4461 -> xmemdup_4464 have been verified to do the same.

same_behavior for the nodes: .label_220 -> .label_220 and .label_219 -> .label_219

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_220 -> .label_220 and xmemdup_4480 -> xmemdup_4480

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_220 -> .label_220 and xmemdup_4480 -> xmemdup_4480 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (33/60): "xcalloc"
--------
.dot code for CFG of text section xcalloc for Vanilla
diGraph xcalloc_Vanilla{
	xcalloc_0  [label="[xcalloc_3187,xcalloc_3188]"]
	xcalloc_1  [label="[xcalloc_3184,xcalloc_3184]"]
	xcalloc_2  [label="[xcalloc_3185,xcalloc_3186]"]
	xcalloc_3  [label="[.label_218,.label_218]"]
	xcalloc_4  [label="[xcalloc,xcalloc_3183]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3 [label="ZF"];
	xcalloc_2 -> xcalloc_0 [label="!ZF"];

	xcalloc_4 -> xcalloc_3 [label="CF"];
	xcalloc_4 -> xcalloc_1 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xcalloc for Randomized
diGraph xcalloc_Randomized{
	xcalloc_0  [label="[xcalloc_4434,xcalloc_4435]"]
	xcalloc_1  [label="[xcalloc_4430,xcalloc_4430]"]
	xcalloc_2  [label="[xcalloc_4431,xcalloc_4431]"]
	xcalloc_3  [label="[xcalloc_4432,xcalloc_4433]"]
	xcalloc_4  [label="[.label_218,.label_218]"]
	xcalloc_5  [label="[xcalloc,xcalloc_4429]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3;
	xcalloc_3 -> xcalloc_4 [label="ZF"];
	xcalloc_3 -> xcalloc_0 [label="!ZF"];

	xcalloc_5 -> xcalloc_4 [label="CF"];
	xcalloc_5 -> xcalloc_1 [label="!CF"];
}
--------
Starting Node: 4

Edges: , 1 ----> 2, 2 --ZF--> 3, 2 --!ZF--> 0, , 4 --CF--> 3, 4 --!CF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xcalloc"
node 0:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 1:
RAX := rpl_calloc@()
node 2:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 3:
RAX := xalloc_die@()
node 4:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 5

Edges: , 1 ----> 2, 2 ----> 3, 3 --ZF--> 4, 3 --!ZF--> 0, , 5 --CF--> 4, 5 --!CF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xcalloc"
node 0:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 1:
skip'
node 2:
RAX := rpl_calloc@()
node 3:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 4:
RAX := xalloc_die@()
node 5:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xcalloc -> xcalloc_3183 and xcalloc -> xcalloc_4429

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 92(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(6,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
23372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]])]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcalloc -> xcalloc_3183 and xcalloc -> xcalloc_4429 have been verified to do the same.

same_behavior for the nodes: .label_218 -> .label_218 and .label_218 -> .label_218

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_218 -> .label_218 and .label_218 -> .label_218 have been verified to do the same.

same_behavior for the nodes: xcalloc_3184 -> xcalloc_3184 and xcalloc_4430 -> xcalloc_4430

same_behavior checking these two SStates:

SA || RAX := rpl_calloc@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: xcalloc_3184 -> xcalloc_3184 and xcalloc_4431 -> xcalloc_4431

same_behavior checking these two SStates:

SA || RAX := rpl_calloc@()

SB || RAX := rpl_calloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_calloc" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_calloc" "") []
Value B:
E_app (F2 "rpl_calloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3184 -> xcalloc_3184 and xcalloc_4431 -> xcalloc_4431 have been verified to do the same.

same_behavior for the nodes: xcalloc_3185 -> xcalloc_3186 and xcalloc_4432 -> xcalloc_4433

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3185 -> xcalloc_3186 and xcalloc_4432 -> xcalloc_4433 have been verified to do the same.

same_behavior for the nodes: xcalloc_3187 -> xcalloc_3188 and xcalloc_4434 -> xcalloc_4435

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3187 -> xcalloc_3188 and xcalloc_4434 -> xcalloc_4435 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (34/60): "xzalloc"
--------
.dot code for CFG of text section xzalloc for Vanilla
diGraph xzalloc_Vanilla{
	xzalloc_0  [label="[.label_216,.label_216]"]
	xzalloc_1  [label="[xzalloc_3156,xzalloc_3157]"]
	xzalloc_2  [label="[.label_217,xzalloc_3161]"]
	xzalloc_3  [label="[xzalloc_3162,xzalloc_3162]"]
	xzalloc_4  [label="[xzalloc_3163,xzalloc_3167]"]
	xzalloc_5  [label="[xzalloc,xzalloc_3151]"]
	xzalloc_6  [label="[xzalloc_3152,xzalloc_3152]"]
	xzalloc_7  [label="[xzalloc_3153,xzalloc_3155]"]


	xzalloc_1 -> xzalloc_0 [label="ZF"];
	xzalloc_1 -> xzalloc_2 [label="!ZF"];
	xzalloc_2 -> xzalloc_3;
	xzalloc_3 -> xzalloc_4;

	xzalloc_5 -> xzalloc_6;
	xzalloc_6 -> xzalloc_7;
	xzalloc_7 -> xzalloc_2 [label="ZF"];
	xzalloc_7 -> xzalloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xzalloc for Randomized
diGraph xzalloc_Randomized{
	xzalloc_0  [label="[.label_217,.label_217]"]
	xzalloc_1  [label="[xzalloc_4412,xzalloc_4412]"]
	xzalloc_2  [label="[xzalloc_4391,xzalloc_4393]"]
	xzalloc_3  [label="[.label_216,xzalloc_4398]"]
	xzalloc_4  [label="[xzalloc_4399,xzalloc_4399]"]
	xzalloc_5  [label="[xzalloc_4400,xzalloc_4409]"]
	xzalloc_6  [label="[xzalloc,xzalloc_4385]"]
	xzalloc_7  [label="[xzalloc_4386,xzalloc_4386]"]
	xzalloc_8  [label="[xzalloc_4387,xzalloc_4390]"]

	xzalloc_0 -> xzalloc_1;

	xzalloc_2 -> xzalloc_0 [label="ZF"];
	xzalloc_2 -> xzalloc_3 [label="!ZF"];
	xzalloc_3 -> xzalloc_4;
	xzalloc_4 -> xzalloc_5;

	xzalloc_6 -> xzalloc_7;
	xzalloc_7 -> xzalloc_8;
	xzalloc_8 -> xzalloc_3 [label="ZF"];
	xzalloc_8 -> xzalloc_2 [label="!ZF"];
}
--------
Starting Node: 5

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 --ZF--> 2, 7 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xzalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: R14,Reg: R14), CF := TEST(Reg: R14,Reg: R14), SF := TEST(Reg: R14,Reg: R14), OF := TEST(Reg: R14,Reg: R14), PF := TEST(Reg: R14,Reg: R14)
node 2:
RDX := Reg: RBX, RDI := Reg: R14, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := memset@()
node 4:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 5:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 6:
RAX := malloc@()
node 7:
R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 6

Edges: 0 ----> 1, , 2 --ZF--> 0, 2 --!ZF--> 3, 3 ----> 4, 4 ----> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 3, 8 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "xzalloc"
node 0:
skip'
node 1:
RAX := xalloc_die@()
node 2:
ZF := TEST(Reg: R14,Reg: R14), CF := TEST(Reg: R14,Reg: R14), SF := TEST(Reg: R14,Reg: R14), OF := TEST(Reg: R14,Reg: R14), PF := TEST(Reg: R14,Reg: R14)
node 3:
RDX := Reg: RBX, RDI := Reg: R14, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 4:
RAX := memset@()
node 5:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 6:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 7:
RAX := malloc@()
node 8:
R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xzalloc -> xzalloc_3151 and xzalloc -> xzalloc_4385

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xzalloc -> xzalloc_3151 and xzalloc -> xzalloc_4385 have been verified to do the same.

same_behavior for the nodes: xzalloc_3152 -> xzalloc_3152 and xzalloc_4386 -> xzalloc_4386

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3152 -> xzalloc_3152 and xzalloc_4386 -> xzalloc_4386 have been verified to do the same.

same_behavior for the nodes: xzalloc_3153 -> xzalloc_3155 and xzalloc_4387 -> xzalloc_4390

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || R14 := Reg: RAX
SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3153 -> xzalloc_3155 and xzalloc_4387 -> xzalloc_4390 have been verified to do the same.

same_behavior for the nodes: .label_217 -> xzalloc_3161 and .label_216 -> xzalloc_4398

same_behavior checking these two SStates:

SA || RDX := Reg: RBX, RDI := Reg: R14, RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Reg: RBX, RDI := Reg: R14, RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R14),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R14),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_reg RBX),(RDI,E_reg R14),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_217 -> xzalloc_3161 and .label_216 -> xzalloc_4398 have been verified to do the same.

same_behavior for the nodes: xzalloc_3162 -> xzalloc_3162 and xzalloc_4399 -> xzalloc_4399

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3162 -> xzalloc_3162 and xzalloc_4399 -> xzalloc_4399 have been verified to do the same.

same_behavior for the nodes: xzalloc_3163 -> xzalloc_3167 and xzalloc_4400 -> xzalloc_4409

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_reg R14),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3163 -> xzalloc_3167 and xzalloc_4400 -> xzalloc_4409 have been verified to do the same.

same_behavior for the nodes: xzalloc_3156 -> xzalloc_3157 and xzalloc_4391 -> xzalloc_4393

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: R14,Reg: R14), CF := TEST(Reg: R14,Reg: R14), SF := TEST(Reg: R14,Reg: R14), OF := TEST(Reg: R14,Reg: R14), PF := TEST(Reg: R14,Reg: R14)

SB || ZF := TEST(Reg: R14,Reg: R14), CF := TEST(Reg: R14,Reg: R14), SF := TEST(Reg: R14,Reg: R14), OF := TEST(Reg: R14,Reg: R14), PF := TEST(Reg: R14,Reg: R14)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3156 -> xzalloc_3157 and xzalloc_4391 -> xzalloc_4393 have been verified to do the same.

same_behavior for the nodes: .label_216 -> .label_216 and .label_217 -> .label_217

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_216 -> .label_216 and x(13,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == Var: RSP0 && RBP == Var: RBP0)])
(15,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
zalloc_4412 -> xzalloc_4412

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_216 -> .label_216 and xzalloc_4412 -> xzalloc_4412 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (35/60): "x2realloc"
--------
.dot code for CFG of text section x2realloc for Vanilla
diGraph x2realloc_Vanilla{
	x2realloc_0  [label="[x2realloc_3116,x2realloc_3116]"]
	x2realloc_1  [label="[x2realloc_3117,x2realloc_3118]"]
	x2realloc_2  [label="[x2realloc_3110,x2realloc_3115]"]
	x2realloc_3  [label="[.label_215,.label_215]"]
	x2realloc_4  [label="[x2realloc_3107,x2realloc_3109]"]
	x2realloc_5  [label="[x2realloc_3131,x2realloc_3132]"]
	x2realloc_6  [label="[.label_214,x2realloc_3135]"]
	x2realloc_7  [label="[x2realloc_3125,x2realloc_3125]"]
	x2realloc_8  [label="[.label_212,.label_212]"]
	x2realloc_9  [label="[x2realloc_3128,x2realloc_3128]"]
	x2realloc_10  [label="[x2realloc_3129,x2realloc_3130]"]
	x2realloc_11  [label="[.label_211,.label_211]"]
	x2realloc_12  [label="[.label_213,x2realloc_3124]"]
	x2realloc_13  [label="[x2realloc,x2realloc_3106]"]

	x2realloc_0 -> x2realloc_1;
	x2realloc_1 -> x2realloc_6;
	x2realloc_2 -> x2realloc_8 [label="!ZF"];
	x2realloc_2 -> x2realloc_0 [label="ZF"];

	x2realloc_4 -> x2realloc_3 [label="!CF"];
	x2realloc_4 -> x2realloc_2 [label="CF"];
	x2realloc_5 -> x2realloc_11 [label="ZF"];
	x2realloc_5 -> x2realloc_6 [label="!ZF"];

	x2realloc_7 -> x2realloc_8;
	x2realloc_8 -> x2realloc_9;
	x2realloc_9 -> x2realloc_10;
	x2realloc_10 -> x2realloc_6 [label="ZF"];
	x2realloc_10 -> x2realloc_5 [label="!ZF"];

	x2realloc_12 -> x2realloc_11 [label="SF"];
	x2realloc_12 -> x2realloc_7 [label="!SF"];
	x2realloc_13 -> x2realloc_12 [label="ZF"];
	x2realloc_13 -> x2realloc_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section x2realloc for Randomized
diGraph x2realloc_Randomized{
	x2realloc_0  [label="[x2realloc_4337,x2realloc_4337]"]
	x2realloc_1  [label="[x2realloc_4338,x2realloc_4339]"]
	x2realloc_2  [label="[x2realloc_4330,x2realloc_4336]"]
	x2realloc_3  [label="[.label_214,.label_214]"]
	x2realloc_4  [label="[x2realloc_4371,x2realloc_4371]"]
	x2realloc_5  [label="[x2realloc_4326,x2realloc_4329]"]
	x2realloc_6  [label="[x2realloc_4357,x2realloc_4360]"]
	x2realloc_7  [label="[.label_212,x2realloc_4365]"]
	x2realloc_8  [label="[x2realloc_4348,x2realloc_4349]"]
	x2realloc_9  [label="[.label_215,.label_215]"]
	x2realloc_10  [label="[x2realloc_4352,x2realloc_4352]"]
	x2realloc_11  [label="[x2realloc_4353,x2realloc_4356]"]
	x2realloc_12  [label="[.label_213,.label_213]"]
	x2realloc_13  [label="[x2realloc_4368,x2realloc_4368]"]
	x2realloc_14  [label="[.label_211,x2realloc_4347]"]
	x2realloc_15  [label="[x2realloc,x2realloc_4325]"]

	x2realloc_0 -> x2realloc_1;
	x2realloc_1 -> x2realloc_7;
	x2realloc_2 -> x2realloc_9 [label="!ZF"];
	x2realloc_2 -> x2realloc_0 [label="ZF"];
	x2realloc_3 -> x2realloc_4;

	x2realloc_5 -> x2realloc_3 [label="!CF"];
	x2realloc_5 -> x2realloc_2 [label="CF"];
	x2realloc_6 -> x2realloc_12 [label="ZF"];
	x2realloc_6 -> x2realloc_7 [label="!ZF"];

	x2realloc_8 -> x2realloc_9;
	x2realloc_9 -> x2realloc_10;
	x2realloc_10 -> x2realloc_11;
	x2realloc_11 -> x2realloc_7 [label="ZF"];
	x2realloc_11 -> x2realloc_6 [label="!ZF"];
	x2realloc_12 -> x2realloc_13;

	x2realloc_14 -> x2realloc_12 [label="SF"];
	x2realloc_14 -> x2realloc_8 [label="!SF"];
	x2realloc_15 -> x2realloc_14 [label="ZF"];
	x2realloc_15 -> x2realloc_5 [label="!ZF"];
}
--------
Starting Node: 13

Edges: 0 ----> 1, 1 ----> 6, 2 --!ZF--> 8, 2 --ZF--> 0, , 4 --!CF--> 3, 4 --CF--> 2, 5 --ZF--> 11, 5 --!ZF--> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 6, 10 --!ZF--> 5, , 12 --SF--> 11, 12 --!SF--> 7, 13 --ZF--> 12, 13 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "x2realloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RBX := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
[Reg: RSI,8] := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
ZF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), CF := (SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX), SF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), OF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), PF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
node 3:
RAX := xalloc_die@()
node 4:
RCX := Value: 6148914691236517204
ZF := CMP(Reg: RAX,Value: 6148914691236517204), CF := CMP(Reg: RAX,Value: 6148914691236517204), SF := CMP(Reg: RAX,Value: 6148914691236517204), OF := CMP(Reg: RAX,Value: 6148914691236517204), PF := CMP(Reg: RAX,Value: 6148914691236517204)
node 5:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 7:
[Reg: RSI,8] := Reg: RBX
node 8:
RSI := Reg: RBX
node 9:
RAX := realloc@()
node 10:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 11:
RAX := xalloc_die@()
node 12:
RBX := (if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)
ZF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), CF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), SF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), OF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), PF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128))
node 13:
RAX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 15

Edges: 0 ----> 1, 1 ----> 7, 2 --!ZF--> 9, 2 --ZF--> 0, 3 ----> 4, , 5 --!CF--> 3, 5 --CF--> 2, 6 --ZF--> 12, 6 --!ZF--> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --ZF--> 7, 11 --!ZF--> 6, 12 ----> 13, , 14 --SF--> 12, 14 --!SF--> 8, 15 --ZF--> 14, 15 --!ZF--> 5

Symbolic Execution for Binary "Randomized":
Current text section: "x2realloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RBX := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
[Reg: RSI,8] := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
ZF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), CF := (SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX), SF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), OF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), PF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
node 3:
skip'
node 4:
RAX := xalloc_die@()
node 5:
RCX := Value: 6148914691236517204
ZF := CMP(Reg: RAX,Value: 6148914691236517204), CF := CMP(Reg: RAX,Value: 6148914691236517204), SF := CMP(Reg: RAX,Value: 6148914691236517204), OF := CMP(Reg: RAX,Value: 6148914691236517204), PF := CMP(Reg: RAX,Value: 6148914691236517204)
node 6:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 8:
[Reg: RSI,8] := Reg: RBX
node 9:
RSI := Reg: RBX
node 10:
RAX := realloc@()
node 11:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 12:
skip'
node 13:
RAX := xalloc_die@()
node 14:
RBX := (if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)
ZF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), CF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), SF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), OF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), PF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128))
node 15:
RAX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: x2realloc -> x2realloc_3106 and x2realloc -> x2realloc_4325

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: RSI,8]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [Reg: RSI,8]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_reg RSI) 8)]
Resulting values:
Value A:
E_deref (E_reg RSI) 8
Value B:
E_deref (E_reg RSI) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2realloc -> x2realloc_3106 and x2realloc -> x2realloc_4325 have been verified to do the same.

same_behavior for the nodes: .label_213 -> x2realloc_3124 and .label_211 -> x2realloc_4347

same_behavior checking these two SStates:

SA || RBX := (if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)
SA || ZF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), CF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), SF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), OF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), PF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128))

SB || RBX := (if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)
SB || ZF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), CF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), SF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), OF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128)), PF := TEST((if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128),(if (Reg: RAX != Value: 0) then Reg: RAX else Value: 128))

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_val 128 32))]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_val 128 32)
Value B:
E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_val 128 32)
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> x2realloc_3124 and .label_211 -> x2realloc_4347 have been verified to do the same.

same_behavior for the nodes: .label_211 -> .label_211 and .label_213 -> .label_213

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_211 -> .label_211 and x2realloc_4368 -> x2realloc_4368

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> .label_211 and x2realloc_4368 -> x2realloc_4368 have been verified to do the same.

same_behavior for the nodes: x2realloc_3125 -> x2realloc_3125 and x2realloc_4348 -> x2realloc_4349

same_behavior checking these two SStates:

SA || [Reg: RSI,8] := Reg: RBX

SB || [Reg: RSI,8] := Reg: RBX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RSI
E_reg RSI
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes x2realloc_3125 -> x2realloc_3125 and x2realloc_4348 -> x2realloc_4349 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_215 -> .label_215

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RSI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_215 -> .label_215 have been verified to do the same.

same_behavior for the nodes: x2realloc_3128 -> x2realloc_3128 and x2realloc_4352 -> x2realloc_4352

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "realloc" "") [])]
Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3128 -> x2realloc_3128 and x2realloc_4352 -> x2realloc_4352 have been verified to do the same.

same_behavior for the nodes: x2realloc_3129 -> x2realloc_3130 and x2realloc_4353 -> x2realloc_4356

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3129 -> x2realloc_3130 and x2realloc_4353 -> x2realloc_4356 have been verified to do the same.

same_behavior for the nodes: .label_214 -> x2realloc_3135 and .label_212 -> x2realloc_4365

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_214 -> x2realloc_3135 and .label_212 -> x2realloc_4365 have been verified to do the same.

same_behavior for the nodes: x2realloc_3131 -> x2realloc_3132 and x2real(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
loc_4357 -> x2realloc_4360

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3131 -> x2realloc_3132 and x2realloc_4357 -> x2realloc_4360 have been verified to do the same.

same_behavior for the nodes: x2realloc_3107 -> x2realloc_3109 and x2realloc_4326 -> x2realloc_4329

same_behavior checking these two SStates:

SA || RCX := Value: 6148914691236517204
SA || ZF := CMP(Reg: RAX,Value: 6148914691236517204), CF := CMP(Reg: RAX,Value: 6148914691236517204), SF := CMP(Reg: RAX,Value: 6148914691236517204), OF := CMP(Reg: RAX,Value: 6148914691236517204), PF := CMP(Reg: RAX,Value: 6148914691236517204)

SB || RCX := Value: 6148914691236517204
SB || ZF := CMP(Reg: RAX,Value: 6148914691236517204), CF := CMP(Reg: RAX,Value: 6148914691236517204), SF := CMP(Reg: RAX,Value: 6148914691236517204), OF := CMP(Reg: RAX,Value: 6148914691236517204), PF := CMP(Reg: RAX,Value: 6148914691236517204)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_val 6148914691236517204 64),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_val 6148914691236517204 64
Value B:
E_val 6148914691236517204 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3107 -> x2realloc_3109 and x2realloc_4326 -> x2realloc_4329 have been verified to do the same.

same_behavior for the nodes: .label_215 -> .label_215 and .label_214 -> .label_214

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_215 -> .label_215 and x2realloc_4371 -> x2realloc_4371

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_215 -> .label_215 and x2realloc_4371 -> x2realloc_4371 have been verified to do the same.

same_behavior for the nodes: x2realloc_3110 -> x2realloc_3115 and x2realloc_4330 -> x2realloc_4336

same_behavior checking these two SStates:

SA || RBX := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
SA || [Reg: RSI,8] := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
SA || ZF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), CF := (SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX), SF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), OF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), PF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)

SB || RBX := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
SB || [Reg: RSI,8] := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)
SB || ZF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), CF := (SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX), SF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), OF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1), PF := ((SHR(zextend(Reg: RAX,Value: 64),Value: 1) + Reg: RAX) + Value: 1)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RAX,E_val 64 (-1)],E_val 1 64],E_reg RAX],E_val 1 8])]
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RAX,E_val 64 (-1)],E_val 1 64],E_reg RAX],E_val 1 8]
Value B:
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RAX,E_val 64 (-1)],E_val 1 64],E_reg RAX],E_val 1 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RSI
E_reg RSI
(v1 := v2):
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RAX,E_val 64 (-1)],E_val 1 64],E_reg RAX],E_val 1 8]
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RAX,E_val 64 (-1)],E_val 1 64],E_reg RAX],E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes x2realloc_3110 -> x2realloc_3115 and x2realloc_4330 -> x2realloc_4336 have been verified to do the same.

same_behavior for the nodes: x2realloc_3116 -> x2realloc_3116 and x2realloc_4337 -> x2realloc_4337

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3116 -> x2realloc_3116 and x2realloc_4337 -> x2realloc_4337 have been verified to do the same.

same_behavior for the nodes: x2realloc_3117 -> x2realloc_3118 and x2realloc_4338 -> x2realloc_4339

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3117 -> x2realloc_3118 and x2realloc_4338 -> x2realloc_4339 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (36/60): "xcharalloc"
--------
.dot code for CFG of text section xcharalloc for Vanilla
diGraph xcharalloc_Vanilla{
	xcharalloc_0  [label="[.label_210,.label_210]"]
	xcharalloc_1  [label="[xcharalloc_3088,xcharalloc_3089]"]
	xcharalloc_2  [label="[.label_209,xcharalloc_3092]"]
	xcharalloc_3  [label="[xcharalloc,xcharalloc_3084]"]
	xcharalloc_4  [label="[xcharalloc_3085,xcharalloc_3085]"]
	xcharalloc_5  [label="[xcharalloc_3086,xcharalloc_3087]"]


	xcharalloc_1 -> xcharalloc_0 [label="ZF"];
	xcharalloc_1 -> xcharalloc_2 [label="!ZF"];

	xcharalloc_3 -> xcharalloc_4;
	xcharalloc_4 -> xcharalloc_5;
	xcharalloc_5 -> xcharalloc_2 [label="ZF"];
	xcharalloc_5 -> xcharalloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xcharalloc for Randomized
diGraph xcharalloc_Randomized{
	xcharalloc_0  [label="[.label_210,.label_210]"]
	xcharalloc_1  [label="[xcharalloc_4305,xcharalloc_4307]"]
	xcharalloc_2  [label="[.label_209,xcharalloc_4310]"]
	xcharalloc_3  [label="[xcharalloc,xcharalloc_4301]"]
	xcharalloc_4  [label="[xcharalloc_4302,xcharalloc_4302]"]
	xcharalloc_5  [label="[xcharalloc_4303,xcharalloc_4304]"]


	xcharalloc_1 -> xcharalloc_0 [label="ZF"];
	xcharalloc_1 -> xcharalloc_2 [label="!ZF"];

	xcharalloc_3 -> xcharalloc_4;
	xcharalloc_4 -> xcharalloc_5;
	xcharalloc_5 -> xcharalloc_2 [label="ZF"];
	xcharalloc_5 -> xcharalloc_1 [label="!ZF"];
}
--------
Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xcharalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xcharalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xcharalloc -> xcharalloc_3084 and xcharalloc -> xcharalloc_4301

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcharalloc -> xcharalloc_3084 and xcharalloc -> xcharalloc_4301 have been verified to do the same.

same_behavior for the nodes: xcharalloc_3085 -> xcharalloc_3085 and xcharalloc_4302 -> xcharalloc_4302

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcharalloc_3085 -> xcharalloc_3085 and xcharalloc_4302 -> xcharalloc_4302 have been verified to do the same.

same_behavior for the nodes: xcharalloc_3086 -> xcharalloc_3087 and xcharalloc_4303 -> xcharalloc_4304

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcharalloc_3086 -> xcharalloc_3087 and xcharalloc_4303 -> xcharalloc_4304 have been verified to do the same.

same_behavior for the nodes: .label_209 -> xcharalloc_3092 and .label_209 -> xcharalloc_4310

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> xcharalloc_3092 and .label_209 -> xcharalloc_4310 have been verified to do the same.

same_behavior for the nodes: xcharalloc_3088 -> xcharalloc_3089 and xcharalloc_4305 -> xcharalloc_4307

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcharalloc_3088 -> xcharalloc_3089 and xcharalloc_4305 -> xcharalloc_4307 have been verified to do the same.

same_behavior for the nodes: .label_210 -> .label_210 and .label_210 -> .label_210

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> .label_210 and .label_210 -> .label_210 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (37/60): "x2nrealloc"
--------
.dot code for CFG of text section x2nrealloc for Vanilla
diGraph x2nrealloc_Vanilla{
	x2nrealloc_0  [label="[x2nrealloc_3031,x2nrealloc_3034]"]
	x2nrealloc_1  [label="[x2nrealloc_3026,x2nrealloc_3030]"]
	x2nrealloc_2  [label="[x2nrealloc_3038,x2nrealloc_3043]"]
	x2nrealloc_3  [label="[x2nrealloc_3057,x2nrealloc_3057]"]
	x2nrealloc_4  [label="[x2nrealloc_3058,x2nrealloc_3060]"]
	x2nrealloc_5  [label="[x2nrealloc_3055,x2nrealloc_3056]"]
	x2nrealloc_6  [label="[.label_206,.label_206]"]
	x2nrealloc_7  [label="[x2nrealloc_3066,x2nrealloc_3067]"]
	x2nrealloc_8  [label="[.label_204,x2nrealloc_3070]"]
	x2nrealloc_9  [label="[.label_203,.label_203]"]
	x2nrealloc_10  [label="[x2nrealloc_3063,x2nrealloc_3063]"]
	x2nrealloc_11  [label="[x2nrealloc_3064,x2nrealloc_3065]"]
	x2nrealloc_12  [label="[.label_202,x2nrealloc_3054]"]
	x2nrealloc_13  [label="[.label_207,.label_207]"]
	x2nrealloc_14  [label="[.label_208,x2nrealloc_3049]"]
	x2nrealloc_15  [label="[.label_205,x2nrealloc_3037]"]
	x2nrealloc_16  [label="[x2nrealloc,x2nrealloc_3025]"]

	x2nrealloc_0 -> x2nrealloc_12;
	x2nrealloc_1 -> x2nrealloc_6 [label="CF || ZF"];
	x2nrealloc_1 -> x2nrealloc_0 [label="!CF && !ZF"];
	x2nrealloc_2 -> x2nrealloc_14;
	x2nrealloc_3 -> x2nrealloc_4;

	x2nrealloc_5 -> x2nrealloc_9 [label="!ZF"];
	x2nrealloc_5 -> x2nrealloc_3 [label="ZF"];

	x2nrealloc_7 -> x2nrealloc_6 [label="ZF"];
	x2nrealloc_7 -> x2nrealloc_8 [label="!ZF"];

	x2nrealloc_9 -> x2nrealloc_10;
	x2nrealloc_10 -> x2nrealloc_11;
	x2nrealloc_11 -> x2nrealloc_8 [label="ZF"];
	x2nrealloc_11 -> x2nrealloc_7 [label="!ZF"];
	x2nrealloc_12 -> x2nrealloc_9 [label="ZF"];
	x2nrealloc_12 -> x2nrealloc_5 [label="!ZF"];

	x2nrealloc_14 -> x2nrealloc_13 [label="CF"];
	x2nrealloc_14 -> x2nrealloc_12 [label="!CF"];
	x2nrealloc_15 -> x2nrealloc_14 [label="!ZF"];
	x2nrealloc_15 -> x2nrealloc_2 [label="ZF"];
	x2nrealloc_16 -> x2nrealloc_15 [label="ZF"];
	x2nrealloc_16 -> x2nrealloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section x2nrealloc for Randomized
diGraph x2nrealloc_Randomized{
	x2nrealloc_0  [label="[x2nrealloc_4229,x2nrealloc_4233]"]
	x2nrealloc_1  [label="[x2nrealloc_4222,x2nrealloc_4228]"]
	x2nrealloc_2  [label="[x2nrealloc_4238,x2nrealloc_4245]"]
	x2nrealloc_3  [label="[x2nrealloc_4265,x2nrealloc_4265]"]
	x2nrealloc_4  [label="[x2nrealloc_4266,x2nrealloc_4266]"]
	x2nrealloc_5  [label="[x2nrealloc_4267,x2nrealloc_4272]"]
	x2nrealloc_6  [label="[x2nrealloc_4262,x2nrealloc_4264]"]
	x2nrealloc_7  [label="[.label_206,.label_206]"]
	x2nrealloc_8  [label="[x2nrealloc_4279,x2nrealloc_4281]"]
	x2nrealloc_9  [label="[.label_207,x2nrealloc_4286]"]
	x2nrealloc_10  [label="[.label_204,x2nrealloc_4275]"]
	x2nrealloc_11  [label="[x2nrealloc_4276,x2nrealloc_4276]"]
	x2nrealloc_12  [label="[x2nrealloc_4277,x2nrealloc_4278]"]
	x2nrealloc_13  [label="[.label_205,x2nrealloc_4261]"]
	x2nrealloc_14  [label="[.label_203,.label_203]"]
	x2nrealloc_15  [label="[.label_208,x2nrealloc_4252]"]
	x2nrealloc_16  [label="[.label_202,x2nrealloc_4237]"]
	x2nrealloc_17  [label="[x2nrealloc,x2nrealloc_4221]"]

	x2nrealloc_0 -> x2nrealloc_13;
	x2nrealloc_1 -> x2nrealloc_7 [label="CF || ZF"];
	x2nrealloc_1 -> x2nrealloc_0 [label="!CF && !ZF"];
	x2nrealloc_2 -> x2nrealloc_15;
	x2nrealloc_3 -> x2nrealloc_4;
	x2nrealloc_4 -> x2nrealloc_5;

	x2nrealloc_6 -> x2nrealloc_10 [label="!ZF"];
	x2nrealloc_6 -> x2nrealloc_3 [label="ZF"];

	x2nrealloc_8 -> x2nrealloc_7 [label="ZF"];
	x2nrealloc_8 -> x2nrealloc_9 [label="!ZF"];

	x2nrealloc_10 -> x2nrealloc_11;
	x2nrealloc_11 -> x2nrealloc_12;
	x2nrealloc_12 -> x2nrealloc_9 [label="ZF"];
	x2nrealloc_12 -> x2nrealloc_8 [label="!ZF"];
	x2nrealloc_13 -> x2nrealloc_10 [label="ZF"];
	x2nrealloc_13 -> x2nrealloc_6 [label="!ZF"](16,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == Var: RSP0 && RBP == Var: RBP0)])
(17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0)])
;

	x2nrealloc_15 -> x2nrealloc_14 [label="CF"];
	x2nrealloc_15 -> x2nrealloc_13 [label="!CF"];
	x2nrealloc_16 -> x2nrealloc_15 [label="!ZF"];
	x2nrealloc_16 -> x2nrealloc_2 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_16 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_1 [label="!ZF"];
}
--------
Starting Node: 16

Edges: 0 ----> 12, 1 --CF || ZF--> 6, 1 --!CF && !ZF--> 0, 2 ----> 14, 3 ----> 4, , 5 --!ZF--> 9, 5 --ZF--> 3, , 7 --ZF--> 6, 7 --!ZF--> 8, , 9 ----> 10, 10 ----> 11, 11 --ZF--> 8, 11 --!ZF--> 7, 12 --ZF--> 9, 12 --!ZF--> 5, , 14 --CF--> 13, 14 --!CF--> 12, 15 --!ZF--> 14, 15 --ZF--> 2, 16 --ZF--> 15, 16 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "x2nrealloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)
node 2:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), CF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), SF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), OF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), PF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0)))
node 3:
RAX := free@()
node 4:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 6:
RAX := xalloc_die@()
node 7:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 8:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 9:
RSI := Reg: RBX
node 10:
RAX := realloc@()
node 11:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 12:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RCX))
[Reg: RSI,8] := Reg: RCX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 13:
RAX := xalloc_die@()
node 14:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)
node 15:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 16:
RBX := Reg: RDX, RCX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 17

Edges: 0 ----> 13, 1 --CF || ZF--> 7, 1 --!CF && !ZF--> 0, 2 ----> 15, 3 ----> 4, 4 ----> 5, , 6 --!ZF--> 10, 6 --ZF--> 3, , 8 --ZF--> 7, 8 --!ZF--> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 9, 12 --!ZF--> 8, 13 --ZF--> 10, 13 --!ZF--> 6, , 15 --CF--> 14, 15 --!CF--> 13, 16 --!ZF--> 15, 16 --ZF--> 2, 17 --ZF--> 16, 17 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "x2nrealloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)
node 2:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), CF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), SF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), OF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), PF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0)))
node 3:
skip'
node 4:
RAX := free@()
node 5:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RSI := Reg: RBX
node 11:
RAX := realloc@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RCX))
[Reg: RSI,8] := Reg: RCX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 14:
RAX := xalloc_die@()
node 15:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RBX,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)
node 16:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 17:
RBX := Reg: RDX, RCX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: x2nrealloc -> x2nrealloc_3025 and x2nrealloc -> x2nrealloc_4221

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, RCX := Dereference: [Reg: RSI,8]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RDX, RCX := Dereference: [Reg: RSI,8]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RCX,E_deref (E_reg RSI) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDX),(RCX,E_deref (E_reg RSI) 8)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_deref (E_reg RSI) 8
Value B:
E_deref (E_reg RSI) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2nrealloc -> x2nrealloc_3025 and x2nrealloc -> x2nrealloc_4221 have been verified to do the same.

same_behavior for the nodes: .label_205 -> x2nrealloc_3037 and .label_202 -> x2nrealloc_4237

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

SB || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> x2nrealloc_3037 and .label_202 -> x2nrealloc_4237 have been verified to do the same.

same_behavior for the nodes: .label_208 -> x2nrealloc_3049 and .label_208 -> x2nrealloc_4252

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RBX,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RBX,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]])]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> x2nrealloc_3049 and .label_208 -> x2nrealloc_4252 have been verified to do the same.

same_behavior for the nodes: .label_207 -> .label_207 and .label_203 -> .label_203

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> .label_207 and .label_203 -> .label_203 have been verified to do the same.

same_behavior for the nodes: .label_202 -> x2nrealloc_3054 and .label_205 -> x2nrealloc_4261

same_behavior checking these two SStates:

SA || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RCX))
SA || [Reg: RSI,8] := Reg: RCX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RCX))
SB || [Reg: RSI,8] := Reg: RCX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RCX]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RCX]]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RSI
E_reg RSI
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_202 -> x2nrealloc_3054 and .label_205 -> x2nrealloc_4261 have been verified to do the same.

same_behavior for the nodes: .label_203 -> .label_203 and .label_204 -> x2nrealloc_4275

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RSI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_203 -> .label_203 and .label_204 -> x2nrealloc_4275 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3063 -> x2nrealloc_3063 and x2nrealloc_4276 -> x2nrealloc_4276

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "realloc" "") [])]
Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3063 -> x2nrealloc_3063 and x2nrealloc_4276 -> x2nrealloc_4276 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3064 -> x2nrealloc_3065 and x2nrealloc_4277 -> x2nrealloc_4278

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3064 -> x2nrealloc_3065 and x2nrealloc_4277 -> x2nrealloc_4278 have been verified to do the same.

same_behavior for the nodes: .label_204 -> x2nrealloc_3070 and .label_207 -> x2nrealloc_4286

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_204 -> x2nrealloc_3070 and .label_207 -> x2nrealloc_4286 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3066 -> x2nrealloc_3067 and x2nrealloc_4279 -> x2nrealloc_4281

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3066 -> x2nrealloc_3067 and x2nrealloc_4279 -> x2nrealloc_4281 have been verified to do the same.

same_behavior for the nodes: .label_206 -> .label_206 and .label_206 -> .label_206

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> .label_206 and .label_206 -> .label_206 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3055 -> x2nrealloc_3056 and x2nrealloc_4262 -> x2nrealloc_4264

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3055 -> x2nrealloc_3056 and x2nrealloc_4262 -> x2nrealloc_4264 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3057 -> x2nrealloc_3057 and x2nrealloc_4265 -> x2nrealloc_4265

same_behavior checking these two SStates:

SA || RAX := free@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: x2nrealloc_3057 -> x2nrealloc_3057 and x2nrealloc_4266 -> x2nrealloc_4266

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3057 -> x2nrealloc_3057 and x2nrealloc_4266 -> x2nrealloc_4266 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3058 -> x2nrealloc_3060 and x2nrealloc_4267 -> x2nrealloc_4272

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3058 -> x2nrealloc_3060 and x2nrealloc_4267 -> x2nrealloc_4272 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3038 -> x2nrealloc_3043 and x2nrealloc_4238 -> x2nrealloc_4245

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: RBX,Value: 64))
SA || ZF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), CF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), SF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), OF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), PF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0)))

SB || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)), RCX := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: RBX,Value: 64))
SB || ZF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), CF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), SF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), OF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0))), PF := (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) + (Value: 0 + (if (DIV(zextend(Value: 128,Value: 128),zextend(Reg: RBX,Value: 64)) < Value: 1) then Value: 1 else Value: 0)))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RCX,E_app (Op ADD) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_app (Op ADD) [E_val 0 64,E_ite (E_app (F <) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_val 1 64]) (E_val 1 64) (E_val 0 64)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RCX,E_app (Op ADD) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_app (Op ADD) [E_val 0 64,E_ite (E_app (F <) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_val 1 64]) (E_val 1 64) (E_val 0 64)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RCX,E_app (Op ADD) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_app (Op ADD) [E_val 0 64,E_ite (E_app (F <) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_val 1 64]) (E_val 1 64) (E_val 0 64)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]])]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_app (Op ADD) [E_val 0 64,E_ite (E_app (F <) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_val 1 64]) (E_val 1 64) (E_val 0 64)]]
Value B:
E_app (Op ADD) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_app (Op ADD) [E_val 0 64,E_ite (E_app (F <) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]],E_val 1 64]) (E_val 1 64) (E_val 0 64)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3038 -> x2nrealloc_3043 and x2nrealloc_4238 -> x2nrealloc_4245 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3026 -> x2nrealloc_3030 and x2nrealloc_4222 -> x2nrealloc_4228

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: RBX,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: RBX,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: RBX,Value: 64)),Reg: RCX)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg RBX,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3026 -> x2nrealloc_3030 and x2nrealloc_4222 -> x2nrealloc_4228 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3031 -> x2nrealloc_3034 and x2nrealloc_4229 -> x2nrealloc_4233

same_behavior checking these two SStates:

SA || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

SB || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]),(RCX,E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]),(RCX,E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Value B:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_ap(9,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
(11,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
p (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3031 -> x2nrealloc_3034 and x2nrealloc_4229 -> x2nrealloc_4233 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (38/60): "xrealloc"
--------
.dot code for CFG of text section xrealloc for Vanilla
diGraph xrealloc_Vanilla{
	xrealloc_0  [label="[xrealloc_2998,xrealloc_2998]"]
	xrealloc_1  [label="[xrealloc_2999,xrealloc_3001]"]
	xrealloc_2  [label="[xrealloc_2996,xrealloc_2997]"]
	xrealloc_3  [label="[.label_200,.label_200]"]
	xrealloc_4  [label="[xrealloc_3007,xrealloc_3008]"]
	xrealloc_5  [label="[.label_201,xrealloc_3011]"]
	xrealloc_6  [label="[.label_199,.label_199]"]
	xrealloc_7  [label="[xrealloc_3004,xrealloc_3004]"]
	xrealloc_8  [label="[xrealloc_3005,xrealloc_3006]"]
	xrealloc_9  [label="[xrealloc,xrealloc_2995]"]

	xrealloc_0 -> xrealloc_1;

	xrealloc_2 -> xrealloc_6 [label="!ZF"];
	xrealloc_2 -> xrealloc_0 [label="ZF"];

	xrealloc_4 -> xrealloc_3 [label="ZF"];
	xrealloc_4 -> xrealloc_5 [label="!ZF"];

	xrealloc_6 -> xrealloc_7;
	xrealloc_7 -> xrealloc_8;
	xrealloc_8 -> xrealloc_5 [label="ZF"];
	xrealloc_8 -> xrealloc_4 [label="!ZF"];
	xrealloc_9 -> xrealloc_6 [label="ZF"];
	xrealloc_9 -> xrealloc_2 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xrealloc for Randomized
diGraph xrealloc_Randomized{
	xrealloc_0  [label="[xrealloc_4184,xrealloc_4184]"]
	xrealloc_1  [label="[xrealloc_4185,xrealloc_4185]"]
	xrealloc_2  [label="[xrealloc_4186,xrealloc_4190]"]
	xrealloc_3  [label="[xrealloc_4180,xrealloc_4183]"]
	xrealloc_4  [label="[.label_201,.label_201]"]
	xrealloc_5  [label="[xrealloc_4206,xrealloc_4206]"]
	xrealloc_6  [label="[xrealloc_4197,xrealloc_4199]"]
	xrealloc_7  [label="[.label_200,xrealloc_4203]"]
	xrealloc_8  [label="[.label_199,xrealloc_4193]"]
	xrealloc_9  [label="[xrealloc_4194,xrealloc_4194]"]
	xrealloc_10  [label="[xrealloc_4195,xrealloc_4196]"]
	xrealloc_11  [label="[xrealloc,xrealloc_4179]"]

	xrealloc_0 -> xrealloc_1;
	xrealloc_1 -> xrealloc_2;

	xrealloc_3 -> xrealloc_8 [label="!ZF"];
	xrealloc_3 -> xrealloc_0 [label="ZF"];
	xrealloc_4 -> xrealloc_5;

	xrealloc_6 -> xrealloc_4 [label="ZF"];
	xrealloc_6 -> xrealloc_7 [label="!ZF"];

	xrealloc_8 -> xrealloc_9;
	xrealloc_9 -> xrealloc_10;
	xrealloc_10 -> xrealloc_7 [label="ZF"];
	xrealloc_10 -> xrealloc_6 [label="!ZF"];
	xrealloc_11 -> xrealloc_8 [label="ZF"];
	xrealloc_11 -> xrealloc_3 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, , 2 --!ZF--> 6, 2 --ZF--> 0, , 4 --ZF--> 3, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "xrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xalloc_die@()
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 11

Edges: 0 ----> 1, 1 ----> 2, , 3 --!ZF--> 8, 3 --ZF--> 0, 4 ----> 5, , 6 --ZF--> 4, 6 --!ZF--> 7, , 8 ----> 9, 9 ----> 10, 10 --ZF--> 7, 10 --!ZF--> 6, 11 --ZF--> 8, 11 --!ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "xrealloc"
node 0:
skip'
node 1:
RAX := free@()
node 2:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 4:
skip'
node 5:
RAX := xalloc_die@()
node 6:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 8:
RSI := Reg: RBX
node 9:
RAX := realloc@()
node 10:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 11:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: xrealloc -> xrealloc_2995 and xrealloc -> xrealloc_4179

same_behavior checking these two SStates:

SA || RBX := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RSI)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xrealloc -> xrealloc_2995 and xrealloc -> xrealloc_4179 have been verified to do the same.

same_behavior for the nodes: .label_199 -> .label_199 and .label_199 -> xrealloc_4193

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_199 -> .label_199 and .label_199 -> xrealloc_4193 have been verified to do the same.

same_behavior for the nodes: xrealloc_3004 -> xrealloc_3004 and xrealloc_4194 -> xrealloc_4194

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "realloc" "") [])]
Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3004 -> xrealloc_3004 and xrealloc_4194 -> xrealloc_4194 have been verified to do the same.

same_behavior for the nodes: xrealloc_3005 -> xrealloc_3006 and xrealloc_4195 -> xrealloc_4196

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3005 -> xrealloc_3006 and xrealloc_4195 -> xrealloc_4196 have been verified to do the same.

same_behavior for the nodes: .label_201 -> xrealloc_3011 and .label_200 -> xrealloc_4203

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64(10,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == Var: RSP0 && RBP == Var: RBP0)])
,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_201 -> xrealloc_3011 and .label_200 -> xrealloc_4203 have been verified to do the same.

same_behavior for the nodes: xrealloc_3007 -> xrealloc_3008 and xrealloc_4197 -> xrealloc_4199

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3007 -> xrealloc_3008 and xrealloc_4197 -> xrealloc_4199 have been verified to do the same.

same_behavior for the nodes: .label_200 -> .label_200 and .label_201 -> .label_201

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: .label_200 -> .label_200 and xrealloc_4206 -> xrealloc_4206

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_200 -> .label_200 and xrealloc_4206 -> xrealloc_4206 have been verified to do the same.

same_behavior for the nodes: xrealloc_2996 -> xrealloc_2997 and xrealloc_4180 -> xrealloc_4183

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_2996 -> xrealloc_2997 and xrealloc_4180 -> xrealloc_4183 have been verified to do the same.

same_behavior for the nodes: xrealloc_2998 -> xrealloc_2998 and xrealloc_4184 -> xrealloc_4184

same_behavior checking these two SStates:

SA || RAX := free@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: xrealloc_2998 -> xrealloc_2998 and xrealloc_4185 -> xrealloc_4185

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_2998 -> xrealloc_2998 and xrealloc_4185 -> xrealloc_4185 have been verified to do the same.

same_behavior for the nodes: xrealloc_2999 -> xrealloc_3001 and xrealloc_4186 -> xrealloc_4190

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_2999 -> xrealloc_3001 and xrealloc_4186 -> xrealloc_4190 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (39/60): "xnrealloc"
--------
.dot code for CFG of text section xnrealloc for Vanilla
diGraph xnrealloc_Vanilla{
	xnrealloc_0  [label="[xnrealloc_2968,xnrealloc_2968]"]
	xnrealloc_1  [label="[xnrealloc_2969,xnrealloc_2971]"]
	xnrealloc_2  [label="[xnrealloc_2966,xnrealloc_2967]"]
	xnrealloc_3  [label="[xnrealloc_2977,xnrealloc_2978]"]
	xnrealloc_4  [label="[.label_198,xnrealloc_2981]"]
	xnrealloc_5  [label="[.label_197,.label_197]"]
	xnrealloc_6  [label="[xnrealloc_2974,xnrealloc_2974]"]
	xnrealloc_7  [label="[xnrealloc_2975,xnrealloc_2976]"]
	xnrealloc_8  [label="[xnrealloc_2963,xnrealloc_2965]"]
	xnrealloc_9  [label="[.label_196,.label_196]"]
	xnrealloc_10  [label="[xnrealloc,xnrealloc_2962]"]

	xnrealloc_0 -> xnrealloc_1;

	xnrealloc_2 -> xnrealloc_5 [label="!ZF"];
	xnrealloc_2 -> xnrealloc_0 [label="ZF"];
	xnrealloc_3 -> xnrealloc_9 [label="ZF"];
	xnrealloc_3 -> xnrealloc_4 [label="!ZF"];

	xnrealloc_5 -> xnrealloc_6;
	xnrealloc_6 -> xnrealloc_7;
	xnrealloc_7 -> xnrealloc_4 [label="ZF"];
	xnrealloc_7 -> xnrealloc_3 [label="!ZF"];
	xnrealloc_8 -> xnrealloc_5 [label="ZF"];
	xnrealloc_8 -> xnrealloc_2 [label="!ZF"];

	xnrealloc_10 -> xnrealloc_9 [label="CF"];
	xnrealloc_10 -> xnrealloc_8 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xnrealloc for Randomized
diGraph xnrealloc_Randomized{
	xnrealloc_0  [label="[xnrealloc_4141,xnrealloc_4141]"]
	xnrealloc_1  [label="[xnrealloc_4142,xnrealloc_4142]"]
	xnrealloc_2  [label="[xnrealloc_4143,xnrealloc_4148]"]
	xnrealloc_3  [label="[xnrealloc_4138,xnrealloc_4140]"]
	xnrealloc_4  [label="[xnrealloc_4158,xnrealloc_4159]"]
	xnrealloc_5  [label="[.label_198,xnrealloc_4163]"]
	xnrealloc_6  [label="[.label_196,xnrealloc_4152]"]
	xnrealloc_7  [label="[xnrealloc_4153,xnrealloc_4153]"]
	xnrealloc_8  [label="[xnrealloc_4154,xnrealloc_4157]"]
	xnrealloc_9  [label="[xnrealloc_4133,xnrealloc_4137]"]
	xnrealloc_10  [label="[.label_197,.label_197]"]
	xnrealloc_11  [label="[xnrealloc_4166,xnrealloc_4166]"]
	xnrealloc_12  [label="[xnrealloc,xnrealloc_4132]"]

	xnrealloc_0 -> xnrealloc_1;
	xnrealloc_1 -> xnrealloc_2;

	xnrealloc_3 -> xnrealloc_6 [label="!ZF"];
	xnrealloc_3 -> xnrealloc_0 [label="ZF"];
	xnrealloc_4 -> xnrealloc_10 [label="ZF"];
	xnrealloc_4 -> xnrealloc_5 [label="!ZF"];

	xnrealloc_6 -> xnrealloc_7;
	xnrealloc_7 -> xnrealloc_8;
	xnrealloc_8 -> xnrealloc_5 [label="ZF"];
	xnrealloc_8 -> xnrealloc_4 [label="!ZF"];
	xnrealloc_9 -> xnrealloc_6 [label="ZF"];
	xnrealloc_9 -> xnrealloc_3 [label="!ZF"];
	xnrealloc_10 -> xnrealloc_11;

	xnrealloc_12 -> xnrealloc_10 [label="CF"];
	xnrealloc_12 -> xnrealloc_9 [label="!CF"];
}
--------
Starting Node: 10

Edges: 0 ----> 1, , 2 --!ZF--> 5, 2 --ZF--> 0, 3 --ZF--> 9, 3 --!ZF--> 4, , 5 ----> 6, 6 ----> 7, 7 --ZF--> 4, 7 --!ZF--> 3, 8 --ZF--> 5, 8 --!ZF--> 2, , 10 --CF--> 9, 10 --!CF--> 8

Symbolic Execution for Binary "Vanilla":
Current text section: "xnrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 5:
RSI := Reg: RBX
node 6:
RAX := realloc@()
node 7:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: (12,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 8:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RSI))
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 9:
RAX := xalloc_die@()
node 10:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RBX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, , 3 --!ZF--> 6, 3 --ZF--> 0, 4 --ZF--> 10, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 3, 10 ----> 11, , 12 --CF--> 10, 12 --!CF--> 9

Symbolic Execution for Binary "Randomized":
Current text section: "xnrealloc"
node 0:
skip'
node 1:
RAX := free@()
node 2:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RSI))
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 10:
skip'
node 11:
RAX := xalloc_die@()
node 12:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RBX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

same_behavior for the nodes: xnrealloc -> xnrealloc_2962 and xnrealloc -> xnrealloc_4132

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RBX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RBX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RBX,E_reg RDX),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RBX,E_reg RDX),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RBX,E_reg RDX),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnrealloc -> xnrealloc_2962 and xnrealloc -> xnrealloc_4132 have been verified to do the same.

same_behavior for the nodes: .label_196 -> .label_196 and .label_197 -> .label_197

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_196 -> .label_196 and xnrealloc_4166 -> xnrealloc_4166

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_196 -> .label_196 and xnrealloc_4166 -> xnrealloc_4166 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2963 -> xnrealloc_2965 and xnrealloc_4133 -> xnrealloc_4137

same_behavior checking these two SStates:

SA || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RSI))
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RSI))
SB || ZF := TEST(Reg: RDI,Reg: RD(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
I), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RSI]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RSI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RSI]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2963 -> xnrealloc_2965 and xnrealloc_4133 -> xnrealloc_4137 have been verified to do the same.

same_behavior for the nodes: .label_197 -> .label_197 and .label_196 -> xnrealloc_4152

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_197 -> .label_197 and .label_196 -> xnrealloc_4152 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2974 -> xnrealloc_2974 and xnrealloc_4153 -> xnrealloc_4153

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "realloc" "") [])]
Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2974 -> xnrealloc_2974 and xnrealloc_4153 -> xnrealloc_4153 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2975 -> xnrealloc_2976 and xnrealloc_4154 -> xnrealloc_4157

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2975 -> xnrealloc_2976 and xnrealloc_4154 -> xnrealloc_4157 have been verified to do the same.

same_behavior for the nodes: .label_198 -> xnrealloc_2981 and .label_198 -> xnrealloc_4163

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_198 -> xnrealloc_2981 and .label_198 -> xnrealloc_4163 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2977 -> xnrealloc_2978 and xnrealloc_4158 -> xnrealloc_4159

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2977 -> xnrealloc_2978 and xnrealloc_4158 -> xnrealloc_4159 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2966 -> xnrealloc_2967 and xnrealloc_4138 -> xnrealloc_4140

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2966 -> xnrealloc_2967 and xnrealloc_4138 -> xnrealloc_4140 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2968 -> xnrealloc_2968 and xnrealloc_4141 -> xnrealloc_4141

same_behavior checking these two SStates:

SA || RAX := free@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: xnrealloc_2968 -> xnrealloc_2968 and xnrealloc_4142 -> xnrealloc_4142

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2968 -> xnrealloc_2968 and xnrealloc_4142 -> xnrealloc_4142 have been verified to do the same.

same_behavior for the nodes: xnrealloc_2969 -> xnrealloc_2971 and xnrealloc_4143 -> xnrealloc_4148

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_2969 -> xnrealloc_2971 and xnrealloc_4143 -> xnrealloc_4148 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (40/60): "xmalloc"
--------
.dot code for CFG of text section xmalloc for Vanilla
diGraph xmalloc_Vanilla{
	xmalloc_0  [label="[.label_195,.label_195]"]
	xmalloc_1  [label="[xmalloc_2941,xmalloc_2942]"]
	xmalloc_2  [label="[.label_194,xmalloc_2945]"]
	xmalloc_3  [label="[xmalloc,xmalloc_2937]"]
	xmalloc_4  [label="[xmalloc_2938,xmalloc_2938]"]
	xmalloc_5  [label="[xmalloc_2939,xmalloc_2940]"]


	xmalloc_1 -> xmalloc_0 [label="ZF"];
	xmalloc_1 -> xmalloc_2 [label="!ZF"];

	xmalloc_3 -> xmalloc_4;
	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_2 [label="ZF"];
	xmalloc_5 -> xmalloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xmalloc for Randomized
diGraph xmalloc_Randomized{
	xmalloc_0  [label="[.label_195,.label_195]"]
	xmalloc_1  [label="[xmalloc_4103,xmalloc_4105]"]
	xmalloc_2  [label="[.label_194,xmalloc_4110]"]
	xmalloc_3  [label="[xmalloc,xmalloc_4098]"]
	xmalloc_4  [label="[xmalloc_4099,xmalloc_4099]"]
	xmalloc_5  [label="[xmalloc_4100,xmalloc_4102]"]


	xmalloc_1 -> xmalloc_0 [label="ZF"];
	xmalloc_1 -> xmalloc_2 [label="!ZF"];

	xmalloc_3 -> xmalloc_4;
	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_2 [label="ZF"];
	xmalloc_5 -> xmalloc_1 [label="!ZF"];
}
--------
Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 3

Edges: , 1 --Z(6,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0)])
(6,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0)])
F--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xmalloc -> xmalloc_2937 and xmalloc -> xmalloc_4098

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmalloc -> xmalloc_2937 and xmalloc -> xmalloc_4098 have been verified to do the same.

same_behavior for the nodes: xmalloc_2938 -> xmalloc_2938 and xmalloc_4099 -> xmalloc_4099

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_2938 -> xmalloc_2938 and xmalloc_4099 -> xmalloc_4099 have been verified to do the same.

same_behavior for the nodes: xmalloc_2939 -> xmalloc_2940 and xmalloc_4100 -> xmalloc_4102

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_2939 -> xmalloc_2940 and xmalloc_4100 -> xmalloc_4102 have been verified to do the same.

same_behavior for the nodes: .label_194 -> xmalloc_2945 and .label_194 -> xmalloc_4110

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_194 -> xmalloc_2945 and .label_194 -> xmalloc_4110 have been verified to do the same.

same_behavior for the nodes: xmalloc_2941 -> xmalloc_2942 and xmalloc_4103 -> xmalloc_4105

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_2941 -> xmalloc_2942 and xmalloc_4103 -> xmalloc_4105 have been verified to do the same.

same_behavior for the nodes: .label_195 -> .label_195 and .label_195 -> .label_195

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_195 -> .label_195 and .label_195 -> .label_195 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (41/60): "xnmalloc"
--------
.dot code for CFG of text section xnmalloc for Vanilla
diGraph xnmalloc_Vanilla{
	xnmalloc_0  [label="[xnmalloc_2921,xnmalloc_2922]"]
	xnmalloc_1  [label="[.label_193,xnmalloc_2925]"]
	xnmalloc_2  [label="[xnmalloc_2916,xnmalloc_2917]"]
	xnmalloc_3  [label="[xnmalloc_2918,xnmalloc_2918]"]
	xnmalloc_4  [label="[xnmalloc_2919,xnmalloc_2920]"]
	xnmalloc_5  [label="[.label_192,.label_192]"]
	xnmalloc_6  [label="[xnmalloc,xnmalloc_2915]"]

	xnmalloc_0 -> xnmalloc_5 [label="ZF"];
	xnmalloc_0 -> xnmalloc_1 [label="!ZF"];

	xnmalloc_2 -> xnmalloc_3;
	xnmalloc_3 -> xnmalloc_4;
	xnmalloc_4 -> xnmalloc_1 [label="ZF"];
	xnmalloc_4 -> xnmalloc_0 [label="!ZF"];

	xnmalloc_6 -> xnmalloc_5 [label="CF"];
	xnmalloc_6 -> xnmalloc_2 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xnmalloc for Randomized
diGraph xnmalloc_Randomized{
	xnmalloc_0  [label="[xnmalloc_4081,xnmalloc_4082]"]
	xnmalloc_1  [label="[.label_193,xnmalloc_4086]"]
	xnmalloc_2  [label="[xnmalloc_4074,xnmalloc_4076]"]
	xnmalloc_3  [label="[xnmalloc_4077,xnmalloc_4077]"]
	xnmalloc_4  [label="[xnmalloc_4078,xnmalloc_4080]"]
	xnmalloc_5  [label="[.label_192,.label_192]"]
	xnmalloc_6  [label="[xnmalloc,xnmalloc_4073]"]

	xnmalloc_0 -> xnmalloc_5 [label="ZF"];
	xnmalloc_0 -> xnmalloc_1 [label="!ZF"];

	xnmalloc_2 -> xnmalloc_3;
	xnmalloc_3 -> xnmalloc_4;
	xnmalloc_4 -> xnmalloc_1 [label="ZF"];
	xnmalloc_4 -> xnmalloc_0 [label="!ZF"];

	xnmalloc_6 -> xnmalloc_5 [label="CF"];
	xnmalloc_6 -> xnmalloc_2 [label="!CF"];
}
--------
Starting Node: 6

Edges: 0 --ZF--> 5, 0 --!ZF--> 1, , 2 ----> 3, 3 ----> 4, 4 --ZF--> 1, 4 --!ZF--> 0, , 6 --CF--> 5, 6 --!CF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "xnmalloc"
node 0:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 2:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI))
node 3:
RAX := malloc@()
node 4:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 5:
RAX := xalloc_die@()
node 6:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RBX := Reg: RSI, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 6

Edges: 0 --ZF--> 5, 0 --!ZF--> 1, , 2 ----> 3, 3 ----> 4, 4 --ZF--> 1, 4 --!ZF--> 0, , 6 --CF--> 5, 6 --!CF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "xnmalloc"
node 0:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 2:
RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI))
node 3:
RAX := malloc@()
node 4:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 5:
RAX := xalloc_die@()
node 6:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RBX := Reg: RSI, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xnmalloc -> xnmalloc_2915 and xnmalloc -> xnmalloc_4073

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RBX := Reg: RSI, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RBX := Reg: RSI, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RBX,E_reg RSI),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RBX,E_reg RSI),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RBX,E_reg RSI),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnmalloc -> xnmalloc_2915 and xnmalloc -> xnmalloc_4073 have been verified to do the same.

same_behavior for the nodes: .label_192 -> .label_192 and .label_192 -> .label_192

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_192 -> .label_192 and .label_192 -> .label_192 have been verified to do the same.

same_behavior for the nodes: xnmalloc_2916 -> xnmalloc_2917 and xnmalloc_4074 -> xnmalloc_4076

same_behavior checking these two SStates:

SA || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI))

SB || RBX := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RBX,Reg: RDI))

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]),(RDI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]),(RDI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RBX,E_reg RDI]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_2916 -> xnmalloc_2917 and xnmalloc_4074 -> xnmalloc_4076 have been verified to do the same.

same_behavior for the nodes: xnmalloc_2918 -> xnmalloc_2918 and xnmalloc_4077 -> xnmalloc_4077

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_2918 -> xnmalloc_2918 and xnmalloc_4077 -> xnmalloc_4077 have been verified to do the same.

same_behavior for the nodes: xnmalloc_2919 -> xnmalloc_2920 and xnmalloc_4078 -> xnmalloc_4080

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_2919 -> xnmalloc_2920 and xnmalloc_4078 -> xnmalloc_4080 have been verified to do the same.

same_behavior for the nodes: .label_193 -> xnmalloc_2925 and .label_193 -> xnmalloc_4086

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_193 -> xnmalloc_2925 and .label_193 -> xnmalloc_4086 have been verified to do the same.

same_behavior for the nodes: xnmalloc_2921 -> xnmalloc_2922 and xnmalloc_4081 -> xnmalloc_4082

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(3,RSP == (Var: RSP0 - Value: 88) && RBP == ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(3,RSP == (Var: RSP0 - Value: 88) && RBP == ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8))])
OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_2921 -> xnmalloc_2922 and xnmalloc_4081 -> xnmalloc_4082 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (42/60): "quotearg_buffer"
--------
.dot code for CFG of text section quotearg_buffer for Vanilla
diGraph quotearg_buffer_Vanilla{
	quotearg_buffer_0  [label="[quotearg_buffer,quotearg_buffer_431]"]
	quotearg_buffer_1  [label="[quotearg_buffer_432,quotearg_buffer_432]"]
	quotearg_buffer_2  [label="[quotearg_buffer_433,quotearg_buffer_447]"]
	quotearg_buffer_3  [label="[quotearg_buffer_448,quotearg_buffer_448]"]
	quotearg_buffer_4  [label="[quotearg_buffer_449,quotearg_buffer_457]"]

	quotearg_buffer_0 -> quotearg_buffer_1;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;

}
--------
--------
.dot code for CFG of text section quotearg_buffer for Randomized
diGraph quotearg_buffer_Randomized{
	quotearg_buffer_0  [label="[quotearg_buffer,quotearg_buffer_590]"]
	quotearg_buffer_1  [label="[quotearg_buffer_591,quotearg_buffer_591]"]
	quotearg_buffer_2  [label="[quotearg_buffer_592,quotearg_buffer_612]"]
	quotearg_buffer_3  [label="[quotearg_buffer_613,quotearg_buffer_613]"]
	quotearg_buffer_4  [label="[quotearg_buffer_614,quotearg_buffer_626]"]

	quotearg_buffer_0 -> quotearg_buffer_1;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_buffer"
node 0:
R15 := Reg: RDX, R13 := Reg: RDI, R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RCX
ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R14 := Dereference: [Reg: RAX,4], R9 := SHR(zextend(Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8],Value: 64),Value: 32), R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8]
[(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
ZF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), CF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), SF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), OF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), PF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RBX,4] := TakeBits: <31,0>(Reg: R14)
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_buffer"
node 0:
R15 := Reg: RDX, R13 := Reg: RDI, R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RCX
ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R14 := Dereference: [Reg: RAX,4], R9 := SHR(zextend(Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8],Value: 64),Value: 32), R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8]
[(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
ZF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), CF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), SF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), OF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), PF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RBX,4] := TakeBits: <31,0>(Reg: R14)
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

same_behavior for the nodes: quotearg_buffer -> quotearg_buffer_431 and quotearg_buffer -> quotearg_buffer_590

same_behavior checking these two SStates:

SA || R15 := Reg: RDX, R13 := Reg: RDI, R12 := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RCX
SA || ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)

SB || R15 := Reg: RDX, R13 := Reg: RDI, R12 := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RCX
SB || ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)

reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(R15,E_reg RDX),(R13,E_reg RDI),(R12,E_reg RSI)]
reg_chk debug R13fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(R15,E_reg RDX),(R13,E_reg RDI),(R12,E_reg RSI)]
reg_chk debug R12fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(R15,E_reg RDX),(R13,E_reg RDI),(R12,E_reg RSI)]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer -> quotearg_buffer_431 and quotearg_buffer -> quotearg_buffer_590 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_432 -> quotearg_buffer_432 and quotearg_buffer_591 -> quotearg_buffer_591

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_432 -> quotearg_buffer_432 and quotearg_buffer_591 -> quotearg_buffer_591 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_433 -> quotearg_buffer_447 and quotearg_buffer_592 -> quotearg_buffer_612

same_behavior checking these two SStates:

SA || RAX := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R14 := Dereference: [Reg: RAX,4], R9 := SHR(zextend(Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8],Value: 64),Value: 32), R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8]
SA || [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
SA || ZF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), CF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), SF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), OF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), PF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)

SB || RAX := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], RBX := Reg: RAX, RCX := Dereference: [(Var: RSP0 - Value: 56),8], RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R14 := Dereference: [Reg: RAX,4], R9 := SHR(zextend(Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8],Value: 64),Value: 32), R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),8]
SB || [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
SB || ZF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), CF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), SF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), OF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), PF := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8),(RBX,E_reg RAX),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RDX,E_reg R15),(RDI,E_reg R13),(RSI,E_reg R12),(R14,E_deref (E_reg RAX) 4),(R9,E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]),(R8,E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R13
Value B:
E_reg R13
Resulting values:
Value A:
E_reg R12
Value B:
E_reg R12
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8,E_val 64 (-1)],E_val 32 64]
Resulting values:
Value A:
E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8
Value B:
E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 8
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_433 -> quotearg_buffer_447 and quotearg_buffer_592 -> quotearg_buffer_612 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_448 -> quotearg_buffer_448 and quotearg_buffer_613 -> quotearg_buffer_613

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_448 -> quotearg_buffer_448 and quotearg_buffer_613 -> quotearg_buffer_613 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_449 -> quotearg_buffer_457 and quotearg_buffer_614 -> quotearg_buffer_626

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RBX,4] := TakeBits: <31,0>(Reg: R14)
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RBX,4] := TakeBits: <31,0>(Reg: R14)
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R13fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug R12fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R13,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(R12,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_app (TakeBits 31 0) [E_reg R14]
E_app (TakeBits 31 0) [E_reg R14]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_buffer_449 -> quotearg_buffer_457 and quotearg_buffer_614 -> quotearg_buffer_626 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (43/60): "main"
--------
.dot code for CFG of text section main for Vanilla
diGraph main_Vanilla{
	main_0  [label="[main_141,main_147]"]
	main_1  [label="[main_148,main_148]"]
	main_2  [label="[main_136,main_137]"]
	main_3  [label="[main_138,main_138]"]
	main_4  [label="[main_139,main_140]"]
	main_5  [label="[.label_9,.label_9]"]
	main_6  [label="[main_155,main_155]"]
	main_7  [label="[main_118,main_118]"]
	main_8  [label="[main_119,main_119]"]
	main_9  [label="[main_120,main_121]"]
	main_10  [label="[main_122,main_122]"]
	main_11  [label="[main_123,main_124]"]
	main_12  [label="[main_125,main_125]"]
	main_13  [label="[main_126,main_126]"]
	main_14  [label="[main_127,main_127]"]
	main_15  [label="[main_128,main_128]"]
	main_16  [label="[main_129,main_129]"]
	main_17  [label="[main_130,main_132]"]
	main_18  [label="[main_133,main_133]"]
	main_19  [label="[main_134,main_135]"]
	main_20  [label="[.label_8,main_152]"]
	main_21  [label="[main,main_117]"]

	main_0 -> main_1;
	main_1 -> main_20;
	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_20 [label="!ZF"];
	main_4 -> main_0 [label="ZF"];
	main_5 -> main_6;

	main_7 -> main_8;
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_5 [label="ZF"];
	main_19 -> main_2 [label="!ZF"];

	main_21 -> main_20 [label="!ZF"];
	main_21 -> main_7 [label="ZF"];
}
--------
--------
.dot code for CFG of text section main for Randomized
diGraph main_Randomized{
	main_0  [label="[main_195,main_203]"]
	main_1  [label="[main_204,main_204]"]
	main_2  [label="[main_188,main_191]"]
	main_3  [label="[main_192,main_192]"]
	main_4  [label="[main_193,main_194]"]
	main_5  [label="[.label_8,main_213]"]
	main_6  [label="[main_214,main_214]"]
	main_7  [label="[main_161,main_162]"]
	main_8  [label="[main_163,main_163]"]
	main_9  [label="[main_164,main_167]"]
	main_10  [label="[main_168,main_168]"]
	main_11  [label="[main_169,main_172]"]
	main_12  [label="[main_173,main_173]"]
	main_13  [label="[main_174,main_174]"]
	main_14  [label="[main_175,main_175]"]
	main_15  [label="[main_176,main_178]"]
	main_16  [label="[main_179,main_179]"]
	main_17  [label="[main_180,main_184]"]
	main_18  [label="[main_185,main_185]"]
	main_19  [label="[main_186,main_187]"]
	main_20  [label="[.label_9,main_209]"]
	main_21  [label="[main,main_160]"]

	main_0 -> main_1;
	main_1 -> main_20;
	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_20 [label="!ZF"];
	main_4 -> main_0 [label="ZF"];
	main_5 -> main_6;

	mai(21,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
(21,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
n_7 -> main_8;
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_5 [label="ZF"];
	main_19 -> main_2 [label="!ZF"];

	main_21 -> main_20 [label="!ZF"];
	main_21 -> main_7 [label="ZF"];
}
--------
Starting Node: 21

Edges: 0 ----> 1, 1 ----> 20, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 20, 4 --ZF--> 0, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 --ZF--> 5, 19 --!ZF--> 2, , 21 --!ZF--> 20, 21 --ZF--> 7

Symbolic Execution for Binary "Vanilla":
Current text section: "main"
node 0:
RAX := Value: 0, RCX := Dereference: [(Var: main_142 + Var: Version),8], RDX := Dereference: [Var: .str.17,4], RDI := Dereference: [(Var: main_141 + Var: stdout),8], RSI := Dereference: [Var: .str.6,4], R9 := Value: 0, R8 := Dereference: [Var: .str.13,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := version_etc@()
node 2:
RDI := Reg: RBX, RSI := Dereference: [Var: .str.11,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDI := Value: 1
node 6:
RAX := usage@()
node 7:
RDI := Dereference: [Reg: RBX,8]
node 8:
RAX := set_program_name@()
node 9:
RDI := Value: 6, RSI := Dereference: [Var: .str_0,4]
node 10:
RAX := setlocale@()
node 11:
RDI := Dereference: [Var: .str.8,4], RSI := Dereference: [Var: .str.9,4]
node 12:
RAX := bindtextdomain@()
node 13:
RDI := Dereference: [Var: .str.8,4]
node 14:
RAX := textdomain@()
node 15:
RDI := Dereference: [Var: close_stdout,4]
node 16:
RAX := atexit@()
node 17:
RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
node 18:
RAX := strcmp@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 21:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

Starting Node: 21

Edges: 0 ----> 1, 1 ----> 20, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 20, 4 --ZF--> 0, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 --ZF--> 5, 19 --!ZF--> 2, , 21 --!ZF--> 20, 21 --ZF--> 7

Symbolic Execution for Binary "Randomized":
Current text section: "main"
node 0:
RAX := Value: 0, RCX := Dereference: [(Var: main_196 + Var: Version),8], RDX := Dereference: [Var: .str.17,4], RDI := Dereference: [(Var: main_195 + Var: stdout),8], RSI := Dereference: [Var: .str.6,4], R9 := Value: 0, R8 := Dereference: [Var: .str.13,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := version_etc@()
node 2:
RDI := Reg: RBX, RSI := Dereference: [Var: .str.11,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDI := Value: 1
node 6:
RAX := usage@()
node 7:
RDI := Dereference: [Reg: RBX,8]
node 8:
RAX := set_program_name@()
node 9:
RDI := Value: 6, RSI := Dereference: [Var: .str_0,4]
node 10:
RAX := setlocale@()
node 11:
RDI := Dereference: [Var: .str.8,4], RSI := Dereference: [Var: .str.9,4]
node 12:
RAX := bindtextdomain@()
node 13:
RDI := Dereference: [Var: .str.8,4]
node 14:
RAX := textdomain@()
node 15:
RDI := Dereference: [Var: close_stdout,4]
node 16:
RAX := atexit@()
node 17:
RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
node 18:
RAX := strcmp@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 21:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

same_behavior for the nodes: main -> main_117 and main -> main_160

same_behavior checking these two SStates:

SA || RBX := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

SB || RBX := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RSI),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main -> main_117 and main -> main_160 have been verified to do the same.

same_behavior for the nodes: .label_8 -> main_152 and .label_9 -> main_209

same_behavior checking these two SStates:

SA || RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 1 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 1 32),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_8 -> main_152 and .label_9 -> main_209 have been verified to do the same.

same_behavior for the nodes: main_118 -> main_118 and main_161 -> main_162

same_behavior checking these two SStates:

SA || RDI := Dereference: [Reg: RBX,8]

SB || RDI := Dereference: [Reg: RBX,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_reg RBX) 8)]
Resulting values:
Value A:
E_deref (E_reg RBX) 8
Value B:
E_deref (E_reg RBX) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_118 -> main_118 and main_161 -> main_162 have been verified to do the same.

same_behavior for the nodes: main_119 -> main_119 and main_163 -> main_163

same_behavior checking these two SStates:

SA || RAX := set_program_name@()

SB || RAX := set_program_name@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "set_program_name" "") [])]
Resulting values:
Value A:
E_app (F2 "set_program_name" "") []
Value B:
E_app (F2 "set_program_name" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_119 -> main_119 and main_163 -> main_163 have been verified to do the same.

same_behavior for the nodes: main_120 -> main_121 and main_164 -> main_167

same_behavior checking these two SStates:

SA || RDI := Value: 6, RSI := Dereference: [Var: .str_0,4]

SB || RDI := Value: 6, RSI := Dereference: [Var: .str_0,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 6 32),(RSI,E_deref (E_var ".str_0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_val 6 32),(RSI,E_deref (E_var ".str_0" 64) 4)]
Resulting values:
Value A:
E_val 6 32
Value B:
E_val 6 32
Resulting values:
Value A:
E_deref (E_var ".str_0" 64) 4
Value B:
E_deref (E_var ".str_0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_120 -> main_121 and main_164 -> main_167 have been verified to do the same.

same_behavior for the nodes: main_122 -> main_122 and main_168 -> main_168

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "setlocale" "") [])]
Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_122 -> main_122 and main_168 -> main_168 have been verified to do the same.

same_behavior for the nodes: main_123 -> main_124 and main_169 -> main_172

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.8,4], RSI := Dereference: [Var: .str.9,4]

SB || RDI := Dereference: [Var: .str.8,4], RSI := Dereference: [Var: .str.9,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 4),(RSI,E_deref (E_var ".str.9" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 4),(RSI,E_deref (E_var ".str.9" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.8" 64) 4
Value B:
E_deref (E_var ".str.8" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.9" 64) 4
Value B:
E_deref (E_var ".str.9" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_123 -> main_124 and main_169 -> main_172 have been verified to do the same.

same_behavior for the nodes: main_125 -> main_125 and main_173 -> main_173

same_behavior checking these two SStates:

SA || RAX := bindtextdomain@()

SB || RAX := bindtextdomain@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "bindtextdomain" "") [])]
Resulting values:
Value A:
E_app (F2 "bindtextdomain" "") []
Value B:
E_app (F2 "bindtextdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_125 -> main_125 and main_173 -> main_173 have been verified to do the same.

same_behavior for the nodes: main_126 -> main_126 and main_174 -> main_174

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.8,4]

SB || RDI := Dereference: [Var: .str.8,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.8" 64) 4
Value B:
E_deref (E_var ".str.8" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_126 -> main_126 and main_174 -> main_174 have been verified to do the same.

same_behavior for the nodes: main_127 -> main_127 and main_175 -> main_175

same_behavior checking these two SStates:

SA || RAX := textdomain@()

SB || RAX := textdomain@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "textdomain" "") [])]
Resulting values:
Value A:
E_app (F2 "textdomain" "") []
Value B:
E_app (F2 "textdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_127 -> main_127 and main_175 -> main_175 have been verified to do the same.

same_behavior for the nodes: main_128 -> main_128 and main_176 -> main_178

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: close_stdout,4]

SB || RDI := Dereference: [Var: close_stdout,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "close_stdout" 64) 4)]
Resulting values:
Value A:
E_deref (E_var "close_stdout" 64) 4
Value B:
E_deref (E_var "close_stdout" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_128 -> main_128 and main_176 -> main_178 have been verified to do the same.

same_behavior for the nodes: main_129 -> main_129 and main_179 -> main_179

same_behavior checking these two SStates:

SA || RAX := atexit@()

SB || RAX := atexit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "atexit" "") [])]
Resulting values:
Value A:
E_app (F2 "atexit" "") []
Value B:
E_app (F2 "atexit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_129 -> main_129 and main_179 -> main_179 have been verified to do the same.

same_behavior for the nodes: main_130 -> main_132 and main_180 -> main_184

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: .str.10,4]

SB || RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: .str.10,4]

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Resulting values:
Value A:
E_deref (E_var ".str.10" 64) 4
Value B:
E_deref (E_var ".str.10" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_130 -> main_132 and main_180 -> main_184 have been verified to do the same.

same_behavior for the nodes: main_133 -> main_133 and main_185 -> main_185

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_133 -> main_133 and main_185 -> main_185 have been verified to do the same.

same_behavior for the nodes: main_134 -> main_135 and main_186 -> main_187

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_134 -> main_135 and main_186 -> main_187 have been verified to do the same.

same_behavior for the nodes: .label_9 -> .label_9 and .label_8 -> main_213

same_behavior checking these two SStates:

SA || RDI := Value: 1

SB || RDI := Value: 1

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 1 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_9 -> .label_9 and .label_8 -> main_213 have been verified to do the same.

same_behavior for the nodes: main_155 -> main_155 and main_214 -> main_214

same_behavior checking these two SStates:

SA || RAX := usage@()

SB || RAX := usage@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "usage" "") [])]
Resulting values:
Value A:
E_app (F2 "usage" "") []
Value B:
E_app (F2 "usage" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_155 -> main_155 and main_214 -> main_214 have been verified to do the same.

same_behavior for the nodes: main_136 -> main_137 and main_188 -> main_191

same_behavior checking these two SStates:

SA || RDI := Reg: RBX, RSI := Dereference: [Var: .str.11,4]

SB || RDI := Reg: RBX, RSI := Dereference: [Var: .str.11,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_deref (E_var ".str.11" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_deref (E_var ".str.11" 64) 4)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_var ".str.11" 64) 4
Value B:
E_deref (E_var ".str.11" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_136 -> main_137 and main_188 -> main_191 have been verified to do the same.

same_behavior for the nodes: main_138 -> main_138 and main_192 -> main_192

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_138 -> main_138 and main_192 -> main_192 have been verified to do the same.

same_behavior for the nodes: main_139 -> main_140 and main_193 -> main_194

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_139 -> main_140 and main_193 -> main_194 have been verified to do the same.

same_behavior for the nodes: main_141 -> main_147 and main_195 -> main_203

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: main_142 + Var: Version),8], RDX := Dereference: [Var: .str.17,4], RDI := Dereference: [(Var: main_141 + Var: stdout),8], RSI := Dereference: [Var: .str.6,4], R9 := Value: 0, R8 := Dereference: [Var: .str.13,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: main_196 + Var: Version),8], RDX := Dereference: [Var: .str.17,4], RDI := Dereference: [(Var: main_195 + Var: stdout),8], RSI := Dereference: [Var: .str.6,4], R9 := Value: 0, R8 := Dereference: [Var: .str.13,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8),(RSI,E_deref (E_var ".str.6" 64) 4),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 4)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "main_142" 64,E_var "Version" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "main_196" 64,E_var "Version" 64]) 8
Resulting values:
Value A:
E_deref (E_var ".str.17" 64) 4
Value B:
E_deref (E_var ".str.17" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "main_141" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "main_195" 64,E_var "stdout" 64]) 8
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 4
Value B:
E_deref (E_var ".str.6" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.13" 64) 4
Value B:
E_deref (E_var ".str.13" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_141 -> main_147 and main_195 -> main_203 have been verified to do the same.

same_behavior for the nodes: main_148 -> main_148 and main_204 -> main_204

same_behavior checking these two SStates:

SA || RAX := version_etc@()

SB || RAX := version_etc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "version_etc" "") [])]
Resulting values:
Value A:
E_app (F2 "version_etc" "") []
Value B:
E_app (F2 "version_etc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_148 -> main_148 and main_204 -> main_204 have been verified to do the same.

Label relationship:
.str.13 <--> .str.13
.str.6 <--> .str.6
stdout <--> stdout
main_141 <--> main_195
.str.17 <--> .str.17
Version <--> Version
main_142 <--> main_196
.str.11 <--> .str.11
.str.10 <--> .str.10
close_stdout <--> close_stdout
.str.9 <--> .str.9
.str.8 <--> .str.8
.str_0 <--> .str_0
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (44/60): "rpl_nl_langinfo"
--------
.dot code for CFG of text section rpl_nl_langinfo for Vanilla
diGraph rpl_nl_langinfo_Vanilla{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo,rpl_nl_langinfo_3588]"]
	rpl_nl_langinfo_1  [label="[rpl_nl_langinfo_3589,rpl_nl_langinfo_3589]"]
	rpl_nl_(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
langinfo_2  [label="[rpl_nl_langinfo_3589_ret,rpl_nl_langinfo_3589_ret]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_1;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;

}
--------
--------
.dot code for CFG of text section rpl_nl_langinfo for Randomized
diGraph rpl_nl_langinfo_Randomized{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo,rpl_nl_langinfo_4977]"]
	rpl_nl_langinfo_1  [label="[rpl_nl_langinfo_4978,rpl_nl_langinfo_4978]"]
	rpl_nl_langinfo_2  [label="[rpl_nl_langinfo_4978_ret,rpl_nl_langinfo_4978_ret]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_1;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)
node 1:
RAX := nl_langinfo@()
node 2:
skip'
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)
node 1:
RAX := nl_langinfo@()
node 2:
skip'
--------

same_behavior for the nodes: rpl_nl_langinfo -> rpl_nl_langinfo_3588 and rpl_nl_langinfo -> rpl_nl_langinfo_4977

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
SA || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)

SB || RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
SB || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]),(RCX,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]),(RDI,E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]),(RCX,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]),(RDI,E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]),(RCX,E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]),(RDI,E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]
Resulting values:
Value A:
E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])
Value B:
E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo -> rpl_nl_langinfo_3588 and rpl_nl_langinfo -> rpl_nl_langinfo_4977 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_3589 -> rpl_nl_langinfo_3589 and rpl_nl_langinfo_4978 -> rpl_nl_langinfo_4978

same_behavior checking these two SStates:

SA || RAX := nl_langinfo@()

SB || RAX := nl_langinfo@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "nl_langinfo" "") [])]
Resulting values:
Value A:
E_app (F2 "nl_langinfo" "") []
Value B:
E_app (F2 "nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_3589 -> rpl_nl_langinfo_3589 and rpl_nl_langinfo_4978 -> rpl_nl_langinfo_4978 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_3589_ret -> rpl_nl_langinfo_3589_ret and rpl_nl_langinfo_4978_ret -> rpl_nl_langinfo_4978_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_3589_ret -> rpl_nl_langinfo_3589_ret and rpl_nl_langinfo_4978_ret -> rpl_nl_langinfo_4978_ret have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:

Succesful check!
Considering text section (45/60): "rpl_fseeko"
--------
.dot code for CFG of text section rpl_fseeko for Vanilla
diGraph rpl_fseeko_Vanilla{
	rpl_fseeko_0  [label="[rpl_fseeko_3569,rpl_fseeko_3571]"]
	rpl_fseeko_1  [label="[.label_238,rpl_fseeko_3576]"]
	rpl_fseeko_2  [label="[.label_237,.label_237]"]
	rpl_fseeko_3  [label="[rpl_fseeko_3560,rpl_fseeko_3560]"]
	rpl_fseeko_4  [label="[rpl_fseeko_3561,rpl_fseeko_3563]"]
	rpl_fseeko_5  [label="[rpl_fseeko_3564,rpl_fseeko_3564]"]
	rpl_fseeko_6  [label="[rpl_fseeko_3565,rpl_fseeko_3568]"]
	rpl_fseeko_7  [label="[rpl_fseeko_3548,rpl_fseeko_3549]"]
	rpl_fseeko_8  [label="[rpl_fseeko_3545,rpl_fseeko_3547]"]
	rpl_fseeko_9  [label="[.label_236,rpl_fseeko_3556]"]
	rpl_fseeko_10  [label="[rpl_fseeko_3557,rpl_fseeko_3557]"]
	rpl_fseeko_11  [label="[rpl_fseeko_3557_ret,rpl_fseeko_3557_ret]"]
	rpl_fseeko_12  [label="[rpl_fseeko,rpl_fseeko_3544]"]

	rpl_fseeko_0 -> rpl_fseeko_1;

	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_f(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(10,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(10,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
seeko_11;

	rpl_fseeko_12 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_12 -> rpl_fseeko_8 [label="ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fseeko for Randomized
diGraph rpl_fseeko_Randomized{
	rpl_fseeko_0  [label="[rpl_fseeko_4952,rpl_fseeko_4956]"]
	rpl_fseeko_1  [label="[.label_238,rpl_fseeko_4964]"]
	rpl_fseeko_2  [label="[.label_237,.label_237]"]
	rpl_fseeko_3  [label="[rpl_fseeko_4939,rpl_fseeko_4939]"]
	rpl_fseeko_4  [label="[rpl_fseeko_4940,rpl_fseeko_4944]"]
	rpl_fseeko_5  [label="[rpl_fseeko_4945,rpl_fseeko_4945]"]
	rpl_fseeko_6  [label="[rpl_fseeko_4946,rpl_fseeko_4951]"]
	rpl_fseeko_7  [label="[rpl_fseeko_4922,rpl_fseeko_4924]"]
	rpl_fseeko_8  [label="[rpl_fseeko_4918,rpl_fseeko_4921]"]
	rpl_fseeko_9  [label="[.label_236,rpl_fseeko_4935]"]
	rpl_fseeko_10  [label="[rpl_fseeko_4936,rpl_fseeko_4936]"]
	rpl_fseeko_11  [label="[rpl_fseeko_4936_ret,rpl_fseeko_4936_ret]"]
	rpl_fseeko_12  [label="[rpl_fseeko,rpl_fseeko_4917]"]

	rpl_fseeko_0 -> rpl_fseeko_1;

	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_fseeko_11;

	rpl_fseeko_12 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_12 -> rpl_fseeko_8 [label="ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --ZF--> 1, 6 --!ZF--> 0, 7 --ZF--> 2, 7 --!ZF--> 9, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, , 12 --!ZF--> 9, 12 --ZF--> 8

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fseeko"
node 0:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 2:
RDI := Reg: RBX
node 3:
RAX := fileno@()
node 4:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := lseek@()
node 6:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 10:
RAX := fseeko@()
node 11:
skip'
node 12:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --ZF--> 1, 6 --!ZF--> 0, 7 --ZF--> 2, 7 --!ZF--> 9, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, , 12 --!ZF--> 9, 12 --ZF--> 8

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fseeko"
node 0:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 2:
RDI := Reg: RBX
node 3:
RAX := fileno@()
node 4:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := lseek@()
node 6:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 10:
RAX := fseeko@()
node 11:
skip'
node 12:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

same_behavior for the nodes: rpl_fseeko -> rpl_fseeko_3544 and rpl_fseeko -> rpl_fseeko_4917

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

SB || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (TakeBits 31 0) [E_reg RDX])]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (TakeBits 31 0) [E_reg RDX])]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_app (TakeBits 31 0) [E_reg RDX])]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko -> rpl_fseeko_3544 and rpl_fseeko -> rpl_fseeko_4917 have been verified to do the same.

same_behavior for the nodes: .label_236 -> rpl_fseeko_3556 and .label_236 -> rpl_fseeko_4935

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_reg RBX),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_236 -> rpl_fseeko_3556 and .label_236 -> rpl_fseeko_4935 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3557 -> rpl_fseeko_3557 and rpl_fseeko_4936 -> rpl_fseeko_4936

same_behavior checking these two SStates:

SA || RAX := fseeko@()

SB || RAX := fseeko@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fseeko" "") [])]
Resulting values:
Value A:
E_app (F2 "fseeko" "") []
Value B:
E_app (F2 "fseeko" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3557 -> rpl_fseeko_3557 and rpl_fseeko_4936 -> rpl_fseeko_4936 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3557_ret -> rpl_fseeko_3557_ret and rpl_fseeko_4936_ret -> rpl_fseeko_4936_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3557_ret -> rpl_fseeko_3557_ret and rpl_fseeko_4936_ret -> rpl_fseeko_4936_ret have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3545 -> rpl_fseeko_3547 and rpl_fseeko_4918 -> rpl_fseeko_4921

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

SB || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3545 -> rpl_fseeko_3547 and rpl_fseeko_4918 -> rpl_fseeko_4921 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3548 -> rpl_fseeko_3549 and rpl_fseeko_4922 -> rpl_fseeko_4924

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3548 -> rpl_fseeko_3549 and rpl_fseeko_4922 -> rpl_fseeko_4924 have been verified to do the same.

same_behavior for the nodes: .label_237 -> .label_237 and .label_237 -> .label_237

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_237 -> .label_237 and .label_237 -> .label_237 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3560 -> rpl_fseeko_3560 and rpl_fseeko_4939 -> rpl_fseeko_4939

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3560 -> rpl_fseeko_3560 and rpl_fseeko_4939 -> rpl_fseeko_4939 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3561 -> rpl_fseeko_3563 and rpl_fseeko_4940 -> rpl_fseeko_4944

same_behavior checking these two SStates:

SA || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)

SB || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_app (TakeBits 31 0) [E_reg R14]),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3561 -> rpl_fseeko_3563 and rpl_fseeko_4940 -> rpl_fseeko_4944 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3564 -> rpl_fseeko_3564 and rpl_fseeko_4945 -> rpl_fseeko_4945

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "lseek" "") [])]
Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3564 -> rpl_fseeko_3564 and rpl_fseeko_4945 -> rpl_fseeko_4945 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3565 -> rpl_fseeko_3568 and rpl_fseeko_4946 -> rpl_fseeko_4951

same_behavior checking these two SStates:

SA || RAX := Value: 4294967295, RCX := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || RAX := Value: 4294967295, RCX := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 4294967295 32),(RCX,E_reg RAX),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 4294967295 32),(RCX,E_reg RAX),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_val 4294967295 32
Value B:
E_val 4294967295 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3565 -> rpl_fseeko_3568 and rpl_fseeko_4946 -> rpl_fseeko_4951 have been verified to do the same.

same_behavior for the nodes: .label_238 -> rpl_fseeko_3576 and .label_238 -> rpl_fseeko_4964

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_238 -> rpl_fseeko_3576 and .label_238 -> rpl_fseeko_4964 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3569 -> rpl_fseeko_3571 and rpl_fseeko_4952 -> rpl_fseeko_4956

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBX,E_val 144 64]
E_app (Op ADD) [E_reg RBX,E_val 144 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_fseeko_3569 -> rpl_fseeko_3571 and rpl_fseeko_4952 -> rpl_fseeko_4956 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (46/60): "hard_locale"
--------
.dot code for CFG of text section hard_locale for Vanilla
diGraph hard_locale_Vanilla{
	hard_locale_0  [label="[hard_locale_3412,hard_locale_3413]"]
	hard_locale_1  [label="[.label_228,.label_228]"]
	hard_locale_2  [label="[.label_230,hard_locale_3416]"]
	hard_locale_3  [label="[hard_locale_3417,hard_locale_3417]"]
	hard_locale_4  [label="[hard_locale_3418,hard_locale_3419]"]
	hard_locale_5  [label="[hard_locale_3409,hard_locale_3411]"]
	hard_locale_6  [label="[.label_229,hard_locale_3425]"]
	hard_locale_7  [label="[hard_locale,hard_locale_3404]"]
	hard_locale_8  [label="[hard_locale_3405,hard_locale_3405]"]
	hard_locale_9  [label="[hard_locale_3406,hard_locale_3408]"]

	hard_locale_0 -> hard_locale_1 [label="ZF"];
	hard_locale_0 -> hard_locale_2 [label="!ZF"];
	hard_locale_1 -> hard_locale_6;
	hard_locale_2 -> hard_locale_3;
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_6 [label="!ZF"];
	hard_locale_4 -> hard_locale_1 [label="ZF"];
	hard_locale_5 -> hard_locale_2 [label="!ZF"];
	hard_locale_5 -> hard_locale_0 [label="ZF"];

	hard_locale_7 -> hard_locale_8;
	hard_locale_8 -> hard_locale_9;
	hard_locale_9 -> hard_locale_6 [label="ZF"];
	hard_locale_9 -> hard_locale_5 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section hard_locale for Randomized
diGraph hard_locale_Randomized{
	hard_locale_0  [label="[hard_locale_4745,hard_locale_4747]"]
	hard_locale_1  [label="[.label_230,hard_locale_4760]"]
	hard_locale_2  [label="[.label_228,hard_locale_4753]"]
	hard_locale_3  [label="[hard_locale_4754,hard_locale_4754]"]
	hard_locale_4  [label="[hard_locale_4755,hard_locale_4757]"]
	hard_locale_5  [label="[har(7,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(7,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
d_locale_4742,hard_locale_4744]"]
	hard_locale_6  [label="[.label_229,hard_locale_4765]"]
	hard_locale_7  [label="[hard_locale,hard_locale_4735]"]
	hard_locale_8  [label="[hard_locale_4736,hard_locale_4736]"]
	hard_locale_9  [label="[hard_locale_4737,hard_locale_4741]"]

	hard_locale_0 -> hard_locale_1 [label="ZF"];
	hard_locale_0 -> hard_locale_2 [label="!ZF"];
	hard_locale_1 -> hard_locale_6;
	hard_locale_2 -> hard_locale_3;
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_6 [label="!ZF"];
	hard_locale_4 -> hard_locale_1 [label="ZF"];
	hard_locale_5 -> hard_locale_2 [label="!ZF"];
	hard_locale_5 -> hard_locale_0 [label="ZF"];

	hard_locale_7 -> hard_locale_8;
	hard_locale_8 -> hard_locale_9;
	hard_locale_9 -> hard_locale_6 [label="ZF"];
	hard_locale_9 -> hard_locale_5 [label="!ZF"];
}
--------
Starting Node: 7

Edges: 0 --ZF--> 1, 0 --!ZF--> 2, 1 ----> 6, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --!ZF--> 2, 5 --ZF--> 0, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 5

Symbolic Execution for Binary "Vanilla":
Current text section: "hard_locale"
node 0:
ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)
node 1:
RBX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := Reg: RAX, RSI := Dereference: [Var: .str.1_4,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RCX := Dereference: [Reg: RAX,1]
ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RBX)), RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 7:
RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := setlocale@()
node 9:
RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

Starting Node: 7

Edges: 0 --ZF--> 1, 0 --!ZF--> 2, 1 ----> 6, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --!ZF--> 2, 5 --ZF--> 0, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 5

Symbolic Execution for Binary "Randomized":
Current text section: "hard_locale"
node 0:
ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)
node 1:
RBX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := Reg: RAX, RSI := Dereference: [Var: .str.1_4,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RCX := Dereference: [Reg: RAX,1]
ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RBX)), RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 7:
RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := setlocale@()
node 9:
RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

same_behavior for the nodes: hard_locale -> hard_locale_3404 and hard_locale -> hard_locale_4735

same_behavior checking these two SStates:

SA || RSI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RSI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes hard_locale -> hard_locale_3404 and hard_locale -> hard_locale_4735 have been verified to do the same.

same_behavior for the nodes: hard_locale_3405 -> hard_locale_3405 and hard_locale_4736 -> hard_locale_4736

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "setlocale" "") [])]
Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3405 -> hard_locale_3405 and hard_locale_4736 -> hard_locale_4736 have been verified to do the same.

same_behavior for the nodes: hard_locale_3406 -> hard_locale_3408 and hard_locale_4737 -> hard_locale_4741

same_behavior checking these two SStates:

SA || RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_val 1 8])]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_val 1 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3406 -> hard_locale_3408 and hard_locale_4737 -> hard_locale_4741 have been verified to do the same.

same_behavior for the nodes: .label_229 -> hard_locale_3425 and .label_229 -> hard_locale_4765

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RBX)), RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RBX)), RBX := Dereference: [(Var: RSP0 - Value: 8),8]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RBX]]),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RBX]]),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RBX]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RBX]]
Resulting values:
Value A:
E_deref ((9,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_229 -> hard_locale_3425 and .label_229 -> hard_locale_4765 have been verified to do the same.

same_behavior for the nodes: hard_locale_3409 -> hard_locale_3411 and hard_locale_4742 -> hard_locale_4744

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,1]
SA || ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)

SB || RCX := Dereference: [Reg: RAX,1]
SB || ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 1)]
Resulting values:
Value A:
E_deref (E_reg RAX) 1
Value B:
E_deref (E_reg RAX) 1
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3409 -> hard_locale_3411 and hard_locale_4742 -> hard_locale_4744 have been verified to do the same.

same_behavior for the nodes: .label_230 -> hard_locale_3416 and .label_228 -> hard_locale_4753

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: .str.1_4,4]

SB || RDI := Reg: RAX, RSI := Dereference: [Var: .str.1_4,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.1_4" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.1_4" 64) 4)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.1_4" 64) 4
Value B:
E_deref (E_var ".str.1_4" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_230 -> hard_locale_3416 and .label_228 -> hard_locale_4753 have been verified to do the same.

same_behavior for the nodes: hard_locale_3417 -> hard_locale_3417 and hard_locale_4754 -> hard_locale_4754

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3417 -> hard_locale_3417 and hard_locale_4754 -> hard_locale_4754 have been verified to do the same.

same_behavior for the nodes: hard_locale_3418 -> hard_locale_3419 and hard_locale_4755 -> hard_locale_4757

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3418 -> hard_locale_3419 and hard_locale_4755 -> hard_locale_4757 have been verified to do the same.

same_behavior for the nodes: .label_228 -> .label_228 and .label_230 -> hard_locale_4760

same_behavior checking these two SStates:

SA || RBX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_val 0 32),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_228 -> .label_228 and .label_230 -> hard_locale_4760 have been verified to do the same.

same_behavior for the nodes: hard_locale_3412 -> hard_locale_3413 and hard_locale_4745 -> hard_locale_4747

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3412 -> hard_locale_3413 and hard_locale_4745 -> hard_locale_4747 have been verified to do the same.

Label relationship:
.str.1_4 <--> .str.1_4
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (47/60): "rpl_calloc"
--------
.dot code for CFG of text section rpl_calloc for Vanilla
diGraph rpl_calloc_Vanilla{
	rpl_calloc_0  [label="[rpl_calloc_3299,rpl_calloc_3299]"]
	rpl_calloc_1  [label="[rpl_calloc_3300,rpl_calloc_3300]"]
	rpl_calloc_2  [label="[rpl_calloc_3301,rpl_calloc_3304]"]
	rpl_calloc_3  [label="[rpl_calloc_3291,rpl_calloc_3298]"]
	rpl_calloc_4  [label="[rpl_calloc_3288,rpl_calloc_3290]"]
	rpl_calloc_5  [label="[.label_223,.label_223]"]
	rpl_calloc_6  [label="[.label_224,rpl_calloc_3309]"]
	rpl_calloc_7  [label="[rpl_calloc_3310,rpl_calloc_3310]"]
	rpl_calloc_8  [label="[rpl_calloc_3310_ret,rpl_calloc_3310_ret]"]
	rpl_calloc_9  [label="[rpl_calloc,rpl_calloc_3287]"]

	rpl_calloc_0 -> rpl_calloc_1;
	rpl_calloc_1 -> rpl_calloc_2;

	rpl_calloc_3 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_3 -> rpl_calloc_0 [label="!ZF"];
	rpl_calloc_4 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_4 -> rpl_calloc_3 [label="!ZF"];
	rpl_calloc_5 -> rpl_calloc_6;
	rpl_calloc_6 -> rpl_calloc_7;
	rpl_calloc_7 -> rpl_calloc_8;

	rpl_calloc_9 -> rpl_calloc_5 [label="ZF"];
	rpl_calloc_9 -> rpl_calloc_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_calloc for Randomized
diGraph rpl_calloc_Randomized{
	rpl_calloc_0  [label="[rpl_calloc_4583,rpl_calloc_4585]"]
	rpl_calloc_1  [label="[rpl_calloc_4586,rpl_calloc_4586]"]
	rpl_calloc_2  [label="[rpl_calloc_4587,rpl_calloc_4593]"]
	rpl_calloc_3  [label="[rpl_calloc_4572,rpl_calloc_4582]"]
	rpl_calloc_4  [label="[rpl_calloc_4568,rpl_calloc_4571]"]
	rpl_calloc_5  [label="[.label_223,.label_223]"]
	rpl_calloc_6  [label="[.label_224,rpl_calloc_4600]"]
	rpl_calloc_7  [label="[rpl_calloc_4601,rpl_calloc_4601]"]
	rpl_calloc_8  [label="[rpl_calloc_4601_ret,rpl_calloc_4601_ret]"]
	rpl_calloc_9  [label="[rpl_calloc,rpl_calloc_4567]"]

	rpl_calloc_0 -> rpl_calloc_1;
	rpl_calloc_1 -> rpl_calloc_2;

	rpl_calloc_3 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_3 -> rpl_calloc_0 [label="!ZF"];
	rpl_calloc_4 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_4 -> rpl_calloc_3 [label="!ZF"];
	rpl_calloc_5 -> rpl_calloc_6;
	rpl_calloc_6 -> rpl_calloc_7;
	rpl_calloc_7 -> rpl_calloc_8;

	rpl_calloc_9 -> rpl_calloc_5 [label="ZF"];
	rpl_calloc_9 -> rpl_calloc_4 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 6, 3 --!ZF--> 0, 4 --ZF--> 6, 4 --!ZF--> 3, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 5, 9 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_calloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := __errno_location@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
[Reg: RAX,4] := Value: 12
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zex(9,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
tend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
node 4:
RCX := Value: 1
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 5:
RCX := Value: 1
node 6:
RDI := Reg: RCX, RSI := Reg: RAX
node 7:
RAX := calloc@()
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 6, 3 --!ZF--> 0, 4 --ZF--> 6, 4 --!ZF--> 3, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 5, 9 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_calloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := __errno_location@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
[Reg: RAX,4] := Value: 12
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
node 4:
RCX := Value: 1
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 5:
RCX := Value: 1
node 6:
RDI := Reg: RCX, RSI := Reg: RAX
node 7:
RAX := calloc@()
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: rpl_calloc -> rpl_calloc_3287 and rpl_calloc -> rpl_calloc_4567

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Value: 1
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 1 32),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc -> rpl_calloc_3287 and rpl_calloc -> rpl_calloc_4567 have been verified to do the same.

same_behavior for the nodes: .label_223 -> .label_223 and .label_223 -> .label_223

same_behavior checking these two SStates:

SA || RCX := Value: 1

SB || RCX := Value: 1

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_val 1 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_223 -> .label_223 and .label_223 -> .label_223 have been verified to do the same.

same_behavior for the nodes: .label_224 -> rpl_calloc_3309 and .label_224 -> rpl_calloc_4600

same_behavior checking these two SStates:

SA || RDI := Reg: RCX, RSI := Reg: RAX

SB || RDI := Reg: RCX, RSI := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RCX),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RCX),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_224 -> rpl_calloc_3309 and .label_224 -> rpl_calloc_4600 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3310 -> rpl_calloc_3310 and rpl_calloc_4601 -> rpl_calloc_4601

same_behavior checking these two SStates:

SA || RAX := calloc@()

SB || RAX := calloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "calloc" "") [])]
Resulting values:
Value A:
E_app (F2 "calloc" "") []
Value B:
E_app (F2 "calloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3310 -> rpl_calloc_3310 and rpl_calloc_4601 -> rpl_calloc_4601 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3310_ret -> rpl_calloc_3310_ret and rpl_calloc_4601_ret -> rpl_calloc_4601_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3310_ret -> rpl_calloc_3310_ret and rpl_calloc_4601_ret -> rpl_calloc_4601_ret have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3288 -> rpl_calloc_3290 and rpl_calloc_4568 -> rpl_calloc_4571

same_behavior checking these two SStates:

SA || RCX := Value: 1
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RCX := Value: 1
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_val 1 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3288 -> rpl_calloc_3290 and rpl_calloc_4568 -> rpl_calloc_4571 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3291 -> rpl_calloc_3298 and rpl_calloc_4572 -> rpl_calloc_4582

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_reg RDI),(RDX,E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL)(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
 [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_reg RDI),(RDX,E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RSI),(RCX,E_reg RDI),(RDX,E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3291 -> rpl_calloc_3298 and rpl_calloc_4572 -> rpl_calloc_4582 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3299 -> rpl_calloc_3299 and rpl_calloc_4583 -> rpl_calloc_4585

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3299 -> rpl_calloc_3299 and rpl_calloc_4583 -> rpl_calloc_4585 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3300 -> rpl_calloc_3300 and rpl_calloc_4586 -> rpl_calloc_4586

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3300 -> rpl_calloc_3300 and rpl_calloc_4586 -> rpl_calloc_4586 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3301 -> rpl_calloc_3304 and rpl_calloc_4587 -> rpl_calloc_4593

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || [Reg: RAX,4] := Value: 12
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || [Reg: RAX,4] := Value: 12
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_val 12 32
E_val 12 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_calloc_3301 -> rpl_calloc_3304 and rpl_calloc_4587 -> rpl_calloc_4593 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (48/60): "xalloc_die"
--------
.dot code for CFG of text section xalloc_die for Vanilla
diGraph xalloc_die_Vanilla{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_3269]"]
	xalloc_die_1  [label="[xalloc_die_3270,xalloc_die_3270]"]
	xalloc_die_2  [label="[xalloc_die_3271,xalloc_die_3275]"]
	xalloc_die_3  [label="[xalloc_die_3276,xalloc_die_3276]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
--------
.dot code for CFG of text section xalloc_die for Randomized
diGraph xalloc_die_Randomized{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_4542]"]
	xalloc_die_1  [label="[xalloc_die_4543,xalloc_die_4543]"]
	xalloc_die_2  [label="[xalloc_die_4544,xalloc_die_4550]"]
	xalloc_die_3  [label="[xalloc_die_4551,xalloc_die_4551]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xalloc_die"
node 0:
RBX := Dereference: [(Var: xalloc_die_3266 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.1_3,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str_1,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Randomized":
Current text section: "xalloc_die"
node 0:
RBX := Dereference: [(Var: xalloc_die_4535 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.1_3,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

same_behavior for the nodes: xalloc_die -> xalloc_die_3269 and xalloc_die -> xalloc_die_4542

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: xalloc_die_3266 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.1_3,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Dereference: [(Var: xalloc_die_4535 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.1_3,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_var "xalloc_die_4535" 64,E_var "exit_failure" 64]) 4),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.1_3" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_var "xalloc_die_4535" 64,E_var "exit_failure" 64]) 4),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.1_3" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_var "xalloc_die_4535" 64,E_var "exit_failure" 64]) 4),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.1_3" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RBX,E_deref (E_app (Op ADD) [E_var "xalloc_die_4535" 64,E_var "exit_failure" 64]) 4),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.1_3" 64) 4)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "xalloc_die_3266" 64,E_var "exit_failure" 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_var "xalloc_die_4535" 64,E_var "exit_failure" 64]) 4
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.1_3" 64) 4
Value B:
E_deref (E_var ".str.1_3" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xalloc_die -> xalloc_die_3269 and xalloc_die -> xalloc_die_4542 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3270 -> xalloc_die_3270 and xalloc_die_4543 -> xalloc_die_4543

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3270 -> xalloc_die_3270 and xalloc_die_4543 -> xalloc_die_4543 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3271 -> xalloc_die_3275 and xalloc_die_4544 -> xalloc_die_4550

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str_1,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_app (TakeBits 31 0) [E_reg RBX]),(RSI,E_val 0 32)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_app (TakeBits 31 0) [E_reg RBX]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_app (TakeBits 31 0) [E_reg RBX]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_app (TakeBits 31 0) [E_reg RBX]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 4),(RDI,E_app (TakeBits 31 0) [E_reg RBX]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str_1" 64) 4
Value B:
E_deref (E_var ".str_2" 64) 4
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RBX]
Value B:
E_app (TakeBits 31 0) [E_reg RBX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3271 -> xalloc_die_3275 and xalloc_die_4544 -> xalloc_die_4550 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3276 -> xalloc_die_3276 and xalloc_die_4551 -> xalloc_die_4551

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3276 -> xalloc_die_3276 and xalloc_die_4551 -> xalloc_die_4551 have been verified to do the same.

Label relationship:
.str_1 <--> .str_2
 <--> 
.str.1_3 <--> .str.1_3
exit_failure <--> exit_failure
xalloc_die_3266 <--> xalloc_die_4535

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (49/60): "emit_bug_reporting_address"
--------
.dot code for CFG of text section emit_bug_reporting_address for Vanilla
diGraph emit_bug_reporting_address_Vanilla{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_2874]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_2875,emit_bug_reporting_address_2875]"]
	emit_bug_reporting_address_2  [label="[emit_bug_reporting_address_2876,emit_bug_reporting_address_2880]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_2881,emit_bug_reporting_address_2881]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_2882,emit_bug_reporting_address_2884]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_2885,emit_bug_reporting_address_2885]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_2886,emit_bug_reporting_address_2890]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_2891,emit_bug_reporting_address_2891]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_2892,emit_bug_reporting_address_2894]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_2895,emit_bug_reporting_address_2895]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_2896,emit_bug_reporting_address_2898]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_2899,emit_bug_reporting_address_2899]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_2899_ret,emit_bug_reporting_address_2899_ret]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bug_reporting_address_12;

}
--------
--------
.dot code for CFG of text section emit_bug_reporting_address for Randomized
diGraph emit_bug_reporting_address_Randomized{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_4021]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_4022,emit_bug_reporting_address_4022]"]
	emit_bug_reporting_address_2  [label="[emit_bug_reporting_address_4023,emit_bug_reporting_address_4029]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_4030,emit_bug_reporting_address_4030]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_4031,emit_bug_reporting_address_4034]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_4035,emit_bug_reporting_address_4035]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_4036,emit_bug_reporting_address_4042]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_4043,emit_bug_reporting_address_4043]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_4044,emit_bug_reporting_address_4047]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_4048,emit_bug_reporting_address_4048]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_4049,emit_bug_reporting_address_4052]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_4053,emit_bug_reporting_address_4053]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_4053_ret,emit_bug_reporting_address_4053_ret]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bu(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == Var: RSP0 && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == Var: RSP0 && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
g_reporting_address_12;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Vanilla":
Current text section: "emit_bug_reporting_address"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.14_0,4]
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.15_0,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.16,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.19,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_2896 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
skip'
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Randomized":
Current text section: "emit_bug_reporting_address"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.14_0,4]
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.15_0,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.16,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.19,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_4050 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
skip'
--------

same_behavior for the nodes: emit_bug_reporting_address -> emit_bug_reporting_address_2874 and emit_bug_reporting_address -> emit_bug_reporting_address_4021

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.14_0,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.14_0,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.14_0" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.14_0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.14_0" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.14_0" 64) 4
Value B:
E_deref (E_var ".str.14_0" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address -> emit_bug_reporting_address_2874 and emit_bug_reporting_address -> emit_bug_reporting_address_4021 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2875 -> emit_bug_reporting_address_2875 and emit_bug_reporting_address_4022 -> emit_bug_reporting_address_4022

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2875 -> emit_bug_reporting_address_2875 and emit_bug_reporting_address_4022 -> emit_bug_reporting_address_4022 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2876 -> emit_bug_reporting_address_2880 and emit_bug_reporting_address_4023 -> emit_bug_reporting_address_4029

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.15_0,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.15_0,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.15_0" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.15_0" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.15_0" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.15_0" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.15_0" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.15_0" 64) 4
Value B:
E_deref (E_var ".str.15_0" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 64
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2876 -> emit_bug_reporting_address_2880 and emit_bug_reporting_address_4023 -> emit_bug_reporting_address_4029 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2881 -> emit_bug_reporting_address_2881 and emit_bug_reporting_address_4030 -> emit_bug_reporting_address_4030

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2881 -> emit_bug_reporting_address_2881 and emit_bug_reporting_address_4030 -> emit_bug_reporting_address_4030 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2882 -> emit_bug_reporting_address_2884 and emit_bug_reporting_address_4031 -> emit_bug_reporting_address_4034

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.16,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.16,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.16" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.16" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.16" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.16" 64) 4
Value B:
E_deref (E_var ".str.16" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2882 -> emit_bug_reporting_address_2884 and emit_bug_reporting_address_4031 -> emit_bug_reporting_address_4034 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2885 -> emit_bug_reporting_address_2885 and emit_bug_reporting_address_4035 -> emit_bug_reporting_address_4035

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2885 -> emit_bug_reporting_address_2885 and emit_bug_reporting_address_4035 -> emit_bug_reporting_address_4035 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2886 -> emit_bug_reporting_address_2890 and emit_bug_reporting_address_4036 -> emit_bug_reporting_address_4042

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 64),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.18" 64) 4
Value B:
E_deref (E_var ".str.18" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.17" 64) 4
Value B:
E_deref (E_var ".str.17" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 64
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2886 -> emit_bug_reporting_address_2890 and emit_bug_reporting_address_4036 -> emit_bug_reporting_address_4042 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2891 -> emit_bug_reporting_address_2891 and emit_bug_reporting_address_4043 -> emit_bug_reporting_address_4043

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2891 -> emit_bug_reporting_address_2891 and emit_bug_reporting_address_4043 -> emit_bug_reporting_address_4043 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2892 -> emit_bug_reporting_address_2894 and emit_bug_reporting_address_4044 -> emit_bug_reporting_address_4047

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.19,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.19,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.19" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.19" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.19" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.19" 64) 4
Value B:
E_deref (E_var ".str.19" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2892 -> emit_bug_reporting_address_2894 and emit_bug_reporting_address_4044 -> emit_bug_reporting_address_4047 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2895 -> emit_bug_reporting_address_2895 and emit_bug_reporting_address_4048 -> emit_bug_reporting_address_4048

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2895 -> emit_bug_reporting_address_2895 and emit_bug_reporting_address_4048 -> emit_bug_reporting_address_4048 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2896 -> emit_bug_reporting_address_2898 and emit_bug_reporting_address_4049 -> emit_bug_reporting_address_4052

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_2896 + Var: stdout),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_4050 + Var: stdout),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_4050" 64,E_var "stdout" 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_4050" 64,E_var "stdout" 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_4050" 64,E_var "stdout" 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
var "emit_bug_reporting_address_2896" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_4050" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2896 -> emit_bug_reporting_address_2898 and emit_bug_reporting_address_4049 -> emit_bug_reporting_address_4052 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2899 -> emit_bug_reporting_address_2899 and emit_bug_reporting_address_4053 -> emit_bug_reporting_address_4053

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2899 -> emit_bug_reporting_address_2899 and emit_bug_reporting_address_4053 -> emit_bug_reporting_address_4053 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2899_ret -> emit_bug_reporting_address_2899_ret and emit_bug_reporting_address_4053_ret -> emit_bug_reporting_address_4053_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2899_ret -> emit_bug_reporting_address_2899_ret and emit_bug_reporting_address_4053_ret -> emit_bug_reporting_address_4053_ret have been verified to do the same.

Label relationship:
stdout <--> stdout
emit_bug_reporting_address_2896 <--> emit_bug_reporting_address_4050
.str.19 <--> .str.19
.str.17 <--> .str.17
.str.18 <--> .str.18
.str.16 <--> .str.16
.str.15_0 <--> .str.15_0
 <--> 
.str.14_0 <--> .str.14_0

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (50/60): "quotearg_free"
--------
.dot code for CFG of text section quotearg_free for Vanilla
diGraph quotearg_free_Vanilla{
	quotearg_free_0  [label="[quotearg_free_1733,quotearg_free_1735]"]
	quotearg_free_1  [label="[.label_146,.label_146]"]
	quotearg_free_2  [label="[quotearg_free_1738,quotearg_free_1738]"]
	quotearg_free_3  [label="[quotearg_free_1739,quotearg_free_1743]"]
	quotearg_free_4  [label="[quotearg_free_1749,quotearg_free_1749]"]
	quotearg_free_5  [label="[quotearg_free_1750,quotearg_free_1751]"]
	quotearg_free_6  [label="[quotearg_free_1756,quotearg_free_1756]"]
	quotearg_free_7  [label="[quotearg_free_1757,quotearg_free_1757]"]
	quotearg_free_8  [label="[quotearg_free_1758,quotearg_free_1758]"]
	quotearg_free_9  [label="[.label_145,quotearg_free_1764]"]
	quotearg_free_10  [label="[.label_147,quotearg_free_1755]"]
	quotearg_free_11  [label="[.label_144,quotearg_free_1748]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_1732]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_3;
	quotearg_free_3 -> quotearg_free_1 [label="SF != OF"];
	quotearg_free_3 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_4 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_11 [label="SF != OF"];
	quotearg_free_12 -> quotearg_free_0 [label="SF == OF"];
}
--------
--------
.dot code for CFG of text section quotearg_free for Randomized
diGraph quotearg_free_Randomized{
	quotearg_free_0  [label="[quotearg_free_2446,quotearg_free_2448]"]
	quotearg_free_1  [label="[.label_148,quotearg_free_2451]"]
	quotearg_free_2  [label="[quotearg_free_2452,quotearg_free_2452]"]
	quotearg_free_3  [label="[quotearg_free_2453,quotearg_free_2461]"]
	quotearg_free_4  [label="[quotearg_free_2471,quotearg_free_2471]"]
	quotearg_free_5  [label="[quotearg_free_2472,quotearg_free_2475]"]
	quotearg_free_6  [label="[quotearg_free_2480,quotearg_free_2480]"]
	quotearg_free_7  [label="[quotearg_free_2481,quotearg_free_2481]"]
	quotearg_free_8  [label="[quotearg_free_2482,quotearg_free_2483]"]
	quotearg_free_9  [label="[.label_146,quotearg_free_2490]"]
	quotearg_free_10  [label="[.label_147,quotearg_free_2479]"]
	quotearg_free_11  [label="[.label_144,quotearg_free_2470]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_2445]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_3;
	quotearg_free_3 -> quotearg_free_1 [label="SF != OF"];
	quotearg_free_3 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_4 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_11 [label="SF != OF"];
	quotearg_free_12 -> quotearg_free_0 [label="SF == OF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 --SF != OF--> 1, 3 --SF == OF--> 11, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 4, 12 --SF != OF--> 11, 12 --SF == OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_free"
node 0:
RBX := Value: 1, R15 := (Reg: R14 + Value: 24)
node 1:
RDI := Dereference: [Reg: R15,8]
node 2:
RAX := free@()
node 3:
RAX := sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64))
node 4:
RAX := free@()
node 5:
[(Var: quotearg_free_1750 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_148),8] := Dereference: [Var: slot0,8]
node 6:
RDI := Reg: R14
node 7:
RAX := free@()
node 8:
[(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: .label_145 + Var: nslots),4] := Value: 1
node 10:
RAX := Dereference: [Var: slotvec0,4]
ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])
node 11:
RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])
node 12:
R14 := Dereference: [(Var: quotearg_free_1730 + Var: slotvec),8]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
: 2), OF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2)
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 --SF != OF--> 1, 3 --SF == OF--> 11, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 4, 12 --SF != OF--> 11, 12 --SF == OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_free"
node 0:
RBX := Value: 1, R15 := (Reg: R14 + Value: 24)
node 1:
RDI := Dereference: [Reg: R15,8]
node 2:
RAX := free@()
node 3:
RAX := sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64))
node 4:
RAX := free@()
node 5:
[(Var: quotearg_free_2473 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_145),8] := Dereference: [Var: slot0,8]
node 6:
RDI := Reg: R14
node 7:
RAX := free@()
node 8:
[(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: .label_146 + Var: nslots),4] := Value: 1
node 10:
RAX := Dereference: [Var: slotvec0,4]
ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])
node 11:
RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])
node 12:
R14 := Dereference: [(Var: quotearg_free_2443 + Var: slotvec),8]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2)
--------

same_behavior for the nodes: quotearg_free -> quotearg_free_1732 and quotearg_free -> quotearg_free_2445

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: quotearg_free_1730 + Var: slotvec),8]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_1731 + Var: nslots),4],Value: 2)

SB || R14 := Dereference: [(Var: quotearg_free_2443 + Var: slotvec),8]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_2444 + Var: nslots),4],Value: 2)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_deref (E_app (Op ADD) [E_var "quotearg_free_2443" 64,E_var "slotvec" 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_free_1730" 64,E_var "slotvec" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_free_2443" 64,E_var "slotvec" 64]) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_free -> quotearg_free_1732 and quotearg_free -> quotearg_free_2445 have been verified to do the same.

same_behavior for the nodes: .label_144 -> quotearg_free_1748 and .label_144 -> quotearg_free_2470

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
SA || ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
SB || ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_144 -> quotearg_free_1748 and .label_144 -> quotearg_free_2470 have been verified to do the same.

same_behavior for the nodes: .label_147 -> quotearg_free_1755 and .label_147 -> quotearg_free_2479

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec0,4]
SA || ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])

SB || RAX := Dereference: [Var: slotvec0,4]
SB || ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 4)]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_147 -> quotearg_free_1755 and .label_147 -> quotearg_free_2479 have been verified to do the same.

same_behavior for the nodes: .label_145 -> quotearg_free_1764 and .label_146 -> quotearg_free_2490

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: .label_145 + Var: nslots),4] := Value: 1

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: .label_146 + Var: nslots),4] := Value: 1

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R15fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R15,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_145" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var ".label_146" 64,E_var "nslots" 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_145 -> quotearg_free_1764 and .label_146 -> quotearg_free_2490 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1756 -> quotearg_free_1756 and quotearg_free_2480 -> quotearg_free_2480

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg R14)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1756 -> quotearg_free_1756 and quotearg_free_2480 -> quotearg_free_2480 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1757 -> quotearg_free_1757 and quotearg_free_2481 -> quotearg_free_2481

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1757 -> quotearg_free_1757 and quotearg_free_2481 -> quotearg_free_2481 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1758 -> quotearg_free_1758 and quotearg_free_2482 -> quotearg_free_2483

same_behavior checking these two SStates:

SA || [(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]

SB || [(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "slotvec" 64]
(v1 := v2):
E_deref (E_var "slotvec0" 64) 8
E_deref (E_var "slotvec0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_1758 -> quotearg_free_1758 and quotearg_free_2482 -> quotearg_free_2483 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1749 -> quotearg_free_1749 and quotearg_free_2471 -> quotearg_free_2471

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1749 -> quotearg_free_1749 and quotearg_free_2471 -> quotearg_free_2471 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1750 -> quotearg_free_1751 and quotearg_free_2472 -> quotearg_free_2475

same_behavior checking these two SStates:

SA || [(Var: quotearg_free_1750 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_148),8] := Dereference: [Var: slot0,8]

SB || [(Var: quotearg_free_2473 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_145),8] := Dereference: [Var: slot0,8]

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_free_1750" 64,E_var "slotvec0" 64]
E_app (Op ADD) [E_var "quotearg_free_2473" 64,E_var "slotvec0" 64]
(v1 := v2):
E_val 256 64
E_val 256 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "label_148" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "label_145" 64]
(v1 := v2):
E_deref (E_var "slot0" 64) 8
E_deref (E_var "slot0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_1750 -> quotearg_free_1751 and quotearg_free_2472 -> quotearg_free_2475 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1733 -> quotearg_free_1735 and quotearg_free_2446 -> quotearg_free_2448

same_behavior checking these two SStates:

SA || RBX := Value: 1, R15 := (Reg: R14 + Value: 24)

SB || RBX := Value: 1, R15 := (Reg: R14 + Value: 24)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_val 1 32),(R15,E_app (Op ADD) [E_reg R14,E_val 24 64])]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RBX,E_val 1 32),(R15,E_app (Op ADD) [E_reg R14,E_val 24 64])]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 24 64]
Value B:
E_app (Op ADD) [E_reg R14,E_val 24 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1733 -> quotearg_free_1735 and quotearg_free_2446 -> quotearg_free_2448 have been verified to do the same.

same_behavior for the nodes: .label_146 -> .label_146 and .label_148 -> quotearg_free_2451

same_behavior checking these two SStates:

SA || RDI := Dereference: [Reg: R15,8]

SB || RDI := Dereference: [Reg: R15,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_reg R15) 8)]
Resulting values:
Value A:
E_deref (E_reg R15) 8
Value B:
E_deref (E_reg R15) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_146 -> .label_146 and .label_148 -> quotearg_free_2451 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1738 -> quotearg_free_1738 and quotearg_free_2452 -> quotearg_free_2452

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1738 -> quotearg_free_1738 and quotearg_free_2452 -> quotearg_free_2452 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1739 -> quotearg_free_1743 and quotearg_free_2453 -> quotearg_free_2461

same_behavior checking these two SStates:

SA || RAX := sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64), RBX :(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
= (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
SA || ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1740 + Var: nslots),4],32,64))

SB || RAX := sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
SB || ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_2456 + Var: nslots),4],32,64))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_2456" 64,E_var "nslots" 64]) 4]),(RBX,E_app (Op ADD) [E_reg RBX,E_val 1 8]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg R15,E_val 16 64])]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_2456" 64,E_var "nslots" 64]) 4]),(RBX,E_app (Op ADD) [E_reg RBX,E_val 1 8]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg R15,E_val 16 64])]
reg_chk debug R15fromList [(RIP,E_var "returned" 64),(RAX,E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_2456" 64,E_var "nslots" 64]) 4]),(RBX,E_app (Op ADD) [E_reg RBX,E_val 1 8]),(RSI,E_reg RSI),(R15,E_app (Op ADD) [E_reg R15,E_val 16 64])]
Resulting values:
Value A:
E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_1740" 64,E_var "nslots" 64]) 4]
Value B:
E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_2456" 64,E_var "nslots" 64]) 4]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 16 64]
Value B:
E_app (Op ADD) [E_reg R15,E_val 16 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1739 -> quotearg_free_1743 and quotearg_free_2453 -> quotearg_free_2461 have been verified to do the same.

Label relationship:
quotearg_free_1740 <--> quotearg_free_2456
label_148 <--> label_145
quotearg_free_1750 <--> quotearg_free_2473
returned <--> returned
 <--> 
nslots <--> nslots
.label_145 <--> .label_146
slotvec0 <--> slotvec0
slot0 <--> slot0
slotvec <--> slotvec
quotearg_free_1730 <--> quotearg_free_2443

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (51/60): "set_custom_quoting"
--------
.dot code for CFG of text section set_custom_quoting for Vanilla
diGraph set_custom_quoting_Vanilla{
	set_custom_quoting_0  [label="[set_custom_quoting_404,set_custom_quoting_406]"]
	set_custom_quoting_1  [label="[set_custom_quoting_402,set_custom_quoting_403]"]
	set_custom_quoting_2  [label="[.label_17,.label_17]"]
	set_custom_quoting_3  [label="[set_custom_quoting_409,set_custom_quoting_409]"]
	set_custom_quoting_4  [label="[set_custom_quoting,set_custom_quoting_401]"]


	set_custom_quoting_1 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_1 -> set_custom_quoting_0 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3;

	set_custom_quoting_4 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_custom_quoting for Randomized
diGraph set_custom_quoting_Randomized{
	set_custom_quoting_0  [label="[set_custom_quoting_555,set_custom_quoting_559]"]
	set_custom_quoting_1  [label="[set_custom_quoting_552,set_custom_quoting_554]"]
	set_custom_quoting_2  [label="[.label_17,set_custom_quoting_562]"]
	set_custom_quoting_3  [label="[set_custom_quoting_563,set_custom_quoting_563]"]
	set_custom_quoting_4  [label="[set_custom_quoting,set_custom_quoting_551]"]


	set_custom_quoting_1 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_1 -> set_custom_quoting_0 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3;

	set_custom_quoting_4 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_1 [label="!ZF"];
}
--------
Starting Node: 4

Edges: , 1 --ZF--> 2, 1 --!ZF--> 0, 2 ----> 3, , 4 --ZF--> 2, 4 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "set_custom_quoting"
node 0:
[(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX
node 1:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 2:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := abort@()
node 4:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 4

Edges: , 1 --ZF--> 2, 1 --!ZF--> 0, 2 ----> 3, , 4 --ZF--> 2, 4 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "set_custom_quoting"
node 0:
[(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX
node 1:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 2:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := abort@()
node 4:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: set_custom_quoting -> set_custom_quoting_401 and set_custom_quoting -> set_custom_quoting_551

same_behavior checking these two SStates:

SA || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SA || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
E_ite (E_app (F !=) [E_(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
(v1 := v2):
E_val 10 32
E_val 10 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_custom_quoting -> set_custom_quoting_401 and set_custom_quoting -> set_custom_quoting_551 have been verified to do the same.

same_behavior for the nodes: .label_17 -> .label_17 and .label_17 -> set_custom_quoting_562

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_17 -> .label_17 and .label_17 -> set_custom_quoting_562 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_409 -> set_custom_quoting_409 and set_custom_quoting_563 -> set_custom_quoting_563

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_409 -> set_custom_quoting_409 and set_custom_quoting_563 -> set_custom_quoting_563 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_402 -> set_custom_quoting_403 and set_custom_quoting_552 -> set_custom_quoting_554

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_402 -> set_custom_quoting_403 and set_custom_quoting_552 -> set_custom_quoting_554 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_404 -> set_custom_quoting_406 and set_custom_quoting_555 -> set_custom_quoting_559

same_behavior checking these two SStates:

SA || [(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX

SB || [(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RAX,E_val 40 64]
E_app (Op ADD) [E_reg RAX,E_val 40 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RAX,E_val 48 64]
E_app (Op ADD) [E_reg RAX,E_val 48 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_custom_quoting_404 -> set_custom_quoting_406 and set_custom_quoting_555 -> set_custom_quoting_559 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (52/60): "set_quoting_flags"
--------
.dot code for CFG of text section set_quoting_flags for Vanilla
diGraph set_quoting_flags_Vanilla{
	set_quoting_flags_0  [label="[set_quoting_flags,set_quoting_flags_387]"]


}
--------
--------
.dot code for CFG of text section set_quoting_flags for Randomized
diGraph set_quoting_flags_Randomized{
	set_quoting_flags_0  [label="[set_quoting_flags,set_quoting_flags_535]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_quoting_flags -> set_quoting_flags_387 and set_quoting_flags -> set_quoting_flags_535

same_behavior checking these two SStates:

SA || RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SA || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4),(RCX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4))]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4),(RCX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4))]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_quoting_flags -> set_quoting_flags_387 and set_quoting_flags -> set_quoting_flags_535 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (53/60): "set_char_quoting"
------(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
--
.dot code for CFG of text section set_char_quoting for Vanilla
diGraph set_char_quoting_Vanilla{
	set_char_quoting_0  [label="[set_char_quoting,set_char_quoting_373]"]


}
--------
--------
.dot code for CFG of text section set_char_quoting for Randomized
diGraph set_char_quoting_Randomized{
	set_char_quoting_0  [label="[set_char_quoting,set_char_quoting_518]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_char_quoting"
node 0:
RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_char_quoting"
node 0:
RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
--------

same_behavior for the nodes: set_char_quoting -> set_char_quoting_373 and set_char_quoting -> set_char_quoting_518

same_behavior checking these two SStates:

SA || RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
SA || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
SA || ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])

SB || RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
SB || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
SB || ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
reg_chk debug RDIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
reg_chk debug RSIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
reg_chk debug R9fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
reg_chk debug R8fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]),(RCX,E_app (TakeBits 31 0) [E_reg RSI]),(RDI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]),(RSI,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(R9,E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4),(R8,E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8])]
Resulting values:
Value A:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
Value B:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4
Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]
(v1 := v2):
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_char_quoting -> set_char_quoting_373 and set_char_quoting -> set_char_quoting_518 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (54/60): "set_quoting_style"
--------
.dot code for CFG of text section set_quoting_style for Vanilla
diGraph set_quoting_style_Vanilla{
	set_quoting_style_0  [label="[set_quoting_style,set_quoting_style_347]"]


}
--------
--------
.dot code for CFG of text section set_quoting_style for Randomized
diGraph set_quoting_style_Randomized{
	set_quoting_style_0  [label="[set_quoting_style,set_quoting_style_476]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_style"
node 0:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_style"
node 0:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_quoting_style -> set_quoting_style_347 and set_quoting_style -> set_quoting_style_476

same_behavior checking these two SStates:

SA || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI el(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
se Dereference: [Var: default_quoting_options,4])
SA || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_quoting_style -> set_quoting_style_347 and set_quoting_style -> set_quoting_style_476 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (55/60): "get_quoting_style"
--------
.dot code for CFG of text section get_quoting_style for Vanilla
diGraph get_quoting_style_Vanilla{
	get_quoting_style_0  [label="[get_quoting_style,get_quoting_style_334]"]


}
--------
--------
.dot code for CFG of text section get_quoting_style for Randomized
diGraph get_quoting_style_Randomized{
	get_quoting_style_0  [label="[get_quoting_style,get_quoting_style_461]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: get_quoting_style -> get_quoting_style_334 and get_quoting_style -> get_quoting_style_461

same_behavior checking these two SStates:

SA || RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)) 4),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Value B:
E_deref (E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes get_quoting_style -> get_quoting_style_334 and get_quoting_style -> get_quoting_style_461 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (56/60): "set_program_name"
--------
.dot code for CFG of text section set_program_name for Vanilla
diGraph set_program_name_Vanilla{
	set_program_name_0  [label="[set_program_name_277,set_program_name_278]"]
	set_program_name_1  [label="[.label_16,.label_16]"]
	set_program_name_2  [label="[set_program_name_271,set_program_name_273]"]
	set_program_name_3  [label="[set_program_name_274,set_program_name_274]"]
	set_program_name_4  [label="[set_program_name_275,set_program_name_276]"]
	set_program_name_5  [label="[set_program_name_265,set_program_name_267]"]
	set_program_name_6  [label="[set_program_name_268,set_program_name_268]"]
	set_program_name_7  [label="[set_program_name_269,set_program_name_270]"]
	set_program_name_8  [label="[.label_14,set_program_name_287]"]
	set_program_name_9  [label="[set_program_name_255,set_program_name_256]"]
	set_program_name_10  [label="[set_program_name_257,set_program_name_257]"]
	set_program_name_11  [label="[set_program_name_258,set_program_name_264]"]
	set_program_name_12  [label="[.label_15,set_program_name_292]"]
	set_program_name_13  [label="[set_program_name_293,set_program_name_293]"]
	set_program_name_14  [label="[set_program_name_294,set_program_name_294]"]
	set_program_name_15  [label="[set_program_name,set_program_name_254]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_8;
	set_program_name_2 -> set_program_name_3;
	set_program_name_3 -> set_program_name_4;
	set_program_name_4 -> set_program_name_1 [label="!ZF"];
	set_program_name_4 -> set_program_name_0 [label="ZF"];
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_7;
	set_program_name_7 -> set_program_name_8 [label="!ZF"];
	set_program_name_7 -> set_program_name_2 [label="ZF"];

	set_program_name_9 -> set_program_name_10;
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_8 [label="SF != OF"];
	set_program_name_11 -> set_program_name_5 [label="SF == OF"];
	set_program_name_12 -> set_program_name_13;
	set_program_name_13 -> set_program_name_14;

	set_program_name_15 -> set_program_name_12 [label="ZF"];
	set_program_name_15 -> set_program_name_9 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_program_name for Randomized
diGraph set_program_name_Randomized{
	set_program_name_0  [label="[set_program_name_382,set_program_name_384]"]
	set_program_name_1  [label="[.label_15,set_program_name_387]"]
	set_program_name_2  [label="[set_program_name_371,set_program_name_376]"]
	set_program_name_3  [label="[set_program_name_377,set_program_name_377]"]
	set_program_name_4  [label="[set_program_name_378,set_program_name_381]"]
	set_program_name_5  [label="[set_program_name_364,set_program_name_367]"]
	set_program_name_6  [label="[set_program_name_368,set_program_name_368]"]
	set_program_name_7  [label="[set_program_name_369,set_program_name_370]"]
	set_program_name_8  [label="[.label_16,set_program_name_397]"]
	set_program_name_9  [label="[set_program_name_347,set_program_name_349]"]
	set_program_name_10  [label="[set_program_name_350,set_program_name_350]"]
	set_program_name_11  [label="[set_program_name_351,set_program_name_363]"]
	set_program_name_12  [label="[.label_14,set_program_name_405]"]
	set_program_name_13  [label="[set_program_name_406,set_program_name_406]"]
	set_program_name_14  [label="[set_program_name_407,set_program_name_407]"]
	set_program_name_15  [label="[set_program_name_408,set_program_name_408]"]
	set_program_name_16  [label="[set_program_name,set_program_name_346(15,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
(16,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == Var: RSP0 && RBP == Var: RBP0)])
]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_8;
	set_program_name_2 -> set_program_name_3;
	set_program_name_3 -> set_program_name_4;
	set_program_name_4 -> set_program_name_1 [label="!ZF"];
	set_program_name_4 -> set_program_name_0 [label="ZF"];
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_7;
	set_program_name_7 -> set_program_name_8 [label="!ZF"];
	set_program_name_7 -> set_program_name_2 [label="ZF"];

	set_program_name_9 -> set_program_name_10;
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_8 [label="SF != OF"];
	set_program_name_11 -> set_program_name_5 [label="SF == OF"];
	set_program_name_12 -> set_program_name_13;
	set_program_name_13 -> set_program_name_14;
	set_program_name_14 -> set_program_name_15;

	set_program_name_16 -> set_program_name_12 [label="ZF"];
	set_program_name_16 -> set_program_name_9 [label="!ZF"];
}
--------
Starting Node: 15

Edges: 0 ----> 1, 1 ----> 8, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 1, 4 --ZF--> 0, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 8, 7 --ZF--> 2, , 9 ----> 10, 10 ----> 11, 11 --SF != OF--> 8, 11 --SF == OF--> 5, 12 ----> 13, 13 ----> 14, , 15 --ZF--> 12, 15 --!ZF--> 9

Symbolic Execution for Binary "Vanilla":
Current text section: "set_program_name"
node 0:
R14 := (Reg: R14 + Value: 3)
[(Var: returned + Var: program_invocation_short_name),8] := (Reg: R14 + Value: 3)
ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)
node 1:
RBX := Reg: R14
node 2:
RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: .str.2_0,4]
node 3:
RAX := strncmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: .str.1_1,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
[(Var: .label_14 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_283 + Var: __progname_full),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 9:
RDI := Reg: RBX, RSI := Value: 47
node 10:
RAX := strrchr@()
node 11:
RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)
node 12:
RCX := Dereference: [(Var: .label_15 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: .str_3,4], RSI := Value: 55
node 13:
RAX := fwrite@()
node 14:
RAX := abort@()
node 15:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 16

Edges: 0 ----> 1, 1 ----> 8, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 1, 4 --ZF--> 0, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 8, 7 --ZF--> 2, , 9 ----> 10, 10 ----> 11, 11 --SF != OF--> 8, 11 --SF == OF--> 5, 12 ----> 13, 13 ----> 14, 14 ----> 15, , 16 --ZF--> 12, 16 --!ZF--> 9

Symbolic Execution for Binary "Randomized":
Current text section: "set_program_name"
node 0:
R14 := (Reg: R14 + Value: 3)
[(Var: returned + Var: program_invocation_short_name),8] := (Reg: R14 + Value: 3)
ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)
node 1:
RBX := Reg: R14
node 2:
RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: .str.2_0,4]
node 3:
RAX := strncmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: .str.1_1,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
[(Var: set_program_name_390 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_391 + Var: __progname_full),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 9:
RDI := Reg: RBX, RSI := Value: 47
node 10:
RAX := strrchr@()
node 11:
RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)
node 12:
RCX := Dereference: [(Var: .label_14 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: .str_3,4], RSI := Value: 55
node 13:
RAX := fwrite@()
node 14:
skip'
node 15:
RAX := abort@()
node 16:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_program_name -> set_program_name_254 and set_program_name -> set_program_name_346

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name -> set_program_name_254 and set_program_name -> set_program_name_346 have been verified to do the same.

same_behavior for the nodes: .label_15 -> set_program_name_292 and .label_14 -> set_program_name_405

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: .label_15 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: .str_3,4], RSI := Value: 55

SB || RCX := Dereference: [(Var: .label_14 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: .str_3,4], RSI := Value: 55

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_var ".label_14" 64,E_var "stderr" 64]) 8),(RDX,E_val 1 32),(RDI,E_deref (E_var ".str_3" 64) 4),(RSI,E_val 55 64)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_var ".label_14" 64,E_var "stderr" 64]) 8),(RDX,E_val 1 32),(RDI,E_deref (E_var ".str_3" 64) 4),(RSI,E_val 55 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_var ".label_14" 64,E_var "stderr" 64]) 8),(RDX,E_val 1 32),(RDI,E_deref (E_var ".str_3" 64) 4),(RSI,E_val 55 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op ADD) [E_var ".label_14" 64,E_var "stderr" 64]) 8),(RDX,E_val 1 32),(RDI,E_deref (E_var ".str_3" 64) 4),(RSI,E_val 55 64)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_15" 64,E_var "stderr" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var ".label_14" 64,E_var "stderr" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_var ".str_3" 64) 4
Value B:
E_deref (E_var ".str_3" 64) 4
Resulting values:
Value A:
E_val 55 32
Value B:
E_val 55 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_15 -> set_program_name_292 and .label_14 -> set_program_name_405 have been verified to do the same.

same_behavior for the nodes: set_program_name_293 -> set_program_name_293 and set_program_name_406 -> set_program_name_406

same_behavior checking these two SStates:

SA || RAX := fwrite@()

SB || RAX := fwrite@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fwrite" "") [])]
Resulting values:
Value A:
E_app (F2 "fwrite" "") []
Value B:
E_app (F2 "fwrite" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_293 -> set_program_name_293 and set_program_name_406 -> set_program_name_406 have been verified to do the same.

same_behavior for the nodes: set_program_name_294 -> set_program_name_294 and set_program_name_407 -> set_program_name_407

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: set_program_name_294 -> set_program_name_294 and set_program_name_408 -> set_program_name_408

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_294 -> set_program_name_294 and set_program_name_408 -> set_program_name_408 have been verified to do the same.

same_behavior for the nodes: set_program_name_255 -> set_program_name_256 and set_program_name_347 -> set_program_name_349

same_behavior checking these two SStates:

SA || RDI := Reg: RBX, RSI := Value: 47

SB || RDI := Reg: RBX, RSI := Value: 47

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_val 47 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RBX),(RSI,E_val 47 32)]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 47 32
Value B:
E_val 47 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_255 -> set_program_name_256 and set_program_name_347 -> set_program_name_349 have been verified to do the same.

same_behavior for the nodes: set_program_name_257 -> set_program_name_257 and set_program_name_350 -> set_program_name_350

same_behavior checking these two SStates:

SA || RAX := strrchr@()

SB || RAX := strrchr@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strrchr" "") [])]
Resulting values:
Value A:
E_app (F2 "strrchr" "") []
Value B:
E_app (F2 "strrchr" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_257 -> set_program_name_257 and set_program_name_350 -> set_program_name_350 have been verified to do the same.

same_behavior for the nodes: set_program_name_258 -> set_program_name_264 and set_program_name_351 -> set_program_name_363

same_behavior checking these two SStates:

SA || RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
SA || ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)

SB || RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
SB || ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]))]
reg_chk debug R14fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]))]
Resulting values:
Value A:
E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]
Value B:
E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64])
Value B:
E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64])
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_258 -> set_program_name_264 and set_program_name_351 -> set_program_name_363 have been verified to do the same.

same_behavior for the nodes: .label_14 -> set_program_name_287 and .label_16 -> set_program_name_397

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SA || [(Var: .label_14 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_283 + Var: __progname_full),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SB || [(Var: set_program_name_390 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_391 + Var: __progname_full),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
reg_chk debug R14fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI),(R14,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_14" 64,E_var "program_name" 64]
E_app (Op ADD) [E_var "set_program_name_390" 64,E_var "program_name" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_14" 64,E_var "program_name" 64]
E_app (Op ADD) [E_var "set_program_name_391" 64,E_var "__progname_full" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "set_program_name_283" 64,E_var "__progname_full" 64]
E_app (Op ADD) [E_var "set_program_name_390" 64,E_var "program_name" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "set_program_name_283" 64,E_var "__progname_full" 64]
E_app (Op ADD) [E_var "set_program_name_391" 64,E_var "__progname_full" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_14 -> set_program_name_287 and .label_16 -> set_program_name_397 have been verified to do the same.

same_behavior for the nodes: set_program_name_265 -> set_program_name_267 and set_program_name_364 -> set_program_name_367

same_behavior checking these two SStates:

SA || RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: .str.1_1,4]

SB || RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: .str.1_1,4]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 7 32),(RDI,E_app (Op SUB) [E_reg R14,E_val 7 64]),(RSI,E_deref (E_var ".str.1_1" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 7 32),(RDI,E_app (Op SUB) [E_reg R14,E_val 7 64]),(RSI,E_deref (E_var ".str.1_1" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 7 32),(RDI,E_app (Op SUB) [E_reg R14,E_val 7 64]),(RSI,E_deref (E_var ".str.1_1" 64) 4)]
Resulting values:
Value A:
E_val 7 32
Value B:
E_val 7 32
Resulting values:
Value A:
E_app (Op SUB) [E_reg R14,E_val 7 64]
Value B:
E_app (Op SUB) [E_reg R14,E_val 7 64]
Resulting values:
Value A:
E_deref (E_var ".str.1_1" 64) 4
Value B:
E_deref (E_var ".str.1_1" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_265 -> set_program_name_267 and set_program_name_364 -> set_program_name_367 have been verified to do the same.

same_behavior for the nodes: set_program_name_268 -> set_program_name_268 and set_program_name_368 -> set_program_name_368

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strncmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_268 -> set_program_name_268 and set_program_name_368 -> set_program_name_368 have been verified to do the same.

same_behavior for the nodes: set_program_name_269 -> set_program_name_270 and set_program_name_369 -> set_program_name_370

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_269 -> set_program_name_270 and set_program_name_369 -> set_program_name_370 have been verified to do the same.

same_behavior for the nodes: set_program_name_271 -> set_program_name_273 and set_program_name_371 -> set_program_name_376

same_behavior checking these two SStates:

SA || RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: .str.2_0,4]

SB || RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: .str.2_0,4]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg R14),(RSI,E_deref (E_var ".str.2_0" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg R14),(RSI,E_deref (E_var ".str.2_0" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg R14),(RSI,E_deref (E_var ".str.2_0" 64) 4)]
Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_var ".str.2_0" 64) 4
Value B:
E_deref (E_var ".str.2_0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_271 -> set_program_name_273 and set_program_name_371 -> set_program_name_376 have been verified to do the same.

same_behavior for the nodes: set_program_name_274 -> set_program_name_274 and set_program_name_377 -> set_program_name_377

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strncmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_274 -> set_program_name_274 and set_program_name_377 -> set_program_name_377 have been verified to do the same.

same_behavior for the nodes: set_program_name_275 -> set_program_name_276 and set_program_name_378 -> set_program_name_381

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: R(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
AX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_275 -> set_program_name_276 and set_program_name_378 -> set_program_name_381 have been verified to do the same.

same_behavior for the nodes: .label_16 -> .label_16 and .label_15 -> set_program_name_387

same_behavior checking these two SStates:

SA || RBX := Reg: R14

SB || RBX := Reg: R14

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_reg R14),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_16 -> .label_16 and .label_15 -> set_program_name_387 have been verified to do the same.

same_behavior for the nodes: set_program_name_277 -> set_program_name_278 and set_program_name_382 -> set_program_name_384

same_behavior checking these two SStates:

SA || R14 := (Reg: R14 + Value: 3)
SA || [(Var: returned + Var: program_invocation_short_name),8] := (Reg: R14 + Value: 3)
SA || ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)

SB || R14 := (Reg: R14 + Value: 3)
SB || [(Var: returned + Var: program_invocation_short_name),8] := (Reg: R14 + Value: 3)
SB || ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)

reg_chk debug R14fromList [(RIP,E_var "returned" 64),(R14,E_app (Op ADD) [E_reg R14,E_val 3 64])]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 3 64]
Value B:
E_app (Op ADD) [E_reg R14,E_val 3 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "program_invocation_short_name" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "program_invocation_short_name" 64]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 3 64]
E_app (Op ADD) [E_reg R14,E_val 3 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_program_name_277 -> set_program_name_278 and set_program_name_382 -> set_program_name_384 have been verified to do the same.

Label relationship:
program_invocation_short_name <--> program_invocation_short_name
returned <--> returned
.str.2_0 <--> .str.2_0
.str.1_1 <--> .str.1_1
__progname_full <--> __progname_full,program_name
set_program_name_283 <--> set_program_name_391,set_program_name_390
program_name <--> __progname_full,program_name
.label_14 <--> set_program_name_391,set_program_name_390
 <--> 
.str_3 <--> .str_3
stderr <--> stderr
.label_15 <--> .label_14

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (57/60): "close_stdout_set_ignore_EPIPE"
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Vanilla
diGraph close_stdout_set_ignore_EPIPE_Vanilla{
	close_stdout_set_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_176]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Randomized
diGraph close_stdout_set_ignore_EPIPE_Randomized{
	close_stdout_set_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_239]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
[(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
[(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)
--------

same_behavior for the nodes: close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_176 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_239

same_behavior checking these two SStates:

SA || [(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)

SB || [(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "close_stdout_set_ignore_EPIPE" 64,E_var "ignore_EPIPE" 64]
E_app (Op ADD) [E_var "close_stdout_set_ignore_EPIPE" 64,E_var "ignore_EPIPE" 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RDI]
E_app (TakeBits 7 0) [E_reg RDI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_176 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_239 have been verified to do the same.

Label relationship:
ignore_EPIPE <--> ignore_EPIPE
close_stdout_set_ignore_EPIPE <--> close_stdout_set_ignore_EPIPE

Local variable relationship:

Succesful check!
Considering text section (58/60): "close_stdout_set_file_name"
--------
.dot code for CFG of text section close_stdout_set_file_name for Vanilla
diGraph close_stdout_set_file_name_Vanilla{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_166]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_file_name for Randomized
diGraph close_stdout_set_file_name_Randomized{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_228]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_file_name"
node 0:
[(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_file_name"
node 0:
[(Var: close_stdout_set_file_name_226 + Var: file_name),8] := Reg: RDI
--------

same_behavior for the nodes: close_stdout_set_file_name -> close_stdout_set_file_name_166 and close_stdout_set_file_name -> close_stdout_set_file_name_228

same_behavior checking these two SStates:

SA || [(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI

SB || [(Var: close_stdout_set_file_name_226 + Var: file_name),8] := Reg: RDI

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "close_stdout_set_file_name" 64,E_var "file_name" 64]
E_app (Op ADD) [E_var "close_stdout_set_file_name_226" 64,E_var "file_name" 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True


Mem Chk: True
Result: Success
Nodes close_stdout_set_file_name -> close_stdout_set_file_name_166 and close_stdout_set_file_name -> close_stdout_set_file_name_228 have been verified to do the same.

Label relationship:
file_name <--> file_name
close_stdout_set_file_name <--> close_stdout_set_file_name_226

Local variable relationship:

Succesful check!
Considering text section (59/60): "usage"
--------
.dot code for CFG of text section usage for Vanilla
diGraph usage_Vanilla{
	usage_0  [label="[usage_76,usage_78]"]
	usage_1  [label="[usage_79,usage_79]"]
	usage_2  [label="[usage_80,usage_81]"]
	usage_3  [label="[usage_82,usage_82]"]
	usage_4  [label="[usage_70,usage_72]"]
	usage_5  [label="[usage_73,usage_73]"]
	usage_6  [label="[usage_74,usage_75]"]
	usage_7  [label="[.label_7,usage_86]"]
	usage_8  [label="[usage_87,usage_87]"]
	usage_9  [label="[usage_88,usage_92]"]
	usage_10  [label="[usage_93,usage_93]"]
	usage_11  [label="[usage_94,usage_96]"]
	usage_12  [label="[usage_97,usage_97]"]
	usage_13  [label="[usage_98,usage_102]"]
	usage_14  [label="[usage_103,usage_103]"]
	usage_15  [label="[usage_104,usage_104]"]
	usage_16  [label="[usage_105,usage_105]"]
	usage_17  [label="[usage,usage_12]"]
	usage_18  [label="[usage_13,usage_13]"]
	usage_19  [label="[usage_14,usage_19]"]
	usage_20  [label="[usage_20,usage_20]"]
	usage_21  [label="[usage_21,usage_23]"]
	usage_22  [label="[usage_24,usage_24]"]
	usage_23  [label="[usage_25,usage_29]"]
	usage_24  [label="[usage_30,usage_30]"]
	usage_2(17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(28,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(29,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(30,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(31,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(32,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(33,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(34,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(35,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(36,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(37,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(38,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(39,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(40,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(41,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(42,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(43,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
5  [label="[usage_31,usage_33]"]
	usage_26  [label="[usage_34,usage_34]"]
	usage_27  [label="[usage_35,usage_36]"]
	usage_28  [label="[usage_37,usage_37]"]
	usage_29  [label="[usage_38,usage_40]"]
	usage_30  [label="[usage_41,usage_41]"]
	usage_31  [label="[usage_42,usage_43]"]
	usage_32  [label="[usage_44,usage_44]"]
	usage_33  [label="[usage_45,usage_47]"]
	usage_34  [label="[usage_48,usage_48]"]
	usage_35  [label="[usage_49,usage_53]"]
	usage_36  [label="[usage_54,usage_54]"]
	usage_37  [label="[usage_55,usage_57]"]
	usage_38  [label="[usage_58,usage_58]"]
	usage_39  [label="[usage_59,usage_63]"]
	usage_40  [label="[usage_64,usage_64]"]
	usage_41  [label="[usage_65,usage_66]"]
	usage_42  [label="[usage_67,usage_67]"]
	usage_43  [label="[usage_68,usage_69]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_7;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7 [label="ZF"];
	usage_6 -> usage_0 [label="!ZF"];
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;

	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;
	usage_22 -> usage_23;
	usage_23 -> usage_24;
	usage_24 -> usage_25;
	usage_25 -> usage_26;
	usage_26 -> usage_27;
	usage_27 -> usage_28;
	usage_28 -> usage_29;
	usage_29 -> usage_30;
	usage_30 -> usage_31;
	usage_31 -> usage_32;
	usage_32 -> usage_33;
	usage_33 -> usage_34;
	usage_34 -> usage_35;
	usage_35 -> usage_36;
	usage_36 -> usage_37;
	usage_37 -> usage_38;
	usage_38 -> usage_39;
	usage_39 -> usage_40;
	usage_40 -> usage_41;
	usage_41 -> usage_42;
	usage_42 -> usage_43;
	usage_43 -> usage_7 [label="ZF"];
	usage_43 -> usage_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section usage for Randomized
diGraph usage_Randomized{
	usage_0  [label="[usage_103,usage_108]"]
	usage_1  [label="[usage_109,usage_109]"]
	usage_2  [label="[usage_110,usage_113]"]
	usage_3  [label="[usage_114,usage_114]"]
	usage_4  [label="[usage_95,usage_99]"]
	usage_5  [label="[usage_100,usage_100]"]
	usage_6  [label="[usage_101,usage_102]"]
	usage_7  [label="[.label_7,usage_119]"]
	usage_8  [label="[usage_120,usage_120]"]
	usage_9  [label="[usage_121,usage_130]"]
	usage_10  [label="[usage_131,usage_131]"]
	usage_11  [label="[usage_132,usage_135]"]
	usage_12  [label="[usage_136,usage_136]"]
	usage_13  [label="[usage_137,usage_143]"]
	usage_14  [label="[usage_144,usage_144]"]
	usage_15  [label="[usage_145,usage_146]"]
	usage_16  [label="[usage_147,usage_147]"]
	usage_17  [label="[usage,usage_14]"]
	usage_18  [label="[usage_15,usage_15]"]
	usage_19  [label="[usage_16,usage_23]"]
	usage_20  [label="[usage_24,usage_24]"]
	usage_21  [label="[usage_25,usage_27]"]
	usage_22  [label="[usage_28,usage_28]"]
	usage_23  [label="[usage_29,usage_35]"]
	usage_24  [label="[usage_36,usage_36]"]
	usage_25  [label="[usage_37,usage_40]"]
	usage_26  [label="[usage_41,usage_41]"]
	usage_27  [label="[usage_42,usage_44]"]
	usage_28  [label="[usage_45,usage_45]"]
	usage_29  [label="[usage_46,usage_50]"]
	usage_30  [label="[usage_51,usage_51]"]
	usage_31  [label="[usage_52,usage_53]"]
	usage_32  [label="[usage_54,usage_54]"]
	usage_33  [label="[usage_55,usage_60]"]
	usage_34  [label="[usage_61,usage_61]"]
	usage_35  [label="[usage_62,usage_69]"]
	usage_36  [label="[usage_70,usage_70]"]
	usage_37  [label="[usage_71,usage_76]"]
	usage_38  [label="[usage_77,usage_77]"]
	usage_39  [label="[usage_78,usage_84]"]
	usage_40  [label="[usage_85,usage_85]"]
	usage_41  [label="[usage_86,usage_90]"]
	usage_42  [label="[usage_91,usage_91]"]
	usage_43  [label="[usage_92,usage_94]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_7;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7 [label="ZF"];
	usage_6 -> usage_0 [label="!ZF"];
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;

	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;
	usage_22 -> usage_23;
	usage_23 -> usage_24;
	usage_24 -> usage_25;
	usage_25 -> usage_26;
	usage_26 -> usage_27;
	usage_27 -> usage_28;
	usage_28 -> usage_29;
	usage_29 -> usage_30;
	usage_30 -> usage_31;
	usage_31 -> usage_32;
	usage_32 -> usage_33;
	usage_33 -> usage_34;
	usage_34 -> usage_35;
	usage_35 -> usage_36;
	usage_36 -> usage_37;
	usage_37 -> usage_38;
	usage_38 -> usage_39;
	usage_39 -> usage_40;
	usage_40 -> usage_41;
	usage_41 -> usage_42;
	usage_42 -> usage_43;
	usage_43 -> usage_7 [label="ZF"];
	usage_43 -> usage_4 [label="!ZF"];
}
--------
Starting Node: 17

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 7, 4 ----> 5, 5 ----> 6, 6 --ZF--> 7, 6 --!ZF--> 0, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 23 ----> 24, 24 ----> 25, 25 ----> 26, 26 ----> 27, 27 ----> 28, 28 ----> 29, 29 ----> 30, 30 ----> 31, 31 ----> 32, 32 ----> 33, 33 ----> 34, 34 ----> 35, 35 ----> 36, 36 ----> 37, 37 ----> 38, 38 ----> 39, 39 ----> 40, 40 ----> 41, 41 ----> 42, 42 ----> 43, 43 --ZF--> 7, 43 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "usage"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.25,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_80 + Var: stdout),8]
node 3:
RAX := fputs_unlocked@()
node 4:
RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: .str.24,4]
node 5:
RAX := strncmp@()
node 6:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 7:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.26,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := dcgettext@()
node 9:
RAX := Value: 0, RCX := Dereference: [Var: .str.6,4], RDX := Dereference: [Var: .str.18,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := __printf_chk@()
node 11:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.27,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 12:
RAX := dcgettext@()
node 13:
RAX := Value: 0, RCX := Dereference: [Var: .str.28,4], RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 14:
RAX := __printf_chk@()
node 15:
RDI := TakeBits: <31,0>(Reg: RBX)
node 16:
RAX := exit@()
node 17:
RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := dcgettext@()
node 19:
RAX := Value: 0, RCX := Dereference: [(Var: usage_15 + Var: program_name),8], RDX := Dereference: [(Var: usage_15 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 20:
RAX := __printf_chk@()
node 21:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.2,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := dcgettext@()
node 23:
RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: .str.1,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 24:
RAX := __printf_chk@()
node 25:
RDX := Value: 5, RDI := Value: 0, (17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(24,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(28,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(29,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(30,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(31,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(32,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(33,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(34,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(35,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(36,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(37,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(38,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(39,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(40,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(41,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(42,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(43,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
RSI := Dereference: [Var: .str.3,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 26:
RAX := dcgettext@()
node 27:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_35 + Var: stdout),8]
node 28:
RAX := fputs_unlocked@()
node 29:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.4,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 30:
RAX := dcgettext@()
node 31:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_42 + Var: stdout),8]
node 32:
RAX := fputs_unlocked@()
node 33:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.5,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 34:
RAX := dcgettext@()
node 35:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 36:
RAX := __printf_chk@()
node 37:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.22,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 38:
RAX := dcgettext@()
node 39:
RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 40:
RAX := __printf_chk@()
node 41:
RDI := Value: 5, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 42:
RAX := setlocale@()
node 43:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

Starting Node: 17

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 7, 4 ----> 5, 5 ----> 6, 6 --ZF--> 7, 6 --!ZF--> 0, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 23 ----> 24, 24 ----> 25, 25 ----> 26, 26 ----> 27, 27 ----> 28, 28 ----> 29, 29 ----> 30, 30 ----> 31, 31 ----> 32, 32 ----> 33, 33 ----> 34, 34 ----> 35, 35 ----> 36, 36 ----> 37, 37 ----> 38, 38 ----> 39, 39 ----> 40, 40 ----> 41, 41 ----> 42, 42 ----> 43, 43 --ZF--> 7, 43 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "usage"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.25,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_110 + Var: stdout),8]
node 3:
RAX := fputs_unlocked@()
node 4:
RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: .str.24,4]
node 5:
RAX := strncmp@()
node 6:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 7:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.26,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := dcgettext@()
node 9:
RAX := Value: 0, RCX := Dereference: [Var: .str.6,4], RDX := Dereference: [Var: .str.18,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := __printf_chk@()
node 11:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.27,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 12:
RAX := dcgettext@()
node 13:
RAX := Value: 0, RCX := Dereference: [Var: .str.28,4], RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 14:
RAX := __printf_chk@()
node 15:
RDI := TakeBits: <31,0>(Reg: RBX)
node 16:
RAX := exit@()
node 17:
RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := dcgettext@()
node 19:
RAX := Value: 0, RCX := Dereference: [(Var: usage_18 + Var: program_name),8], RDX := Dereference: [(Var: usage_18 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 20:
RAX := __printf_chk@()
node 21:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.2,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := dcgettext@()
node 23:
RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: .str.1,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 24:
RAX := __printf_chk@()
node 25:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.3,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 26:
RAX := dcgettext@()
node 27:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_43 + Var: stdout),8]
node 28:
RAX := fputs_unlocked@()
node 29:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.4,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 30:
RAX := dcgettext@()
node 31:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_52 + Var: stdout),8]
node 32:
RAX := fputs_unlocked@()
node 33:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.5,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 34:
RAX := dcgettext@()
node 35:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 36:
RAX := __printf_chk@()
node 37:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.22,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 38:
RAX := dcgettext@()
node 39:
RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 40:
RAX := __printf_chk@()
node 41:
RDI := Value: 5, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 42:
RAX := setlocale@()
node 43:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

same_behavior for the nodes: usage -> usage_12 and usage -> usage_14

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RBX,E_app (TakeBits 31 0) [E_reg RDI]),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str" 64) 4)]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str" 64) 4
Value B:
E_deref (E_var ".str" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage -> usage_12 and usage -> usage_14 have been verified to do the same.

same_behavior for the nodes: usage_13 -> usage_13 and usage_15 -> usage_15

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_13 -> usage_13 and usage_15 -> usage_15 have been verified to do the same.

same_behavior for the nodes: usage_14 -> usage_19 and usage_16 -> usage_23

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: usage_15 + Var: program_name),8], RDX := Dereference: [(Var: usage_15 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: usage_18 + Var: program_name),8], RDX := Dereference: [(Var: usage_18 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDX,E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8),(RDI,E_val 1 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_15" 64,E_var "program_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_15" 64,E_var "program_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_18" 64,E_var "program_name" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_14 -> usage_19 and usage_16 -> usage_23 have been verified to do the same.

same_behavior for the nodes: usage_20 -> usage_20 and usage_24 -> usage_24

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_20 -> usage_20 and usage_24 -> usage_24 have been verified to do the same.

same_behavior for the nodes: usage_21 -> usage_23 and usage_25 -> usage_27

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.2,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.2,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.2" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.2" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.2" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.2" 64) 4
Value B:
E_deref (E_var ".str.2" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_21 -> usage_23 and usage_25 -> usage_27 have been verified to do the same.

same_behavior for the nodes: usage_24 -> usage_24 and usage_28 -> usage_28

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_24 -> usage_24 and usage_28 -> usage_28 have been verified to do the same.

same_behavior for the nodes: usage_25 -> usage_29 and usage_29 -> usage_35

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: .str.1,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: .str.1,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_reg RAX),(RDI,E_val 1 32),(RSI,E_deref (E_var ".str.1" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_reg RAX),(RDI,E_val 1 32),(RSI,E_deref (E_var ".str.1" 64) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_reg RAX),(RDI,E_val 1 32),(RSI,E_deref (E_var ".str.1" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_reg RAX),(RDI,E_val 1 32),(RSI,E_deref (E_var ".str.1" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_reg RAX),(RDI,E_val 1 32),(RSI,E_deref (E_var ".str.1" 64) 4)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_var ".str.1" 64) 4
Value B:
E_deref (E_var ".str.1" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_25 -> usage_29 and usage_29 -> usage_35 have been verified to do the same.

same_behavior for the nodes: usage_30 -> usage_30 and usage_36 -> usage_36

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_30 -> usage_30 and usage_36 -> usage_36 have been verified to do the same.

same_behavior for the nodes: usage_31 -> usage_33 and usage_37 -> usage_40

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.3,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.3,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.3" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.3" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.3" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.3" 64) 4
Value B:
E_deref (E_var ".str.3" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_31 -> usage_33 and usage_37 -> usage_40 have been verified to do the same.

same_behavior for the nodes: usage_34 -> usage_34 and usage_41 -> usage_41

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_34 -> usage_34 and usage_41 -> usage_41 have been verified to do the same.

same_behavior for the nodes: usage_35 -> usage_36 and usage_42 -> usage_44

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_35 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_43 + Var: stdout),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_43" 64,E_var "stdout" 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_43" 64,E_var "stdout" 64]) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_35" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_43" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_35 -> usage_36 and usage_42 -> usage_44 have been verified to do the same.

same_behavior for the nodes: usage_37 -> usage_37 and usage_45 -> usage_45

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_37 -> usage_37 and usage_45 -> usage_45 have been verified to do the same.

same_behavior for the nodes: usage_38 -> usage_40 and usage_46 -> usage_50

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.4,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.4,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.4" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.4" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.4" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_var ".str.4" 64) 4
Value B:
E_deref (E_var ".str.4" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_38 -> usage_40 and usage_46 -> usage_50 have been verified to do the same.

same_behavior for the nodes: usage_41 -> usage_41 and usage_51 -> usage_51

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_41 -> usage_41 and usage_51 -> usage_51 have been verified to do the same.

same_behavior for the nodes: usage_42 -> usage_43 and usage_52 -> usage_53

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_42 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_52 + Var: stdout),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_52" 64,E_var "stdout" 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_52" 64,E_var "stdout" 64]) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_42" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_52" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_42 -> usage_43 and usage_52 -> usage_53 have been verified to do the same.

same_behavior for the nodes: usage_44 -> usage_44 and usage_54 -> usage_54

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_44 -> usage_44 and usage_54 -> usage_54 have been verified to do the same.

same_behavior for the nodes: usage_45 -> usage_47 and usage_55 -> usage_60

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.5,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.5,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.5" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.5" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.5" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.5" 64) 4
Value B:
E_deref (E_var ".str.5" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_45 -> usage_47 and usage_55 -> usage_60 have been verified to do the same.

same_behavior for the nodes: usage_48 -> usage_48 and usage_61 -> usage_61

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_48 -> usage_48 and usage_61 -> usage_61 have been verified to do the same.

same_behavior for the nodes: usage_49 -> usage_53 and usage_62 -> usage_69

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 4
Value B:
E_deref (E_var ".str.6" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_49 -> usage_53 and usage_62 -> usage_69 have been verified to do the same.

same_behavior for the nodes: usage_54 -> usage_54 and usage_70 -> usage_70

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_54 -> usage_54 and usage_70 -> usage_70 have been verified to do the same.

same_behavior for the nodes: usage_55 -> usage_57 and usage_71 -> usage_76

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.22,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.22,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.22" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.22" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.22" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.22" 64) 4
Value B:
E_deref (E_var ".str.22" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_55 -> usage_57 and usage_71 -> usage_76 have been verified to do the same.

same_behavior for the nodes: usage_58 -> usage_58 and usage_77 -> usage_77

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_58 -> usage_58 and usage_77 -> usage_77 have been verified to do the same.

same_behavior for the nodes: usage_59 -> usage_63 and usage_78 -> usage_84

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: .str.18,4], RDX := Dereference: [Var: .str.17,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.18" 64) 4),(RDX,E_deref (E_var ".str.17" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.18" 64) 4
Value B:
E_deref (E_var ".str.18" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.17" 64) 4
Value B:
E_deref (E_var ".str.17" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_59 -> usage_63 and usage_78 -> usage_84 have been verified to do the same.

same_behavior for the nodes: usage_64 -> usage_64 and usage_85 -> usage_85

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_64 -> usage_64 and usage_85 -> usage_85 have been verified to do the same.

same_behavior for the nodes: usage_65 -> usage_66 and usage_86 -> usage_90

same_behavior checking these two SStates:

SA || RDI := Value: 5, RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 5, RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 5 32),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_val 5 32),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_65 -> usage_66 and usage_86 -> usage_90 have been verified to do the same.

same_behavior for the nodes: usage_67 -> usage_67 and usage_91 -> usage_91

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "setlocale" "") [])]
Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_67 -> usage_67 and usage_91 -> usage_91 have been verified to do the same.

same_behavior for the nodes: usage_68 -> usage_69 and usage_92 -> usage_94

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_68 -> usage_69 and usage_92 -> usage_94 have been verified to do the same.

same_behavior for the nodes: .label_7 -> usage_86 and .label_7 -> usage_119

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.26,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.26,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.26" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.26" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.26" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_var ".str.26" 64) 4
Value B:
E_deref (E_var ".str.26" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_7 -> usage_86 and .label_7 -> usage_119 have been verified to do the same.

same_behavior for the nodes: usage_87 -> usage_87 and usage_120 -> usage_120

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_87 -> usage_87 and usage_120 -> usage_120 have been verified to do the same.

same_behavior for the nodes: usage_88 -> usage_92 and usage_121 -> usage_130

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: .str.6,4], RDX := Dereference: [Var: .str.18,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: .str.6,4], RDX := Dereference: [Var: .str.18,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.6" 64) 4),(RDX,E_deref (E_var ".str.18" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.6" 64) 4),(RDX,E_deref (E_var ".str.18" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.6" 64) 4),(RDX,E_deref (E_var ".str.18" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.6" 64) 4),(RDX,E_deref (E_var ".str.18" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.6" 64) 4),(RDX,E_deref (E_var ".str.18" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 4
Value B:
E_deref (E_var ".str.6" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.18" 64) 4
Value B:
E_deref (E_var ".str.18" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_88 -> usage_92 and usage_121 -> usage_130 have been verified to do the same.

same_behavior for the nodes: usage_93 -> usage_93 and usage_131 -> usage_131

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_93 -> usage_93 and usage_131 -> usage_131 have been verified to do the same.

same_behavior for the nodes: usage_94 -> usage_96 and usage_132 -> usage_135

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.27,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.27,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.27" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.27" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 32),(RSI,E_deref (E_var ".str.27" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.27" 64) 4
Value B:
E_deref (E_var ".str.27" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_94 -> usage_96 and usage_132 -> usage_135 have been verified to do the same.

same_behavior for the nodes: usage_97 -> usage_97 and usage_136 -> usage_136

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_97 -> usage_97 and usage_136 -> usage_136 have been verified to do the same.

same_behavior for the nodes: usage_98 -> usage_102 and usage_137 -> usage_143

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: .str.28,4], RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: .str.28,4], RDX := Dereference: [Var: .str.6,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.28" 64) 4),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.28" 64) 4),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.28" 64) 4),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.28" 64) 4),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_deref (E_var ".str.28" 64) 4),(RDX,E_deref (E_var ".str.6" 64) 4),(RDI,E_val 1 32),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.28" 64) 4
Value B:
E_deref (E_var ".str.28" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 4
Value B:
E_deref (E_var ".str.6" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_98 -> usage_102 and usage_137 -> usage_143 have been verified to do the same.

same_behavior for the nodes: usage_103 -> usage_103 and usage_144 -> usage_144

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__printf_chk" "") [])]
Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_103 -> usage_103 and usage_144 -> usage_144 have been verified to do the same.

same_behavior for the nodes: usage_104 -> usage_104 and usage_145 -> usage_146

same_behavior checking these two SStates:

SA || RDI := TakeBits: <31,0>(Reg: RBX)

SB || RDI := TakeBits: <31,0>(Reg: RBX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_app (TakeBits 31 0) [E_reg RBX])]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RBX]
Value B:
E_app (TakeBits 31 0) [E_reg RBX]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_104 -> usage_104 and usage_145 -> usage_146 have been verified to do the same.

same_behavior for the nodes: usage_105 -> usage_105 and usage_147 -> usage_147

same_behavior checking these two SStates:

SA || RAX := exit@()

SB || RAX := exit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "exit" "") [])]
Resulting values:
Value A:
E_app (F2 "exit" "") []
Value B:
E_app (F2 "exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_105 -> usage_105 and usage_147 -> usage_147 have been verified to do the same.

same_behavior for the nodes: usage_70 -> usage_72 and usage_95 -> usage_99

same_behavior checking these two SStates:

SA || RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: .str.24,4]

SB || RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: .str.24,4]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.24" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.24" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 3 32),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.24" 64) 4)]
Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.24" 64) 4
Value B:
E_deref (E_var ".str.24" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_70 -> usage_72 and usage_95 -> usage_99 have been verified to do the same.

same_behavior for the nodes: usage_73 -> usage_73 and usage_100 -> usage_100

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strncmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_73 -> usage_73 and usage_100 -> usage_100 have been verified to do the same.

same_behavior for the nodes: usage_74 -> usage_75 and usage_101 -> usage_102

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_74 -> usage_75 and usage_101 -> usage_102 have been verified to do the same.

same_behavior for the nodes: usage_76 -> usage_78 and usage_103 -> usage_108

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.25,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: .str.25,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.25" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.25" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 5 32),(RDI,E_val 0 64),(RSI,E_deref (E_var ".str.25" 64) 4)]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_var ".str.25" 64) 4
Value B:
E_deref (E_var ".str.25" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_76 -> usage_78 and usage_103 -> usage_108 have been verified to do the same.

same_behavior for the nodes: usage_79 -> usage_79 and usage_109 -> usage_109

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "dcgettext" "") [])]
Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_79 -> usage_79 and usage_109 -> usage_109 have been verified to do the same.

same_behavior for the nodes: usage_80 -> usage_81 and usage_110 -> usage_113

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_80 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_110 + Var: stdout),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_110" 64,E_var "stdout" 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op ADD) [E_var "usage_110" 64,E_var "stdout" 64]) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_80" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_110" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_80 -> usage_81 and usage_110 -> usage_113 have been verified to do the same.

same_behavior for the nodes: usage_82 -> usage_82 and usage_114 -> usage_114

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_82 -> usage_82 and usage_114 -> usage_114 have been verified to do the same.

Label relationship:
usage_80 <--> usage_110
.str.25 <--> .str.25
.str.24 <--> .str.24
.str.28 <--> .str.28
.str.27 <--> .str.27
.str.26 <--> .str.26
.str.17 <--> .str.17
.str.18 <--> .str.18
.str.22 <--> .str.22
.str.6 <--> .str.6
.str.5 <--> .str.5
usage_42 <--> usage_52
.str.4 <--> .str.4
stdout <--> stdout
usage_35 <--> usage_43
.str.3 <--> .str.3
.str.1 <--> .str.1
.str.2 <--> .str.2
program_name <--> program_name
usage_15 <--> usage_18
 <--> 
.str <--> .str

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Relevant vanilla text sections: 63
Success: 60 text sections
Failure during CFG generation (indirect branching): 3 text sections
Failure during symbolic excution (indirect calls): 0 text sections
Failure caused by alloca: 0 text sections
