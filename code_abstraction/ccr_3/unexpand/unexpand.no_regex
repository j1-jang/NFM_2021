	.section	.text
	.align	16
	#Procedure 0x401559
	.globl sub_401559
	.type sub_401559, @function
sub_401559:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x40155a
	.globl sub_40155a
	.type sub_40155a, @function
sub_40155a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401592
	.globl sub_401592
	.type sub_401592, @function
sub_401592:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4015da
	.globl sub_4015da
	.type sub_4015da, @function
sub_4015da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4015fc
	.globl sub_4015fc
	.type sub_4015fc, @function
sub_4015fc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x40160d
	.globl sub_40160d
	.type sub_40160d, @function
sub_40160d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x401626
	.globl sub_401626
	.type sub_401626, @function
sub_401626:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401630

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_24
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_23
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_20
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_9
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_18
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	call	emit_tab_list_info
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_21
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_10
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_22
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_17
	mov	ecx, OFFSET FLAT:label_14
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_16
	mov	esi, OFFSET FLAT:label_11
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_16
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_15
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_16:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_19
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_14
	mov	ecx, OFFSET FLAT:label_12
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_25
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_12
	mov	ecx, OFFSET FLAT:label_13
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_24:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x401830

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r13, rsi
	mov	r14d, edi
	mov	rdi, qword ptr [r13]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_47
	call	setlocale
	mov	edi, OFFSET FLAT:label_38
	mov	esi, OFFSET FLAT:label_39
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_38
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	movabs	r12, 0x1999999999999999
	xor	ecx, ecx
	xor	ebx, ebx
.label_52:
	mov	r15b, cl
	jmp	.label_36
.label_40:
	mov	rdi, rbp
	call	add_tab_stop
	xor	r15d, r15d
	nop	dword ptr [rax]
.label_36:
	mov	ecx, ebx
.label_28:
	mov	bl, cl
	jmp	.label_63
.label_77:
	mov	byte ptr [rip + convert_entire_line],  1
	mov	rdi, qword ptr [rip + optarg]
	call	parse_tab_stops
	nop	dword ptr [rax]
.label_63:
	mov	edx, OFFSET FLAT:label_67
	mov	ecx, OFFSET FLAT:longopts
	xor	r8d, r8d
	mov	edi, r14d
	mov	rsi, r13
	call	getopt_long
	cmp	eax, 0x60
	jle	.label_72
	cmp	eax, 0x61
	je	.label_74
	cmp	eax, 0x74
	jne	.label_75
	jmp	.label_77
.label_74:
	mov	byte ptr [rip + convert_entire_line],  1
	jmp	.label_63
	.section	.text
	.align	16
	#Procedure 0x4018f2
	.globl sub_4018f2
	.type sub_4018f2, @function
sub_4018f2:

	nop	word ptr cs:[rax + rax]
.label_75:
	mov	cl, 1
	cmp	eax, 0x80
	je	.label_28
	jmp	.label_31
	.section	.text
	.align	16
	#Procedure 0x40190b
	.globl sub_40190b
	.type sub_40190b, @function
sub_40190b:

	nop	dword ptr [rax + rax]
.label_72:
	cmp	eax, 0x2b
	jle	.label_32
	cmp	eax, 0x2c
	jne	.label_35
	test	r15b, 1
	mov	r15d, 0
	je	.label_36
	jmp	.label_40
	.section	.text
	.align	16
	#Procedure 0x40192f
	.globl sub_40192f
	.type sub_40192f, @function
sub_40192f:

	nop	
.label_32:
	cmp	eax, -1
	je	.label_41
	cmp	eax, 0xffffff7d
	je	.label_42
	cmp	eax, 0xffffff7e
	jne	.label_31
	jmp	.label_64
.label_35:
	cmp	eax, 0x3f
	je	.label_46
.label_31:
	mov	ecx, r15d
	and	cl, 1
	mov	edx, 0
	cmove	rbp, rdx
	cmp	rbp, r12
	ja	.label_48
	test	cl, cl
	mov	cl, 1
	je	.label_51
	mov	cl, r15b
.label_51:
	lea	rdx, [rbp + rbp*4]
	cdqe	
	lea	rax, [rax + rdx*2 - 0x30]
	cmp	rax, rbp
	mov	rbp, rax
	jae	.label_52
.label_48:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_58
	jmp	.label_59
.label_41:
	test	bl, bl
	je	.label_61
	mov	byte ptr [rip + convert_entire_line],  0
.label_61:
	test	r15b, 1
	je	.label_62
	mov	rdi, rbp
	call	add_tab_stop
.label_62:
	call	finalize_tab_stops
	movsxd	rax, dword ptr [rip + optind]
	xor	ecx, ecx
	cmp	eax, r14d
	lea	rdi, [r13 + rax*8]
	cmovge	rdi, rcx
	call	set_file_list
	xor	edi, edi
	call	next_file
	mov	rbx, rax
	test	rbx, rbx
	je	.label_70
	mov	rdi, qword ptr [rip + max_column_width]
	call	xmalloc
	mov	qword ptr [rsp + 8], rax
.label_79:
	mov	qword ptr [rsp + 0x10], 0
	mov	r12b, 1
	xor	ebp, ebp
	mov	dword ptr [rsp + 4], 0
	mov	byte ptr [rsp + 2], 1
	xor	r13d, r13d
.label_68:
	mov	r15, rbx
.label_43:
	mov	rax, qword ptr [r15 + 8]
	cmp	rax, qword ptr [r15 + 0x10]
	jb	.label_34
	mov	rdi, r15
	call	__uflow
	mov	r14d, eax
	test	r14d, r14d
	jns	.label_37
	mov	rdi, r15
	call	next_file
	mov	r15, rax
	test	r15, r15
	mov	ebx, 0
	jne	.label_43
	jmp	.label_44
	.section	.text
	.align	16
	#Procedure 0x401a44
	.globl sub_401a44
	.type sub_401a44, @function
sub_401a44:

	nop	word ptr cs:[rax + rax]
.label_34:
	lea	rcx, [rax + 1]
	mov	qword ptr [r15 + 8], rcx
	movzx	r14d, byte ptr [rax]
.label_37:
	mov	rbx, r15
.label_44:
	test	r12b, 1
	je	.label_49
	mov	r15, rbx
	movsxd	rbx, r14d
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	movzx	ebx, word ptr [rax + rbx*2]
	and	bx, 1
	je	.label_53
	mov	rdi, rbp
	lea	rsi, [rsp + 0x10]
	lea	rdx, [rsp + 3]
	call	get_next_tab_column
	cmp	byte ptr [rsp + 3], 0
	je	.label_60
	xor	r12d, r12d
.label_60:
	test	r12b, 1
	je	.label_71
	cmp	rax, rbp
	jb	.label_78
	cmp	r14d, 9
	jne	.label_56
	test	r13, r13
	je	.label_66
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx], 9
	jmp	.label_66
	.section	.text
	.align	16
	#Procedure 0x401ac5
	.globl sub_401ac5
	.type sub_401ac5, @function
sub_401ac5:

	nop	word ptr cs:[rax + rax]
.label_53:
	cmp	r14d, 8
	jne	.label_69
	cmp	rbp, 1
	adc	rbp, -1
	mov	rax, qword ptr [rsp + 0x10]
	cmp	rax, 1
	adc	rax, -1
	mov	qword ptr [rsp + 0x10], rax
	mov	r14d, 8
	jmp	.label_71
.label_69:
	inc	rbp
	jne	.label_71
	jmp	.label_78
.label_56:
	inc	rbp
	test	byte ptr [rsp + 2], 1
	je	.label_29
	cmp	rbp, rax
	jne	.label_29
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 9
	mov	rax, rbp
.label_66:
	mov	ecx, dword ptr [rsp + 4]
	and	cl, 1
	movzx	r13d, cl
	mov	r14d, 9
	mov	rbp, rax
	nop	dword ptr [rax + rax]
.label_71:
	test	r13, r13
	je	.label_50
	cmp	r13, 1
	je	.label_45
	mov	eax, dword ptr [rsp + 4]
	test	al, 1
	je	.label_45
	mov	rax, qword ptr [rsp + 8]
	mov	byte ptr [rax], 9
.label_45:
	mov	rcx, qword ptr [rip + stdout]
	mov	esi, 1
	mov	rdi, qword ptr [rsp + 8]
	mov	rdx, r13
	call	fwrite_unlocked
	cmp	rax, r13
	jne	.label_55
	mov	dword ptr [rsp + 4], 0
.label_50:
	test	bx, bx
	setne	al
	cmp	byte ptr [rip + convert_entire_line],  0
	setne	cl
	or	cl, al
	and	r12b, cl
	mov	eax, ebx
	mov	byte ptr [rsp + 2], al
	xor	r13d, r13d
	mov	rbx, r15
.label_49:
	test	r14d, r14d
	js	.label_76
	mov	rdi, qword ptr [rip + stdout]
	mov	rax, qword ptr [rdi + 0x28]
	cmp	rax, qword ptr [rdi + 0x30]
	jae	.label_65
	lea	rcx, [rax + 1]
	mov	qword ptr [rdi + 0x28], rcx
	mov	byte ptr [rax], r14b
.label_30:
	cmp	r14d, 0xa
	jne	.label_68
	jmp	.label_79
.label_29:
	cmp	rbp, rax
	mov	byte ptr [rsp + 2], 1
	mov	al, 1
	je	.label_73
	mov	eax, dword ptr [rsp + 4]
.label_73:
	mov	rcx, qword ptr [rsp + 8]
	mov	byte ptr [rcx + r13], r14b
	inc	r13
	mov	dword ptr [rsp + 4], eax
	mov	rbx, r15
	jmp	.label_30
.label_65:
	movzx	esi, r14b
	call	__overflow
	test	eax, eax
	jns	.label_30
.label_55:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_33
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_76:
	mov	rdi, qword ptr [rsp + 8]
	call	free
.label_70:
	call	cleanup_file_list_stdin
	mov	eax, dword ptr [rip + exit_status]
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_78:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_54
.label_59:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_42:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	esi, OFFSET FLAT:label_12
	mov	edx, OFFSET FLAT:label_17
	mov	r8d, OFFSET FLAT:label_57
	xor	r9d, r9d
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_64:
	xor	edi, edi
	call	usage
.label_46:
	mov	edi, 1
	call	usage
	.section	.text
	.align	16
	#Procedure 0x401cc1
	.globl sub_401cc1
	.type sub_401cc1, @function
sub_401cc1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401cd0

	.globl add_tab_stop
	.type add_tab_stop, @function
add_tab_stop:
	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	mov	rcx, qword ptr [rip + first_free_tab]
	xor	eax, eax
	test	rcx, rcx
	je	.label_84
	mov	rax, qword ptr [rip + tab_list]
	mov	rax, qword ptr [rax + rcx*8 - 8]
.label_84:
	xor	ebx, ebx
	mov	rdx, r14
	sub	rdx, rax
	cmovae	rbx, rdx
	cmp	rcx, qword ptr [rip + n_tabs_allocated]
	jne	.label_85
	mov	rdi, qword ptr [rip + tab_list]
	test	rdi, rdi
	je	.label_81
	movabs	rax, 0xaaaaaaaaaaaaaaa
	cmp	rcx, rax
	jae	.label_86
	mov	rax, rcx
	shr	rax, 1
	lea	rsi, [rcx + rax + 1]
	jmp	.label_80
.label_85:
	mov	rax, qword ptr [rip + tab_list]
	jmp	.label_83
.label_81:
	test	rcx, rcx
	mov	esi, 0x10
	cmovne	rsi, rcx
	mov	rax, rsi
	shr	rax, 0x3c
	jne	.label_87
.label_80:
	mov	qword ptr [rip + n_tabs_allocated],  rsi
	shl	rsi, 3
	call	xrealloc
	mov	qword ptr [rip + tab_list],  rax
	mov	rcx, qword ptr [rip + first_free_tab]
.label_83:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rip + first_free_tab],  rdx
	mov	qword ptr [rax + rcx*8], r14
	cmp	qword ptr [rip + max_column_width],  rbx
	jae	.label_82
	mov	qword ptr [rip + max_column_width],  rbx
.label_82:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_86:
	call	xalloc_die
.label_87:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401d9b
	.globl sub_401d9b
	.type sub_401d9b, @function
sub_401d9b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401da0

	.globl parse_tab_stops
	.type parse_tab_stops, @function
parse_tab_stops:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	r13, rdi
	mov	al, 1
	mov	qword ptr [rsp + 0x10], rax
	mov	r12d, 0
	xor	eax, eax
	mov	qword ptr [rsp + 0x18], rax
	mov	dword ptr [rsp + 0xc], 0
	xor	r14d, r14d
	xor	ebp, ebp
	jmp	.label_99
	.section	.text
	.align	16
	#Procedure 0x401dd4
	.globl sub_401dd4
	.type sub_401dd4, @function
sub_401dd4:

	nop	word ptr cs:[rax + rax]
.label_105:
	inc	r13
	mov	bpl, r15b
.label_99:
	movzx	ebx, byte ptr [r13]
	cmp	rbx, 0x2c
	je	.label_111
	test	bl, bl
	je	.label_113
	call	__ctype_b_loc
	mov	rax, qword ptr [rax]
	test	byte ptr [rax + rbx*2], 1
	jne	.label_111
	cmp	bl, 0x2b
	je	.label_90
	cmp	bl, 0x2f
	jne	.label_93
	mov	r14b, 1
	test	bpl, 1
	je	.label_110
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_100
	mov	edx, 5
	call	dcgettext
	mov	rbx, r12
	mov	r12, rax
	mov	rdi, r13
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r12
	mov	r12, rbx
	call	error
.label_110:
	mov	dword ptr [rsp + 0xc], 0
	mov	r15b, bpl
	jmp	.label_105
	.section	.text
	.align	16
	#Procedure 0x401e6c
	.globl sub_401e6c
	.type sub_401e6c, @function
sub_401e6c:

	nop	dword ptr [rax]
.label_111:
	test	bpl, 1
	je	.label_98
	test	r14b, 1
	jne	.label_115
	mov	eax, dword ptr [rsp + 0xc]
	test	al, 1
	jne	.label_91
	mov	rdi, r12
	call	add_tab_stop
	jmp	.label_98
.label_115:
	cmp	qword ptr [rip + extend_size],  0
	jne	.label_92
	mov	qword ptr [rip + extend_size],  r12
	jmp	.label_98
.label_91:
	cmp	qword ptr [rip + increment_size],  0
	jne	.label_101
	mov	qword ptr [rip + increment_size],  r12
	nop	word ptr [rax + rax]
.label_98:
	xor	r15d, r15d
	jmp	.label_105
.label_90:
	mov	al, 1
	mov	dword ptr [rsp + 0xc], eax
	test	bpl, 1
	je	.label_106
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_109
	mov	edx, 5
	call	dcgettext
	mov	rbx, r12
	mov	r12, rax
	mov	rdi, r13
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r12
	mov	r12, rbx
	call	error
.label_106:
	xor	r14d, r14d
	mov	r15b, bpl
	jmp	.label_105
.label_93:
	movsx	eax, bl
	add	eax, -0x30
	cmp	eax, 9
	ja	.label_97
	mov	eax, ebp
	and	al, 1
	mov	ecx, 0
	cmove	r12, rcx
	mov	r15b, 1
	je	.label_103
	mov	r15b, bpl
.label_103:
	test	al, al
	mov	rax, qword ptr [rsp + 0x18]
	cmove	rax, r13
	mov	qword ptr [rsp + 0x18], rax
	movabs	rax, 0x1999999999999999
	cmp	r12, rax
	ja	.label_104
	lea	rax, [r12 + r12*4]
	movsx	rcx, bl
	lea	rax, [rcx + rax*2 - 0x30]
	cmp	rax, r12
	jae	.label_102
.label_104:
	mov	esi, OFFSET FLAT:label_112
	mov	rbp, qword ptr [rsp + 0x18]
	mov	rdi, rbp
	call	strspn
	mov	qword ptr [rsp + 0x20], r12
	mov	r12, rax
	mov	rdi, rbp
	mov	rsi, r12
	call	xstrndup
	mov	rbx, rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x10], rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_114
	mov	edx, 5
	call	dcgettext
	mov	r13, rax
	mov	rdi, rbx
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r13
	call	error
	mov	rdi, rbx
	call	free
	lea	r13, [rbp + r12 - 1]
	mov	r12, qword ptr [rsp + 0x20]
	jmp	.label_105
.label_102:
	mov	r12, rax
	jmp	.label_105
.label_113:
	mov	rbx, qword ptr [rsp + 0x10]
	and	bpl, bl
	test	bpl, 1
	je	.label_94
	test	r14b, 1
	jne	.label_116
	mov	eax, dword ptr [rsp + 0xc]
	test	al, 1
	jne	.label_88
	mov	rdi, r12
	call	add_tab_stop
	jmp	.label_94
.label_116:
	mov	bl, 1
	cmp	qword ptr [rip + extend_size],  0
	je	.label_95
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_96
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_95:
	mov	qword ptr [rip + extend_size],  r12
	jmp	.label_94
.label_88:
	mov	bl, 1
	cmp	qword ptr [rip + increment_size],  0
	je	.label_108
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_107
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_108:
	mov	qword ptr [rip + increment_size],  r12
.label_94:
	test	bl, 1
	je	.label_89
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_92:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_96
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	qword ptr [rip + extend_size],  r12
.label_89:
	mov	edi, 1
	call	exit
.label_101:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_107
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	qword ptr [rip + increment_size],  r12
	mov	edi, 1
	call	exit
.label_97:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_117
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rdi, r13
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	call	error
	mov	edi, 1
	call	exit
	.section	.text
	.align	16
	#Procedure 0x402134
	.globl sub_402134
	.type sub_402134, @function
sub_402134:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402140

	.globl finalize_tab_stops
	.type finalize_tab_stops, @function
finalize_tab_stops:
	push	rax
	mov	rax, qword ptr [rip + tab_list]
	mov	rcx, qword ptr [rip + first_free_tab]
	test	rcx, rcx
	je	.label_118
	xor	edx, edx
	xor	edi, edi
	nop	dword ptr [rax + rax]
.label_125:
	mov	rsi, qword ptr [rax + rdx*8]
	test	rsi, rsi
	je	.label_119
	cmp	rsi, rdi
	jbe	.label_121
	inc	rdx
	cmp	rdx, rcx
	mov	rdi, rsi
	jb	.label_125
.label_118:
	mov	rsi, qword ptr [rip + increment_size]
	mov	rdx, qword ptr [rip + extend_size]
	test	rsi, rsi
	je	.label_128
	test	rdx, rdx
	jne	.label_124
.label_128:
	test	rcx, rcx
	je	.label_126
	or	rdx, rsi
	jne	.label_127
	cmp	rcx, 1
	jne	.label_127
	mov	rax, qword ptr [rax]
	mov	qword ptr [rip + tab_size],  rax
	pop	rax
	ret	
.label_126:
	test	rsi, rsi
	mov	eax, 8
	cmovne	rax, rsi
	test	rdx, rdx
	cmovne	rax, rdx
	mov	qword ptr [rip + max_column_width],  rax
	mov	qword ptr [rip + tab_size],  rax
	pop	rax
	ret	
.label_127:
	mov	qword ptr [rip + tab_size],  0
	pop	rax
	ret	
.label_119:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_129
	jmp	.label_123
.label_121:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_120
.label_123:
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_124:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_122
	jmp	.label_123
	.section	.text
	.align	16
	#Procedure 0x402214
	.globl sub_402214
	.type sub_402214, @function
sub_402214:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402220

	.globl get_next_tab_column
	.type get_next_tab_column, @function
get_next_tab_column:
	mov	byte ptr [rdx], 0
	mov	rcx, qword ptr [rip + tab_size]
	test	rcx, rcx
	jne	.label_130
	mov	rax, qword ptr [rsi]
	mov	r8, qword ptr [rip + first_free_tab]
	cmp	rax, r8
	jae	.label_135
	mov	r9, qword ptr [rip + tab_list]
	nop	word ptr cs:[rax + rax]
.label_136:
	mov	rcx, qword ptr [r9 + rax*8]
	cmp	rcx, rdi
	ja	.label_131
	inc	rax
	mov	qword ptr [rsi], rax
	cmp	rax, r8
	jb	.label_136
.label_135:
	mov	rcx, qword ptr [rip + extend_size]
	test	rcx, rcx
	je	.label_133
.label_130:
	xor	edx, edx
	mov	rax, rdi
.label_134:
	div	rcx
	add	rcx, rdi
	sub	rcx, rdx
	mov	rax, rcx
	ret	
.label_133:
	mov	rcx, qword ptr [rip + increment_size]
	test	rcx, rcx
	je	.label_132
	mov	rdx, qword ptr [rip + tab_list]
	mov	rax, rdi
	sub	rax, qword ptr [rdx + r8*8 - 8]
	xor	edx, edx
	jmp	.label_134
.label_132:
	mov	byte ptr [rdx], 1
	xor	ecx, ecx
.label_131:
	mov	rax, rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4022aa
	.globl sub_4022aa
	.type sub_4022aa, @function
sub_4022aa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4022b0

	.globl set_file_list
	.type set_file_list, @function
set_file_list:
	mov	byte ptr [rip + have_read_stdin],  0
	test	rdi, rdi
	mov	eax, OFFSET FLAT:stdin_argv
	cmovne	rax, rdi
	mov	qword ptr [rip + file_list],  rax
	ret	
	.section	.text
	.align	16
	#Procedure 0x4022cb
	.globl sub_4022cb
	.type sub_4022cb, @function
sub_4022cb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4022d0

	.globl next_file
	.type next_file, @function
next_file:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rdi
	test	r14, r14
	je	.label_137
	mov	rbx, qword ptr [rip + next_file.prev_file]
	test	rbx, rbx
	je	.label_144
	test	byte ptr [r14], 0x20
	je	.label_140
	call	__errno_location
	mov	ebp, dword ptr [rax]
	xor	edi, edi
	mov	esi, 3
	mov	rdx, rbx
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_139
	xor	eax, eax
	mov	esi, ebp
	call	error
	mov	dword ptr [rip + exit_status],  1
	mov	rbx, qword ptr [rip + next_file.prev_file]
.label_140:
	cmp	byte ptr [rbx], 0x2d
	jne	.label_150
	cmp	byte ptr [rbx + 1], 0
	je	.label_151
.label_150:
	mov	rdi, r14
	call	rpl_fclose
	test	eax, eax
	je	.label_137
	call	__errno_location
	mov	ebx, dword ptr [rax]
	mov	rdx, qword ptr [rip + next_file.prev_file]
	xor	edi, edi
	mov	esi, 3
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_139
	xor	eax, eax
	mov	esi, ebx
	call	error
	mov	dword ptr [rip + exit_status],  1
	jmp	.label_137
.label_151:
	mov	rdi, r14
	call	clearerr_unlocked
.label_137:
	mov	rax, qword ptr [rip + file_list]
	lea	rcx, [rax + 8]
	mov	qword ptr [rip + file_list],  rcx
	mov	rbx, qword ptr [rax]
	xor	r14d, r14d
	test	rbx, rbx
	je	.label_138
	xor	r14d, r14d
	jmp	.label_148
	.section	.text
	.align	16
	#Procedure 0x4023b1
	.globl sub_4023b1
	.type sub_4023b1, @function
sub_4023b1:

	nop	word ptr cs:[rax + rax]
.label_152:
	call	__errno_location
	mov	ebp, dword ptr [rax]
	xor	edi, edi
	mov	esi, 3
	mov	rdx, rbx
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_139
	xor	eax, eax
	mov	esi, ebp
	call	error
	mov	dword ptr [rip + exit_status],  1
	mov	rax, qword ptr [rip + file_list]
	lea	rcx, [rax + 8]
	mov	qword ptr [rip + file_list],  rcx
	mov	rbx, qword ptr [rax]
	test	rbx, rbx
	jne	.label_148
	jmp	.label_138
.label_142:
	mov	byte ptr [rip + have_read_stdin],  1
	mov	r15, qword ptr [rip + stdin]
	jmp	.label_141
	.section	.text
	.align	16
	#Procedure 0x40241f
	.globl sub_40241f
	.type sub_40241f, @function
sub_40241f:

	nop	
.label_148:
	cmp	byte ptr [rbx], 0x2d
	jne	.label_143
	cmp	byte ptr [rbx + 1], 0
	je	.label_142
.label_143:
	mov	esi, OFFSET FLAT:label_149
	mov	rdi, rbx
	call	fopen
	mov	r15, rax
.label_141:
	test	r15, r15
	je	.label_152
	mov	qword ptr [rip + next_file.prev_file],  rbx
	mov	esi, 2
	mov	rdi, r15
	call	fadvise
	mov	r14, r15
.label_138:
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_144:
	mov	edi, OFFSET FLAT:label_145
	mov	esi, OFFSET FLAT:label_146
	mov	edx, 0x155
	mov	ecx, OFFSET FLAT:label_147
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x40247e
	.globl sub_40247e
	.type sub_40247e, @function
sub_40247e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402480

	.globl cleanup_file_list_stdin
	.type cleanup_file_list_stdin, @function
cleanup_file_list_stdin:
	push	rax
	cmp	byte ptr [rip + have_read_stdin],  1
	jne	.label_153
	mov	rdi, qword ptr [rip + stdin]
	call	rpl_fclose
	test	eax, eax
	jne	.label_155
.label_153:
	pop	rax
	ret	
.label_155:
	call	__errno_location
	mov	esi, dword ptr [rax]
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_154
	xor	eax, eax
	call	error
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4024c0

	.globl emit_tab_list_info
	.type emit_tab_list_info, @function
emit_tab_list_info:
	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_156
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_157
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x402502
	.globl sub_402502
	.type sub_402502, @function
sub_402502:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402510
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402518
	.globl sub_402518
	.type sub_402518, @function
sub_402518:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402520
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x402528
	.globl sub_402528
	.type sub_402528, @function
sub_402528:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402530

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_162
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_160
	cmp	dword ptr [rbp], 0x20
	jne	.label_160
.label_162:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_159
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_160:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_33
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_158
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_139
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_159:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_158:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_161
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4025f0
	.globl fdadvise
	.type fdadvise, @function
fdadvise:

	jmp	posix_fadvise
	.section	.text
	.align	16
	#Procedure 0x4025f5
	.globl sub_4025f5
	.type sub_4025f5, @function
sub_4025f5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402600

	.globl fadvise
	.type fadvise, @function
fadvise:
	push	rbx
	mov	ebx, esi
	test	rdi, rdi
	je	.label_163
	call	fileno
	xor	esi, esi
	xor	edx, edx
	mov	edi, eax
	mov	ecx, ebx
	pop	rbx
	jmp	posix_fadvise
.label_163:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x40261d
	.globl sub_40261d
	.type sub_40261d, @function
sub_40261d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402620

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_164
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_166
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_168
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_166
	mov	esi, OFFSET FLAT:label_167
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_169
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_169:
	mov	rbx, r14
.label_166:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_164:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_165
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4026c1
	.globl sub_4026c1
	.type sub_4026c1, @function
sub_4026c1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4026d0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402703
	.globl sub_402703
	.type sub_402703, @function
sub_402703:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402710
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x40271f
	.globl sub_40271f
	.type sub_40271f, @function
sub_40271f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402720
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x40272f
	.globl sub_40272f
	.type sub_40272f, @function
sub_40272f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402730
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402766
	.globl sub_402766
	.type sub_402766, @function
sub_402766:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402770
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402783
	.globl sub_402783
	.type sub_402783, @function
sub_402783:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402790
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_170
	test	rdx, rdx
	je	.label_170
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_170:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4027bb
	.globl sub_4027bb
	.type sub_4027bb, @function
sub_4027bb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4027c0
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402835
	.globl sub_402835
	.type sub_402835, @function
sub_402835:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402840

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x48], rcx
	mov	qword ptr [rsp + 0x28], rdx
	mov	r13, rsi
	mov	qword ptr [rsp + 0x10], rdi
	mov	rax, qword ptr [rsp + 0x110]
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x108]
	mov	qword ptr [rsp + 0x80], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xb8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x9c], eax
	mov	dword ptr [rsp + 0x20], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x98], ebx
	mov	dil, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x50], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa8], rcx
	jmp	.label_214
	.section	.text
	.align	16
	#Procedure 0x4028ef
	.globl sub_4028ef
	.type sub_4028ef, @function
sub_4028ef:

	nop	
.label_255:
	cmp	r8d, 2
	setne	al
	cmp	byte ptr [rsp + 0xf], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa8]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x34]
	mov	rsi, qword ptr [rsp + 0xc0]
	je	.label_237
	or	al, dl
	jne	.label_237
	test	dil, 1
	jne	.label_251
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_237
	test	rbp, rbp
	mov	r15d, r8d
	mov	al, bl
	mov	qword ptr [rsp + 0x48], rcx
	mov	r12d, esi
	mov	r13, qword ptr [rsp + 0x68]
	je	.label_214
	jmp	.label_237
.label_434:
	mov	r8d, 5
	test	r12b, 1
	jne	.label_260
	test	rbp, rbp
	je	.label_196
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax], 0x22
.label_196:
	mov	r14d, 1
	jmp	.label_264
.label_435:
	mov	r13b, 1
	mov	r8d, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_266
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	sil, 1
	jmp	.label_209
.label_260:
	xor	r14d, r14d
.label_264:
	mov	eax, OFFSET FLAT:label_266
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	r13b, 1
	jmp	.label_274
	.section	.text
	.align	16
	#Procedure 0x4029bf
	.globl sub_4029bf
	.type sub_4029bf, @function
sub_4029bf:

	nop	
.label_214:
	mov	rbp, r13
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_283
	mov	r8d, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	jmp	qword ptr [(rcx * 8) + label_238]
.label_436:
	mov	r14d, edi
	mov	edi, OFFSET FLAT:label_293
	mov	esi, r15d
	mov	ebx, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x80], rax
	mov	edi, OFFSET FLAT:label_171
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebx
	mov	edi, r14d
	mov	qword ptr [rsp + 0x78], rax
.label_437:
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x80]
	jne	.label_183
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_183
	xor	r14d, r14d
	nop	
.label_200:
	cmp	r14, rbp
	jae	.label_195
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], al
.label_195:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_200
.label_183:
	mov	rbx, qword ptr [rsp + 0x78]
	mov	rdi, rbx
	call	strlen
	mov	qword ptr [rsp + 0x50], rax
	mov	r8d, r15d
	mov	qword ptr [rsp + 0x58], rbx
	mov	r13b, 1
	mov	sil, r12b
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r9d, dword ptr [rsp + 0x60]
	jmp	.label_209
.label_429:
	xor	r8d, r8d
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_209
.label_432:
	mov	al, 1
.label_430:
	mov	r12b, 1
.label_433:
	test	r12b, 1
	mov	cl, 1
	je	.label_223
	mov	ecx, eax
.label_223:
	mov	al, cl
.label_431:
	mov	r8d, 2
	test	r12b, 1
	jne	.label_225
	test	rbp, rbp
	je	.label_231
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx], 0x27
.label_231:
	mov	r14d, 1
	jmp	.label_233
.label_225:
	xor	r14d, r14d
.label_233:
	mov	ecx, OFFSET FLAT:label_171
	mov	qword ptr [rsp + 0x58], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x50], rcx
	mov	r13d, eax
.label_274:
	mov	sil, r12b
.label_209:
	cmp	qword ptr [rsp + 0x100], 0
	setne	r12b
	cmp	r8d, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x33]
	mov	ebx, r15d
	mov	byte ptr [rsp + 0x1f], cl
	and	bl, cl
	cmp	qword ptr [rsp + 0x50], 0
	setne	cl
	mov	edx, ecx
	mov	byte ptr [rsp + 0x36], bl
	and	dl, bl
	mov	byte ptr [rsp + 0x37], dl
	mov	ebx, esi
	and	bl, 1
	sete	dl
	and	al, bl
	mov	byte ptr [rsp + 0x31], al
	mov	byte ptr [rsp + 0xf], bl
	and	r12b, bl
	mov	byte ptr [rsp + 0x35], r12b
	or	dl, r15b
	mov	byte ptr [rsp + 0x27], dl
	mov	byte ptr [rsp + 0x34], r13b
	mov	qword ptr [rsp + 0xc0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x32], r13b
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x38], r8
	jmp	.label_241
	.section	.text
	.align	16
	#Procedure 0x402b81
	.globl sub_402b81
	.type sub_402b81, @function
sub_402b81:

	nop	word ptr cs:[rax + rax]
.label_244:
	inc	r12
.label_241:
	cmp	r11, -1
	je	.label_269
	cmp	r12, r11
	jne	.label_271
	jmp	.label_273
	.section	.text
	.align	16
	#Procedure 0x402ba3
	.globl sub_402ba3
	.type sub_402ba3, @function
sub_402ba3:

	nop	word ptr cs:[rax + rax]
.label_269:
	mov	rcx, -1
	cmp	byte ptr [r10 + r12], 0
	je	.label_179
.label_271:
	cmp	byte ptr [rsp + 0x37], 0
	je	.label_284
	mov	rax, qword ptr [rsp + 0x50]
	lea	rbx, [r12 + rax]
	cmp	rax, 2
	jb	.label_287
	cmp	r11, -1
	jne	.label_287
	mov	r15d, edi
	mov	rdi, r10
	mov	r13d, r9d
	call	strlen
	mov	r9d, r13d
	mov	r8, qword ptr [rsp + 0x38]
	mov	edi, r15d
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_287:
	cmp	rbx, r11
	jbe	.label_297
.label_284:
	xor	esi, esi
.label_212:
	movzx	r15d, byte ptr [r10 + r12]
	cmp	r15, 0x7e
	ja	.label_172
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_176]
.label_461:
	test	r12, r12
	jne	.label_186
	jmp	.label_182
	.section	.text
	.align	16
	#Procedure 0x402c36
	.globl sub_402c36
	.type sub_402c36, @function
sub_402c36:

	nop	word ptr cs:[rax + rax]
.label_297:
	mov	r13d, r9d
	mov	r15d, edi
	mov	rbx, r11
	lea	rdi, [r10 + r12]
	mov	rsi, qword ptr [rsp + 0x58]
	mov	rdx, qword ptr [rsp + 0x50]
	call	memcmp
	test	eax, eax
	sete	sil
	jne	.label_198
	cmp	byte ptr [rsp + 0xf], 0
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	je	.label_212
	jmp	.label_211
.label_198:
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	jmp	.label_212
.label_465:
	xor	eax, eax
	cmp	r11, -1
	je	.label_218
	test	r12, r12
	jne	.label_222
	cmp	r11, 1
	je	.label_182
	xor	r13d, r13d
	jmp	.label_175
.label_454:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_227
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_211
	cmp	r8d, 2
	jne	.label_235
	mov	eax, r9d
	and	al, 1
	jne	.label_235
	cmp	r14, rbp
	jae	.label_236
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_236:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_239
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_239:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_245
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_245:
	add	r14, 3
	mov	r9b, 1
.label_235:
	mov	rcx, r14
	cmp	rcx, rbp
	jae	.label_250
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + rcx], 0x5c
.label_250:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r8d, 2
	je	.label_253
	lea	rdx, [r12 + 1]
	cmp	rdx, r11
	jae	.label_253
	mov	dl, byte ptr [r10 + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_253
	cmp	r14, rbp
	jae	.label_229
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x30
.label_229:
	lea	rdx, [rcx + 2]
	cmp	rdx, rbp
	jae	.label_216
	mov	ebx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rdx], 0x30
	mov	esi, ebx
.label_216:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_175
.label_455:
	mov	bl, 0x62
	jmp	.label_215
.label_456:
	mov	cl, 0x74
	jmp	.label_185
.label_457:
	mov	bl, 0x76
	jmp	.label_215
.label_458:
	mov	bl, 0x66
	jmp	.label_215
.label_459:
	mov	cl, 0x72
	jmp	.label_185
.label_462:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa8], rax
	cmp	r8d, 2
	jne	.label_279
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_203
	test	rbp, rbp
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, rbp
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	rbp, rax
	cmp	r14, rbp
	jae	.label_289
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_289:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_173
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x5c
.label_173:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_181
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_181:
	add	r14, 3
	xor	r9d, r9d
.label_279:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_175
.label_463:
	mov	r15b, 0x3f
	cmp	r8d, 5
	je	.label_190
	cmp	r8d, 2
	jne	.label_186
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_186
	jmp	.label_203
.label_464:
	cmp	r8d, 2
	jne	.label_205
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_203
	mov	r15b, 0x5c
	xor	eax, eax
	jmp	.label_210
.label_172:
	cmp	qword ptr [rsp + 0xb8], 1
	mov	qword ptr [rsp + 0xa0], rbp
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	mov	dword ptr [rsp + 0x94], esi
	jne	.label_213
	mov	qword ptr [rsp + 0x48], r11
	call	__ctype_b_loc
	mov	r10, qword ptr [rsp + 0x28]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	ebx, 1
	jmp	.label_199
.label_218:
	test	r12, r12
	jne	.label_234
	mov	cl, byte ptr [r10 + 1]
	test	cl, cl
	jne	.label_234
.label_182:
	mov	dl, 1
.label_460:
	cmp	byte ptr [rsp + 0x27], 0
	je	.label_203
	xor	eax, eax
	mov	r13b, dl
.label_175:
	cmp	byte ptr [rsp + 0x36], 0
	je	.label_242
	cmp	qword ptr [rsp + 0x100], 0
	jne	.label_246
	jmp	.label_247
	.section	.text
	.align	16
	#Procedure 0x402f14
	.globl sub_402f14
	.type sub_402f14, @function
sub_402f14:

	nop	word ptr cs:[rax + rax]
.label_242:
	cmp	byte ptr [rsp + 0x35], 0
	je	.label_247
.label_246:
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	ebx, esi
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_201
	mov	rcx, qword ptr [rsp + 0x100]
	and	esi, dword ptr [rcx + rdx*4]
	jmp	.label_258
	.section	.text
	.align	16
	#Procedure 0x402f4d
	.globl sub_402f4d
	.type sub_402f4d, @function
sub_402f4d:

	nop	dword ptr [rax]
.label_247:
	test	sil, sil
.label_258:
	mov	ebx, r15d
	je	.label_188
	jmp	.label_262
.label_201:
	mov	ebx, r15d
	jmp	.label_262
.label_227:
	cmp	dword ptr [rsp + 0x9c], 0
	jne	.label_244
	xor	r15d, r15d
	jmp	.label_186
.label_205:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x32], 0
	je	.label_185
	xor	eax, eax
	mov	r15b, 0x5c
.label_210:
	xor	r13d, r13d
	jmp	.label_188
.label_185:
	cmp	byte ptr [rsp + 0x27], 0
	mov	ebx, ecx
	je	.label_203
.label_215:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r13d, 0
	je	.label_175
	nop	
.label_262:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_211
	cmp	r8d, 2
	jne	.label_281
	mov	eax, r9d
	and	al, 1
	jne	.label_281
	cmp	r14, rbp
	jae	.label_286
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_286:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_290
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_290:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_292
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_292:
	add	r14, 3
	mov	r9b, 1
.label_281:
	cmp	r14, rbp
	jae	.label_232
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_232:
	inc	r14
	jmp	.label_267
.label_213:
	mov	qword ptr [rsp + 0x70], 0
	cmp	r11, -1
	jne	.label_178
	mov	rdi, r10
	call	strlen
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_178:
	cmp	byte ptr [rsp + 0x31], 0
	mov	qword ptr [rsp + 0x48], r11
	mov	qword ptr [rsp + 0x88], r12
	je	.label_259
	lea	rax, [r10 + r12]
	mov	qword ptr [rsp + 0xb0], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbp, [rsp + 0x70]
.label_280:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbp
	call	rpl_mbrtowc
	mov	rbx, rax
	cmp	rbx, -2
	je	.label_206
	cmp	rbx, -1
	mov	r10, qword ptr [rsp + 0x28]
	movabs	rsi, 0x20000002b
	je	.label_219
	test	rbx, rbx
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_202
	cmp	rbx, 2
	mov	rbp, qword ptr [rsp + 0xa0]
	jb	.label_249
	mov	rax, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0xb0]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_256:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_208
	bt	rsi, rdx
	jb	.label_203
.label_208:
	inc	rcx
	cmp	rcx, rbx
	jb	.label_256
.label_249:
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	jne	.label_243
	xor	r13d, r13d
.label_243:
	lea	rbp, [rsp + 0x70]
	mov	r12, qword ptr [rsp + 0x40]
	add	r12, rbx
	mov	rdi, rbp
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_280
	jmp	.label_221
.label_253:
	xor	r13d, r13d
	jmp	.label_175
.label_234:
	mov	r11, -1
	xor	r13d, r13d
	jmp	.label_175
.label_190:
	cmp	dword ptr [rsp + 0x98], 0
	je	.label_186
	lea	rcx, [r12 + 2]
	cmp	rcx, r11
	jae	.label_186
	cmp	byte ptr [r10 + r12 + 1], 0x3f
	jne	.label_186
	movsx	edx, byte ptr [r10 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_268
	mov	ebx, esi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_270
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_276
	cmp	r14, rbp
	jae	.label_277
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x3f
.label_277:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_285
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_285:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_177
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_177:
	lea	rax, [r14 + 3]
	cmp	rax, rbp
	jae	.label_265
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x3f
.label_265:
	add	r14, 4
	xor	eax, eax
	mov	r12, rcx
	mov	r15b, dl
.label_270:
	xor	r13d, r13d
	mov	esi, ebx
	jmp	.label_175
.label_186:
	xor	eax, eax
.label_222:
	xor	r13d, r13d
	jmp	.label_175
.label_259:
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbx, [rsp + 0x70]
	nop	word ptr cs:[rax + rax]
.label_217:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbx
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_187
	cmp	rbp, -1
	je	.label_204
	cmp	rbp, -2
	je	.label_206
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	mov	r12, qword ptr [rsp + 0x40]
	jne	.label_180
	xor	r13d, r13d
.label_180:
	add	r12, rbp
	lea	rbx, [rsp + 0x70]
	mov	rdi, rbx
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_217
	jmp	.label_221
.label_206:
	mov	r10, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rsp + 0x40]
	lea	rax, [rsi + r12]
	mov	rdx, qword ptr [rsp + 0x48]
	cmp	rax, rdx
	jae	.label_228
	lea	rax, [r10 + r12]
.label_252:
	cmp	byte ptr [rax + rsi], 0
	je	.label_228
	lea	rcx, [r12 + rsi + 1]
	inc	rsi
	cmp	rcx, rdx
	jb	.label_252
.label_228:
	mov	qword ptr [rsp + 0x40], rsi
.label_219:
	xor	r13d, r13d
	jmp	.label_202
.label_204:
	xor	r13d, r13d
.label_187:
	mov	r10, qword ptr [rsp + 0x28]
.label_202:
	mov	r12, qword ptr [rsp + 0x40]
.label_221:
	mov	rbx, r12
	mov	r12, qword ptr [rsp + 0x88]
.label_199:
	and	r13b, 1
	mov	eax, r13d
	or	al, byte ptr [rsp + 0x33]
	cmp	rbx, 1
	mov	rbp, qword ptr [rsp + 0xa0]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x60]
	mov	esi, dword ptr [rsp + 0x94]
	ja	.label_240
	test	al, al
	je	.label_240
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_175
.label_240:
	mov	byte ptr [rsp + 0x40], al
	add	rbx, r12
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_257
	.section	.text
	.align	16
	#Procedure 0x403347
	.globl sub_403347
	.type sub_403347, @function
sub_403347:

	nop	word ptr [rax + rax]
.label_220:
	inc	r14
	mov	r15b, byte ptr [r10 + r12 + 1]
	mov	r12, rdx
.label_257:
	cmp	byte ptr [rsp + 0x40], 0
	je	.label_261
	test	sil, 1
	je	.label_193
	cmp	r14, rbp
	jae	.label_263
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x5c
.label_263:
	inc	r14
	xor	esi, esi
	jmp	.label_193
	.section	.text
	.align	16
	#Procedure 0x403385
	.globl sub_403385
	.type sub_403385, @function
sub_403385:

	nop	word ptr cs:[rax + rax]
.label_261:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_211
	cmp	r8d, 2
	jne	.label_272
	mov	eax, r9d
	and	al, 1
	jne	.label_272
	cmp	r14, rbp
	jae	.label_275
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_275:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_278
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x24
.label_278:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_254
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x27
.label_254:
	add	r14, 3
	mov	r9b, 1
.label_272:
	cmp	r14, rbp
	jae	.label_291
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_291:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_295
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_295:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_174
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_174:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_193:
	lea	rdx, [r12 + 1]
	cmp	rbx, rdx
	jbe	.label_188
	test	r9b, 1
	je	.label_192
	mov	rcx, rbx
	mov	ebx, eax
	and	bl, 1
	jne	.label_288
	mov	r8, r12
	mov	r12d, esi
	cmp	r14, rbp
	jae	.label_197
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], 0x27
.label_197:
	lea	rsi, [r14 + 1]
	cmp	rsi, rbp
	jae	.label_207
	mov	rbx, qword ptr [rsp + 0x10]
	mov	byte ptr [rbx + rsi], 0x27
.label_207:
	add	r14, 2
	xor	r9d, r9d
	mov	esi, r12d
	mov	rbx, rcx
	mov	r12, r8
	mov	r8, qword ptr [rsp + 0x38]
	jmp	.label_192
	.section	.text
	.align	16
	#Procedure 0x403496
	.globl sub_403496
	.type sub_403496, @function
sub_403496:

	nop	word ptr cs:[rax + rax]
.label_288:
	mov	rbx, rcx
.label_192:
	cmp	r14, rbp
	jae	.label_220
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], r15b
	mov	esi, ecx
	jmp	.label_220
	.section	.text
	.align	16
	#Procedure 0x4034be
	.globl sub_4034be
	.type sub_4034be, @function
sub_4034be:

	nop	
.label_188:
	test	r9b, 1
	je	.label_226
	and	al, 1
	jne	.label_226
	cmp	r14, rbp
	jae	.label_230
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_230:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_248
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_248:
	add	r14, 2
	xor	r9d, r9d
.label_226:
	mov	ebx, r15d
.label_267:
	cmp	r14, rbp
	jae	.label_282
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], bl
.label_282:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, dil
	mov	edi, r13d
	jmp	.label_244
.label_268:
	xor	r13d, r13d
	jmp	.label_175
	.section	.text
	.align	16
	#Procedure 0x403521
	.globl sub_403521
	.type sub_403521, @function
sub_403521:

	nop	word ptr cs:[rax + rax]
.label_273:
	mov	rcx, r12
.label_179:
	cmp	r8d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_255
	or	al, dl
	jne	.label_255
	mov	r11, rcx
	jmp	.label_211
.label_203:
	mov	eax, 2
.label_191:
	mov	qword ptr [rsp + 0x38], rax
.label_211:
	mov	r9d, dword ptr [rsp + 0x20]
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, rbp
	mov	rdx, r10
	mov	rcx, r11
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_189:
	mov	r14, rax
.label_194:
	mov	rax, r14
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_237:
	mov	rdx, qword ptr [rsp + 0x58]
	test	rdx, rdx
	je	.label_224
	cmp	byte ptr [rsp + 0xf], 0
	mov	rcx, qword ptr [rsp + 0x10]
	jne	.label_184
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_184
	inc	rdx
	nop	dword ptr [rax + rax]
.label_296:
	cmp	r14, rbp
	jae	.label_294
	mov	byte ptr [rcx + r14], al
.label_294:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_296
	jmp	.label_184
.label_251:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x30]
	mov	r9d, dword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	qword ptr [rsp + 0x118]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_189
.label_224:
	mov	rcx, qword ptr [rsp + 0x10]
.label_184:
	cmp	r14, rbp
	jae	.label_194
	mov	byte ptr [rcx + r14], 0
	jmp	.label_194
.label_276:
	mov	eax, 5
	jmp	.label_191
.label_283:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403670
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403731
	.globl sub_403731
	.type sub_403731, @function
sub_403731:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403740
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_298
	mov	qword ptr [rax], rbx
.label_298:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x40382c
	.globl sub_40382c
	.type sub_40382c, @function
sub_40382c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403830
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_299
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_301:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_301
.label_299:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_302
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_303], OFFSET FLAT:slot0
.label_302:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_300
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_300:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4038c1
	.globl sub_4038c1
	.type sub_4038c1, @function
sub_4038c1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4038d0
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4038de
	.globl sub_4038de
	.type sub_4038de, @function
sub_4038de:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4038e0

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_304
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_307
	cmp	r12d, 0x7fffffff
	je	.label_309
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_305
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_305:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_307:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_310
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_306
.label_310:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_308
	mov	rdi, r14
	call	free
.label_308:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_306:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_304:
	call	abort
.label_309:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x403a9d
	.globl sub_403a9d
	.type sub_403a9d, @function
sub_403a9d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403aa0
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403aaa
	.globl sub_403aaa
	.type sub_403aaa, @function
sub_403aaa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ab0
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403ac9
	.globl sub_403ac9
	.type sub_403ac9, @function
sub_403ac9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403ad0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x403ae8
	.globl sub_403ae8
	.type sub_403ae8, @function
sub_403ae8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403af0
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_311
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_311:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403b5c
	.globl sub_403b5c
	.type sub_403b5c, @function
sub_403b5c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403b60
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_312
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_312:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403bc8
	.globl sub_403bc8
	.type sub_403bc8, @function
sub_403bc8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403bd0
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_313
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_313:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403c38
	.globl sub_403c38
	.type sub_403c38, @function
sub_403c38:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403c40
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_314
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_314:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403ca1
	.globl sub_403ca1
	.type sub_403ca1, @function
sub_403ca1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403cb0
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403d1e
	.globl sub_403d1e
	.type sub_403d1e, @function
sub_403d1e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403d20
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403d8f
	.globl sub_403d8f
	.type sub_403d8f, @function
sub_403d8f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403d90

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403de5
	.globl sub_403de5
	.type sub_403de5, @function
sub_403de5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403df0
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403e44
	.globl sub_403e44
	.type sub_403e44, @function
sub_403e44:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403e50

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_318
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_318:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403ee5
	.globl sub_403ee5
	.type sub_403ee5, @function
sub_403ee5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403ef0
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_319
	test	rdx, rdx
	je	.label_319
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_319:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403f5e
	.globl sub_403f5e
	.type sub_403f5e, @function
sub_403f5e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x403f60
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_320
	test	rdx, rdx
	je	.label_320
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_320:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403fca
	.globl sub_403fca
	.type sub_403fca, @function
sub_403fca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403fd0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_321
	test	rsi, rsi
	je	.label_321
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_321:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404040
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_315]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_316]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_317]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_322
	test	rsi, rsi
	je	.label_322
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_322:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4040ac
	.globl sub_4040ac
	.type sub_4040ac, @function
sub_4040ac:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4040b0
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4040ba
	.globl sub_4040ba
	.type sub_4040ba, @function
sub_4040ba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040c0
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4040d8
	.globl sub_4040d8
	.type sub_4040d8, @function
sub_4040d8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040e0
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4040f1
	.globl sub_4040f1
	.type sub_4040f1, @function
sub_4040f1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404100

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404119
	.globl sub_404119
	.type sub_404119, @function
sub_404119:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404120

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_328
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_324
	cmp	ecx, 0x55
	jne	.label_323
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_323
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_323
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_323
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_323
	cmp	byte ptr [rax + 5], 0
	jne	.label_323
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_330
	mov	eax, OFFSET FLAT:label_331
	jmp	.label_327
.label_324:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_323
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_323
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_323
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_323
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_323
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_323
	cmp	byte ptr [rax + 7], 0
	je	.label_329
.label_323:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_266
	mov	eax, OFFSET FLAT:label_171
.label_327:
	cmove	rax, rcx
.label_328:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_329:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_325
	mov	eax, OFFSET FLAT:label_326
	jmp	.label_327
	.section	.text
	.align	16
	#Procedure 0x4041e5
	.globl sub_4041e5
	.type sub_4041e5, @function
sub_4041e5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4041f0

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_343
	mov	edx, OFFSET FLAT:label_338
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_345
.label_343:
	mov	edx, OFFSET FLAT:label_346
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_345:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_350
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_347
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_333
	jmp	qword ptr [(r12 * 8) + label_335]
.label_521:
	add	rsp, 8
	jmp	.label_339
.label_333:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_342
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_339
.label_522:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_348
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_523:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_332
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_524:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_340
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_525:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_336
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_339
.label_526:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_334
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_339
.label_527:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_337
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_339
.label_528:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_341
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_339
.label_530:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_344
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_339
.label_529:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_349
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_339:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404548
	.globl sub_404548
	.type sub_404548, @function
sub_404548:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404550
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_351:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_351
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x404571
	.globl sub_404571
	.type sub_404571, @function
sub_404571:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404580

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_352
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_354
.label_352:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_354:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_355
	cmp	r10d, 0x29
	jae	.label_364
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_353
.label_364:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_353:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_355
	cmp	r10d, 0x29
	jae	.label_362
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_363
.label_362:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_363:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_355
	cmp	r10d, 0x29
	jae	.label_360
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_361
.label_360:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_361:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_355
	cmp	r10d, 0x29
	jae	.label_358
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_359
.label_358:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_359:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_355
	cmp	r10d, 0x29
	jae	.label_356
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_357
.label_356:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_357:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_355
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_355
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_355
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_355
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_355:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x404762
	.globl sub_404762
	.type sub_404762, @function
sub_404762:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404770

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_365
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_365:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x4047f3
	.globl sub_4047f3
	.type sub_4047f3, @function
sub_4047f3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404800
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_366
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_367
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_369
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_17
	mov	ecx, OFFSET FLAT:label_14
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_368
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x404874
	.globl sub_404874
	.type sub_404874, @function
sub_404874:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404880
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_370
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_371
	test	rax, rax
	je	.label_370
.label_371:
	pop	rbx
	ret	
.label_370:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4048b5
	.globl sub_4048b5
	.type sub_4048b5, @function
sub_4048b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4048c0

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_372
	test	rax, rax
	je	.label_373
.label_372:
	pop	rbx
	ret	
.label_373:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4048da
	.globl sub_4048da
	.type sub_4048da, @function
sub_4048da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4048e0
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_374
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_375
	test	rbx, rbx
	jne	.label_375
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_375:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_376
	test	rax, rax
	je	.label_374
.label_376:
	pop	rbx
	ret	
.label_374:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404928
	.globl sub_404928
	.type sub_404928, @function
sub_404928:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404930

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_377
	test	rbx, rbx
	jne	.label_377
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_377:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_379
	test	rax, rax
	je	.label_378
.label_379:
	pop	rbx
	ret	
.label_378:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404960
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_380
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_383
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_381
.label_380:
	test	rcx, rcx
	jne	.label_386
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_386:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_382
.label_381:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_385
	test	rbx, rbx
	jne	.label_385
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_385:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_384
	test	rax, rax
	je	.label_383
.label_384:
	pop	rbx
	ret	
.label_383:
	call	xalloc_die
.label_382:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4049f7
	.globl sub_4049f7
	.type sub_4049f7, @function
sub_4049f7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a00
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_387
	test	rax, rax
	je	.label_388
.label_387:
	pop	rbx
	ret	
.label_388:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404a1a
	.globl sub_404a1a
	.type sub_404a1a, @function
sub_404a1a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a20
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_389
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_392
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_393
	call	free
	xor	eax, eax
	jmp	.label_390
.label_389:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_391
	mov	qword ptr [rsi], rbx
.label_393:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_390
	test	rax, rax
	je	.label_391
.label_390:
	pop	rbx
	ret	
.label_391:
	call	xalloc_die
.label_392:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404a84
	.globl sub_404a84
	.type sub_404a84, @function
sub_404a84:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a90
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_395
	test	r14, r14
	je	.label_394
.label_395:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_394:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404ac6
	.globl sub_404ac6
	.type sub_404ac6, @function
sub_404ac6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404ad0
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_396
	call	rpl_calloc
	test	rax, rax
	je	.label_396
	pop	rcx
	ret	
.label_396:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404af6
	.globl sub_404af6
	.type sub_404af6, @function
sub_404af6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404b00

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_397
	test	r15, r15
	je	.label_398
.label_397:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_398:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404b3c
	.globl sub_404b3c
	.type sub_404b3c, @function
sub_404b3c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404b40
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_400
	test	r15, r15
	je	.label_399
.label_400:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_399:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404b82
	.globl sub_404b82
	.type sub_404b82, @function
sub_404b82:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404b90

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_401
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_139
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404bc0

	.globl xstrndup
	.type xstrndup, @function
xstrndup:
	push	rax
	call	__strndup
	test	rax, rax
	je	.label_402
	pop	rcx
	ret	
.label_402:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404bd2
	.globl sub_404bd2
	.type sub_404bd2, @function
sub_404bd2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404be0

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_403
	test	rsi, rsi
	mov	ecx, 1
	je	.label_404
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_404
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_403:
	mov	ecx, 1
.label_404:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x404c2b
	.globl sub_404c2b
	.type sub_404c2b, @function
sub_404c2b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404c30

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_405
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_407
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_405
.label_407:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_405
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_406
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_406:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_405:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x404ca4
	.globl sub_404ca4
	.type sub_404ca4, @function
sub_404ca4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404cb0

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_408
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_408
	test	byte ptr [rbx + 1], 1
	je	.label_408
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_408:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x404ce3
	.globl sub_404ce3
	.type sub_404ce3, @function
sub_404ce3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404cf0

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_409
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_409
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_410
.label_409:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_410:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_411
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_411:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404d5e
	.globl sub_404d5e
	.type sub_404d5e, @function
sub_404d5e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404d60

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_412
	cmp	r15, -2
	jb	.label_412
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_412
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_412:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404db6
	.globl sub_404db6
	.type sub_404db6, @function
sub_404db6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404dc0

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_414
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_413
	test	cl, cl
	jne	.label_413
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_413
.label_414:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_413
	call	__errno_location
	mov	dword ptr [rax], 0
.label_413:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404e20

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_416
	cmp	byte ptr [rax], 0x43
	jne	.label_418
	cmp	byte ptr [rax + 1], 0
	je	.label_415
.label_418:
	mov	esi, OFFSET FLAT:label_417
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_416
.label_415:
	xor	ebx, ebx
.label_416:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404e51
	.globl sub_404e51
	.type sub_404e51, @function
sub_404e51:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404e60

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_47
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_419
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404e85
	.globl sub_404e85
	.type sub_404e85, @function
sub_404e85:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404e90

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x404ea7
	.globl sub_404ea7
	.type sub_404ea7, @function
sub_404ea7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f15
	.globl sub_404f15
	.type sub_404f15, @function
sub_404f15:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f22
	.globl sub_404f22
	.type sub_404f22, @function
sub_404f22:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f46
	.globl sub_404f46
	.type sub_404f46, @function
sub_404f46:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_532:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_27:
	.asciz "Try '%s --help' for more information.\n"
label_23:
	.asciz "Usage: %s [OPTION]... [FILE]...\n"
label_20:
	.asciz "Convert blanks in each FILE to tabs, writing to standard output.\n"
label_26:
	.asciz "  -a, --all        convert all blanks, instead of just initial blanks\n      --first-only  convert only leading sequences of blanks (overrides -a)\n  -t, --tabs=N     have tabs N characters apart instead of 8 (enables -a)\n"
label_21:
	.asciz "      --help     display this help and exit\n"
label_10:
	.asciz "      --version  output version information and exit\n"
label_12:
	.asciz "unexpand"
label_47:
	.byte 0
label_38:
	.asciz "coreutils"
label_39:
	.asciz "/usr/local/share/locale"
label_67:
	.asciz ",0123456789at:"
label_17:
	.asciz "GNU coreutils"
label_57:
	.asciz "David MacKenzie"
label_58:
	.asciz "tab stop value is too large"
label_9:
	.asciz "\nWith no FILE, or when FILE is -, read standard input.\n"
label_18:
	.asciz "\nMandatory arguments to long options are mandatory for short options too.\n"
label_22:
	.asciz "\n%s online help: <%s>\n"
label_14:
	.asciz "https://www.gnu.org/software/coreutils/"
label_11:
	.asciz "en_"
label_15:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_19:
	.asciz "Full documentation <%s%s>\n"
label_25:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_13:
	.asciz " invocation"
label_499:
	.asciz "tabs"
label_448:
	.asciz "all"
label_449:
	.asciz "first-only"
label_486:
	.asciz "help"
label_451:
	.asciz "version"
label_54:
	.asciz "input line is too long"
label_33:
	.asciz "write error"
label_100:
	.asciz "'/' specifier not at start of number: %s"
label_109:
	.asciz "'+' specifier not at start of number: %s"
label_112:
	.asciz "0123456789"
label_114:
	.asciz "tab stop is too large %s"
label_117:
	.asciz "tab size contains invalid character(s): %s"
label_145:
	.asciz "prev_file"
label_146:
	.asciz "src/expand-common.c"
label_147:
	.asciz "FILE *next_file(FILE *)"
label_139:
	.asciz "%s"
label_154:
	.byte 45
	.byte 0
label_149:
	.asciz "r"
label_156:
	.asciz "  -t, --tabs=LIST  use comma separated list of tab positions\n"
label_157:
	.asciz "                     The last specified position can be prefixed with '/'\n                     to specify a tab size to use after the last\n                     explicitly specified tab stop.  Also a prefix of '+'\n                     can be used to align remaining tab stops relative to\n                     the last specified tab stop instead of the first column\n"
label_96:
	.asciz "'/' specifier only allowed with the last value"
label_107:
	.asciz "'+' specifier only allowed with the last value"
label_129:
	.asciz "tab size cannot be 0"
label_120:
	.asciz "tab sizes must be ascending"
label_122:
	.asciz "'/' specifier is mutually exclusive with '+'"
label_445:
	.asciz "8.31"
label_161:
	.asciz "%s: %s"
label_165:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_168:
	.asciz "/.libs/"
label_167:
	.asciz "lt-"
label_466:
	.asciz "literal"
label_467:
	.asciz "shell"
label_468:
	.asciz "shell-always"
label_469:
	.asciz "shell-escape"
label_470:
	.asciz "shell-escape-always"
label_471:
	.asciz "c"
label_472:
	.asciz "c-maybe"
label_473:
	.asciz "escape"
label_474:
	.asciz "locale"
label_475:
	.asciz "clocale"
label_266:
	.byte 34
	.byte 0
label_293:
	.byte 96
	.byte 0
label_171:
	.asciz "'"
label_330:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_331:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_325:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_326:
	.byte 161
	.byte 175
	.byte 0
label_338:
	.asciz "%s (%s) %s\n"
label_346:
	.asciz "%s %s\n"
label_350:
	.asciz "(C)"
label_347:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_348:
	.asciz "Written by %s.\n"
label_332:
	.asciz "Written by %s and %s.\n"
label_340:
	.asciz "Written by %s, %s, and %s.\n"
label_336:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_334:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_337:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_341:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_349:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_344:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_342:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_366:
	.asciz "\nReport bugs to: %s\n"
label_367:
	.asciz "bug-coreutils@gnu.org"
label_369:
	.asciz "%s home page: <%s>\n"
label_368:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_401:
	.asciz "memory exhausted"
label_417:
	.asciz "POSIX"
label_419:
	.asciz "ASCII"
	.byte 0
	.globl longopts
	.type longopts, @object
longopts:
	.quad label_499
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 116
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_448
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 97
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_449
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_486
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_451
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_238:
	.quad .label_429
	.quad .label_430
	.quad .label_431
	.quad .label_432
	.quad .label_433
	.quad .label_434
	.quad .label_435
	.quad .label_209
	.quad .label_436
	.quad .label_436
	.quad .label_437
label_176:
	.quad .label_454
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_215
	.quad .label_455
	.quad .label_456
	.quad .label_185
	.quad .label_457
	.quad .label_458
	.quad .label_459
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_172
	.quad .label_182
	.quad .label_460
	.quad .label_460
	.quad .label_461
	.quad .label_460
	.quad .label_175
	.quad .label_460
	.quad .label_462
	.quad .label_460
	.quad .label_460
	.quad .label_460
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_460
	.quad .label_460
	.quad .label_460
	.quad .label_460
	.quad .label_463
	.quad .label_172
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_460
	.quad .label_464
	.quad .label_175
	.quad .label_460
	.quad .label_175
	.quad .label_460
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_175
	.quad .label_465
	.quad .label_460
	.quad .label_465
	.quad .label_461
	.quad label_466
	.quad label_467
	.quad label_468
	.quad label_469
	.quad label_470
	.quad label_471
	.quad label_472
	.quad label_473
	.quad label_474
	.quad label_475
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_335:
	.quad .label_521
	.quad .label_522
	.quad .label_523
	.quad .label_524
	.quad .label_525
	.quad .label_526
	.quad .label_527
	.quad .label_528
	.quad .label_529
	.quad .label_530
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_533:
	.section .data
	.align 8
.label_420:
	.quad 0
	.section .data
	.align 16
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl stdin_argv
	.type stdin_argv, @object
stdin_argv:
	.quad label_154
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_445
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_303:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .tm_clone_table
	.align 8
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .bss
	.align 32
.label_2:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl convert_entire_line
	.type convert_entire_line, @object
convert_entire_line:
	.long 0x0
	.globl exit_status
	.type exit_status, @object
exit_status:
	.long 0x0
	.globl first_free_tab
	.type first_free_tab, @object
first_free_tab:
	.quad 0x0
	.globl tab_list
	.type tab_list, @object
tab_list:
	.quad 0x0
	.globl n_tabs_allocated
	.type n_tabs_allocated, @object
n_tabs_allocated:
	.quad 0x0
	.globl extend_size
	.type extend_size, @object
extend_size:
	.quad 0x0
	.globl increment_size
	.type increment_size, @object
increment_size:
	.quad 0x0
	.globl tab_size
	.type tab_size, @object
tab_size:
	.quad 0x0
	.globl have_read_stdin
	.type have_read_stdin, @object
have_read_stdin:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl file_list
	.type file_list, @object
file_list:
	.quad 0x0
	.globl next_file.prev_file
	.type next_file.prev_file, @object
next_file.prev_file:
	.quad 0x0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_317:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_316:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_315:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl max_column_width
	.type max_column_width, @object
max_column_width:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: