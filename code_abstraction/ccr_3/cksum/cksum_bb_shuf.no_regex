	.section	.text
	.align	16
	#Procedure 0x4013d9
	.globl sub_4013d9
	.type sub_4013d9, @function
sub_4013d9:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x4013da
	.globl sub_4013da
	.type sub_4013da, @function
sub_4013da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401412
	.globl sub_401412
	.type sub_401412, @function
sub_401412:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40145a
	.globl sub_40145a
	.type sub_40145a, @function
sub_40145a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40147c
	.globl sub_40147c
	.type sub_40147c, @function
sub_40147c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x40148d
	.globl sub_40148d
	.type sub_40148d, @function
sub_40148d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4014a6
	.globl sub_4014a6
	.type sub_4014a6, @function
sub_4014a6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4014b0
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x4014bf
	.globl sub_4014bf
	.type sub_4014bf, @function
sub_4014bf:

	nop	
.label_9:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4014c5
	.globl sub_4014c5
	.type sub_4014c5, @function
sub_4014c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4014d0

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_9
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x401560

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_20
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_22
.label_20:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_22:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_11
	cmp	r10d, 0x29
	jae	.label_19
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_21
.label_19:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_21:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_11
	cmp	r10d, 0x29
	jae	.label_17
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_18
.label_17:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_18:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_11
	cmp	r10d, 0x29
	jae	.label_15
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_16
.label_15:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_16:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_11
	cmp	r10d, 0x29
	jae	.label_13
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_14
.label_13:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_14:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_11
	cmp	r10d, 0x29
	jae	.label_10
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_12
.label_10:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_12:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_11
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_11
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_11
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_11
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_11:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x401742
	.globl sub_401742
	.type sub_401742, @function
sub_401742:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401750
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_23
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_24
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_27
	mov	ecx, OFFSET FLAT:label_28
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_25
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x4017c4
	.globl sub_4017c4
	.type sub_4017c4, @function
sub_4017c4:

	nop	word ptr cs:[rax + rax]
.label_29:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4017d5
	.globl sub_4017d5
	.type sub_4017d5, @function
sub_4017d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4017df
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_30
	test	r14, r14
	je	.label_29
.label_30:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	16
	#Procedure 0x401810
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x401821
	.globl sub_401821
	.type sub_401821, @function
sub_401821:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401830
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40183e
	.globl sub_40183e
	.type sub_40183e, @function
sub_40183e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401840

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_31
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_34
	cmp	r12d, 0x7fffffff
	je	.label_36
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_32
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_32:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_34:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_37
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_33
.label_37:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_35
	mov	rdi, r14
	call	free
.label_35:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_33:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_31:
	call	abort
.label_36:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4019fd
	.globl sub_4019fd
	.type sub_4019fd, @function
sub_4019fd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x401a00
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_38:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_38
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x401a21
	.globl sub_401a21
	.type sub_401a21, @function
sub_401a21:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401a30
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x401a9f
	.globl sub_401a9f
	.type sub_401a9f, @function
sub_401a9f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401aa0
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x401aaa
	.globl sub_401aaa
	.type sub_401aaa, @function
sub_401aaa:

	nop	word ptr [rax + rax]
.label_42:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401ab5
	.globl sub_401ab5
	.type sub_401ab5, @function
sub_401ab5:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401ab7
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_42
	test	rdx, rdx
	je	.label_42
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x401b20
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_43
	test	rsi, rsi
	je	.label_43
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_43:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401b90
	.globl fdadvise
	.type fdadvise, @function
fdadvise:

	jmp	posix_fadvise
	.section	.text
	.align	16
	#Procedure 0x401b95
	.globl sub_401b95
	.type sub_401b95, @function
sub_401b95:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401ba0
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_44
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_46:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_46
.label_44:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_48
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_47], OFFSET FLAT:slot0
.label_48:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_45
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_45:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x401c31
	.globl sub_401c31
	.type sub_401c31, @function
sub_401c31:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401c40
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x401c53
	.globl sub_401c53
	.type sub_401c53, @function
sub_401c53:

	nop	word ptr cs:[rax + rax]
.label_53:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_49
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x401c80
	.globl sub_401c80
	.type sub_401c80, @function
sub_401c80:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401c8f

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_53
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_51
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_54
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_51
	mov	esi, OFFSET FLAT:label_52
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_50
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_50:
	mov	rbx, r14
.label_51:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
	.section	.text
	.align	16
	#Procedure 0x401d10

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_56
	cmp	byte ptr [rax], 0x43
	jne	.label_58
	cmp	byte ptr [rax + 1], 0
	je	.label_55
.label_58:
	mov	esi, OFFSET FLAT:label_57
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_56
.label_55:
	xor	ebx, ebx
.label_56:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x401d41
	.globl sub_401d41
	.type sub_401d41, @function
sub_401d41:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401d50
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_59
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_60
	test	rbx, rbx
	jne	.label_60
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_59:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401d84
	.globl sub_401d84
	.type sub_401d84, @function
sub_401d84:

	nop	dword ptr [rax + rax]
.label_60:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_61
	test	rax, rax
	je	.label_59
.label_61:
	pop	rbx
	ret	
.label_66:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401da5
	.globl sub_401da5
	.type sub_401da5, @function
sub_401da5:

	nop	word ptr cs:[rax + rax]
.label_63:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x401db6
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_65
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_66
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_64
	call	free
	xor	eax, eax
	jmp	.label_62
.label_65:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_63
	mov	qword ptr [rsi], rbx
.label_64:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_62
	test	rax, rax
	je	.label_63
.label_62:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x401e10

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	r14, rsi
	mov	r15d, edi
	mov	rdi, qword ptr [r14]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_69
	call	setlocale
	mov	edi, OFFSET FLAT:label_72
	mov	esi, OFFSET FLAT:label_75
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_72
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	mov	rdi, qword ptr [rip + stdout]
	xor	esi, esi
	mov	edx, 1
	xor	ecx, ecx
	call	setvbuf
	mov	r8, qword ptr [rip + Version]
	sub	rsp, 8
	mov	edx, OFFSET FLAT:label_71
	mov	ecx, OFFSET FLAT:label_72
	mov	r9d, 1
	mov	eax, 0
	mov	edi, r15d
	mov	rsi, r14
	push	0
	push	OFFSET FLAT:label_73
	push	OFFSET FLAT:usage
	call	parse_gnu_standard_options_only
	add	rsp, 0x20
	mov	byte ptr [rip + have_read_stdin],  0
	movsxd	rax, dword ptr [rip + optind]
	cmp	eax, r15d
	jne	.label_67
	mov	edi, OFFSET FLAT:label_77
	xor	esi, esi
	call	cksum
	mov	ebx, eax
	jmp	.label_68
.label_70:
	call	__errno_location
	mov	esi, dword ptr [rax]
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_77
	xor	eax, eax
	call	error
	nop	
.label_67:
	mov	bl, 1
	cmp	eax, r15d
	jge	.label_68
	lea	rbp, [r14 + rax*8]
	sub	r15d, eax
	mov	bl, 1
	nop	word ptr [rax + rax]
.label_74:
	mov	rdi, qword ptr [rbp]
	mov	esi, 1
	call	cksum
	and	bl, al
	add	rbp, 8
	dec	r15d
	jne	.label_74
.label_68:
	cmp	byte ptr [rip + have_read_stdin],  1
	jne	.label_76
	mov	rdi, qword ptr [rip + stdin]
	call	rpl_fclose
	cmp	eax, -1
	je	.label_70
.label_76:
	not	bl
	and	bl, 1
	movzx	eax, bl
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401f40

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_78
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_78
	test	byte ptr [rbx + 1], 1
	je	.label_78
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_78:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x401f73
	.globl sub_401f73
	.type sub_401f73, @function
sub_401f73:

	nop	word ptr cs:[rax + rax]
.label_80:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_79
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_79:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x401fb4
	.globl sub_401fb4
	.type sub_401fb4, @function
sub_401fb4:

	nop	
	.section	.text
	.align	16
	#Procedure 0x401fb6

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_81
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_81
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_80
.label_81:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
	.section	.text
	.align	16
	#Procedure 0x401ff0

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_82
	test	rsi, rsi
	mov	ecx, 1
	je	.label_83
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_83
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_82:
	mov	ecx, 1
.label_83:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x40203b
	.globl sub_40203b
	.type sub_40203b, @function
sub_40203b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402040

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_84
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_86
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_93
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_91
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_96
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_90
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_27
	mov	ecx, OFFSET FLAT:label_28
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_87
	mov	esi, OFFSET FLAT:label_88
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_87
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_89
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_87:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_95
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_28
	mov	ecx, OFFSET FLAT:label_71
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_94
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_71
	mov	ecx, OFFSET FLAT:label_85
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_84:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_92
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x4021de
	.globl sub_4021de
	.type sub_4021de, @function
sub_4021de:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4021e0
	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_97
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_97:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402248
	.globl sub_402248
	.type sub_402248, @function
sub_402248:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402250

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_98
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_99
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402280

	.globl parse_gnu_standard_options_only
	.type parse_gnu_standard_options_only, @function
parse_gnu_standard_options_only:
	push	rbp
	push	r15
	push	r14
	push	rbx
	sub	rsp, 0xd8
	mov	r14, r8
	mov	r15, rcx
	mov	rbx, rdx
	test	al, al
	je	.label_100
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_100:
	mov	ebp, dword ptr [rip + opterr]
	mov	dword ptr [rip + opterr],  1
	mov	eax, OFFSET FLAT:label_69
	mov	edx, OFFSET FLAT:label_103
	test	r9b, r9b
	cmovne	rdx, rax
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	call	getopt_long
	cmp	eax, -1
	je	.label_105
	mov	rcx, qword ptr [rsp + 0x100]
	cmp	eax, 0x68
	je	.label_101
	cmp	eax, 0x76
	je	.label_102
	mov	edi, dword ptr [rip + exit_failure]
	jmp	.label_104
.label_102:
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0x108]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x30
	mov	rdi, qword ptr [rip + stdout]
	lea	r8, [rsp]
	mov	rsi, rbx
	mov	rdx, r15
	mov	rcx, r14
	call	version_etc_va
	xor	edi, edi
	call	exit
	.section	.text
	.align	16
	#Procedure 0x402364
	.globl sub_402364
	.type sub_402364, @function
sub_402364:

	nop	dword ptr [rax]
.label_101:
	xor	edi, edi
.label_104:
	call	rcx
.label_105:
	mov	dword ptr [rip + opterr],  ebp
	add	rsp, 0xd8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_106:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402385
	.globl sub_402385
	.type sub_402385, @function
sub_402385:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402394
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_106
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x4023f0
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_107
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_108
	test	rax, rax
	je	.label_107
.label_108:
	pop	rbx
	ret	
.label_107:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402425
	.globl sub_402425
	.type sub_402425, @function
sub_402425:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402430
	.globl quote
	.type quote, @function
quote:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x402449
	.globl sub_402449
	.type sub_402449, @function
sub_402449:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402450

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_109
	cmp	r15, -2
	jb	.label_109
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_109
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_109:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4024a6
	.globl sub_4024a6
	.type sub_4024a6, @function
sub_4024a6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4024b0
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x4024e6
	.globl sub_4024e6
	.type sub_4024e6, @function
sub_4024e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4024f0
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4025b1
	.globl sub_4025b1
	.type sub_4025b1, @function
sub_4025b1:

	nop	word ptr cs:[rax + rax]
.label_110:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4025c2
	.globl sub_4025c2
	.type sub_4025c2, @function
sub_4025c2:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4025c5

	.globl fadvise
	.type fadvise, @function
fadvise:
	push	rbx
	mov	ebx, esi
	test	rdi, rdi
	je	.label_110
	call	fileno
	xor	esi, esi
	xor	edx, edx
	mov	edi, eax
	mov	ecx, ebx
	pop	rbx
	jmp	posix_fadvise
	.section	.text
	.align	16
	#Procedure 0x4025e0

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x4025f7
	.globl sub_4025f7
	.type sub_4025f7, @function
sub_4025f7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402600
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_111
	test	rsi, rsi
	je	.label_111
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_111:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40266c
	.globl sub_40266c
	.type sub_40266c, @function
sub_40266c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402670
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_112
	call	rpl_calloc
	test	rax, rax
	je	.label_112
	pop	rcx
	ret	
.label_112:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402696
	.globl sub_402696
	.type sub_402696, @function
sub_402696:

	nop	word ptr cs:[rax + rax]
.label_113:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4026a5
	.globl sub_4026a5
	.type sub_4026a5, @function
sub_4026a5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4026b3
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_114
	test	r15, r15
	je	.label_113
.label_114:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x4026f0
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4026fa
	.globl sub_4026fa
	.type sub_4026fa, @function
sub_4026fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402700
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_115
	test	rax, rax
	je	.label_116
.label_115:
	pop	rbx
	ret	
.label_116:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40271a
	.globl sub_40271a
	.type sub_40271a, @function
sub_40271a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402720
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402753
	.globl sub_402753
	.type sub_402753, @function
sub_402753:

	nop	word ptr cs:[rax + rax]
.label_119:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_117
	test	rax, rax
	je	.label_118
.label_117:
	pop	rbx
	ret	
.label_118:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402779

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_119
	test	rbx, rbx
	jne	.label_119
	call	free
	xor	eax, eax
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x402790

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_120
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_122
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_120
.label_122:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_120
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_121
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_121:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_120:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x402804
	.globl sub_402804
	.type sub_402804, @function
sub_402804:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402810

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x48], rcx
	mov	qword ptr [rsp + 0x28], rdx
	mov	r13, rsi
	mov	qword ptr [rsp + 0x10], rdi
	mov	rax, qword ptr [rsp + 0x110]
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x108]
	mov	qword ptr [rsp + 0x80], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xb8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x9c], eax
	mov	dword ptr [rsp + 0x20], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x98], ebx
	mov	dil, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x50], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa8], rcx
	jmp	.label_151
	.section	.text
	.align	16
	#Procedure 0x4028bf
	.globl sub_4028bf
	.type sub_4028bf, @function
sub_4028bf:

	nop	
.label_193:
	cmp	r8d, 2
	setne	al
	cmp	byte ptr [rsp + 0xf], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa8]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x34]
	mov	rsi, qword ptr [rsp + 0xc0]
	je	.label_179
	or	al, dl
	jne	.label_179
	test	dil, 1
	jne	.label_192
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_179
	test	rbp, rbp
	mov	r15d, r8d
	mov	al, bl
	mov	qword ptr [rsp + 0x48], rcx
	mov	r12d, esi
	mov	r13, qword ptr [rsp + 0x68]
	je	.label_151
	jmp	.label_179
.label_370:
	mov	r8d, 5
	test	r12b, 1
	jne	.label_201
	test	rbp, rbp
	je	.label_205
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax], 0x22
.label_205:
	mov	r14d, 1
	jmp	.label_209
.label_371:
	mov	r13b, 1
	mov	r8d, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_124
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	sil, 1
	jmp	.label_146
.label_201:
	xor	r14d, r14d
.label_209:
	mov	eax, OFFSET FLAT:label_124
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	r13b, 1
	jmp	.label_125
	.section	.text
	.align	16
	#Procedure 0x40298f
	.globl sub_40298f
	.type sub_40298f, @function
sub_40298f:

	nop	
.label_151:
	mov	rbp, r13
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_225
	mov	r8d, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	jmp	qword ptr [(rcx * 8) + label_155]
.label_372:
	mov	r14d, edi
	mov	edi, OFFSET FLAT:label_236
	mov	esi, r15d
	mov	ebx, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x80], rax
	mov	edi, OFFSET FLAT:label_176
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebx
	mov	edi, r14d
	mov	qword ptr [rsp + 0x78], rax
.label_373:
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x80]
	jne	.label_129
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_129
	xor	r14d, r14d
	nop	
.label_138:
	cmp	r14, rbp
	jae	.label_135
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], al
.label_135:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_138
.label_129:
	mov	rbx, qword ptr [rsp + 0x78]
	mov	rdi, rbx
	call	strlen
	mov	qword ptr [rsp + 0x50], rax
	mov	r8d, r15d
	mov	qword ptr [rsp + 0x58], rbx
	mov	r13b, 1
	mov	sil, r12b
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r9d, dword ptr [rsp + 0x60]
	jmp	.label_146
.label_365:
	xor	r8d, r8d
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_146
.label_368:
	mov	al, 1
.label_366:
	mov	r12b, 1
.label_369:
	test	r12b, 1
	mov	cl, 1
	je	.label_163
	mov	ecx, eax
.label_163:
	mov	al, cl
.label_367:
	mov	r8d, 2
	test	r12b, 1
	jne	.label_166
	test	rbp, rbp
	je	.label_172
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx], 0x27
.label_172:
	mov	r14d, 1
	jmp	.label_248
.label_166:
	xor	r14d, r14d
.label_248:
	mov	ecx, OFFSET FLAT:label_176
	mov	qword ptr [rsp + 0x58], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x50], rcx
	mov	r13d, eax
.label_125:
	mov	sil, r12b
.label_146:
	cmp	qword ptr [rsp + 0x100], 0
	setne	r12b
	cmp	r8d, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x33]
	mov	ebx, r15d
	mov	byte ptr [rsp + 0x1f], cl
	and	bl, cl
	cmp	qword ptr [rsp + 0x50], 0
	setne	cl
	mov	edx, ecx
	mov	byte ptr [rsp + 0x36], bl
	and	dl, bl
	mov	byte ptr [rsp + 0x37], dl
	mov	ebx, esi
	and	bl, 1
	sete	dl
	and	al, bl
	mov	byte ptr [rsp + 0x31], al
	mov	byte ptr [rsp + 0xf], bl
	and	r12b, bl
	mov	byte ptr [rsp + 0x35], r12b
	or	dl, r15b
	mov	byte ptr [rsp + 0x27], dl
	mov	byte ptr [rsp + 0x34], r13b
	mov	qword ptr [rsp + 0xc0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x32], r13b
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x38], r8
	jmp	.label_183
	.section	.text
	.align	16
	#Procedure 0x402b51
	.globl sub_402b51
	.type sub_402b51, @function
sub_402b51:

	nop	word ptr cs:[rax + rax]
.label_191:
	inc	r12
.label_183:
	cmp	r11, -1
	je	.label_213
	cmp	r12, r11
	jne	.label_215
	jmp	.label_217
	.section	.text
	.align	16
	#Procedure 0x402b73
	.globl sub_402b73
	.type sub_402b73, @function
sub_402b73:

	nop	word ptr cs:[rax + rax]
.label_213:
	mov	rcx, -1
	cmp	byte ptr [r10 + r12], 0
	je	.label_221
.label_215:
	cmp	byte ptr [rsp + 0x37], 0
	je	.label_226
	mov	rax, qword ptr [rsp + 0x50]
	lea	rbx, [r12 + rax]
	cmp	rax, 2
	jb	.label_231
	cmp	r11, -1
	jne	.label_231
	mov	r15d, edi
	mov	rdi, r10
	mov	r13d, r9d
	call	strlen
	mov	r9d, r13d
	mov	r8, qword ptr [rsp + 0x38]
	mov	edi, r15d
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_231:
	cmp	rbx, r11
	jbe	.label_239
.label_226:
	xor	esi, esi
.label_140:
	movzx	r15d, byte ptr [r10 + r12]
	cmp	r15, 0x7e
	ja	.label_241
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_244]
.label_385:
	test	r12, r12
	jne	.label_134
	jmp	.label_123
	.section	.text
	.align	16
	#Procedure 0x402c06
	.globl sub_402c06
	.type sub_402c06, @function
sub_402c06:

	nop	word ptr cs:[rax + rax]
.label_239:
	mov	r13d, r9d
	mov	r15d, edi
	mov	rbx, r11
	lea	rdi, [r10 + r12]
	mov	rsi, qword ptr [rsp + 0x58]
	mov	rdx, qword ptr [rsp + 0x50]
	call	memcmp
	test	eax, eax
	sete	sil
	jne	.label_137
	cmp	byte ptr [rsp + 0xf], 0
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	je	.label_140
	jmp	.label_162
.label_137:
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	jmp	.label_140
.label_389:
	xor	eax, eax
	cmp	r11, -1
	je	.label_154
	test	r12, r12
	jne	.label_160
	cmp	r11, 1
	je	.label_123
	xor	r13d, r13d
	jmp	.label_126
.label_378:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_168
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_162
	cmp	r8d, 2
	jne	.label_173
	mov	eax, r9d
	and	al, 1
	jne	.label_173
	cmp	r14, rbp
	jae	.label_177
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_177:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_180
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_180:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_185
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_185:
	add	r14, 3
	mov	r9b, 1
.label_173:
	mov	rcx, r14
	cmp	rcx, rbp
	jae	.label_190
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + rcx], 0x5c
.label_190:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r8d, 2
	je	.label_161
	lea	rdx, [r12 + 1]
	cmp	rdx, r11
	jae	.label_161
	mov	dl, byte ptr [r10 + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_161
	cmp	r14, rbp
	jae	.label_246
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x30
.label_246:
	lea	rdx, [rcx + 2]
	cmp	rdx, rbp
	jae	.label_178
	mov	ebx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rdx], 0x30
	mov	esi, ebx
.label_178:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_126
.label_379:
	mov	bl, 0x62
	jmp	.label_214
.label_380:
	mov	cl, 0x74
	jmp	.label_165
.label_381:
	mov	bl, 0x76
	jmp	.label_214
.label_382:
	mov	bl, 0x66
	jmp	.label_214
.label_383:
	mov	cl, 0x72
	jmp	.label_165
.label_386:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa8], rax
	cmp	r8d, 2
	jne	.label_223
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_145
	test	rbp, rbp
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, rbp
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	rbp, rax
	cmp	r14, rbp
	jae	.label_232
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_232:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_242
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x5c
.label_242:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_247
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_247:
	add	r14, 3
	xor	r9d, r9d
.label_223:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_126
.label_387:
	mov	r15b, 0x3f
	cmp	r8d, 5
	je	.label_130
	cmp	r8d, 2
	jne	.label_134
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_134
	jmp	.label_145
.label_388:
	cmp	r8d, 2
	jne	.label_142
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_145
	mov	r15b, 0x5c
	xor	eax, eax
	jmp	.label_148
.label_241:
	cmp	qword ptr [rsp + 0xb8], 1
	mov	qword ptr [rsp + 0xa0], rbp
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	mov	dword ptr [rsp + 0x94], esi
	jne	.label_150
	mov	qword ptr [rsp + 0x48], r11
	call	__ctype_b_loc
	mov	r10, qword ptr [rsp + 0x28]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	ebx, 1
	jmp	.label_208
.label_154:
	test	r12, r12
	jne	.label_174
	mov	cl, byte ptr [r10 + 1]
	test	cl, cl
	jne	.label_174
.label_123:
	mov	dl, 1
.label_384:
	cmp	byte ptr [rsp + 0x27], 0
	je	.label_145
	xor	eax, eax
	mov	r13b, dl
.label_126:
	cmp	byte ptr [rsp + 0x36], 0
	je	.label_184
	cmp	qword ptr [rsp + 0x100], 0
	jne	.label_186
	jmp	.label_187
	.section	.text
	.align	16
	#Procedure 0x402ee4
	.globl sub_402ee4
	.type sub_402ee4, @function
sub_402ee4:

	nop	word ptr cs:[rax + rax]
.label_184:
	cmp	byte ptr [rsp + 0x35], 0
	je	.label_187
.label_186:
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	ebx, esi
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_156
	mov	rcx, qword ptr [rsp + 0x100]
	and	esi, dword ptr [rcx + rdx*4]
	jmp	.label_197
	.section	.text
	.align	16
	#Procedure 0x402f1d
	.globl sub_402f1d
	.type sub_402f1d, @function
sub_402f1d:

	nop	dword ptr [rax]
.label_187:
	test	sil, sil
.label_197:
	mov	ebx, r15d
	je	.label_128
	jmp	.label_204
.label_156:
	mov	ebx, r15d
	jmp	.label_204
.label_168:
	cmp	dword ptr [rsp + 0x9c], 0
	jne	.label_191
	xor	r15d, r15d
	jmp	.label_134
.label_142:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x32], 0
	je	.label_165
	xor	eax, eax
	mov	r15b, 0x5c
.label_148:
	xor	r13d, r13d
	jmp	.label_128
.label_165:
	cmp	byte ptr [rsp + 0x27], 0
	mov	ebx, ecx
	je	.label_145
.label_214:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r13d, 0
	je	.label_126
	nop	
.label_204:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_162
	cmp	r8d, 2
	jne	.label_224
	mov	eax, r9d
	and	al, 1
	jne	.label_224
	cmp	r14, rbp
	jae	.label_230
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_230:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_233
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_233:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_235
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_235:
	add	r14, 3
	mov	r9b, 1
.label_224:
	cmp	r14, rbp
	jae	.label_240
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_240:
	inc	r14
	jmp	.label_210
.label_150:
	mov	qword ptr [rsp + 0x70], 0
	cmp	r11, -1
	jne	.label_245
	mov	rdi, r10
	call	strlen
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_245:
	cmp	byte ptr [rsp + 0x31], 0
	mov	qword ptr [rsp + 0x48], r11
	mov	qword ptr [rsp + 0x88], r12
	je	.label_139
	lea	rax, [r10 + r12]
	mov	qword ptr [rsp + 0xb0], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbp, [rsp + 0x70]
.label_131:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbp
	call	rpl_mbrtowc
	mov	rbx, rax
	cmp	rbx, -2
	je	.label_143
	cmp	rbx, -1
	mov	r10, qword ptr [rsp + 0x28]
	movabs	rsi, 0x20000002b
	je	.label_157
	test	rbx, rbx
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_175
	cmp	rbx, 2
	mov	rbp, qword ptr [rsp + 0xa0]
	jb	.label_170
	mov	rax, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0xb0]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_152:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_127
	bt	rsi, rdx
	jb	.label_145
.label_127:
	inc	rcx
	cmp	rcx, rbx
	jb	.label_152
.label_170:
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	jne	.label_189
	xor	r13d, r13d
.label_189:
	lea	rbp, [rsp + 0x70]
	mov	r12, qword ptr [rsp + 0x40]
	add	r12, rbx
	mov	rdi, rbp
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_131
	jmp	.label_159
.label_161:
	xor	r13d, r13d
	jmp	.label_126
.label_174:
	mov	r11, -1
	xor	r13d, r13d
	jmp	.label_126
.label_130:
	cmp	dword ptr [rsp + 0x98], 0
	je	.label_134
	lea	rcx, [r12 + 2]
	cmp	rcx, r11
	jae	.label_134
	cmp	byte ptr [r10 + r12 + 1], 0x3f
	jne	.label_134
	movsx	edx, byte ptr [r10 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_212
	mov	ebx, esi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_243
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_188
	cmp	r14, rbp
	jae	.label_222
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x3f
.label_222:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_227
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_227:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_200
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_200:
	lea	rax, [r14 + 3]
	cmp	rax, rbp
	jae	.label_149
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x3f
.label_149:
	add	r14, 4
	xor	eax, eax
	mov	r12, rcx
	mov	r15b, dl
.label_243:
	xor	r13d, r13d
	mov	esi, ebx
	jmp	.label_126
.label_134:
	xor	eax, eax
.label_160:
	xor	r13d, r13d
	jmp	.label_126
.label_139:
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbx, [rsp + 0x70]
	nop	word ptr cs:[rax + rax]
.label_153:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbx
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_198
	cmp	rbp, -1
	je	.label_141
	cmp	rbp, -2
	je	.label_143
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	mov	r12, qword ptr [rsp + 0x40]
	jne	.label_147
	xor	r13d, r13d
.label_147:
	add	r12, rbp
	lea	rbx, [rsp + 0x70]
	mov	rdi, rbx
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_153
	jmp	.label_159
.label_143:
	mov	r10, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rsp + 0x40]
	lea	rax, [rsi + r12]
	mov	rdx, qword ptr [rsp + 0x48]
	cmp	rax, rdx
	jae	.label_169
	lea	rax, [r10 + r12]
.label_196:
	cmp	byte ptr [rax + rsi], 0
	je	.label_169
	lea	rcx, [r12 + rsi + 1]
	inc	rsi
	cmp	rcx, rdx
	jb	.label_196
.label_169:
	mov	qword ptr [rsp + 0x40], rsi
.label_157:
	xor	r13d, r13d
	jmp	.label_175
.label_141:
	xor	r13d, r13d
.label_198:
	mov	r10, qword ptr [rsp + 0x28]
.label_175:
	mov	r12, qword ptr [rsp + 0x40]
.label_159:
	mov	rbx, r12
	mov	r12, qword ptr [rsp + 0x88]
.label_208:
	and	r13b, 1
	mov	eax, r13d
	or	al, byte ptr [rsp + 0x33]
	cmp	rbx, 1
	mov	rbp, qword ptr [rsp + 0xa0]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x60]
	mov	esi, dword ptr [rsp + 0x94]
	ja	.label_182
	test	al, al
	je	.label_182
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_126
.label_182:
	mov	byte ptr [rsp + 0x40], al
	add	rbx, r12
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_195
	.section	.text
	.align	16
	#Procedure 0x403317
	.globl sub_403317
	.type sub_403317, @function
sub_403317:

	nop	word ptr [rax + rax]
.label_158:
	inc	r14
	mov	r15b, byte ptr [r10 + r12 + 1]
	mov	r12, rdx
.label_195:
	cmp	byte ptr [rsp + 0x40], 0
	je	.label_203
	test	sil, 1
	je	.label_211
	cmp	r14, rbp
	jae	.label_207
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x5c
.label_207:
	inc	r14
	xor	esi, esi
	jmp	.label_211
	.section	.text
	.align	16
	#Procedure 0x403355
	.globl sub_403355
	.type sub_403355, @function
sub_403355:

	nop	word ptr cs:[rax + rax]
.label_203:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_162
	cmp	r8d, 2
	jne	.label_216
	mov	eax, r9d
	and	al, 1
	jne	.label_216
	cmp	r14, rbp
	jae	.label_220
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_220:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_218
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x24
.label_218:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_199
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x27
.label_199:
	add	r14, 3
	mov	r9b, 1
.label_216:
	cmp	r14, rbp
	jae	.label_234
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_234:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_164
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_164:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_206
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_206:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_211:
	lea	rdx, [r12 + 1]
	cmp	rbx, rdx
	jbe	.label_128
	test	r9b, 1
	je	.label_132
	mov	rcx, rbx
	mov	ebx, eax
	and	bl, 1
	jne	.label_202
	mov	r8, r12
	mov	r12d, esi
	cmp	r14, rbp
	jae	.label_136
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], 0x27
.label_136:
	lea	rsi, [r14 + 1]
	cmp	rsi, rbp
	jae	.label_144
	mov	rbx, qword ptr [rsp + 0x10]
	mov	byte ptr [rbx + rsi], 0x27
.label_144:
	add	r14, 2
	xor	r9d, r9d
	mov	esi, r12d
	mov	rbx, rcx
	mov	r12, r8
	mov	r8, qword ptr [rsp + 0x38]
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x403466
	.globl sub_403466
	.type sub_403466, @function
sub_403466:

	nop	word ptr cs:[rax + rax]
.label_202:
	mov	rbx, rcx
.label_132:
	cmp	r14, rbp
	jae	.label_158
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], r15b
	mov	esi, ecx
	jmp	.label_158
	.section	.text
	.align	16
	#Procedure 0x40348e
	.globl sub_40348e
	.type sub_40348e, @function
sub_40348e:

	nop	
.label_128:
	test	r9b, 1
	je	.label_167
	and	al, 1
	jne	.label_167
	cmp	r14, rbp
	jae	.label_171
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_171:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_249
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_249:
	add	r14, 2
	xor	r9d, r9d
.label_167:
	mov	ebx, r15d
.label_210:
	cmp	r14, rbp
	jae	.label_181
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], bl
.label_181:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, dil
	mov	edi, r13d
	jmp	.label_191
.label_212:
	xor	r13d, r13d
	jmp	.label_126
	.section	.text
	.align	16
	#Procedure 0x4034f1
	.globl sub_4034f1
	.type sub_4034f1, @function
sub_4034f1:

	nop	word ptr cs:[rax + rax]
.label_217:
	mov	rcx, r12
.label_221:
	cmp	r8d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_193
	or	al, dl
	jne	.label_193
	mov	r11, rcx
	jmp	.label_162
.label_145:
	mov	eax, 2
.label_219:
	mov	qword ptr [rsp + 0x38], rax
.label_162:
	mov	r9d, dword ptr [rsp + 0x20]
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, rbp
	mov	rdx, r10
	mov	rcx, r11
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_228:
	mov	r14, rax
.label_133:
	mov	rax, r14
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_179:
	mov	rdx, qword ptr [rsp + 0x58]
	test	rdx, rdx
	je	.label_229
	cmp	byte ptr [rsp + 0xf], 0
	mov	rcx, qword ptr [rsp + 0x10]
	jne	.label_194
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_194
	inc	rdx
	nop	dword ptr [rax + rax]
.label_238:
	cmp	r14, rbp
	jae	.label_237
	mov	byte ptr [rcx + r14], al
.label_237:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_238
	jmp	.label_194
.label_192:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x30]
	mov	r9d, dword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	qword ptr [rsp + 0x118]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_228
.label_229:
	mov	rcx, qword ptr [rsp + 0x10]
.label_194:
	cmp	r14, rbp
	jae	.label_133
	mov	byte ptr [rcx + r14], 0
	jmp	.label_133
.label_188:
	mov	eax, 5
	jmp	.label_219
.label_225:
	call	abort
.label_250:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403645
	.globl sub_403645
	.type sub_403645, @function
sub_403645:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40364d
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_250
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x4036b0
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x40371e
	.globl sub_40371e
	.type sub_40371e, @function
sub_40371e:

	nop	
.label_251:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403726
	.globl sub_403726
	.type sub_403726, @function
sub_403726:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40372b
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_251
	test	rdx, rdx
	je	.label_251
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
	.section	.text
	.align	16
	#Procedure 0x403750
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x403758
	.globl sub_403758
	.type sub_403758, @function
sub_403758:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403760

	.globl cksum
	.type cksum, @function
cksum:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x10028
	mov	r14d, esi
	mov	r15, rdi
	cmp	byte ptr [r15], 0x2d
	jne	.label_272
	cmp	byte ptr [r15 + 1], 0
	je	.label_280
.label_272:
	mov	esi, OFFSET FLAT:label_255
	mov	rdi, r15
	call	fopen
	mov	r13, rax
	test	r13, r13
	jne	.label_259
	jmp	.label_261
.label_280:
	mov	r13, qword ptr [rip + stdin]
	mov	byte ptr [rip + have_read_stdin],  1
.label_259:
	mov	esi, 2
	mov	rdi, r13
	call	fadvise
	xor	ebx, ebx
	lea	r12, [rsp + 0x20]
	xor	ebp, ebp
	nop	word ptr cs:[rax + rax]
.label_268:
	mov	esi, 1
	mov	edx, 0x10000
	mov	rdi, r12
	mov	rcx, r13
	call	fread_unlocked
	test	rax, rax
	je	.label_274
	add	rbx, rax
	jb	.label_277
	mov	ecx, eax
	and	ecx, 1
	cmp	rax, 1
	jne	.label_279
	mov	rax, r12
	jmp	.label_253
	.section	.text
	.align	16
	#Procedure 0x403807
	.globl sub_403807
	.type sub_403807, @function
sub_403807:

	nop	word ptr [rax + rax]
.label_279:
	mov	rdx, rcx
	sub	rdx, rax
	mov	rax, r12
	nop	dword ptr [rax]
.label_262:
	mov	rsi, rbp
	shl	rsi, 8
	shr	ebp, 0x18
	movzx	edi, byte ptr [rax]
	xor	rdi, rbp
	xor	rsi, qword ptr [(rdi * 8) + crctab]
	mov	rbp, rsi
	shl	rbp, 8
	shr	esi, 0x18
	movzx	edi, byte ptr [rax + 1]
	add	rax, 2
	xor	rdi, rsi
	xor	rbp, qword ptr [(rdi * 8) + crctab]
	add	rdx, 2
	jne	.label_262
.label_253:
	test	rcx, rcx
	je	.label_270
	movzx	eax, byte ptr [rax]
	mov	ecx, ebp
	shr	ecx, 0x18
	xor	rcx, rax
	shl	rbp, 8
	xor	rbp, qword ptr [(rcx * 8) + crctab]
.label_270:
	mov	eax, dword ptr [r13]
	test	al, 0x10
	je	.label_268
	jmp	.label_254
.label_274:
	mov	eax, dword ptr [r13]
.label_254:
	test	al, 0x20
	jne	.label_256
	cmp	byte ptr [r15], 0x2d
	jne	.label_275
	cmp	byte ptr [r15 + 1], 0
	je	.label_260
.label_275:
	mov	rdi, r13
	call	rpl_fclose
	cmp	eax, -1
	je	.label_261
.label_260:
	lea	rsi, [rsp]
	mov	rdi, rbx
	call	umaxtostr
	mov	rcx, rax
	test	rbx, rbx
	je	.label_266
	nop	word ptr cs:[rax + rax]
.label_273:
	mov	rdx, rbp
	shl	rdx, 8
	shr	ebp, 0x18
	xor	ebp, ebx
	movzx	eax, bpl
	xor	rdx, qword ptr [(rax * 8) + crctab]
	shr	rbx, 8
	mov	rbp, rdx
	jne	.label_273
	jmp	.label_278
.label_261:
	call	__errno_location
	mov	ebp, dword ptr [rax]
	xor	ebx, ebx
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_99
	xor	eax, eax
	mov	esi, ebp
	call	error
	jmp	.label_265
.label_256:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_99
	xor	eax, eax
	mov	esi, ebx
	call	error
	cmp	byte ptr [r15], 0x2d
	jne	.label_267
	cmp	byte ptr [r15 + 1], 0
	je	.label_269
.label_267:
	mov	rdi, r13
	call	rpl_fclose
.label_269:
	xor	ebx, ebx
	jmp	.label_265
.label_266:
	mov	rdx, rbp
.label_278:
	not	edx
	mov	edi, 1
	test	r14b, r14b
	je	.label_271
	mov	esi, OFFSET FLAT:label_263
	xor	eax, eax
	mov	r8, r15
	call	__printf_chk
	jmp	.label_252
.label_271:
	mov	esi, OFFSET FLAT:label_257
	xor	eax, eax
	call	__printf_chk
.label_252:
	mov	rax, qword ptr [rip + stdout]
	mov	bl, 1
	test	byte ptr [rax], 0x20
	jne	.label_258
.label_265:
	mov	eax, ebx
	add	rsp, 0x10028
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_277:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_264
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r15
	call	quotearg_n_style_colon
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
.label_258:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_276
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_281
	xor	eax, eax
	mov	esi, ebx
	call	error
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
.label_282:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403a25
	.globl sub_403a25
	.type sub_403a25, @function
sub_403a25:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403a2b
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_282
	test	rdx, rdx
	je	.label_282
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x403a90

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_284
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_283
	test	cl, cl
	jne	.label_283
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_283
.label_284:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_283
	call	__errno_location
	mov	dword ptr [rax], 0
.label_283:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_289:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	.section	.text
	.align	16
	#Procedure 0x403afb

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_288
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_286
	cmp	dword ptr [rbp], 0x20
	jne	.label_286
.label_288:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_289
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_285:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_287
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
.label_286:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_276
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_285
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_99
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	.section	.text
	.align	16
	#Procedure 0x403bb0
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403c25
	.globl sub_403c25
	.type sub_403c25, @function
sub_403c25:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403c30
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x403c38
	.globl sub_403c38
	.type sub_403c38, @function
sub_403c38:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403c40

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_290
	mov	edx, OFFSET FLAT:label_300
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_306
.label_290:
	mov	edx, OFFSET FLAT:label_307
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_306:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_293
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_308
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_295
	jmp	qword ptr [(r12 * 8) + label_296]
.label_409:
	add	rsp, 8
	jmp	.label_294
.label_295:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_303
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_294
.label_410:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_291
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_411:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_304
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_412:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_301
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_413:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_298
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_294
.label_414:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_297
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_294
.label_415:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_299
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_294
.label_416:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_302
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_294
.label_418:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_305
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_294
.label_417:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_292
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_294:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x403f98
	.globl sub_403f98
	.type sub_403f98, @function
sub_403f98:

	nop	dword ptr [rax + rax]
.label_309:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403fa5
	.globl sub_403fa5
	.type sub_403fa5, @function
sub_403fa5:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x403fa9
	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:

	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_309
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
	.section	.text
	.align	16
	#Procedure 0x404010
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_315
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_314
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_310
.label_312:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404042
	.globl sub_404042
	.type sub_404042, @function
sub_404042:

	nop	word ptr [rax + rax]
.label_315:
	test	rcx, rcx
	jne	.label_313
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_313:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_312
.label_310:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_316
	test	rbx, rbx
	jne	.label_316
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_314:
	call	xalloc_die
.label_316:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_311
	test	rax, rax
	je	.label_314
.label_311:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4040b0

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x404105
	.globl sub_404105
	.type sub_404105, @function
sub_404105:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404110

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_317
	test	r15, r15
	je	.label_318
.label_317:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_318:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40414c
	.globl sub_40414c
	.type sub_40414c, @function
sub_40414c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404150
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x40415f
	.globl sub_40415f
	.type sub_40415f, @function
sub_40415f:

	nop	
.label_319:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x404165
	.globl sub_404165
	.type sub_404165, @function
sub_404165:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40416b

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_320
	test	rax, rax
	je	.label_319
.label_320:
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404180
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_321
	mov	qword ptr [rax], rbx
.label_321:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x40426c
	.globl sub_40426c
	.type sub_40426c, @function
sub_40426c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404270

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_69
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_322
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404295
	.globl sub_404295
	.type sub_404295, @function
sub_404295:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4042a0
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4042b9
	.globl sub_4042b9
	.type sub_4042b9, @function
sub_4042b9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4042c0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4042d8
	.globl sub_4042d8
	.type sub_4042d8, @function
sub_4042d8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4042e0

	.globl umaxtostr
	.type umaxtostr, @function
umaxtostr:
	mov	rcx, rdi
	mov	byte ptr [rsi + 0x14], 0
	add	rsi, 0x14
	movabs	r8, 0xcccccccccccccccd
	nop	word ptr cs:[rax + rax]
.label_323:
	mov	rax, rcx
	mul	r8
	shr	rdx, 3
	lea	eax, [rdx + rdx]
	lea	eax, [rax + rax*4]
	mov	edi, ecx
	sub	edi, eax
	or	edi, 0x30
	mov	byte ptr [rsi - 1], dil
	dec	rsi
	cmp	rcx, 9
	mov	rcx, rdx
	ja	.label_323
	mov	rax, rsi
	ret	
	.section	.text
	.align	16
	#Procedure 0x40432b
	.globl sub_40432b
	.type sub_40432b, @function
sub_40432b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404330
	.globl parse_long_options
	.type parse_long_options, @function
parse_long_options:

	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0xd0
	mov	rbx, r9
	mov	r14, r8
	mov	r15, rcx
	mov	r12, rdx
	test	al, al
	je	.label_324
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_324:
	mov	ebp, dword ptr [rip + opterr]
	mov	dword ptr [rip + opterr],  0
	cmp	edi, 2
	jne	.label_326
	mov	edi, 2
	mov	edx, OFFSET FLAT:label_103
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	call	getopt_long
	cmp	eax, 0x68
	je	.label_325
	cmp	eax, 0x76
	jne	.label_326
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0x100]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x30
	mov	rdi, qword ptr [rip + stdout]
	lea	r8, [rsp]
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	call	version_etc_va
	xor	edi, edi
	call	exit
.label_325:
	xor	edi, edi
	call	rbx
.label_326:
	mov	dword ptr [rip + opterr],  ebp
	mov	dword ptr [rip + optind],  0
	add	rsp, 0xd0
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x404426
	.globl sub_404426
	.type sub_404426, @function
sub_404426:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404430
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_39]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_40]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_41]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x404484
	.globl sub_404484
	.type sub_404484, @function
sub_404484:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404490
	.globl version_etc
	.type version_etc, @function
version_etc:

	sub	rsp, 0xd8
	test	al, al
	je	.label_327
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_327:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x404513
	.globl sub_404513
	.type sub_404513, @function
sub_404513:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404520
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404538
	.globl sub_404538
	.type sub_404538, @function
sub_404538:

	nop	dword ptr [rax + rax]
.label_332:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_328
	mov	eax, OFFSET FLAT:label_329
	jmp	.label_330
	.section	.text
	.align	16
	#Procedure 0x40454f
	.globl sub_40454f
	.type sub_40454f, @function
sub_40454f:

	nop	word ptr cs:[rax + rax]
.label_335:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_331
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_331
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_331
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_331
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_331
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_331
	cmp	byte ptr [rax + 7], 0
	je	.label_332
.label_331:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_124
	mov	eax, OFFSET FLAT:label_176
.label_330:
	cmove	rax, rcx
.label_336:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4045a2

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_336
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_335
	cmp	ecx, 0x55
	jne	.label_331
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_331
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_331
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_331
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_331
	cmp	byte ptr [rax + 5], 0
	jne	.label_331
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_333
	mov	eax, OFFSET FLAT:label_334
	jmp	.label_330
	.section	.text
	.align	16
	#Procedure 0x404675
	.globl sub_404675
	.type sub_404675, @function
sub_404675:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404682
	.globl sub_404682
	.type sub_404682, @function
sub_404682:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4046a6
	.globl sub_4046a6
	.type sub_4046a6, @function
sub_4046a6:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_441:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_92:
	.asciz "Try '%s --help' for more information.\n"
label_86:
	.asciz "Usage: %s [FILE]...\n  or:  %s [OPTION]\n"
label_93:
	.asciz "Print CRC checksum and byte counts of each FILE.\n\n"
label_91:
	.asciz "      --help     display this help and exit\n"
label_96:
	.asciz "      --version  output version information and exit\n"
label_71:
	.asciz "cksum"
label_69:
	.byte 0
label_72:
	.asciz "coreutils"
label_75:
	.asciz "/usr/local/share/locale"
label_73:
	.asciz "Q. Frank Xia"
label_77:
	.asciz "-"
label_90:
	.asciz "\n%s online help: <%s>\n"
label_27:
	.asciz "GNU coreutils"
label_28:
	.asciz "https://www.gnu.org/software/coreutils/"
label_88:
	.asciz "en_"
label_89:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_95:
	.asciz "Full documentation <%s%s>\n"
label_94:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_85:
	.asciz " invocation"
label_255:
	.asciz "r"
label_99:
	.asciz "%s"
label_264:
	.asciz "%s: file too long"
label_263:
	.asciz "%u %s %s\n"
label_257:
	.asciz "%u %s\n"
label_281:
	.asciz "-: %s"
label_276:
	.asciz "write error"
label_376:
	.asciz "8.31"
label_287:
	.asciz "%s: %s"
label_103:
	.asciz "+"
label_377:
	.asciz "help"
label_426:
	.asciz "version"
label_49:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_54:
	.asciz "/.libs/"
label_52:
	.asciz "lt-"
label_390:
	.asciz "literal"
label_391:
	.asciz "shell"
label_392:
	.asciz "shell-always"
label_393:
	.asciz "shell-escape"
label_394:
	.asciz "shell-escape-always"
label_395:
	.asciz "c"
label_396:
	.asciz "c-maybe"
label_397:
	.asciz "escape"
label_398:
	.asciz "locale"
label_399:
	.asciz "clocale"
label_124:
	.byte 34
	.byte 0
label_236:
	.byte 96
	.byte 0
label_176:
	.asciz "'"
label_333:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_334:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_328:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_329:
	.byte 161
	.byte 175
	.byte 0
label_300:
	.asciz "%s (%s) %s\n"
label_307:
	.asciz "%s %s\n"
label_293:
	.asciz "(C)"
label_308:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_291:
	.asciz "Written by %s.\n"
label_304:
	.asciz "Written by %s and %s.\n"
label_301:
	.asciz "Written by %s, %s, and %s.\n"
label_298:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_297:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_299:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_302:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_292:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_305:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_303:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_23:
	.asciz "\nReport bugs to: %s\n"
label_24:
	.asciz "bug-coreutils@gnu.org"
label_26:
	.asciz "%s home page: <%s>\n"
label_25:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_98:
	.asciz "memory exhausted"
label_57:
	.asciz "POSIX"
label_322:
	.asciz "ASCII"
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl crctab
	.type crctab, @object
crctab:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 183
	.byte 29
	.byte 193
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 110
	.byte 59
	.byte 130
	.byte 9
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 217
	.byte 38
	.byte 67
	.byte 13
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 220
	.byte 118
	.byte 4
	.byte 19
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 107
	.byte 107
	.byte 197
	.byte 23
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 178
	.byte 77
	.byte 134
	.byte 26
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 80
	.byte 71
	.byte 30
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 184
	.byte 237
	.byte 8
	.byte 38
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 15
	.byte 240
	.byte 201
	.byte 34
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 214
	.byte 214
	.byte 138
	.byte 47
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 97
	.byte 203
	.byte 75
	.byte 43
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 100
	.byte 155
	.byte 12
	.byte 53
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 211
	.byte 134
	.byte 205
	.byte 49
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 10
	.byte 160
	.byte 142
	.byte 60
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 189
	.byte 189
	.byte 79
	.byte 56
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 112
	.byte 219
	.byte 17
	.byte 76
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 199
	.byte 198
	.byte 208
	.byte 72
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 30
	.byte 224
	.byte 147
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 169
	.byte 253
	.byte 82
	.byte 65
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 172
	.byte 173
	.byte 21
	.byte 95
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 27
	.byte 176
	.byte 212
	.byte 91
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 194
	.byte 150
	.byte 151
	.byte 86
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 117
	.byte 139
	.byte 86
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 200
	.byte 54
	.byte 25
	.byte 106
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 127
	.byte 43
	.byte 216
	.byte 110
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 166
	.byte 13
	.byte 155
	.byte 99
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 17
	.byte 16
	.byte 90
	.byte 103
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 20
	.byte 64
	.byte 29
	.byte 121
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 163
	.byte 93
	.byte 220
	.byte 125
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 122
	.byte 123
	.byte 159
	.byte 112
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 205
	.byte 102
	.byte 94
	.byte 116
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 224
	.byte 182
	.byte 35
	.byte 152
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 87
	.byte 171
	.byte 226
	.byte 156
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 142
	.byte 141
	.byte 161
	.byte 145
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 57
	.byte 144
	.byte 96
	.byte 149
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 60
	.byte 192
	.byte 39
	.byte 139
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 139
	.byte 221
	.byte 230
	.byte 143
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 82
	.byte 251
	.byte 165
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 229
	.byte 230
	.byte 100
	.byte 134
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 88
	.byte 91
	.byte 43
	.byte 190
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 239
	.byte 70
	.byte 234
	.byte 186
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 54
	.byte 96
	.byte 169
	.byte 183
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 129
	.byte 125
	.byte 104
	.byte 179
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 132
	.byte 45
	.byte 47
	.byte 173
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 51
	.byte 48
	.byte 238
	.byte 169
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 234
	.byte 22
	.byte 173
	.byte 164
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 93
	.byte 11
	.byte 108
	.byte 160
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 144
	.byte 109
	.byte 50
	.byte 212
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 39
	.byte 112
	.byte 243
	.byte 208
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 254
	.byte 86
	.byte 176
	.byte 221
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 73
	.byte 75
	.byte 113
	.byte 217
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 76
	.byte 27
	.byte 54
	.byte 199
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 251
	.byte 6
	.byte 247
	.byte 195
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 34
	.byte 32
	.byte 180
	.byte 206
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 149
	.byte 61
	.byte 117
	.byte 202
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 40
	.byte 128
	.byte 58
	.byte 242
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 159
	.byte 157
	.byte 251
	.byte 246
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 70
	.byte 187
	.byte 184
	.byte 251
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 241
	.byte 166
	.byte 121
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 244
	.byte 246
	.byte 62
	.byte 225
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 67
	.byte 235
	.byte 255
	.byte 229
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 154
	.byte 205
	.byte 188
	.byte 232
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 45
	.byte 208
	.byte 125
	.byte 236
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 119
	.byte 112
	.byte 134
	.byte 52
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 192
	.byte 109
	.byte 71
	.byte 48
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 25
	.byte 75
	.byte 4
	.byte 61
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 174
	.byte 86
	.byte 197
	.byte 57
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 171
	.byte 6
	.byte 130
	.byte 39
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 28
	.byte 27
	.byte 67
	.byte 35
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 197
	.byte 61
	.byte 0
	.byte 46
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 114
	.byte 32
	.byte 193
	.byte 42
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 207
	.byte 157
	.byte 142
	.byte 18
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 120
	.byte 128
	.byte 79
	.byte 22
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 161
	.byte 166
	.byte 12
	.byte 27
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 22
	.byte 187
	.byte 205
	.byte 31
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 19
	.byte 235
	.byte 138
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 164
	.byte 246
	.byte 75
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 208
	.byte 8
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 202
	.byte 205
	.byte 201
	.byte 12
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 171
	.byte 151
	.byte 120
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 176
	.byte 182
	.byte 86
	.byte 124
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 105
	.byte 144
	.byte 21
	.byte 113
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 222
	.byte 141
	.byte 212
	.byte 117
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 219
	.byte 221
	.byte 147
	.byte 107
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 108
	.byte 192
	.byte 82
	.byte 111
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 181
	.byte 230
	.byte 17
	.byte 98
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 251
	.byte 208
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 191
	.byte 70
	.byte 159
	.byte 94
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 91
	.byte 94
	.byte 90
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 209
	.byte 125
	.byte 29
	.byte 87
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 96
	.byte 220
	.byte 83
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 99
	.byte 48
	.byte 155
	.byte 77
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 212
	.byte 45
	.byte 90
	.byte 73
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 13
	.byte 11
	.byte 25
	.byte 68
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 186
	.byte 22
	.byte 216
	.byte 64
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 151
	.byte 198
	.byte 165
	.byte 172
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 32
	.byte 219
	.byte 100
	.byte 168
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 249
	.byte 253
	.byte 39
	.byte 165
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 78
	.byte 224
	.byte 230
	.byte 161
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 75
	.byte 176
	.byte 161
	.byte 191
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 252
	.byte 173
	.byte 96
	.byte 187
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 37
	.byte 139
	.byte 35
	.byte 182
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 146
	.byte 150
	.byte 226
	.byte 178
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 47
	.byte 43
	.byte 173
	.byte 138
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 152
	.byte 54
	.byte 108
	.byte 142
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 65
	.byte 16
	.byte 47
	.byte 131
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 246
	.byte 13
	.byte 238
	.byte 135
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 243
	.byte 93
	.byte 169
	.byte 153
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 68
	.byte 64
	.byte 104
	.byte 157
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 157
	.byte 102
	.byte 43
	.byte 144
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 42
	.byte 123
	.byte 234
	.byte 148
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 231
	.byte 29
	.byte 180
	.byte 224
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 80
	.byte 0
	.byte 117
	.byte 228
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 137
	.byte 38
	.byte 54
	.byte 233
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 62
	.byte 59
	.byte 247
	.byte 237
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 59
	.byte 107
	.byte 176
	.byte 243
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 140
	.byte 118
	.byte 113
	.byte 247
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 85
	.byte 80
	.byte 50
	.byte 250
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 226
	.byte 77
	.byte 243
	.byte 254
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 95
	.byte 240
	.byte 188
	.byte 198
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 232
	.byte 237
	.byte 125
	.byte 194
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 49
	.byte 203
	.byte 62
	.byte 207
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 134
	.byte 214
	.byte 255
	.byte 203
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 131
	.byte 134
	.byte 184
	.byte 213
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 52
	.byte 155
	.byte 121
	.byte 209
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 237
	.byte 189
	.byte 58
	.byte 220
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 90
	.byte 160
	.byte 251
	.byte 216
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 238
	.byte 224
	.byte 12
	.byte 105
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 89
	.byte 253
	.byte 205
	.byte 109
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 219
	.byte 142
	.byte 96
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 55
	.byte 198
	.byte 79
	.byte 100
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 50
	.byte 150
	.byte 8
	.byte 122
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 133
	.byte 139
	.byte 201
	.byte 126
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 92
	.byte 173
	.byte 138
	.byte 115
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 235
	.byte 176
	.byte 75
	.byte 119
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 86
	.byte 13
	.byte 4
	.byte 79
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 225
	.byte 16
	.byte 197
	.byte 75
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 56
	.byte 54
	.byte 134
	.byte 70
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 143
	.byte 43
	.byte 71
	.byte 66
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 138
	.byte 123
	.byte 0
	.byte 92
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 61
	.byte 102
	.byte 193
	.byte 88
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 228
	.byte 64
	.byte 130
	.byte 85
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 83
	.byte 93
	.byte 67
	.byte 81
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 158
	.byte 59
	.byte 29
	.byte 37
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 41
	.byte 38
	.byte 220
	.byte 33
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 240
	.byte 0
	.byte 159
	.byte 44
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 71
	.byte 29
	.byte 94
	.byte 40
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 66
	.byte 77
	.byte 25
	.byte 54
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 245
	.byte 80
	.byte 216
	.byte 50
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 44
	.byte 118
	.byte 155
	.byte 63
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 155
	.byte 107
	.byte 90
	.byte 59
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 38
	.byte 214
	.byte 21
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 145
	.byte 203
	.byte 212
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 72
	.byte 237
	.byte 151
	.byte 10
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 255
	.byte 240
	.byte 86
	.byte 14
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 250
	.byte 160
	.byte 17
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 77
	.byte 189
	.byte 208
	.byte 20
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 148
	.byte 155
	.byte 147
	.byte 25
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 35
	.byte 134
	.byte 82
	.byte 29
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 14
	.byte 86
	.byte 47
	.byte 241
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 185
	.byte 75
	.byte 238
	.byte 245
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 96
	.byte 109
	.byte 173
	.byte 248
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 215
	.byte 112
	.byte 108
	.byte 252
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 210
	.byte 32
	.byte 43
	.byte 226
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 101
	.byte 61
	.byte 234
	.byte 230
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 188
	.byte 27
	.byte 169
	.byte 235
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 11
	.byte 6
	.byte 104
	.byte 239
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 182
	.byte 187
	.byte 39
	.byte 215
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 166
	.byte 230
	.byte 211
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 216
	.byte 128
	.byte 165
	.byte 222
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 111
	.byte 157
	.byte 100
	.byte 218
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 106
	.byte 205
	.byte 35
	.byte 196
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 221
	.byte 208
	.byte 226
	.byte 192
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 246
	.byte 161
	.byte 205
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 179
	.byte 235
	.byte 96
	.byte 201
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 141
	.byte 62
	.byte 189
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 201
	.byte 144
	.byte 255
	.byte 185
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 182
	.byte 188
	.byte 180
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 167
	.byte 171
	.byte 125
	.byte 176
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 162
	.byte 251
	.byte 58
	.byte 174
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 21
	.byte 230
	.byte 251
	.byte 170
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 204
	.byte 192
	.byte 184
	.byte 167
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 123
	.byte 221
	.byte 121
	.byte 163
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 198
	.byte 96
	.byte 54
	.byte 155
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 113
	.byte 125
	.byte 247
	.byte 159
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 168
	.byte 91
	.byte 180
	.byte 146
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 31
	.byte 70
	.byte 117
	.byte 150
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 26
	.byte 22
	.byte 50
	.byte 136
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 173
	.byte 11
	.byte 243
	.byte 140
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 116
	.byte 45
	.byte 176
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 195
	.byte 48
	.byte 113
	.byte 133
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 153
	.byte 144
	.byte 138
	.byte 93
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 46
	.byte 141
	.byte 75
	.byte 89
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 247
	.byte 171
	.byte 8
	.byte 84
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 64
	.byte 182
	.byte 201
	.byte 80
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 69
	.byte 230
	.byte 142
	.byte 78
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 242
	.byte 251
	.byte 79
	.byte 74
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 43
	.byte 221
	.byte 12
	.byte 71
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 156
	.byte 192
	.byte 205
	.byte 67
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 33
	.byte 125
	.byte 130
	.byte 123
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 150
	.byte 96
	.byte 67
	.byte 127
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 79
	.byte 70
	.byte 0
	.byte 114
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 248
	.byte 91
	.byte 193
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 253
	.byte 11
	.byte 134
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 74
	.byte 22
	.byte 71
	.byte 108
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 147
	.byte 48
	.byte 4
	.byte 97
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 36
	.byte 45
	.byte 197
	.byte 101
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 233
	.byte 75
	.byte 155
	.byte 17
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 94
	.byte 86
	.byte 90
	.byte 21
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 135
	.byte 112
	.byte 25
	.byte 24
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 109
	.byte 216
	.byte 28
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 53
	.byte 61
	.byte 159
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 130
	.byte 32
	.byte 94
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 91
	.byte 6
	.byte 29
	.byte 11
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 236
	.byte 27
	.byte 220
	.byte 15
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 81
	.byte 166
	.byte 147
	.byte 55
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 230
	.byte 187
	.byte 82
	.byte 51
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 63
	.byte 157
	.byte 17
	.byte 62
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 136
	.byte 128
	.byte 208
	.byte 58
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 141
	.byte 208
	.byte 151
	.byte 36
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 58
	.byte 205
	.byte 86
	.byte 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 227
	.byte 235
	.byte 21
	.byte 45
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 84
	.byte 246
	.byte 212
	.byte 41
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 121
	.byte 38
	.byte 169
	.byte 197
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 206
	.byte 59
	.byte 104
	.byte 193
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 23
	.byte 29
	.byte 43
	.byte 204
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 160
	.byte 0
	.byte 234
	.byte 200
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 165
	.byte 80
	.byte 173
	.byte 214
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 18
	.byte 77
	.byte 108
	.byte 210
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 203
	.byte 107
	.byte 47
	.byte 223
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 124
	.byte 118
	.byte 238
	.byte 219
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 193
	.byte 203
	.byte 161
	.byte 227
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 214
	.byte 96
	.byte 231
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 175
	.byte 240
	.byte 35
	.byte 234
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 24
	.byte 237
	.byte 226
	.byte 238
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 29
	.byte 189
	.byte 165
	.byte 240
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 170
	.byte 160
	.byte 100
	.byte 244
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 115
	.byte 134
	.byte 39
	.byte 249
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 196
	.byte 155
	.byte 230
	.byte 253
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 253
	.byte 184
	.byte 137
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 190
	.byte 224
	.byte 121
	.byte 141
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 103
	.byte 198
	.byte 58
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 208
	.byte 219
	.byte 251
	.byte 132
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 213
	.byte 139
	.byte 188
	.byte 154
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 98
	.byte 150
	.byte 125
	.byte 158
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 187
	.byte 176
	.byte 62
	.byte 147
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 12
	.byte 173
	.byte 255
	.byte 151
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 177
	.byte 16
	.byte 176
	.byte 175
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 13
	.byte 113
	.byte 171
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 223
	.byte 43
	.byte 50
	.byte 166
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 104
	.byte 54
	.byte 243
	.byte 162
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 109
	.byte 102
	.byte 180
	.byte 188
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 218
	.byte 123
	.byte 117
	.byte 184
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 93
	.byte 54
	.byte 181
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 180
	.byte 64
	.byte 247
	.byte 177
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl long_options
	.type long_options, @object
long_options:
	.quad label_377
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_426
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_155:
	.quad .label_365
	.quad .label_366
	.quad .label_367
	.quad .label_368
	.quad .label_369
	.quad .label_370
	.quad .label_371
	.quad .label_146
	.quad .label_372
	.quad .label_372
	.quad .label_373
label_244:
	.quad .label_378
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_214
	.quad .label_379
	.quad .label_380
	.quad .label_165
	.quad .label_381
	.quad .label_382
	.quad .label_383
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_241
	.quad .label_123
	.quad .label_384
	.quad .label_384
	.quad .label_385
	.quad .label_384
	.quad .label_126
	.quad .label_384
	.quad .label_386
	.quad .label_384
	.quad .label_384
	.quad .label_384
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_384
	.quad .label_384
	.quad .label_384
	.quad .label_384
	.quad .label_387
	.quad .label_241
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_384
	.quad .label_388
	.quad .label_126
	.quad .label_384
	.quad .label_126
	.quad .label_384
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_126
	.quad .label_389
	.quad .label_384
	.quad .label_389
	.quad .label_385
	.quad label_390
	.quad label_391
	.quad label_392
	.quad label_393
	.quad label_394
	.quad label_395
	.quad label_396
	.quad label_397
	.quad label_398
	.quad label_399
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_296:
	.quad .label_409
	.quad .label_410
	.quad .label_411
	.quad .label_412
	.quad .label_413
	.quad .label_414
	.quad .label_415
	.quad .label_416
	.quad .label_417
	.quad .label_418
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.label_442:
	.section .data
	.align 8
.label_337:
	.quad 0
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_376
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_47:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.byte 0x0
	.globl have_read_stdin
	.type have_read_stdin, @object
have_read_stdin:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_2:
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_41:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_40:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_39:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl opterr
	.type opterr, @object
opterr:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: