	.section	.text
	.align	16
	#Procedure 0x4017f9
	.globl sub_4017f9
	.type sub_4017f9, @function
sub_4017f9:

	hlt	
	.section	.text
	.align	16
	#Procedure 0x4017fa
	.globl sub_4017fa
	.type sub_4017fa, @function
sub_4017fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401832
	.globl sub_401832
	.type sub_401832, @function
sub_401832:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40187a
	.globl sub_40187a
	.type sub_40187a, @function
sub_40187a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x40189c
	.globl sub_40189c
	.type sub_40189c, @function
sub_40189c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4018ad
	.globl sub_4018ad
	.type sub_4018ad, @function
sub_4018ad:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4018c6
	.globl sub_4018c6
	.type sub_4018c6, @function
sub_4018c6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4018d0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_15
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_25
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	mov	r8, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_17
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_14
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_18
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_19
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_20
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_28
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_13
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_23
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_24
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_22
	mov	ecx, OFFSET FLAT:label_16
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_9
	mov	esi, OFFSET FLAT:label_10
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_9
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_9:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_29
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_16
	mov	ecx, OFFSET FLAT:label_11
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_11
	mov	ecx, OFFSET FLAT:label_12
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_15:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_21
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	16
	#Procedure 0x401b11
	.globl sub_401b11
	.type sub_401b11, @function
sub_401b11:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x401b20

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xd8
	mov	r14, rsi
	mov	r12d, edi
	mov	qword ptr [rsp + 0x28], 0
	mov	rdi, qword ptr [r14]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_76
	call	setlocale
	mov	edi, OFFSET FLAT:label_79
	mov	esi, OFFSET FLAT:label_80
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_79
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	mov	byte ptr [rip + diagnose_surprises],  0
	mov	byte ptr [rip + force_silent],  0
	mov	byte ptr [rip + recurse],  0
	xor	eax, eax
	mov	qword ptr [rsp + 0x20], rax
	xor	ebx, ebx
	xor	ebp, ebp
	xor	eax, eax
	mov	qword ptr [rsp + 0x18], rax
	mov	qword ptr [rsp + 8], r14
	mov	dword ptr [rsp + 0x10], r12d
	jmp	.label_53
	.section	.text
	.align	16
	#Procedure 0x401bad
	.globl sub_401bad
	.type sub_401bad, @function
sub_401bad:

	nop	dword ptr [rax]
.label_41:
	mov	byte ptr [rax + rbp], 0x2c
	mov	rcx, rax
	mov	qword ptr [rsp + 0x18], rcx
	add	r12, rax
	inc	r14
	mov	rdi, r12
	mov	rsi, rbx
	mov	rdx, r14
	call	memcpy
	mov	byte ptr [rip + diagnose_surprises],  1
	mov	bl, r15b
	mov	rbp, r13
	mov	r14, qword ptr [rsp + 8]
	mov	r12d, dword ptr [rsp + 0x10]
.label_53:
	mov	r15d, ebx
	xor	ebx, ebx
	mov	edx, OFFSET FLAT:label_104
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	mov	edi, r12d
	mov	rsi, r14
	call	getopt_long
	add	eax, 0x83
	cmp	eax, 0x105
	ja	.label_30
	jmp	qword ptr [(rax * 8) + label_36]
.label_1021:
	movsxd	rax, dword ptr [rip + optind]
	mov	rbx, qword ptr [r14 + rax*8 - 8]
	mov	rdi, rbx
	call	strlen
	mov	r14, rax
	cmp	rbp, 1
	mov	r12, rbp
	sbb	r12, -1
	lea	r13, [r14 + r12]
	cmp	qword ptr [rsp + 0x28], r13
	jbe	.label_39
	mov	rax, qword ptr [rsp + 0x18]
	jmp	.label_41
	.section	.text
	.align	16
	#Procedure 0x401c52
	.globl sub_401c52
	.type sub_401c52, @function
sub_401c52:

	nop	word ptr cs:[rax + rax]
.label_39:
	lea	rax, [r13 + 1]
	mov	qword ptr [rsp + 0x28], rax
	mov	rdi, qword ptr [rsp + 0x18]
	lea	rsi, [rsp + 0x28]
	call	x2realloc
	jmp	.label_41
.label_1022:
	mov	byte ptr [rip + recurse],  1
	mov	bl, r15b
	jmp	.label_53
.label_1023:
	mov	dword ptr [rip + verbosity],  1
	mov	bl, r15b
	jmp	.label_53
.label_1024:
	mov	byte ptr [rip + force_silent],  1
	mov	bl, r15b
	jmp	.label_53
.label_1025:
	mov	dword ptr [rip + verbosity],  0
	mov	bl, r15b
	jmp	.label_53
.label_1026:
	mov	bl, 1
	jmp	.label_53
.label_1027:
	mov	rax, qword ptr [rip + optarg]
	mov	qword ptr [rsp + 0x20], rax
	mov	bl, r15b
	jmp	.label_53
.label_1020:
	mov	rbx, qword ptr [rsp + 0x20]
	test	rbx, rbx
	je	.label_60
	cmp	qword ptr [rsp + 0x18], 0
	mov	ecx, 0
	je	.label_62
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_67
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
.label_60:
	mov	rcx, qword ptr [rsp + 0x18]
	test	rcx, rcx
	jne	.label_62
	movsxd	rax, dword ptr [rip + optind]
	lea	ecx, [rax + 1]
	mov	dword ptr [rip + optind],  ecx
	mov	rcx, qword ptr [r14 + rax*8]
.label_62:
	movsxd	rax, dword ptr [rip + optind]
	cmp	eax, r12d
	jge	.label_74
	test	rbx, rbx
	je	.label_77
	mov	rdi, rbx
	call	mode_create_from_ref
	mov	qword ptr [rip + change],  rax
	test	rax, rax
	jne	.label_81
	call	__errno_location
	mov	r14d, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_85
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	rsi, rbx
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, r14d
	mov	rdx, rbp
	call	error
.label_77:
	mov	rbp, rcx
	mov	rdi, rbp
	call	mode_compile
	mov	qword ptr [rip + change],  rax
	test	rax, rax
	je	.label_99
	xor	edi, edi
	call	umask
	mov	dword ptr [rip + umask_value],  eax
.label_81:
	test	r15b, r15b
	je	.label_101
	mov	al, byte ptr [rip + recurse]
	xor	al, 1
	test	al, 1
	jne	.label_101
	mov	edi, OFFSET FLAT:main.dev_ino_buf
	call	get_root_dev_ino
	mov	qword ptr [rip + root_dev_ino],  rax
	test	rax, rax
	jne	.label_82
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_85
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	esi, OFFSET FLAT:label_31
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rbp
	call	error
.label_101:
	mov	qword ptr [rip + root_dev_ino],  0
.label_82:
	movsxd	rax, dword ptr [rip + optind]
	lea	rdi, [r14 + rax*8]
	mov	esi, 0x411
	xor	edx, edx
	call	xfts_open
	mov	qword ptr [rsp + 0x18], rax
	mov	rdi, rax
	call	rpl_fts_read
	mov	r12, rax
	mov	bpl, 1
	test	r12, r12
	je	.label_40
	mov	r14b, 1
	jmp	.label_47
.label_49:
	mov	qword ptr [r12 + 0x20], 1
	mov	edx, 1
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, r12
	call	rpl_fts_set
	mov	bpl, 1
	jmp	.label_37
.label_89:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_86
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, r13
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	jmp	.label_58
	.section	.text
	.align	16
	#Procedure 0x401ecc
	.globl sub_401ecc
	.type sub_401ecc, @function
sub_401ecc:

	nop	dword ptr [rax]
.label_47:
	mov	rbx, qword ptr [r12 + 0x30]
	mov	r13, qword ptr [r12 + 0x38]
	movzx	eax, word ptr [r12 + 0x70]
	add	eax, -2
	movzx	eax, ax
	cmp	eax, 0xb
	ja	.label_34
	mov	bpl, 1
	jmp	qword ptr [(rax * 8) + label_64]
.label_1037:
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, r12
	call	cycle_warning_required
	test	al, al
	je	.label_34
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_70
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	xor	edi, edi
	mov	esi, 3
	mov	rdx, r13
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	jmp	.label_37
	.section	.text
	.align	16
	#Procedure 0x401f41
	.globl sub_401f41
	.type sub_401f41, @function
sub_401f41:

	nop	word ptr cs:[rax + rax]
.label_34:
	mov	rax, qword ptr [rip + root_dev_ino]
	test	rax, rax
	je	.label_83
	mov	rcx, qword ptr [r12 + 0x80]
	cmp	rcx, qword ptr [rax]
	jne	.label_83
	mov	rcx, qword ptr [r12 + 0x78]
	cmp	rcx, qword ptr [rax + 8]
	jne	.label_83
	cmp	byte ptr [r13], 0x2f
	jne	.label_87
	cmp	byte ptr [r13 + 1], 0
	je	.label_89
.label_87:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_91
	mov	edx, 5
	call	dcgettext
	mov	rdx, r13
	mov	r13, rax
	xor	edi, edi
	mov	esi, 4
	call	quotearg_n_style
	mov	rbp, rax
	mov	edi, 1
	mov	esi, 4
	mov	edx, OFFSET FLAT:label_31
	call	quotearg_n_style
	mov	rbx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r13
	mov	rcx, rbp
	mov	r8, rbx
	call	error
.label_58:
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_102
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edx, 4
	mov	rbx, qword ptr [rsp + 0x18]
	mov	rdi, rbx
	mov	rsi, r12
	call	rpl_fts_set
	mov	rdi, rbx
	call	rpl_fts_read
	jmp	.label_37
.label_83:
	mov	qword ptr [rsp + 0x10], rbx
	mov	byte ptr [rsp + 0x20], r14b
	mov	edi, dword ptr [r12 + 0x90]
	mov	ebx, edi
	and	ebx, 0xf000
	xor	esi, esi
	cmp	ebx, 0x4000
	sete	sil
	mov	edx, dword ptr [rip + umask_value]
	mov	rcx, qword ptr [rip + change]
	xor	r15d, r15d
	xor	r8d, r8d
	mov	r14d, edi
	call	mode_adjust
	mov	ebp, eax
	cmp	ebx, 0xa000
	mov	qword ptr [rsp + 8], r13
	jne	.label_45
	mov	r13b, 1
	mov	ebx, ebp
	jmp	.label_66
.label_1038:
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r13
	xor	r15d, r15d
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	mov	r13d, 0
	jne	.label_51
	mov	ebx, dword ptr [r12 + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_54
	jmp	.label_55
.label_1041:
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r13
	xor	r15d, r15d
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	mov	r13d, 0
	jne	.label_51
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_61
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	jmp	.label_69
.label_1039:
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r13
	xor	r15d, r15d
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	mov	r13d, 0
	jne	.label_51
	mov	ebx, dword ptr [r12 + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, 3
	mov	rdx, qword ptr [rsp + 8]
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_78
	xor	eax, eax
	mov	esi, ebx
	jmp	.label_69
.label_1040:
	cmp	qword ptr [r12 + 0x58], 0
	jne	.label_84
	cmp	qword ptr [r12 + 0x20], 0
	je	.label_49
.label_84:
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r13
	xor	r15d, r15d
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	mov	r13d, 0
	jne	.label_51
	mov	ebx, dword ptr [r12 + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_93
.label_55:
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rbp
.label_69:
	call	error
	xor	r13d, r13d
	jmp	.label_51
.label_45:
	mov	rax, qword ptr [rsp + 0x18]
	mov	edi, dword ptr [rax + 0x2c]
	xor	ecx, ecx
	mov	rsi, qword ptr [rsp + 0x10]
	mov	edx, ebp
	call	fchmodat
	mov	r15b, 1
	test	eax, eax
	mov	ebx, ebp
	je	.label_105
	xor	r15d, r15d
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	mov	ebp, r14d
	jne	.label_106
	call	__errno_location
	mov	r14d, dword ptr [rax]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_35
	mov	edx, 5
	call	dcgettext
	mov	qword ptr [rsp + 0x40], rax
	mov	edi, 4
	mov	rsi, r13
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, r14d
	mov	rdx, qword ptr [rsp + 0x40]
	call	error
.label_106:
	xor	r13d, r13d
	jmp	.label_42
.label_105:
	mov	r13b, 1
.label_66:
	mov	ebp, r14d
.label_42:
	movzx	r14d, byte ptr [rsp + 0x20]
.label_51:
	cmp	dword ptr [rip + verbosity],  2
	je	.label_44
	test	r15b, r15b
	je	.label_46
	test	bh, 0xe
	mov	eax, ebx
	je	.label_48
	mov	rax, qword ptr [rsp + 0x18]
	mov	esi, dword ptr [rax + 0x2c]
	mov	edi, 1
	xor	r8d, r8d
	mov	rdx, qword ptr [rsp + 0x10]
	lea	rcx, [rsp + 0x48]
	call	__fxstatat
	test	eax, eax
	je	.label_97
	movzx	eax, byte ptr [rip + force_silent]
	test	al, al
	jne	.label_46
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rsp + 0x10], eax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_56
	mov	edx, 5
	call	dcgettext
	mov	byte ptr [rsp + 0x20], r14b
	mov	r14d, ebp
	mov	ebp, ebx
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, dword ptr [rsp + 0x10]
	mov	rdx, rbx
	mov	ebx, ebp
	mov	ebp, r14d
	movzx	r14d, byte ptr [rsp + 0x20]
	call	error
	nop	word ptr cs:[rax + rax]
.label_46:
	xor	eax, eax
	jmp	.label_71
.label_97:
	mov	eax, dword ptr [rsp + 0x60]
.label_48:
	xor	eax, ebp
	test	ax, 0xfff
	setne	al
.label_71:
	test	al, al
	jne	.label_72
	mov	ecx, dword ptr [rip + verbosity]
	test	ecx, ecx
	jne	.label_44
.label_72:
	mov	dword ptr [rsp + 0x10], ebp
	mov	ebp, ebx
	xor	ecx, ecx
	test	al, al
	sete	cl
	lea	ebx, [rcx + rcx + 1]
	test	r15b, r15b
	mov	eax, 0
	cmove	ebx, eax
	test	r13b, r13b
	mov	eax, 2
	cmove	ebx, eax
	test	ebx, ebx
	je	.label_73
	mov	edi, ebp
	lea	rsi, [rsp + 0x48]
	call	strmode
	mov	byte ptr [rsp + 0x52], 0
	mov	edi, dword ptr [rsp + 0x10]
	lea	rsi, [rsp + 0x34]
	call	strmode
	mov	byte ptr [rsp + 0x3e], 0
	and	bl, 3
	cmp	bl, 3
	je	.label_65
	cmp	bl, 2
	je	.label_90
	cmp	bl, 1
	jne	.label_92
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_95
	jmp	.label_96
.label_73:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_98
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rbx
	mov	rdx, rcx
	call	__printf_chk
	jmp	.label_68
.label_65:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_107
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rdx, rax
	mov	eax, ebp
	mov	ecx, eax
	and	ecx, 0xfff
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rbx
	lea	r8, [rsp + 0x49]
	call	__printf_chk
	jmp	.label_68
.label_90:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_38
.label_96:
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 8]
	call	quotearg_style
	mov	rdx, rax
	mov	eax, dword ptr [rsp + 0x10]
	mov	ecx, eax
	and	ecx, 0xfff
	mov	eax, ebp
	mov	r9d, eax
	and	r9d, 0xfff
	lea	rax, [rsp + 0x49]
	mov	qword ptr [rsp], rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rbx
	lea	r8, [rsp + 0x35]
	call	__printf_chk
.label_68:
	mov	ebx, ebp
	mov	ebp, dword ptr [rsp + 0x10]
.label_44:
	test	r15b, r15b
	je	.label_52
	cmp	byte ptr [rip + diagnose_surprises],  1
	jne	.label_52
	mov	eax, ebp
	and	eax, 0xf000
	xor	esi, esi
	cmp	eax, 0x4000
	sete	sil
	mov	rcx, qword ptr [rip + change]
	xor	edx, edx
	xor	r8d, r8d
	mov	edi, ebp
	call	mode_adjust
	mov	ebp, eax
	not	eax
	test	ebx, eax
	je	.label_52
	mov	edi, ebx
	lea	rsi, [rsp + 0x48]
	call	strmode
	mov	edi, ebp
	lea	rsi, [rsp + 0x34]
	call	strmode
	mov	byte ptr [rsp + 0x3e], 0
	mov	byte ptr [rsp + 0x52], 0
	xor	r13d, r13d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_63
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	xor	edi, edi
	mov	esi, 3
	mov	rdx, qword ptr [rsp + 8]
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	lea	r8, [rsp + 0x49]
	lea	r9, [rsp + 0x35]
	call	error
	nop	word ptr cs:[rax + rax]
.label_52:
	movzx	eax, byte ptr [rip + recurse]
	test	al, al
	jne	.label_75
	mov	edx, 4
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, r12
	call	rpl_fts_set
.label_75:
	test	r13b, r13b
	setne	bpl
.label_37:
	and	bpl, r14b
	mov	rdi, qword ptr [rsp + 0x18]
	call	rpl_fts_read
	mov	r12, rax
	test	r12, r12
	mov	r14d, ebp
	jne	.label_47
.label_40:
	call	__errno_location
	mov	r14, rax
	mov	ebx, dword ptr [r14]
	test	ebx, ebx
	je	.label_88
	mov	al, byte ptr [rip + force_silent]
	xor	ebp, ebp
	test	al, al
	jne	.label_88
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_94
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_88:
	mov	rdi, qword ptr [rsp + 0x18]
	call	rpl_fts_close
	test	eax, eax
	je	.label_100
	mov	ebx, dword ptr [r14]
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_57
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_100:
	movzx	eax, bpl
	xor	eax, 1
	add	rsp, 0xd8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1018:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	qword ptr [rsp], 0
	mov	esi, OFFSET FLAT:label_11
	mov	edx, OFFSET FLAT:label_22
	mov	r8d, OFFSET FLAT:label_32
	mov	r9d, OFFSET FLAT:label_33
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_1019:
	xor	edi, edi
	call	usage
.label_30:
	mov	edi, 1
	call	usage
.label_92:
	call	abort
.label_74:
	mov	rdx, rcx
	test	rcx, rcx
	je	.label_43
	cmp	rdx, qword ptr [r14 + rax*8 - 8]
	jne	.label_43
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_50
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	movsxd	rax, r12d
	mov	rdi, qword ptr [r14 + rax*8 - 8]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	mov	edi, 1
	call	usage
.label_43:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_103
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
.label_99:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_59
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, rbp
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	mov	edi, 1
	call	usage
	.section	.text
	.align	16
	#Procedure 0x402709
	.globl sub_402709
	.type sub_402709, @function
sub_402709:

	nop	dword ptr [rax]
	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402710
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402718
	.globl sub_402718
	.type sub_402718, @function
sub_402718:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402720
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	16
	#Procedure 0x402728
	.globl sub_402728
	.type sub_402728, @function
sub_402728:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402730

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_113
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_110
	cmp	dword ptr [rbp], 0x20
	jne	.label_110
.label_113:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_109
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_110:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_111
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_108
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_78
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_109:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_108:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_112
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4027f0

	.globl strmode
	.type strmode, @function
strmode:
	mov	eax, edi
	mov	edx, eax
	and	edx, 0xfffff000
	movsx	ecx, dx
	cmp	ecx, 0xfff
	jle	.label_125
	cmp	ecx, 0x3fff
	jg	.label_116
	movzx	ecx, dx
	cmp	ecx, 0x1000
	je	.label_119
	cmp	ecx, 0x2000
	jne	.label_120
	mov	cl, 0x63
	jmp	.label_114
.label_125:
	mov	cl, 0x2d
	movzx	edx, dx
	cmp	edx, 0x8000
	je	.label_114
	cmp	edx, 0xa000
	je	.label_126
	cmp	edx, 0xc000
	jne	.label_120
	mov	cl, 0x73
	jmp	.label_114
.label_116:
	movzx	ecx, dx
	cmp	ecx, 0x6000
	je	.label_121
	cmp	ecx, 0x4000
	jne	.label_120
	mov	cl, 0x64
	jmp	.label_114
.label_119:
	mov	cl, 0x70
	jmp	.label_114
.label_121:
	mov	cl, 0x62
	jmp	.label_114
.label_120:
	mov	cl, 0x3f
	jmp	.label_114
.label_126:
	mov	cl, 0x6c
.label_114:
	push	rbx
	mov	byte ptr [rsi], cl
	mov	bl, ah
	test	bl, 1
	mov	r9b, 0x72
	mov	cl, 0x72
	jne	.label_123
	mov	cl, 0x2d
.label_123:
	mov	byte ptr [rsi + 1], cl
	mov	ecx, eax
	sar	cl, 7
	and	cl, 0x4a
	add	cl, 0x2d
	mov	byte ptr [rsi + 2], cl
	mov	ecx, eax
	and	ecx, 0x40
	mov	edx, ecx
	shr	edx, 1
	or	edx, 0x53
	test	ecx, ecx
	mov	r8b, 0x78
	mov	cl, 0x78
	jne	.label_129
	mov	cl, 0x2d
.label_129:
	test	bl, 8
	jne	.label_122
	mov	dl, cl
.label_122:
	mov	byte ptr [rsi + 3], dl
	test	al, 0x20
	mov	cl, 0x72
	jne	.label_130
	mov	cl, 0x2d
.label_130:
	mov	byte ptr [rsi + 4], cl
	test	al, 0x10
	mov	dl, 0x77
	mov	cl, 0x77
	jne	.label_128
	mov	cl, 0x2d
.label_128:
	mov	byte ptr [rsi + 5], cl
	mov	ecx, eax
	and	ecx, 8
	lea	edi, [rcx*4 + 0x53]
	mov	cl, 0x78
	jne	.label_115
	mov	cl, 0x2d
.label_115:
	test	bl, 4
	jne	.label_118
	mov	dil, cl
.label_118:
	mov	byte ptr [rsi + 6], dil
	test	al, 4
	jne	.label_124
	mov	r9b, 0x2d
.label_124:
	mov	byte ptr [rsi + 7], r9b
	test	al, 2
	jne	.label_117
	mov	dl, 0x2d
.label_117:
	mov	byte ptr [rsi + 8], dl
	and	eax, 1
	jne	.label_127
	mov	r8b, 0x2d
.label_127:
	test	bl, 2
	pop	rbx
	je	.label_131
	shl	eax, 5
	or	eax, 0x54
	mov	r8d, eax
.label_131:
	mov	byte ptr [rsi + 9], r8b
	mov	byte ptr [rsi + 0xa], 0x20
	mov	byte ptr [rsi + 0xb], 0
	ret	
	.section	.text
	.align	16
	#Procedure 0x40291b
	.globl sub_40291b
	.type sub_40291b, @function
sub_40291b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402920
	.globl filemodestring
	.type filemodestring, @function
filemodestring:

	mov	edi, dword ptr [rdi + 0x18]
	jmp	strmode
	.section	.text
	.align	16
	#Procedure 0x402928
	.globl sub_402928
	.type sub_402928, @function
sub_402928:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402930

	.globl mode_compile
	.type mode_compile, @function
mode_compile:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	mov	bl, byte ptr [r14]
	mov	eax, ebx
	and	al, 0xf8
	cmp	al, 0x30
	jne	.label_142
	xor	eax, eax
	xor	r15d, r15d
	mov	rdx, r14
	nop	
.label_151:
	movsx	ecx, bl
	lea	r15d, [rcx + r15*8 - 0x30]
	cmp	r15d, 0xfff
	ja	.label_133
	movzx	ebx, byte ptr [rdx + 1]
	inc	rdx
	mov	ecx, ebx
	and	cl, 0xf8
	cmp	cl, 0x30
	je	.label_151
	xor	eax, eax
	test	bl, bl
	jne	.label_133
	sub	rdx, r14
	mov	eax, r15d
	and	eax, 0xc00
	or	eax, 0x3ff
	cmp	rdx, 5
	mov	ebx, 0xfff
	cmovl	ebx, eax
	mov	edi, 0x20
	call	xmalloc
	mov	byte ptr [rax], 0x3d
	mov	byte ptr [rax + 1], 1
	mov	dword ptr [rax + 4], 0xfff
	mov	dword ptr [rax + 8], r15d
	mov	dword ptr [rax + 0xc], ebx
	mov	byte ptr [rax + 0x11], 0
	jmp	.label_133
.label_142:
	lea	rax, [r14 + 1]
	mov	edi, 1
	jmp	.label_146
	.section	.text
	.align	16
	#Procedure 0x4029cf
	.globl sub_4029cf
	.type sub_4029cf, @function
sub_4029cf:

	nop	
.label_153:
	add	rdi, rdx
	movzx	ebx, byte ptr [rax]
	inc	rax
.label_146:
	cmp	bl, 0x2c
	jle	.label_145
	cmp	bl, 0x2d
	je	.label_150
	cmp	bl, 0x3d
	mov	edx, 1
	je	.label_153
	jmp	.label_156
	.section	.text
	.align	16
	#Procedure 0x4029ef
	.globl sub_4029ef
	.type sub_4029ef, @function
sub_4029ef:

	nop	
.label_145:
	cmp	bl, 0x2b
	mov	edx, 1
	je	.label_153
	test	bl, bl
	je	.label_158
.label_156:
	xor	edx, edx
	jmp	.label_153
	.section	.text
	.align	16
	#Procedure 0x402a02
	.globl sub_402a02
	.type sub_402a02, @function
sub_402a02:

	nop	word ptr cs:[rax + rax]
.label_150:
	mov	edx, 1
	jmp	.label_153
.label_158:
	mov	rax, rdi
	shr	rax, 0x3b
	jne	.label_138
	shl	rdi, 4
	call	xmalloc
	xor	r9d, r9d
	movabs	r8, 0x2000280000000000
	jmp	.label_141
	.section	.text
	.align	16
	#Procedure 0x402a3c

	.globl sub_402a3c
	.type sub_402a3c, @function
sub_402a3c:
	inc	r14
	nop	
.label_141:
	xor	esi, esi
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x402a44
	.globl sub_402a44
	.type sub_402a44, @function
sub_402a44:

	nop	word ptr cs:[rax + rax]
.label_981:
	or	esi, 0x207
	inc	r14
.label_132:
	movzx	edx, byte ptr [r14]
	movsx	ecx, dl
	lea	edi, [rcx - 0x61]
	cmp	edi, 0x14
	ja	.label_149
	jmp	qword ptr [(rdi * 8) + label_155]
.label_979:
	or	esi, 0xfff
	inc	r14
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x402a7a
	.globl sub_402a7a
	.type sub_402a7a, @function
sub_402a7a:

	nop	word ptr [rax + rax]
.label_980:
	or	esi, 0x438
	inc	r14
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x402a8b
	.globl sub_402a8b
	.type sub_402a8b, @function
sub_402a8b:

	nop	dword ptr [rax + rax]
.label_982:
	or	esi, 0x9c0
	inc	r14
	jmp	.label_132
	.section	.text
	.align	16
	#Procedure 0x402a9b
	.globl sub_402a9b
	.type sub_402a9b, @function
sub_402a9b:

	nop	dword ptr [rax + rax]
.label_149:
	mov	edi, ecx
	cmp	ecx, 0x3d
	ja	.label_134
	bt	r8, rdi
	jae	.label_134
.label_957:
	lea	rbx, [r14 + 1]
	movsx	ecx, byte ptr [r14 + 1]
	mov	edi, ecx
	add	edi, -0x30
	cmp	edi, 0x45
	ja	.label_143
	jmp	qword ptr [(rdi * 8) + label_147]
.label_1064:
	xor	edi, edi
	mov	r14, rbx
	nop	word ptr cs:[rax + rax]
.label_157:
	movsx	ecx, cl
	lea	edi, [rcx + rdi*8 - 0x30]
	cmp	edi, 0xfff
	ja	.label_134
	mov	cl, byte ptr [r14 + 1]
	inc	r14
	mov	ebx, ecx
	and	bl, 0xf8
	cmp	bl, 0x30
	je	.label_157
	test	esi, esi
	jne	.label_134
	mov	r11b, 1
	mov	esi, 0xfff
	test	cl, cl
	je	.label_148
	cmp	cl, 0x2c
	mov	r10d, 0xfff
	je	.label_139
	jmp	.label_134
.label_148:
	mov	r10d, 0xfff
	jmp	.label_139
.label_143:
	mov	r11b, 1
	xor	r10d, r10d
	mov	r14, rbx
	xor	edi, edi
	jmp	.label_144
	.section	.text
	.align	16
	#Procedure 0x402b44
	.globl sub_402b44
	.type sub_402b44, @function
sub_402b44:

	nop	word ptr cs:[rax + rax]
.label_140:
	mov	cl, byte ptr [r14 + 1]
	inc	r14
	mov	r11d, ebx
.label_144:
	movsx	ecx, cl
	add	ecx, -0x58
	cmp	ecx, 0x20
	ja	.label_139
	mov	bl, 2
	jmp	qword ptr [(rcx * 8) + label_154]
.label_944:
	or	edi, 0x124
	jmp	.label_135
.label_945:
	or	edi, 0xc00
	jmp	.label_135
.label_946:
	or	edi, 0x200
	jmp	.label_135
.label_947:
	or	edi, 0x92
	jmp	.label_135
.label_948:
	or	edi, 0x49
	nop	word ptr cs:[rax + rax]
.label_135:
	mov	ebx, r11d
	jmp	.label_140
.label_1065:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 0x38
	jmp	.label_139
.label_1066:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 7
	jmp	.label_139
.label_1067:
	add	r14, 2
	mov	r11b, 3
	xor	r10d, r10d
	mov	edi, 0x1c0
	nop	word ptr cs:[rax + rax]
.label_139:
	mov	rcx, r9
	shl	rcx, 4
	mov	byte ptr [rax + rcx], dl
	mov	byte ptr [rax + rcx + 1], r11b
	mov	dword ptr [rax + rcx + 4], esi
	mov	dword ptr [rax + rcx + 8], edi
	test	r10d, r10d
	jne	.label_152
	cmp	esi, 1
	sbb	r10d, r10d
	or	r10d, esi
	and	r10d, edi
.label_152:
	inc	r9
	mov	dword ptr [rax + rcx + 0xc], r10d
	mov	dl, byte ptr [r14]
	mov	ecx, edx
	add	cl, 0xd5
	movzx	ecx, cl
	cmp	cl, 0x12
	ja	.label_136
	jmp	qword ptr [(rcx * 8) + label_137]
.label_136:
	test	dl, dl
	jne	.label_134
	shl	r9, 4
	mov	byte ptr [rax + r9 + 1], 0
	jmp	.label_133
.label_134:
	mov	rdi, rax
	call	free
	xor	eax, eax
.label_133:
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_138:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x402c4c
	.globl sub_402c4c
	.type sub_402c4c, @function
sub_402c4c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x402c50

	.globl mode_create_from_ref
	.type mode_create_from_ref, @function
mode_create_from_ref:
	push	rbx
	sub	rsp, 0x90
	mov	rax, rdi
	lea	rdx, [rsp]
	mov	edi, 1
	mov	rsi, rax
	call	__xstat
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_159
	mov	ebx, dword ptr [rsp + 0x18]
	mov	edi, 0x20
	call	xmalloc
	mov	byte ptr [rax], 0x3d
	mov	byte ptr [rax + 1], 1
	mov	dword ptr [rax + 4], 0xfff
	mov	dword ptr [rax + 8], ebx
	mov	dword ptr [rax + 0xc], 0xfff
	mov	byte ptr [rax + 0x11], 0
.label_159:
	add	rsp, 0x90
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x402ca7
	.globl sub_402ca7
	.type sub_402ca7, @function
sub_402ca7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402cb0

	.globl mode_adjust
	.type mode_adjust, @function
mode_adjust:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	qword ptr [rsp - 8], r8
	and	edi, 0xfff
	mov	al, byte ptr [rcx + 1]
	xor	r13d, r13d
	test	al, al
	je	.label_164
	xor	r13d, r13d
	test	sil, sil
	mov	r9d, 0xc00
	cmove	r9d, r13d
	not	edx
	mov	r10d, r9d
	not	r10d
	movzx	r12d, sil
	mov	r14d, 0x92
	mov	r15d, 0x49
	nop	dword ptr [rax + rax]
.label_163:
	movsx	ebp, al
	mov	ebx, dword ptr [rcx + 4]
	mov	esi, dword ptr [rcx + 8]
	mov	r8d, dword ptr [rcx + 0xc]
	cmp	ebp, 2
	je	.label_160
	cmp	ebp, 3
	jne	.label_165
	and	esi, edi
	mov	ebp, esi
	and	ebp, 0x124
	mov	eax, 0x124
	cmovne	ebp, eax
	mov	r11d, esi
	and	r11d, 0x92
	cmovne	r11d, r14d
	or	r11d, esi
	and	esi, 0x49
	cmovne	esi, r15d
	or	esi, ebp
	or	esi, r11d
	jmp	.label_165
	.section	.text
	.align	16
	#Procedure 0x402d48
	.globl sub_402d48
	.type sub_402d48, @function
sub_402d48:

	nop	dword ptr [rax + rax]
.label_160:
	mov	ebp, edi
	and	ebp, 0x49
	mov	eax, esi
	or	eax, 0x49
	or	ebp, r12d
	cmovne	esi, eax
.label_165:
	test	ebx, ebx
	mov	eax, edx
	cmovne	eax, ebx
	mov	ebp, r8d
	or	ebp, r10d
	and	ebp, esi
	and	ebp, eax
	movsx	esi, byte ptr [rcx]
	cmp	esi, 0x2b
	je	.label_161
	cmp	esi, 0x2d
	je	.label_167
	cmp	esi, 0x3d
	jne	.label_162
	not	r8d
	and	r8d, r9d
	test	ebx, ebx
	mov	eax, ebx
	not	eax
	cmove	eax, ebx
	or	eax, r8d
	mov	esi, eax
	not	esi
	and	esi, 0xfff
	or	r13d, esi
	and	eax, edi
	or	ebp, eax
	mov	edi, ebp
	jmp	.label_162
	.section	.text
	.align	16
	#Procedure 0x402daa
	.globl sub_402daa
	.type sub_402daa, @function
sub_402daa:

	nop	word ptr [rax + rax]
.label_167:
	or	r13d, ebp
	not	ebp
	and	edi, ebp
	jmp	.label_162
	.section	.text
	.align	16
	#Procedure 0x402db9
	.globl sub_402db9
	.type sub_402db9, @function
sub_402db9:

	nop	dword ptr [rax]
.label_161:
	or	r13d, ebp
	or	edi, ebp
.label_162:
	movzx	eax, byte ptr [rcx + 0x11]
	add	rcx, 0x10
	test	al, al
	jne	.label_163
.label_164:
	mov	rax, qword ptr [rsp - 8]
	test	rax, rax
	je	.label_166
	mov	dword ptr [rax], r13d
.label_166:
	mov	eax, edi
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402def
	.globl sub_402def
	.type sub_402def, @function
sub_402def:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402df0

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_171
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_173
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_168
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_173
	mov	esi, OFFSET FLAT:label_170
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_169
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_169:
	mov	rbx, r14
.label_173:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_171:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_172
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402e91
	.globl sub_402e91
	.type sub_402e91, @function
sub_402e91:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402ea0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x402ed3
	.globl sub_402ed3
	.type sub_402ed3, @function
sub_402ed3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402ee0
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	16
	#Procedure 0x402eef
	.globl sub_402eef
	.type sub_402eef, @function
sub_402eef:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402ef0
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402eff
	.globl sub_402eff
	.type sub_402eff, @function
sub_402eff:

	nop	
	.section	.text
	.align	16
	#Procedure 0x402f00
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402f36
	.globl sub_402f36
	.type sub_402f36, @function
sub_402f36:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402f40
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x402f53
	.globl sub_402f53
	.type sub_402f53, @function
sub_402f53:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402f60
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_174
	test	rdx, rdx
	je	.label_174
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_174:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x402f8b
	.globl sub_402f8b
	.type sub_402f8b, @function
sub_402f8b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x402f90
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403005
	.globl sub_403005
	.type sub_403005, @function
sub_403005:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403010

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x48], rcx
	mov	qword ptr [rsp + 0x28], rdx
	mov	r13, rsi
	mov	qword ptr [rsp + 0x10], rdi
	mov	rax, qword ptr [rsp + 0x110]
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x108]
	mov	qword ptr [rsp + 0x80], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xb8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x9c], eax
	mov	dword ptr [rsp + 0x20], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x98], ebx
	mov	dil, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x50], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa8], rcx
	jmp	.label_203
	.section	.text
	.align	16
	#Procedure 0x4030bf
	.globl sub_4030bf
	.type sub_4030bf, @function
sub_4030bf:

	nop	
.label_243:
	cmp	r8d, 2
	setne	al
	cmp	byte ptr [rsp + 0xf], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa8]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x34]
	mov	rsi, qword ptr [rsp + 0xc0]
	je	.label_213
	or	al, dl
	jne	.label_213
	test	dil, 1
	jne	.label_242
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_213
	test	rbp, rbp
	mov	r15d, r8d
	mov	al, bl
	mov	qword ptr [rsp + 0x48], rcx
	mov	r12d, esi
	mov	r13, qword ptr [rsp + 0x68]
	je	.label_203
	jmp	.label_213
.label_1052:
	mov	r8d, 5
	test	r12b, 1
	jne	.label_249
	test	rbp, rbp
	je	.label_253
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax], 0x22
.label_253:
	mov	r14d, 1
	jmp	.label_256
.label_1053:
	mov	r13b, 1
	mov	r8d, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_258
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	sil, 1
	jmp	.label_197
.label_249:
	xor	r14d, r14d
.label_256:
	mov	eax, OFFSET FLAT:label_258
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	r13b, 1
	jmp	.label_268
	.section	.text
	.align	16
	#Procedure 0x40318f
	.globl sub_40318f
	.type sub_40318f, @function
sub_40318f:

	nop	
.label_203:
	mov	rbp, r13
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_276
	mov	r8d, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	jmp	qword ptr [(rcx * 8) + label_283]
.label_1054:
	mov	r14d, edi
	mov	edi, OFFSET FLAT:label_288
	mov	esi, r15d
	mov	ebx, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x80], rax
	mov	edi, OFFSET FLAT:label_189
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebx
	mov	edi, r14d
	mov	qword ptr [rsp + 0x78], rax
.label_1055:
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x80]
	jne	.label_269
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_269
	xor	r14d, r14d
	nop	
.label_187:
	cmp	r14, rbp
	jae	.label_183
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], al
.label_183:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_187
.label_269:
	mov	rbx, qword ptr [rsp + 0x78]
	mov	rdi, rbx
	call	strlen
	mov	qword ptr [rsp + 0x50], rax
	mov	r8d, r15d
	mov	qword ptr [rsp + 0x58], rbx
	mov	r13b, 1
	mov	sil, r12b
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r9d, dword ptr [rsp + 0x60]
	jmp	.label_197
.label_1047:
	xor	r8d, r8d
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_197
.label_1050:
	mov	al, 1
.label_1048:
	mov	r12b, 1
.label_1051:
	test	r12b, 1
	mov	cl, 1
	je	.label_214
	mov	ecx, eax
.label_214:
	mov	al, cl
.label_1049:
	mov	r8d, 2
	test	r12b, 1
	jne	.label_216
	test	rbp, rbp
	je	.label_222
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx], 0x27
.label_222:
	mov	r14d, 1
	jmp	.label_224
.label_216:
	xor	r14d, r14d
.label_224:
	mov	ecx, OFFSET FLAT:label_189
	mov	qword ptr [rsp + 0x58], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x50], rcx
	mov	r13d, eax
.label_268:
	mov	sil, r12b
.label_197:
	cmp	qword ptr [rsp + 0x100], 0
	setne	r12b
	cmp	r8d, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x33]
	mov	ebx, r15d
	mov	byte ptr [rsp + 0x1f], cl
	and	bl, cl
	cmp	qword ptr [rsp + 0x50], 0
	setne	cl
	mov	edx, ecx
	mov	byte ptr [rsp + 0x36], bl
	and	dl, bl
	mov	byte ptr [rsp + 0x37], dl
	mov	ebx, esi
	and	bl, 1
	sete	dl
	and	al, bl
	mov	byte ptr [rsp + 0x31], al
	mov	byte ptr [rsp + 0xf], bl
	and	r12b, bl
	mov	byte ptr [rsp + 0x35], r12b
	or	dl, r15b
	mov	byte ptr [rsp + 0x27], dl
	mov	byte ptr [rsp + 0x34], r13b
	mov	qword ptr [rsp + 0xc0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x32], r13b
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x38], r8
	jmp	.label_234
	.section	.text
	.align	16
	#Procedure 0x403351
	.globl sub_403351
	.type sub_403351, @function
sub_403351:

	nop	word ptr cs:[rax + rax]
.label_260:
	inc	r12
.label_234:
	cmp	r11, -1
	je	.label_262
	cmp	r12, r11
	jne	.label_263
	jmp	.label_267
	.section	.text
	.align	16
	#Procedure 0x403373
	.globl sub_403373
	.type sub_403373, @function
sub_403373:

	nop	word ptr cs:[rax + rax]
.label_262:
	mov	rcx, -1
	cmp	byte ptr [r10 + r12], 0
	je	.label_272
.label_263:
	cmp	byte ptr [rsp + 0x37], 0
	je	.label_277
	mov	rax, qword ptr [rsp + 0x50]
	lea	rbx, [r12 + rax]
	cmp	rax, 2
	jb	.label_282
	cmp	r11, -1
	jne	.label_282
	mov	r15d, edi
	mov	rdi, r10
	mov	r13d, r9d
	call	strlen
	mov	r9d, r13d
	mov	r8, qword ptr [rsp + 0x38]
	mov	edi, r15d
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_282:
	cmp	rbx, r11
	jbe	.label_293
.label_277:
	xor	esi, esi
.label_190:
	movzx	r15d, byte ptr [r10 + r12]
	cmp	r15, 0x7e
	ja	.label_295
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_298]
.label_992:
	test	r12, r12
	jne	.label_182
	jmp	.label_175
	.section	.text
	.align	16
	#Procedure 0x403406
	.globl sub_403406
	.type sub_403406, @function
sub_403406:

	nop	word ptr cs:[rax + rax]
.label_293:
	mov	r13d, r9d
	mov	r15d, edi
	mov	rbx, r11
	lea	rdi, [r10 + r12]
	mov	rsi, qword ptr [rsp + 0x58]
	mov	rdx, qword ptr [rsp + 0x50]
	call	memcmp
	test	eax, eax
	sete	sil
	jne	.label_185
	cmp	byte ptr [rsp + 0xf], 0
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	je	.label_190
	jmp	.label_195
.label_185:
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	jmp	.label_190
.label_996:
	xor	eax, eax
	cmp	r11, -1
	je	.label_207
	test	r12, r12
	jne	.label_211
	cmp	r11, 1
	je	.label_175
	xor	r13d, r13d
	jmp	.label_176
.label_985:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_218
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_195
	cmp	r8d, 2
	jne	.label_228
	mov	eax, r9d
	and	al, 1
	jne	.label_228
	cmp	r14, rbp
	jae	.label_231
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_231:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_232
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_232:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_235
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_235:
	add	r14, 3
	mov	r9b, 1
.label_228:
	mov	rcx, r14
	cmp	rcx, rbp
	jae	.label_241
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + rcx], 0x5c
.label_241:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r8d, 2
	je	.label_210
	lea	rdx, [r12 + 1]
	cmp	rdx, r11
	jae	.label_210
	mov	dl, byte ptr [r10 + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_210
	cmp	r14, rbp
	jae	.label_266
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x30
.label_266:
	lea	rdx, [rcx + 2]
	cmp	rdx, rbp
	jae	.label_252
	mov	ebx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rdx], 0x30
	mov	esi, ebx
.label_252:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_176
.label_986:
	mov	bl, 0x62
	jmp	.label_230
.label_987:
	mov	cl, 0x74
	jmp	.label_215
.label_988:
	mov	bl, 0x76
	jmp	.label_230
.label_989:
	mov	bl, 0x66
	jmp	.label_230
.label_990:
	mov	cl, 0x72
	jmp	.label_215
.label_993:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa8], rax
	cmp	r8d, 2
	jne	.label_274
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_196
	test	rbp, rbp
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, rbp
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	rbp, rax
	cmp	r14, rbp
	jae	.label_284
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_284:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_296
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x5c
.label_296:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_300
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_300:
	add	r14, 3
	xor	r9d, r9d
.label_274:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_176
.label_994:
	mov	r15b, 0x3f
	cmp	r8d, 5
	je	.label_178
	cmp	r8d, 2
	jne	.label_182
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_182
	jmp	.label_196
.label_995:
	cmp	r8d, 2
	jne	.label_192
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_196
	mov	r15b, 0x5c
	xor	eax, eax
	jmp	.label_200
.label_295:
	cmp	qword ptr [rsp + 0xb8], 1
	mov	qword ptr [rsp + 0xa0], rbp
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	mov	dword ptr [rsp + 0x94], esi
	jne	.label_202
	mov	qword ptr [rsp + 0x48], r11
	call	__ctype_b_loc
	mov	r10, qword ptr [rsp + 0x28]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	ebx, 1
	jmp	.label_255
.label_207:
	test	r12, r12
	jne	.label_225
	mov	cl, byte ptr [r10 + 1]
	test	cl, cl
	jne	.label_225
.label_175:
	mov	dl, 1
.label_991:
	cmp	byte ptr [rsp + 0x27], 0
	je	.label_196
	xor	eax, eax
	mov	r13b, dl
.label_176:
	cmp	byte ptr [rsp + 0x36], 0
	je	.label_238
	cmp	qword ptr [rsp + 0x100], 0
	jne	.label_236
	jmp	.label_239
	.section	.text
	.align	16
	#Procedure 0x4036e4
	.globl sub_4036e4
	.type sub_4036e4, @function
sub_4036e4:

	nop	word ptr cs:[rax + rax]
.label_238:
	cmp	byte ptr [rsp + 0x35], 0
	je	.label_239
.label_236:
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	ebx, esi
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_229
	mov	rcx, qword ptr [rsp + 0x100]
	and	esi, dword ptr [rcx + rdx*4]
	jmp	.label_247
	.section	.text
	.align	16
	#Procedure 0x40371d
	.globl sub_40371d
	.type sub_40371d, @function
sub_40371d:

	nop	dword ptr [rax]
.label_239:
	test	sil, sil
.label_247:
	mov	ebx, r15d
	je	.label_177
	jmp	.label_251
.label_229:
	mov	ebx, r15d
	jmp	.label_251
.label_218:
	cmp	dword ptr [rsp + 0x9c], 0
	jne	.label_260
	xor	r15d, r15d
	jmp	.label_182
.label_192:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x32], 0
	je	.label_215
	xor	eax, eax
	mov	r15b, 0x5c
.label_200:
	xor	r13d, r13d
	jmp	.label_177
.label_215:
	cmp	byte ptr [rsp + 0x27], 0
	mov	ebx, ecx
	je	.label_196
.label_230:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r13d, 0
	je	.label_176
	nop	
.label_251:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_195
	cmp	r8d, 2
	jne	.label_275
	mov	eax, r9d
	and	al, 1
	jne	.label_275
	cmp	r14, rbp
	jae	.label_281
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_281:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_285
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_285:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_201
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_201:
	add	r14, 3
	mov	r9b, 1
.label_275:
	cmp	r14, rbp
	jae	.label_204
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_204:
	inc	r14
	jmp	.label_257
.label_202:
	mov	qword ptr [rsp + 0x70], 0
	cmp	r11, -1
	jne	.label_299
	mov	rdi, r10
	call	strlen
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_299:
	cmp	byte ptr [rsp + 0x31], 0
	mov	qword ptr [rsp + 0x48], r11
	mov	qword ptr [rsp + 0x88], r12
	je	.label_188
	lea	rax, [r10 + r12]
	mov	qword ptr [rsp + 0xb0], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbp, [rsp + 0x70]
.label_179:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbp
	call	rpl_mbrtowc
	mov	rbx, rax
	cmp	rbx, -2
	je	.label_193
	cmp	rbx, -1
	mov	r10, qword ptr [rsp + 0x28]
	movabs	rsi, 0x20000002b
	je	.label_208
	test	rbx, rbx
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_227
	cmp	rbx, 2
	mov	rbp, qword ptr [rsp + 0xa0]
	jb	.label_287
	mov	rax, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0xb0]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_237:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_199
	bt	rsi, rdx
	jb	.label_196
.label_199:
	inc	rcx
	cmp	rcx, rbx
	jb	.label_237
.label_287:
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	jne	.label_240
	xor	r13d, r13d
.label_240:
	lea	rbp, [rsp + 0x70]
	mov	r12, qword ptr [rsp + 0x40]
	add	r12, rbx
	mov	rdi, rbp
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_179
	jmp	.label_212
.label_210:
	xor	r13d, r13d
	jmp	.label_176
.label_225:
	mov	r11, -1
	xor	r13d, r13d
	jmp	.label_176
.label_178:
	cmp	dword ptr [rsp + 0x98], 0
	je	.label_182
	lea	rcx, [r12 + 2]
	cmp	rcx, r11
	jae	.label_182
	cmp	byte ptr [r10 + r12 + 1], 0x3f
	jne	.label_182
	movsx	edx, byte ptr [r10 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_261
	mov	ebx, esi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_226
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_271
	cmp	r14, rbp
	jae	.label_273
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x3f
.label_273:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_279
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_279:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_246
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_246:
	lea	rax, [r14 + 3]
	cmp	rax, rbp
	jae	.label_278
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x3f
.label_278:
	add	r14, 4
	xor	eax, eax
	mov	r12, rcx
	mov	r15b, dl
.label_226:
	xor	r13d, r13d
	mov	esi, ebx
	jmp	.label_176
.label_182:
	xor	eax, eax
.label_211:
	xor	r13d, r13d
	jmp	.label_176
.label_188:
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbx, [rsp + 0x70]
	nop	word ptr cs:[rax + rax]
.label_206:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbx
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_248
	cmp	rbp, -1
	je	.label_191
	cmp	rbp, -2
	je	.label_193
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	mov	r12, qword ptr [rsp + 0x40]
	jne	.label_198
	xor	r13d, r13d
.label_198:
	add	r12, rbp
	lea	rbx, [rsp + 0x70]
	mov	rdi, rbx
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_206
	jmp	.label_212
.label_193:
	mov	r10, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rsp + 0x40]
	lea	rax, [rsi + r12]
	mov	rdx, qword ptr [rsp + 0x48]
	cmp	rax, rdx
	jae	.label_219
	lea	rax, [r10 + r12]
.label_291:
	cmp	byte ptr [rax + rsi], 0
	je	.label_219
	lea	rcx, [r12 + rsi + 1]
	inc	rsi
	cmp	rcx, rdx
	jb	.label_291
.label_219:
	mov	qword ptr [rsp + 0x40], rsi
.label_208:
	xor	r13d, r13d
	jmp	.label_227
.label_191:
	xor	r13d, r13d
.label_248:
	mov	r10, qword ptr [rsp + 0x28]
.label_227:
	mov	r12, qword ptr [rsp + 0x40]
.label_212:
	mov	rbx, r12
	mov	r12, qword ptr [rsp + 0x88]
.label_255:
	and	r13b, 1
	mov	eax, r13d
	or	al, byte ptr [rsp + 0x33]
	cmp	rbx, 1
	mov	rbp, qword ptr [rsp + 0xa0]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x60]
	mov	esi, dword ptr [rsp + 0x94]
	ja	.label_233
	test	al, al
	je	.label_233
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_176
.label_233:
	mov	byte ptr [rsp + 0x40], al
	add	rbx, r12
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_245
	.section	.text
	.align	16
	#Procedure 0x403b17
	.globl sub_403b17
	.type sub_403b17, @function
sub_403b17:

	nop	word ptr [rax + rax]
.label_209:
	inc	r14
	mov	r15b, byte ptr [r10 + r12 + 1]
	mov	r12, rdx
.label_245:
	cmp	byte ptr [rsp + 0x40], 0
	je	.label_250
	test	sil, 1
	je	.label_259
	cmp	r14, rbp
	jae	.label_254
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x5c
.label_254:
	inc	r14
	xor	esi, esi
	jmp	.label_259
	.section	.text
	.align	16
	#Procedure 0x403b55
	.globl sub_403b55
	.type sub_403b55, @function
sub_403b55:

	nop	word ptr cs:[rax + rax]
.label_250:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_195
	cmp	r8d, 2
	jne	.label_265
	mov	eax, r9d
	and	al, 1
	jne	.label_265
	cmp	r14, rbp
	jae	.label_270
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_270:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_286
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x24
.label_286:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_294
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x27
.label_294:
	add	r14, 3
	mov	r9b, 1
.label_265:
	cmp	r14, rbp
	jae	.label_186
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_186:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_290
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_290:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_297
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_297:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_259:
	lea	rdx, [r12 + 1]
	cmp	rbx, rdx
	jbe	.label_177
	test	r9b, 1
	je	.label_180
	mov	rcx, rbx
	mov	ebx, eax
	and	bl, 1
	jne	.label_264
	mov	r8, r12
	mov	r12d, esi
	cmp	r14, rbp
	jae	.label_184
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], 0x27
.label_184:
	lea	rsi, [r14 + 1]
	cmp	rsi, rbp
	jae	.label_194
	mov	rbx, qword ptr [rsp + 0x10]
	mov	byte ptr [rbx + rsi], 0x27
.label_194:
	add	r14, 2
	xor	r9d, r9d
	mov	esi, r12d
	mov	rbx, rcx
	mov	r12, r8
	mov	r8, qword ptr [rsp + 0x38]
	jmp	.label_180
	.section	.text
	.align	16
	#Procedure 0x403c66
	.globl sub_403c66
	.type sub_403c66, @function
sub_403c66:

	nop	word ptr cs:[rax + rax]
.label_264:
	mov	rbx, rcx
.label_180:
	cmp	r14, rbp
	jae	.label_209
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], r15b
	mov	esi, ecx
	jmp	.label_209
	.section	.text
	.align	16
	#Procedure 0x403c8e
	.globl sub_403c8e
	.type sub_403c8e, @function
sub_403c8e:

	nop	
.label_177:
	test	r9b, 1
	je	.label_217
	and	al, 1
	jne	.label_217
	cmp	r14, rbp
	jae	.label_221
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_221:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_301
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_301:
	add	r14, 2
	xor	r9d, r9d
.label_217:
	mov	ebx, r15d
.label_257:
	cmp	r14, rbp
	jae	.label_223
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], bl
.label_223:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, dil
	mov	edi, r13d
	jmp	.label_260
.label_261:
	xor	r13d, r13d
	jmp	.label_176
	.section	.text
	.align	16
	#Procedure 0x403cf1
	.globl sub_403cf1
	.type sub_403cf1, @function
sub_403cf1:

	nop	word ptr cs:[rax + rax]
.label_267:
	mov	rcx, r12
.label_272:
	cmp	r8d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_243
	or	al, dl
	jne	.label_243
	mov	r11, rcx
	jmp	.label_195
.label_196:
	mov	eax, 2
.label_220:
	mov	qword ptr [rsp + 0x38], rax
.label_195:
	mov	r9d, dword ptr [rsp + 0x20]
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, rbp
	mov	rdx, r10
	mov	rcx, r11
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_205:
	mov	r14, rax
.label_181:
	mov	rax, r14
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_213:
	mov	rdx, qword ptr [rsp + 0x58]
	test	rdx, rdx
	je	.label_280
	cmp	byte ptr [rsp + 0xf], 0
	mov	rcx, qword ptr [rsp + 0x10]
	jne	.label_244
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_244
	inc	rdx
	nop	dword ptr [rax + rax]
.label_292:
	cmp	r14, rbp
	jae	.label_289
	mov	byte ptr [rcx + r14], al
.label_289:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_292
	jmp	.label_244
.label_242:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x30]
	mov	r9d, dword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	qword ptr [rsp + 0x118]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_205
.label_280:
	mov	rcx, qword ptr [rsp + 0x10]
.label_244:
	cmp	r14, rbp
	jae	.label_181
	mov	byte ptr [rcx + r14], 0
	jmp	.label_181
.label_271:
	mov	eax, 5
	jmp	.label_220
.label_276:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x403e40
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403f01
	.globl sub_403f01
	.type sub_403f01, @function
sub_403f01:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x403f10
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_302
	mov	qword ptr [rax], rbx
.label_302:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x403ffc
	.globl sub_403ffc
	.type sub_403ffc, @function
sub_403ffc:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404000
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_303
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_305:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_305
.label_303:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_306
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_307], OFFSET FLAT:slot0
.label_306:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_304
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_304:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404091
	.globl sub_404091
	.type sub_404091, @function
sub_404091:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4040a0
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4040ae
	.globl sub_4040ae
	.type sub_4040ae, @function
sub_4040ae:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4040b0

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_311
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_314
	cmp	r12d, 0x7fffffff
	je	.label_309
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_312
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_312:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_314:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_310
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_313
.label_310:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_308
	mov	rdi, r14
	call	free
.label_308:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_313:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_311:
	call	abort
.label_309:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40426d
	.globl sub_40426d
	.type sub_40426d, @function
sub_40426d:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404270
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40427a
	.globl sub_40427a
	.type sub_40427a, @function
sub_40427a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404280
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x404299
	.globl sub_404299
	.type sub_404299, @function
sub_404299:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4042a0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4042b8
	.globl sub_4042b8
	.type sub_4042b8, @function
sub_4042b8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4042c0

	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_315
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_315:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40432c
	.globl sub_40432c
	.type sub_40432c, @function
sub_40432c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404330
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_316
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_316:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404398
	.globl sub_404398
	.type sub_404398, @function
sub_404398:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4043a0

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_317
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_317:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404408
	.globl sub_404408
	.type sub_404408, @function
sub_404408:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404410
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_318
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_318:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404471
	.globl sub_404471
	.type sub_404471, @function
sub_404471:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404480
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4044ee
	.globl sub_4044ee
	.type sub_4044ee, @function
sub_4044ee:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4044f0
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x40455f
	.globl sub_40455f
	.type sub_40455f, @function
sub_40455f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404560

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x4045b5
	.globl sub_4045b5
	.type sub_4045b5, @function
sub_4045b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4045c0
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	16
	#Procedure 0x404614
	.globl sub_404614
	.type sub_404614, @function
sub_404614:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404620

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_322
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_322:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4046b5
	.globl sub_4046b5
	.type sub_4046b5, @function
sub_4046b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4046c0
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_323
	test	rdx, rdx
	je	.label_323
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_323:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40472e
	.globl sub_40472e
	.type sub_40472e, @function
sub_40472e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x404730
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_324
	test	rdx, rdx
	je	.label_324
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_324:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40479a
	.globl sub_40479a
	.type sub_40479a, @function
sub_40479a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4047a0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_325
	test	rsi, rsi
	je	.label_325
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_325:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x404810
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_319]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_320]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_321]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_326
	test	rsi, rsi
	je	.label_326
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_326:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40487c
	.globl sub_40487c
	.type sub_40487c, @function
sub_40487c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x404880
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x40488a
	.globl sub_40488a
	.type sub_40488a, @function
sub_40488a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404890
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4048a8
	.globl sub_4048a8
	.type sub_4048a8, @function
sub_4048a8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4048b0
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4048c1
	.globl sub_4048c1
	.type sub_4048c1, @function
sub_4048c1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4048d0

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	16
	#Procedure 0x4048e9
	.globl sub_4048e9
	.type sub_4048e9, @function
sub_4048e9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4048f0

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_328
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_333
	cmp	ecx, 0x55
	jne	.label_327
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_327
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_327
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_327
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_327
	cmp	byte ptr [rax + 5], 0
	jne	.label_327
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_330
	mov	eax, OFFSET FLAT:label_331
	jmp	.label_332
.label_333:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_327
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_327
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_327
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_327
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_327
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_327
	cmp	byte ptr [rax + 7], 0
	je	.label_329
.label_327:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_258
	mov	eax, OFFSET FLAT:label_189
.label_332:
	cmove	rax, rcx
.label_328:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_329:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_334
	mov	eax, OFFSET FLAT:label_335
	jmp	.label_332
	.section	.text
	.align	16
	#Procedure 0x4049b5
	.globl sub_4049b5
	.type sub_4049b5, @function
sub_4049b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4049c0

	.globl get_root_dev_ino
	.type get_root_dev_ino, @function
get_root_dev_ino:
	push	rbx
	sub	rsp, 0x90
	mov	rbx, rdi
	lea	rdx, [rsp]
	mov	edi, 1
	mov	esi, OFFSET FLAT:label_31
	call	__lxstat
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_336
	mov	rax, qword ptr [rsp + 8]
	mov	qword ptr [rbx], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbx + 8], rax
	mov	rax, rbx
.label_336:
	add	rsp, 0x90
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x404a02
	.globl sub_404a02
	.type sub_404a02, @function
sub_404a02:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404a10

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_346
	mov	edx, OFFSET FLAT:label_352
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_339
.label_346:
	mov	edx, OFFSET FLAT:label_341
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_339:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_345
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_342
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_347
	jmp	qword ptr [(r12 * 8) + label_348]
.label_967:
	add	rsp, 8
	jmp	.label_340
.label_347:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_355
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_340
.label_968:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_343
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_969:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_337
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_970:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_353
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_971:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_350
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_340
.label_972:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_349
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_340
.label_973:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_351
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_340
.label_974:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_354
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_340
.label_976:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_338
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_340
.label_975:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_344
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_340:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x404d68
	.globl sub_404d68
	.type sub_404d68, @function
sub_404d68:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404d70
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_356:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_356
	jmp	version_etc_arn
	.section	.text
	.align	16
	#Procedure 0x404d91
	.globl sub_404d91
	.type sub_404d91, @function
sub_404d91:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404da0

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_367
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_369
.label_367:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_369:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_358
	cmp	r10d, 0x29
	jae	.label_366
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_368
.label_366:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_368:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_358
	cmp	r10d, 0x29
	jae	.label_364
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_365
.label_364:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_365:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_358
	cmp	r10d, 0x29
	jae	.label_362
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_363
.label_362:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_363:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_358
	cmp	r10d, 0x29
	jae	.label_360
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_361
.label_360:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_361:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_358
	cmp	r10d, 0x29
	jae	.label_357
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_359
.label_357:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_359:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_358
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_358
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_358
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_358
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_358:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	16
	#Procedure 0x404f82
	.globl sub_404f82
	.type sub_404f82, @function
sub_404f82:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x404f90

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_370
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_370:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x405013
	.globl sub_405013
	.type sub_405013, @function
sub_405013:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405020
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_371
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_372
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_374
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_22
	mov	ecx, OFFSET FLAT:label_16
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_373
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	16
	#Procedure 0x405094
	.globl sub_405094
	.type sub_405094, @function
sub_405094:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4050a0
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_375
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_376
	test	rax, rax
	je	.label_375
.label_376:
	pop	rbx
	ret	
.label_375:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4050d5
	.globl sub_4050d5
	.type sub_4050d5, @function
sub_4050d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4050e0

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_377
	test	rax, rax
	je	.label_378
.label_377:
	pop	rbx
	ret	
.label_378:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4050fa
	.globl sub_4050fa
	.type sub_4050fa, @function
sub_4050fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405100
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_379
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_380
	test	rbx, rbx
	jne	.label_380
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_380:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_381
	test	rax, rax
	je	.label_379
.label_381:
	pop	rbx
	ret	
.label_379:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405148
	.globl sub_405148
	.type sub_405148, @function
sub_405148:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405150

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_382
	test	rbx, rbx
	jne	.label_382
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_382:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_384
	test	rax, rax
	je	.label_383
.label_384:
	pop	rbx
	ret	
.label_383:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405180
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_385
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_388
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_386
.label_385:
	test	rcx, rcx
	jne	.label_391
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_391:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_387
.label_386:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_390
	test	rbx, rbx
	jne	.label_390
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_390:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_389
	test	rax, rax
	je	.label_388
.label_389:
	pop	rbx
	ret	
.label_388:
	call	xalloc_die
.label_387:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405217
	.globl sub_405217
	.type sub_405217, @function
sub_405217:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405220
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_392
	test	rax, rax
	je	.label_393
.label_392:
	pop	rbx
	ret	
.label_393:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40523a
	.globl sub_40523a
	.type sub_40523a, @function
sub_40523a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405240

	.globl x2realloc
	.type x2realloc, @function
x2realloc:
	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_394
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_397
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_398
	call	free
	xor	eax, eax
	jmp	.label_395
.label_394:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_396
	mov	qword ptr [rsi], rbx
.label_398:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_395
	test	rax, rax
	je	.label_396
.label_395:
	pop	rbx
	ret	
.label_396:
	call	xalloc_die
.label_397:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4052a4
	.globl sub_4052a4
	.type sub_4052a4, @function
sub_4052a4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4052b0
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_400
	test	r14, r14
	je	.label_399
.label_400:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_399:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4052e6
	.globl sub_4052e6
	.type sub_4052e6, @function
sub_4052e6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4052f0
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_401
	call	rpl_calloc
	test	rax, rax
	je	.label_401
	pop	rcx
	ret	
.label_401:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x405316
	.globl sub_405316
	.type sub_405316, @function
sub_405316:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405320

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_402
	test	r15, r15
	je	.label_403
.label_402:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_403:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40535c
	.globl sub_40535c
	.type sub_40535c, @function
sub_40535c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x405360
	.globl xstrdup
	.type xstrdup, @function
xstrdup:

	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_405
	test	r15, r15
	je	.label_404
.label_405:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_404:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x4053a2
	.globl sub_4053a2
	.type sub_4053a2, @function
sub_4053a2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4053b0

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_406
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_78
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4053e0

	.globl xfts_open
	.type xfts_open, @function
xfts_open:
	push	rax
	or	esi, 0x200
	call	rpl_fts_open
	test	rax, rax
	je	.label_408
	pop	rcx
	ret	
.label_408:
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_407
	mov	edi, OFFSET FLAT:label_409
	mov	esi, OFFSET FLAT:label_410
	mov	edx, 0x29
	mov	ecx, OFFSET FLAT:label_411
	call	__assert_fail
.label_407:
	call	xalloc_die
	.section	.text
	.align	16
	#Procedure 0x40541b
	.globl sub_40541b
	.type sub_40541b, @function
sub_40541b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405420

	.globl cycle_warning_required
	.type cycle_warning_required, @function
cycle_warning_required:
	mov	ecx, dword ptr [rdi + 0x48]
	and	ecx, 0x11
	mov	al, 1
	cmp	ecx, 0x10
	je	.label_412
	cmp	ecx, 0x11
	jne	.label_413
	cmp	qword ptr [rsi + 0x58], 0
	setne	al
.label_412:
	ret	
.label_413:
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x40543e
	.globl sub_40543e
	.type sub_40543e, @function
sub_40543e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x405440

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_414
	test	rsi, rsi
	mov	ecx, 1
	je	.label_415
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_415
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_414:
	mov	ecx, 1
.label_415:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	16
	#Procedure 0x40548b
	.globl sub_40548b
	.type sub_40548b, @function
sub_40548b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405490

	.globl rpl_fts_open
	.type rpl_fts_open, @function
rpl_fts_open:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r14, rdx
	mov	ebx, esi
	mov	r12, rdi
	cmp	ebx, 0x1000
	jae	.label_436
	mov	eax, ebx
	and	eax, 0x204
	cmp	eax, 0x204
	je	.label_436
	test	bl, 0x12
	je	.label_436
	mov	edi, 0x80
	call	malloc
	mov	r15, rax
	xor	eax, eax
	test	r15, r15
	je	.label_444
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x70], xmm0
	movups	xmmword ptr [r15 + 0x60], xmm0
	movups	xmmword ptr [r15 + 0x50], xmm0
	movups	xmmword ptr [r15 + 0x40], xmm0
	movups	xmmword ptr [r15 + 0x30], xmm0
	movups	xmmword ptr [r15 + 0x20], xmm0
	movups	xmmword ptr [r15 + 0x10], xmm0
	movups	xmmword ptr [r15], xmm0
	mov	qword ptr [r15 + 0x40], r14
	mov	eax, ebx
	and	eax, 0xfffffdfb
	or	eax, 4
	test	bl, 2
	cmove	eax, ebx
	mov	dword ptr [r15 + 0x48], eax
	mov	dword ptr [r15 + 0x2c], 0xffffff9c
	mov	rdi, qword ptr [r12]
	mov	ebp, 1
	test	rdi, rdi
	je	.label_452
	mov	r13d, ebx
	lea	rbx, [r12 + 8]
	xor	ebp, ebp
	nop	word ptr [rax + rax]
.label_430:
	call	strlen
	cmp	rax, rbp
	cmova	rbp, rax
	mov	rdi, qword ptr [rbx]
	add	rbx, 8
	test	rdi, rdi
	jne	.label_430
	inc	rbp
	mov	ebx, r13d
.label_452:
	cmp	rbp, 0x1000
	mov	esi, 0x1000
	cmova	rsi, rbp
	add	rsi, 0x100
	mov	qword ptr [r15 + 0x30], rsi
	xor	edi, edi
	call	realloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_437
	mov	qword ptr [rsp + 0x10], r15
	mov	qword ptr [r15 + 0x20], rbp
	mov	qword ptr [rsp + 0x30], r12
	mov	r13, qword ptr [r12]
	xor	r12d, r12d
	test	r13, r13
	je	.label_441
	mov	edi, 0x110
	call	malloc
	mov	r12, rax
	test	r12, r12
	je	.label_443
	mov	byte ptr [r12 + 0x108], 0
	mov	qword ptr [r12 + 0x60], 0
	mov	rax, qword ptr [rsp + 0x10]
	mov	qword ptr [r12 + 0x50], rax
	mov	qword ptr [r12 + 0x38], rbp
	mov	dword ptr [r12 + 0x40], 0
	mov	qword ptr [r12 + 0x18], 0
	mov	word ptr [r12 + 0x72], 0
	mov	word ptr [r12 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r12 + 0x20], xmm0
	mov	qword ptr [r12 + 0x58], -1
	mov	qword ptr [r12 + 0x68], -1
.label_441:
	mov	byte ptr [rsp + 0xf], 1
	mov	qword ptr [rsp + 0x28], r14
	test	r14, r14
	je	.label_422
	mov	rax, qword ptr [rsp + 0x10]
	mov	al, byte ptr [rax + 0x49]
	and	al, 4
	shr	al, 2
	mov	byte ptr [rsp + 0xf], al
.label_422:
	xor	r14d, r14d
	test	r13, r13
	je	.label_426
	test	bh, 8
	mov	qword ptr [rsp + 0x18], r12
	jne	.label_431
	xor	ebp, ebp
	xor	r15d, r15d
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_416:
	mov	rdi, r13
	call	strlen
	mov	rbx, rax
	cmp	rbx, 3
	jb	.label_417
	cmp	byte ptr [r13 + rbx - 1], 0x2f
	jne	.label_417
	nop	dword ptr [rax]
.label_439:
	cmp	byte ptr [r13 + rbx - 2], 0x2f
	jne	.label_417
	dec	rbx
	cmp	rbx, 1
	ja	.label_439
	nop	word ptr cs:[rax + rax]
.label_417:
	mov	qword ptr [rsp + 0x20], r15
	lea	rdi, [rbx + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	r15, rax
	mov	r14, rbp
	test	r15, r15
	je	.label_445
	mov	rbp, r15
	add	rbp, 0x108
	mov	rdi, rbp
	mov	rsi, r13
	mov	rdx, rbx
	call	memcpy
	mov	byte ptr [r15 + rbx + 0x108], 0
	mov	qword ptr [r15 + 0x60], rbx
	mov	rdi, qword ptr [rsp + 0x10]
	mov	qword ptr [r15 + 0x50], rdi
	mov	rax, qword ptr [rdi + 0x20]
	mov	qword ptr [r15 + 0x38], rax
	mov	dword ptr [r15 + 0x40], 0
	mov	qword ptr [r15 + 0x18], 0
	mov	word ptr [r15 + 0x72], 0
	mov	word ptr [r15 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x20], xmm0
	mov	qword ptr [r15 + 0x58], 0
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [r15 + 8], rax
	mov	qword ptr [r15 + 0x30], rbp
	mov	rbx, r14
	test	rbx, rbx
	setne	al
	test	byte ptr [rsp + 0xf], al
	je	.label_453
	mov	word ptr [r15 + 0x70], 0xb
	mov	qword ptr [r15 + 0xa8], 2
	jmp	.label_429
.label_453:
	xor	edx, edx
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
.label_429:
	mov	rax, qword ptr [rsp + 0x28]
	test	rax, rax
	je	.label_434
	mov	r14, r15
	mov	qword ptr [r15 + 0x10], rbx
	mov	r15, qword ptr [rsp + 0x20]
	jmp	.label_433
.label_434:
	mov	qword ptr [r15 + 0x10], 0
	test	rbx, rbx
	mov	r14, r15
	je	.label_433
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rax + 0x10], r15
	mov	r14, rbx
.label_433:
	inc	r12
	mov	rax, qword ptr [rsp + 0x30]
	mov	r13, qword ptr [rax + 8]
	add	rax, 8
	mov	qword ptr [rsp + 0x30], rax
	test	r13, r13
	mov	rbp, r14
	jne	.label_416
	jmp	.label_447
.label_436:
	call	__errno_location
	mov	dword ptr [rax], 0x16
.label_435:
	xor	eax, eax
.label_444:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_437:
	mov	rdi, qword ptr [r15 + 0x20]
	jmp	.label_454
.label_431:
	xor	r15d, r15d
	xor	ebx, ebx
	xor	r12d, r12d
	nop	
.label_455:
	mov	qword ptr [rsp + 0x20], rbx
	mov	rdi, r13
	call	strlen
	mov	rbp, rax
	lea	rdi, [rbp + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	rbx, rax
	test	rbx, rbx
	je	.label_421
	mov	r14, rbx
	add	r14, 0x108
	mov	rdi, r14
	mov	rsi, r13
	mov	rdx, rbp
	call	memcpy
	mov	byte ptr [rbx + rbp + 0x108], 0
	mov	qword ptr [rbx + 0x60], rbp
	mov	rdi, qword ptr [rsp + 0x10]
	mov	qword ptr [rbx + 0x50], rdi
	mov	rax, qword ptr [rdi + 0x20]
	mov	qword ptr [rbx + 0x38], rax
	mov	dword ptr [rbx + 0x40], 0
	mov	qword ptr [rbx + 0x18], 0
	mov	word ptr [rbx + 0x72], 0
	mov	word ptr [rbx + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	mov	qword ptr [rbx + 0x58], 0
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 0x30], r14
	test	r15, r15
	setne	al
	and	al, byte ptr [rsp + 0xf]
	cmp	al, 1
	jne	.label_440
	mov	word ptr [rbx + 0x70], 0xb
	mov	qword ptr [rbx + 0xa8], 2
	jmp	.label_442
.label_440:
	xor	edx, edx
	mov	rsi, rbx
	call	fts_stat
	mov	word ptr [rbx + 0x70], ax
.label_442:
	mov	rax, qword ptr [rsp + 0x28]
	test	rax, rax
	je	.label_446
	mov	r14, rbx
	mov	qword ptr [rbx + 0x10], r15
	mov	rbx, qword ptr [rsp + 0x20]
	jmp	.label_451
.label_446:
	mov	qword ptr [rbx + 0x10], 0
	test	r15, r15
	mov	r14, rbx
	je	.label_451
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rax + 0x10], rbx
	mov	r14, r15
.label_451:
	mov	rax, qword ptr [rsp + 0x30]
	mov	r13, qword ptr [rax + r12*8 + 8]
	inc	r12
	test	r13, r13
	mov	r15, r14
	jne	.label_455
.label_447:
	cmp	qword ptr [rsp + 0x28], 0
	je	.label_419
	cmp	r12, 2
	jb	.label_419
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r14
	mov	rdx, r12
	call	fts_sort
	mov	r14, rax
.label_419:
	mov	r12, qword ptr [rsp + 0x18]
.label_426:
	mov	edi, 0x110
	call	malloc
	test	rax, rax
	je	.label_424
	mov	byte ptr [rax + 0x108], 0
	mov	qword ptr [rax + 0x60], 0
	mov	r15, qword ptr [rsp + 0x10]
	mov	qword ptr [rax + 0x50], r15
	mov	rcx, qword ptr [r15 + 0x20]
	mov	qword ptr [rax + 0x38], rcx
	mov	dword ptr [rax + 0x40], 0
	mov	qword ptr [rax + 0x18], 0
	mov	word ptr [rax + 0x72], 0
	mov	word ptr [rax + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax + 0x20], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [rax + 0x10], r14
	mov	word ptr [rax + 0x70], 9
	mov	qword ptr [rax + 0x58], 1
	movzx	eax, word ptr [r15 + 0x48]
	test	ax, 0x102
	je	.label_427
	mov	edi, 0x1f
	xor	esi, esi
	mov	edx, OFFSET FLAT:AD_hash
	mov	ecx, OFFSET FLAT:AD_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	qword ptr [r15 + 0x58], rax
	test	rax, rax
	jne	.label_448
	jmp	.label_449
.label_443:
	mov	r15, qword ptr [rsp + 0x10]
	jmp	.label_450
.label_424:
	mov	r15, qword ptr [rsp + 0x10]
	mov	qword ptr [r15], 0
	jmp	.label_449
.label_427:
	mov	edi, 0x20
	call	malloc
	mov	qword ptr [r15 + 0x58], rax
	test	rax, rax
	je	.label_449
	mov	rdi, rax
	call	cycle_check_init
.label_448:
	mov	eax, dword ptr [r15 + 0x48]
	test	ax, 0x204
	jne	.label_418
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_420
	mov	edi, OFFSET FLAT:label_438
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_423
.label_421:
	mov	r14, r15
.label_445:
	mov	r15, qword ptr [rsp + 0x10]
	mov	r12, qword ptr [rsp + 0x18]
.label_449:
	test	r14, r14
	je	.label_425
	nop	dword ptr [rax]
.label_432:
	mov	rbx, qword ptr [r14 + 0x10]
	mov	rdi, qword ptr [r14 + 0x18]
	test	rdi, rdi
	je	.label_428
	call	closedir
.label_428:
	mov	rdi, r14
	call	free
	test	rbx, rbx
	mov	r14, rbx
	jne	.label_432
.label_425:
	mov	rdi, r12
	call	free
	mov	rbp, qword ptr [r15 + 0x20]
.label_450:
	mov	rdi, rbp
.label_454:
	call	free
	mov	rdi, r15
	call	free
	jmp	.label_435
.label_420:
	mov	edi, dword ptr [r15 + 0x2c]
	mov	esi, OFFSET FLAT:label_438
	xor	eax, eax
	call	openat_safer
.label_423:
	mov	dword ptr [r15 + 0x28], eax
	test	eax, eax
	jns	.label_418
	or	byte ptr [r15 + 0x48], 4
.label_418:
	mov	rdi, r15
	add	rdi, 0x60
	mov	esi, 0xffffffff
	call	i_ring_init
	mov	rax, r15
	jmp	.label_444
	.section	.text
	.align	16
	#Procedure 0x405ac9
	.globl sub_405ac9
	.type sub_405ac9, @function
sub_405ac9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x405ad0

	.globl fts_stat
	.type fts_stat, @function
fts_stat:
	push	r15
	push	r14
	push	rbx
	mov	r15, rsi
	mov	r14, rdi
	mov	eax, dword ptr [r14 + 0x48]
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_460
	test	al, 1
	je	.label_460
	mov	dl, 1
.label_460:
	lea	rbx, [r15 + 0x78]
	test	dl, dl
	jne	.label_465
	and	eax, 2
	jne	.label_465
	mov	esi, dword ptr [r14 + 0x2c]
	mov	rdx, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	r8d, 0x100
	mov	rcx, rbx
	call	__fxstatat
	test	eax, eax
	je	.label_461
	call	__errno_location
	mov	eax, dword ptr [rax]
	jmp	.label_464
.label_465:
	mov	rsi, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	rdx, rbx
	call	__xstat
	test	eax, eax
	je	.label_461
	call	__errno_location
	mov	r14, rax
	mov	eax, dword ptr [r14]
	cmp	eax, 2
	jne	.label_464
	mov	rsi, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	rdx, rbx
	call	__lxstat
	test	eax, eax
	je	.label_462
	mov	eax, dword ptr [r14]
.label_464:
	mov	dword ptr [r15 + 0x40], eax
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x80], xmm0
	movups	xmmword ptr [rbx + 0x70], xmm0
	movups	xmmword ptr [rbx + 0x60], xmm0
	movups	xmmword ptr [rbx + 0x50], xmm0
	movups	xmmword ptr [rbx + 0x40], xmm0
	movups	xmmword ptr [rbx + 0x30], xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	movups	xmmword ptr [rbx + 0x10], xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	ax, 0xa
.label_456:
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_461:
	movzx	ecx, word ptr [r15 + 0x90]
	and	ecx, 0xf000
	cmp	ecx, 0x8000
	je	.label_463
	mov	ax, 0xc
	movzx	ecx, cx
	cmp	ecx, 0xa000
	je	.label_456
	cmp	ecx, 0x4000
	jne	.label_457
	mov	rax, qword ptr [r15 + 0x88]
	mov	rcx, -1
	cmp	rax, 2
	jb	.label_458
	cmp	qword ptr [r15 + 0x58], 0
	jle	.label_458
	mov	ecx, dword ptr [r14 + 0x48]
	shr	ecx, 4
	not	ecx
	and	ecx, 2
	sub	rax, rcx
	mov	rcx, rax
.label_458:
	mov	qword ptr [r15 + 0x68], rcx
	mov	ecx, dword ptr [r15 + 0x108]
	mov	ax, 1
	cmp	cl, 0x2e
	jne	.label_456
	mov	edx, ecx
	shr	edx, 8
	test	dl, dl
	je	.label_459
	cmp	dl, 0x2e
	jne	.label_456
	test	ecx, 0xff0000
	jne	.label_456
.label_459:
	cmp	qword ptr [r15 + 0x58], 0
	mov	cx, 1
	mov	ax, 5
	cmove	ax, cx
	jmp	.label_456
.label_463:
	mov	ax, 8
	jmp	.label_456
.label_457:
	mov	ax, 3
	jmp	.label_456
.label_462:
	mov	dword ptr [r14], 0
	mov	ax, 0xd
	jmp	.label_456
	.section	.text
	.align	16
	#Procedure 0x405c65
	.globl sub_405c65
	.type sub_405c65, @function
sub_405c65:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405c70

	.globl fts_sort
	.type fts_sort, @function
fts_sort:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	rbx, rsi
	mov	r12, rdi
	mov	r15, qword ptr [r12 + 0x40]
	cmp	qword ptr [r12 + 0x38], r14
	jae	.label_475
	lea	rsi, [r14 + 0x28]
	mov	qword ptr [r12 + 0x38], rsi
	mov	rax, rsi
	shr	rax, 0x3d
	jne	.label_470
	lea	r13, [r12 + 0x10]
	mov	rdi, qword ptr [r13]
	shl	rsi, 3
	call	realloc
	mov	rdi, rax
	test	rdi, rdi
	je	.label_470
	mov	qword ptr [r13], rdi
	jmp	.label_467
.label_475:
	mov	rdi, qword ptr [r12 + 0x10]
	add	r12, 0x10
	mov	r13, r12
.label_467:
	test	rbx, rbx
	je	.label_476
	nop	dword ptr [rax]
.label_473:
	mov	qword ptr [rdi], rbx
	add	rdi, 8
	mov	rbx, qword ptr [rbx + 0x10]
	test	rbx, rbx
	jne	.label_473
	mov	rdi, qword ptr [r13]
.label_476:
	mov	edx, 8
	mov	rsi, r14
	mov	rcx, r15
	call	qsort
	mov	r8, qword ptr [r13]
	mov	rbx, qword ptr [r8]
	cmp	r14, 1
	mov	rcx, rbx
	je	.label_468
	mov	rcx, qword ptr [r8 + 8]
	mov	qword ptr [rbx + 0x10], rcx
	mov	rcx, r14
	add	rcx, -2
	je	.label_472
	lea	rsi, [r8 + 8]
	lea	rdx, [r14 - 3]
	and	ecx, 3
	cmp	rdx, 3
	jae	.label_474
	mov	rdx, rsi
	jmp	.label_477
.label_470:
	mov	rdi, qword ptr [r12 + 0x10]
	call	free
	mov	qword ptr [r12 + 0x10], 0
	mov	qword ptr [r12 + 0x38], 0
	jmp	.label_469
.label_474:
	lea	rdi, [rcx + 2]
	sub	rdi, r14
	nop	dword ptr [rax + rax]
.label_471:
	mov	rdx, qword ptr [rsi]
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rdx + 0x10], rax
	mov	rax, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rsi + 0x10]
	mov	qword ptr [rax + 0x10], rdx
	mov	rax, qword ptr [rsi + 0x10]
	mov	rdx, qword ptr [rsi + 0x18]
	mov	qword ptr [rax + 0x10], rdx
	lea	rdx, [rsi + 0x20]
	mov	rax, qword ptr [rsi + 0x18]
	mov	rsi, qword ptr [rsi + 0x20]
	mov	qword ptr [rax + 0x10], rsi
	add	rdi, 4
	mov	rsi, rdx
	jne	.label_471
.label_477:
	test	rcx, rcx
	je	.label_472
	add	rdx, 8
	neg	rcx
	nop	dword ptr [rax + rax]
.label_466:
	mov	rax, qword ptr [rdx - 8]
	mov	rsi, qword ptr [rdx]
	mov	qword ptr [rax + 0x10], rsi
	add	rdx, 8
	inc	rcx
	jne	.label_466
.label_472:
	mov	rcx, qword ptr [r8 + r14*8 - 8]
.label_468:
	mov	qword ptr [rcx + 0x10], 0
.label_469:
	mov	rax, rbx
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x405dee
	.globl sub_405dee
	.type sub_405dee, @function
sub_405dee:

	nop	
	.section	.text
	.align	16
	#Procedure 0x405df0

	.globl rpl_fts_close
	.type rpl_fts_close, @function
rpl_fts_close:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rdi
	mov	rdi, qword ptr [r14]
	test	rdi, rdi
	je	.label_495
	cmp	qword ptr [rdi + 0x58], 0
	js	.label_492
	nop	word ptr cs:[rax + rax]
.label_485:
	mov	rbx, qword ptr [rdi + 0x10]
	test	rbx, rbx
	jne	.label_482
	mov	rbx, qword ptr [rdi + 8]
.label_482:
	call	free
	cmp	qword ptr [rbx + 0x58], 0
	mov	rdi, rbx
	jns	.label_485
	jmp	.label_486
.label_492:
	mov	rbx, rdi
.label_486:
	mov	rdi, rbx
	call	free
.label_495:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_488
	nop	word ptr cs:[rax + rax]
.label_493:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_490
	call	closedir
.label_490:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_493
.label_488:
	mov	rdi, qword ptr [r14 + 0x10]
	call	free
	mov	rdi, qword ptr [r14 + 0x20]
	call	free
	mov	eax, dword ptr [r14 + 0x48]
	test	ah, 2
	jne	.label_479
	xor	ebp, ebp
	test	al, 4
	jne	.label_480
	mov	edi, dword ptr [r14 + 0x28]
	call	fchdir
	xor	ebp, ebp
	test	eax, eax
	je	.label_484
	call	__errno_location
	mov	ebp, dword ptr [rax]
.label_484:
	mov	edi, dword ptr [r14 + 0x28]
	call	close
	test	ebp, ebp
	je	.label_487
	jmp	.label_480
.label_479:
	mov	edi, dword ptr [r14 + 0x2c]
	xor	ebp, ebp
	test	edi, edi
	js	.label_480
	call	close
.label_487:
	test	eax, eax
	je	.label_480
	call	__errno_location
	mov	ebp, dword ptr [rax]
.label_480:
	lea	rbx, [r14 + 0x60]
	jmp	.label_491
	.section	.text
	.align	16
	#Procedure 0x405ed8
	.globl sub_405ed8
	.type sub_405ed8, @function
sub_405ed8:

	nop	dword ptr [rax + rax]
.label_496:
	mov	edi, eax
	call	close
.label_491:
	mov	rdi, rbx
	call	i_ring_empty
	test	al, al
	jne	.label_494
	mov	rdi, rbx
	call	i_ring_pop
	test	eax, eax
	jns	.label_496
	jmp	.label_491
.label_494:
	mov	rdi, qword ptr [r14 + 0x50]
	test	rdi, rdi
	je	.label_478
	call	hash_free
.label_478:
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_481
	mov	rdi, qword ptr [r14 + 0x58]
	test	rdi, rdi
	je	.label_483
	call	hash_free
	jmp	.label_483
.label_481:
	mov	rdi, qword ptr [r14 + 0x58]
	call	free
.label_483:
	mov	rdi, r14
	call	free
	xor	eax, eax
	test	ebp, ebp
	je	.label_489
	call	__errno_location
	mov	dword ptr [rax], ebp
	mov	eax, 0xffffffff
.label_489:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x405f52
	.globl sub_405f52
	.type sub_405f52, @function
sub_405f52:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x405f60

	.globl rpl_fts_read
	.type rpl_fts_read, @function
rpl_fts_read:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r14, rdi
	mov	r15, qword ptr [r14]
	xor	ebx, ebx
	test	r15, r15
	je	.label_501
	mov	eax, dword ptr [r14 + 0x48]
	xor	ebx, ebx
	test	ah, 0x20
	jne	.label_501
	movzx	ecx, word ptr [r15 + 0x74]
	mov	word ptr [r15 + 0x74], 3
	cmp	ecx, 1
	je	.label_549
	movzx	edx, cx
	cmp	edx, 2
	jne	.label_550
	mov	ecx, dword ptr [r15 + 0x70]
	mov	esi, ecx
	and	esi, 0xfffe
	cmp	esi, 0xc
	jne	.label_513
	mov	edx, 1
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_535
	mov	eax, dword ptr [r14 + 0x48]
	test	al, 4
	jne	.label_535
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_553
	mov	edi, OFFSET FLAT:label_438
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_557
.label_549:
	xor	edx, edx
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	mov	rbx, r15
	jmp	.label_501
.label_550:
	lea	r12, [r15 + 0x70]
	mov	ecx, dword ptr [r15 + 0x70]
	jmp	.label_504
.label_513:
	lea	r12, [r15 + 0x70]
.label_504:
	movzx	esi, cx
	cmp	esi, 1
	jne	.label_507
	cmp	edx, 4
	je	.label_508
	test	al, 0x40
	je	.label_510
	mov	rdx, qword ptr [r15 + 0x78]
	cmp	rdx, qword ptr [r14 + 0x18]
	jne	.label_508
.label_510:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_512
	test	ah, 0x10
	jne	.label_517
	mov	rcx, qword ptr [r15 + 0x30]
	mov	edx, 0xffffffff
	mov	rdi, r14
	mov	rsi, r15
	call	fts_safe_changedir
	test	eax, eax
	je	.label_534
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
	or	byte ptr [r15 + 0x72], 1
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_519
	.section	.text
	.align	16
	#Procedure 0x4060a3
	.globl sub_4060a3
	.type sub_4060a3, @function
sub_4060a3:

	nop	word ptr cs:[rax + rax]
.label_507:
	mov	rbx, qword ptr [r15 + 0x10]
	test	rbx, rbx
	je	.label_525
	mov	qword ptr [r14], rbx
	mov	rdi, r15
	call	free
	cmp	qword ptr [rbx + 0x58], 0
	je	.label_529
	movzx	eax, word ptr [rbx + 0x74]
	cmp	eax, 4
	mov	r15, rbx
	je	.label_507
	movzx	eax, ax
	cmp	eax, 2
	jne	.label_498
	mov	edx, 1
	mov	rdi, r14
	mov	rsi, rbx
	call	fts_stat
	mov	word ptr [rbx + 0x70], ax
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_533
	mov	eax, dword ptr [r14 + 0x48]
	test	al, 4
	jne	.label_533
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_536
	mov	edi, OFFSET FLAT:label_438
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_539
.label_541:
	mov	rcx, qword ptr [rax + 8]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rax + 0x30], rcx
	mov	rax, qword ptr [rax + 0x10]
.label_519:
	test	rax, rax
	jne	.label_541
	jmp	.label_534
.label_508:
	test	ecx, 0x20000
	je	.label_543
	mov	edi, dword ptr [r15 + 0x44]
	call	close
.label_543:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_546
	nop	word ptr cs:[rax + rax]
.label_551:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_548
	call	closedir
.label_548:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_551
	mov	qword ptr [r14 + 8], 0
.label_546:
	mov	word ptr [r15 + 0x70], 6
.label_528:
	mov	rdi, r14
	mov	rsi, r15
	call	leave_dir
	mov	rbx, r15
	jmp	.label_501
.label_525:
	mov	rbx, qword ptr [r15 + 8]
	cmp	qword ptr [rbx + 0x18], 0
	je	.label_552
	mov	qword ptr [r14], rbx
	mov	rax, qword ptr [rbx + 0x48]
	mov	rcx, qword ptr [r14 + 0x20]
	mov	byte ptr [rcx + rax], 0
	mov	esi, 3
	mov	rdi, r14
	call	fts_build
	mov	rbx, rax
	test	rbx, rbx
	je	.label_555
	mov	rdi, r15
	call	free
	jmp	.label_498
.label_529:
	mov	rdi, r14
	call	restore_initial_cwd
	test	eax, eax
	mov	eax, dword ptr [r14 + 0x48]
	je	.label_499
	or	eax, 0x2000
	mov	dword ptr [r14 + 0x48], eax
	xor	ebx, ebx
	jmp	.label_501
.label_499:
	test	ax, 0x102
	je	.label_505
	mov	rdi, qword ptr [r14 + 0x58]
	test	rdi, rdi
	je	.label_506
	call	hash_free
	jmp	.label_506
.label_517:
	and	eax, 0xffffefff
	mov	dword ptr [r14 + 0x48], eax
	nop	word ptr cs:[rax + rax]
.label_518:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_515
	call	closedir
.label_515:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_518
	mov	qword ptr [r14 + 8], 0
.label_512:
	mov	esi, 3
	mov	rdi, r14
	call	fts_build
	mov	qword ptr [r14 + 8], rax
	test	rax, rax
	je	.label_520
.label_534:
	mov	rbx, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 8], 0
	jmp	.label_498
.label_520:
	xor	ebx, ebx
	test	byte ptr [r14 + 0x49], 0x20
	jne	.label_501
	cmp	dword ptr [r15 + 0x40], 0
	je	.label_528
	movzx	eax, word ptr [r12]
	cmp	eax, 4
	je	.label_528
	mov	word ptr [r12], 7
	jmp	.label_528
.label_553:
	mov	edi, dword ptr [r14 + 0x2c]
	mov	esi, OFFSET FLAT:label_438
	xor	eax, eax
	call	openat_safer
.label_557:
	mov	dword ptr [r15 + 0x44], eax
	test	eax, eax
	js	.label_531
	or	byte ptr [r15 + 0x72], 2
	jmp	.label_535
.label_555:
	xor	ebx, ebx
	test	byte ptr [r14 + 0x49], 0x20
	jne	.label_501
	mov	rbx, qword ptr [r15 + 8]
.label_552:
	mov	qword ptr [r14], rbx
	mov	rdi, r15
	call	free
	cmp	qword ptr [rbx + 0x58], -1
	je	.label_537
	movzx	eax, word ptr [rbx + 0x70]
	cmp	eax, 0xb
	je	.label_524
	mov	rax, qword ptr [rbx + 0x48]
	mov	rcx, qword ptr [r14 + 0x20]
	mov	byte ptr [rcx + rax], 0
	cmp	qword ptr [rbx + 0x58], 0
	je	.label_538
	movzx	eax, word ptr [rbx + 0x72]
	test	al, 2
	jne	.label_540
	test	al, 1
	jne	.label_521
	mov	rsi, qword ptr [rbx + 8]
	mov	edx, 0xffffffff
	mov	ecx, OFFSET FLAT:label_544
	mov	rdi, r14
	call	fts_safe_changedir
	jmp	.label_547
.label_537:
	mov	rdi, rbx
	call	free
	call	__errno_location
	mov	dword ptr [rax], 0
	mov	qword ptr [r14], 0
	xor	ebx, ebx
	jmp	.label_501
.label_531:
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
	mov	word ptr [r15 + 0x70], 7
	jmp	.label_535
.label_505:
	mov	rdi, qword ptr [r14 + 0x58]
	call	free
.label_506:
	mov	rdx, qword ptr [rbx + 0x60]
	mov	qword ptr [rbx + 0x48], rdx
	mov	rdi, qword ptr [r14 + 0x20]
	lea	r15, [rbx + 0x108]
	inc	rdx
	mov	rsi, r15
	call	memmove
	mov	esi, 0x2f
	mov	rdi, r15
	call	strrchr
	mov	rbp, rax
	test	rbp, rbp
	je	.label_554
	cmp	rbp, r15
	jne	.label_556
	cmp	byte ptr [rbx + 0x109], 0
	je	.label_554
.label_556:
	inc	rbp
	mov	rdi, rbp
	call	strlen
	mov	r12, rax
	lea	rdx, [r12 + 1]
	mov	rdi, r15
	mov	rsi, rbp
	call	memmove
	mov	qword ptr [rbx + 0x60], r12
.label_554:
	mov	rax, qword ptr [r14 + 0x20]
	mov	qword ptr [rbx + 0x38], rax
	mov	qword ptr [rbx + 0x30], rax
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_502
	mov	edi, 0x1f
	xor	esi, esi
	mov	edx, OFFSET FLAT:AD_hash
	mov	ecx, OFFSET FLAT:AD_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	qword ptr [r14 + 0x58], rax
	jmp	.label_511
.label_502:
	mov	edi, 0x20
	call	malloc
	mov	qword ptr [r14 + 0x58], rax
	test	rax, rax
	je	.label_511
	mov	rdi, rax
	call	cycle_check_init
	jmp	.label_511
.label_538:
	mov	rdi, r14
	call	restore_initial_cwd
.label_547:
	test	eax, eax
	je	.label_521
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	or	byte ptr [r14 + 0x49], 0x20
	jmp	.label_521
.label_540:
	mov	eax, dword ptr [r14 + 0x48]
	lea	rbp, [rbx + 0x44]
	test	al, 4
	jne	.label_523
	test	ah, 2
	mov	r15d, dword ptr [rbx + 0x44]
	jne	.label_527
	mov	edi, r15d
	call	fchdir
	test	eax, eax
	je	.label_523
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	or	byte ptr [r14 + 0x49], 0x20
	jmp	.label_523
.label_536:
	mov	edi, dword ptr [r14 + 0x2c]
	mov	esi, OFFSET FLAT:label_438
	xor	eax, eax
	call	openat_safer
.label_539:
	mov	dword ptr [rbx + 0x44], eax
	test	eax, eax
	js	.label_532
	or	byte ptr [rbx + 0x72], 2
	jmp	.label_533
.label_532:
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	mov	word ptr [rbx + 0x70], 7
.label_533:
	mov	word ptr [rbx + 0x74], 3
.label_498:
	mov	rax, qword ptr [r14 + 0x20]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rcx + 0x38]
	mov	rcx, qword ptr [rcx + 0x48]
	lea	rsi, [rcx - 1]
	cmp	byte ptr [rdx + rcx - 1], 0x2f
	cmovne	rsi, rcx
	lea	rdi, [rax + rsi + 1]
	mov	byte ptr [rax + rsi], 0x2f
	lea	rsi, [rbx + 0x108]
	mov	rdx, qword ptr [rbx + 0x60]
	inc	rdx
	call	memmove
.label_511:
	mov	r15, rbx
.label_535:
	mov	qword ptr [r14], r15
	movzx	eax, word ptr [r15 + 0x70]
	cmp	eax, 0xb
	jne	.label_542
	mov	rax, qword ptr [r15 + 0xa8]
	cmp	rax, 1
	je	.label_545
	cmp	rax, 2
	jne	.label_524
	mov	rbx, qword ptr [r15 + 8]
	cmp	qword ptr [rbx + 0x68], 0
	jne	.label_500
	mov	eax, dword ptr [r14 + 0x48]
	and	eax, 0x18
	cmp	eax, 0x18
	jne	.label_500
	mov	esi, dword ptr [r14 + 0x2c]
	mov	rdi, rbx
	call	filesystem_type
	cmp	rax, 0x52654973
	je	.label_545
	cmp	rax, 0x58465342
	je	.label_545
.label_500:
	xor	edx, edx
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	mov	ecx, 0xf000
	and	ecx, dword ptr [r15 + 0x90]
	cmp	ecx, 0x4000
	jne	.label_542
	cmp	qword ptr [r15 + 0x58], 0
	je	.label_545
	mov	rax, qword ptr [rbx + 0x68]
	lea	rcx, [rax + 1]
	cmp	rcx, 2
	jb	.label_545
	dec	rax
	mov	qword ptr [rbx + 0x68], rax
.label_545:
	mov	ax, word ptr [r15 + 0x70]
.label_542:
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_558
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_497
	mov	rax, qword ptr [r15 + 0x78]
	mov	qword ptr [r14 + 0x18], rax
.label_497:
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_516
	mov	edi, 0x18
	call	malloc
	mov	rbx, rax
	test	rbx, rbx
	je	.label_503
	movups	xmm0, xmmword ptr [r15 + 0x78]
	movups	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 0x10], r15
	mov	rdi, qword ptr [r14 + 0x58]
	mov	rsi, rbx
	call	hash_insert
	mov	rbp, rax
	cmp	rbp, rbx
	je	.label_509
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	je	.label_503
	mov	rax, qword ptr [rbp + 0x10]
	mov	qword ptr [r15], rax
	jmp	.label_514
.label_558:
	mov	rbx, r15
	jmp	.label_501
.label_516:
	mov	rdi, qword ptr [r14 + 0x58]
	lea	rsi, [r15 + 0x78]
	call	cycle_check
	test	al, al
	je	.label_509
	mov	qword ptr [r15], r15
.label_514:
	mov	word ptr [r15 + 0x70], 2
	mov	rbx, r15
	jmp	.label_501
.label_509:
	mov	rbx, r15
	jmp	.label_501
.label_503:
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	ebx, ebx
	jmp	.label_501
.label_527:
	mov	esi, dword ptr [r14 + 0x2c]
	cmp	esi, r15d
	jne	.label_522
	cmp	esi, -0x64
	jne	.label_524
.label_522:
	lea	rdi, [r14 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_526
	mov	edi, eax
	call	close
.label_526:
	mov	dword ptr [r14 + 0x2c], r15d
.label_523:
	mov	edi, dword ptr [rbp]
	call	close
.label_521:
	movzx	eax, word ptr [rbx + 0x70]
	cmp	eax, 2
	je	.label_530
	mov	eax, dword ptr [rbx + 0x40]
	xor	ecx, ecx
	cmp	eax, 0
	setne	cl
	or	ecx, 6
	cmp	eax, 0
	mov	word ptr [rbx + 0x70], cx
	jne	.label_530
	mov	rdi, r14
	mov	rsi, rbx
	call	leave_dir
.label_530:
	xor	eax, eax
	test	byte ptr [r14 + 0x49], 0x20
	cmovne	rbx, rax
.label_501:
	mov	rax, rbx
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_524:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x406714
	.globl sub_406714
	.type sub_406714, @function
sub_406714:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x406720

	.globl leave_dir
	.type leave_dir, @function
leave_dir:
	sub	rsp, 0x18
	movzx	eax, word ptr [rdi + 0x48]
	test	ax, 0x102
	je	.label_559
	movups	xmm0, xmmword ptr [rsi + 0x78]
	movaps	xmmword ptr [rsp], xmm0
	mov	rdi, qword ptr [rdi + 0x58]
	lea	rsi, [rsp]
	call	hash_delete
	test	rax, rax
	je	.label_561
	mov	rdi, rax
	call	free
	add	rsp, 0x18
	ret	
.label_559:
	mov	rax, qword ptr [rsi + 8]
	test	rax, rax
	je	.label_560
	cmp	qword ptr [rax + 0x58], 0
	js	.label_560
	mov	rcx, qword ptr [rdi + 0x58]
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_561
	mov	rdx, qword ptr [rcx]
	cmp	rdx, qword ptr [rsi + 0x80]
	jne	.label_560
	mov	rdx, qword ptr [rcx + 8]
	cmp	rdx, qword ptr [rsi + 0x78]
	jne	.label_560
	mov	rdx, qword ptr [rax + 0x78]
	mov	qword ptr [rcx + 8], rdx
	mov	rax, qword ptr [rax + 0x80]
	mov	qword ptr [rcx], rax
.label_560:
	add	rsp, 0x18
	ret	
.label_561:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4067a2
	.globl sub_4067a2
	.type sub_4067a2, @function
sub_4067a2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4067b0

	.globl fts_safe_changedir
	.type fts_safe_changedir, @function
fts_safe_changedir:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	rbx, rcx
	mov	r13d, edx
	mov	r12, rsi
	mov	r15, rdi
	test	rbx, rbx
	je	.label_569
	movzx	edx, byte ptr [rbx]
	mov	ecx, 0x2e
	mov	eax, 0x2e
	sub	eax, edx
	jne	.label_575
	movzx	eax, byte ptr [rbx + 1]
	sub	ecx, eax
	mov	eax, ecx
	jne	.label_575
	movzx	eax, byte ptr [rbx + 2]
	neg	eax
.label_575:
	test	eax, eax
	sete	r14b
	jmp	.label_580
.label_569:
	xor	r14d, r14d
.label_580:
	mov	eax, dword ptr [r15 + 0x48]
	test	al, 4
	jne	.label_581
	test	r13d, r13d
	mov	qword ptr [rsp], r12
	jns	.label_562
	mov	ecx, r14d
	xor	cl, 1
	jne	.label_562
	and	eax, 0x200
	je	.label_562
	lea	rbp, [r15 + 0x60]
	mov	rdi, rbp
	call	i_ring_empty
	test	al, al
	jne	.label_562
	mov	rdi, rbp
	call	i_ring_pop
	xor	ecx, ecx
	test	eax, eax
	cmovns	rbx, rcx
	cmovns	r13d, eax
	mov	r14b, 1
.label_562:
	test	r13d, r13d
	mov	r12d, r13d
	jns	.label_573
	mov	eax, dword ptr [r15 + 0x48]
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_574
	xor	eax, eax
	mov	rdi, rbx
	mov	esi, edx
	call	open_safer
	jmp	.label_579
.label_581:
	xor	ebp, ebp
	test	r13d, r13d
	js	.label_564
	and	eax, 0x200
	je	.label_564
	mov	edi, r13d
	call	close
	jmp	.label_564
.label_574:
	mov	edi, dword ptr [r15 + 0x2c]
	xor	eax, eax
	mov	rsi, rbx
	call	openat_safer
.label_579:
	mov	r12d, eax
	mov	ebp, 0xffffffff
	test	r12d, r12d
	js	.label_564
.label_573:
	mov	eax, dword ptr [r15 + 0x48]
	test	al, 2
	jne	.label_570
	test	rbx, rbx
	je	.label_572
	cmp	byte ptr [rbx], 0x2e
	jne	.label_572
	cmp	byte ptr [rbx + 1], 0x2e
	jne	.label_572
	cmp	byte ptr [rbx + 2], 0
	jne	.label_572
.label_570:
	lea	rdx, [rsp + 8]
	mov	edi, 1
	mov	esi, r12d
	call	__fxstat
	test	eax, eax
	jne	.label_577
	mov	rcx, qword ptr [rsp]
	mov	rax, qword ptr [rcx + 0x78]
	cmp	rax, qword ptr [rsp + 8]
	jne	.label_578
	mov	rax, qword ptr [rcx + 0x80]
	cmp	rax, qword ptr [rsp + 0x10]
	jne	.label_578
	mov	eax, dword ptr [r15 + 0x48]
.label_572:
	test	ah, 2
	jne	.label_563
	mov	edi, r12d
	call	fchdir
	mov	ebp, eax
	jmp	.label_565
.label_563:
	mov	esi, dword ptr [r15 + 0x2c]
	cmp	esi, r12d
	jne	.label_566
	cmp	esi, -0x64
	jne	.label_576
.label_566:
	test	r14b, r14b
	je	.label_567
	test	al, 4
	jne	.label_568
	test	esi, esi
	js	.label_568
	mov	edi, esi
	jmp	.label_571
.label_578:
	call	__errno_location
	mov	dword ptr [rax], 2
.label_577:
	mov	ebp, 0xffffffff
.label_565:
	test	r13d, r13d
	jns	.label_564
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, r12d
	call	close
	mov	dword ptr [rbx], r14d
	jmp	.label_564
.label_567:
	lea	rdi, [r15 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_568
	mov	edi, eax
.label_571:
	call	close
.label_568:
	mov	dword ptr [r15 + 0x2c], r12d
	xor	ebp, ebp
.label_564:
	mov	eax, ebp
	add	rsp, 0x98
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_576:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x406999
	.globl sub_406999
	.type sub_406999, @function
sub_406999:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4069a0

	.globl fts_build
	.type fts_build, @function
fts_build:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	ebx, esi
	mov	r15, rdi
	mov	r13, qword ptr [r15]
	mov	rdi, qword ptr [r13 + 0x18]
	test	rdi, rdi
	mov	qword ptr [rsp + 0x10], r15
	mov	qword ptr [rsp + 0x70], rdi
	je	.label_643
	call	dirfd
	mov	dword ptr [rsp + 4], eax
	test	eax, eax
	js	.label_650
	mov	dword ptr [rsp], ebx
	lea	rax, [r15 + 0x40]
	mov	qword ptr [rsp + 0x18], rax
	cmp	qword ptr [r15 + 0x40], 1
	sbb	rax, rax
	not	rax
	or	rax, 0x186a0
	mov	qword ptr [rsp + 0x58], rax
	lea	rbp, [r15 + 0x48]
	mov	al, 1
	mov	dword ptr [rsp + 0xc], eax
	jmp	.label_628
.label_643:
	mov	eax, dword ptr [r15 + 0x48]
	mov	ecx, eax
	and	ecx, 0x204
	mov	edi, 0xffffff9c
	cmp	ecx, 0x200
	jne	.label_585
	mov	edi, dword ptr [r15 + 0x2c]
.label_585:
	mov	rsi, qword ptr [r13 + 0x30]
	xor	edx, edx
	test	al, 0x10
	je	.label_591
	test	al, 1
	je	.label_592
	cmp	qword ptr [r13 + 0x58], 0
	je	.label_591
.label_592:
	mov	edx, 0x20000
.label_591:
	lea	rcx, [rsp + 4]
	call	opendirat
	mov	qword ptr [r13 + 0x18], rax
	test	rax, rax
	je	.label_654
	mov	dword ptr [rsp], ebx
	lea	rcx, [r15 + 0x48]
	movzx	eax, word ptr [r13 + 0x70]
	cmp	eax, 0xb
	mov	rbp, r13
	mov	r12, rcx
	jne	.label_600
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, rbp
	call	fts_stat
	mov	rbx, rbp
	mov	word ptr [rbp + 0x70], ax
	jmp	.label_605
.label_650:
	mov	rdi, qword ptr [r13 + 0x18]
	call	closedir
	mov	qword ptr [r13 + 0x18], 0
.label_654:
	xor	r14d, r14d
	cmp	ebx, 3
	jne	.label_582
	mov	word ptr [r13 + 0x70], 4
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r13 + 0x40], eax
	jmp	.label_615
.label_600:
	mov	rbx, rbp
	test	byte ptr [rcx + 1], 1
	je	.label_605
	mov	rdi, r15
	mov	rbp, rbx
	mov	rsi, rbp
	call	leave_dir
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, rbp
	call	fts_stat
	movzx	eax, word ptr [r15 + 0x48]
	test	ax, 0x102
	je	.label_632
	mov	edi, 0x18
	call	malloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_624
	mov	rax, rbx
	movups	xmm0, xmmword ptr [rax + 0x78]
	movups	xmmword ptr [rbp], xmm0
	mov	qword ptr [rbp + 0x10], rax
	mov	rdi, qword ptr [r15 + 0x58]
	mov	rsi, rbp
	call	hash_insert
	mov	r14, rax
	cmp	r14, rbp
	je	.label_605
	mov	rdi, rbp
	call	free
	test	r14, r14
	je	.label_624
	mov	rax, qword ptr [r14 + 0x10]
	mov	rcx, rbx
	mov	qword ptr [rcx], rax
	mov	word ptr [rcx + 0x70], 2
	jmp	.label_605
.label_632:
	mov	rdi, qword ptr [r15 + 0x58]
	lea	rsi, [rbp + 0x78]
	call	cycle_check
	test	al, al
	je	.label_605
	mov	rax, rbx
	mov	qword ptr [rax], rax
	mov	word ptr [rax + 0x70], 2
.label_605:
	lea	rax, [r15 + 0x40]
	mov	qword ptr [rsp + 0x18], rax
	cmp	qword ptr [r15 + 0x40], 1
	sbb	rax, rax
	not	rax
	or	rax, 0x186a0
	mov	qword ptr [rsp + 0x58], rax
	cmp	dword ptr [rsp], 2
	mov	r13, rbx
	mov	rbp, r12
	je	.label_633
	mov	eax, dword ptr [rbp]
	and	eax, 0x38
	cmp	eax, 0x18
	jne	.label_635
	cmp	qword ptr [r13 + 0x88], 2
	jne	.label_635
	mov	esi, dword ptr [rsp + 4]
	mov	rdi, r13
	call	filesystem_type
	cmp	rax, 0x9f9f
	jle	.label_604
	cmp	rax, 0x9fa0
	je	.label_635
	mov	ecx, 0xff534d42
	cmp	rax, rcx
	je	.label_635
	cmp	rax, 0x5346414f
	je	.label_635
	jmp	.label_633
.label_624:
	call	__errno_location
	mov	dword ptr [rax], 0xc
	jmp	.label_615
.label_604:
	test	rax, rax
	je	.label_635
	cmp	rax, 0x6969
	jne	.label_633
.label_635:
	cmp	dword ptr [rsp], 3
	sete	bl
	mov	r14b, 1
	jmp	.label_659
.label_633:
	cmp	dword ptr [rsp], 3
	sete	bl
	mov	r14d, 0
	jne	.label_583
.label_659:
	mov	r15, r13
	test	byte ptr [rbp + 1], 2
	mov	ebp, dword ptr [rsp + 4]
	je	.label_586
	mov	esi, 0x406
	mov	edx, 3
	xor	eax, eax
	mov	edi, ebp
	call	rpl_fcntl
	mov	ebp, eax
	mov	dword ptr [rsp + 4], ebp
.label_586:
	test	ebp, ebp
	js	.label_593
	xor	ecx, ecx
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r15
	mov	edx, ebp
	call	fts_safe_changedir
	test	eax, eax
	je	.label_598
.label_593:
	and	bl, r14b
	cmp	bl, 1
	jne	.label_599
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
.label_599:
	or	byte ptr [r15 + 0x72], 1
	mov	rdi, qword ptr [r15 + 0x18]
	call	closedir
	mov	rbx, r15
	mov	qword ptr [r15 + 0x18], 0
	mov	rbp, r12
	mov	eax, dword ptr [rbp]
	test	ah, 2
	mov	r15, qword ptr [rsp + 0x10]
	je	.label_603
	mov	edi, dword ptr [rsp + 4]
	test	edi, edi
	js	.label_603
	call	close
.label_603:
	mov	r13, rbx
	mov	qword ptr [r13 + 0x18], 0
.label_583:
	mov	dword ptr [rsp + 0xc], 0
.label_628:
	mov	rax, qword ptr [r13 + 0x38]
	mov	rcx, qword ptr [r13 + 0x48]
	lea	rdx, [rcx - 1]
	cmp	byte ptr [rax + rcx - 1], 0x2f
	cmovne	rdx, rcx
	xor	eax, eax
	mov	qword ptr [rsp + 0x20], rax
	test	byte ptr [rbp], 4
	je	.label_616
	mov	rax, qword ptr [r15 + 0x20]
	lea	rcx, [rax + rdx + 1]
	mov	qword ptr [rsp + 0x20], rcx
	mov	byte ptr [rax + rdx], 0x2f
.label_616:
	lea	rax, [rdx + 1]
	mov	rcx, qword ptr [r15 + 0x30]
	mov	qword ptr [rsp + 0x38], rax
	sub	rcx, rax
	mov	qword ptr [rsp + 0x78], rcx
	mov	rax, qword ptr [r13 + 0x58]
	inc	rax
	mov	qword ptr [rsp + 0x88], rax
	add	rdx, 0x102
	mov	qword ptr [rsp + 0x80], rdx
	xor	eax, eax
	mov	qword ptr [rsp + 0x48], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x60], rax
	mov	dword ptr [rsp + 8], 0
	xor	eax, eax
	xor	r14d, r14d
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x28], rbp
	mov	qword ptr [rsp + 0x30], r13
.label_626:
	mov	rbx, qword ptr [r13 + 0x18]
	test	rbx, rbx
	je	.label_619
	mov	qword ptr [rsp + 0x90], rax
	mov	qword ptr [rsp + 0x40], r14
	nop	dword ptr [rax]
.label_646:
	call	__errno_location
	mov	r15, rax
	mov	dword ptr [r15], 0
	mov	rdi, rbx
	call	readdir
	mov	r14, rax
	test	r14, r14
	je	.label_636
	mov	rcx, r13
	mov	r13, r14
	add	r13, 0x13
	test	byte ptr [rbp], 0x20
	jne	.label_639
	cmp	byte ptr [r13], 0x2e
	jne	.label_639
	movzx	eax, byte ptr [r14 + 0x14]
	cmp	al, 0x2e
	je	.label_642
	test	al, al
	je	.label_610
	jmp	.label_639
	.section	.text
	.align	16
	#Procedure 0x406da9
	.globl sub_406da9
	.type sub_406da9, @function
sub_406da9:

	nop	dword ptr [rax]
.label_642:
	cmp	byte ptr [r14 + 0x15], 0
	jne	.label_639
.label_610:
	mov	r13, rcx
	mov	rbx, qword ptr [r13 + 0x18]
	test	rbx, rbx
	jne	.label_646
	jmp	.label_648
	.section	.text
	.align	16
	#Procedure 0x406dc8
	.globl sub_406dc8
	.type sub_406dc8, @function
sub_406dc8:

	nop	dword ptr [rax + rax]
.label_639:
	mov	qword ptr [rsp + 0x50], r12
	mov	rdi, r13
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	r12, rax
	test	r12, r12
	je	.label_644
	mov	rdi, r12
	add	rdi, 0x108
	mov	qword ptr [rsp + 0x68], rdi
	mov	rsi, r13
	mov	rdx, rbx
	call	memcpy
	mov	byte ptr [r12 + rbx + 0x108], 0
	mov	qword ptr [r12 + 0x60], rbx
	mov	rbp, qword ptr [rsp + 0x10]
	mov	qword ptr [r12 + 0x50], rbp
	mov	r13, qword ptr [rbp + 0x20]
	mov	qword ptr [r12 + 0x38], r13
	mov	dword ptr [r12 + 0x40], 0
	mov	qword ptr [r12 + 0x18], 0
	mov	word ptr [r12 + 0x72], 0
	mov	word ptr [r12 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r12 + 0x20], xmm0
	mov	rax, qword ptr [rsp + 0x78]
	cmp	rbx, rax
	jae	.label_587
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x38]
	jmp	.label_602
	.section	.text
	.align	16
	#Procedure 0x406e78
	.globl sub_406e78
	.type sub_406e78, @function
sub_406e78:

	nop	dword ptr [rax + rax]
.label_587:
	mov	rax, qword ptr [rsp + 0x80]
	lea	rsi, [rax + rbx]
	add	rsi, qword ptr [rbp + 0x30]
	jb	.label_607
	mov	qword ptr [rbp + 0x30], rsi
	mov	rdi, r13
	call	realloc
	test	rax, rax
	je	.label_612
	mov	qword ptr [rbp + 0x20], rax
	cmp	r13, rax
	je	.label_613
	mov	rdx, qword ptr [rsp + 0x38]
	add	rax, rdx
	mov	rbp, qword ptr [rsp + 0x28]
	test	byte ptr [rbp], 4
	mov	rcx, qword ptr [rsp + 0x20]
	cmovne	rcx, rax
	mov	qword ptr [rsp + 0x20], rcx
	mov	al, 1
	mov	qword ptr [rsp + 0x60], rax
	jmp	.label_617
.label_613:
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x38]
.label_617:
	mov	rax, qword ptr [rsp + 0x10]
	mov	rax, qword ptr [rax + 0x30]
	sub	rax, rdx
.label_602:
	add	rbx, rdx
	mov	r13, rbp
	jb	.label_622
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [r12 + 0x58], rax
	mov	r15, qword ptr [rsp + 0x10]
	mov	rax, qword ptr [r15]
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12 + 0x48], rbx
	mov	rax, qword ptr [r14]
	mov	qword ptr [r12 + 0x80], rax
	test	byte ptr [rbp], 4
	jne	.label_625
	mov	rax, qword ptr [rsp + 0x68]
	mov	qword ptr [r12 + 0x30], rax
	jmp	.label_637
	.section	.text
	.align	16
	#Procedure 0x406f3f
	.globl sub_406f3f
	.type sub_406f3f, @function
sub_406f3f:

	nop	
.label_625:
	mov	rax, qword ptr [r12 + 0x38]
	mov	qword ptr [r12 + 0x30], rax
	mov	rdx, qword ptr [r12 + 0x60]
	inc	rdx
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x68]
	call	memmove
	mov	rbp, r13
.label_637:
	mov	edx, dword ptr [rbp]
	mov	rax, qword ptr [rsp + 0x18]
	cmp	qword ptr [rax], 0
	je	.label_614
	mov	eax, edx
	and	eax, 0x400
	jne	.label_614
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, r12
	call	fts_stat
	mov	rbp, r13
	mov	word ptr [r12 + 0x70], ax
	mov	r14, qword ptr [rsp + 0x40]
	jmp	.label_641
	.section	.text
	.align	16
	#Procedure 0x406f98
	.globl sub_406f98
	.type sub_406f98, @function
sub_406f98:

	nop	dword ptr [rax + rax]
.label_614:
	and	edx, 0x18
	movzx	ecx, byte ptr [r14 + 0x12]
	xor	eax, eax
	cmp	edx, 0x18
	mov	edx, 0
	jne	.label_647
	cmp	cl, 4
	setne	bl
	test	cl, cl
	setne	dl
	and	dl, bl
.label_647:
	mov	word ptr [r12 + 0x70], 0xb
	lea	esi, [rcx - 1]
	cmp	esi, 0xb
	mov	r14, qword ptr [rsp + 0x40]
	ja	.label_608
	mov	eax, dword ptr [(rcx * 4) + label_611]
.label_608:
	mov	dword ptr [r12 + 0x90], eax
	cmp	dl, 1
	mov	eax, 1
	adc	rax, 0
	mov	qword ptr [r12 + 0xa8], rax
.label_641:
	mov	qword ptr [r12 + 0x10], 0
	mov	rcx, qword ptr [rsp + 0x50]
	test	rcx, rcx
	mov	rax, r12
	je	.label_653
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rax + 0x10], r12
	mov	rax, rcx
.label_653:
	mov	rbx, rax
	cmp	r14, 0x2710
	jne	.label_590
	mov	rax, qword ptr [rsp + 0x18]
	cmp	qword ptr [rax], 0
	jne	.label_590
	mov	esi, dword ptr [rsp + 4]
	mov	rdi, qword ptr [rsp + 0x30]
	call	filesystem_type
	cmp	rax, 0x6969
	je	.label_595
	cmp	rax, 0x1021994
	je	.label_595
	mov	dword ptr [rsp + 8], 0
	mov	ecx, 0xff534d42
	cmp	rax, rcx
	mov	rbp, r13
	je	.label_590
	mov	al, 1
	mov	dword ptr [rsp + 8], eax
	jmp	.label_590
.label_595:
	mov	dword ptr [rsp + 8], 0
	mov	rbp, r13
	nop	dword ptr [rax + rax]
.label_590:
	inc	r14
	cmp	qword ptr [rsp + 0x58], r14
	mov	rax, r12
	mov	r13, qword ptr [rsp + 0x30]
	mov	r12, rbx
	ja	.label_626
	jmp	.label_619
.label_636:
	mov	eax, dword ptr [r15]
	test	eax, eax
	mov	r14, qword ptr [rsp + 0x40]
	je	.label_645
	mov	dword ptr [r13 + 0x40], eax
	mov	rax, qword ptr [rsp + 0x70]
	or	rax, r14
	mov	ax, 7
	mov	cx, 4
	cmovne	cx, ax
	mov	word ptr [r13 + 0x70], cx
.label_645:
	mov	rdi, qword ptr [r13 + 0x18]
	test	rdi, rdi
	mov	r15, qword ptr [rsp + 0x10]
	je	.label_619
	call	closedir
	mov	qword ptr [r13 + 0x18], 0
	jmp	.label_619
.label_648:
	mov	r15, qword ptr [rsp + 0x10]
	mov	r14, qword ptr [rsp + 0x40]
.label_619:
	mov	rax, qword ptr [rsp + 0x60]
	test	al, 1
	je	.label_621
	mov	rcx, qword ptr [r15 + 8]
	mov	rax, qword ptr [r15 + 0x20]
	jmp	.label_623
	.section	.text
	.align	16
	#Procedure 0x407102
	.globl sub_407102
	.type sub_407102, @function
sub_407102:

	nop	word ptr cs:[rax + rax]
.label_629:
	mov	qword ptr [rcx + 0x38], rax
	mov	rcx, qword ptr [rcx + 0x10]
.label_623:
	test	rcx, rcx
	je	.label_627
	mov	rdx, qword ptr [rcx + 0x30]
	lea	rsi, [rcx + 0x108]
	cmp	rdx, rsi
	je	.label_629
	sub	rdx, qword ptr [rcx + 0x38]
	add	rdx, rax
	mov	qword ptr [rcx + 0x30], rdx
	jmp	.label_629
.label_627:
	cmp	qword ptr [r12 + 0x58], 0
	js	.label_621
	mov	rcx, r12
	nop	word ptr cs:[rax + rax]
.label_638:
	mov	rdx, qword ptr [rcx + 0x30]
	lea	rsi, [rcx + 0x108]
	cmp	rdx, rsi
	je	.label_631
	sub	rdx, qword ptr [rcx + 0x38]
	add	rdx, rax
	mov	qword ptr [rcx + 0x30], rdx
.label_631:
	mov	qword ptr [rcx + 0x38], rax
	mov	rdx, qword ptr [rcx + 0x10]
	test	rdx, rdx
	jne	.label_634
	mov	rdx, qword ptr [rcx + 8]
.label_634:
	cmp	qword ptr [rdx + 0x58], 0
	mov	rcx, rdx
	jns	.label_638
.label_621:
	test	byte ptr [rbp], 4
	mov	rdx, qword ptr [rsp + 0x38]
	je	.label_640
	mov	rax, qword ptr [rsp + 0x20]
	mov	rcx, rax
	lea	rax, [rcx - 1]
	cmp	rdx, qword ptr [r15 + 0x30]
	cmove	rcx, rax
	test	r14, r14
	cmove	rcx, rax
	mov	byte ptr [rcx], 0
.label_640:
	cmp	qword ptr [rsp + 0x70], 0
	jne	.label_588
	mov	eax, dword ptr [rsp + 0xc]
	test	al, al
	je	.label_588
	cmp	dword ptr [rsp], 1
	je	.label_649
	test	r14, r14
	jne	.label_588
.label_649:
	cmp	qword ptr [r13 + 0x58], 0
	je	.label_651
	mov	rsi, qword ptr [r13 + 8]
	mov	edx, 0xffffffff
	mov	ecx, OFFSET FLAT:label_544
	mov	rdi, r15
	call	fts_safe_changedir
	jmp	.label_657
.label_651:
	mov	rdi, r15
	call	restore_initial_cwd
.label_657:
	mov	rcx, rbp
	test	eax, eax
	je	.label_588
	mov	word ptr [r13 + 0x70], 7
	or	byte ptr [rcx + 1], 0x20
	xor	r14d, r14d
	test	r12, r12
	je	.label_582
	xor	r14d, r14d
	nop	word ptr [rax + rax]
.label_594:
	mov	rbp, qword ptr [r12 + 0x10]
	mov	rdi, qword ptr [r12 + 0x18]
	test	rdi, rdi
	je	.label_589
	call	closedir
.label_589:
	mov	rdi, r12
	call	free
	test	rbp, rbp
	mov	r12, rbp
	jne	.label_594
	jmp	.label_582
.label_588:
	test	r14, r14
	je	.label_596
	mov	eax, dword ptr [rsp + 8]
	test	al, 1
	jne	.label_597
	cmp	r14, 2
	jb	.label_601
	mov	rax, qword ptr [rsp + 0x18]
	mov	rax, qword ptr [rax]
	test	rax, rax
	je	.label_601
	mov	rdi, r15
	mov	rsi, r12
	mov	rdx, r14
	call	fts_sort
	mov	r14, rax
	jmp	.label_582
.label_596:
	cmp	dword ptr [rsp], 3
	jne	.label_609
	movzx	eax, word ptr [r13 + 0x70]
	cmp	eax, 4
	je	.label_609
	movzx	eax, ax
	cmp	eax, 7
	je	.label_609
	mov	word ptr [r13 + 0x70], 6
.label_609:
	xor	r14d, r14d
	test	r12, r12
	je	.label_582
	xor	r14d, r14d
	nop	dword ptr [rax]
.label_620:
	mov	rbp, qword ptr [r12 + 0x10]
	mov	rdi, qword ptr [r12 + 0x18]
	test	rdi, rdi
	je	.label_618
	call	closedir
.label_618:
	mov	rdi, r12
	call	free
	test	rbp, rbp
	mov	r12, rbp
	jne	.label_620
	jmp	.label_582
.label_597:
	mov	rbx, qword ptr [rsp + 0x18]
	mov	qword ptr [rbx], OFFSET FLAT:fts_compare_ino
	mov	rdi, r15
	mov	rsi, r12
	mov	rdx, r14
	call	fts_sort
	mov	r14, rax
	mov	qword ptr [rbx], 0
	jmp	.label_582
.label_601:
	mov	r14, r12
	jmp	.label_582
.label_598:
	mov	al, 1
	mov	dword ptr [rsp + 0xc], eax
	mov	rax, r15
	mov	r15, qword ptr [rsp + 0x10]
	mov	rbp, r12
	mov	r13, rax
	jmp	.label_628
.label_622:
	mov	rdi, r12
	call	free
	mov	rbp, qword ptr [rsp + 0x50]
	test	rbp, rbp
	mov	r14, qword ptr [rsp + 0x30]
	je	.label_630
	nop	word ptr [rax + rax]
.label_606:
	mov	rbx, qword ptr [rbp + 0x10]
	mov	rdi, qword ptr [rbp + 0x18]
	test	rdi, rdi
	je	.label_656
	call	closedir
.label_656:
	mov	rdi, rbp
	call	free
	test	rbx, rbx
	mov	rbp, rbx
	jne	.label_606
.label_630:
	mov	rdi, qword ptr [r14 + 0x18]
	call	closedir
	mov	qword ptr [r14 + 0x18], 0
	mov	word ptr [r14 + 0x70], 7
	or	byte ptr [r13 + 1], 0x20
	mov	dword ptr [r15], 0x24
	jmp	.label_615
.label_607:
	mov	rdi, r13
	call	free
	mov	qword ptr [rbp + 0x20], 0
	mov	dword ptr [r15], 0x24
	jmp	.label_652
.label_612:
	mov	rdi, qword ptr [rbp + 0x20]
	call	free
	mov	qword ptr [rbp + 0x20], 0
.label_652:
	mov	qword ptr [rsp + 0x48], r12
.label_644:
	mov	r12, qword ptr [rsp + 0x30]
	mov	r14d, dword ptr [r15]
	mov	rdi, qword ptr [rsp + 0x48]
	call	free
	mov	rbx, qword ptr [rsp + 0x50]
	test	rbx, rbx
	je	.label_655
	nop	word ptr cs:[rax + rax]
.label_584:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_658
	call	closedir
.label_658:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_584
.label_655:
	mov	rbx, r12
	mov	rdi, qword ptr [rbx + 0x18]
	call	closedir
	mov	qword ptr [rbx + 0x18], 0
	mov	word ptr [rbx + 0x70], 7
	mov	rax, qword ptr [rsp + 0x28]
	or	byte ptr [rax + 1], 0x20
	mov	dword ptr [r15], r14d
.label_615:
	xor	r14d, r14d
.label_582:
	mov	rax, r14
	add	rsp, 0x98
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x407450

	.globl restore_initial_cwd
	.type restore_initial_cwd, @function
restore_initial_cwd:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	mov	eax, dword ptr [rbx + 0x48]
	test	al, 4
	jne	.label_664
	test	ah, 2
	jne	.label_662
	mov	edi, dword ptr [rbx + 0x28]
	call	fchdir
	test	eax, eax
	setne	al
	jmp	.label_661
.label_662:
	mov	esi, dword ptr [rbx + 0x2c]
	lea	rdi, [rbx + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_666
	mov	edi, eax
	call	close
.label_666:
	mov	dword ptr [rbx + 0x2c], 0xffffff9c
.label_664:
	xor	eax, eax
.label_661:
	movzx	ebp, al
	add	rbx, 0x60
	jmp	.label_665
	.section	.text
	.align	16
	#Procedure 0x40749a
	.globl sub_40749a
	.type sub_40749a, @function
sub_40749a:

	nop	word ptr [rax + rax]
.label_660:
	mov	edi, eax
	call	close
.label_665:
	mov	rdi, rbx
	call	i_ring_empty
	test	al, al
	jne	.label_663
	mov	rdi, rbx
	call	i_ring_pop
	test	eax, eax
	jns	.label_660
	jmp	.label_665
.label_663:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4074ca
	.globl sub_4074ca
	.type sub_4074ca, @function
sub_4074ca:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4074d0

	.globl rpl_fts_set
	.type rpl_fts_set, @function
rpl_fts_set:
	cmp	edx, 5
	jb	.label_667
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0x16
	mov	eax, 1
	add	rsp, 8
	ret	
.label_667:
	mov	word ptr [rsi + 0x74], dx
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x4074f2
	.globl sub_4074f2
	.type sub_4074f2, @function
sub_4074f2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407500
	.globl rpl_fts_children
	.type rpl_fts_children, @function
rpl_fts_children:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12d, esi
	mov	r13, rdi
	mov	eax, r12d
	or	eax, 0x1000
	cmp	eax, 0x1000
	jne	.label_668
	mov	r15, qword ptr [r13]
	call	__errno_location
	mov	r14, rax
	mov	dword ptr [r14], 0
	xor	eax, eax
	test	byte ptr [r13 + 0x49], 0x20
	jne	.label_672
	movzx	ecx, word ptr [r15 + 0x70]
	xor	eax, eax
	cmp	ecx, 1
	je	.label_680
	movzx	ecx, cx
	cmp	ecx, 9
	jne	.label_672
	mov	rax, qword ptr [r15 + 0x10]
	jmp	.label_672
.label_668:
	call	__errno_location
	mov	dword ptr [rax], 0x16
	xor	eax, eax
	jmp	.label_672
.label_680:
	mov	rbx, qword ptr [r13 + 8]
	test	rbx, rbx
	je	.label_682
	nop	dword ptr [rax]
.label_674:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_681
	call	closedir
.label_681:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_674
.label_682:
	mov	ebx, 1
	cmp	r12d, 0x1000
	jne	.label_676
	or	byte ptr [r13 + 0x49], 0x10
	mov	ebx, 2
.label_676:
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_669
	mov	rax, qword ptr [r15 + 0x30]
	cmp	byte ptr [rax], 0x2f
	je	.label_669
	mov	eax, dword ptr [r13 + 0x48]
	test	al, 4
	jne	.label_669
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_678
	mov	edi, OFFSET FLAT:label_438
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_679
.label_669:
	mov	rdi, r13
	mov	esi, ebx
	call	fts_build
	mov	qword ptr [r13 + 8], rax
.label_672:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_678:
	mov	edi, dword ptr [r13 + 0x2c]
	mov	esi, OFFSET FLAT:label_438
	xor	eax, eax
	call	openat_safer
.label_679:
	mov	r15d, eax
	test	r15d, r15d
	js	.label_675
	mov	rdi, r13
	mov	esi, ebx
	call	fts_build
	mov	qword ptr [r13 + 8], rax
	test	byte ptr [r13 + 0x49], 2
	jne	.label_683
	mov	edi, r15d
	call	fchdir
	test	eax, eax
	je	.label_671
	mov	ebx, dword ptr [r14]
	mov	edi, r15d
	call	close
	mov	dword ptr [r14], ebx
	xor	eax, eax
	jmp	.label_672
.label_675:
	mov	qword ptr [r13 + 8], 0
	xor	eax, eax
	jmp	.label_672
.label_683:
	mov	esi, dword ptr [r13 + 0x2c]
	cmp	esi, r15d
	jne	.label_684
	cmp	esi, -0x64
	jne	.label_673
.label_684:
	lea	rdi, [r13 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_670
	mov	edi, eax
	call	close
.label_670:
	mov	dword ptr [r13 + 0x2c], r15d
	jmp	.label_677
.label_671:
	mov	edi, r15d
	call	close
.label_677:
	mov	rax, qword ptr [r13 + 8]
	jmp	.label_672
.label_673:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4076a7
	.globl sub_4076a7
	.type sub_4076a7, @function
sub_4076a7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4076b0

	.globl AD_hash
	.type AD_hash, @function
AD_hash:
	mov	rax, qword ptr [rdi + 8]
	xor	edx, edx
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4076bd
	.globl sub_4076bd
	.type sub_4076bd, @function
sub_4076bd:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4076c0

	.globl AD_compare
	.type AD_compare, @function
AD_compare:
	mov	rax, qword ptr [rdi + 8]
	cmp	rax, qword ptr [rsi + 8]
	jne	.label_685
	mov	rax, qword ptr [rdi]
	cmp	rax, qword ptr [rsi]
	sete	al
	ret	
.label_685:
	xor	eax, eax
	ret	
	.section	.text
	.align	16
	#Procedure 0x4076d7
	.globl sub_4076d7
	.type sub_4076d7, @function
sub_4076d7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4076e0

	.globl filesystem_type
	.type filesystem_type, @function
filesystem_type:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x78
	mov	r15d, esi
	mov	r13, rdi
	mov	rbx, qword ptr [r13 + 0x50]
	xor	eax, eax
	test	byte ptr [rbx + 0x49], 2
	je	.label_686
	mov	rbp, qword ptr [rbx + 0x50]
	test	rbp, rbp
	jne	.label_687
	xor	r12d, r12d
	mov	edi, 0xd
	xor	esi, esi
	mov	edx, OFFSET FLAT:dev_type_hash
	mov	ecx, OFFSET FLAT:dev_type_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	rbp, rax
	mov	qword ptr [rbx + 0x50], rbp
	test	rbp, rbp
	mov	r14d, 0
	je	.label_688
.label_687:
	mov	rax, qword ptr [r13 + 0x78]
	mov	qword ptr [rsp], rax
	lea	rsi, [rsp]
	mov	rdi, rbp
	call	hash_lookup
	test	rax, rax
	je	.label_691
	mov	rax, qword ptr [rax + 8]
	jmp	.label_686
.label_691:
	mov	r12b, 1
	mov	r14, rbp
.label_688:
	xor	eax, eax
	test	r15d, r15d
	js	.label_686
	lea	rsi, [rsp]
	mov	edi, r15d
	call	fstatfs
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_686
	test	r12b, r12b
	je	.label_689
	mov	edi, 0x10
	call	malloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_689
	mov	rax, qword ptr [r13 + 0x78]
	mov	qword ptr [rbp], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbp + 8], rax
	mov	rdi, r14
	mov	rsi, rbp
	call	hash_insert
	test	rax, rax
	je	.label_690
	cmp	rax, rbp
	je	.label_689
	call	abort
.label_690:
	mov	rdi, rbp
	call	free
.label_689:
	mov	rax, qword ptr [rsp]
.label_686:
	add	rsp, 0x78
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4077da
	.globl sub_4077da
	.type sub_4077da, @function
sub_4077da:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4077e0

	.globl dev_type_hash
	.type dev_type_hash, @function
dev_type_hash:
	mov	rax, qword ptr [rdi]
	xor	edx, edx
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	16
	#Procedure 0x4077ec
	.globl sub_4077ec
	.type sub_4077ec, @function
sub_4077ec:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4077f0

	.globl dev_type_compare
	.type dev_type_compare, @function
dev_type_compare:
	mov	rax, qword ptr [rdi]
	cmp	rax, qword ptr [rsi]
	sete	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x4077fa
	.globl sub_4077fa
	.type sub_4077fa, @function
sub_4077fa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407800

	.globl fts_compare_ino
	.type fts_compare_ino, @function
fts_compare_ino:
	mov	rax, qword ptr [rdi]
	mov	rax, qword ptr [rax + 0x80]
	mov	rcx, qword ptr [rsi]
	mov	rcx, qword ptr [rcx + 0x80]
	cmp	rcx, rax
	sbb	edx, edx
	and	edx, 1
	cmp	rax, rcx
	mov	eax, 0xffffffff
	cmovae	eax, edx
	ret	
	.section	.text
	.align	16
	#Procedure 0x407828
	.globl sub_407828
	.type sub_407828, @function
sub_407828:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407830

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_692
	cmp	r15, -2
	jb	.label_692
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_692
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_692:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x407886
	.globl sub_407886
	.type sub_407886, @function
sub_407886:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407890

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_694
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_693
	test	cl, cl
	jne	.label_693
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_693
.label_694:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_693
	call	__errno_location
	mov	dword ptr [rax], 0
.label_693:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4078f0

	.globl cycle_check_init
	.type cycle_check_init, @function
cycle_check_init:
	mov	qword ptr [rdi + 0x10], 0
	mov	dword ptr [rdi + 0x18], 0x95f616
	ret	
	.section	.text
	.align	16
	#Procedure 0x407900

	.globl cycle_check
	.type cycle_check, @function
cycle_check:
	cmp	dword ptr [rdi + 0x18], 0x95f616
	jne	.label_695
	mov	rcx, qword ptr [rdi + 0x10]
	test	rcx, rcx
	je	.label_696
	mov	rax, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdi]
	jne	.label_696
	mov	rdx, qword ptr [rsi]
	mov	al, 1
	cmp	rdx, qword ptr [rdi + 8]
	je	.label_697
.label_696:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rdi + 0x10], rdx
	test	rdx, rcx
	jne	.label_698
	mov	al, 1
	test	rdx, rdx
	je	.label_697
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rdi + 8], rax
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rdi], rax
.label_698:
	xor	eax, eax
.label_697:
	ret	
.label_695:
	push	rax
	mov	edi, OFFSET FLAT:label_699
	mov	esi, OFFSET FLAT:label_700
	mov	edx, 0x3c
	mov	ecx, OFFSET FLAT:label_701
	call	__assert_fail
	.section	.text
	.align	16
	#Procedure 0x407965
	.globl sub_407965
	.type sub_407965, @function
sub_407965:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407970

	.globl open_safer
	.type open_safer, @function
open_safer:
	sub	rsp, 0xd8
	test	al, al
	je	.label_702
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_702:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	xor	edx, edx
	test	sil, 0x40
	je	.label_703
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_705
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_704
.label_705:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_704:
	mov	edx, dword ptr [rax]
.label_703:
	xor	eax, eax
	call	open
	mov	edi, eax
	call	fd_safer
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x407a34
	.globl sub_407a34
	.type sub_407a34, @function
sub_407a34:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407a40

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_707
	cmp	byte ptr [rax], 0x43
	jne	.label_709
	cmp	byte ptr [rax + 1], 0
	je	.label_706
.label_709:
	mov	esi, OFFSET FLAT:label_708
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_707
.label_706:
	xor	ebx, ebx
.label_707:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x407a71
	.globl sub_407a71
	.type sub_407a71, @function
sub_407a71:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407a80
	.globl hash_get_n_buckets
	.type hash_get_n_buckets, @function
hash_get_n_buckets:

	mov	rax, qword ptr [rdi + 0x10]
	ret	
	.section	.text
	.align	16
	#Procedure 0x407a85
	.globl sub_407a85
	.type sub_407a85, @function
sub_407a85:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407a90
	.globl hash_get_n_buckets_used
	.type hash_get_n_buckets_used, @function
hash_get_n_buckets_used:

	mov	rax, qword ptr [rdi + 0x18]
	ret	
	.section	.text
	.align	16
	#Procedure 0x407a95
	.globl sub_407a95
	.type sub_407a95, @function
sub_407a95:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407aa0
	.globl hash_get_n_entries
	.type hash_get_n_entries, @function
hash_get_n_entries:

	mov	rax, qword ptr [rdi + 0x20]
	ret	
	.section	.text
	.align	16
	#Procedure 0x407aa5
	.globl sub_407aa5
	.type sub_407aa5, @function
sub_407aa5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407ab0
	.globl hash_get_max_bucket_length
	.type hash_get_max_bucket_length, @function
hash_get_max_bucket_length:

	mov	rcx, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 8]
	xor	eax, eax
	cmp	rcx, rdi
	jae	.label_712
	mov	rax, rcx
	not	rax
	add	rdi, rax
	shr	rdi, 4
	lea	rsi, [rdi + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	eax, eax
	test	rdi, rdi
	je	.label_711
	sub	rsi, r8
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_714:
	cmp	qword ptr [rcx], 0
	je	.label_715
	xor	edi, edi
	mov	rdx, rcx
	nop	dword ptr [rax + rax]
.label_716:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_716
	cmp	rdi, rax
	cmova	rax, rdi
.label_715:
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_713
	lea	rdx, [rcx + 0x10]
	xor	edi, edi
.label_717:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_717
	cmp	rdi, rax
	cmova	rax, rdi
.label_713:
	add	rcx, 0x20
	add	rsi, -2
	jne	.label_714
.label_711:
	test	r8, r8
	je	.label_712
	cmp	qword ptr [rcx], 0
	je	.label_712
	xor	edx, edx
	nop	word ptr [rax + rax]
.label_710:
	mov	rcx, qword ptr [rcx + 8]
	inc	rdx
	test	rcx, rcx
	jne	.label_710
	cmp	rdx, rax
	cmova	rax, rdx
.label_712:
	ret	
	.section	.text
	.align	16
	#Procedure 0x407b64
	.globl sub_407b64
	.type sub_407b64, @function
sub_407b64:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407b70
	.globl hash_table_ok
	.type hash_table_ok, @function
hash_table_ok:

	mov	rax, qword ptr [rdi]
	mov	r9, qword ptr [rdi + 8]
	xor	r10d, r10d
	cmp	rax, r9
	mov	ecx, 0
	jae	.label_719
	mov	rcx, rax
	not	rcx
	add	r9, rcx
	shr	r9, 4
	lea	rsi, [r9 + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	ecx, ecx
	test	r9, r9
	je	.label_720
	sub	rsi, r8
	xor	ecx, ecx
	xor	r10d, r10d
	nop	
.label_726:
	cmp	qword ptr [rax], 0
	je	.label_727
	mov	rdx, rax
	nop	dword ptr [rax]
.label_718:
	inc	rcx
	mov	rdx, qword ptr [rdx + 8]
	test	rdx, rdx
	jne	.label_718
	inc	r10
.label_727:
	cmp	qword ptr [rax + 0x10], 0
	je	.label_721
	lea	rdx, [rax + 0x10]
	nop	word ptr [rax + rax]
.label_724:
	inc	rcx
	mov	rdx, qword ptr [rdx + 8]
	test	rdx, rdx
	jne	.label_724
	inc	r10
.label_721:
	add	rax, 0x20
	add	rsi, -2
	jne	.label_726
	jmp	.label_728
.label_720:
	xor	r10d, r10d
.label_728:
	test	r8, r8
	je	.label_719
	cmp	qword ptr [rax], 0
	je	.label_719
	nop	dword ptr [rax]
.label_722:
	inc	rcx
	mov	rax, qword ptr [rax + 8]
	test	rax, rax
	jne	.label_722
	inc	r10
.label_719:
	cmp	r10, qword ptr [rdi + 0x18]
	jne	.label_723
	mov	al, 1
	cmp	rcx, qword ptr [rdi + 0x20]
	je	.label_725
.label_723:
	xor	eax, eax
.label_725:
	ret	
	.section	.text
	.align	16
	#Procedure 0x407c30
	.globl hash_print_statistics
	.type hash_print_statistics, @function
hash_print_statistics:

	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r15, rsi
	mov	rcx, qword ptr [rdi + 0x20]
	mov	r12, qword ptr [rdi + 0x10]
	mov	r14, qword ptr [rdi + 0x18]
	mov	rax, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 8]
	xor	ebx, ebx
	cmp	rax, rdi
	jae	.label_735
	mov	rdx, rax
	not	rdx
	add	rdi, rdx
	shr	rdi, 4
	lea	rsi, [rdi + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	ebx, ebx
	test	rdi, rdi
	je	.label_738
	sub	rsi, r8
	xor	ebx, ebx
	nop	dword ptr [rax]
.label_737:
	cmp	qword ptr [rax], 0
	je	.label_729
	xor	edi, edi
	mov	rdx, rax
	nop	dword ptr [rax + rax]
.label_733:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_733
	cmp	rdi, rbx
	cmova	rbx, rdi
.label_729:
	cmp	qword ptr [rax + 0x10], 0
	je	.label_731
	lea	rdx, [rax + 0x10]
	xor	edi, edi
.label_734:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_734
	cmp	rdi, rbx
	cmova	rbx, rdi
.label_731:
	add	rax, 0x20
	add	rsi, -2
	jne	.label_737
.label_738:
	test	r8, r8
	je	.label_735
	cmp	qword ptr [rax], 0
	je	.label_735
	xor	edx, edx
	nop	word ptr [rax + rax]
.label_730:
	mov	rax, qword ptr [rax + 8]
	inc	rdx
	test	rax, rax
	jne	.label_730
	cmp	rdx, rbx
	cmova	rbx, rdx
.label_735:
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_736
	xor	eax, eax
	mov	rdi, r15
	call	__fprintf_chk
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_732
	xor	eax, eax
	mov	rdi, r15
	mov	rcx, r12
	call	__fprintf_chk
	movq	xmm1, r14
	movdqa	xmm2, xmmword ptr [rip + label_740]
	punpckldq	xmm1, xmm2
	movapd	xmm3, xmmword ptr [rip + label_741]
	subpd	xmm1, xmm3
	pshufd	xmm0, xmm1, 0x4e
	addpd	xmm0, xmm1
	mulsd	xmm0, qword ptr [rip + label_742]
	movq	xmm1, r12
	punpckldq	xmm1, xmm2
	subpd	xmm1, xmm3
	pshufd	xmm2, xmm1, 0x4e
	addpd	xmm2, xmm1
	divsd	xmm0, xmm2
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_743
	mov	al, 1
	mov	rdi, r15
	mov	rcx, r14
	call	__fprintf_chk
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_739
	xor	eax, eax
	mov	rdi, r15
	mov	rcx, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
	.section	.text
	.align	16
	#Procedure 0x407d9f
	.globl sub_407d9f
	.type sub_407d9f, @function
sub_407d9f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x407da0

	.globl hash_lookup
	.type hash_lookup, @function
hash_lookup:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rsi
	mov	r14, rdi
	mov	rsi, qword ptr [r14 + 0x10]
	mov	rdi, r12
	call	qword ptr [r14 + 0x30]
	cmp	rax, qword ptr [r14 + 0x10]
	jae	.label_748
	mov	rbx, qword ptr [r14]
	shl	rax, 4
	mov	rsi, qword ptr [rbx + rax]
	xor	r15d, r15d
	test	rsi, rsi
	je	.label_745
	add	rbx, rax
	je	.label_745
	cmp	rsi, r12
	je	.label_747
	xor	r15d, r15d
	nop	
.label_746:
	mov	rdi, r12
	call	qword ptr [r14 + 0x38]
	test	al, al
	jne	.label_744
	mov	rbx, qword ptr [rbx + 8]
	test	rbx, rbx
	je	.label_745
	mov	rsi, qword ptr [rbx]
	cmp	rsi, r12
	jne	.label_746
.label_747:
	mov	r15, r12
	jmp	.label_745
.label_744:
	mov	r15, qword ptr [rbx]
.label_745:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_748:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x407e18
	.globl sub_407e18
	.type sub_407e18, @function
sub_407e18:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407e20
	.globl hash_get_first
	.type hash_get_first, @function
hash_get_first:

	xor	eax, eax
	cmp	qword ptr [rdi + 0x20], 0
	je	.label_749
	mov	rcx, qword ptr [rdi]
	mov	rdx, qword ptr [rdi + 8]
	jmp	.label_752
	.section	.text
	.align	16
	#Procedure 0x407e32
	.globl sub_407e32
	.type sub_407e32, @function
sub_407e32:

	nop	word ptr cs:[rax + rax]
.label_751:
	add	rcx, 0x10
.label_752:
	cmp	rcx, rdx
	jae	.label_750
	mov	rax, qword ptr [rcx]
	test	rax, rax
	je	.label_751
.label_749:
	ret	
.label_750:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x407e58
	.globl sub_407e58
	.type sub_407e58, @function
sub_407e58:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407e60
	.globl hash_get_next
	.type hash_get_next, @function
hash_get_next:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	rsi, qword ptr [r14 + 0x10]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	cmp	rax, qword ptr [r14 + 0x10]
	jae	.label_756
	mov	rcx, qword ptr [r14]
	shl	rax, 4
	lea	rdx, [rcx + rax]
	nop	word ptr cs:[rax + rax]
.label_757:
	cmp	qword ptr [rdx], rbx
	mov	rdx, qword ptr [rdx + 8]
	je	.label_755
	test	rdx, rdx
	jne	.label_757
	jmp	.label_753
.label_755:
	test	rdx, rdx
	je	.label_753
	mov	rax, qword ptr [rdx]
	jmp	.label_754
.label_753:
	mov	rdx, qword ptr [r14 + 8]
	lea	rcx, [rcx + rax + 0x10]
	nop	word ptr cs:[rax + rax]
.label_758:
	cmp	rcx, rdx
	mov	eax, 0
	jae	.label_754
	mov	rax, qword ptr [rcx]
	add	rcx, 0x10
	test	rax, rax
	je	.label_758
.label_754:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_756:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x407ee3
	.globl sub_407ee3
	.type sub_407ee3, @function
sub_407ee3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407ef0
	.globl hash_get_entries
	.type hash_get_entries, @function
hash_get_entries:

	mov	r9, qword ptr [rdi]
	mov	r8, qword ptr [rdi + 8]
	xor	eax, eax
	cmp	r9, r8
	jae	.label_759
	xor	eax, eax
.label_762:
	cmp	qword ptr [r9], 0
	je	.label_760
	test	r9, r9
	je	.label_760
	mov	r8, r9
	nop	
.label_761:
	cmp	rax, rdx
	jae	.label_759
	mov	rcx, qword ptr [r8]
	mov	qword ptr [rsi + rax*8], rcx
	inc	rax
	mov	r8, qword ptr [r8 + 8]
	test	r8, r8
	jne	.label_761
	mov	r8, qword ptr [rdi + 8]
.label_760:
	add	r9, 0x10
	cmp	r9, r8
	jb	.label_762
.label_759:
	ret	
	.section	.text
	.align	16
	#Procedure 0x407f36
	.globl sub_407f36
	.type sub_407f36, @function
sub_407f36:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407f40
	.globl hash_do_for_each
	.type hash_do_for_each, @function
hash_do_for_each:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	mov	r12, rdi
	mov	r13, qword ptr [r12]
	mov	rax, qword ptr [r12 + 8]
	xor	ebx, ebx
	cmp	r13, rax
	jae	.label_763
	xor	ebx, ebx
.label_767:
	mov	rdi, qword ptr [r13]
	test	rdi, rdi
	je	.label_765
	test	r13, r13
	je	.label_765
	mov	rsi, r14
	call	r15
	test	al, al
	je	.label_763
	mov	rbp, r13
	nop	word ptr cs:[rax + rax]
.label_764:
	mov	rbp, qword ptr [rbp + 8]
	test	rbp, rbp
	je	.label_766
	inc	rbx
	mov	rdi, qword ptr [rbp]
	mov	rsi, r14
	call	r15
	test	al, al
	jne	.label_764
	jmp	.label_763
	.section	.text
	.align	16
	#Procedure 0x407fac
	.globl sub_407fac
	.type sub_407fac, @function
sub_407fac:

	nop	dword ptr [rax]
.label_766:
	mov	rax, qword ptr [r12 + 8]
	inc	rbx
.label_765:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_767
.label_763:
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x407fd3
	.globl sub_407fd3
	.type sub_407fd3, @function
sub_407fd3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x407fe0
	.globl hash_string
	.type hash_string, @function
hash_string:

	mov	al, byte ptr [rdi]
	xor	edx, edx
	test	al, al
	je	.label_768
	inc	rdi
	xor	edx, edx
	nop	dword ptr [rax]
.label_769:
	mov	rcx, rdx
	shl	rcx, 5
	sub	rcx, rdx
	movzx	eax, al
	add	rax, rcx
	xor	edx, edx
	div	rsi
	movzx	eax, byte ptr [rdi]
	inc	rdi
	test	al, al
	jne	.label_769
.label_768:
	mov	rax, rdx
	ret	
	.section	.text
	.align	16
	#Procedure 0x408013
	.globl sub_408013
	.type sub_408013, @function
sub_408013:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408020
	.globl hash_reset_tuning
	.type hash_reset_tuning, @function
hash_reset_tuning:

	mov	eax, dword ptr [rip + label_770]
	mov	dword ptr [rdi + 0x10], eax
	movups	xmm0, xmmword ptr [rip + default_tuning]
	movups	xmmword ptr [rdi], xmm0
	ret	
	.section	.text
	.align	16
	#Procedure 0x408034
	.globl sub_408034
	.type sub_408034, @function
sub_408034:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408040

	.globl hash_initialize
	.type hash_initialize, @function
hash_initialize:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, r8
	mov	rbx, rsi
	mov	r12, rdi
	test	rdx, rdx
	mov	r13d, OFFSET FLAT:raw_hasher
	cmovne	r13, rdx
	test	rcx, rcx
	mov	ebp, OFFSET FLAT:raw_comparator
	cmovne	rbp, rcx
	mov	edi, 0x50
	call	malloc
	mov	r15, rax
	xor	eax, eax
	test	r15, r15
	je	.label_775
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_tuning
	cmove	rbx, rax
	mov	qword ptr [r15 + 0x28], rbx
	cmp	rbx, rax
	je	.label_772
	movss	xmm0, dword ptr [rbx + 8]
	ucomiss	xmm0, dword ptr [rip + label_777]
	jbe	.label_773
	movss	xmm1, dword ptr [rip + label_781]
	ucomiss	xmm1, xmm0
	jbe	.label_773
	movss	xmm1, dword ptr [rbx + 0xc]
	ucomiss	xmm1, dword ptr [rip + label_786]
	jbe	.label_773
	movss	xmm1, dword ptr [rbx]
	xorps	xmm2, xmm2
	ucomiss	xmm1, xmm2
	jb	.label_773
	addss	xmm1, dword ptr [rip + label_777]
	ucomiss	xmm0, xmm1
	jbe	.label_773
	movss	xmm0, dword ptr [rbx + 4]
	movss	xmm2, dword ptr [rip + label_782]
	ucomiss	xmm2, xmm0
	jb	.label_773
	ucomiss	xmm0, xmm1
	jbe	.label_773
.label_772:
	cmp	byte ptr [rbx + 0x10], 0
	jne	.label_778
	mov	eax, r12d
	and	eax, 1
	test	r12, r12
	js	.label_776
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, r12
	jmp	.label_779
.label_776:
	shr	r12, 1
	or	rax, r12
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rax
	addss	xmm0, xmm0
.label_779:
	divss	xmm0, dword ptr [rbx + 8]
	movss	xmm1, dword ptr [rip + label_784]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	r12, xmm0
	ucomiss	xmm0, xmm1
	cmovae	r12, rcx
	ucomiss	xmm0, dword ptr [rip + label_785]
	jae	.label_773
.label_778:
	cmp	r12, 0xa
	mov	ebx, 0xa
	cmovae	rbx, r12
	or	rbx, 1
	jmp	.label_780
	.section	.text
	.align	16
	#Procedure 0x40818e
	.globl sub_40818e
	.type sub_40818e, @function
sub_40818e:

	nop	
.label_783:
	add	rbx, 2
.label_780:
	cmp	rbx, -1
	je	.label_773
	cmp	rbx, 0xa
	mov	ecx, 3
	jb	.label_771
	mov	esi, 0xc
	mov	edi, 9
	mov	ecx, 3
	nop	dword ptr [rax + rax]
.label_774:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_771
	lea	rdi, [rdi + rsi + 4]
	add	rcx, 2
	add	rsi, 8
	cmp	rdi, rbx
	jb	.label_774
.label_771:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_783
	mov	rax, rbx
	shr	rax, 0x3c
	jne	.label_773
	mov	qword ptr [r15 + 0x10], rbx
	test	rbx, rbx
	je	.label_773
	mov	esi, 0x10
	mov	rdi, rbx
	call	rpl_calloc
	mov	qword ptr [r15], rax
	test	rax, rax
	je	.label_773
	shl	rbx, 4
	add	rax, rbx
	mov	qword ptr [r15 + 8], rax
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x18], xmm0
	mov	qword ptr [r15 + 0x30], r13
	mov	qword ptr [r15 + 0x38], rbp
	mov	qword ptr [r15 + 0x40], r14
	mov	qword ptr [r15 + 0x48], 0
	mov	rax, r15
	jmp	.label_775
.label_773:
	mov	rdi, r15
	call	free
	xor	eax, eax
.label_775:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x408258
	.globl sub_408258
	.type sub_408258, @function
sub_408258:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408260

	.globl raw_hasher
	.type raw_hasher, @function
raw_hasher:
	rol	rdi, 0x3d
	xor	edx, edx
	mov	rax, rdi
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	16
	#Procedure 0x408270

	.globl raw_comparator
	.type raw_comparator, @function
raw_comparator:
	cmp	rdi, rsi
	sete	al
	ret	
	.section	.text
	.align	16
	#Procedure 0x408277
	.globl sub_408277
	.type sub_408277, @function
sub_408277:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408280
	.globl hash_clear
	.type hash_clear, @function
hash_clear:

	push	r15
	push	r14
	push	rbx
	mov	r15, rdi
	mov	r14, qword ptr [r15]
	mov	rax, qword ptr [r15 + 8]
	jmp	.label_787
	.section	.text
	.align	16
	#Procedure 0x408291
	.globl sub_408291
	.type sub_408291, @function
sub_408291:

	nop	word ptr cs:[rax + rax]
.label_790:
	add	r14, 0x10
.label_787:
	cmp	r14, rax
	jae	.label_789
	cmp	qword ptr [r14], 0
	je	.label_790
	mov	rbx, qword ptr [r14 + 8]
	mov	rax, qword ptr [r15 + 0x40]
	test	rax, rax
	setne	cl
	test	rbx, rbx
	je	.label_791
	nop	word ptr cs:[rax + rax]
.label_793:
	test	cl, 1
	je	.label_792
	mov	rdi, qword ptr [rbx]
	call	rax
	mov	rax, qword ptr [r15 + 0x40]
.label_792:
	mov	qword ptr [rbx], 0
	mov	rdx, qword ptr [rbx + 8]
	mov	rcx, qword ptr [r15 + 0x48]
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [r15 + 0x48], rbx
	test	rax, rax
	setne	cl
	test	rdx, rdx
	mov	rbx, rdx
	jne	.label_793
.label_791:
	test	cl, cl
	je	.label_788
	mov	rdi, qword ptr [r14]
	call	rax
.label_788:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14], xmm0
	mov	rax, qword ptr [r15 + 8]
	jmp	.label_790
.label_789:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x18], xmm0
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	16
	#Procedure 0x408327
	.globl sub_408327
	.type sub_408327, @function
sub_408327:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408330

	.globl hash_free
	.type hash_free, @function
hash_free:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	cmp	qword ptr [r14 + 0x40], 0
	je	.label_803
	cmp	qword ptr [r14 + 0x20], 0
	je	.label_803
	mov	r15, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_795
	.section	.text
	.align	16
	#Procedure 0x40834f
	.globl sub_40834f
	.type sub_40834f, @function
sub_40834f:

	nop	
.label_797:
	add	r15, 0x10
.label_795:
	cmp	r15, rax
	jae	.label_803
	mov	rdi, qword ptr [r15]
	test	rdi, rdi
	je	.label_797
	test	r15, r15
	je	.label_797
	call	qword ptr [r14 + 0x40]
	mov	rbx, qword ptr [r15 + 8]
	jmp	.label_802
.label_800:
	mov	rdi, qword ptr [rbx]
	call	qword ptr [r14 + 0x40]
	mov	rbx, qword ptr [rbx + 8]
.label_802:
	test	rbx, rbx
	jne	.label_800
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_797
.label_803:
	mov	r15, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_801
	.section	.text
	.align	16
	#Procedure 0x40838f
	.globl sub_40838f
	.type sub_40838f, @function
sub_40838f:

	nop	
.label_794:
	add	r15, 0x10
.label_801:
	cmp	r15, rax
	jae	.label_798
	mov	rdi, qword ptr [r15 + 8]
	test	rdi, rdi
	je	.label_794
	nop	word ptr cs:[rax + rax]
.label_804:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_804
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_794
.label_798:
	mov	rdi, qword ptr [r14 + 0x48]
	test	rdi, rdi
	je	.label_796
.label_799:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_799
.label_796:
	mov	rdi, qword ptr [r14]
	call	free
	mov	rdi, r14
	pop	rbx
	pop	r14
	pop	r15
	jmp	free
	.section	.text
	.align	16
	#Procedure 0x4083f6
	.globl sub_4083f6
	.type sub_4083f6, @function
sub_4083f6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408400

	.globl hash_rehash
	.type hash_rehash, @function
hash_rehash:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x50
	mov	r14, rdi
	mov	rax, qword ptr [r14 + 0x28]
	cmp	byte ptr [rax + 0x10], 0
	jne	.label_805
	mov	ecx, esi
	and	ecx, 1
	test	rsi, rsi
	js	.label_814
	cvtsi2ss	xmm0, rsi
	jmp	.label_818
.label_814:
	shr	rsi, 1
	or	rcx, rsi
	cvtsi2ss	xmm0, rcx
	addss	xmm0, xmm0
.label_818:
	divss	xmm0, dword ptr [rax + 8]
	movss	xmm1, dword ptr [rip + label_784]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	ucomiss	xmm0, dword ptr [rip + label_785]
	jae	.label_813
.label_805:
	cmp	rsi, 0xa
	mov	ebx, 0xa
	cmovae	rbx, rsi
	or	rbx, 1
	jmp	.label_822
	.section	.text
	.align	16
	#Procedure 0x40848b
	.globl sub_40848b
	.type sub_40848b, @function
sub_40848b:

	nop	dword ptr [rax + rax]
.label_816:
	add	rbx, 2
.label_822:
	cmp	rbx, -1
	je	.label_813
	cmp	rbx, 0xa
	mov	ecx, 3
	jb	.label_806
	mov	esi, 0xc
	mov	edi, 9
	mov	ecx, 3
	nop	dword ptr [rax + rax]
.label_811:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_806
	lea	rdi, [rdi + rsi + 4]
	add	rcx, 2
	add	rsi, 8
	cmp	rdi, rbx
	jb	.label_811
.label_806:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_816
	lea	rax, [rbx - 1]
	movabs	rcx, 0xffffffffffffffe
	cmp	rax, rcx
	ja	.label_813
	mov	bpl, 1
	cmp	rbx, qword ptr [r14 + 0x10]
	je	.label_807
	mov	esi, 0x10
	mov	rdi, rbx
	call	rpl_calloc
	mov	qword ptr [rsp], rax
	test	rax, rax
	je	.label_813
	mov	qword ptr [rsp + 0x10], rbx
	shl	rbx, 4
	add	rax, rbx
	mov	qword ptr [rsp + 8], rax
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsp + 0x18], xmm0
	movups	xmm0, xmmword ptr [r14 + 0x28]
	movups	xmmword ptr [rsp + 0x28], xmm0
	movups	xmm0, xmmword ptr [r14 + 0x38]
	movups	xmmword ptr [rsp + 0x38], xmm0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rsp + 0x48], rax
	lea	rdi, [rsp]
	xor	edx, edx
	mov	rsi, r14
	call	transfer_entries
	test	al, al
	je	.label_820
	mov	rdi, qword ptr [r14]
	call	free
	movaps	xmm0, xmmword ptr [rsp]
	movups	xmmword ptr [r14], xmm0
	movaps	xmm0, xmmword ptr [rsp + 0x10]
	movups	xmmword ptr [r14 + 0x10], xmm0
	mov	rax, qword ptr [rsp + 0x48]
	mov	qword ptr [r14 + 0x48], rax
	jmp	.label_807
.label_820:
	mov	rax, qword ptr [rsp + 0x48]
	mov	qword ptr [r14 + 0x48], rax
	mov	r12, qword ptr [rsp]
	mov	r15, qword ptr [rsp + 8]
	jmp	.label_815
	.section	.text
	.align	16
	#Procedure 0x4085ae
	.globl sub_4085ae
	.type sub_4085ae, @function
sub_4085ae:

	nop	
.label_809:
	add	r12, 0x10
.label_815:
	cmp	r12, r15
	jae	.label_821
	cmp	qword ptr [r12], 0
	je	.label_809
	mov	rbp, qword ptr [r12 + 8]
	test	rbp, rbp
	je	.label_808
	mov	rsi, qword ptr [r14 + 0x10]
	nop	word ptr cs:[rax + rax]
.label_823:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_819
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_812
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_810
	.section	.text
	.align	16
	#Procedure 0x40861a
	.globl sub_40861a
	.type sub_40861a, @function
sub_40861a:

	nop	word ptr [rax + rax]
.label_812:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_810:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_823
.label_808:
	mov	qword ptr [r12 + 8], 0
	jmp	.label_809
.label_821:
	lea	rsi, [rsp]
	xor	edx, edx
	mov	rdi, r14
	call	transfer_entries
	test	al, al
	je	.label_817
	mov	rdi, qword ptr [rsp]
	call	free
.label_813:
	xor	ebp, ebp
.label_807:
	mov	eax, ebp
	add	rsp, 0x50
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_819:
	call	abort
.label_817:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x40868a
	.globl sub_40868a
	.type sub_40868a, @function
sub_40868a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408690

	.globl transfer_entries
	.type transfer_entries, @function
transfer_entries:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rsi
	mov	r14, rdi
	mov	r13, qword ptr [r15]
	mov	rax, qword ptr [r15 + 8]
	cmp	r13, rax
	jae	.label_835
	test	dl, dl
	je	.label_828
	nop	dword ptr [rax]
.label_829:
	cmp	qword ptr [r13], 0
	je	.label_824
	mov	rbp, qword ptr [r13 + 8]
	test	rbp, rbp
	je	.label_827
	mov	rsi, qword ptr [r14 + 0x10]
	nop	dword ptr [rax + rax]
.label_844:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_833
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_843
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_839
	.section	.text
	.align	16
	#Procedure 0x40871a
	.globl sub_40871a
	.type sub_40871a, @function
sub_40871a:

	nop	word ptr [rax + rax]
.label_843:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_839:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_844
	mov	rax, qword ptr [r15 + 8]
.label_827:
	mov	qword ptr [r13 + 8], 0
.label_824:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_829
	jmp	.label_835
	.section	.text
	.align	16
	#Procedure 0x408764
	.globl sub_408764
	.type sub_408764, @function
sub_408764:

	nop	word ptr cs:[rax + rax]
.label_828:
	mov	r12, qword ptr [r13]
	test	r12, r12
	je	.label_842
	mov	rbp, qword ptr [r13 + 8]
	test	rbp, rbp
	mov	rsi, qword ptr [r14 + 0x10]
	je	.label_841
	nop	word ptr [rax + rax]
.label_830:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_833
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_838
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_834
	.section	.text
	.align	16
	#Procedure 0x4087ca
	.globl sub_4087ca
	.type sub_4087ca, @function
sub_4087ca:

	nop	word ptr [rax + rax]
.label_838:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_834:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_830
	mov	r12, qword ptr [r13]
.label_841:
	mov	qword ptr [r13 + 8], 0
	mov	rdi, r12
	call	qword ptr [r14 + 0x30]
	mov	rbx, rax
	cmp	rbx, qword ptr [r14 + 0x10]
	jae	.label_826
	mov	rbp, qword ptr [r14]
	shl	rbx, 4
	cmp	qword ptr [rbp + rbx], 0
	je	.label_831
	mov	rax, qword ptr [r14 + 0x48]
	test	rax, rax
	je	.label_837
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [r14 + 0x48], rcx
	jmp	.label_840
	.section	.text
	.align	16
	#Procedure 0x408838
	.globl sub_408838
	.type sub_408838, @function
sub_408838:

	nop	dword ptr [rax + rax]
.label_831:
	add	rbp, rbx
	mov	qword ptr [rbp], r12
	inc	qword ptr [r14 + 0x18]
	jmp	.label_825
.label_837:
	mov	edi, 0x10
	call	malloc
	test	rax, rax
	je	.label_832
.label_840:
	mov	qword ptr [rax], r12
	mov	rcx, qword ptr [rbp + rbx + 8]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [rbp + rbx + 8], rax
.label_825:
	mov	qword ptr [r13], 0
	dec	qword ptr [r15 + 0x18]
	mov	rax, qword ptr [r15 + 8]
.label_842:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_828
.label_835:
	mov	al, 1
.label_836:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_832:
	xor	eax, eax
	jmp	.label_836
.label_833:
	call	abort
.label_826:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x4088a9
	.globl sub_4088a9
	.type sub_4088a9, @function
sub_4088a9:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x4088b0

	.globl hash_insert_if_absent
	.type hash_insert_if_absent, @function
hash_insert_if_absent:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rdx
	mov	r14, rsi
	mov	r13, rdi
	test	r14, r14
	je	.label_863
	mov	rsi, qword ptr [r13 + 0x10]
	mov	rdi, r14
	call	qword ptr [r13 + 0x30]
	mov	rbp, rax
	cmp	rbp, qword ptr [r13 + 0x10]
	jae	.label_863
	mov	rbx, qword ptr [r13]
	shl	rbp, 4
	lea	r12, [rbx + rbp]
	mov	rsi, qword ptr [rbx + rbp]
	test	rsi, rsi
	je	.label_846
	cmp	rsi, r14
	je	.label_873
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	test	al, al
	je	.label_847
	mov	rax, qword ptr [r12]
.label_845:
	test	rax, rax
	jne	.label_851
	jmp	.label_846
.label_873:
	mov	rax, r14
.label_851:
	xor	ebp, ebp
	test	r15, r15
	je	.label_854
	mov	qword ptr [r15], rax
	jmp	.label_854
.label_847:
	mov	rax, qword ptr [rbx + rbp + 8]
	test	rax, rax
	je	.label_846
	lea	rbp, [rbx + rbp + 8]
	nop	word ptr [rax + rax]
.label_870:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_866
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	mov	rbp, qword ptr [rbp]
	test	al, al
	jne	.label_868
	mov	rax, qword ptr [rbp + 8]
	add	rbp, 8
	test	rax, rax
	jne	.label_870
.label_846:
	mov	rcx, qword ptr [r13 + 0x10]
	mov	rax, qword ptr [r13 + 0x18]
	mov	edx, eax
	and	edx, 1
	test	rax, rax
	js	.label_871
	cvtsi2ss	xmm1, rax
	jmp	.label_875
.label_871:
	shr	rax, 1
	or	rdx, rax
	cvtsi2ss	xmm1, rdx
	addss	xmm1, xmm1
.label_875:
	mov	rax, qword ptr [r13 + 0x28]
	movss	xmm2, dword ptr [rax + 8]
	mov	edx, ecx
	and	edx, 1
	test	rcx, rcx
	js	.label_852
	cvtsi2ss	xmm0, rcx
	jmp	.label_860
.label_852:
	shr	rcx, 1
	or	rdx, rcx
	cvtsi2ss	xmm0, rdx
	addss	xmm0, xmm0
.label_860:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm1, xmm3
	jbe	.label_865
	mov	ecx, OFFSET FLAT:default_tuning
	cmp	rax, rcx
	je	.label_867
	ucomiss	xmm2, dword ptr [rip + label_777]
	jbe	.label_848
	movss	xmm3, dword ptr [rip + label_781]
	ucomiss	xmm3, xmm2
	jbe	.label_848
	movss	xmm3, dword ptr [rax + 0xc]
	ucomiss	xmm3, dword ptr [rip + label_786]
	jbe	.label_848
	movss	xmm3, dword ptr [rax]
	xorps	xmm4, xmm4
	ucomiss	xmm3, xmm4
	jb	.label_848
	addss	xmm3, dword ptr [rip + label_777]
	ucomiss	xmm2, xmm3
	jbe	.label_848
	movss	xmm4, dword ptr [rax + 4]
	movss	xmm5, dword ptr [rip + label_782]
	ucomiss	xmm5, xmm4
	jb	.label_848
	ucomiss	xmm4, xmm3
	ja	.label_859
.label_848:
	mov	qword ptr [r13 + 40], OFFSET FLAT:default_tuning
	mov	eax, OFFSET FLAT:default_tuning
	movss	xmm2, dword ptr [rip + label_861]
	jmp	.label_859
.label_867:
	mov	eax, OFFSET FLAT:default_tuning
.label_859:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm1, xmm3
	jbe	.label_865
	cmp	byte ptr [rax + 0x10], 0
	mulss	xmm0, dword ptr [rax + 0xc]
	jne	.label_869
	mulss	xmm0, xmm2
.label_869:
	mov	ebp, 0xffffffff
	ucomiss	xmm0, dword ptr [rip + label_785]
	jae	.label_854
	movss	xmm1, dword ptr [rip + label_784]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	mov	rdi, r13
	call	hash_rehash
	test	al, al
	je	.label_854
	mov	rsi, qword ptr [r13 + 0x10]
	mov	rdi, r14
	call	qword ptr [r13 + 0x30]
	mov	rbp, rax
	cmp	rbp, qword ptr [r13 + 0x10]
	jae	.label_863
	mov	rbx, qword ptr [r13]
	shl	rbp, 4
	lea	r12, [rbx + rbp]
	mov	rsi, qword ptr [rbx + rbp]
	test	rsi, rsi
	je	.label_865
	cmp	rsi, r14
	mov	rax, r14
	je	.label_849
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	test	al, al
	je	.label_872
	mov	rax, qword ptr [r12]
.label_849:
	test	rax, rax
	jne	.label_874
.label_865:
	cmp	qword ptr [r12], 0
	je	.label_858
	mov	rax, qword ptr [r13 + 0x48]
	test	rax, rax
	je	.label_850
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [r13 + 0x48], rcx
	jmp	.label_853
.label_858:
	mov	qword ptr [r12], r14
	movdqu	xmm0, xmmword ptr [r13 + 0x18]
	paddq	xmm0, xmmword ptr [rip + label_856]
	movdqu	xmmword ptr [r13 + 0x18], xmm0
	jmp	.label_857
.label_850:
	mov	edi, 0x10
	call	malloc
	mov	ebp, 0xffffffff
	test	rax, rax
	je	.label_854
.label_853:
	mov	qword ptr [rax], r14
	mov	rcx, qword ptr [r12 + 8]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [r12 + 8], rax
	inc	qword ptr [r13 + 0x20]
.label_857:
	mov	ebp, 1
.label_854:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_866:
	mov	rax, r14
	jmp	.label_845
.label_868:
	mov	rax, qword ptr [rbp]
	jmp	.label_845
.label_872:
	mov	rax, qword ptr [rbx + rbp + 8]
	test	rax, rax
	je	.label_865
	lea	rbp, [rbx + rbp + 8]
.label_864:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_855
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	mov	rbp, qword ptr [rbp]
	test	al, al
	jne	.label_862
	mov	rax, qword ptr [rbp + 8]
	add	rbp, 8
	test	rax, rax
	jne	.label_864
	jmp	.label_865
.label_855:
	mov	rax, r14
	jmp	.label_849
.label_862:
	mov	rax, qword ptr [rbp]
	jmp	.label_849
.label_863:
	call	abort
.label_874:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x408be1
	.globl sub_408be1
	.type sub_408be1, @function
sub_408be1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408bf0

	.globl hash_insert
	.type hash_insert, @function
hash_insert:
	push	rbx
	sub	rsp, 0x10
	mov	rbx, rsi
	lea	rdx, [rsp + 8]
	call	hash_insert_if_absent
	mov	ecx, eax
	xor	eax, eax
	cmp	ecx, -1
	je	.label_876
	test	ecx, ecx
	cmove	rbx, qword ptr [rsp + 8]
	mov	rax, rbx
.label_876:
	add	rsp, 0x10
	pop	rbx
	ret	
	.section	.text
	.align	16
	#Procedure 0x408c1c
	.globl sub_408c1c
	.type sub_408c1c, @function
sub_408c1c:

	nop	dword ptr [rax]
	.section	.text
	.align	16
	#Procedure 0x408c20

	.globl hash_delete
	.type hash_delete, @function
hash_delete:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rsi
	mov	r15, rdi
	mov	rsi, qword ptr [r15 + 0x10]
	mov	rdi, r14
	call	qword ptr [r15 + 0x30]
	mov	rbx, rax
	cmp	rbx, qword ptr [r15 + 0x10]
	jae	.label_888
	mov	rbp, qword ptr [r15]
	shl	rbx, 4
	mov	rsi, qword ptr [rbp + rbx]
	xor	r12d, r12d
	test	rsi, rsi
	je	.label_880
	lea	r13, [rbp + rbx]
	cmp	rsi, r14
	je	.label_894
	mov	rdi, r14
	call	qword ptr [r15 + 0x38]
	test	al, al
	je	.label_895
	mov	r14, qword ptr [r13]
.label_894:
	mov	rax, qword ptr [rbp + rbx + 8]
	test	rax, rax
	je	.label_887
	movups	xmm0, xmmword ptr [rax]
	movups	xmmword ptr [r13], xmm0
	mov	qword ptr [rax], 0
	mov	rcx, qword ptr [r15 + 0x48]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [r15 + 0x48], rax
	jmp	.label_878
.label_895:
	mov	rax, qword ptr [rbp + rbx + 8]
	xor	r12d, r12d
	test	rax, rax
	je	.label_880
	lea	rbx, [rbp + rbx + 8]
	xor	r12d, r12d
	nop	word ptr [rax + rax]
.label_892:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_889
	mov	rdi, r14
	call	qword ptr [r15 + 0x38]
	mov	rcx, qword ptr [rbx]
	test	al, al
	jne	.label_891
	mov	rax, qword ptr [rcx + 8]
	add	rcx, 8
	test	rax, rax
	mov	rbx, rcx
	jne	.label_892
	jmp	.label_880
.label_887:
	mov	qword ptr [r13], 0
	jmp	.label_878
.label_889:
	mov	rcx, rax
	jmp	.label_897
.label_891:
	mov	r14, qword ptr [rcx]
.label_897:
	mov	rax, qword ptr [rcx + 8]
	mov	qword ptr [rbx], rax
	mov	qword ptr [rcx], 0
	mov	rax, qword ptr [r15 + 0x48]
	mov	qword ptr [rcx + 8], rax
	mov	qword ptr [r15 + 0x48], rcx
.label_878:
	xor	r12d, r12d
	test	r14, r14
	je	.label_880
	dec	qword ptr [r15 + 0x20]
	cmp	qword ptr [r13], 0
	jne	.label_883
	mov	rax, qword ptr [r15 + 0x18]
	dec	rax
	mov	qword ptr [r15 + 0x18], rax
	mov	ecx, eax
	and	ecx, 1
	test	rax, rax
	js	.label_885
	cvtsi2ss	xmm1, rax
	jmp	.label_890
.label_885:
	shr	rax, 1
	or	rcx, rax
	cvtsi2ss	xmm1, rcx
	addss	xmm1, xmm1
.label_890:
	mov	rcx, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x28]
	movss	xmm2, dword ptr [rax]
	mov	edx, ecx
	and	edx, 1
	test	rcx, rcx
	js	.label_893
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rcx
	jmp	.label_896
.label_893:
	shr	rcx, 1
	or	rdx, rcx
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rdx
	addss	xmm0, xmm0
.label_896:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm3, xmm1
	jbe	.label_883
	mov	ecx, OFFSET FLAT:default_tuning
	cmp	rax, rcx
	je	.label_881
	movss	xmm3, dword ptr [rax + 8]
	ucomiss	xmm3, dword ptr [rip + label_777]
	jbe	.label_884
	movss	xmm4, dword ptr [rip + label_781]
	ucomiss	xmm4, xmm3
	jbe	.label_884
	xorps	xmm4, xmm4
	ucomiss	xmm2, xmm4
	jb	.label_884
	movss	xmm4, dword ptr [rax + 0xc]
	ucomiss	xmm4, dword ptr [rip + label_786]
	jbe	.label_884
	movss	xmm4, dword ptr [rip + label_777]
	addss	xmm4, xmm2
	ucomiss	xmm3, xmm4
	jbe	.label_884
	movss	xmm3, dword ptr [rax + 4]
	movss	xmm5, dword ptr [rip + label_782]
	ucomiss	xmm5, xmm3
	jb	.label_884
	ucomiss	xmm3, xmm4
	ja	.label_877
.label_884:
	mov	qword ptr [r15 + 40], OFFSET FLAT:default_tuning
	mov	eax, OFFSET FLAT:default_tuning
	xorps	xmm2, xmm2
	jmp	.label_877
.label_881:
	mov	eax, OFFSET FLAT:default_tuning
.label_877:
	mulss	xmm2, xmm0
	ucomiss	xmm2, xmm1
	jbe	.label_883
	mulss	xmm0, dword ptr [rax + 4]
	cmp	byte ptr [rax + 0x10], 0
	jne	.label_882
	mulss	xmm0, dword ptr [rax + 8]
.label_882:
	movss	xmm1, dword ptr [rip + label_784]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	mov	rdi, r15
	call	hash_rehash
	test	al, al
	jne	.label_883
	mov	rdi, qword ptr [r15 + 0x48]
	test	rdi, rdi
	je	.label_886
	nop	word ptr cs:[rax + rax]
.label_879:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_879
.label_886:
	mov	qword ptr [r15 + 0x48], 0
.label_883:
	mov	r12, r14
.label_880:
	mov	rax, r12
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_888:
	call	abort
	.section	.text
	.align	16
	#Procedure 0x408eb3
	.globl sub_408eb3
	.type sub_408eb3, @function
sub_408eb3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408ec0

	.globl i_ring_init
	.type i_ring_init, @function
i_ring_init:
	mov	byte ptr [rdi + 0x1c], 1
	mov	dword ptr [rdi + 0x14], 0
	mov	dword ptr [rdi + 0x18], 0
	movd	xmm0, esi
	pshufd	xmm0, xmm0, 0
	movdqu	xmmword ptr [rdi], xmm0
	mov	dword ptr [rdi + 0x10], esi
	ret	
	.section	.text
	.align	16
	#Procedure 0x408ee3
	.globl sub_408ee3
	.type sub_408ee3, @function
sub_408ee3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408ef0

	.globl i_ring_empty
	.type i_ring_empty, @function
i_ring_empty:
	mov	al, byte ptr [rdi + 0x1c]
	ret	
	.section	.text
	.align	16
	#Procedure 0x408ef4
	.globl sub_408ef4
	.type sub_408ef4, @function
sub_408ef4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408f00

	.globl i_ring_push
	.type i_ring_push, @function
i_ring_push:
	movzx	ecx, byte ptr [rdi + 0x1c]
	xor	ecx, 1
	add	ecx, dword ptr [rdi + 0x14]
	mov	edx, ecx
	and	edx, 3
	mov	eax, dword ptr [rdi + rdx*4]
	mov	dword ptr [rdi + rdx*4], esi
	mov	dword ptr [rdi + 0x14], edx
	cmp	edx, dword ptr [rdi + 0x18]
	jne	.label_898
	mov	dl, byte ptr [rdi + 0x1c]
	xor	dl, 1
	movzx	edx, dl
	add	edx, ecx
	and	edx, 3
	mov	dword ptr [rdi + 0x18], edx
.label_898:
	mov	byte ptr [rdi + 0x1c], 0
	ret	
	.section	.text
	.align	16
	#Procedure 0x408f33
	.globl sub_408f33
	.type sub_408f33, @function
sub_408f33:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408f40

	.globl i_ring_pop
	.type i_ring_pop, @function
i_ring_pop:
	cmp	byte ptr [rdi + 0x1c], 0
	jne	.label_899
	mov	ecx, dword ptr [rdi + 0x10]
	mov	edx, dword ptr [rdi + 0x14]
	mov	eax, dword ptr [rdi + rdx*4]
	mov	dword ptr [rdi + rdx*4], ecx
	mov	ecx, dword ptr [rdi + 0x14]
	cmp	ecx, dword ptr [rdi + 0x18]
	jne	.label_900
	mov	byte ptr [rdi + 0x1c], 1
	ret	
.label_900:
	add	ecx, 3
	and	ecx, 3
	mov	dword ptr [rdi + 0x14], ecx
	ret	
.label_899:
	push	rax
	call	abort
	.section	.text
	.align	16
	#Procedure 0x408f6f
	.globl sub_408f6f
	.type sub_408f6f, @function
sub_408f6f:

	nop	
	.section	.text
	.align	16
	#Procedure 0x408f70

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_76
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_901
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	16
	#Procedure 0x408f95
	.globl sub_408f95
	.type sub_408f95, @function
sub_408f95:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x408fa0

	.globl openat_safer
	.type openat_safer, @function
openat_safer:
	sub	rsp, 0xd8
	test	al, al
	je	.label_902
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_902:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	xor	ecx, ecx
	test	dl, 0x40
	je	.label_903
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x18
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_904
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_905
.label_904:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_905:
	mov	ecx, dword ptr [rax]
.label_903:
	xor	eax, eax
	call	openat
	mov	edi, eax
	call	fd_safer
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	16
	#Procedure 0x40905e
	.globl sub_40905e
	.type sub_40905e, @function
sub_40905e:

	nop	
	.section	.text
	.align	16
	#Procedure 0x409060

	.globl opendirat
	.type opendirat, @function
opendirat:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rcx
	or	edx, 0x90900
	xor	ebx, ebx
	xor	eax, eax
	call	openat_safer
	mov	ebp, eax
	test	ebp, ebp
	js	.label_907
	mov	edi, ebp
	call	fdopendir
	mov	rbx, rax
	test	rbx, rbx
	je	.label_906
	mov	dword ptr [r14], ebp
	jmp	.label_907
.label_906:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	xor	ebx, ebx
.label_907:
	mov	rax, rbx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4090af
	.globl sub_4090af
	.type sub_4090af, @function
sub_4090af:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4090b0

	.globl fd_safer
	.type fd_safer, @function
fd_safer:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebx, edi
	cmp	ebx, 2
	ja	.label_908
	mov	edi, ebx
	call	dup_safer
	mov	r14d, eax
	call	__errno_location
	mov	rbp, rax
	mov	r15d, dword ptr [rbp]
	mov	edi, ebx
	call	close
	mov	dword ptr [rbp], r15d
	mov	eax, r14d
	jmp	.label_909
.label_908:
	mov	eax, ebx
.label_909:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4090f1
	.globl sub_4090f1
	.type sub_4090f1, @function
sub_4090f1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409100

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_910
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_912
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_910
.label_912:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_910
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_911
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_911:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_910:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	16
	#Procedure 0x409174
	.globl sub_409174
	.type sub_409174, @function
sub_409174:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409180

	.globl rpl_fcntl
	.type rpl_fcntl, @function
rpl_fcntl:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0xd0
	mov	ebx, edi
	test	al, al
	je	.label_913
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_913:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xf0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	cmp	esi, 0xb
	ja	.label_920
	mov	eax, 0xa0a
	bt	eax, esi
	jb	.label_916
	mov	eax, 0x514
	bt	eax, esi
	jb	.label_917
	test	esi, esi
	jne	.label_920
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_921
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_922
.label_920:
	lea	eax, [rsi - 0x400]
	cmp	eax, 8
	ja	.label_923
	mov	ecx, 0x85
	bt	ecx, eax
	jb	.label_917
	mov	ecx, 0x102
	bt	ecx, eax
	jae	.label_927
.label_916:
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_918
.label_917:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_931
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_932
.label_931:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_932:
	mov	edx, dword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
.label_933:
	call	fcntl
.label_918:
	mov	ebp, eax
.label_915:
	mov	eax, ebp
	add	rsp, 0xd0
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_927:
	cmp	eax, 6
	jne	.label_923
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_925
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_914
.label_923:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_926
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_929
.label_921:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_922:
	mov	edx, dword ptr [rax]
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	jmp	.label_933
.label_925:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_914:
	mov	r14d, dword ptr [rax]
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0
	js	.label_919
	mov	esi, 0x406
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	jns	.label_924
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_924
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	js	.label_915
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0xffffffff
	mov	al, 1
	jmp	.label_928
.label_924:
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  1
	jmp	.label_915
.label_926:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_929:
	mov	rdx, qword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_918
.label_919:
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  -1
	sete	al
.label_928:
	test	al, al
	je	.label_915
	test	ebp, ebp
	js	.label_915
	mov	esi, 1
	xor	eax, eax
	mov	edi, ebp
	call	fcntl
	mov	ecx, eax
	test	ecx, ecx
	js	.label_930
	or	ecx, 1
	mov	esi, 2
	xor	eax, eax
	mov	edi, ebp
	mov	edx, ecx
	call	fcntl
	cmp	eax, -1
	jne	.label_915
.label_930:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	mov	ebp, 0xffffffff
	jmp	.label_915
	.section	.text
	.align	16
	#Procedure 0x409411
	.globl sub_409411
	.type sub_409411, @function
sub_409411:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409420

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_934
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_934
	test	byte ptr [rbx + 1], 1
	je	.label_934
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_934:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	16
	#Procedure 0x409453
	.globl sub_409453
	.type sub_409453, @function
sub_409453:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409460

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_935
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_935
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_936
.label_935:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_936:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_937
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_937:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	16
	#Procedure 0x4094ce
	.globl sub_4094ce
	.type sub_4094ce, @function
sub_4094ce:

	nop	
	.section	.text
	.align	16
	#Procedure 0x4094d0

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	16
	#Procedure 0x4094e7
	.globl sub_4094e7
	.type sub_4094e7, @function
sub_4094e7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	16
	#Procedure 0x4094f0

	.globl dup_safer
	.type dup_safer, @function
dup_safer:
	xor	esi, esi
	mov	edx, 3
	xor	eax, eax
	jmp	rpl_fcntl
	.section	.text
	.align	16
	#Procedure 0x4094fe
	.globl sub_4094fe
	.type sub_4094fe, @function
sub_4094fe:

	nop	
	.section	.text
	.align	16
	#Procedure 0x409565
	.globl sub_409565
	.type sub_409565, @function
sub_409565:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409572
	.globl sub_409572
	.type sub_409572, @function
sub_409572:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	16
	#Procedure 0x409596
	.globl sub_409596
	.type sub_409596, @function
sub_409596:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 16
	.label_1094:
	.section .rodata
	.align 32
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_777:
	.long 0x3dcccccd
label_781:
	.long 0x3f666666
label_786:
	.long 0x3f8ccccd
label_782:
	.long 0x3f800000
label_784:
	.long 0x5f000000
label_785:
	.long 0x5f800000
label_861:
	.long 0x3f4ccccd
label_36:
	.quad .label_1018
	.quad .label_1019
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1020
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1022
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_30
	.quad .label_1023
	.quad .label_30
	.quad .label_30
	.quad .label_1024
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1021
	.quad .label_1025
	.quad .label_1021
	.quad .label_1021
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_30
	.quad .label_53
	.quad .label_1026
	.quad .label_1027
label_64:
	.quad .label_1037
	.quad .label_34
	.quad .label_1038
	.quad .label_34
	.quad .label_37
	.quad .label_1039
	.quad .label_34
	.quad .label_34
	.quad .label_1040
	.quad .label_34
	.quad .label_34
	.quad .label_1041
	.globl long_options
	.type long_options, @object
long_options:
	.quad label_1074
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 99
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1072
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1057
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_952
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_959
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1078
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1079
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1081
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1084
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1092
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_21:
	.asciz "Try '%s --help' for more information.\n"
label_25:
	.asciz "Usage: %s [OPTION]... MODE[,MODE]... FILE...\n  or:  %s [OPTION]... OCTAL-MODE FILE...\n  or:  %s [OPTION]... --reference=RFILE FILE...\n"
label_17:
	.asciz "Change the mode of each FILE to MODE.\nWith --reference, change the mode of each FILE to that of RFILE.\n\n"
label_14:
	.asciz "  -c, --changes          like verbose but report only when a change is made\n  -f, --silent, --quiet  suppress most error messages\n  -v, --verbose          output a diagnostic for every file processed\n"
label_18:
	.asciz "      --no-preserve-root  do not treat '/' specially (the default)\n      --preserve-root    fail to operate recursively on '/'\n"
label_19:
	.asciz "      --reference=RFILE  use RFILE's mode instead of MODE values\n"
label_20:
	.asciz "  -R, --recursive        change files and directories recursively\n"
label_28:
	.asciz "      --help     display this help and exit\n"
label_13:
	.asciz "      --version  output version information and exit\n"
label_23:
	.asciz "\nEach MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.\n"
label_11:
	.asciz "chmod"
label_76:
	.byte 0
label_79:
	.asciz "coreutils"
label_80:
	.asciz "/usr/local/share/locale"
label_104:
	.asciz "Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::0::1::2::3::4::5::6::7::"
label_22:
	.asciz "GNU coreutils"
label_32:
	.asciz "David MacKenzie"
label_33:
	.asciz "Jim Meyering"
label_67:
	.asciz "cannot combine mode and --reference options"
label_103:
	.asciz "missing operand"
label_50:
	.asciz "missing operand after %s"
label_85:
	.asciz "failed to get attributes of %s"
label_59:
	.asciz "invalid mode: %s"
label_31:
	.asciz "/"
label_24:
	.asciz "\n%s online help: <%s>\n"
label_16:
	.asciz "https://www.gnu.org/software/coreutils/"
label_10:
	.asciz "en_"
label_26:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_29:
	.asciz "Full documentation <%s%s>\n"
label_27:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_12:
	.asciz " invocation"
label_1074:
	.asciz "changes"
label_1072:
	.asciz "recursive"
label_1057:
	.asciz "no-preserve-root"
label_952:
	.asciz "preserve-root"
label_959:
	.asciz "quiet"
label_1078:
	.asciz "reference"
label_1079:
	.asciz "silent"
label_1081:
	.asciz "verbose"
label_1084:
	.asciz "help"
label_1092:
	.asciz "version"
label_94:
	.asciz "fts_read failed"
label_57:
	.asciz "fts_close failed"
label_93:
	.asciz "cannot access %s"
label_78:
	.asciz "%s"
label_54:
	.asciz "cannot read directory %s"
label_61:
	.asciz "cannot operate on dangling symlink %s"
label_70:
	.asciz "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n"
label_86:
	.asciz "it is dangerous to operate recursively on %s"
label_91:
	.asciz "it is dangerous to operate recursively on %s (same as %s)"
label_102:
	.asciz "use --no-preserve-root to override this failsafe"
label_35:
	.asciz "changing permissions of %s"
label_63:
	.asciz "%s: new permissions are %s, not %s"
label_56:
	.asciz "getting new attributes of %s"
label_98:
	.asciz "neither symbolic link %s nor referent has been changed\n"
label_95:
	.asciz "mode of %s changed from %04lo (%s) to %04lo (%s)\n"
label_38:
	.asciz "failed to change mode of %s from %04lo (%s) to %04lo (%s)\n"
label_107:
	.asciz "mode of %s retained as %04lo (%s)\n"
label_963:
	.asciz "8.31"
label_111:
	.asciz "write error"
label_112:
	.asciz "%s: %s"
label_172:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_168:
	.asciz "/.libs/"
label_170:
	.asciz "lt-"
label_997:
	.asciz "literal"
label_998:
	.asciz "shell"
label_999:
	.asciz "shell-always"
label_1000:
	.asciz "shell-escape"
label_1001:
	.asciz "shell-escape-always"
label_1002:
	.asciz "c"
label_1003:
	.asciz "c-maybe"
label_1004:
	.asciz "escape"
label_1005:
	.asciz "locale"
label_1006:
	.asciz "clocale"
label_258:
	.byte 34
	.byte 0
label_288:
	.byte 96
	.byte 0
label_189:
	.asciz "'"
label_330:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_331:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_334:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_335:
	.byte 161
	.byte 175
	.byte 0
label_352:
	.asciz "%s (%s) %s\n"
label_341:
	.asciz "%s %s\n"
label_345:
	.asciz "(C)"
label_342:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_343:
	.asciz "Written by %s.\n"
label_337:
	.asciz "Written by %s and %s.\n"
label_353:
	.asciz "Written by %s, %s, and %s.\n"
label_350:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_349:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_351:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_354:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_344:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_338:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_355:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_371:
	.asciz "\nReport bugs to: %s\n"
label_372:
	.asciz "bug-coreutils@gnu.org"
label_374:
	.asciz "%s home page: <%s>\n"
label_373:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_406:
	.asciz "memory exhausted"
label_409:
	.asciz "errno != EINVAL"
label_410:
	.asciz "lib/xfts.c"
label_411:
	.asciz "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))"
label_438:
	.asciz "."
label_544:
	.asciz ".."
label_699:
	.asciz "state->magic == 9827862"
label_700:
	.asciz "lib/cycle-check.c"
label_701:
	.asciz "_Bool cycle_check(struct cycle_check_state *, const struct stat *)"
label_708:
	.asciz "POSIX"
label_736:
	.asciz "# entries:         %lu\n"
label_732:
	.asciz "# buckets:         %lu\n"
label_743:
	.asciz "# buckets used:    %lu (%.2f%%)\n"
label_739:
	.asciz "max bucket length: %lu\n"
label_901:
	.asciz "ASCII"
label_155:
	.quad .label_979
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_980
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_981
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_982
label_147:
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_1064
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_1065
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_1066
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_143
	.quad .label_1067
label_154:
	.quad .label_140
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_139
	.quad .label_944
	.quad .label_945
	.quad .label_946
	.quad .label_139
	.quad .label_139
	.quad .label_947
	.quad .label_948
label_137:
	.quad .label_957
	.quad sub_402a3c
	.quad .label_957
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_134
	.quad .label_957
label_283:
	.quad .label_1047
	.quad .label_1048
	.quad .label_1049
	.quad .label_1050
	.quad .label_1051
	.quad .label_1052
	.quad .label_1053
	.quad .label_197
	.quad .label_1054
	.quad .label_1054
	.quad .label_1055
label_298:
	.quad .label_985
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_230
	.quad .label_986
	.quad .label_987
	.quad .label_215
	.quad .label_988
	.quad .label_989
	.quad .label_990
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_295
	.quad .label_175
	.quad .label_991
	.quad .label_991
	.quad .label_992
	.quad .label_991
	.quad .label_176
	.quad .label_991
	.quad .label_993
	.quad .label_991
	.quad .label_991
	.quad .label_991
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_991
	.quad .label_991
	.quad .label_991
	.quad .label_991
	.quad .label_994
	.quad .label_295
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_991
	.quad .label_995
	.quad .label_176
	.quad .label_991
	.quad .label_176
	.quad .label_991
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_176
	.quad .label_996
	.quad .label_991
	.quad .label_996
	.quad .label_992
	.quad label_997
	.quad label_998
	.quad label_999
	.quad label_1000
	.quad label_1001
	.quad label_1002
	.quad label_1003
	.quad label_1004
	.quad label_1005
	.quad label_1006
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_348:
	.quad .label_967
	.quad .label_968
	.quad .label_969
	.quad .label_970
	.quad .label_971
	.quad .label_972
	.quad .label_973
	.quad .label_974
	.quad .label_975
	.quad .label_976
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_740:
	.byte 0
	.byte 0
	.byte 48
	.byte 67
	.byte 0
	.byte 0
	.byte 48
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_741:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 67
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 69
label_856:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
label_611:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 64
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 96
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 160
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 192
	.byte 0
	.byte 0
label_742:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.ascii "Y@"
	.globl default_tuning
	.type default_tuning, @object
default_tuning:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 63
	.byte 205
	.byte 204
	.byte 76
	.byte 63
	.byte 244
	.byte 253
	.byte 180
	.byte 63
label_770:
	.long 0x0
	.label_1095:
	.section .data
	.align 8
.label_938:
	.quad 0
	.section .data
	.align 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl verbosity
	.type verbosity, @object
verbosity:
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_963
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_307:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.section .bss
	.align 32
	.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_2:
	.byte 0
	.globl diagnose_surprises
	.type diagnose_surprises, @object
diagnose_surprises:
	.byte 0x0
	.globl force_silent
	.type force_silent, @object
force_silent:
	.byte 0x0
	.globl recurse
	.type recurse, @object
recurse:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl change
	.type change, @object
change:
	.quad 0x0
	.globl umask_value
	.type umask_value, @object
umask_value:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl main.dev_ino_buf
	.type main.dev_ino_buf, @object
main.dev_ino_buf:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl root_dev_ino
	.type root_dev_ino, @object
root_dev_ino:
	.quad 0x0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.quad 0x0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_321:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_320:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_319:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec
	.type rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, @object
rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: