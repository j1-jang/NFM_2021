	.section	.text
	.align	32
	#Procedure 0x401a09
	.globl sub_401a09
	.type sub_401a09, @function
sub_401a09:

	hlt	
	.section	.text
	.align	32
	#Procedure 0x401a0a
	.globl sub_401a0a
	.type sub_401a0a, @function
sub_401a0a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401a42
	.globl sub_401a42
	.type sub_401a42, @function
sub_401a42:

	nop	dword ptr [rax]
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401a8a
	.globl sub_401a8a
	.type sub_401a8a, @function
sub_401a8a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401aac
	.globl sub_401aac
	.type sub_401aac, @function
sub_401aac:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401abd
	.globl sub_401abd
	.type sub_401abd, @function
sub_401abd:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x401ad6
	.globl sub_401ad6
	.type sub_401ad6, @function
sub_401ad6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401ae0

	.globl usage
	.type usage, @function
usage:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, edi
	test	ebp, ebp
	jne	.label_23
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_25
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_20
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_18
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_21
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_32
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_22
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_26
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_27
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_28
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_9
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_29
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_30
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	rdx, qword ptr [rip + program_name]
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rcx
	mov	rcx, rdx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_10
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_19
	mov	ecx, OFFSET FLAT:label_11
	xor	eax, eax
	call	__printf_chk
	mov	edi, 5
	xor	esi, esi
	call	setlocale
	test	rax, rax
	je	.label_15
	mov	esi, OFFSET FLAT:label_13
	mov	edx, 3
	mov	rdi, rax
	call	strncmp
	test	eax, eax
	je	.label_15
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_14
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	call	fputs_unlocked
.label_15:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_31
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_11
	mov	ecx, OFFSET FLAT:label_12
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_24
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_12
	mov	ecx, OFFSET FLAT:label_17
	xor	eax, eax
	call	__printf_chk
	mov	edi, ebp
	call	exit
.label_23:
	mov	rbx, qword ptr [rip + stderr]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_16
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [rip + program_name]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, rbx
	call	__fprintf_chk
	mov	edi, ebp
	call	exit
	.section	.text
	.align	32
	#Procedure 0x401d8b
	.globl sub_401d8b
	.type sub_401d8b, @function
sub_401d8b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x401d90

	.globl main
	.type main, @function
main:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	rbx, rsi
	mov	ebp, edi
	mov	rdi, qword ptr [rbx]
	call	set_program_name
	mov	edi, 6
	mov	esi, OFFSET FLAT:label_42
	call	setlocale
	mov	edi, OFFSET FLAT:label_51
	mov	esi, OFFSET FLAT:label_52
	call	bindtextdomain
	mov	edi, OFFSET FLAT:label_51
	call	textdomain
	mov	edi, OFFSET FLAT:close_stdout
	call	atexit
	lea	rdi, [rsp + 0x10]
	call	chopt_init
	mov	r12d, 0xffffffff
	mov	ecx, 0x10
	xor	r13d, r13d
	jmp	.label_34
.label_1025:
	mov	dword ptr [rsp + 0x10], 0
	mov	ecx, r14d
	nop	word ptr cs:[rax + rax]
.label_34:
	mov	r14d, ecx
	mov	edx, OFFSET FLAT:label_38
	mov	ecx, OFFSET FLAT:long_options
	xor	r8d, r8d
	mov	edi, ebp
	mov	rsi, rbx
	call	getopt_long
	cmp	eax, 0x47
	jle	.label_43
	add	eax, -0x48
	cmp	eax, 0x3b
	ja	.label_46
	mov	ecx, 0x11
	jmp	qword ptr [(rax * 8) + label_53]
.label_1019:
	mov	ecx, 2
	jmp	.label_34
.label_1020:
	mov	ecx, 0x10
	jmp	.label_34
.label_1021:
	mov	byte ptr [rsp + 0x14], 1
	mov	ecx, r14d
	jmp	.label_34
.label_1022:
	mov	dword ptr [rsp + 0x10], 1
	mov	ecx, r14d
	jmp	.label_34
.label_1023:
	mov	byte ptr [rsp + 0x21], 1
	mov	ecx, r14d
	jmp	.label_34
.label_1024:
	xor	r12d, r12d
	mov	ecx, r14d
	jmp	.label_34
.label_1026:
	mov	r12d, 1
	mov	ecx, r14d
	jmp	.label_34
.label_1027:
	xor	r13d, r13d
	mov	ecx, r14d
	jmp	.label_34
.label_1028:
	mov	r13b, 1
	mov	ecx, r14d
	jmp	.label_34
.label_1029:
	mov	rax, qword ptr [rip + optarg]
	mov	qword ptr [rip + reference_file],  rax
	mov	ecx, r14d
	jmp	.label_34
.label_43:
	cmp	eax, -1
	jne	.label_49
	mov	r15d, 0x10
	cmp	byte ptr [rsp + 0x14], 0
	je	.label_55
	cmp	r14d, 0x10
	jne	.label_59
	cmp	r12d, 1
	mov	r12d, 0
	jne	.label_55
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_61
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
.label_59:
	mov	r15d, r14d
.label_55:
	test	r12d, r12d
	setne	byte ptr [rsp + 0x20]
	movsxd	rax, dword ptr [rip + optind]
	mov	ecx, ebp
	sub	ecx, eax
	mov	rsi, qword ptr [rip + reference_file]
	cmp	rsi, 1
	mov	edx, 1
	adc	edx, 0
	cmp	ecx, edx
	jl	.label_37
	test	rsi, rsi
	je	.label_48
	lea	rdx, [rsp + 0x38]
	mov	edi, 1
	call	__xstat
	test	eax, eax
	jne	.label_56
	mov	ebp, dword ptr [rsp + 0x58]
	mov	edi, ebp
	call	gid_to_name
	mov	qword ptr [rsp + 0x30], rax
	jmp	.label_35
.label_48:
	lea	ecx, [rax + 1]
	mov	dword ptr [rip + optind],  ecx
	mov	r12, qword ptr [rbx + rax*8]
	xor	eax, eax
	cmp	byte ptr [r12], 0
	je	.label_62
	mov	rdi, r12
	call	xstrdup
.label_62:
	mov	qword ptr [rsp + 0x30], rax
	mov	ebp, 0xffffffff
	cmp	byte ptr [r12], 0
	je	.label_35
	mov	rdi, r12
	call	getgrnam
	test	rax, rax
	je	.label_39
	mov	ebp, dword ptr [rax + 0x10]
	jmp	.label_58
.label_39:
	lea	rcx, [rsp + 0x38]
	xor	esi, esi
	mov	edx, 0xa
	mov	r8d, OFFSET FLAT:label_42
	mov	rdi, r12
	call	xstrtoul
	test	eax, eax
	jne	.label_54
	mov	rbp, qword ptr [rsp + 0x38]
	mov	rax, rbp
	shr	rax, 0x20
	jne	.label_54
.label_58:
	call	endgrent
.label_35:
	test	r13b, r13b
	je	.label_50
	mov	al, byte ptr [rsp + 0x14]
	test	al, al
	je	.label_50
	mov	edi, OFFSET FLAT:main.dev_ino_buf
	call	get_root_dev_ino
	mov	qword ptr [rsp + 0x18], rax
	test	rax, rax
	je	.label_57
.label_50:
	or	r15d, 0x400
	movsxd	rax, dword ptr [rip + optind]
	lea	rdi, [rbx + rax*8]
	lea	rax, [rsp + 0x10]
	mov	qword ptr [rsp], rax
	mov	edx, 0xffffffff
	mov	r8d, 0xffffffff
	mov	r9d, 0xffffffff
	mov	esi, r15d
	mov	ecx, ebp
	call	chown_files
	movzx	eax, al
	xor	eax, 1
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_49:
	cmp	eax, 0xffffff7d
	je	.label_41
	cmp	eax, 0xffffff7e
	jne	.label_46
	xor	edi, edi
	call	usage
.label_41:
	mov	rdi, qword ptr [rip + stdout]
	mov	rcx, qword ptr [rip + Version]
	mov	qword ptr [rsp], 0
	mov	esi, OFFSET FLAT:label_12
	mov	edx, OFFSET FLAT:label_19
	mov	r8d, OFFSET FLAT:label_63
	mov	r9d, OFFSET FLAT:label_64
	xor	eax, eax
	call	version_etc
	xor	edi, edi
	call	exit
.label_46:
	mov	edi, 1
	call	usage
.label_37:
	xor	edi, edi
	cmp	eax, ebp
	jge	.label_44
	mov	esi, OFFSET FLAT:label_47
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	movsxd	rax, ebp
	mov	rdi, qword ptr [rbx + rax*8 - 8]
	call	quote
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	call	error
	mov	edi, 1
	call	usage
.label_56:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_40
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	rsi, qword ptr [rip + reference_file]
	mov	edi, 4
	jmp	.label_36
.label_57:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_40
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	esi, OFFSET FLAT:label_45
.label_36:
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rbp
	call	error
.label_44:
	mov	esi, OFFSET FLAT:label_60
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edi, 1
	call	usage
.label_54:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_33
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, r12
	call	quote
	mov	rcx, rax
	mov	edi, 1
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	.section	.text
	.align	32
	#Procedure 0x4021b0

	.globl chopt_init
	.type chopt_init, @function
chopt_init:
	mov	dword ptr [rdi], 2
	mov	qword ptr [rdi + 8], 0
	mov	byte ptr [rdi + 0x10], 1
	mov	byte ptr [rdi + 4], 0
	mov	byte ptr [rdi + 0x11], 0
	xorps	xmm0, xmm0
	movups	xmmword ptr [rdi + 0x18], xmm0
	ret	
	.section	.text
	.align	32
	#Procedure 0x4021d2
	.globl sub_4021d2
	.type sub_4021d2, @function
sub_4021d2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4021e0
	.globl chopt_free
	.type chopt_free, @function
chopt_free:

	push	rbx
	mov	rbx, rdi
	mov	rdi, qword ptr [rbx + 0x18]
	call	free
	mov	rdi, qword ptr [rbx + 0x20]
	pop	rbx
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x4021f7
	.globl sub_4021f7
	.type sub_4021f7, @function
sub_4021f7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402200

	.globl gid_to_name
	.type gid_to_name, @function
gid_to_name:
	push	rbx
	sub	rsp, 0x20
	mov	ebx, edi
	call	getgrgid
	test	rax, rax
	je	.label_66
	mov	rdi, qword ptr [rax]
	jmp	.label_65
.label_66:
	mov	edi, ebx
	lea	rsi, [rsp]
	call	umaxtostr
	mov	rdi, rax
.label_65:
	call	xstrdup
	add	rsp, 0x20
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40222f
	.globl sub_40222f
	.type sub_40222f, @function
sub_40222f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402230
	.globl uid_to_name
	.type uid_to_name, @function
uid_to_name:

	push	rbx
	sub	rsp, 0x20
	mov	ebx, edi
	call	getpwuid
	test	rax, rax
	je	.label_68
	mov	rdi, qword ptr [rax]
	jmp	.label_67
.label_68:
	mov	edi, ebx
	lea	rsi, [rsp]
	call	umaxtostr
	mov	rdi, rax
.label_67:
	call	xstrdup
	add	rsp, 0x20
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40225f
	.globl sub_40225f
	.type sub_40225f, @function
sub_40225f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402260

	.globl chown_files
	.type chown_files, @function
chown_files:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x178
	mov	dword ptr [rsp + 0x2c], r8d
	mov	dword ptr [rsp + 0x24], ecx
	mov	dword ptr [rsp + 4], edx
	mov	eax, esi
	mov	r13, qword ptr [rsp + 0x1b0]
	mov	dword ptr [rsp + 0x28], r9d
	and	r9d, r8d
	xor	esi, esi
	mov	dword ptr [rsp + 0x3c], r9d
	cmp	r9d, -1
	jne	.label_91
	cmp	byte ptr [r13 + 0x10], 0
	jne	.label_91
	xor	esi, esi
	cmp	dword ptr [r13], 2
	sete	sil
	shl	esi, 3
.label_91:
	or	esi, eax
	xor	edx, edx
	call	xfts_open
	mov	r14, rax
	mov	rdi, r14
	call	rpl_fts_read
	mov	rdx, rax
	mov	r12b, 1
	test	rdx, rdx
	je	.label_115
	mov	bpl, 1
	mov	qword ptr [rsp + 0x40], r14
	jmp	.label_120
.label_131:
	mov	esi, OFFSET FLAT:label_76
.label_117:
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rbx, qword ptr [rsp + 0x10]
	xor	r15d, r15d
	mov	rbp, qword ptr [rsp + 8]
	jmp	.label_128
.label_109:
	mov	edi, r12d
	call	close
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	lea	ebx, [rcx*4 + 2]
	jmp	.label_106
	.section	.text
	.align	32
	#Procedure 0x40231e
	.globl sub_40231e
	.type sub_40231e, @function
sub_40231e:

	nop	
.label_120:
	mov	r9, qword ptr [rdx + 0x30]
	mov	rbx, qword ptr [rdx + 0x38]
	movzx	eax, word ptr [rdx + 0x70]
	dec	eax
	movzx	eax, ax
	cmp	eax, 9
	ja	.label_82
	jmp	qword ptr [(rax * 8) + label_141]
.label_1049:
	cmp	byte ptr [r13 + 4], 0
	je	.label_82
	mov	rax, qword ptr [r13 + 8]
	mov	r12b, 1
	test	rax, rax
	je	.label_101
	mov	rcx, qword ptr [rdx + 0x80]
	cmp	rcx, qword ptr [rax]
	jne	.label_101
	mov	rcx, qword ptr [rdx + 0x78]
	cmp	rcx, qword ptr [rax + 8]
	jne	.label_101
	mov	r13, rdx
	cmp	byte ptr [rbx], 0x2f
	jne	.label_153
	cmp	byte ptr [rbx + 1], 0
	je	.label_155
.label_153:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_126
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	xor	edi, edi
	mov	esi, 4
	mov	rdx, rbx
	call	quotearg_n_style
	mov	r15, rax
	mov	edi, 1
	mov	esi, 4
	mov	edx, OFFSET FLAT:label_45
	call	quotearg_n_style
	mov	rbx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	mov	r14, qword ptr [rsp + 0x40]
	mov	rcx, r15
	mov	r8, rbx
	call	error
.label_161:
	xor	r12d, r12d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_142
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	edx, 4
	mov	rdi, r14
	mov	rsi, r13
	call	rpl_fts_set
	mov	rdi, r14
	call	rpl_fts_read
	mov	r13, qword ptr [rsp + 0x1b0]
	jmp	.label_101
.label_1050:
	mov	rdi, r14
	mov	rsi, rdx
	mov	r15, rdx
	mov	r12, r9
	call	cycle_warning_required
	mov	r9, r12
	mov	rdx, r15
	test	al, al
	je	.label_82
	xor	r12d, r12d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_86
	mov	edx, 5
	call	dcgettext
	mov	r15, rax
	xor	edi, edi
	mov	esi, 3
	mov	rdx, rbx
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r15
	mov	r13, qword ptr [rsp + 0x1b0]
	call	error
	jmp	.label_101
.label_1051:
	mov	qword ptr [rsp + 0x18], rbx
	mov	byte ptr [rsp + 3], bpl
	mov	r14b, 1
	xor	r15d, r15d
	xor	ebp, ebp
	cmp	byte ptr [r13 + 0x11], 0
	mov	qword ptr [rsp + 0x30], rdx
	je	.label_104
	xor	r12d, r12d
	jmp	.label_77
.label_1052:
	mov	r12b, 1
	cmp	byte ptr [r13 + 4], 0
	je	.label_101
.label_82:
	mov	qword ptr [rsp + 0x18], rbx
	mov	byte ptr [rsp + 3], bpl
	cmp	dword ptr [rsp + 0x3c], -1
	mov	qword ptr [rsp + 0x30], rdx
	jne	.label_114
	cmp	dword ptr [r13], 2
	jne	.label_114
	cmp	qword ptr [r13 + 8], 0
	je	.label_124
	nop	dword ptr [rax + rax]
.label_114:
	lea	r15, [rdx + 0x78]
	cmp	byte ptr [r13 + 0x10], 0
	mov	ebp, dword ptr [rsp + 0x2c]
	jne	.label_129
	jmp	.label_69
.label_1053:
	mov	qword ptr [rsp + 0x18], rbx
	mov	byte ptr [rsp + 3], bpl
	mov	r14b, 1
	xor	r15d, r15d
	xor	ebp, ebp
	cmp	byte ptr [r13 + 0x11], 0
	mov	qword ptr [rsp + 0x30], rdx
	je	.label_135
	xor	r12d, r12d
	jmp	.label_77
.label_1054:
	cmp	qword ptr [rdx + 0x58], 0
	jne	.label_138
	cmp	qword ptr [rdx + 0x20], 0
	je	.label_140
.label_138:
	mov	qword ptr [rsp + 0x18], rbx
	mov	byte ptr [rsp + 3], bpl
	mov	r14b, 1
	xor	r15d, r15d
	xor	ebp, ebp
	cmp	byte ptr [r13 + 0x11], 0
	mov	qword ptr [rsp + 0x30], rdx
	je	.label_143
	xor	r12d, r12d
	jmp	.label_77
.label_104:
	mov	ebx, dword ptr [rdx + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_148
	jmp	.label_149
.label_135:
	mov	ebp, dword ptr [rdx + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, 3
	mov	rdx, qword ptr [rsp + 0x18]
	call	quotearg_n_style_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_144
	xor	eax, eax
	mov	esi, ebp
	jmp	.label_145
.label_143:
	mov	ebx, dword ptr [rdx + 0x40]
	xor	r15d, r15d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_158
.label_149:
	mov	edx, 5
	call	dcgettext
	mov	rbp, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 0x18]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rbp
.label_145:
	call	error
	xor	ebp, ebp
	xor	r12d, r12d
	jmp	.label_77
.label_124:
	lea	r15, [rdx + 0x78]
	cmp	byte ptr [r13 + 0x10], 0
	mov	al, 1
	mov	ebp, dword ptr [rsp + 0x2c]
	je	.label_93
	nop	word ptr cs:[rax + rax]
.label_129:
	mov	eax, dword ptr [rdx + 0x90]
	mov	ecx, 0xf000
	and	eax, ecx
	cmp	eax, 0xa000
	jne	.label_69
	mov	esi, dword ptr [r14 + 0x2c]
	mov	edi, 1
	xor	r8d, r8d
	mov	rdx, r9
	lea	r15, [rsp + 0xe8]
	mov	rcx, r15
	mov	rbx, r9
	call	__fxstatat
	mov	r9, rbx
	mov	rdx, qword ptr [rsp + 0x30]
	test	eax, eax
	je	.label_69
	mov	r14b, 1
	cmp	byte ptr [r13 + 0x11], 0
	je	.label_84
	xor	ebp, ebp
	jmp	.label_87
	.section	.text
	.align	32
	#Procedure 0x402657
	.globl sub_402657
	.type sub_402657, @function
sub_402657:

	nop	word ptr [rax + rax]
.label_69:
	cmp	ebp, -1
	je	.label_83
	mov	ecx, dword ptr [r15 + 0x1c]
	cmp	ecx, ebp
	sete	al
	cmp	dword ptr [rsp + 0x28], -1
	je	.label_93
	cmp	ecx, ebp
	je	.label_96
	jmp	.label_93
.label_83:
	mov	al, 1
	cmp	dword ptr [rsp + 0x28], -1
	je	.label_93
.label_96:
	mov	eax, dword ptr [rsp + 0x28]
	cmp	dword ptr [r15 + 0x20], eax
	sete	al
.label_93:
	movzx	ecx, word ptr [rdx + 0x70]
	cmp	ecx, 6
	ja	.label_105
	mov	edx, 0x56
	bt	edx, ecx
	jae	.label_105
	mov	rcx, qword ptr [r13 + 8]
	test	rcx, rcx
	je	.label_105
	mov	rdx, qword ptr [r15 + 8]
	cmp	rdx, qword ptr [rcx]
	jne	.label_105
	mov	rdx, qword ptr [r15]
	cmp	rdx, qword ptr [rcx + 8]
	jne	.label_105
	mov	rbp, qword ptr [rsp + 0x18]
	cmp	byte ptr [rbp], 0x2f
	jne	.label_118
	cmp	byte ptr [rbp + 1], 0
	je	.label_121
.label_118:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_126
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	xor	edi, edi
	mov	esi, 4
	mov	rdx, rbp
	call	quotearg_n_style
	mov	r15, rax
	mov	edi, 1
	mov	esi, 4
	mov	edx, OFFSET FLAT:label_45
	call	quotearg_n_style
	mov	rbx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r14
	mov	r14, qword ptr [rsp + 0x40]
	mov	rcx, r15
	mov	r8, rbx
	call	error
.label_90:
	movzx	ebp, byte ptr [rsp + 3]
	xor	r12d, r12d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_142
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rcx
	call	error
	mov	r13, qword ptr [rsp + 0x1b0]
	jmp	.label_101
	.section	.text
	.align	32
	#Procedure 0x402773
	.globl sub_402773
	.type sub_402773, @function
sub_402773:

	nop	word ptr cs:[rax + rax]
.label_105:
	test	al, al
	je	.label_154
	mov	ebx, dword ptr [r14 + 0x2c]
	mov	rax, qword ptr [rsp + 0x1b0]
	cmp	byte ptr [rax + 0x10], 0
	je	.label_139
	cmp	dword ptr [rsp + 0x3c], -1
	je	.label_159
	movzx	eax, word ptr [r15 + 0x18]
	and	eax, 0xf000
	mov	ebp, 0x900
	cmp	eax, 0x8000
	je	.label_162
	movzx	eax, ax
	cmp	eax, 0x4000
	jne	.label_159
	mov	ebp, 0x10900
.label_162:
	xor	eax, eax
	mov	edi, ebx
	mov	r13, r9
	mov	rsi, r9
	mov	edx, ebp
	call	openat
	mov	r12d, eax
	test	r12d, r12d
	jns	.label_169
	call	__errno_location
	mov	r14, rax
	mov	eax, dword ptr [r14]
	cmp	eax, 0xd
	jne	.label_170
	mov	ecx, dword ptr [r15 + 0x18]
	mov	eax, 0xf000
	and	ecx, eax
	mov	eax, 0xd
	cmp	ecx, 0x8000
	jne	.label_170
	or	ebp, 1
	xor	eax, eax
	mov	edi, ebx
	mov	rsi, r13
	mov	edx, ebp
	call	openat
	mov	r12d, eax
	test	r12d, r12d
	js	.label_95
.label_169:
	mov	edi, 1
	mov	esi, r12d
	lea	rdx, [rsp + 0x50]
	call	__fxstat
	mov	ebx, 6
	test	eax, eax
	jne	.label_80
	mov	rax, qword ptr [r15 + 8]
	mov	ebx, 4
	cmp	rax, qword ptr [rsp + 0x58]
	jne	.label_80
	mov	rax, qword ptr [r15]
	cmp	rax, qword ptr [rsp + 0x50]
	jne	.label_80
	mov	eax, dword ptr [rsp + 0x2c]
	cmp	eax, -1
	mov	ebx, 2
	je	.label_73
	cmp	dword ptr [rsp + 0x6c], eax
	jne	.label_80
.label_73:
	cmp	dword ptr [rsp + 0x28], -1
	je	.label_100
	mov	eax, dword ptr [rsp + 0x28]
	cmp	dword ptr [rsp + 0x70], eax
	jne	.label_80
.label_100:
	mov	edi, r12d
	mov	esi, dword ptr [rsp + 4]
	mov	edx, dword ptr [rsp + 0x24]
	call	fchown
	test	eax, eax
	mov	ebx, 6
	je	.label_109
.label_80:
	call	__errno_location
	mov	rbp, rax
	mov	r14d, dword ptr [rbp]
	mov	edi, r12d
	call	close
	mov	dword ptr [rbp], r14d
	jmp	.label_106
.label_154:
	mov	r14b, 1
	xor	ebp, ebp
	mov	r12b, 1
	jmp	.label_77
.label_139:
	mov	r8d, 0x100
	mov	edi, ebx
	mov	rsi, r9
	mov	edx, dword ptr [rsp + 4]
	mov	ecx, dword ptr [rsp + 0x24]
	call	fchownat
	test	eax, eax
	sete	r12b
	mov	r14b, 1
	je	.label_130
	call	__errno_location
	cmp	dword ptr [rax], 0x5f
	setne	r14b
	mov	al, 1
	je	.label_134
	mov	eax, r12d
.label_134:
	mov	r12b, al
	jmp	.label_130
.label_84:
	call	__errno_location
	mov	ebx, dword ptr [rax]
	xor	ebp, ebp
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_136
	mov	edx, 5
	call	dcgettext
	mov	r15, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 0x18]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, r15
	call	error
.label_87:
	lea	r15, [rsp + 0xe8]
	xor	r12d, r12d
	jmp	.label_77
.label_140:
	mov	qword ptr [rdx + 0x20], 1
	mov	rsi, rdx
	mov	edx, 1
	mov	rdi, r14
	call	rpl_fts_set
	mov	r12b, 1
	jmp	.label_101
.label_121:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_156
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, rbp
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, rbx
	call	error
	jmp	.label_90
.label_155:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_156
	mov	edx, 5
	call	dcgettext
	mov	r15, rax
	mov	edi, 4
	mov	rsi, rbx
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	esi, esi
	xor	eax, eax
	mov	rdx, r15
	call	error
	jmp	.label_161
.label_95:
	mov	eax, dword ptr [r14]
.label_170:
	xor	ebx, ebx
	cmp	eax, 0xd
	setne	bl
	add	ebx, 5
.label_106:
	mov	r9, r13
	add	ebx, -2
	cmp	ebx, 4
	ja	.label_75
	mov	r14b, 1
	xor	r12d, r12d
	xor	ebp, ebp
	jmp	qword ptr [(rbx * 8) + label_74]
.label_1060:
	mov	r14b, 1
	mov	bpl, 1
	mov	r12b, 1
	jmp	.label_77
.label_1061:
	mov	rax, qword ptr [rsp + 0x40]
	mov	ebx, dword ptr [rax + 0x2c]
.label_159:
	xor	r8d, r8d
	mov	edi, ebx
	mov	rsi, r9
	mov	edx, dword ptr [rsp + 4]
	mov	ecx, dword ptr [rsp + 0x24]
	call	fchownat
	test	eax, eax
	sete	r12b
	mov	r14b, 1
.label_130:
	mov	bpl, 1
	test	r12b, 1
	jne	.label_77
.label_1062:
	mov	bpl, 1
	mov	rax, qword ptr [rsp + 0x1b0]
	cmp	byte ptr [rax + 0x11], 0
	jne	.label_77
	call	__errno_location
	cmp	dword ptr [rsp + 4], -1
	mov	r13d, dword ptr [rax]
	je	.label_111
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_98
	jmp	.label_99
.label_111:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_102
.label_99:
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 0x18]
	call	quotearg_style
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, r13d
	mov	rdx, rbx
	call	error
	nop	dword ptr [rax]
.label_77:
	mov	r13, qword ptr [rsp + 0x1b0]
	mov	rdx, qword ptr [r13]
	mov	rax, rdx
	shr	rax, 0x20
	cmp	edx, 2
	je	.label_112
	mov	ecx, r12d
	and	cl, 1
	test	bpl, bpl
	je	.label_81
	mov	ebx, r12d
	and	bl, r14b
	mov	r13, qword ptr [rsp + 0x1b0]
	je	.label_81
	cmp	dword ptr [rsp + 4], -1
	je	.label_166
	mov	esi, dword ptr [rsp + 4]
	cmp	dword ptr [r15 + 0x1c], esi
	jne	.label_133
.label_166:
	cmp	dword ptr [rsp + 0x24], -1
	je	.label_81
	mov	esi, dword ptr [rsp + 0x24]
	cmp	dword ptr [r15 + 0x20], esi
	jne	.label_133
	nop	dword ptr [rax]
.label_81:
	test	edx, edx
	jne	.label_112
	test	cl, cl
	movzx	eax, r14b
	lea	r14d, [rax + rax*2 + 1]
	mov	eax, 3
	cmove	r14d, eax
	test	r15, r15
	mov	ebp, 0
	mov	eax, 0
	mov	qword ptr [rsp + 0x48], rax
	jne	.label_137
	jmp	.label_146
.label_133:
	movzx	r14d, r14b
	inc	r14d
	test	cl, cl
	mov	eax, 3
	cmove	r14d, eax
.label_137:
	mov	ebx, dword ptr [r15 + 0x1c]
	mov	edi, ebx
	call	getpwuid
	test	rax, rax
	je	.label_150
	mov	rdi, qword ptr [rax]
	jmp	.label_151
.label_150:
	mov	rdi, rbx
	lea	rsi, [rsp + 0x50]
	call	umaxtostr
	mov	rdi, rax
.label_151:
	call	xstrdup
	mov	rbp, rax
	mov	ebx, dword ptr [r15 + 0x20]
	mov	edi, ebx
	call	getgrgid
	test	rax, rax
	je	.label_157
	mov	rdi, qword ptr [rax]
	jmp	.label_160
.label_157:
	mov	rdi, rbx
	lea	rsi, [rsp + 0x50]
	call	umaxtostr
	mov	rdi, rax
.label_160:
	mov	r13, qword ptr [rsp + 0x1b0]
	call	xstrdup
	mov	qword ptr [rsp + 0x48], rax
.label_146:
	cmp	r14d, 1
	jne	.label_165
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_167
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	edi, 4
	mov	rsi, qword ptr [rsp + 0x18]
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, rbx
	mov	rdx, rcx
	call	__printf_chk
	jmp	.label_71
.label_165:
	mov	rbx, qword ptr [r13 + 0x18]
	mov	r15, qword ptr [r13 + 0x20]
	mov	rdi, rbx
	mov	rsi, r15
	call	user_group_str
	mov	qword ptr [rsp + 0x10], rax
	test	rbx, rbx
	mov	qword ptr [rsp + 8], rbp
	mov	rdi, rbp
	cmove	rdi, rbx
	test	r15, r15
	mov	rsi, qword ptr [rsp + 0x48]
	cmove	rsi, r15
	call	user_group_str
	and	r14b, 7
	cmp	r14b, 4
	mov	r13, qword ptr [rsp + 0x18]
	je	.label_85
	cmp	r14b, 3
	je	.label_88
	cmp	r14b, 2
	jne	.label_89
	test	rbx, rbx
	je	.label_92
	mov	rbx, rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_94
	jmp	.label_79
.label_85:
	test	rbx, rbx
	je	.label_97
	mov	rbx, rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_125
	jmp	.label_79
.label_88:
	test	rax, rax
	je	.label_103
	test	rbx, rbx
	je	.label_127
	mov	rbx, rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_107
	jmp	.label_79
.label_92:
	mov	rbx, rax
	xor	edi, edi
	test	r15, r15
	je	.label_108
	mov	esi, OFFSET FLAT:label_171
	jmp	.label_79
.label_97:
	mov	rbx, rax
	xor	edi, edi
	test	r15, r15
	je	.label_110
	mov	esi, OFFSET FLAT:label_147
	jmp	.label_79
.label_103:
	xor	edi, edi
	test	rbx, rbx
	je	.label_113
	mov	esi, OFFSET FLAT:label_116
	jmp	.label_117
.label_127:
	mov	rbx, rax
	xor	edi, edi
	test	r15, r15
	je	.label_119
	mov	esi, OFFSET FLAT:label_122
	jmp	.label_79
.label_108:
	mov	esi, OFFSET FLAT:label_78
	jmp	.label_79
.label_110:
	mov	esi, OFFSET FLAT:label_123
	jmp	.label_79
.label_113:
	test	r15, r15
	je	.label_131
	mov	esi, OFFSET FLAT:label_132
	jmp	.label_117
.label_119:
	mov	esi, OFFSET FLAT:label_76
.label_79:
	mov	edx, 5
	call	dcgettext
	mov	r14, rax
	mov	rbp, qword ptr [rsp + 8]
	mov	r15, qword ptr [rsp + 0x10]
.label_128:
	mov	edi, 4
	mov	rsi, r13
	call	quotearg_style
	mov	rcx, rax
	mov	edi, 1
	xor	eax, eax
	mov	rsi, r14
	mov	rdx, rcx
	mov	rcx, rbx
	mov	r8, r15
	call	__printf_chk
	mov	rdi, rbx
	call	free
	mov	rdi, r15
	call	free
.label_71:
	mov	rdi, rbp
	call	free
	mov	rdi, qword ptr [rsp + 0x48]
	call	free
	mov	r13, qword ptr [rsp + 0x1b0]
	mov	al, byte ptr [r13 + 4]
.label_112:
	test	al, al
	mov	r14, qword ptr [rsp + 0x40]
	jne	.label_152
	mov	edx, 4
	mov	rdi, r14
	mov	rsi, qword ptr [rsp + 0x30]
	call	rpl_fts_set
.label_152:
	and	r12b, 1
	movzx	ebp, byte ptr [rsp + 3]
.label_101:
	and	r12b, bpl
	mov	rdi, r14
	call	rpl_fts_read
	mov	rdx, rax
	test	rdx, rdx
	mov	ebp, r12d
	jne	.label_120
.label_115:
	call	__errno_location
	mov	rbp, rax
	mov	ebx, dword ptr [rbp]
	test	ebx, ebx
	je	.label_163
	mov	rax, qword ptr [rsp + 0x1b0]
	cmp	byte ptr [rax + 0x11], 0
	je	.label_164
	xor	r12d, r12d
	jmp	.label_163
.label_164:
	xor	r12d, r12d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_168
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_163:
	mov	rdi, r14
	call	rpl_fts_close
	test	eax, eax
	je	.label_70
	mov	ebx, dword ptr [rbp]
	xor	r12d, r12d
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_72
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	edi, edi
	xor	eax, eax
	mov	esi, ebx
	mov	rdx, rcx
	call	error
.label_70:
	mov	eax, r12d
	add	rsp, 0x178
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_89:
	call	abort
.label_75:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x402e4f
	.globl sub_402e4f
	.type sub_402e4f, @function
sub_402e4f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x402e50

	.globl user_group_str
	.type user_group_str, @function
user_group_str:
	push	r15
	push	r14
	push	rbx
	mov	r14, rsi
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_175
	test	r14, r14
	je	.label_172
	mov	rdi, rbx
	call	strlen
	mov	r15, rax
	mov	rdi, r14
	call	strlen
	lea	rdi, [r15 + rax + 2]
	call	xmalloc
	mov	r15, rax
	mov	rdi, r15
	mov	rsi, rbx
	call	stpcpy
	mov	word ptr [rax], 0x3a
	lea	rdi, [rax + 1]
	mov	rsi, r14
	call	stpcpy
	jmp	.label_173
.label_175:
	xor	r15d, r15d
	test	r14, r14
	je	.label_173
	mov	rdi, r14
	jmp	.label_174
.label_173:
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_172:
	mov	rdi, rbx
.label_174:
	pop	rbx
	pop	r14
	pop	r15
	jmp	xstrdup
	.section	.text
	.align	32
	#Procedure 0x402ec6
	.globl sub_402ec6
	.type sub_402ec6, @function
sub_402ec6:

	nop	
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402ed0
	.globl close_stdout_set_file_name
	.type close_stdout_set_file_name, @function
close_stdout_set_file_name:

	mov	qword ptr [rip + file_name],  rdi
	ret	
	.section	.text
	.align	32
	#Procedure 0x402ed8
	.globl sub_402ed8
	.type sub_402ed8, @function
sub_402ed8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402ee0
	.globl close_stdout_set_ignore_EPIPE
	.type close_stdout_set_ignore_EPIPE, @function
close_stdout_set_ignore_EPIPE:

	mov	byte ptr [rip + ignore_EPIPE],  dil
	ret	
	.section	.text
	.align	32
	#Procedure 0x402ee8
	.globl sub_402ee8
	.type sub_402ee8, @function
sub_402ee8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402ef0

	.globl close_stdout
	.type close_stdout, @function
close_stdout:
	push	rbp
	push	rbx
	push	rax
	mov	rdi, qword ptr [rip + stdout]
	call	close_stream
	test	eax, eax
	je	.label_181
	mov	bl, byte ptr [rip + ignore_EPIPE]
	call	__errno_location
	mov	rbp, rax
	cmp	bl, 0
	je	.label_178
	cmp	dword ptr [rbp], 0x20
	jne	.label_178
.label_181:
	mov	rdi, qword ptr [rip + stderr]
	call	close_stream
	test	eax, eax
	jne	.label_177
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_178:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_179
	mov	edx, 5
	call	dcgettext
	mov	rbx, rax
	mov	rdi, qword ptr [rip + file_name]
	test	rdi, rdi
	mov	ebp, dword ptr [rbp]
	jne	.label_176
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_144
	xor	eax, eax
	mov	esi, ebp
	mov	rcx, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_177:
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
.label_176:
	call	quotearg_colon
	mov	rcx, rax
	xor	edi, edi
	mov	edx, OFFSET FLAT:label_180
	xor	eax, eax
	mov	esi, ebp
	mov	r8, rbx
	call	error
	mov	edi, dword ptr [rip + exit_failure]
	call	_exit
	nop	dword ptr [rax]
	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x402fb0

	.globl umaxtostr
	.type umaxtostr, @function
umaxtostr:
	mov	rcx, rdi
	mov	byte ptr [rsi + 0x14], 0
	add	rsi, 0x14
	movabs	r8, 0xcccccccccccccccd
	nop	word ptr cs:[rax + rax]
.label_182:
	mov	rax, rcx
	mul	r8
	shr	rdx, 3
	lea	eax, [rdx + rdx]
	lea	eax, [rax + rax*4]
	mov	edi, ecx
	sub	edi, eax
	or	edi, 0x30
	mov	byte ptr [rsi - 1], dil
	dec	rsi
	cmp	rcx, 9
	mov	rcx, rdx
	ja	.label_182
	mov	rax, rsi
	ret	
	.section	.text
	.align	32
	#Procedure 0x402ffb
	.globl sub_402ffb
	.type sub_402ffb, @function
sub_402ffb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403000

	.globl set_program_name
	.type set_program_name, @function
set_program_name:
	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_183
	mov	esi, 0x2f
	mov	rdi, rbx
	call	strrchr
	test	rax, rax
	lea	r14, [rax + 1]
	cmove	r14, rbx
	mov	rax, r14
	sub	rax, rbx
	cmp	rax, 7
	jl	.label_185
	lea	rdi, [r14 - 7]
	mov	esi, OFFSET FLAT:label_187
	mov	edx, 7
	call	strncmp
	test	eax, eax
	jne	.label_185
	mov	esi, OFFSET FLAT:label_186
	mov	edx, 3
	mov	rdi, r14
	call	strncmp
	test	eax, eax
	jne	.label_188
	add	r14, 3
	mov	qword ptr [rip + __progname],  r14
.label_188:
	mov	rbx, r14
.label_185:
	mov	qword ptr [rip + program_name],  rbx
	mov	qword ptr [rip + __progname_full],  rbx
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_183:
	mov	rcx, qword ptr [rip + stderr]
	mov	edi, OFFSET FLAT:label_184
	mov	esi, 0x37
	mov	edx, 1
	call	fwrite
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4030a1
	.globl sub_4030a1
	.type sub_4030a1, @function
sub_4030a1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4030b0
	.globl clone_quoting_options
	.type clone_quoting_options, @function
clone_quoting_options:

	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_quoting_options
	cmove	rbx, rax
	mov	esi, 0x38
	mov	rdi, rbx
	call	xmemdup
	mov	dword ptr [r14], ebp
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4030e3
	.globl sub_4030e3
	.type sub_4030e3, @function
sub_4030e3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4030f0
	.globl get_quoting_style
	.type get_quoting_style, @function
get_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	eax, dword ptr [rax]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4030ff
	.globl sub_4030ff
	.type sub_4030ff, @function
sub_4030ff:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403100
	.globl set_quoting_style
	.type set_quoting_style, @function
set_quoting_style:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x40310f
	.globl sub_40310f
	.type sub_40310f, @function
sub_40310f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x403110
	.globl set_char_quoting
	.type set_char_quoting, @function
set_char_quoting:

	mov	ecx, esi
	test	rdi, rdi
	mov	esi, OFFSET FLAT:default_quoting_options
	cmovne	rsi, rdi
	mov	eax, ecx
	shr	al, 5
	movzx	r8d, al
	mov	r9d, dword ptr [rsi + r8*4 + 8]
	mov	edi, r9d
	shr	edi, cl
	mov	eax, edi
	and	eax, 1
	xor	edi, edx
	and	edi, 1
	shl	edi, cl
	xor	edi, r9d
	mov	dword ptr [rsi + r8*4 + 8], edi
	ret	
	.section	.text
	.align	32
	#Procedure 0x403146
	.globl sub_403146
	.type sub_403146, @function
sub_403146:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403150
	.globl set_quoting_flags
	.type set_quoting_flags, @function
set_quoting_flags:

	test	rdi, rdi
	mov	ecx, OFFSET FLAT:default_quoting_options
	cmovne	rcx, rdi
	mov	eax, dword ptr [rcx + 4]
	mov	dword ptr [rcx + 4], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x403163
	.globl sub_403163
	.type sub_403163, @function
sub_403163:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403170
	.globl set_custom_quoting
	.type set_custom_quoting, @function
set_custom_quoting:

	test	rdi, rdi
	mov	eax, OFFSET FLAT:default_quoting_options
	cmovne	rax, rdi
	mov	dword ptr [rax], 0xa
	test	rsi, rsi
	je	.label_189
	test	rdx, rdx
	je	.label_189
	mov	qword ptr [rax + 0x28], rsi
	mov	qword ptr [rax + 0x30], rdx
	ret	
.label_189:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x40319b
	.globl sub_40319b
	.type sub_40319b, @function
sub_40319b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4031a0
	.globl quotearg_buffer
	.type quotearg_buffer, @function
quotearg_buffer:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rcx
	mov	r15, rdx
	mov	r12, rsi
	mov	r13, rdi
	test	r8, r8
	mov	ebp, OFFSET FLAT:default_quoting_options
	cmovne	rbp, r8
	call	__errno_location
	mov	rbx, rax
	mov	eax, dword ptr [rbx]
	mov	dword ptr [rsp + 4], eax
	mov	r8, qword ptr [rbp]
	mov	r9, r8
	shr	r9, 0x20
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, r12
	mov	rdx, r15
	mov	rcx, r14
	push	qword ptr [rbp + 0x30]
	push	qword ptr [rbp + 0x28]
	lea	rax, [rbp + 8]
	push	rax
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	ecx, dword ptr [rsp + 4]
	mov	dword ptr [rbx], ecx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x403215
	.globl sub_403215
	.type sub_403215, @function
sub_403215:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x403220

	.globl quotearg_buffer_restyled
	.type quotearg_buffer_restyled, @function
quotearg_buffer_restyled:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0xc8
	mov	ebx, r9d
	mov	r15d, r8d
	mov	qword ptr [rsp + 0x48], rcx
	mov	qword ptr [rsp + 0x28], rdx
	mov	r13, rsi
	mov	qword ptr [rsp + 0x10], rdi
	mov	rax, qword ptr [rsp + 0x110]
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x108]
	mov	qword ptr [rsp + 0x80], rax
	call	__ctype_get_mb_cur_max
	mov	qword ptr [rsp + 0xb8], rax
	mov	r12d, ebx
	shr	r12b, 1
	and	r12b, 1
	mov	eax, ebx
	and	eax, 1
	mov	dword ptr [rsp + 0x9c], eax
	mov	dword ptr [rsp + 0x20], ebx
	and	ebx, 4
	mov	dword ptr [rsp + 0x98], ebx
	mov	dil, 1
	mov	eax, 0
	mov	qword ptr [rsp + 0x68], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 0
	mov	qword ptr [rsp + 0x50], rax
	mov	eax, 0
	xor	r9d, r9d
	xor	ecx, ecx
	mov	qword ptr [rsp + 0xa8], rcx
	jmp	.label_218
	.section	.text
	.align	32
	#Procedure 0x4032cf
	.globl sub_4032cf
	.type sub_4032cf, @function
sub_4032cf:

	nop	
.label_263:
	cmp	r8d, 2
	setne	al
	cmp	byte ptr [rsp + 0xf], 0
	setne	dl
	mov	rsi, qword ptr [rsp + 0xa8]
	test	sil, 1
	mov	bl, byte ptr [rsp + 0x34]
	mov	rsi, qword ptr [rsp + 0xc0]
	je	.label_251
	or	al, dl
	jne	.label_251
	test	dil, 1
	jne	.label_261
	cmp	qword ptr [rsp + 0x68], 0
	je	.label_251
	test	rbp, rbp
	mov	r15d, r8d
	mov	al, bl
	mov	qword ptr [rsp + 0x48], rcx
	mov	r12d, esi
	mov	r13, qword ptr [rsp + 0x68]
	je	.label_218
	jmp	.label_251
.label_1069:
	mov	r8d, 5
	test	r12b, 1
	jne	.label_267
	test	rbp, rbp
	je	.label_270
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax], 0x22
.label_270:
	mov	r14d, 1
	jmp	.label_272
.label_1070:
	mov	r13b, 1
	mov	r8d, 5
	xor	r14d, r14d
	mov	eax, OFFSET FLAT:label_258
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	sil, 1
	jmp	.label_213
.label_267:
	xor	r14d, r14d
.label_272:
	mov	eax, OFFSET FLAT:label_258
	mov	qword ptr [rsp + 0x58], rax
	mov	eax, 1
	mov	qword ptr [rsp + 0x50], rax
	mov	r13b, 1
	jmp	.label_259
	.section	.text
	.align	32
	#Procedure 0x40339f
	.globl sub_40339f
	.type sub_40339f, @function
sub_40339f:

	nop	
.label_218:
	mov	rbp, r13
	xor	r14d, r14d
	mov	ecx, r15d
	cmp	r15d, 0xa
	ja	.label_291
	mov	r8d, 7
	mov	r13b, 1
	xor	esi, esi
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	jmp	qword ptr [(rcx * 8) + label_297]
.label_1071:
	mov	r14d, edi
	mov	edi, OFFSET FLAT:label_305
	mov	esi, r15d
	mov	ebx, r9d
	call	gettext_quote
	mov	qword ptr [rsp + 0x80], rax
	mov	edi, OFFSET FLAT:label_243
	mov	esi, r15d
	call	gettext_quote
	mov	r9d, ebx
	mov	edi, r14d
	mov	qword ptr [rsp + 0x78], rax
.label_1072:
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	test	r12b, 1
	mov	r14d, 0
	mov	rcx, qword ptr [rsp + 0x80]
	jne	.label_190
	mov	al, byte ptr [rcx]
	test	al, al
	mov	r14d, 0
	je	.label_190
	xor	r14d, r14d
	nop	
.label_279:
	cmp	r14, rbp
	jae	.label_199
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], al
.label_199:
	movzx	eax, byte ptr [rcx + r14 + 1]
	inc	r14
	test	al, al
	jne	.label_279
.label_190:
	mov	rbx, qword ptr [rsp + 0x78]
	mov	rdi, rbx
	call	strlen
	mov	qword ptr [rsp + 0x50], rax
	mov	r8d, r15d
	mov	qword ptr [rsp + 0x58], rbx
	mov	r13b, 1
	mov	sil, r12b
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r9d, dword ptr [rsp + 0x60]
	jmp	.label_213
.label_1064:
	xor	r8d, r8d
	xor	r14d, r14d
	mov	r13d, eax
	xor	esi, esi
	jmp	.label_213
.label_1067:
	mov	al, 1
.label_1065:
	mov	r12b, 1
.label_1068:
	test	r12b, 1
	mov	cl, 1
	je	.label_228
	mov	ecx, eax
.label_228:
	mov	al, cl
.label_1066:
	mov	r8d, 2
	test	r12b, 1
	jne	.label_230
	test	rbp, rbp
	je	.label_238
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx], 0x27
.label_238:
	mov	r14d, 1
	jmp	.label_210
.label_230:
	xor	r14d, r14d
.label_210:
	mov	ecx, OFFSET FLAT:label_243
	mov	qword ptr [rsp + 0x58], rcx
	mov	ecx, 1
	mov	qword ptr [rsp + 0x50], rcx
	mov	r13d, eax
.label_259:
	mov	sil, r12b
.label_213:
	cmp	qword ptr [rsp + 0x100], 0
	setne	r12b
	cmp	r8d, 2
	setne	r15b
	sete	al
	mov	ecx, r13d
	and	cl, 1
	sete	byte ptr [rsp + 0x33]
	mov	ebx, r15d
	mov	byte ptr [rsp + 0x1f], cl
	and	bl, cl
	cmp	qword ptr [rsp + 0x50], 0
	setne	cl
	mov	edx, ecx
	mov	byte ptr [rsp + 0x36], bl
	and	dl, bl
	mov	byte ptr [rsp + 0x37], dl
	mov	ebx, esi
	and	bl, 1
	sete	dl
	and	al, bl
	mov	byte ptr [rsp + 0x31], al
	mov	byte ptr [rsp + 0xf], bl
	and	r12b, bl
	mov	byte ptr [rsp + 0x35], r12b
	or	dl, r15b
	mov	byte ptr [rsp + 0x27], dl
	mov	byte ptr [rsp + 0x34], r13b
	mov	qword ptr [rsp + 0xc0], rsi
	and	r13b, sil
	and	r13b, cl
	mov	byte ptr [rsp + 0x32], r13b
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x38], r8
	jmp	.label_249
	.section	.text
	.align	32
	#Procedure 0x403561
	.globl sub_403561
	.type sub_403561, @function
sub_403561:

	nop	word ptr cs:[rax + rax]
.label_252:
	inc	r12
.label_249:
	cmp	r11, -1
	je	.label_278
	cmp	r12, r11
	jne	.label_280
	jmp	.label_281
	.section	.text
	.align	32
	#Procedure 0x403583
	.globl sub_403583
	.type sub_403583, @function
sub_403583:

	nop	word ptr cs:[rax + rax]
.label_278:
	mov	rcx, -1
	cmp	byte ptr [r10 + r12], 0
	je	.label_286
.label_280:
	cmp	byte ptr [rsp + 0x37], 0
	je	.label_292
	mov	rax, qword ptr [rsp + 0x50]
	lea	rbx, [r12 + rax]
	cmp	rax, 2
	jb	.label_282
	cmp	r11, -1
	jne	.label_282
	mov	r15d, edi
	mov	rdi, r10
	mov	r13d, r9d
	call	strlen
	mov	r9d, r13d
	mov	r8, qword ptr [rsp + 0x38]
	mov	edi, r15d
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_282:
	cmp	rbx, r11
	jbe	.label_309
.label_292:
	xor	esi, esi
.label_205:
	movzx	r15d, byte ptr [r10 + r12]
	cmp	r15, 0x7e
	ja	.label_312
	xor	edx, edx
	mov	r13b, 1
	mov	cl, 0x6e
	mov	bl, 0x61
	xor	eax, eax
	jmp	qword ptr [(r15 * 8) + label_315]
.label_1084:
	test	r12, r12
	jne	.label_191
	jmp	.label_192
	.section	.text
	.align	32
	#Procedure 0x403616
	.globl sub_403616
	.type sub_403616, @function
sub_403616:

	nop	word ptr cs:[rax + rax]
.label_309:
	mov	r13d, r9d
	mov	r15d, edi
	mov	rbx, r11
	lea	rdi, [r10 + r12]
	mov	rsi, qword ptr [rsp + 0x58]
	mov	rdx, qword ptr [rsp + 0x50]
	call	memcmp
	test	eax, eax
	sete	sil
	jne	.label_202
	cmp	byte ptr [rsp + 0xf], 0
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	je	.label_205
	jmp	.label_232
.label_202:
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rbx
	mov	edi, r15d
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, r13d
	jmp	.label_205
.label_1088:
	xor	eax, eax
	cmp	r11, -1
	je	.label_222
	test	r12, r12
	jne	.label_226
	cmp	r11, 1
	je	.label_192
	xor	r13d, r13d
	jmp	.label_193
.label_1077:
	cmp	byte ptr [rsp + 0x1f], 0
	je	.label_233
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_232
	cmp	r8d, 2
	jne	.label_239
	mov	eax, r9d
	and	al, 1
	jne	.label_239
	cmp	r14, rbp
	jae	.label_244
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_244:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_246
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_246:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_253
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_253:
	add	r14, 3
	mov	r9b, 1
.label_239:
	mov	rcx, r14
	cmp	rcx, rbp
	jae	.label_260
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + rcx], 0x5c
.label_260:
	lea	r14, [rcx + 1]
	mov	al, 1
	mov	r15b, 0x30
	cmp	r8d, 2
	je	.label_216
	lea	rdx, [r12 + 1]
	cmp	rdx, r11
	jae	.label_216
	mov	dl, byte ptr [r10 + rdx]
	add	dl, 0xd0
	cmp	dl, 9
	ja	.label_216
	cmp	r14, rbp
	jae	.label_283
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x30
.label_283:
	lea	rdx, [rcx + 2]
	cmp	rdx, rbp
	jae	.label_310
	mov	ebx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rdx], 0x30
	mov	esi, ebx
.label_310:
	add	rcx, 3
	xor	r13d, r13d
	mov	r14, rcx
	jmp	.label_193
.label_1078:
	mov	bl, 0x62
	jmp	.label_242
.label_1079:
	mov	cl, 0x74
	jmp	.label_255
.label_1080:
	mov	bl, 0x76
	jmp	.label_242
.label_1081:
	mov	bl, 0x66
	jmp	.label_242
.label_1082:
	mov	cl, 0x72
	jmp	.label_255
.label_1085:
	mov	r15b, 0x27
	mov	al, 1
	mov	qword ptr [rsp + 0xa8], rax
	cmp	r8d, 2
	jne	.label_289
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_211
	test	rbp, rbp
	sete	al
	mov	rcx, qword ptr [rsp + 0x68]
	mov	rdx, rcx
	test	rdx, rdx
	setne	cl
	or	cl, al
	cmove	rdx, rbp
	mov	qword ptr [rsp + 0x68], rdx
	mov	eax, 0
	cmove	rbp, rax
	cmp	r14, rbp
	jae	.label_298
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_298:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_313
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x5c
.label_313:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_316
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_316:
	add	r14, 3
	xor	r9d, r9d
.label_289:
	xor	eax, eax
	mov	r13b, 1
	jmp	.label_193
.label_1086:
	mov	r15b, 0x3f
	cmp	r8d, 5
	je	.label_195
	cmp	r8d, 2
	jne	.label_191
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_191
	jmp	.label_211
.label_1087:
	cmp	r8d, 2
	jne	.label_207
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_211
	mov	r15b, 0x5c
	xor	eax, eax
	jmp	.label_215
.label_312:
	cmp	qword ptr [rsp + 0xb8], 1
	mov	qword ptr [rsp + 0xa0], rbp
	mov	byte ptr [rsp + 0x1e], dil
	mov	dword ptr [rsp + 0x60], r9d
	mov	dword ptr [rsp + 0x94], esi
	jne	.label_217
	mov	qword ptr [rsp + 0x48], r11
	call	__ctype_b_loc
	mov	r10, qword ptr [rsp + 0x28]
	mov	rax, qword ptr [rax]
	movzx	r13d, word ptr [rax + r15*2]
	shr	r13d, 0xe
	and	r13b, 1
	mov	ebx, 1
	jmp	.label_229
.label_222:
	test	r12, r12
	jne	.label_240
	mov	cl, byte ptr [r10 + 1]
	test	cl, cl
	jne	.label_240
.label_192:
	mov	dl, 1
.label_1083:
	cmp	byte ptr [rsp + 0x27], 0
	je	.label_211
	xor	eax, eax
	mov	r13b, dl
.label_193:
	cmp	byte ptr [rsp + 0x36], 0
	je	.label_250
	cmp	qword ptr [rsp + 0x100], 0
	jne	.label_254
	jmp	.label_256
	.section	.text
	.align	32
	#Procedure 0x4038f4
	.globl sub_4038f4
	.type sub_4038f4, @function
sub_4038f4:

	nop	word ptr cs:[rax + rax]
.label_250:
	cmp	byte ptr [rsp + 0x35], 0
	je	.label_256
.label_254:
	mov	ecx, r15d
	shr	cl, 5
	movzx	edx, cl
	mov	ebx, esi
	mov	esi, 1
	mov	ecx, r15d
	shl	esi, cl
	test	bl, bl
	jne	.label_262
	mov	rcx, qword ptr [rsp + 0x100]
	and	esi, dword ptr [rcx + rdx*4]
	jmp	.label_266
	.section	.text
	.align	32
	#Procedure 0x40392d
	.globl sub_40392d
	.type sub_40392d, @function
sub_40392d:

	nop	dword ptr [rax]
.label_256:
	test	sil, sil
.label_266:
	mov	ebx, r15d
	je	.label_194
	jmp	.label_269
.label_262:
	mov	ebx, r15d
	jmp	.label_269
.label_233:
	cmp	dword ptr [rsp + 0x9c], 0
	jne	.label_252
	xor	r15d, r15d
	jmp	.label_191
.label_207:
	mov	cl, 0x5c
	cmp	byte ptr [rsp + 0x32], 0
	je	.label_255
	xor	eax, eax
	mov	r15b, 0x5c
.label_215:
	xor	r13d, r13d
	jmp	.label_194
.label_255:
	cmp	byte ptr [rsp + 0x27], 0
	mov	ebx, ecx
	je	.label_211
.label_242:
	xor	eax, eax
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r13d, 0
	je	.label_193
	nop	
.label_269:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_232
	cmp	r8d, 2
	jne	.label_290
	mov	eax, r9d
	and	al, 1
	jne	.label_290
	cmp	r14, rbp
	jae	.label_295
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_295:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_299
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x24
.label_299:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_304
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_304:
	add	r14, 3
	mov	r9b, 1
.label_290:
	cmp	r14, rbp
	jae	.label_311
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_311:
	inc	r14
	jmp	.label_294
.label_217:
	mov	qword ptr [rsp + 0x70], 0
	cmp	r11, -1
	jne	.label_307
	mov	rdi, r10
	call	strlen
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, rax
.label_307:
	cmp	byte ptr [rsp + 0x31], 0
	mov	qword ptr [rsp + 0x48], r11
	mov	qword ptr [rsp + 0x88], r12
	je	.label_227
	lea	rax, [r10 + r12]
	mov	qword ptr [rsp + 0xb0], rax
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbp, [rsp + 0x70]
.label_220:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbp
	call	rpl_mbrtowc
	mov	rbx, rax
	cmp	rbx, -2
	je	.label_208
	cmp	rbx, -1
	mov	r10, qword ptr [rsp + 0x28]
	movabs	rsi, 0x20000002b
	je	.label_223
	test	rbx, rbx
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_241
	cmp	rbx, 2
	mov	rbp, qword ptr [rsp + 0xa0]
	jb	.label_236
	mov	rax, qword ptr [rsp + 0x40]
	mov	rcx, qword ptr [rsp + 0xb0]
	lea	rax, [rcx + rax]
	mov	ecx, 1
	nop	dword ptr [rax]
.label_245:
	movsx	edx, byte ptr [rax + rcx]
	add	edx, -0x5b
	cmp	edx, 0x21
	ja	.label_235
	bt	rsi, rdx
	jb	.label_211
.label_235:
	inc	rcx
	cmp	rcx, rbx
	jb	.label_245
.label_236:
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	jne	.label_257
	xor	r13d, r13d
.label_257:
	lea	rbp, [rsp + 0x70]
	mov	r12, qword ptr [rsp + 0x40]
	add	r12, rbx
	mov	rdi, rbp
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_220
	jmp	.label_225
.label_216:
	xor	r13d, r13d
	jmp	.label_193
.label_240:
	mov	r11, -1
	xor	r13d, r13d
	jmp	.label_193
.label_195:
	cmp	dword ptr [rsp + 0x98], 0
	je	.label_191
	lea	rcx, [r12 + 2]
	cmp	rcx, r11
	jae	.label_191
	cmp	byte ptr [r10 + r12 + 1], 0x3f
	jne	.label_191
	movsx	edx, byte ptr [r10 + rcx]
	xor	eax, eax
	cmp	edx, 0x3e
	ja	.label_276
	mov	ebx, esi
	movabs	rsi, 0x7000a38200000000
	bt	rsi, rdx
	jae	.label_248
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_285
	cmp	r14, rbp
	jae	.label_287
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x3f
.label_287:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_293
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_293:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_273
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x22
.label_273:
	lea	rax, [r14 + 3]
	cmp	rax, rbp
	jae	.label_277
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], 0x3f
.label_277:
	add	r14, 4
	xor	eax, eax
	mov	r12, rcx
	mov	r15b, dl
.label_248:
	xor	r13d, r13d
	mov	esi, ebx
	jmp	.label_193
.label_191:
	xor	eax, eax
.label_226:
	xor	r13d, r13d
	jmp	.label_193
.label_227:
	mov	r13b, 1
	xor	r12d, r12d
	lea	rbx, [rsp + 0x70]
	nop	word ptr cs:[rax + rax]
.label_221:
	mov	rax, r12
	mov	qword ptr [rsp + 0x40], rax
	mov	rcx, qword ptr [rsp + 0x88]
	lea	rax, [r12 + rcx]
	mov	r12, rcx
	lea	rsi, [r10 + rax]
	mov	rdx, r11
	sub	rdx, rax
	lea	rdi, [rsp + 0x64]
	mov	rcx, rbx
	call	rpl_mbrtowc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_203
	cmp	rbp, -1
	je	.label_206
	cmp	rbp, -2
	je	.label_208
	mov	edi, dword ptr [rsp + 0x64]
	call	iswprint
	test	eax, eax
	mov	r12, qword ptr [rsp + 0x40]
	jne	.label_214
	xor	r13d, r13d
.label_214:
	add	r12, rbp
	lea	rbx, [rsp + 0x70]
	mov	rdi, rbx
	call	mbsinit
	test	eax, eax
	mov	r10, qword ptr [rsp + 0x28]
	mov	r11, qword ptr [rsp + 0x48]
	je	.label_221
	jmp	.label_225
.label_208:
	mov	r10, qword ptr [rsp + 0x28]
	mov	rsi, qword ptr [rsp + 0x40]
	lea	rax, [rsi + r12]
	mov	rdx, qword ptr [rsp + 0x48]
	cmp	rax, rdx
	jae	.label_234
	lea	rax, [r10 + r12]
.label_300:
	cmp	byte ptr [rax + rsi], 0
	je	.label_234
	lea	rcx, [r12 + rsi + 1]
	inc	rsi
	cmp	rcx, rdx
	jb	.label_300
.label_234:
	mov	qword ptr [rsp + 0x40], rsi
.label_223:
	xor	r13d, r13d
	jmp	.label_241
.label_206:
	xor	r13d, r13d
.label_203:
	mov	r10, qword ptr [rsp + 0x28]
.label_241:
	mov	r12, qword ptr [rsp + 0x40]
.label_225:
	mov	rbx, r12
	mov	r12, qword ptr [rsp + 0x88]
.label_229:
	and	r13b, 1
	mov	eax, r13d
	or	al, byte ptr [rsp + 0x33]
	cmp	rbx, 1
	mov	rbp, qword ptr [rsp + 0xa0]
	mov	dil, byte ptr [rsp + 0x1e]
	mov	r8, qword ptr [rsp + 0x38]
	mov	r9d, dword ptr [rsp + 0x60]
	mov	esi, dword ptr [rsp + 0x94]
	ja	.label_197
	test	al, al
	je	.label_197
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_193
.label_197:
	mov	byte ptr [rsp + 0x40], al
	add	rbx, r12
	xor	eax, eax
	mov	r11, qword ptr [rsp + 0x48]
	jmp	.label_265
	.section	.text
	.align	32
	#Procedure 0x403d27
	.globl sub_403d27
	.type sub_403d27, @function
sub_403d27:

	nop	word ptr [rax + rax]
.label_224:
	inc	r14
	mov	r15b, byte ptr [r10 + r12 + 1]
	mov	r12, rdx
.label_265:
	cmp	byte ptr [rsp + 0x40], 0
	je	.label_268
	test	sil, 1
	je	.label_274
	cmp	r14, rbp
	jae	.label_271
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + r14], 0x5c
.label_271:
	inc	r14
	xor	esi, esi
	jmp	.label_274
	.section	.text
	.align	32
	#Procedure 0x403d65
	.globl sub_403d65
	.type sub_403d65, @function
sub_403d65:

	nop	word ptr cs:[rax + rax]
.label_268:
	cmp	byte ptr [rsp + 0xf], 0
	jne	.label_232
	cmp	r8d, 2
	jne	.label_275
	mov	eax, r9d
	and	al, 1
	jne	.label_275
	cmp	r14, rbp
	jae	.label_284
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_284:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_288
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x24
.label_288:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_301
	mov	rdx, qword ptr [rsp + 0x10]
	mov	byte ptr [rdx + rax], 0x27
.label_301:
	add	r14, 3
	mov	r9b, 1
.label_275:
	cmp	r14, rbp
	jae	.label_302
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x5c
.label_302:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_219
	mov	edx, r15d
	shr	dl, 6
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_219:
	lea	rax, [r14 + 2]
	cmp	rax, rbp
	jae	.label_314
	mov	edx, r15d
	shr	dl, 3
	and	dl, 7
	or	dl, 0x30
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + rax], dl
	mov	esi, ecx
.label_314:
	add	r14, 3
	and	r15b, 7
	or	r15b, 0x30
	mov	al, 1
.label_274:
	lea	rdx, [r12 + 1]
	cmp	rbx, rdx
	jbe	.label_194
	test	r9b, 1
	je	.label_196
	mov	rcx, rbx
	mov	ebx, eax
	and	bl, 1
	jne	.label_264
	mov	r8, r12
	mov	r12d, esi
	cmp	r14, rbp
	jae	.label_201
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], 0x27
.label_201:
	lea	rsi, [r14 + 1]
	cmp	rsi, rbp
	jae	.label_209
	mov	rbx, qword ptr [rsp + 0x10]
	mov	byte ptr [rbx + rsi], 0x27
.label_209:
	add	r14, 2
	xor	r9d, r9d
	mov	esi, r12d
	mov	rbx, rcx
	mov	r12, r8
	mov	r8, qword ptr [rsp + 0x38]
	jmp	.label_196
	.section	.text
	.align	32
	#Procedure 0x403e76
	.globl sub_403e76
	.type sub_403e76, @function
sub_403e76:

	nop	word ptr cs:[rax + rax]
.label_264:
	mov	rbx, rcx
.label_196:
	cmp	r14, rbp
	jae	.label_224
	mov	ecx, esi
	mov	rsi, qword ptr [rsp + 0x10]
	mov	byte ptr [rsi + r14], r15b
	mov	esi, ecx
	jmp	.label_224
	.section	.text
	.align	32
	#Procedure 0x403e9e
	.globl sub_403e9e
	.type sub_403e9e, @function
sub_403e9e:

	nop	
.label_194:
	test	r9b, 1
	je	.label_231
	and	al, 1
	jne	.label_231
	cmp	r14, rbp
	jae	.label_237
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], 0x27
.label_237:
	lea	rax, [r14 + 1]
	cmp	rax, rbp
	jae	.label_212
	mov	rcx, qword ptr [rsp + 0x10]
	mov	byte ptr [rcx + rax], 0x27
.label_212:
	add	r14, 2
	xor	r9d, r9d
.label_231:
	mov	ebx, r15d
.label_294:
	cmp	r14, rbp
	jae	.label_247
	mov	rax, qword ptr [rsp + 0x10]
	mov	byte ptr [rax + r14], bl
.label_247:
	inc	r14
	shl	r13b, 7
	sar	r13b, 7
	and	r13b, dil
	mov	edi, r13d
	jmp	.label_252
.label_276:
	xor	r13d, r13d
	jmp	.label_193
	.section	.text
	.align	32
	#Procedure 0x403f01
	.globl sub_403f01
	.type sub_403f01, @function
sub_403f01:

	nop	word ptr cs:[rax + rax]
.label_281:
	mov	rcx, r12
.label_286:
	cmp	r8d, 2
	setne	al
	test	r14, r14
	setne	dl
	cmp	byte ptr [rsp + 0xf], 0
	je	.label_263
	or	al, dl
	jne	.label_263
	mov	r11, rcx
	jmp	.label_232
.label_211:
	mov	eax, 2
.label_204:
	mov	qword ptr [rsp + 0x38], rax
.label_232:
	mov	r9d, dword ptr [rsp + 0x20]
	cmp	byte ptr [rsp + 0x1f], 0
	mov	r8d, 4
	mov	rax, qword ptr [rsp + 0x38]
	cmove	r8d, eax
	cmp	eax, 2
	cmovne	r8d, eax
	and	r9d, 0xfffffffd
	sub	rsp, 8
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, rbp
	mov	rdx, r10
	mov	rcx, r11
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	0
	call	quotearg_buffer_restyled
	add	rsp, 0x20
.label_303:
	mov	r14, rax
.label_198:
	mov	rax, r14
	add	rsp, 0xc8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_251:
	mov	rdx, qword ptr [rsp + 0x58]
	test	rdx, rdx
	je	.label_296
	cmp	byte ptr [rsp + 0xf], 0
	mov	rcx, qword ptr [rsp + 0x10]
	jne	.label_200
	mov	al, byte ptr [rdx]
	test	al, al
	je	.label_200
	inc	rdx
	nop	dword ptr [rax + rax]
.label_308:
	cmp	r14, rbp
	jae	.label_306
	mov	byte ptr [rcx + r14], al
.label_306:
	inc	r14
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	al, al
	jne	.label_308
	jmp	.label_200
.label_261:
	sub	rsp, 8
	mov	r8d, 5
	mov	rdi, qword ptr [rsp + 0x18]
	mov	rsi, qword ptr [rsp + 0x70]
	mov	rdx, qword ptr [rsp + 0x30]
	mov	r9d, dword ptr [rsp + 0x28]
	push	qword ptr [rsp + 0x80]
	push	qword ptr [rsp + 0x90]
	push	qword ptr [rsp + 0x118]
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	jmp	.label_303
.label_296:
	mov	rcx, qword ptr [rsp + 0x10]
.label_200:
	cmp	r14, rbp
	jae	.label_198
	mov	byte ptr [rcx + r14], 0
	jmp	.label_198
.label_285:
	mov	eax, 5
	jmp	.label_204
.label_291:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404050
	.globl quotearg_alloc
	.type quotearg_alloc, @function
quotearg_alloc:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	rbx, rsi
	mov	qword ptr [rsp + 8], rbx
	mov	r12, rdi
	test	rdx, rdx
	mov	r14d, OFFSET FLAT:default_quoting_options
	cmovne	r14, rdx
	call	__errno_location
	mov	qword ptr [rsp + 0x10], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	mov	r8d, dword ptr [r14]
	mov	ebp, dword ptr [r14 + 4]
	or	ebp, 1
	lea	r15, [r14 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	inc	rbx
	mov	rdi, rbx
	call	xmalloc
	mov	r13, rax
	mov	r8d, dword ptr [r14]
	sub	rsp, 8
	mov	rdi, r13
	mov	rsi, rbx
	mov	rdx, r12
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, ebp
	push	qword ptr [r14 + 0x30]
	push	qword ptr [r14 + 0x28]
	push	r15
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	eax, dword ptr [rsp + 4]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	dword ptr [rcx], eax
	mov	rax, r13
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x404111
	.globl sub_404111
	.type sub_404111, @function
sub_404111:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404120
	.globl quotearg_alloc_mem
	.type quotearg_alloc_mem, @function
quotearg_alloc_mem:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rdx
	mov	qword ptr [rsp + 0x18], rbx
	mov	r14, rsi
	mov	qword ptr [rsp + 0x10], r14
	mov	r15, rdi
	mov	qword ptr [rsp + 8], r15
	test	rcx, rcx
	mov	r12d, OFFSET FLAT:default_quoting_options
	cmovne	r12, rcx
	call	__errno_location
	mov	qword ptr [rsp + 0x20], rax
	mov	ecx, dword ptr [rax]
	mov	dword ptr [rsp + 4], ecx
	xor	ebp, ebp
	test	rbx, rbx
	sete	bpl
	or	ebp, dword ptr [r12 + 4]
	mov	r8d, dword ptr [r12]
	lea	r13, [r12 + 8]
	sub	rsp, 8
	xor	edi, edi
	xor	esi, esi
	mov	rdx, r15
	mov	rcx, r14
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rbx, rax
	lea	r15, [rbx + 1]
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	r8d, dword ptr [r12]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x10]
	mov	rcx, qword ptr [rsp + 0x18]
	mov	r9d, ebp
	push	qword ptr [r12 + 0x30]
	push	qword ptr [r12 + 0x28]
	push	r13
	call	quotearg_buffer_restyled
	mov	rax, qword ptr [rsp + 0x38]
	add	rsp, 0x20
	test	rax, rax
	mov	ecx, dword ptr [rsp + 4]
	mov	rdx, qword ptr [rsp + 0x20]
	mov	dword ptr [rdx], ecx
	je	.label_317
	mov	qword ptr [rax], rbx
.label_317:
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40420c
	.globl sub_40420c
	.type sub_40420c, @function
sub_40420c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404210
	.globl quotearg_free
	.type quotearg_free, @function
quotearg_free:

	push	r15
	push	r14
	push	rbx
	mov	r14, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  2
	jl	.label_318
	lea	r15, [r14 + 0x18]
	mov	ebx, 1
	nop	
.label_320:
	mov	rdi, qword ptr [r15]
	call	free
	inc	rbx
	movsxd	rax, dword ptr [rip + nslots]
	add	r15, 0x10
	cmp	rbx, rax
	jl	.label_320
.label_318:
	mov	rdi, qword ptr [r14 + 8]
	mov	eax, OFFSET FLAT:slot0
	cmp	rdi, rax
	je	.label_321
	call	free
	mov	qword ptr [rip + slotvec0],  0x100
	mov	qword ptr [rip + label_322], OFFSET FLAT:slot0
.label_321:
	mov	eax, OFFSET FLAT:slotvec0
	cmp	r14, rax
	je	.label_319
	mov	rdi, r14
	call	free
	mov	qword ptr [rip + slotvec], OFFSET FLAT:slotvec0
.label_319:
	mov	dword ptr [rip + nslots],  1
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4042a1
	.globl sub_4042a1
	.type sub_4042a1, @function
sub_4042a1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4042b0
	.globl quotearg_n
	.type quotearg_n, @function
quotearg_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4042be
	.globl sub_4042be
	.type sub_4042be, @function
sub_4042be:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4042c0

	.globl quotearg_n_options
	.type quotearg_n_options, @function
quotearg_n_options:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x28
	mov	rbx, rcx
	mov	r15, rdx
	mov	qword ptr [rsp + 0x20], rsi
	mov	r12d, edi
	call	__errno_location
	mov	r13, rax
	test	r12d, r12d
	js	.label_323
	mov	eax, dword ptr [r13]
	mov	rbp, qword ptr [rip + slotvec]
	cmp	dword ptr [rip + nslots],  r12d
	mov	qword ptr [rsp + 0x18], r13
	mov	dword ptr [rsp], eax
	mov	qword ptr [rsp + 0x10], rbx
	mov	qword ptr [rsp + 8], r15
	jg	.label_326
	cmp	r12d, 0x7fffffff
	je	.label_328
	mov	ebx, OFFSET FLAT:slotvec0
	xor	edi, edi
	cmp	rbp, rbx
	cmovne	rdi, rbp
	lea	r15d, [r12 + 1]
	movsxd	rsi, r12d
	shl	rsi, 4
	add	rsi, 0x10
	call	xrealloc
	mov	r14, rax
	cmp	rbp, rbx
	mov	qword ptr [rip + slotvec],  r14
	jne	.label_324
	movups	xmm0, xmmword ptr [rip + slotvec0]
	movups	xmmword ptr [r14], xmm0
.label_324:
	movsxd	rax, dword ptr [rip + nslots]
	movsxd	rbp, r15d
	mov	rdx, rbp
	sub	rdx, rax
	shl	rax, 4
	mov	rdi, r14
	add	rdi, rax
	shl	rdx, 4
	xor	esi, esi
	call	memset
	mov	dword ptr [rip + nslots],  ebp
	mov	rbp, r14
	mov	rbx, qword ptr [rsp + 0x10]
	mov	r15, qword ptr [rsp + 8]
.label_326:
	movsxd	r13, r12d
	shl	r13, 4
	mov	r12, qword ptr [rbp + r13]
	mov	r14, qword ptr [rbp + r13 + 8]
	mov	r8d, dword ptr [rbx]
	mov	r9d, dword ptr [rbx + 4]
	or	r9d, 1
	lea	rax, [rbx + 8]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r12
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, r15
	mov	dword ptr [rsp + 0xc], r9d
	push	qword ptr [rbx + 0x30]
	push	qword ptr [rbx + 0x28]
	mov	rbx, rax
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	r15, rax
	cmp	r12, r15
	jbe	.label_329
	mov	rax, qword ptr [rsp + 0x18]
	mov	ebp, dword ptr [rsp]
	jmp	.label_325
.label_329:
	lea	rax, [rbp + r13]
	lea	r12, [rbp + r13 + 8]
	inc	r15
	mov	qword ptr [rax], r15
	mov	eax, OFFSET FLAT:slot0
	cmp	r14, rax
	mov	ebp, dword ptr [rsp]
	je	.label_327
	mov	rdi, r14
	call	free
.label_327:
	mov	rdi, r15
	call	xmalloc
	mov	r14, rax
	mov	qword ptr [r12], r14
	mov	rax, qword ptr [rsp + 0x10]
	mov	r8d, dword ptr [rax]
	sub	rsp, 8
	mov	rdi, r14
	mov	rsi, r15
	mov	rdx, qword ptr [rsp + 0x28]
	mov	rcx, qword ptr [rsp + 0x10]
	mov	r9d, dword ptr [rsp + 0xc]
	push	qword ptr [rax + 0x30]
	push	qword ptr [rax + 0x28]
	push	rbx
	call	quotearg_buffer_restyled
	add	rsp, 0x20
	mov	rax, qword ptr [rsp + 0x18]
.label_325:
	mov	dword ptr [rax], ebp
	mov	rax, r14
	add	rsp, 0x28
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_323:
	call	abort
.label_328:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40447d
	.globl sub_40447d
	.type sub_40447d, @function
sub_40447d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404480
	.globl quotearg_n_mem
	.type quotearg_n_mem, @function
quotearg_n_mem:

	mov	ecx, OFFSET FLAT:default_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x40448a
	.globl sub_40448a
	.type sub_40448a, @function
sub_40448a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404490
	.globl quotearg
	.type quotearg, @function
quotearg:

	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4044a9
	.globl sub_4044a9
	.type sub_4044a9, @function
sub_4044a9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4044b0
	.globl quotearg_mem
	.type quotearg_mem, @function
quotearg_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:default_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x4044c8
	.globl sub_4044c8
	.type sub_4044c8, @function
sub_4044c8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4044d0

	.globl quotearg_n_style
	.type quotearg_n_style, @function
quotearg_n_style:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_330
	mov	dword ptr [rsp + 0x40], esi
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_330:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x40453c
	.globl sub_40453c
	.type sub_40453c, @function
sub_40453c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404540
	.globl quotearg_n_style_mem
	.type quotearg_n_style_mem, @function
quotearg_n_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_331
	mov	dword ptr [rsp + 0x40], esi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rax, [rsp + 0x40]
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_331:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4045a8
	.globl sub_4045a8
	.type sub_4045a8, @function
sub_4045a8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4045b0

	.globl quotearg_style
	.type quotearg_style, @function
quotearg_style:
	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_332
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	mov	rdx, -1
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_332:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404618
	.globl sub_404618
	.type sub_404618, @function
sub_404618:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404620
	.globl quotearg_style_mem
	.type quotearg_style_mem, @function
quotearg_style_mem:

	sub	rsp, 0x78
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	edi, 0xa
	je	.label_333
	mov	dword ptr [rsp + 0x40], edi
	mov	eax, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x74], eax
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movups	xmmword ptr [rsp + 0x64], xmm2
	movups	xmmword ptr [rsp + 0x54], xmm1
	movups	xmmword ptr [rsp + 0x44], xmm0
	lea	rcx, [rsp + 0x40]
	xor	edi, edi
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_333:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404681
	.globl sub_404681
	.type sub_404681, @function
sub_404681:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404690
	.globl quotearg_char_mem
	.type quotearg_char_mem, @function
quotearg_char_mem:

	sub	rsp, 0x38
	mov	ecx, edx
	mov	r8, rsi
	mov	rdx, rdi
	mov	rsi, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rsi
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	eax, ecx
	shr	al, 5
	movzx	eax, al
	mov	esi, dword ptr [rsp + rax*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rax*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, r8
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x4046fe
	.globl sub_4046fe
	.type sub_4046fe, @function
sub_4046fe:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404700
	.globl quotearg_char
	.type quotearg_char, @function
quotearg_char:

	sub	rsp, 0x38
	mov	ecx, esi
	mov	rax, rdi
	mov	rdx, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rdx
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	edx, ecx
	shr	dl, 5
	movzx	edx, dl
	mov	esi, dword ptr [rsp + rdx*4 + 8]
	mov	edi, esi
	shr	edi, cl
	not	edi
	and	edi, 1
	shl	edi, cl
	xor	edi, esi
	mov	dword ptr [rsp + rdx*4 + 8], edi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x40476f
	.globl sub_40476f
	.type sub_40476f, @function
sub_40476f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404770

	.globl quotearg_colon
	.type quotearg_colon, @function
quotearg_colon:
	sub	rsp, 0x38
	mov	rax, rdi
	mov	rcx, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x4047c5
	.globl sub_4047c5
	.type sub_4047c5, @function
sub_4047c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4047d0
	.globl quotearg_colon_mem
	.type quotearg_colon_mem, @function
quotearg_colon_mem:

	sub	rsp, 0x38
	mov	rax, rsi
	mov	rdx, rdi
	mov	rcx, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
	.section	.text
	.align	32
	#Procedure 0x404824
	.globl sub_404824
	.type sub_404824, @function
sub_404824:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404830

	.globl quotearg_n_style_colon
	.type quotearg_n_style_colon, @function
quotearg_n_style_colon:
	sub	rsp, 0x78
	mov	rax, rdx
	xorps	xmm0, xmm0
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp + 0x30], 0
	cmp	esi, 0xa
	je	.label_337
	mov	ecx, dword ptr [rsp + 0x30]
	mov	dword ptr [rsp + 0x70], ecx
	movaps	xmm0, xmmword ptr [rsp]
	movaps	xmm1, xmmword ptr [rsp + 0x10]
	movaps	xmm2, xmmword ptr [rsp + 0x20]
	movaps	xmmword ptr [rsp + 0x60], xmm2
	movaps	xmmword ptr [rsp + 0x50], xmm1
	movaps	xmmword ptr [rsp + 0x40], xmm0
	mov	dword ptr [rsp], esi
	mov	ecx, dword ptr [rsp + 0x70]
	mov	dword ptr [rsp + 0x34], ecx
	movaps	xmm0, xmmword ptr [rsp + 0x40]
	movaps	xmm1, xmmword ptr [rsp + 0x50]
	movaps	xmm2, xmmword ptr [rsp + 0x60]
	movups	xmmword ptr [rsp + 0x24], xmm2
	movups	xmmword ptr [rsp + 0x14], xmm1
	movups	xmmword ptr [rsp + 4], xmm0
	or	byte ptr [rsp + 0xf], 4
	lea	rcx, [rsp]
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x78
	ret	
.label_337:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4048c5
	.globl sub_4048c5
	.type sub_4048c5, @function
sub_4048c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4048d0
	.globl quotearg_n_custom
	.type quotearg_n_custom, @function
quotearg_n_custom:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_338
	test	rdx, rdx
	je	.label_338
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rdx, -1
	mov	rsi, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_338:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x40493e
	.globl sub_40493e
	.type sub_40493e, @function
sub_40493e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x404940
	.globl quotearg_n_custom_mem
	.type quotearg_n_custom_mem, @function
quotearg_n_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rsi, rsi
	je	.label_339
	test	rdx, rdx
	je	.label_339
	mov	qword ptr [rsp + 0x28], rsi
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp]
	mov	rsi, rcx
	mov	rdx, r8
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_339:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4049aa
	.globl sub_4049aa
	.type sub_4049aa, @function
sub_4049aa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4049b0
	.globl quotearg_custom
	.type quotearg_custom, @function
quotearg_custom:

	sub	rsp, 0x38
	mov	rax, rdx
	mov	rcx, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rcx
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_340
	test	rsi, rsi
	je	.label_340
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rcx, [rsp]
	xor	edi, edi
	mov	rdx, -1
	mov	rsi, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_340:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404a20
	.globl quotearg_custom_mem
	.type quotearg_custom_mem, @function
quotearg_custom_mem:

	sub	rsp, 0x38
	mov	rax, qword ptr [rip + label_334]
	mov	qword ptr [rsp + 0x30], rax
	movups	xmm0, xmmword ptr [rip + label_335]
	movaps	xmmword ptr [rsp + 0x20], xmm0
	movups	xmm0, xmmword ptr [rip + label_336]
	movaps	xmmword ptr [rsp + 0x10], xmm0
	movups	xmm0, xmmword ptr [rip + default_quoting_options]
	movaps	xmmword ptr [rsp], xmm0
	mov	dword ptr [rsp], 0xa
	test	rdi, rdi
	je	.label_341
	test	rsi, rsi
	je	.label_341
	mov	qword ptr [rsp + 0x28], rdi
	mov	qword ptr [rsp + 0x30], rsi
	lea	rax, [rsp]
	xor	edi, edi
	mov	rsi, rdx
	mov	rdx, rcx
	mov	rcx, rax
	call	quotearg_n_options
	add	rsp, 0x38
	ret	
.label_341:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x404a8c
	.globl sub_404a8c
	.type sub_404a8c, @function
sub_404a8c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404a90
	.globl quote_n_mem
	.type quote_n_mem, @function
quote_n_mem:

	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x404a9a
	.globl sub_404a9a
	.type sub_404a9a, @function
sub_404a9a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404aa0
	.globl quote_mem
	.type quote_mem, @function
quote_mem:

	mov	rax, rsi
	mov	rdx, rdi
	xor	edi, edi
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rdx
	mov	rdx, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x404ab8
	.globl sub_404ab8
	.type sub_404ab8, @function
sub_404ab8:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ac0
	.globl quote_n
	.type quote_n, @function
quote_n:

	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x404ad1
	.globl sub_404ad1
	.type sub_404ad1, @function
sub_404ad1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404ae0

	.globl quote
	.type quote, @function
quote:
	mov	rax, rdi
	xor	edi, edi
	mov	rdx, -1
	mov	ecx, OFFSET FLAT:quote_quoting_options
	mov	rsi, rax
	jmp	quotearg_n_options
	.section	.text
	.align	32
	#Procedure 0x404af9
	.globl sub_404af9
	.type sub_404af9, @function
sub_404af9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x404b00

	.globl gettext_quote
	.type gettext_quote, @function
gettext_quote:
	push	rbp
	push	rbx
	push	rax
	mov	ebp, esi
	mov	rbx, rdi
	xor	edi, edi
	mov	edx, 5
	mov	rsi, rbx
	call	dcgettext
	cmp	rax, rbx
	jne	.label_343
	call	locale_charset
	movsx	ecx, byte ptr [rax]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x47
	je	.label_348
	cmp	ecx, 0x55
	jne	.label_342
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x54
	jne	.label_342
	movsx	ecx, byte ptr [rax + 2]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x46
	jne	.label_342
	cmp	byte ptr [rax + 3], 0x2d
	jne	.label_342
	cmp	byte ptr [rax + 4], 0x38
	jne	.label_342
	cmp	byte ptr [rax + 5], 0
	jne	.label_342
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_345
	mov	eax, OFFSET FLAT:label_346
	jmp	.label_347
.label_348:
	movsx	ecx, byte ptr [rax + 1]
	and	ecx, 0xffffffdf
	cmp	ecx, 0x42
	jne	.label_342
	cmp	byte ptr [rax + 2], 0x31
	jne	.label_342
	cmp	byte ptr [rax + 3], 0x38
	jne	.label_342
	cmp	byte ptr [rax + 4], 0x30
	jne	.label_342
	cmp	byte ptr [rax + 5], 0x33
	jne	.label_342
	cmp	byte ptr [rax + 6], 0x30
	jne	.label_342
	cmp	byte ptr [rax + 7], 0
	je	.label_344
.label_342:
	cmp	ebp, 9
	mov	ecx, OFFSET FLAT:label_258
	mov	eax, OFFSET FLAT:label_243
.label_347:
	cmove	rax, rcx
.label_343:
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
.label_344:
	cmp	byte ptr [rbx], 0x60
	mov	ecx, OFFSET FLAT:label_349
	mov	eax, OFFSET FLAT:label_350
	jmp	.label_347
	.section	.text
	.align	32
	#Procedure 0x404bc5
	.globl sub_404bc5
	.type sub_404bc5, @function
sub_404bc5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404bd0

	.globl get_root_dev_ino
	.type get_root_dev_ino, @function
get_root_dev_ino:
	push	rbx
	sub	rsp, 0x90
	mov	rbx, rdi
	lea	rdx, [rsp]
	mov	edi, 1
	mov	esi, OFFSET FLAT:label_45
	call	__lxstat
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_351
	mov	rax, qword ptr [rsp + 8]
	mov	qword ptr [rbx], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbx + 8], rax
	mov	rax, rbx
.label_351:
	add	rsp, 0x90
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x404c12
	.globl sub_404c12
	.type sub_404c12, @function
sub_404c12:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404c20

	.globl version_etc_arn
	.type version_etc_arn, @function
version_etc_arn:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, r9
	mov	r15, r8
	mov	r9, rcx
	mov	rbx, rdx
	mov	rcx, rsi
	mov	r14, rdi
	mov	esi, 1
	test	rcx, rcx
	je	.label_364
	mov	edx, OFFSET FLAT:label_355
	xor	eax, eax
	mov	rdi, r14
	mov	r8, rbx
	call	__fprintf_chk
	jmp	.label_361
.label_364:
	mov	edx, OFFSET FLAT:label_362
	xor	eax, eax
	mov	rdi, r14
	mov	rcx, rbx
	mov	r8, r9
	call	__fprintf_chk
.label_361:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_366
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	esi, 1
	mov	edx, OFFSET FLAT:version_etc_copyright
	mov	r8d, 0x7e3
	xor	eax, eax
	mov	rdi, r14
	call	__fprintf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_363
	mov	edx, 5
	call	dcgettext
	mov	rdi, rax
	mov	rsi, r14
	call	fputs_unlocked
	cmp	r12, 9
	ja	.label_367
	jmp	qword ptr [(r12 * 8) + label_368]
.label_1112:
	add	rsp, 8
	jmp	.label_354
.label_367:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_358
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_354
.label_1113:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_353
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_1114:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_359
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_1115:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_356
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
.label_1116:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_370
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	xor	eax, eax
	mov	rdi, r14
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_354
.label_1117:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_369
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x18
	jmp	.label_354
.label_1118:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_352
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_354
.label_1119:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_357
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x28
	jmp	.label_354
.label_1121:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_360
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x40]
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
	jmp	.label_354
.label_1120:
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_365
	mov	edx, 5
	call	dcgettext
	mov	rdx, rax
	mov	rcx, qword ptr [r15]
	mov	r8, qword ptr [r15 + 8]
	mov	r9, qword ptr [r15 + 0x10]
	sub	rsp, 8
	mov	esi, 1
	mov	eax, 0
	mov	rdi, r14
	push	qword ptr [r15 + 0x38]
	push	qword ptr [r15 + 0x30]
	push	qword ptr [r15 + 0x28]
	push	qword ptr [r15 + 0x20]
	push	qword ptr [r15 + 0x18]
	call	__fprintf_chk
	add	rsp, 0x38
.label_354:
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x404f78
	.globl sub_404f78
	.type sub_404f78, @function
sub_404f78:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404f80
	.globl version_etc_ar
	.type version_etc_ar, @function
version_etc_ar:

	mov	r9, -1
	nop	word ptr [rax + rax]
.label_371:
	cmp	qword ptr [r8 + r9*8 + 8], 0
	lea	r9, [r9 + 1]
	jne	.label_371
	jmp	version_etc_arn
	.section	.text
	.align	32
	#Procedure 0x404fa1
	.globl sub_404fa1
	.type sub_404fa1, @function
sub_404fa1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x404fb0

	.globl version_etc_va
	.type version_etc_va, @function
version_etc_va:
	movsxd	r10, dword ptr [r8]
	cmp	r10, 0x28
	ja	.label_382
	mov	r9, r10
	add	r9, qword ptr [r8 + 0x10]
	lea	r10d, [r10 + 8]
	mov	dword ptr [r8], r10d
	jmp	.label_384
.label_382:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_384:
	sub	rsp, 0x58
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp], rax
	xor	r9d, r9d
	test	rax, rax
	je	.label_372
	cmp	r10d, 0x29
	jae	.label_381
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_383
.label_381:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_383:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 8], rax
	mov	r9d, 1
	test	rax, rax
	je	.label_372
	cmp	r10d, 0x29
	jae	.label_379
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_380
.label_379:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_380:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x10], rax
	mov	r9d, 2
	test	rax, rax
	je	.label_372
	cmp	r10d, 0x29
	jae	.label_377
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_378
.label_377:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_378:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x18], rax
	mov	r9d, 3
	test	rax, rax
	je	.label_372
	cmp	r10d, 0x29
	jae	.label_375
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_376
.label_375:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_376:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x20], rax
	mov	r9d, 4
	test	rax, rax
	je	.label_372
	cmp	r10d, 0x29
	jae	.label_373
	movsxd	r9, r10d
	add	r9, qword ptr [r8 + 0x10]
	add	r10d, 8
	mov	dword ptr [r8], r10d
	jmp	.label_374
.label_373:
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
.label_374:
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x28], rax
	mov	r9d, 5
	test	rax, rax
	je	.label_372
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x30], rax
	mov	r9d, 6
	test	rax, rax
	je	.label_372
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x38], rax
	mov	r9d, 7
	test	rax, rax
	je	.label_372
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x40], rax
	mov	r9d, 8
	test	rax, rax
	je	.label_372
	mov	r9, qword ptr [r8 + 8]
	lea	rax, [r9 + 8]
	mov	qword ptr [r8 + 8], rax
	mov	rax, qword ptr [r9]
	mov	qword ptr [rsp + 0x48], rax
	cmp	rax, 1
	mov	r9d, 9
	sbb	r9, -1
.label_372:
	lea	r8, [rsp]
	call	version_etc_arn
	add	rsp, 0x58
	ret	
	.section	.text
	.align	32
	#Procedure 0x405192
	.globl sub_405192
	.type sub_405192, @function
sub_405192:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4051a0

	.globl version_etc
	.type version_etc, @function
version_etc:
	sub	rsp, 0xd8
	test	al, al
	je	.label_385
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_385:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x20
	lea	r8, [rsp]
	call	version_etc_va
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	32
	#Procedure 0x405223
	.globl sub_405223
	.type sub_405223, @function
sub_405223:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405230
	.globl emit_bug_reporting_address
	.type emit_bug_reporting_address, @function
emit_bug_reporting_address:

	push	rax
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_386
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_387
	xor	eax, eax
	mov	rsi, rcx
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_389
	mov	edx, 5
	call	dcgettext
	mov	rsi, rax
	mov	edi, 1
	mov	edx, OFFSET FLAT:label_19
	mov	ecx, OFFSET FLAT:label_11
	xor	eax, eax
	call	__printf_chk
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_388
	mov	edx, 5
	call	dcgettext
	mov	rsi, qword ptr [rip + stdout]
	mov	rdi, rax
	pop	rax
	jmp	fputs_unlocked
	.section	.text
	.align	32
	#Procedure 0x4052a4
	.globl sub_4052a4
	.type sub_4052a4, @function
sub_4052a4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4052b0
	.globl xnmalloc
	.type xnmalloc, @function
xnmalloc:

	push	rbx
	mov	rbx, rsi
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rdi
	jb	.label_390
	imul	rbx, rdi
	mov	rdi, rbx
	call	malloc
	test	rbx, rbx
	je	.label_391
	test	rax, rax
	je	.label_390
.label_391:
	pop	rbx
	ret	
.label_390:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4052e5
	.globl sub_4052e5
	.type sub_4052e5, @function
sub_4052e5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4052f0

	.globl xmalloc
	.type xmalloc, @function
xmalloc:
	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_392
	test	rax, rax
	je	.label_393
.label_392:
	pop	rbx
	ret	
.label_393:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40530a
	.globl sub_40530a
	.type sub_40530a, @function
sub_40530a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405310
	.globl xnrealloc
	.type xnrealloc, @function
xnrealloc:

	push	rbx
	mov	rbx, rdx
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rsi
	jb	.label_394
	imul	rbx, rsi
	test	rdi, rdi
	je	.label_395
	test	rbx, rbx
	jne	.label_395
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_395:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_396
	test	rax, rax
	je	.label_394
.label_396:
	pop	rbx
	ret	
.label_394:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x405358
	.globl sub_405358
	.type sub_405358, @function
sub_405358:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405360

	.globl xrealloc
	.type xrealloc, @function
xrealloc:
	push	rbx
	mov	rbx, rsi
	test	rdi, rdi
	je	.label_397
	test	rbx, rbx
	jne	.label_397
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_397:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_399
	test	rax, rax
	je	.label_398
.label_399:
	pop	rbx
	ret	
.label_398:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x405390
	.globl x2nrealloc
	.type x2nrealloc, @function
x2nrealloc:

	push	rbx
	mov	rbx, rdx
	mov	rcx, qword ptr [rsi]
	test	rdi, rdi
	je	.label_403
	movabs	rax, 0x5555555555555554
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jbe	.label_405
	mov	rax, rcx
	shr	rax, 1
	lea	rcx, [rcx + rax + 1]
	jmp	.label_400
.label_403:
	test	rcx, rcx
	jne	.label_406
	mov	eax, 0x80
	xor	edx, edx
	div	rbx
	xor	ecx, ecx
	cmp	rbx, 0x80
	seta	cl
	add	rcx, rax
.label_406:
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rbx
	cmp	rax, rcx
	jb	.label_401
.label_400:
	mov	qword ptr [rsi], rcx
	imul	rbx, rcx
	test	rdi, rdi
	je	.label_402
	test	rbx, rbx
	jne	.label_402
	call	free
	xor	eax, eax
	pop	rbx
	ret	
.label_402:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_404
	test	rax, rax
	je	.label_405
.label_404:
	pop	rbx
	ret	
.label_405:
	call	xalloc_die
.label_401:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x405427
	.globl sub_405427
	.type sub_405427, @function
sub_405427:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405430
	.globl xcharalloc
	.type xcharalloc, @function
xcharalloc:

	push	rbx
	mov	rbx, rdi
	call	malloc
	test	rbx, rbx
	je	.label_407
	test	rax, rax
	je	.label_408
.label_407:
	pop	rbx
	ret	
.label_408:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40544a
	.globl sub_40544a
	.type sub_40544a, @function
sub_40544a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405450
	.globl x2realloc
	.type x2realloc, @function
x2realloc:

	push	rbx
	mov	rax, qword ptr [rsi]
	test	rdi, rdi
	je	.label_411
	movabs	rcx, 0x5555555555555554
	cmp	rax, rcx
	jae	.label_413
	mov	rbx, rax
	shr	rbx, 1
	add	rbx, rax
	inc	rbx
	mov	qword ptr [rsi], rbx
	jne	.label_410
	call	free
	xor	eax, eax
	jmp	.label_412
.label_411:
	test	rax, rax
	mov	ebx, 0x80
	cmovne	rbx, rax
	test	rbx, rbx
	js	.label_409
	mov	qword ptr [rsi], rbx
.label_410:
	mov	rsi, rbx
	call	realloc
	test	rbx, rbx
	je	.label_412
	test	rax, rax
	je	.label_409
.label_412:
	pop	rbx
	ret	
.label_409:
	call	xalloc_die
.label_413:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4054b4
	.globl sub_4054b4
	.type sub_4054b4, @function
sub_4054b4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4054c0
	.globl xzalloc
	.type xzalloc, @function
xzalloc:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rdi
	call	malloc
	mov	r14, rax
	test	rbx, rbx
	je	.label_415
	test	r14, r14
	je	.label_414
.label_415:
	xor	esi, esi
	mov	rdi, r14
	mov	rdx, rbx
	call	memset
	mov	rax, r14
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_414:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4054f6
	.globl sub_4054f6
	.type sub_4054f6, @function
sub_4054f6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405500
	.globl xcalloc
	.type xcalloc, @function
xcalloc:

	push	rax
	movabs	rax, 0x7fffffffffffffff
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	jb	.label_416
	call	rpl_calloc
	test	rax, rax
	je	.label_416
	pop	rcx
	ret	
.label_416:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x405526
	.globl sub_405526
	.type sub_405526, @function
sub_405526:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405530

	.globl xmemdup
	.type xmemdup, @function
xmemdup:
	push	r15
	push	r14
	push	rbx
	mov	rbx, rsi
	mov	r14, rdi
	mov	rdi, rbx
	call	malloc
	mov	r15, rax
	test	rbx, rbx
	je	.label_417
	test	r15, r15
	je	.label_418
.label_417:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_418:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40556c
	.globl sub_40556c
	.type sub_40556c, @function
sub_40556c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405570

	.globl xstrdup
	.type xstrdup, @function
xstrdup:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 1]
	call	malloc
	mov	r15, rax
	inc	rbx
	je	.label_420
	test	r15, r15
	je	.label_419
.label_420:
	mov	rdi, r15
	mov	rsi, r14
	mov	rdx, rbx
	call	memcpy
	mov	rax, r15
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_419:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x4055b2
	.globl sub_4055b2
	.type sub_4055b2, @function
sub_4055b2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4055c0

	.globl xalloc_die
	.type xalloc_die, @function
xalloc_die:
	push	rbx
	mov	ebx, dword ptr [rip + exit_failure]
	xor	edi, edi
	mov	esi, OFFSET FLAT:label_421
	mov	edx, 5
	call	dcgettext
	mov	rcx, rax
	xor	esi, esi
	mov	edx, OFFSET FLAT:label_144
	xor	eax, eax
	mov	edi, ebx
	call	error
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4055f0

	.globl xfts_open
	.type xfts_open, @function
xfts_open:
	push	rax
	or	esi, 0x200
	call	rpl_fts_open
	test	rax, rax
	je	.label_423
	pop	rcx
	ret	
.label_423:
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_422
	mov	edi, OFFSET FLAT:label_424
	mov	esi, OFFSET FLAT:label_425
	mov	edx, 0x29
	mov	ecx, OFFSET FLAT:label_426
	call	__assert_fail
.label_422:
	call	xalloc_die
	.section	.text
	.align	32
	#Procedure 0x40562b
	.globl sub_40562b
	.type sub_40562b, @function
sub_40562b:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405630

	.globl cycle_warning_required
	.type cycle_warning_required, @function
cycle_warning_required:
	mov	ecx, dword ptr [rdi + 0x48]
	and	ecx, 0x11
	mov	al, 1
	cmp	ecx, 0x10
	je	.label_427
	cmp	ecx, 0x11
	jne	.label_428
	cmp	qword ptr [rsi + 0x58], 0
	setne	al
.label_427:
	ret	
.label_428:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x40564e
	.globl sub_40564e
	.type sub_40564e, @function
sub_40564e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x405650

	.globl xstrtoul
	.type xstrtoul, @function
xstrtoul:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x18
	mov	r14, r8
	mov	r12d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	cmp	r12d, 0x25
	jae	.label_441
	mov	qword ptr [rsp], rcx
	call	__errno_location
	mov	r15, rax
	mov	dword ptr [r15], 0
	call	__ctype_b_loc
	mov	rcx, qword ptr [rax]
	mov	rdx, rbx
	nop	word ptr cs:[rax + rax]
.label_434:
	movzx	eax, byte ptr [rdx]
	inc	rdx
	test	byte ptr [rcx + rax*2 + 1], 0x20
	jne	.label_434
	test	rbp, rbp
	lea	rsi, [rsp + 0x10]
	cmovne	rsi, rbp
	mov	r13d, 4
	cmp	al, 0x2d
	je	.label_431
	mov	rdi, rbx
	mov	edx, r12d
	mov	qword ptr [rsp + 8], rsi
	call	strtoul
	mov	rbp, rax
	mov	rax, qword ptr [rsp + 8]
	mov	r12, qword ptr [rax]
	cmp	r12, rbx
	je	.label_432
	mov	eax, dword ptr [r15]
	xor	ebx, ebx
	test	eax, eax
	je	.label_448
	cmp	eax, 0x22
	jne	.label_431
	mov	ebx, 1
.label_448:
	test	r14, r14
	jne	.label_449
	jmp	.label_429
.label_432:
	test	r14, r14
	je	.label_431
	movsx	esi, byte ptr [rbx]
	test	esi, esi
	je	.label_431
	mov	rdi, r14
	call	strchr
	xor	ebx, ebx
	mov	ebp, 1
	test	rax, rax
	je	.label_431
.label_449:
	movsx	r13d, byte ptr [r12]
	test	r13d, r13d
	je	.label_429
	mov	rdi, r14
	mov	esi, r13d
	call	strchr
	test	rax, rax
	je	.label_440
	mov	r15d, 1
	mov	esi, 0x400
	lea	eax, [r13 - 0x45]
	cmp	eax, 0x2f
	ja	.label_430
	movabs	rdx, 0x814400308945
	bt	rdx, rax
	jae	.label_430
	mov	esi, 0x30
	mov	rdi, r14
	call	strchr
	mov	r15d, 1
	mov	esi, 0x400
	test	rax, rax
	je	.label_430
	movsx	eax, byte ptr [r12 + 1]
	mov	r15d, 1
	mov	esi, 0x400
	cmp	eax, 0x42
	je	.label_433
	cmp	eax, 0x44
	je	.label_433
	cmp	eax, 0x69
	jne	.label_430
	xor	eax, eax
	cmp	byte ptr [r12 + 2], 0x42
	sete	al
	lea	r15, [rax + rax + 1]
	mov	esi, 0x400
	jmp	.label_430
.label_433:
	mov	r15d, 2
	mov	esi, 0x3e8
.label_430:
	add	r13d, -0x42
	cmp	r13d, 0x35
	ja	.label_440
	xor	eax, eax
	jmp	qword ptr [(r13 * 8) + label_447]
.label_997:
	mov	r8, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r9b, r9b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r8
	cmp	rax, rdi
	sbb	dl, dl
	mov	rbp, rdi
	imul	rbp, rsi
	cmp	rax, rdi
	cmovb	rbp, r8
	cmp	rax, rbp
	sbb	dil, dil
	imul	rsi, rbp
	cmp	rax, rbp
	cmovb	rsi, r8
	or	dl, r9b
	or	dl, dil
	jmp	.label_437
.label_440:
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rax], rbp
	or	ebx, 2
	jmp	.label_438
.label_998:
	mov	rdi, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	imul	rsi, rbp
	cmp	rax, rbp
	cmovb	rsi, rdi
	sbb	eax, eax
	jmp	.label_442
.label_999:
	mov	r8, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r9b, r9b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r8
	cmp	rax, rdi
	sbb	dl, dl
	imul	rsi, rdi
	cmp	rax, rdi
	cmovb	rsi, r8
	or	dl, r9b
	jmp	.label_437
.label_1001:
	mov	r9, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r8b, r8b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r9
	cmp	rax, rdi
	sbb	dl, dl
	mov	rbp, rdi
	imul	rbp, rsi
	cmp	rax, rdi
	cmovb	rbp, r9
	cmp	rax, rbp
	sbb	r10b, r10b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r9
	cmp	rax, rdi
	sbb	cl, cl
	imul	rsi, rdi
	cmp	rax, rdi
	cmovb	rsi, r9
	or	dl, r8b
	or	dl, r10b
	or	dl, cl
	jmp	.label_437
.label_995:
	xor	eax, eax
	mov	rdx, rbp
	shr	rdx, 0x36
	setne	al
	shl	rbp, 0xa
	jmp	.label_435
.label_996:
	mov	r9, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r8b, r8b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r9
	cmp	rax, rdi
	sbb	dl, dl
	mov	rbp, rdi
	imul	rbp, rsi
	cmp	rax, rdi
	cmovb	rbp, r9
	cmp	rax, rbp
	sbb	r10b, r10b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r9
	cmp	rax, rdi
	sbb	r11b, r11b
	mov	rbp, rdi
	imul	rbp, rsi
	cmp	rax, rdi
	cmovb	rbp, r9
	cmp	rax, rbp
	sbb	r14b, r14b
	mov	rdi, rbp
	imul	rdi, rsi
	cmp	rax, rbp
	cmovb	rdi, r9
	cmp	rax, rdi
	sbb	bpl, bpl
	imul	rsi, rdi
	cmp	rax, rdi
	cmovb	rsi, r9
	or	dl, r8b
	or	dl, r10b
	or	dl, r11b
	or	dl, r14b
	or	dl, bpl
.label_437:
	and	dl, 1
	movzx	eax, dl
	jmp	.label_439
.label_1000:
	mov	rdi, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r8b, r8b
	mov	rdx, rbp
	imul	rdx, rsi
	cmp	rax, rbp
	cmovb	rdx, rdi
	cmp	rax, rdx
	sbb	cl, cl
	mov	rbp, rdx
	imul	rbp, rsi
	cmp	rax, rdx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r9b, r9b
	mov	rdx, rbp
	imul	rdx, rsi
	cmp	rax, rbp
	cmovb	rdx, rdi
	cmp	rax, rdx
	sbb	r10b, r10b
	mov	rbp, rdx
	imul	rbp, rsi
	cmp	rax, rdx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	dl, dl
	imul	rsi, rbp
	cmp	rax, rbp
	cmovb	rsi, rdi
	or	cl, r8b
	or	cl, r9b
	or	cl, r10b
	or	cl, dl
	and	cl, 1
	movzx	eax, cl
	jmp	.label_439
.label_1002:
	mov	rdi, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r8b, r8b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	dl, dl
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r9b, r9b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	r10b, r10b
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r11b, r11b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	r14b, r14b
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r13b, r13b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	bpl, bpl
	imul	rsi, rcx
	cmp	rax, rcx
	cmovb	rsi, rdi
	or	dl, r8b
	or	dl, r9b
	or	dl, r10b
	or	dl, r11b
	and	dl, 1
	or	dl, r14b
	or	dl, r13b
	or	dl, bpl
	jmp	.label_446
.label_1003:
	mov	rdi, -1
	mov	rax, -1
	xor	edx, edx
	div	rsi
	cmp	rax, rbp
	sbb	r8b, r8b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	dl, dl
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r9b, r9b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	r10b, r10b
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	r11b, r11b
	mov	rcx, rbp
	imul	rcx, rsi
	cmp	rax, rbp
	cmovb	rcx, rdi
	cmp	rax, rcx
	sbb	r14b, r14b
	mov	rbp, rcx
	imul	rbp, rsi
	cmp	rax, rcx
	cmovb	rbp, rdi
	cmp	rax, rbp
	sbb	cl, cl
	imul	rsi, rbp
	cmp	rax, rbp
	cmovb	rsi, rdi
	or	dl, r8b
	or	dl, r9b
	or	dl, r10b
	and	dl, 1
	or	dl, r11b
	or	dl, r14b
	or	dl, cl
.label_446:
	movzx	eax, dl
.label_442:
	and	eax, 1
.label_439:
	mov	rbp, rsi
.label_436:
	or	eax, ebx
	lea	rcx, [r12 + r15]
	mov	rdx, qword ptr [rsp + 8]
	mov	qword ptr [rdx], rcx
	lea	ebx, [rax + 2]
	cmp	byte ptr [r12 + r15], 0
	cmove	ebx, eax
.label_429:
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rax], rbp
.label_438:
	mov	r13d, ebx
.label_431:
	mov	eax, r13d
	add	rsp, 0x18
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_1004:
	xor	eax, eax
	mov	rdx, rbp
	shr	rdx, 0x37
	setne	al
	shl	rbp, 9
.label_435:
	cmp	rdx, 1
	sbb	rdx, rdx
	not	rdx
	or	rbp, rdx
	jmp	.label_436
.label_1005:
	lea	rax, [rbp + rbp]
	test	rbp, rbp
	mov	rcx, -1
	cmovns	rcx, rax
	shr	rbp, 0x3f
	mov	eax, ebp
	mov	rbp, rcx
	jmp	.label_436
.label_441:
	mov	edi, OFFSET FLAT:label_443
	mov	esi, OFFSET FLAT:label_444
	mov	edx, 0x54
	mov	ecx, OFFSET FLAT:label_445
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x405c6d
	.globl sub_405c6d
	.type sub_405c6d, @function
sub_405c6d:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x405c70

	.globl rpl_calloc
	.type rpl_calloc, @function
rpl_calloc:
	test	rdi, rdi
	mov	eax, 1
	je	.label_450
	test	rsi, rsi
	mov	ecx, 1
	je	.label_451
	mov	rax, rsi
	imul	rax, rdi
	xor	edx, edx
	div	rsi
	cmp	rax, rdi
	mov	rax, rsi
	mov	rcx, rdi
	je	.label_451
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	eax, eax
	pop	rcx
	ret	
.label_450:
	mov	ecx, 1
.label_451:
	mov	rdi, rcx
	mov	rsi, rax
	jmp	calloc
	.section	.text
	.align	32
	#Procedure 0x405cbb
	.globl sub_405cbb
	.type sub_405cbb, @function
sub_405cbb:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x405cc0

	.globl rpl_fts_open
	.type rpl_fts_open, @function
rpl_fts_open:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x38
	mov	r14, rdx
	mov	ebx, esi
	mov	r12, rdi
	cmp	ebx, 0x1000
	jae	.label_481
	mov	eax, ebx
	and	eax, 0x204
	cmp	eax, 0x204
	je	.label_481
	test	bl, 0x12
	je	.label_481
	mov	edi, 0x80
	call	malloc
	mov	r15, rax
	xor	eax, eax
	test	r15, r15
	je	.label_453
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x70], xmm0
	movups	xmmword ptr [r15 + 0x60], xmm0
	movups	xmmword ptr [r15 + 0x50], xmm0
	movups	xmmword ptr [r15 + 0x40], xmm0
	movups	xmmword ptr [r15 + 0x30], xmm0
	movups	xmmword ptr [r15 + 0x20], xmm0
	movups	xmmword ptr [r15 + 0x10], xmm0
	movups	xmmword ptr [r15], xmm0
	mov	qword ptr [r15 + 0x40], r14
	mov	eax, ebx
	and	eax, 0xfffffdfb
	or	eax, 4
	test	bl, 2
	cmove	eax, ebx
	mov	dword ptr [r15 + 0x48], eax
	mov	dword ptr [r15 + 0x2c], 0xffffff9c
	mov	rdi, qword ptr [r12]
	mov	ebp, 1
	test	rdi, rdi
	je	.label_455
	mov	r13d, ebx
	lea	rbx, [r12 + 8]
	xor	ebp, ebp
	nop	word ptr [rax + rax]
.label_474:
	call	strlen
	cmp	rax, rbp
	cmova	rbp, rax
	mov	rdi, qword ptr [rbx]
	add	rbx, 8
	test	rdi, rdi
	jne	.label_474
	inc	rbp
	mov	ebx, r13d
.label_455:
	cmp	rbp, 0x1000
	mov	esi, 0x1000
	cmova	rsi, rbp
	add	rsi, 0x100
	mov	qword ptr [r15 + 0x30], rsi
	xor	edi, edi
	call	realloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_465
	mov	qword ptr [rsp + 0x10], r15
	mov	qword ptr [r15 + 0x20], rbp
	mov	qword ptr [rsp + 0x30], r12
	mov	r13, qword ptr [r12]
	xor	r12d, r12d
	test	r13, r13
	je	.label_483
	mov	edi, 0x110
	call	malloc
	mov	r12, rax
	test	r12, r12
	je	.label_488
	mov	byte ptr [r12 + 0x108], 0
	mov	qword ptr [r12 + 0x60], 0
	mov	rax, qword ptr [rsp + 0x10]
	mov	qword ptr [r12 + 0x50], rax
	mov	qword ptr [r12 + 0x38], rbp
	mov	dword ptr [r12 + 0x40], 0
	mov	qword ptr [r12 + 0x18], 0
	mov	word ptr [r12 + 0x72], 0
	mov	word ptr [r12 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r12 + 0x20], xmm0
	mov	qword ptr [r12 + 0x58], -1
	mov	qword ptr [r12 + 0x68], -1
.label_483:
	mov	byte ptr [rsp + 0xf], 1
	mov	qword ptr [rsp + 0x28], r14
	test	r14, r14
	je	.label_473
	mov	rax, qword ptr [rsp + 0x10]
	mov	al, byte ptr [rax + 0x49]
	and	al, 4
	shr	al, 2
	mov	byte ptr [rsp + 0xf], al
.label_473:
	xor	r14d, r14d
	test	r13, r13
	je	.label_486
	test	bh, 8
	mov	qword ptr [rsp + 0x18], r12
	jne	.label_475
	xor	ebp, ebp
	xor	r15d, r15d
	xor	r12d, r12d
	nop	dword ptr [rax]
.label_459:
	mov	rdi, r13
	call	strlen
	mov	rbx, rax
	cmp	rbx, 3
	jb	.label_472
	cmp	byte ptr [r13 + rbx - 1], 0x2f
	jne	.label_472
	nop	dword ptr [rax]
.label_482:
	cmp	byte ptr [r13 + rbx - 2], 0x2f
	jne	.label_472
	dec	rbx
	cmp	rbx, 1
	ja	.label_482
	nop	word ptr cs:[rax + rax]
.label_472:
	mov	qword ptr [rsp + 0x20], r15
	lea	rdi, [rbx + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	r15, rax
	mov	r14, rbp
	test	r15, r15
	je	.label_489
	mov	rbp, r15
	add	rbp, 0x108
	mov	rdi, rbp
	mov	rsi, r13
	mov	rdx, rbx
	call	memcpy
	mov	byte ptr [r15 + rbx + 0x108], 0
	mov	qword ptr [r15 + 0x60], rbx
	mov	rdi, qword ptr [rsp + 0x10]
	mov	qword ptr [r15 + 0x50], rdi
	mov	rax, qword ptr [rdi + 0x20]
	mov	qword ptr [r15 + 0x38], rax
	mov	dword ptr [r15 + 0x40], 0
	mov	qword ptr [r15 + 0x18], 0
	mov	word ptr [r15 + 0x72], 0
	mov	word ptr [r15 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x20], xmm0
	mov	qword ptr [r15 + 0x58], 0
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [r15 + 8], rax
	mov	qword ptr [r15 + 0x30], rbp
	mov	rbx, r14
	test	rbx, rbx
	setne	al
	test	byte ptr [rsp + 0xf], al
	je	.label_457
	mov	word ptr [r15 + 0x70], 0xb
	mov	qword ptr [r15 + 0xa8], 2
	jmp	.label_471
.label_457:
	xor	edx, edx
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
.label_471:
	mov	rax, qword ptr [rsp + 0x28]
	test	rax, rax
	je	.label_477
	mov	r14, r15
	mov	qword ptr [r15 + 0x10], rbx
	mov	r15, qword ptr [rsp + 0x20]
	jmp	.label_480
.label_477:
	mov	qword ptr [r15 + 0x10], 0
	test	rbx, rbx
	mov	r14, r15
	je	.label_480
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rax + 0x10], r15
	mov	r14, rbx
.label_480:
	inc	r12
	mov	rax, qword ptr [rsp + 0x30]
	mov	r13, qword ptr [rax + 8]
	add	rax, 8
	mov	qword ptr [rsp + 0x30], rax
	test	r13, r13
	mov	rbp, r14
	jne	.label_459
	jmp	.label_485
.label_481:
	call	__errno_location
	mov	dword ptr [rax], 0x16
.label_479:
	xor	eax, eax
.label_453:
	add	rsp, 0x38
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_465:
	mov	rdi, qword ptr [r15 + 0x20]
	jmp	.label_458
.label_475:
	xor	r15d, r15d
	xor	ebx, ebx
	xor	r12d, r12d
	nop	
.label_461:
	mov	qword ptr [rsp + 0x20], rbx
	mov	rdi, r13
	call	strlen
	mov	rbp, rax
	lea	rdi, [rbp + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	rbx, rax
	test	rbx, rbx
	je	.label_466
	mov	r14, rbx
	add	r14, 0x108
	mov	rdi, r14
	mov	rsi, r13
	mov	rdx, rbp
	call	memcpy
	mov	byte ptr [rbx + rbp + 0x108], 0
	mov	qword ptr [rbx + 0x60], rbp
	mov	rdi, qword ptr [rsp + 0x10]
	mov	qword ptr [rbx + 0x50], rdi
	mov	rax, qword ptr [rdi + 0x20]
	mov	qword ptr [rbx + 0x38], rax
	mov	dword ptr [rbx + 0x40], 0
	mov	qword ptr [rbx + 0x18], 0
	mov	word ptr [rbx + 0x72], 0
	mov	word ptr [rbx + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	mov	qword ptr [rbx + 0x58], 0
	mov	rax, qword ptr [rsp + 0x18]
	mov	qword ptr [rbx + 8], rax
	mov	qword ptr [rbx + 0x30], r14
	test	r15, r15
	setne	al
	and	al, byte ptr [rsp + 0xf]
	cmp	al, 1
	jne	.label_478
	mov	word ptr [rbx + 0x70], 0xb
	mov	qword ptr [rbx + 0xa8], 2
	jmp	.label_484
.label_478:
	xor	edx, edx
	mov	rsi, rbx
	call	fts_stat
	mov	word ptr [rbx + 0x70], ax
.label_484:
	mov	rax, qword ptr [rsp + 0x28]
	test	rax, rax
	je	.label_490
	mov	r14, rbx
	mov	qword ptr [rbx + 0x10], r15
	mov	rbx, qword ptr [rsp + 0x20]
	jmp	.label_454
.label_490:
	mov	qword ptr [rbx + 0x10], 0
	test	r15, r15
	mov	r14, rbx
	je	.label_454
	mov	rax, qword ptr [rsp + 0x20]
	mov	qword ptr [rax + 0x10], rbx
	mov	r14, r15
.label_454:
	mov	rax, qword ptr [rsp + 0x30]
	mov	r13, qword ptr [rax + r12*8 + 8]
	inc	r12
	test	r13, r13
	mov	r15, r14
	jne	.label_461
.label_485:
	cmp	qword ptr [rsp + 0x28], 0
	je	.label_463
	cmp	r12, 2
	jb	.label_463
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r14
	mov	rdx, r12
	call	fts_sort
	mov	r14, rax
.label_463:
	mov	r12, qword ptr [rsp + 0x18]
.label_486:
	mov	edi, 0x110
	call	malloc
	test	rax, rax
	je	.label_469
	mov	byte ptr [rax + 0x108], 0
	mov	qword ptr [rax + 0x60], 0
	mov	r15, qword ptr [rsp + 0x10]
	mov	qword ptr [rax + 0x50], r15
	mov	rcx, qword ptr [r15 + 0x20]
	mov	qword ptr [rax + 0x38], rcx
	mov	dword ptr [rax + 0x40], 0
	mov	qword ptr [rax + 0x18], 0
	mov	word ptr [rax + 0x72], 0
	mov	word ptr [rax + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [rax + 0x20], xmm0
	mov	qword ptr [r15], rax
	mov	qword ptr [rax + 0x10], r14
	mov	word ptr [rax + 0x70], 9
	mov	qword ptr [rax + 0x58], 1
	movzx	eax, word ptr [r15 + 0x48]
	test	ax, 0x102
	je	.label_487
	mov	edi, 0x1f
	xor	esi, esi
	mov	edx, OFFSET FLAT:AD_hash
	mov	ecx, OFFSET FLAT:AD_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	qword ptr [r15 + 0x58], rax
	test	rax, rax
	jne	.label_491
	jmp	.label_452
.label_488:
	mov	r15, qword ptr [rsp + 0x10]
	jmp	.label_460
.label_469:
	mov	r15, qword ptr [rsp + 0x10]
	mov	qword ptr [r15], 0
	jmp	.label_452
.label_487:
	mov	edi, 0x20
	call	malloc
	mov	qword ptr [r15 + 0x58], rax
	test	rax, rax
	je	.label_452
	mov	rdi, rax
	call	cycle_check_init
.label_491:
	mov	eax, dword ptr [r15 + 0x48]
	test	ax, 0x204
	jne	.label_462
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_464
	mov	edi, OFFSET FLAT:label_467
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_468
.label_466:
	mov	r14, r15
.label_489:
	mov	r15, qword ptr [rsp + 0x10]
	mov	r12, qword ptr [rsp + 0x18]
.label_452:
	test	r14, r14
	je	.label_470
	nop	dword ptr [rax]
.label_476:
	mov	rbx, qword ptr [r14 + 0x10]
	mov	rdi, qword ptr [r14 + 0x18]
	test	rdi, rdi
	je	.label_456
	call	closedir
.label_456:
	mov	rdi, r14
	call	free
	test	rbx, rbx
	mov	r14, rbx
	jne	.label_476
.label_470:
	mov	rdi, r12
	call	free
	mov	rbp, qword ptr [r15 + 0x20]
.label_460:
	mov	rdi, rbp
.label_458:
	call	free
	mov	rdi, r15
	call	free
	jmp	.label_479
.label_464:
	mov	edi, dword ptr [r15 + 0x2c]
	mov	esi, OFFSET FLAT:label_467
	xor	eax, eax
	call	openat_safer
.label_468:
	mov	dword ptr [r15 + 0x28], eax
	test	eax, eax
	jns	.label_462
	or	byte ptr [r15 + 0x48], 4
.label_462:
	mov	rdi, r15
	add	rdi, 0x60
	mov	esi, 0xffffffff
	call	i_ring_init
	mov	rax, r15
	jmp	.label_453
	.section	.text
	.align	32
	#Procedure 0x4062f9
	.globl sub_4062f9
	.type sub_4062f9, @function
sub_4062f9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x406300

	.globl fts_stat
	.type fts_stat, @function
fts_stat:
	push	r15
	push	r14
	push	rbx
	mov	r15, rsi
	mov	r14, rdi
	mov	eax, dword ptr [r14 + 0x48]
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_492
	test	al, 1
	je	.label_492
	mov	dl, 1
.label_492:
	lea	rbx, [r15 + 0x78]
	test	dl, dl
	jne	.label_499
	and	eax, 2
	jne	.label_499
	mov	esi, dword ptr [r14 + 0x2c]
	mov	rdx, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	r8d, 0x100
	mov	rcx, rbx
	call	__fxstatat
	test	eax, eax
	je	.label_493
	call	__errno_location
	mov	eax, dword ptr [rax]
	jmp	.label_497
.label_499:
	mov	rsi, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	rdx, rbx
	call	__xstat
	test	eax, eax
	je	.label_493
	call	__errno_location
	mov	r14, rax
	mov	eax, dword ptr [r14]
	cmp	eax, 2
	jne	.label_497
	mov	rsi, qword ptr [r15 + 0x30]
	mov	edi, 1
	mov	rdx, rbx
	call	__lxstat
	test	eax, eax
	je	.label_495
	mov	eax, dword ptr [r14]
.label_497:
	mov	dword ptr [r15 + 0x40], eax
	xorps	xmm0, xmm0
	movups	xmmword ptr [rbx + 0x80], xmm0
	movups	xmmword ptr [rbx + 0x70], xmm0
	movups	xmmword ptr [rbx + 0x60], xmm0
	movups	xmmword ptr [rbx + 0x50], xmm0
	movups	xmmword ptr [rbx + 0x40], xmm0
	movups	xmmword ptr [rbx + 0x30], xmm0
	movups	xmmword ptr [rbx + 0x20], xmm0
	movups	xmmword ptr [rbx + 0x10], xmm0
	movups	xmmword ptr [rbx], xmm0
	mov	ax, 0xa
.label_494:
	pop	rbx
	pop	r14
	pop	r15
	ret	
.label_493:
	movzx	ecx, word ptr [r15 + 0x90]
	and	ecx, 0xf000
	cmp	ecx, 0x8000
	je	.label_496
	mov	ax, 0xc
	movzx	ecx, cx
	cmp	ecx, 0xa000
	je	.label_494
	cmp	ecx, 0x4000
	jne	.label_500
	mov	rax, qword ptr [r15 + 0x88]
	mov	rcx, -1
	cmp	rax, 2
	jb	.label_498
	cmp	qword ptr [r15 + 0x58], 0
	jle	.label_498
	mov	ecx, dword ptr [r14 + 0x48]
	shr	ecx, 4
	not	ecx
	and	ecx, 2
	sub	rax, rcx
	mov	rcx, rax
.label_498:
	mov	qword ptr [r15 + 0x68], rcx
	mov	ecx, dword ptr [r15 + 0x108]
	mov	ax, 1
	cmp	cl, 0x2e
	jne	.label_494
	mov	edx, ecx
	shr	edx, 8
	test	dl, dl
	je	.label_501
	cmp	dl, 0x2e
	jne	.label_494
	test	ecx, 0xff0000
	jne	.label_494
.label_501:
	cmp	qword ptr [r15 + 0x58], 0
	mov	cx, 1
	mov	ax, 5
	cmove	ax, cx
	jmp	.label_494
.label_496:
	mov	ax, 8
	jmp	.label_494
.label_500:
	mov	ax, 3
	jmp	.label_494
.label_495:
	mov	dword ptr [r14], 0
	mov	ax, 0xd
	jmp	.label_494
	.section	.text
	.align	32
	#Procedure 0x406495
	.globl sub_406495
	.type sub_406495, @function
sub_406495:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4064a0

	.globl fts_sort
	.type fts_sort, @function
fts_sort:
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	mov	r14, rdx
	mov	rbx, rsi
	mov	r12, rdi
	mov	r15, qword ptr [r12 + 0x40]
	cmp	qword ptr [r12 + 0x38], r14
	jae	.label_506
	lea	rsi, [r14 + 0x28]
	mov	qword ptr [r12 + 0x38], rsi
	mov	rax, rsi
	shr	rax, 0x3d
	jne	.label_507
	lea	r13, [r12 + 0x10]
	mov	rdi, qword ptr [r13]
	shl	rsi, 3
	call	realloc
	mov	rdi, rax
	test	rdi, rdi
	je	.label_507
	mov	qword ptr [r13], rdi
	jmp	.label_510
.label_506:
	mov	rdi, qword ptr [r12 + 0x10]
	add	r12, 0x10
	mov	r13, r12
.label_510:
	test	rbx, rbx
	je	.label_504
	nop	dword ptr [rax]
.label_503:
	mov	qword ptr [rdi], rbx
	add	rdi, 8
	mov	rbx, qword ptr [rbx + 0x10]
	test	rbx, rbx
	jne	.label_503
	mov	rdi, qword ptr [r13]
.label_504:
	mov	edx, 8
	mov	rsi, r14
	mov	rcx, r15
	call	qsort
	mov	r8, qword ptr [r13]
	mov	rbx, qword ptr [r8]
	cmp	r14, 1
	mov	rcx, rbx
	je	.label_511
	mov	rcx, qword ptr [r8 + 8]
	mov	qword ptr [rbx + 0x10], rcx
	mov	rcx, r14
	add	rcx, -2
	je	.label_502
	lea	rsi, [r8 + 8]
	lea	rdx, [r14 - 3]
	and	ecx, 3
	cmp	rdx, 3
	jae	.label_505
	mov	rdx, rsi
	jmp	.label_508
.label_507:
	mov	rdi, qword ptr [r12 + 0x10]
	call	free
	mov	qword ptr [r12 + 0x10], 0
	mov	qword ptr [r12 + 0x38], 0
	jmp	.label_513
.label_505:
	lea	rdi, [rcx + 2]
	sub	rdi, r14
	nop	dword ptr [rax + rax]
.label_512:
	mov	rdx, qword ptr [rsi]
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rdx + 0x10], rax
	mov	rax, qword ptr [rsi + 8]
	mov	rdx, qword ptr [rsi + 0x10]
	mov	qword ptr [rax + 0x10], rdx
	mov	rax, qword ptr [rsi + 0x10]
	mov	rdx, qword ptr [rsi + 0x18]
	mov	qword ptr [rax + 0x10], rdx
	lea	rdx, [rsi + 0x20]
	mov	rax, qword ptr [rsi + 0x18]
	mov	rsi, qword ptr [rsi + 0x20]
	mov	qword ptr [rax + 0x10], rsi
	add	rdi, 4
	mov	rsi, rdx
	jne	.label_512
.label_508:
	test	rcx, rcx
	je	.label_502
	add	rdx, 8
	neg	rcx
	nop	dword ptr [rax + rax]
.label_509:
	mov	rax, qword ptr [rdx - 8]
	mov	rsi, qword ptr [rdx]
	mov	qword ptr [rax + 0x10], rsi
	add	rdx, 8
	inc	rcx
	jne	.label_509
.label_502:
	mov	rcx, qword ptr [r8 + r14*8 - 8]
.label_511:
	mov	qword ptr [rcx + 0x10], 0
.label_513:
	mov	rax, rbx
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x40661e
	.globl sub_40661e
	.type sub_40661e, @function
sub_40661e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x406620

	.globl rpl_fts_close
	.type rpl_fts_close, @function
rpl_fts_close:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rdi
	mov	rdi, qword ptr [r14]
	test	rdi, rdi
	je	.label_519
	cmp	qword ptr [rdi + 0x58], 0
	js	.label_517
	nop	word ptr cs:[rax + rax]
.label_532:
	mov	rbx, qword ptr [rdi + 0x10]
	test	rbx, rbx
	jne	.label_525
	mov	rbx, qword ptr [rdi + 8]
.label_525:
	call	free
	cmp	qword ptr [rbx + 0x58], 0
	mov	rdi, rbx
	jns	.label_532
	jmp	.label_528
.label_517:
	mov	rbx, rdi
.label_528:
	mov	rdi, rbx
	call	free
.label_519:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_530
	nop	word ptr cs:[rax + rax]
.label_516:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_514
	call	closedir
.label_514:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_516
.label_530:
	mov	rdi, qword ptr [r14 + 0x10]
	call	free
	mov	rdi, qword ptr [r14 + 0x20]
	call	free
	mov	eax, dword ptr [r14 + 0x48]
	test	ah, 2
	jne	.label_522
	xor	ebp, ebp
	test	al, 4
	jne	.label_523
	mov	edi, dword ptr [r14 + 0x28]
	call	fchdir
	xor	ebp, ebp
	test	eax, eax
	je	.label_527
	call	__errno_location
	mov	ebp, dword ptr [rax]
.label_527:
	mov	edi, dword ptr [r14 + 0x28]
	call	close
	test	ebp, ebp
	je	.label_529
	jmp	.label_523
.label_522:
	mov	edi, dword ptr [r14 + 0x2c]
	xor	ebp, ebp
	test	edi, edi
	js	.label_523
	call	close
.label_529:
	test	eax, eax
	je	.label_523
	call	__errno_location
	mov	ebp, dword ptr [rax]
.label_523:
	lea	rbx, [r14 + 0x60]
	jmp	.label_515
	.section	.text
	.align	32
	#Procedure 0x406708
	.globl sub_406708
	.type sub_406708, @function
sub_406708:

	nop	dword ptr [rax + rax]
.label_520:
	mov	edi, eax
	call	close
.label_515:
	mov	rdi, rbx
	call	i_ring_empty
	test	al, al
	jne	.label_518
	mov	rdi, rbx
	call	i_ring_pop
	test	eax, eax
	jns	.label_520
	jmp	.label_515
.label_518:
	mov	rdi, qword ptr [r14 + 0x50]
	test	rdi, rdi
	je	.label_521
	call	hash_free
.label_521:
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_524
	mov	rdi, qword ptr [r14 + 0x58]
	test	rdi, rdi
	je	.label_526
	call	hash_free
	jmp	.label_526
.label_524:
	mov	rdi, qword ptr [r14 + 0x58]
	call	free
.label_526:
	mov	rdi, r14
	call	free
	xor	eax, eax
	test	ebp, ebp
	je	.label_531
	call	__errno_location
	mov	dword ptr [rax], ebp
	mov	eax, 0xffffffff
.label_531:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x406782
	.globl sub_406782
	.type sub_406782, @function
sub_406782:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406790

	.globl rpl_fts_read
	.type rpl_fts_read, @function
rpl_fts_read:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	mov	r14, rdi
	mov	r15, qword ptr [r14]
	xor	ebx, ebx
	test	r15, r15
	je	.label_543
	mov	eax, dword ptr [r14 + 0x48]
	xor	ebx, ebx
	test	ah, 0x20
	jne	.label_543
	movzx	ecx, word ptr [r15 + 0x74]
	mov	word ptr [r15 + 0x74], 3
	cmp	ecx, 1
	je	.label_588
	movzx	edx, cx
	cmp	edx, 2
	jne	.label_590
	mov	ecx, dword ptr [r15 + 0x70]
	mov	esi, ecx
	and	esi, 0xfffe
	cmp	esi, 0xc
	jne	.label_592
	mov	edx, 1
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_533
	mov	eax, dword ptr [r14 + 0x48]
	test	al, 4
	jne	.label_533
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_535
	mov	edi, OFFSET FLAT:label_467
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_593
.label_588:
	xor	edx, edx
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	mov	rbx, r15
	jmp	.label_543
.label_590:
	lea	r12, [r15 + 0x70]
	mov	ecx, dword ptr [r15 + 0x70]
	jmp	.label_546
.label_592:
	lea	r12, [r15 + 0x70]
.label_546:
	movzx	esi, cx
	cmp	esi, 1
	jne	.label_550
	cmp	edx, 4
	je	.label_551
	test	al, 0x40
	je	.label_553
	mov	rdx, qword ptr [r15 + 0x78]
	cmp	rdx, qword ptr [r14 + 0x18]
	jne	.label_551
.label_553:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_555
	test	ah, 0x10
	jne	.label_558
	mov	rcx, qword ptr [r15 + 0x30]
	mov	edx, 0xffffffff
	mov	rdi, r14
	mov	rsi, r15
	call	fts_safe_changedir
	test	eax, eax
	je	.label_540
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
	or	byte ptr [r15 + 0x72], 1
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_560
	.section	.text
	.align	32
	#Procedure 0x4068d3
	.globl sub_4068d3
	.type sub_4068d3, @function
sub_4068d3:

	nop	word ptr cs:[rax + rax]
.label_550:
	mov	rbx, qword ptr [r15 + 0x10]
	test	rbx, rbx
	je	.label_566
	mov	qword ptr [r14], rbx
	mov	rdi, r15
	call	free
	cmp	qword ptr [rbx + 0x58], 0
	je	.label_570
	movzx	eax, word ptr [rbx + 0x74]
	cmp	eax, 4
	mov	r15, rbx
	je	.label_550
	movzx	eax, ax
	cmp	eax, 2
	jne	.label_541
	mov	edx, 1
	mov	rdi, r14
	mov	rsi, rbx
	call	fts_stat
	mov	word ptr [rbx + 0x70], ax
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_563
	mov	eax, dword ptr [r14 + 0x48]
	test	al, 4
	jne	.label_563
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_576
	mov	edi, OFFSET FLAT:label_467
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_579
.label_581:
	mov	rcx, qword ptr [rax + 8]
	mov	rcx, qword ptr [rcx + 0x30]
	mov	qword ptr [rax + 0x30], rcx
	mov	rax, qword ptr [rax + 0x10]
.label_560:
	test	rax, rax
	jne	.label_581
	jmp	.label_540
.label_551:
	test	ecx, 0x20000
	je	.label_583
	mov	edi, dword ptr [r15 + 0x44]
	call	close
.label_583:
	mov	rbx, qword ptr [r14 + 8]
	test	rbx, rbx
	je	.label_585
	nop	word ptr cs:[rax + rax]
.label_591:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_587
	call	closedir
.label_587:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_591
	mov	qword ptr [r14 + 8], 0
.label_585:
	mov	word ptr [r15 + 0x70], 6
.label_569:
	mov	rdi, r14
	mov	rsi, r15
	call	leave_dir
	mov	rbx, r15
	jmp	.label_543
.label_566:
	mov	rbx, qword ptr [r15 + 8]
	cmp	qword ptr [rbx + 0x18], 0
	je	.label_594
	mov	qword ptr [r14], rbx
	mov	rax, qword ptr [rbx + 0x48]
	mov	rcx, qword ptr [r14 + 0x20]
	mov	byte ptr [rcx + rax], 0
	mov	esi, 3
	mov	rdi, r14
	call	fts_build
	mov	rbx, rax
	test	rbx, rbx
	je	.label_537
	mov	rdi, r15
	call	free
	jmp	.label_541
.label_570:
	mov	rdi, r14
	call	restore_initial_cwd
	test	eax, eax
	mov	eax, dword ptr [r14 + 0x48]
	je	.label_565
	or	eax, 0x2000
	mov	dword ptr [r14 + 0x48], eax
	xor	ebx, ebx
	jmp	.label_543
.label_565:
	test	ax, 0x102
	je	.label_547
	mov	rdi, qword ptr [r14 + 0x58]
	test	rdi, rdi
	je	.label_548
	call	hash_free
	jmp	.label_548
.label_558:
	and	eax, 0xffffefff
	mov	dword ptr [r14 + 0x48], eax
	nop	word ptr cs:[rax + rax]
.label_559:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_557
	call	closedir
.label_557:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_559
	mov	qword ptr [r14 + 8], 0
.label_555:
	mov	esi, 3
	mov	rdi, r14
	call	fts_build
	mov	qword ptr [r14 + 8], rax
	test	rax, rax
	je	.label_561
.label_540:
	mov	rbx, qword ptr [r14 + 8]
	mov	qword ptr [r14 + 8], 0
	jmp	.label_541
.label_561:
	xor	ebx, ebx
	test	byte ptr [r14 + 0x49], 0x20
	jne	.label_543
	cmp	dword ptr [r15 + 0x40], 0
	je	.label_569
	movzx	eax, word ptr [r12]
	cmp	eax, 4
	je	.label_569
	mov	word ptr [r12], 7
	jmp	.label_569
.label_535:
	mov	edi, dword ptr [r14 + 0x2c]
	mov	esi, OFFSET FLAT:label_467
	xor	eax, eax
	call	openat_safer
.label_593:
	mov	dword ptr [r15 + 0x44], eax
	test	eax, eax
	js	.label_573
	or	byte ptr [r15 + 0x72], 2
	jmp	.label_533
.label_537:
	xor	ebx, ebx
	test	byte ptr [r14 + 0x49], 0x20
	jne	.label_543
	mov	rbx, qword ptr [r15 + 8]
.label_594:
	mov	qword ptr [r14], rbx
	mov	rdi, r15
	call	free
	cmp	qword ptr [rbx + 0x58], -1
	je	.label_577
	movzx	eax, word ptr [rbx + 0x70]
	cmp	eax, 0xb
	je	.label_572
	mov	rax, qword ptr [rbx + 0x48]
	mov	rcx, qword ptr [r14 + 0x20]
	mov	byte ptr [rcx + rax], 0
	cmp	qword ptr [rbx + 0x58], 0
	je	.label_578
	movzx	eax, word ptr [rbx + 0x72]
	test	al, 2
	jne	.label_580
	test	al, 1
	jne	.label_549
	mov	rsi, qword ptr [rbx + 8]
	mov	edx, 0xffffffff
	mov	ecx, OFFSET FLAT:label_584
	mov	rdi, r14
	call	fts_safe_changedir
	jmp	.label_586
.label_577:
	mov	rdi, rbx
	call	free
	call	__errno_location
	mov	dword ptr [rax], 0
	mov	qword ptr [r14], 0
	xor	ebx, ebx
	jmp	.label_543
.label_573:
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
	mov	word ptr [r15 + 0x70], 7
	jmp	.label_533
.label_547:
	mov	rdi, qword ptr [r14 + 0x58]
	call	free
.label_548:
	mov	rdx, qword ptr [rbx + 0x60]
	mov	qword ptr [rbx + 0x48], rdx
	mov	rdi, qword ptr [r14 + 0x20]
	lea	r15, [rbx + 0x108]
	inc	rdx
	mov	rsi, r15
	call	memmove
	mov	esi, 0x2f
	mov	rdi, r15
	call	strrchr
	mov	rbp, rax
	test	rbp, rbp
	je	.label_536
	cmp	rbp, r15
	jne	.label_538
	cmp	byte ptr [rbx + 0x109], 0
	je	.label_536
.label_538:
	inc	rbp
	mov	rdi, rbp
	call	strlen
	mov	r12, rax
	lea	rdx, [r12 + 1]
	mov	rdi, r15
	mov	rsi, rbp
	call	memmove
	mov	qword ptr [rbx + 0x60], r12
.label_536:
	mov	rax, qword ptr [r14 + 0x20]
	mov	qword ptr [rbx + 0x38], rax
	mov	qword ptr [rbx + 0x30], rax
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_544
	mov	edi, 0x1f
	xor	esi, esi
	mov	edx, OFFSET FLAT:AD_hash
	mov	ecx, OFFSET FLAT:AD_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	qword ptr [r14 + 0x58], rax
	jmp	.label_554
.label_544:
	mov	edi, 0x20
	call	malloc
	mov	qword ptr [r14 + 0x58], rax
	test	rax, rax
	je	.label_554
	mov	rdi, rax
	call	cycle_check_init
	jmp	.label_554
.label_578:
	mov	rdi, r14
	call	restore_initial_cwd
.label_586:
	test	eax, eax
	je	.label_549
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	or	byte ptr [r14 + 0x49], 0x20
	jmp	.label_549
.label_580:
	mov	eax, dword ptr [r14 + 0x48]
	lea	rbp, [rbx + 0x44]
	test	al, 4
	jne	.label_564
	test	ah, 2
	mov	r15d, dword ptr [rbx + 0x44]
	jne	.label_568
	mov	edi, r15d
	call	fchdir
	test	eax, eax
	je	.label_564
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	or	byte ptr [r14 + 0x49], 0x20
	jmp	.label_564
.label_576:
	mov	edi, dword ptr [r14 + 0x2c]
	mov	esi, OFFSET FLAT:label_467
	xor	eax, eax
	call	openat_safer
.label_579:
	mov	dword ptr [rbx + 0x44], eax
	test	eax, eax
	js	.label_575
	or	byte ptr [rbx + 0x72], 2
	jmp	.label_563
.label_575:
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [rbx + 0x40], eax
	mov	word ptr [rbx + 0x70], 7
.label_563:
	mov	word ptr [rbx + 0x74], 3
.label_541:
	mov	rax, qword ptr [r14 + 0x20]
	mov	rcx, qword ptr [rbx + 8]
	mov	rdx, qword ptr [rcx + 0x38]
	mov	rcx, qword ptr [rcx + 0x48]
	lea	rsi, [rcx - 1]
	cmp	byte ptr [rdx + rcx - 1], 0x2f
	cmovne	rsi, rcx
	lea	rdi, [rax + rsi + 1]
	mov	byte ptr [rax + rsi], 0x2f
	lea	rsi, [rbx + 0x108]
	mov	rdx, qword ptr [rbx + 0x60]
	inc	rdx
	call	memmove
.label_554:
	mov	r15, rbx
.label_533:
	mov	qword ptr [r14], r15
	movzx	eax, word ptr [r15 + 0x70]
	cmp	eax, 0xb
	jne	.label_582
	mov	rax, qword ptr [r15 + 0xa8]
	cmp	rax, 1
	je	.label_534
	cmp	rax, 2
	jne	.label_572
	mov	rbx, qword ptr [r15 + 8]
	cmp	qword ptr [rbx + 0x68], 0
	jne	.label_589
	mov	eax, dword ptr [r14 + 0x48]
	and	eax, 0x18
	cmp	eax, 0x18
	jne	.label_589
	mov	esi, dword ptr [r14 + 0x2c]
	mov	rdi, rbx
	call	filesystem_type
	cmp	rax, 0x52654973
	je	.label_534
	cmp	rax, 0x58465342
	je	.label_534
.label_589:
	xor	edx, edx
	mov	rdi, r14
	mov	rsi, r15
	call	fts_stat
	mov	word ptr [r15 + 0x70], ax
	mov	ecx, 0xf000
	and	ecx, dword ptr [r15 + 0x90]
	cmp	ecx, 0x4000
	jne	.label_582
	cmp	qword ptr [r15 + 0x58], 0
	je	.label_534
	mov	rax, qword ptr [rbx + 0x68]
	lea	rcx, [rax + 1]
	cmp	rcx, 2
	jb	.label_534
	dec	rax
	mov	qword ptr [rbx + 0x68], rax
.label_534:
	mov	ax, word ptr [r15 + 0x70]
.label_582:
	movzx	eax, ax
	cmp	eax, 1
	jne	.label_539
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_574
	mov	rax, qword ptr [r15 + 0x78]
	mov	qword ptr [r14 + 0x18], rax
.label_574:
	movzx	eax, word ptr [r14 + 0x48]
	test	ax, 0x102
	je	.label_542
	mov	edi, 0x18
	call	malloc
	mov	rbx, rax
	test	rbx, rbx
	je	.label_545
	movups	xmm0, xmmword ptr [r15 + 0x78]
	movups	xmmword ptr [rbx], xmm0
	mov	qword ptr [rbx + 0x10], r15
	mov	rdi, qword ptr [r14 + 0x58]
	mov	rsi, rbx
	call	hash_insert
	mov	rbp, rax
	cmp	rbp, rbx
	je	.label_552
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	je	.label_545
	mov	rax, qword ptr [rbp + 0x10]
	mov	qword ptr [r15], rax
	jmp	.label_556
.label_539:
	mov	rbx, r15
	jmp	.label_543
.label_542:
	mov	rdi, qword ptr [r14 + 0x58]
	lea	rsi, [r15 + 0x78]
	call	cycle_check
	test	al, al
	je	.label_552
	mov	qword ptr [r15], r15
.label_556:
	mov	word ptr [r15 + 0x70], 2
	mov	rbx, r15
	jmp	.label_543
.label_552:
	mov	rbx, r15
	jmp	.label_543
.label_545:
	call	__errno_location
	mov	dword ptr [rax], 0xc
	xor	ebx, ebx
	jmp	.label_543
.label_568:
	mov	esi, dword ptr [r14 + 0x2c]
	cmp	esi, r15d
	jne	.label_562
	cmp	esi, -0x64
	jne	.label_572
.label_562:
	lea	rdi, [r14 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_567
	mov	edi, eax
	call	close
.label_567:
	mov	dword ptr [r14 + 0x2c], r15d
.label_564:
	mov	edi, dword ptr [rbp]
	call	close
.label_549:
	movzx	eax, word ptr [rbx + 0x70]
	cmp	eax, 2
	je	.label_571
	mov	eax, dword ptr [rbx + 0x40]
	xor	ecx, ecx
	cmp	eax, 0
	setne	cl
	or	ecx, 6
	cmp	eax, 0
	mov	word ptr [rbx + 0x70], cx
	jne	.label_571
	mov	rdi, r14
	mov	rsi, rbx
	call	leave_dir
.label_571:
	xor	eax, eax
	test	byte ptr [r14 + 0x49], 0x20
	cmovne	rbx, rax
.label_543:
	mov	rax, rbx
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_572:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x406f44
	.globl sub_406f44
	.type sub_406f44, @function
sub_406f44:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406f50

	.globl leave_dir
	.type leave_dir, @function
leave_dir:
	sub	rsp, 0x18
	movzx	eax, word ptr [rdi + 0x48]
	test	ax, 0x102
	je	.label_596
	movups	xmm0, xmmword ptr [rsi + 0x78]
	movaps	xmmword ptr [rsp], xmm0
	mov	rdi, qword ptr [rdi + 0x58]
	lea	rsi, [rsp]
	call	hash_delete
	test	rax, rax
	je	.label_597
	mov	rdi, rax
	call	free
	add	rsp, 0x18
	ret	
.label_596:
	mov	rax, qword ptr [rsi + 8]
	test	rax, rax
	je	.label_595
	cmp	qword ptr [rax + 0x58], 0
	js	.label_595
	mov	rcx, qword ptr [rdi + 0x58]
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_597
	mov	rdx, qword ptr [rcx]
	cmp	rdx, qword ptr [rsi + 0x80]
	jne	.label_595
	mov	rdx, qword ptr [rcx + 8]
	cmp	rdx, qword ptr [rsi + 0x78]
	jne	.label_595
	mov	rdx, qword ptr [rax + 0x78]
	mov	qword ptr [rcx + 8], rdx
	mov	rax, qword ptr [rax + 0x80]
	mov	qword ptr [rcx], rax
.label_595:
	add	rsp, 0x18
	ret	
.label_597:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x406fd2
	.globl sub_406fd2
	.type sub_406fd2, @function
sub_406fd2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x406fe0

	.globl fts_safe_changedir
	.type fts_safe_changedir, @function
fts_safe_changedir:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	rbx, rcx
	mov	r13d, edx
	mov	r12, rsi
	mov	r15, rdi
	test	rbx, rbx
	je	.label_612
	movzx	edx, byte ptr [rbx]
	mov	ecx, 0x2e
	mov	eax, 0x2e
	sub	eax, edx
	jne	.label_598
	movzx	eax, byte ptr [rbx + 1]
	sub	ecx, eax
	mov	eax, ecx
	jne	.label_598
	movzx	eax, byte ptr [rbx + 2]
	neg	eax
.label_598:
	test	eax, eax
	sete	r14b
	jmp	.label_604
.label_612:
	xor	r14d, r14d
.label_604:
	mov	eax, dword ptr [r15 + 0x48]
	test	al, 4
	jne	.label_605
	test	r13d, r13d
	mov	qword ptr [rsp], r12
	jns	.label_606
	mov	ecx, r14d
	xor	cl, 1
	jne	.label_606
	and	eax, 0x200
	je	.label_606
	lea	rbp, [r15 + 0x60]
	mov	rdi, rbp
	call	i_ring_empty
	test	al, al
	jne	.label_606
	mov	rdi, rbp
	call	i_ring_pop
	xor	ecx, ecx
	test	eax, eax
	cmovns	rbx, rcx
	cmovns	r13d, eax
	mov	r14b, 1
.label_606:
	test	r13d, r13d
	mov	r12d, r13d
	jns	.label_616
	mov	eax, dword ptr [r15 + 0x48]
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_617
	xor	eax, eax
	mov	rdi, rbx
	mov	esi, edx
	call	open_safer
	jmp	.label_603
.label_605:
	xor	ebp, ebp
	test	r13d, r13d
	js	.label_599
	and	eax, 0x200
	je	.label_599
	mov	edi, r13d
	call	close
	jmp	.label_599
.label_617:
	mov	edi, dword ptr [r15 + 0x2c]
	xor	eax, eax
	mov	rsi, rbx
	call	openat_safer
.label_603:
	mov	r12d, eax
	mov	ebp, 0xffffffff
	test	r12d, r12d
	js	.label_599
.label_616:
	mov	eax, dword ptr [r15 + 0x48]
	test	al, 2
	jne	.label_613
	test	rbx, rbx
	je	.label_615
	cmp	byte ptr [rbx], 0x2e
	jne	.label_615
	cmp	byte ptr [rbx + 1], 0x2e
	jne	.label_615
	cmp	byte ptr [rbx + 2], 0
	jne	.label_615
.label_613:
	lea	rdx, [rsp + 8]
	mov	edi, 1
	mov	esi, r12d
	call	__fxstat
	test	eax, eax
	jne	.label_601
	mov	rcx, qword ptr [rsp]
	mov	rax, qword ptr [rcx + 0x78]
	cmp	rax, qword ptr [rsp + 8]
	jne	.label_600
	mov	rax, qword ptr [rcx + 0x80]
	cmp	rax, qword ptr [rsp + 0x10]
	jne	.label_600
	mov	eax, dword ptr [r15 + 0x48]
.label_615:
	test	ah, 2
	jne	.label_607
	mov	edi, r12d
	call	fchdir
	mov	ebp, eax
	jmp	.label_608
.label_607:
	mov	esi, dword ptr [r15 + 0x2c]
	cmp	esi, r12d
	jne	.label_609
	cmp	esi, -0x64
	jne	.label_610
.label_609:
	test	r14b, r14b
	je	.label_611
	test	al, 4
	jne	.label_602
	test	esi, esi
	js	.label_602
	mov	edi, esi
	jmp	.label_614
.label_600:
	call	__errno_location
	mov	dword ptr [rax], 2
.label_601:
	mov	ebp, 0xffffffff
.label_608:
	test	r13d, r13d
	jns	.label_599
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, r12d
	call	close
	mov	dword ptr [rbx], r14d
	jmp	.label_599
.label_611:
	lea	rdi, [r15 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_602
	mov	edi, eax
.label_614:
	call	close
.label_602:
	mov	dword ptr [r15 + 0x2c], r12d
	xor	ebp, ebp
.label_599:
	mov	eax, ebp
	add	rsp, 0x98
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_610:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4071c9
	.globl sub_4071c9
	.type sub_4071c9, @function
sub_4071c9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4071d0

	.globl fts_build
	.type fts_build, @function
fts_build:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x98
	mov	ebx, esi
	mov	r15, rdi
	mov	r13, qword ptr [r15]
	mov	rdi, qword ptr [r13 + 0x18]
	test	rdi, rdi
	mov	qword ptr [rsp + 0x10], r15
	mov	qword ptr [rsp + 0x70], rdi
	je	.label_690
	call	dirfd
	mov	dword ptr [rsp + 4], eax
	test	eax, eax
	js	.label_618
	mov	dword ptr [rsp], ebx
	lea	rax, [r15 + 0x40]
	mov	qword ptr [rsp + 0x18], rax
	cmp	qword ptr [r15 + 0x40], 1
	sbb	rax, rax
	not	rax
	or	rax, 0x186a0
	mov	qword ptr [rsp + 0x58], rax
	lea	rbp, [r15 + 0x48]
	mov	al, 1
	mov	dword ptr [rsp + 0xc], eax
	jmp	.label_622
.label_690:
	mov	eax, dword ptr [r15 + 0x48]
	mov	ecx, eax
	and	ecx, 0x204
	mov	edi, 0xffffff9c
	cmp	ecx, 0x200
	jne	.label_634
	mov	edi, dword ptr [r15 + 0x2c]
.label_634:
	mov	rsi, qword ptr [r13 + 0x30]
	xor	edx, edx
	test	al, 0x10
	je	.label_640
	test	al, 1
	je	.label_641
	cmp	qword ptr [r13 + 0x58], 0
	je	.label_640
.label_641:
	mov	edx, 0x20000
.label_640:
	lea	rcx, [rsp + 4]
	call	opendirat
	mov	qword ptr [r13 + 0x18], rax
	test	rax, rax
	je	.label_666
	mov	dword ptr [rsp], ebx
	lea	rcx, [r15 + 0x48]
	movzx	eax, word ptr [r13 + 0x70]
	cmp	eax, 0xb
	mov	rbp, r13
	mov	r12, rcx
	jne	.label_649
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, rbp
	call	fts_stat
	mov	rbx, rbp
	mov	word ptr [rbp + 0x70], ax
	jmp	.label_654
.label_618:
	mov	rdi, qword ptr [r13 + 0x18]
	call	closedir
	mov	qword ptr [r13 + 0x18], 0
.label_666:
	xor	r14d, r14d
	cmp	ebx, 3
	jne	.label_630
	mov	word ptr [r13 + 0x70], 4
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r13 + 0x40], eax
	jmp	.label_660
.label_649:
	mov	rbx, rbp
	test	byte ptr [rcx + 1], 1
	je	.label_654
	mov	rdi, r15
	mov	rbp, rbx
	mov	rsi, rbp
	call	leave_dir
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, rbp
	call	fts_stat
	movzx	eax, word ptr [r15 + 0x48]
	test	ax, 0x102
	je	.label_669
	mov	edi, 0x18
	call	malloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_673
	mov	rax, rbx
	movups	xmm0, xmmword ptr [rax + 0x78]
	movups	xmmword ptr [rbp], xmm0
	mov	qword ptr [rbp + 0x10], rax
	mov	rdi, qword ptr [r15 + 0x58]
	mov	rsi, rbp
	call	hash_insert
	mov	r14, rax
	cmp	r14, rbp
	je	.label_654
	mov	rdi, rbp
	call	free
	test	r14, r14
	je	.label_673
	mov	rax, qword ptr [r14 + 0x10]
	mov	rcx, rbx
	mov	qword ptr [rcx], rax
	mov	word ptr [rcx + 0x70], 2
	jmp	.label_654
.label_669:
	mov	rdi, qword ptr [r15 + 0x58]
	lea	rsi, [rbp + 0x78]
	call	cycle_check
	test	al, al
	je	.label_654
	mov	rax, rbx
	mov	qword ptr [rax], rax
	mov	word ptr [rax + 0x70], 2
.label_654:
	lea	rax, [r15 + 0x40]
	mov	qword ptr [rsp + 0x18], rax
	cmp	qword ptr [r15 + 0x40], 1
	sbb	rax, rax
	not	rax
	or	rax, 0x186a0
	mov	qword ptr [rsp + 0x58], rax
	cmp	dword ptr [rsp], 2
	mov	r13, rbx
	mov	rbp, r12
	je	.label_620
	mov	eax, dword ptr [rbp]
	and	eax, 0x38
	cmp	eax, 0x18
	jne	.label_623
	cmp	qword ptr [r13 + 0x88], 2
	jne	.label_623
	mov	esi, dword ptr [rsp + 4]
	mov	rdi, r13
	call	filesystem_type
	cmp	rax, 0x9f9f
	jle	.label_678
	cmp	rax, 0x9fa0
	je	.label_623
	mov	ecx, 0xff534d42
	cmp	rax, rcx
	je	.label_623
	cmp	rax, 0x5346414f
	je	.label_623
	jmp	.label_620
.label_673:
	call	__errno_location
	mov	dword ptr [rax], 0xc
	jmp	.label_660
.label_678:
	test	rax, rax
	je	.label_623
	cmp	rax, 0x6969
	jne	.label_620
.label_623:
	cmp	dword ptr [rsp], 3
	sete	bl
	mov	r14b, 1
	jmp	.label_627
.label_620:
	cmp	dword ptr [rsp], 3
	sete	bl
	mov	r14d, 0
	jne	.label_631
.label_627:
	mov	r15, r13
	test	byte ptr [rbp + 1], 2
	mov	ebp, dword ptr [rsp + 4]
	je	.label_635
	mov	esi, 0x406
	mov	edx, 3
	xor	eax, eax
	mov	edi, ebp
	call	rpl_fcntl
	mov	ebp, eax
	mov	dword ptr [rsp + 4], ebp
.label_635:
	test	ebp, ebp
	js	.label_642
	xor	ecx, ecx
	mov	rdi, qword ptr [rsp + 0x10]
	mov	rsi, r15
	mov	edx, ebp
	call	fts_safe_changedir
	test	eax, eax
	je	.label_647
.label_642:
	and	bl, r14b
	cmp	bl, 1
	jne	.label_674
	call	__errno_location
	mov	eax, dword ptr [rax]
	mov	dword ptr [r15 + 0x40], eax
.label_674:
	or	byte ptr [r15 + 0x72], 1
	mov	rdi, qword ptr [r15 + 0x18]
	call	closedir
	mov	rbx, r15
	mov	qword ptr [r15 + 0x18], 0
	mov	rbp, r12
	mov	eax, dword ptr [rbp]
	test	ah, 2
	mov	r15, qword ptr [rsp + 0x10]
	je	.label_653
	mov	edi, dword ptr [rsp + 4]
	test	edi, edi
	js	.label_653
	call	close
.label_653:
	mov	r13, rbx
	mov	qword ptr [r13 + 0x18], 0
.label_631:
	mov	dword ptr [rsp + 0xc], 0
.label_622:
	mov	rax, qword ptr [r13 + 0x38]
	mov	rcx, qword ptr [r13 + 0x48]
	lea	rdx, [rcx - 1]
	cmp	byte ptr [rax + rcx - 1], 0x2f
	cmovne	rdx, rcx
	xor	eax, eax
	mov	qword ptr [rsp + 0x20], rax
	test	byte ptr [rbp], 4
	je	.label_661
	mov	rax, qword ptr [r15 + 0x20]
	lea	rcx, [rax + rdx + 1]
	mov	qword ptr [rsp + 0x20], rcx
	mov	byte ptr [rax + rdx], 0x2f
.label_661:
	lea	rax, [rdx + 1]
	mov	rcx, qword ptr [r15 + 0x30]
	mov	qword ptr [rsp + 0x38], rax
	sub	rcx, rax
	mov	qword ptr [rsp + 0x78], rcx
	mov	rax, qword ptr [r13 + 0x58]
	inc	rax
	mov	qword ptr [rsp + 0x88], rax
	add	rdx, 0x102
	mov	qword ptr [rsp + 0x80], rdx
	xor	eax, eax
	mov	qword ptr [rsp + 0x48], rax
	xor	eax, eax
	mov	qword ptr [rsp + 0x60], rax
	mov	dword ptr [rsp + 8], 0
	xor	eax, eax
	xor	r14d, r14d
	xor	r12d, r12d
	mov	qword ptr [rsp + 0x28], rbp
	mov	qword ptr [rsp + 0x30], r13
.label_632:
	mov	rbx, qword ptr [r13 + 0x18]
	test	rbx, rbx
	je	.label_629
	mov	qword ptr [rsp + 0x90], rax
	mov	qword ptr [rsp + 0x40], r14
	nop	dword ptr [rax]
.label_692:
	call	__errno_location
	mov	r15, rax
	mov	dword ptr [r15], 0
	mov	rdi, rbx
	call	readdir
	mov	r14, rax
	test	r14, r14
	je	.label_685
	mov	rcx, r13
	mov	r13, r14
	add	r13, 0x13
	test	byte ptr [rbp], 0x20
	jne	.label_651
	cmp	byte ptr [r13], 0x2e
	jne	.label_651
	movzx	eax, byte ptr [r14 + 0x14]
	cmp	al, 0x2e
	je	.label_689
	test	al, al
	je	.label_664
	jmp	.label_651
	.section	.text
	.align	32
	#Procedure 0x4075d9
	.globl sub_4075d9
	.type sub_4075d9, @function
sub_4075d9:

	nop	dword ptr [rax]
.label_689:
	cmp	byte ptr [r14 + 0x15], 0
	jne	.label_651
.label_664:
	mov	r13, rcx
	mov	rbx, qword ptr [r13 + 0x18]
	test	rbx, rbx
	jne	.label_692
	jmp	.label_694
	.section	.text
	.align	32
	#Procedure 0x4075f8
	.globl sub_4075f8
	.type sub_4075f8, @function
sub_4075f8:

	nop	dword ptr [rax + rax]
.label_651:
	mov	qword ptr [rsp + 0x50], r12
	mov	rdi, r13
	call	strlen
	mov	rbx, rax
	lea	rdi, [rbx + 0x110]
	and	rdi, 0xfffffffffffffff8
	call	malloc
	mov	r12, rax
	test	r12, r12
	je	.label_625
	mov	rdi, r12
	add	rdi, 0x108
	mov	qword ptr [rsp + 0x68], rdi
	mov	rsi, r13
	mov	rdx, rbx
	call	memcpy
	mov	byte ptr [r12 + rbx + 0x108], 0
	mov	qword ptr [r12 + 0x60], rbx
	mov	rbp, qword ptr [rsp + 0x10]
	mov	qword ptr [r12 + 0x50], rbp
	mov	r13, qword ptr [rbp + 0x20]
	mov	qword ptr [r12 + 0x38], r13
	mov	dword ptr [r12 + 0x40], 0
	mov	qword ptr [r12 + 0x18], 0
	mov	word ptr [r12 + 0x72], 0
	mov	word ptr [r12 + 0x74], 3
	xorps	xmm0, xmm0
	movups	xmmword ptr [r12 + 0x20], xmm0
	mov	rax, qword ptr [rsp + 0x78]
	cmp	rbx, rax
	jae	.label_636
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x38]
	jmp	.label_652
	.section	.text
	.align	32
	#Procedure 0x4076a8
	.globl sub_4076a8
	.type sub_4076a8, @function
sub_4076a8:

	nop	dword ptr [rax + rax]
.label_636:
	mov	rax, qword ptr [rsp + 0x80]
	lea	rsi, [rax + rbx]
	add	rsi, qword ptr [rbp + 0x30]
	jb	.label_655
	mov	qword ptr [rbp + 0x30], rsi
	mov	rdi, r13
	call	realloc
	test	rax, rax
	je	.label_657
	mov	qword ptr [rbp + 0x20], rax
	cmp	r13, rax
	je	.label_659
	mov	rdx, qword ptr [rsp + 0x38]
	add	rax, rdx
	mov	rbp, qword ptr [rsp + 0x28]
	test	byte ptr [rbp], 4
	mov	rcx, qword ptr [rsp + 0x20]
	cmovne	rcx, rax
	mov	qword ptr [rsp + 0x20], rcx
	mov	al, 1
	mov	qword ptr [rsp + 0x60], rax
	jmp	.label_662
.label_659:
	mov	rbp, qword ptr [rsp + 0x28]
	mov	rdx, qword ptr [rsp + 0x38]
.label_662:
	mov	rax, qword ptr [rsp + 0x10]
	mov	rax, qword ptr [rax + 0x30]
	sub	rax, rdx
.label_652:
	add	rbx, rdx
	mov	r13, rbp
	jb	.label_671
	mov	qword ptr [rsp + 0x78], rax
	mov	rax, qword ptr [rsp + 0x88]
	mov	qword ptr [r12 + 0x58], rax
	mov	r15, qword ptr [rsp + 0x10]
	mov	rax, qword ptr [r15]
	mov	qword ptr [r12 + 8], rax
	mov	qword ptr [r12 + 0x48], rbx
	mov	rax, qword ptr [r14]
	mov	qword ptr [r12 + 0x80], rax
	test	byte ptr [rbp], 4
	jne	.label_675
	mov	rax, qword ptr [rsp + 0x68]
	mov	qword ptr [r12 + 0x30], rax
	jmp	.label_638
	.section	.text
	.align	32
	#Procedure 0x40776f
	.globl sub_40776f
	.type sub_40776f, @function
sub_40776f:

	nop	
.label_675:
	mov	rax, qword ptr [r12 + 0x38]
	mov	qword ptr [r12 + 0x30], rax
	mov	rdx, qword ptr [r12 + 0x60]
	inc	rdx
	mov	rdi, qword ptr [rsp + 0x20]
	mov	rsi, qword ptr [rsp + 0x68]
	call	memmove
	mov	rbp, r13
.label_638:
	mov	edx, dword ptr [rbp]
	mov	rax, qword ptr [rsp + 0x18]
	cmp	qword ptr [rax], 0
	je	.label_681
	mov	eax, edx
	and	eax, 0x400
	jne	.label_681
	xor	edx, edx
	mov	rdi, r15
	mov	rsi, r12
	call	fts_stat
	mov	rbp, r13
	mov	word ptr [r12 + 0x70], ax
	mov	r14, qword ptr [rsp + 0x40]
	jmp	.label_688
	.section	.text
	.align	32
	#Procedure 0x4077c8
	.globl sub_4077c8
	.type sub_4077c8, @function
sub_4077c8:

	nop	dword ptr [rax + rax]
.label_681:
	and	edx, 0x18
	movzx	ecx, byte ptr [r14 + 0x12]
	xor	eax, eax
	cmp	edx, 0x18
	mov	edx, 0
	jne	.label_626
	cmp	cl, 4
	setne	bl
	test	cl, cl
	setne	dl
	and	dl, bl
.label_626:
	mov	word ptr [r12 + 0x70], 0xb
	lea	esi, [rcx - 1]
	cmp	esi, 0xb
	mov	r14, qword ptr [rsp + 0x40]
	ja	.label_693
	mov	eax, dword ptr [(rcx * 4) + label_645]
.label_693:
	mov	dword ptr [r12 + 0x90], eax
	cmp	dl, 1
	mov	eax, 1
	adc	rax, 0
	mov	qword ptr [r12 + 0xa8], rax
.label_688:
	mov	qword ptr [r12 + 0x10], 0
	mov	rcx, qword ptr [rsp + 0x50]
	test	rcx, rcx
	mov	rax, r12
	je	.label_665
	mov	rax, qword ptr [rsp + 0x90]
	mov	qword ptr [rax + 0x10], r12
	mov	rax, rcx
.label_665:
	mov	rbx, rax
	cmp	r14, 0x2710
	jne	.label_639
	mov	rax, qword ptr [rsp + 0x18]
	cmp	qword ptr [rax], 0
	jne	.label_639
	mov	esi, dword ptr [rsp + 4]
	mov	rdi, qword ptr [rsp + 0x30]
	call	filesystem_type
	cmp	rax, 0x6969
	je	.label_644
	cmp	rax, 0x1021994
	je	.label_644
	mov	dword ptr [rsp + 8], 0
	mov	ecx, 0xff534d42
	cmp	rax, rcx
	mov	rbp, r13
	je	.label_639
	mov	al, 1
	mov	dword ptr [rsp + 8], eax
	jmp	.label_639
.label_644:
	mov	dword ptr [rsp + 8], 0
	mov	rbp, r13
	nop	dword ptr [rax + rax]
.label_639:
	inc	r14
	cmp	qword ptr [rsp + 0x58], r14
	mov	rax, r12
	mov	r13, qword ptr [rsp + 0x30]
	mov	r12, rbx
	ja	.label_632
	jmp	.label_629
.label_685:
	mov	eax, dword ptr [r15]
	test	eax, eax
	mov	r14, qword ptr [rsp + 0x40]
	je	.label_682
	mov	dword ptr [r13 + 0x40], eax
	mov	rax, qword ptr [rsp + 0x70]
	or	rax, r14
	mov	ax, 7
	mov	cx, 4
	cmovne	cx, ax
	mov	word ptr [r13 + 0x70], cx
.label_682:
	mov	rdi, qword ptr [r13 + 0x18]
	test	rdi, rdi
	mov	r15, qword ptr [rsp + 0x10]
	je	.label_629
	call	closedir
	mov	qword ptr [r13 + 0x18], 0
	jmp	.label_629
.label_694:
	mov	r15, qword ptr [rsp + 0x10]
	mov	r14, qword ptr [rsp + 0x40]
.label_629:
	mov	rax, qword ptr [rsp + 0x60]
	test	al, 1
	je	.label_670
	mov	rcx, qword ptr [r15 + 8]
	mov	rax, qword ptr [r15 + 0x20]
	jmp	.label_672
	.section	.text
	.align	32
	#Procedure 0x407932
	.globl sub_407932
	.type sub_407932, @function
sub_407932:

	nop	word ptr cs:[rax + rax]
.label_677:
	mov	qword ptr [rcx + 0x38], rax
	mov	rcx, qword ptr [rcx + 0x10]
.label_672:
	test	rcx, rcx
	je	.label_676
	mov	rdx, qword ptr [rcx + 0x30]
	lea	rsi, [rcx + 0x108]
	cmp	rdx, rsi
	je	.label_677
	sub	rdx, qword ptr [rcx + 0x38]
	add	rdx, rax
	mov	qword ptr [rcx + 0x30], rdx
	jmp	.label_677
.label_676:
	cmp	qword ptr [r12 + 0x58], 0
	js	.label_670
	mov	rcx, r12
	nop	word ptr cs:[rax + rax]
.label_686:
	mov	rdx, qword ptr [rcx + 0x30]
	lea	rsi, [rcx + 0x108]
	cmp	rdx, rsi
	je	.label_680
	sub	rdx, qword ptr [rcx + 0x38]
	add	rdx, rax
	mov	qword ptr [rcx + 0x30], rdx
.label_680:
	mov	qword ptr [rcx + 0x38], rax
	mov	rdx, qword ptr [rcx + 0x10]
	test	rdx, rdx
	jne	.label_684
	mov	rdx, qword ptr [rcx + 8]
.label_684:
	cmp	qword ptr [rdx + 0x58], 0
	mov	rcx, rdx
	jns	.label_686
.label_670:
	test	byte ptr [rbp], 4
	mov	rdx, qword ptr [rsp + 0x38]
	je	.label_687
	mov	rax, qword ptr [rsp + 0x20]
	mov	rcx, rax
	lea	rax, [rcx - 1]
	cmp	rdx, qword ptr [r15 + 0x30]
	cmove	rcx, rax
	test	r14, r14
	cmove	rcx, rax
	mov	byte ptr [rcx], 0
.label_687:
	cmp	qword ptr [rsp + 0x70], 0
	jne	.label_628
	mov	eax, dword ptr [rsp + 0xc]
	test	al, al
	je	.label_628
	cmp	dword ptr [rsp], 1
	je	.label_695
	test	r14, r14
	jne	.label_628
.label_695:
	cmp	qword ptr [r13 + 0x58], 0
	je	.label_619
	mov	rsi, qword ptr [r13 + 8]
	mov	edx, 0xffffffff
	mov	ecx, OFFSET FLAT:label_584
	mov	rdi, r15
	call	fts_safe_changedir
	jmp	.label_624
.label_619:
	mov	rdi, r15
	call	restore_initial_cwd
.label_624:
	mov	rcx, rbp
	test	eax, eax
	je	.label_628
	mov	word ptr [r13 + 0x70], 7
	or	byte ptr [rcx + 1], 0x20
	xor	r14d, r14d
	test	r12, r12
	je	.label_630
	xor	r14d, r14d
	nop	word ptr [rax + rax]
.label_643:
	mov	rbp, qword ptr [r12 + 0x10]
	mov	rdi, qword ptr [r12 + 0x18]
	test	rdi, rdi
	je	.label_637
	call	closedir
.label_637:
	mov	rdi, r12
	call	free
	test	rbp, rbp
	mov	r12, rbp
	jne	.label_643
	jmp	.label_630
.label_628:
	test	r14, r14
	je	.label_658
	mov	eax, dword ptr [rsp + 8]
	test	al, 1
	jne	.label_646
	cmp	r14, 2
	jb	.label_650
	mov	rax, qword ptr [rsp + 0x18]
	mov	rax, qword ptr [rax]
	test	rax, rax
	je	.label_650
	mov	rdi, r15
	mov	rsi, r12
	mov	rdx, r14
	call	fts_sort
	mov	r14, rax
	jmp	.label_630
.label_658:
	cmp	dword ptr [rsp], 3
	jne	.label_648
	movzx	eax, word ptr [r13 + 0x70]
	cmp	eax, 4
	je	.label_648
	movzx	eax, ax
	cmp	eax, 7
	je	.label_648
	mov	word ptr [r13 + 0x70], 6
.label_648:
	xor	r14d, r14d
	test	r12, r12
	je	.label_630
	xor	r14d, r14d
	nop	dword ptr [rax]
.label_668:
	mov	rbp, qword ptr [r12 + 0x10]
	mov	rdi, qword ptr [r12 + 0x18]
	test	rdi, rdi
	je	.label_663
	call	closedir
.label_663:
	mov	rdi, r12
	call	free
	test	rbp, rbp
	mov	r12, rbp
	jne	.label_668
	jmp	.label_630
.label_646:
	mov	rbx, qword ptr [rsp + 0x18]
	mov	qword ptr [rbx], OFFSET FLAT:fts_compare_ino
	mov	rdi, r15
	mov	rsi, r12
	mov	rdx, r14
	call	fts_sort
	mov	r14, rax
	mov	qword ptr [rbx], 0
	jmp	.label_630
.label_650:
	mov	r14, r12
	jmp	.label_630
.label_647:
	mov	al, 1
	mov	dword ptr [rsp + 0xc], eax
	mov	rax, r15
	mov	r15, qword ptr [rsp + 0x10]
	mov	rbp, r12
	mov	r13, rax
	jmp	.label_622
.label_671:
	mov	rdi, r12
	call	free
	mov	rbp, qword ptr [rsp + 0x50]
	test	rbp, rbp
	mov	r14, qword ptr [rsp + 0x30]
	je	.label_679
	nop	word ptr [rax + rax]
.label_683:
	mov	rbx, qword ptr [rbp + 0x10]
	mov	rdi, qword ptr [rbp + 0x18]
	test	rdi, rdi
	je	.label_667
	call	closedir
.label_667:
	mov	rdi, rbp
	call	free
	test	rbx, rbx
	mov	rbp, rbx
	jne	.label_683
.label_679:
	mov	rdi, qword ptr [r14 + 0x18]
	call	closedir
	mov	qword ptr [r14 + 0x18], 0
	mov	word ptr [r14 + 0x70], 7
	or	byte ptr [r13 + 1], 0x20
	mov	dword ptr [r15], 0x24
	jmp	.label_660
.label_655:
	mov	rdi, r13
	call	free
	mov	qword ptr [rbp + 0x20], 0
	mov	dword ptr [r15], 0x24
	jmp	.label_691
.label_657:
	mov	rdi, qword ptr [rbp + 0x20]
	call	free
	mov	qword ptr [rbp + 0x20], 0
.label_691:
	mov	qword ptr [rsp + 0x48], r12
.label_625:
	mov	r12, qword ptr [rsp + 0x30]
	mov	r14d, dword ptr [r15]
	mov	rdi, qword ptr [rsp + 0x48]
	call	free
	mov	rbx, qword ptr [rsp + 0x50]
	test	rbx, rbx
	je	.label_621
	nop	word ptr cs:[rax + rax]
.label_633:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_656
	call	closedir
.label_656:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_633
.label_621:
	mov	rbx, r12
	mov	rdi, qword ptr [rbx + 0x18]
	call	closedir
	mov	qword ptr [rbx + 0x18], 0
	mov	word ptr [rbx + 0x70], 7
	mov	rax, qword ptr [rsp + 0x28]
	or	byte ptr [rax + 1], 0x20
	mov	dword ptr [r15], r14d
.label_660:
	xor	r14d, r14d
.label_630:
	mov	rax, r14
	add	rsp, 0x98
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407c80

	.globl restore_initial_cwd
	.type restore_initial_cwd, @function
restore_initial_cwd:
	push	rbp
	push	rbx
	push	rax
	mov	rbx, rdi
	mov	eax, dword ptr [rbx + 0x48]
	test	al, 4
	jne	.label_696
	test	ah, 2
	jne	.label_699
	mov	edi, dword ptr [rbx + 0x28]
	call	fchdir
	test	eax, eax
	setne	al
	jmp	.label_701
.label_699:
	mov	esi, dword ptr [rbx + 0x2c]
	lea	rdi, [rbx + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_698
	mov	edi, eax
	call	close
.label_698:
	mov	dword ptr [rbx + 0x2c], 0xffffff9c
.label_696:
	xor	eax, eax
.label_701:
	movzx	ebp, al
	add	rbx, 0x60
	jmp	.label_697
	.section	.text
	.align	32
	#Procedure 0x407cca
	.globl sub_407cca
	.type sub_407cca, @function
sub_407cca:

	nop	word ptr [rax + rax]
.label_700:
	mov	edi, eax
	call	close
.label_697:
	mov	rdi, rbx
	call	i_ring_empty
	test	al, al
	jne	.label_702
	mov	rdi, rbx
	call	i_ring_pop
	test	eax, eax
	jns	.label_700
	jmp	.label_697
.label_702:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x407cfa
	.globl sub_407cfa
	.type sub_407cfa, @function
sub_407cfa:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407d00

	.globl rpl_fts_set
	.type rpl_fts_set, @function
rpl_fts_set:
	cmp	edx, 5
	jb	.label_703
	push	rax
	call	__errno_location
	mov	dword ptr [rax], 0x16
	mov	eax, 1
	add	rsp, 8
	ret	
.label_703:
	mov	word ptr [rsi + 0x74], dx
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x407d22
	.globl sub_407d22
	.type sub_407d22, @function
sub_407d22:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407d30
	.globl rpl_fts_children
	.type rpl_fts_children, @function
rpl_fts_children:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r12d, esi
	mov	r13, rdi
	mov	eax, r12d
	or	eax, 0x1000
	cmp	eax, 0x1000
	jne	.label_711
	mov	r15, qword ptr [r13]
	call	__errno_location
	mov	r14, rax
	mov	dword ptr [r14], 0
	xor	eax, eax
	test	byte ptr [r13 + 0x49], 0x20
	jne	.label_705
	movzx	ecx, word ptr [r15 + 0x70]
	xor	eax, eax
	cmp	ecx, 1
	je	.label_717
	movzx	ecx, cx
	cmp	ecx, 9
	jne	.label_705
	mov	rax, qword ptr [r15 + 0x10]
	jmp	.label_705
.label_711:
	call	__errno_location
	mov	dword ptr [rax], 0x16
	xor	eax, eax
	jmp	.label_705
.label_717:
	mov	rbx, qword ptr [r13 + 8]
	test	rbx, rbx
	je	.label_713
	nop	dword ptr [rax]
.label_706:
	mov	rbp, qword ptr [rbx + 0x10]
	mov	rdi, qword ptr [rbx + 0x18]
	test	rdi, rdi
	je	.label_709
	call	closedir
.label_709:
	mov	rdi, rbx
	call	free
	test	rbp, rbp
	mov	rbx, rbp
	jne	.label_706
.label_713:
	mov	ebx, 1
	cmp	r12d, 0x1000
	jne	.label_708
	or	byte ptr [r13 + 0x49], 0x10
	mov	ebx, 2
.label_708:
	cmp	qword ptr [r15 + 0x58], 0
	jne	.label_715
	mov	rax, qword ptr [r15 + 0x30]
	cmp	byte ptr [rax], 0x2f
	je	.label_715
	mov	eax, dword ptr [r13 + 0x48]
	test	al, 4
	jne	.label_715
	mov	edx, eax
	and	edx, 0x10
	shl	edx, 0xd
	or	edx, 0x90900
	test	ah, 2
	jne	.label_707
	mov	edi, OFFSET FLAT:label_467
	xor	eax, eax
	mov	esi, edx
	call	open_safer
	jmp	.label_718
.label_715:
	mov	rdi, r13
	mov	esi, ebx
	call	fts_build
	mov	qword ptr [r13 + 8], rax
.label_705:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_707:
	mov	edi, dword ptr [r13 + 0x2c]
	mov	esi, OFFSET FLAT:label_467
	xor	eax, eax
	call	openat_safer
.label_718:
	mov	r15d, eax
	test	r15d, r15d
	js	.label_716
	mov	rdi, r13
	mov	esi, ebx
	call	fts_build
	mov	qword ptr [r13 + 8], rax
	test	byte ptr [r13 + 0x49], 2
	jne	.label_714
	mov	edi, r15d
	call	fchdir
	test	eax, eax
	je	.label_719
	mov	ebx, dword ptr [r14]
	mov	edi, r15d
	call	close
	mov	dword ptr [r14], ebx
	xor	eax, eax
	jmp	.label_705
.label_716:
	mov	qword ptr [r13 + 8], 0
	xor	eax, eax
	jmp	.label_705
.label_714:
	mov	esi, dword ptr [r13 + 0x2c]
	cmp	esi, r15d
	jne	.label_710
	cmp	esi, -0x64
	jne	.label_712
.label_710:
	lea	rdi, [r13 + 0x60]
	call	i_ring_push
	test	eax, eax
	js	.label_704
	mov	edi, eax
	call	close
.label_704:
	mov	dword ptr [r13 + 0x2c], r15d
	jmp	.label_720
.label_719:
	mov	edi, r15d
	call	close
.label_720:
	mov	rax, qword ptr [r13 + 8]
	jmp	.label_705
.label_712:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x407ed7
	.globl sub_407ed7
	.type sub_407ed7, @function
sub_407ed7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407ee0

	.globl AD_hash
	.type AD_hash, @function
AD_hash:
	mov	rax, qword ptr [rdi + 8]
	xor	edx, edx
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	32
	#Procedure 0x407eed
	.globl sub_407eed
	.type sub_407eed, @function
sub_407eed:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x407ef0

	.globl AD_compare
	.type AD_compare, @function
AD_compare:
	mov	rax, qword ptr [rdi + 8]
	cmp	rax, qword ptr [rsi + 8]
	jne	.label_721
	mov	rax, qword ptr [rdi]
	cmp	rax, qword ptr [rsi]
	sete	al
	ret	
.label_721:
	xor	eax, eax
	ret	
	.section	.text
	.align	32
	#Procedure 0x407f07
	.globl sub_407f07
	.type sub_407f07, @function
sub_407f07:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x407f10

	.globl filesystem_type
	.type filesystem_type, @function
filesystem_type:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	sub	rsp, 0x78
	mov	r15d, esi
	mov	r13, rdi
	mov	rbx, qword ptr [r13 + 0x50]
	xor	eax, eax
	test	byte ptr [rbx + 0x49], 2
	je	.label_724
	mov	rbp, qword ptr [rbx + 0x50]
	test	rbp, rbp
	jne	.label_726
	xor	r12d, r12d
	mov	edi, 0xd
	xor	esi, esi
	mov	edx, OFFSET FLAT:dev_type_hash
	mov	ecx, OFFSET FLAT:dev_type_compare
	mov	r8d, OFFSET FLAT:free
	call	hash_initialize
	mov	rbp, rax
	mov	qword ptr [rbx + 0x50], rbp
	test	rbp, rbp
	mov	r14d, 0
	je	.label_727
.label_726:
	mov	rax, qword ptr [r13 + 0x78]
	mov	qword ptr [rsp], rax
	lea	rsi, [rsp]
	mov	rdi, rbp
	call	hash_lookup
	test	rax, rax
	je	.label_723
	mov	rax, qword ptr [rax + 8]
	jmp	.label_724
.label_723:
	mov	r12b, 1
	mov	r14, rbp
.label_727:
	xor	eax, eax
	test	r15d, r15d
	js	.label_724
	lea	rsi, [rsp]
	mov	edi, r15d
	call	fstatfs
	mov	ecx, eax
	xor	eax, eax
	test	ecx, ecx
	jne	.label_724
	test	r12b, r12b
	je	.label_725
	mov	edi, 0x10
	call	malloc
	mov	rbp, rax
	test	rbp, rbp
	je	.label_725
	mov	rax, qword ptr [r13 + 0x78]
	mov	qword ptr [rbp], rax
	mov	rax, qword ptr [rsp]
	mov	qword ptr [rbp + 8], rax
	mov	rdi, r14
	mov	rsi, rbp
	call	hash_insert
	test	rax, rax
	je	.label_722
	cmp	rax, rbp
	je	.label_725
	call	abort
.label_722:
	mov	rdi, rbp
	call	free
.label_725:
	mov	rax, qword ptr [rsp]
.label_724:
	add	rsp, 0x78
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x40800a
	.globl sub_40800a
	.type sub_40800a, @function
sub_40800a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408010

	.globl dev_type_hash
	.type dev_type_hash, @function
dev_type_hash:
	mov	rax, qword ptr [rdi]
	xor	edx, edx
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40801c
	.globl sub_40801c
	.type sub_40801c, @function
sub_40801c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x408020

	.globl dev_type_compare
	.type dev_type_compare, @function
dev_type_compare:
	mov	rax, qword ptr [rdi]
	cmp	rax, qword ptr [rsi]
	sete	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x40802a
	.globl sub_40802a
	.type sub_40802a, @function
sub_40802a:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408030

	.globl fts_compare_ino
	.type fts_compare_ino, @function
fts_compare_ino:
	mov	rax, qword ptr [rdi]
	mov	rax, qword ptr [rax + 0x80]
	mov	rcx, qword ptr [rsi]
	mov	rcx, qword ptr [rcx + 0x80]
	cmp	rcx, rax
	sbb	edx, edx
	and	edx, 1
	cmp	rax, rcx
	mov	eax, 0xffffffff
	cmovae	eax, edx
	ret	
	.section	.text
	.align	32
	#Procedure 0x408058
	.globl sub_408058
	.type sub_408058, @function
sub_408058:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408060

	.globl rpl_mbrtowc
	.type rpl_mbrtowc, @function
rpl_mbrtowc:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rdx
	mov	r14, rsi
	test	rdi, rdi
	lea	rbx, [rsp + 4]
	cmovne	rbx, rdi
	mov	rdi, rbx
	call	mbrtowc
	mov	r15, rax
	test	r12, r12
	je	.label_728
	cmp	r15, -2
	jb	.label_728
	xor	edi, edi
	call	hard_locale
	test	al, al
	jne	.label_728
	movzx	eax, byte ptr [r14]
	mov	dword ptr [rbx], eax
	mov	r15d, 1
.label_728:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x4080b6
	.globl sub_4080b6
	.type sub_4080b6, @function
sub_4080b6:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4080c0

	.globl close_stream
	.type close_stream, @function
close_stream:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	__fpending
	mov	r14, rax
	mov	ebp, dword ptr [rbx]
	mov	rdi, rbx
	call	rpl_fclose
	test	bpl, 0x20
	jne	.label_730
	test	eax, eax
	sete	cl
	neg	eax
	sbb	ebx, ebx
	test	r14, r14
	jne	.label_729
	test	cl, cl
	jne	.label_729
	call	__errno_location
	xor	ecx, ecx
	cmp	dword ptr [rax], 9
	mov	ebx, 0xffffffff
	cmove	ebx, ecx
	jmp	.label_729
.label_730:
	mov	ebx, 0xffffffff
	test	eax, eax
	jne	.label_729
	call	__errno_location
	mov	dword ptr [rax], 0
.label_729:
	mov	eax, ebx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408120

	.globl cycle_check_init
	.type cycle_check_init, @function
cycle_check_init:
	mov	qword ptr [rdi + 0x10], 0
	mov	dword ptr [rdi + 0x18], 0x95f616
	ret	
	.section	.text
	.align	32
	#Procedure 0x408130

	.globl cycle_check
	.type cycle_check, @function
cycle_check:
	cmp	dword ptr [rdi + 0x18], 0x95f616
	jne	.label_731
	mov	rcx, qword ptr [rdi + 0x10]
	test	rcx, rcx
	je	.label_732
	mov	rax, qword ptr [rsi + 8]
	cmp	rax, qword ptr [rdi]
	jne	.label_732
	mov	rdx, qword ptr [rsi]
	mov	al, 1
	cmp	rdx, qword ptr [rdi + 8]
	je	.label_733
.label_732:
	lea	rdx, [rcx + 1]
	mov	qword ptr [rdi + 0x10], rdx
	test	rdx, rcx
	jne	.label_734
	mov	al, 1
	test	rdx, rdx
	je	.label_733
	mov	rax, qword ptr [rsi]
	mov	qword ptr [rdi + 8], rax
	mov	rax, qword ptr [rsi + 8]
	mov	qword ptr [rdi], rax
.label_734:
	xor	eax, eax
.label_733:
	ret	
.label_731:
	push	rax
	mov	edi, OFFSET FLAT:label_735
	mov	esi, OFFSET FLAT:label_736
	mov	edx, 0x3c
	mov	ecx, OFFSET FLAT:label_737
	call	__assert_fail
	.section	.text
	.align	32
	#Procedure 0x408195
	.globl sub_408195
	.type sub_408195, @function
sub_408195:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4081a0

	.globl open_safer
	.type open_safer, @function
open_safer:
	sub	rsp, 0xd8
	test	al, al
	je	.label_738
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_738:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	xor	edx, edx
	test	sil, 0x40
	je	.label_739
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_741
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_740
.label_741:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_740:
	mov	edx, dword ptr [rax]
.label_739:
	xor	eax, eax
	call	open
	mov	edi, eax
	call	fd_safer
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	32
	#Procedure 0x408264
	.globl sub_408264
	.type sub_408264, @function
sub_408264:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408270

	.globl hard_locale
	.type hard_locale, @function
hard_locale:
	push	rbx
	xor	esi, esi
	call	setlocale
	mov	bl, 1
	test	rax, rax
	je	.label_743
	cmp	byte ptr [rax], 0x43
	jne	.label_745
	cmp	byte ptr [rax + 1], 0
	je	.label_742
.label_745:
	mov	esi, OFFSET FLAT:label_744
	mov	rdi, rax
	call	strcmp
	test	eax, eax
	jne	.label_743
.label_742:
	xor	ebx, ebx
.label_743:
	mov	eax, ebx
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x4082a1
	.globl sub_4082a1
	.type sub_4082a1, @function
sub_4082a1:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4082b0
	.globl hash_get_n_buckets
	.type hash_get_n_buckets, @function
hash_get_n_buckets:

	mov	rax, qword ptr [rdi + 0x10]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4082b5
	.globl sub_4082b5
	.type sub_4082b5, @function
sub_4082b5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4082c0
	.globl hash_get_n_buckets_used
	.type hash_get_n_buckets_used, @function
hash_get_n_buckets_used:

	mov	rax, qword ptr [rdi + 0x18]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4082c5
	.globl sub_4082c5
	.type sub_4082c5, @function
sub_4082c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4082d0
	.globl hash_get_n_entries
	.type hash_get_n_entries, @function
hash_get_n_entries:

	mov	rax, qword ptr [rdi + 0x20]
	ret	
	.section	.text
	.align	32
	#Procedure 0x4082d5
	.globl sub_4082d5
	.type sub_4082d5, @function
sub_4082d5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4082e0
	.globl hash_get_max_bucket_length
	.type hash_get_max_bucket_length, @function
hash_get_max_bucket_length:

	mov	rcx, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 8]
	xor	eax, eax
	cmp	rcx, rdi
	jae	.label_746
	mov	rax, rcx
	not	rax
	add	rdi, rax
	shr	rdi, 4
	lea	rsi, [rdi + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	eax, eax
	test	rdi, rdi
	je	.label_751
	sub	rsi, r8
	xor	eax, eax
	nop	word ptr cs:[rax + rax]
.label_752:
	cmp	qword ptr [rcx], 0
	je	.label_753
	xor	edi, edi
	mov	rdx, rcx
	nop	dword ptr [rax + rax]
.label_750:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_750
	cmp	rdi, rax
	cmova	rax, rdi
.label_753:
	cmp	qword ptr [rcx + 0x10], 0
	je	.label_748
	lea	rdx, [rcx + 0x10]
	xor	edi, edi
.label_749:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_749
	cmp	rdi, rax
	cmova	rax, rdi
.label_748:
	add	rcx, 0x20
	add	rsi, -2
	jne	.label_752
.label_751:
	test	r8, r8
	je	.label_746
	cmp	qword ptr [rcx], 0
	je	.label_746
	xor	edx, edx
	nop	word ptr [rax + rax]
.label_747:
	mov	rcx, qword ptr [rcx + 8]
	inc	rdx
	test	rcx, rcx
	jne	.label_747
	cmp	rdx, rax
	cmova	rax, rdx
.label_746:
	ret	
	.section	.text
	.align	32
	#Procedure 0x408394
	.globl sub_408394
	.type sub_408394, @function
sub_408394:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4083a0
	.globl hash_table_ok
	.type hash_table_ok, @function
hash_table_ok:

	mov	rax, qword ptr [rdi]
	mov	r9, qword ptr [rdi + 8]
	xor	r10d, r10d
	cmp	rax, r9
	mov	ecx, 0
	jae	.label_760
	mov	rcx, rax
	not	rcx
	add	r9, rcx
	shr	r9, 4
	lea	rsi, [r9 + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	ecx, ecx
	test	r9, r9
	je	.label_763
	sub	rsi, r8
	xor	ecx, ecx
	xor	r10d, r10d
	nop	
.label_759:
	cmp	qword ptr [rax], 0
	je	.label_755
	mov	rdx, rax
	nop	dword ptr [rax]
.label_762:
	inc	rcx
	mov	rdx, qword ptr [rdx + 8]
	test	rdx, rdx
	jne	.label_762
	inc	r10
.label_755:
	cmp	qword ptr [rax + 0x10], 0
	je	.label_764
	lea	rdx, [rax + 0x10]
	nop	word ptr [rax + rax]
.label_757:
	inc	rcx
	mov	rdx, qword ptr [rdx + 8]
	test	rdx, rdx
	jne	.label_757
	inc	r10
.label_764:
	add	rax, 0x20
	add	rsi, -2
	jne	.label_759
	jmp	.label_761
.label_763:
	xor	r10d, r10d
.label_761:
	test	r8, r8
	je	.label_760
	cmp	qword ptr [rax], 0
	je	.label_760
	nop	dword ptr [rax]
.label_754:
	inc	rcx
	mov	rax, qword ptr [rax + 8]
	test	rax, rax
	jne	.label_754
	inc	r10
.label_760:
	cmp	r10, qword ptr [rdi + 0x18]
	jne	.label_756
	mov	al, 1
	cmp	rcx, qword ptr [rdi + 0x20]
	je	.label_758
.label_756:
	xor	eax, eax
.label_758:
	ret	
	.section	.text
	.align	32
	#Procedure 0x408460
	.globl hash_print_statistics
	.type hash_print_statistics, @function
hash_print_statistics:

	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r15, rsi
	mov	rcx, qword ptr [rdi + 0x20]
	mov	r12, qword ptr [rdi + 0x10]
	mov	r14, qword ptr [rdi + 0x18]
	mov	rax, qword ptr [rdi]
	mov	rdi, qword ptr [rdi + 8]
	xor	ebx, ebx
	cmp	rax, rdi
	jae	.label_765
	mov	rdx, rax
	not	rdx
	add	rdi, rdx
	shr	rdi, 4
	lea	rsi, [rdi + 1]
	mov	r8d, esi
	and	r8d, 1
	xor	ebx, ebx
	test	rdi, rdi
	je	.label_769
	sub	rsi, r8
	xor	ebx, ebx
	nop	dword ptr [rax]
.label_768:
	cmp	qword ptr [rax], 0
	je	.label_777
	xor	edi, edi
	mov	rdx, rax
	nop	dword ptr [rax + rax]
.label_770:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_770
	cmp	rdi, rbx
	cmova	rbx, rdi
.label_777:
	cmp	qword ptr [rax + 0x10], 0
	je	.label_778
	lea	rdx, [rax + 0x10]
	xor	edi, edi
.label_776:
	mov	rdx, qword ptr [rdx + 8]
	inc	rdi
	test	rdx, rdx
	jne	.label_776
	cmp	rdi, rbx
	cmova	rbx, rdi
.label_778:
	add	rax, 0x20
	add	rsi, -2
	jne	.label_768
.label_769:
	test	r8, r8
	je	.label_765
	cmp	qword ptr [rax], 0
	je	.label_765
	xor	edx, edx
	nop	word ptr [rax + rax]
.label_766:
	mov	rax, qword ptr [rax + 8]
	inc	rdx
	test	rax, rax
	jne	.label_766
	cmp	rdx, rbx
	cmova	rbx, rdx
.label_765:
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_767
	xor	eax, eax
	mov	rdi, r15
	call	__fprintf_chk
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_779
	xor	eax, eax
	mov	rdi, r15
	mov	rcx, r12
	call	__fprintf_chk
	movq	xmm1, r14
	movdqa	xmm2, xmmword ptr [rip + label_772]
	punpckldq	xmm1, xmm2
	movapd	xmm3, xmmword ptr [rip + label_773]
	subpd	xmm1, xmm3
	pshufd	xmm0, xmm1, 0x4e
	addpd	xmm0, xmm1
	mulsd	xmm0, qword ptr [rip + label_774]
	movq	xmm1, r12
	punpckldq	xmm1, xmm2
	subpd	xmm1, xmm3
	pshufd	xmm2, xmm1, 0x4e
	addpd	xmm2, xmm1
	divsd	xmm0, xmm2
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_775
	mov	al, 1
	mov	rdi, r15
	mov	rcx, r14
	call	__fprintf_chk
	mov	esi, 1
	mov	edx, OFFSET FLAT:label_771
	xor	eax, eax
	mov	rdi, r15
	mov	rcx, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	jmp	__fprintf_chk
	.section	.text
	.align	32
	#Procedure 0x4085cf
	.globl sub_4085cf
	.type sub_4085cf, @function
sub_4085cf:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4085d0

	.globl hash_lookup
	.type hash_lookup, @function
hash_lookup:
	push	r15
	push	r14
	push	r12
	push	rbx
	push	rax
	mov	r12, rsi
	mov	r14, rdi
	mov	rsi, qword ptr [r14 + 0x10]
	mov	rdi, r12
	call	qword ptr [r14 + 0x30]
	cmp	rax, qword ptr [r14 + 0x10]
	jae	.label_783
	mov	rbx, qword ptr [r14]
	shl	rax, 4
	mov	rsi, qword ptr [rbx + rax]
	xor	r15d, r15d
	test	rsi, rsi
	je	.label_780
	add	rbx, rax
	je	.label_780
	cmp	rsi, r12
	je	.label_782
	xor	r15d, r15d
	nop	
.label_781:
	mov	rdi, r12
	call	qword ptr [r14 + 0x38]
	test	al, al
	jne	.label_784
	mov	rbx, qword ptr [rbx + 8]
	test	rbx, rbx
	je	.label_780
	mov	rsi, qword ptr [rbx]
	cmp	rsi, r12
	jne	.label_781
.label_782:
	mov	r15, r12
	jmp	.label_780
.label_784:
	mov	r15, qword ptr [rbx]
.label_780:
	mov	rax, r15
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	ret	
.label_783:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x408648
	.globl sub_408648
	.type sub_408648, @function
sub_408648:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408650
	.globl hash_get_first
	.type hash_get_first, @function
hash_get_first:

	xor	eax, eax
	cmp	qword ptr [rdi + 0x20], 0
	je	.label_785
	mov	rcx, qword ptr [rdi]
	mov	rdx, qword ptr [rdi + 8]
	jmp	.label_788
	.section	.text
	.align	32
	#Procedure 0x408662
	.globl sub_408662
	.type sub_408662, @function
sub_408662:

	nop	word ptr cs:[rax + rax]
.label_787:
	add	rcx, 0x10
.label_788:
	cmp	rcx, rdx
	jae	.label_786
	mov	rax, qword ptr [rcx]
	test	rax, rax
	je	.label_787
.label_785:
	ret	
.label_786:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x408688
	.globl sub_408688
	.type sub_408688, @function
sub_408688:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408690
	.globl hash_get_next
	.type hash_get_next, @function
hash_get_next:

	push	r14
	push	rbx
	push	rax
	mov	rbx, rsi
	mov	r14, rdi
	mov	rsi, qword ptr [r14 + 0x10]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	cmp	rax, qword ptr [r14 + 0x10]
	jae	.label_791
	mov	rcx, qword ptr [r14]
	shl	rax, 4
	lea	rdx, [rcx + rax]
	nop	word ptr cs:[rax + rax]
.label_792:
	cmp	qword ptr [rdx], rbx
	mov	rdx, qword ptr [rdx + 8]
	je	.label_789
	test	rdx, rdx
	jne	.label_792
	jmp	.label_790
.label_789:
	test	rdx, rdx
	je	.label_790
	mov	rax, qword ptr [rdx]
	jmp	.label_794
.label_790:
	mov	rdx, qword ptr [r14 + 8]
	lea	rcx, [rcx + rax + 0x10]
	nop	word ptr cs:[rax + rax]
.label_793:
	cmp	rcx, rdx
	mov	eax, 0
	jae	.label_794
	mov	rax, qword ptr [rcx]
	add	rcx, 0x10
	test	rax, rax
	je	.label_793
.label_794:
	add	rsp, 8
	pop	rbx
	pop	r14
	ret	
.label_791:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x408713
	.globl sub_408713
	.type sub_408713, @function
sub_408713:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408720
	.globl hash_get_entries
	.type hash_get_entries, @function
hash_get_entries:

	mov	r9, qword ptr [rdi]
	mov	r8, qword ptr [rdi + 8]
	xor	eax, eax
	cmp	r9, r8
	jae	.label_795
	xor	eax, eax
.label_797:
	cmp	qword ptr [r9], 0
	je	.label_796
	test	r9, r9
	je	.label_796
	mov	r8, r9
	nop	
.label_798:
	cmp	rax, rdx
	jae	.label_795
	mov	rcx, qword ptr [r8]
	mov	qword ptr [rsi + rax*8], rcx
	inc	rax
	mov	r8, qword ptr [r8 + 8]
	test	r8, r8
	jne	.label_798
	mov	r8, qword ptr [rdi + 8]
.label_796:
	add	r9, 0x10
	cmp	r9, r8
	jb	.label_797
.label_795:
	ret	
	.section	.text
	.align	32
	#Procedure 0x408766
	.globl sub_408766
	.type sub_408766, @function
sub_408766:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408770
	.globl hash_do_for_each
	.type hash_do_for_each, @function
hash_do_for_each:

	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rdx
	mov	r15, rsi
	mov	r12, rdi
	mov	r13, qword ptr [r12]
	mov	rax, qword ptr [r12 + 8]
	xor	ebx, ebx
	cmp	r13, rax
	jae	.label_802
	xor	ebx, ebx
.label_801:
	mov	rdi, qword ptr [r13]
	test	rdi, rdi
	je	.label_803
	test	r13, r13
	je	.label_803
	mov	rsi, r14
	call	r15
	test	al, al
	je	.label_802
	mov	rbp, r13
	nop	word ptr cs:[rax + rax]
.label_800:
	mov	rbp, qword ptr [rbp + 8]
	test	rbp, rbp
	je	.label_799
	inc	rbx
	mov	rdi, qword ptr [rbp]
	mov	rsi, r14
	call	r15
	test	al, al
	jne	.label_800
	jmp	.label_802
	.section	.text
	.align	32
	#Procedure 0x4087dc
	.globl sub_4087dc
	.type sub_4087dc, @function
sub_4087dc:

	nop	dword ptr [rax]
.label_799:
	mov	rax, qword ptr [r12 + 8]
	inc	rbx
.label_803:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_801
.label_802:
	mov	rax, rbx
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408803
	.globl sub_408803
	.type sub_408803, @function
sub_408803:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408810
	.globl hash_string
	.type hash_string, @function
hash_string:

	mov	al, byte ptr [rdi]
	xor	edx, edx
	test	al, al
	je	.label_804
	inc	rdi
	xor	edx, edx
	nop	dword ptr [rax]
.label_805:
	mov	rcx, rdx
	shl	rcx, 5
	sub	rcx, rdx
	movzx	eax, al
	add	rax, rcx
	xor	edx, edx
	div	rsi
	movzx	eax, byte ptr [rdi]
	inc	rdi
	test	al, al
	jne	.label_805
.label_804:
	mov	rax, rdx
	ret	
	.section	.text
	.align	32
	#Procedure 0x408843
	.globl sub_408843
	.type sub_408843, @function
sub_408843:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408850
	.globl hash_reset_tuning
	.type hash_reset_tuning, @function
hash_reset_tuning:

	mov	eax, dword ptr [rip + label_806]
	mov	dword ptr [rdi + 0x10], eax
	movups	xmm0, xmmword ptr [rip + default_tuning]
	movups	xmmword ptr [rdi], xmm0
	ret	
	.section	.text
	.align	32
	#Procedure 0x408864
	.globl sub_408864
	.type sub_408864, @function
sub_408864:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408870

	.globl hash_initialize
	.type hash_initialize, @function
hash_initialize:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, r8
	mov	rbx, rsi
	mov	r12, rdi
	test	rdx, rdx
	mov	r13d, OFFSET FLAT:raw_hasher
	cmovne	r13, rdx
	test	rcx, rcx
	mov	ebp, OFFSET FLAT:raw_comparator
	cmovne	rbp, rcx
	mov	edi, 0x50
	call	malloc
	mov	r15, rax
	xor	eax, eax
	test	r15, r15
	je	.label_807
	test	rbx, rbx
	mov	eax, OFFSET FLAT:default_tuning
	cmove	rbx, rax
	mov	qword ptr [r15 + 0x28], rbx
	cmp	rbx, rax
	je	.label_820
	movss	xmm0, dword ptr [rbx + 8]
	ucomiss	xmm0, dword ptr [rip + label_810]
	jbe	.label_808
	movss	xmm1, dword ptr [rip + label_814]
	ucomiss	xmm1, xmm0
	jbe	.label_808
	movss	xmm1, dword ptr [rbx + 0xc]
	ucomiss	xmm1, dword ptr [rip + label_819]
	jbe	.label_808
	movss	xmm1, dword ptr [rbx]
	xorps	xmm2, xmm2
	ucomiss	xmm1, xmm2
	jb	.label_808
	addss	xmm1, dword ptr [rip + label_810]
	ucomiss	xmm0, xmm1
	jbe	.label_808
	movss	xmm0, dword ptr [rbx + 4]
	movss	xmm2, dword ptr [rip + label_815]
	ucomiss	xmm2, xmm0
	jb	.label_808
	ucomiss	xmm0, xmm1
	jbe	.label_808
.label_820:
	cmp	byte ptr [rbx + 0x10], 0
	jne	.label_821
	mov	eax, r12d
	and	eax, 1
	test	r12, r12
	js	.label_809
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, r12
	jmp	.label_812
.label_809:
	shr	r12, 1
	or	rax, r12
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rax
	addss	xmm0, xmm0
.label_812:
	divss	xmm0, dword ptr [rbx + 8]
	movss	xmm1, dword ptr [rip + label_817]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	r12, xmm0
	ucomiss	xmm0, xmm1
	cmovae	r12, rcx
	ucomiss	xmm0, dword ptr [rip + label_818]
	jae	.label_808
.label_821:
	cmp	r12, 0xa
	mov	ebx, 0xa
	cmovae	rbx, r12
	or	rbx, 1
	jmp	.label_816
	.section	.text
	.align	32
	#Procedure 0x4089be
	.globl sub_4089be
	.type sub_4089be, @function
sub_4089be:

	nop	
.label_813:
	add	rbx, 2
.label_816:
	cmp	rbx, -1
	je	.label_808
	cmp	rbx, 0xa
	mov	ecx, 3
	jb	.label_811
	mov	esi, 0xc
	mov	edi, 9
	mov	ecx, 3
	nop	dword ptr [rax + rax]
.label_822:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_811
	lea	rdi, [rdi + rsi + 4]
	add	rcx, 2
	add	rsi, 8
	cmp	rdi, rbx
	jb	.label_822
.label_811:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_813
	mov	rax, rbx
	shr	rax, 0x3c
	jne	.label_808
	mov	qword ptr [r15 + 0x10], rbx
	test	rbx, rbx
	je	.label_808
	mov	esi, 0x10
	mov	rdi, rbx
	call	rpl_calloc
	mov	qword ptr [r15], rax
	test	rax, rax
	je	.label_808
	shl	rbx, 4
	add	rax, rbx
	mov	qword ptr [r15 + 8], rax
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x18], xmm0
	mov	qword ptr [r15 + 0x30], r13
	mov	qword ptr [r15 + 0x38], rbp
	mov	qword ptr [r15 + 0x40], r14
	mov	qword ptr [r15 + 0x48], 0
	mov	rax, r15
	jmp	.label_807
.label_808:
	mov	rdi, r15
	call	free
	xor	eax, eax
.label_807:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x408a88
	.globl sub_408a88
	.type sub_408a88, @function
sub_408a88:

	nop	dword ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408a90

	.globl raw_hasher
	.type raw_hasher, @function
raw_hasher:
	rol	rdi, 0x3d
	xor	edx, edx
	mov	rax, rdi
	div	rsi
	mov	rax, rdx
	ret	
	.section	.text
	.align	32
	#Procedure 0x408aa0

	.globl raw_comparator
	.type raw_comparator, @function
raw_comparator:
	cmp	rdi, rsi
	sete	al
	ret	
	.section	.text
	.align	32
	#Procedure 0x408aa7
	.globl sub_408aa7
	.type sub_408aa7, @function
sub_408aa7:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408ab0
	.globl hash_clear
	.type hash_clear, @function
hash_clear:

	push	r15
	push	r14
	push	rbx
	mov	r15, rdi
	mov	r14, qword ptr [r15]
	mov	rax, qword ptr [r15 + 8]
	jmp	.label_825
	.section	.text
	.align	32
	#Procedure 0x408ac1
	.globl sub_408ac1
	.type sub_408ac1, @function
sub_408ac1:

	nop	word ptr cs:[rax + rax]
.label_828:
	add	r14, 0x10
.label_825:
	cmp	r14, rax
	jae	.label_827
	cmp	qword ptr [r14], 0
	je	.label_828
	mov	rbx, qword ptr [r14 + 8]
	mov	rax, qword ptr [r15 + 0x40]
	test	rax, rax
	setne	cl
	test	rbx, rbx
	je	.label_829
	nop	word ptr cs:[rax + rax]
.label_824:
	test	cl, 1
	je	.label_823
	mov	rdi, qword ptr [rbx]
	call	rax
	mov	rax, qword ptr [r15 + 0x40]
.label_823:
	mov	qword ptr [rbx], 0
	mov	rdx, qword ptr [rbx + 8]
	mov	rcx, qword ptr [r15 + 0x48]
	mov	qword ptr [rbx + 8], rcx
	mov	qword ptr [r15 + 0x48], rbx
	test	rax, rax
	setne	cl
	test	rdx, rdx
	mov	rbx, rdx
	jne	.label_824
.label_829:
	test	cl, cl
	je	.label_826
	mov	rdi, qword ptr [r14]
	call	rax
.label_826:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r14], xmm0
	mov	rax, qword ptr [r15 + 8]
	jmp	.label_828
.label_827:
	xorps	xmm0, xmm0
	movups	xmmword ptr [r15 + 0x18], xmm0
	pop	rbx
	pop	r14
	pop	r15
	ret	
	.section	.text
	.align	32
	#Procedure 0x408b57
	.globl sub_408b57
	.type sub_408b57, @function
sub_408b57:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408b60

	.globl hash_free
	.type hash_free, @function
hash_free:
	push	r15
	push	r14
	push	rbx
	mov	r14, rdi
	cmp	qword ptr [r14 + 0x40], 0
	je	.label_835
	cmp	qword ptr [r14 + 0x20], 0
	je	.label_835
	mov	r15, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_840
	.section	.text
	.align	32
	#Procedure 0x408b7f
	.globl sub_408b7f
	.type sub_408b7f, @function
sub_408b7f:

	nop	
.label_834:
	add	r15, 0x10
.label_840:
	cmp	r15, rax
	jae	.label_835
	mov	rdi, qword ptr [r15]
	test	rdi, rdi
	je	.label_834
	test	r15, r15
	je	.label_834
	call	qword ptr [r14 + 0x40]
	mov	rbx, qword ptr [r15 + 8]
	jmp	.label_836
.label_838:
	mov	rdi, qword ptr [rbx]
	call	qword ptr [r14 + 0x40]
	mov	rbx, qword ptr [rbx + 8]
.label_836:
	test	rbx, rbx
	jne	.label_838
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_834
.label_835:
	mov	r15, qword ptr [r14]
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_831
	.section	.text
	.align	32
	#Procedure 0x408bbf
	.globl sub_408bbf
	.type sub_408bbf, @function
sub_408bbf:

	nop	
.label_839:
	add	r15, 0x10
.label_831:
	cmp	r15, rax
	jae	.label_830
	mov	rdi, qword ptr [r15 + 8]
	test	rdi, rdi
	je	.label_839
	nop	word ptr cs:[rax + rax]
.label_837:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_837
	mov	rax, qword ptr [r14 + 8]
	jmp	.label_839
.label_830:
	mov	rdi, qword ptr [r14 + 0x48]
	test	rdi, rdi
	je	.label_833
.label_832:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_832
.label_833:
	mov	rdi, qword ptr [r14]
	call	free
	mov	rdi, r14
	pop	rbx
	pop	r14
	pop	r15
	jmp	free
	.section	.text
	.align	32
	#Procedure 0x408c26
	.globl sub_408c26
	.type sub_408c26, @function
sub_408c26:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408c30

	.globl hash_rehash
	.type hash_rehash, @function
hash_rehash:
	push	rbp
	push	r15
	push	r14
	push	r12
	push	rbx
	sub	rsp, 0x50
	mov	r14, rdi
	mov	rax, qword ptr [r14 + 0x28]
	cmp	byte ptr [rax + 0x10], 0
	jne	.label_842
	mov	ecx, esi
	and	ecx, 1
	test	rsi, rsi
	js	.label_843
	cvtsi2ss	xmm0, rsi
	jmp	.label_848
.label_843:
	shr	rsi, 1
	or	rcx, rsi
	cvtsi2ss	xmm0, rcx
	addss	xmm0, xmm0
.label_848:
	divss	xmm0, dword ptr [rax + 8]
	movss	xmm1, dword ptr [rip + label_817]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	ucomiss	xmm0, dword ptr [rip + label_818]
	jae	.label_841
.label_842:
	cmp	rsi, 0xa
	mov	ebx, 0xa
	cmovae	rbx, rsi
	or	rbx, 1
	jmp	.label_852
	.section	.text
	.align	32
	#Procedure 0x408cbb
	.globl sub_408cbb
	.type sub_408cbb, @function
sub_408cbb:

	nop	dword ptr [rax + rax]
.label_846:
	add	rbx, 2
.label_852:
	cmp	rbx, -1
	je	.label_841
	cmp	rbx, 0xa
	mov	ecx, 3
	jb	.label_845
	mov	esi, 0xc
	mov	edi, 9
	mov	ecx, 3
	nop	dword ptr [rax + rax]
.label_859:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_845
	lea	rdi, [rdi + rsi + 4]
	add	rcx, 2
	add	rsi, 8
	cmp	rdi, rbx
	jb	.label_859
.label_845:
	xor	edx, edx
	mov	rax, rbx
	div	rcx
	test	rdx, rdx
	je	.label_846
	lea	rax, [rbx - 1]
	movabs	rcx, 0xffffffffffffffe
	cmp	rax, rcx
	ja	.label_841
	mov	bpl, 1
	cmp	rbx, qword ptr [r14 + 0x10]
	je	.label_853
	mov	esi, 0x10
	mov	rdi, rbx
	call	rpl_calloc
	mov	qword ptr [rsp], rax
	test	rax, rax
	je	.label_841
	mov	qword ptr [rsp + 0x10], rbx
	shl	rbx, 4
	add	rax, rbx
	mov	qword ptr [rsp + 8], rax
	xorps	xmm0, xmm0
	movups	xmmword ptr [rsp + 0x18], xmm0
	movups	xmm0, xmmword ptr [r14 + 0x28]
	movups	xmmword ptr [rsp + 0x28], xmm0
	movups	xmm0, xmmword ptr [r14 + 0x38]
	movups	xmmword ptr [rsp + 0x38], xmm0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rsp + 0x48], rax
	lea	rdi, [rsp]
	xor	edx, edx
	mov	rsi, r14
	call	transfer_entries
	test	al, al
	je	.label_850
	mov	rdi, qword ptr [r14]
	call	free
	movaps	xmm0, xmmword ptr [rsp]
	movups	xmmword ptr [r14], xmm0
	movaps	xmm0, xmmword ptr [rsp + 0x10]
	movups	xmmword ptr [r14 + 0x10], xmm0
	mov	rax, qword ptr [rsp + 0x48]
	mov	qword ptr [r14 + 0x48], rax
	jmp	.label_853
.label_850:
	mov	rax, qword ptr [rsp + 0x48]
	mov	qword ptr [r14 + 0x48], rax
	mov	r12, qword ptr [rsp]
	mov	r15, qword ptr [rsp + 8]
	jmp	.label_844
	.section	.text
	.align	32
	#Procedure 0x408dde
	.globl sub_408dde
	.type sub_408dde, @function
sub_408dde:

	nop	
.label_854:
	add	r12, 0x10
.label_844:
	cmp	r12, r15
	jae	.label_851
	cmp	qword ptr [r12], 0
	je	.label_854
	mov	rbp, qword ptr [r12 + 8]
	test	rbp, rbp
	je	.label_857
	mov	rsi, qword ptr [r14 + 0x10]
	nop	word ptr cs:[rax + rax]
.label_855:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_849
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_856
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_858
	.section	.text
	.align	32
	#Procedure 0x408e4a
	.globl sub_408e4a
	.type sub_408e4a, @function
sub_408e4a:

	nop	word ptr [rax + rax]
.label_856:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_858:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_855
.label_857:
	mov	qword ptr [r12 + 8], 0
	jmp	.label_854
.label_851:
	lea	rsi, [rsp]
	xor	edx, edx
	mov	rdi, r14
	call	transfer_entries
	test	al, al
	je	.label_847
	mov	rdi, qword ptr [rsp]
	call	free
.label_841:
	xor	ebp, ebp
.label_853:
	mov	eax, ebp
	add	rsp, 0x50
	pop	rbx
	pop	r12
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_849:
	call	abort
.label_847:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x408eba
	.globl sub_408eba
	.type sub_408eba, @function
sub_408eba:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x408ec0

	.globl transfer_entries
	.type transfer_entries, @function
transfer_entries:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rsi
	mov	r14, rdi
	mov	r13, qword ptr [r15]
	mov	rax, qword ptr [r15 + 8]
	cmp	r13, rax
	jae	.label_860
	test	dl, dl
	je	.label_866
	nop	dword ptr [rax]
.label_861:
	cmp	qword ptr [r13], 0
	je	.label_875
	mov	rbp, qword ptr [r13 + 8]
	test	rbp, rbp
	je	.label_880
	mov	rsi, qword ptr [r14 + 0x10]
	nop	dword ptr [rax + rax]
.label_874:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_865
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_872
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_864
	.section	.text
	.align	32
	#Procedure 0x408f4a
	.globl sub_408f4a
	.type sub_408f4a, @function
sub_408f4a:

	nop	word ptr [rax + rax]
.label_872:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_864:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_874
	mov	rax, qword ptr [r15 + 8]
.label_880:
	mov	qword ptr [r13 + 8], 0
.label_875:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_861
	jmp	.label_860
	.section	.text
	.align	32
	#Procedure 0x408f94
	.globl sub_408f94
	.type sub_408f94, @function
sub_408f94:

	nop	word ptr cs:[rax + rax]
.label_866:
	mov	r12, qword ptr [r13]
	test	r12, r12
	je	.label_871
	mov	rbp, qword ptr [r13 + 8]
	test	rbp, rbp
	mov	rsi, qword ptr [r14 + 0x10]
	je	.label_873
	nop	word ptr [rax + rax]
.label_878:
	mov	rbx, qword ptr [rbp]
	mov	rdi, rbx
	call	qword ptr [r14 + 0x30]
	mov	rsi, qword ptr [r14 + 0x10]
	cmp	rax, rsi
	jae	.label_865
	mov	rdx, qword ptr [r14]
	mov	rcx, qword ptr [rbp + 8]
	shl	rax, 4
	cmp	qword ptr [rdx + rax], 0
	je	.label_869
	mov	rdi, qword ptr [rdx + rax + 8]
	mov	qword ptr [rbp + 8], rdi
	mov	qword ptr [rdx + rax + 8], rbp
	jmp	.label_876
	.section	.text
	.align	32
	#Procedure 0x408ffa
	.globl sub_408ffa
	.type sub_408ffa, @function
sub_408ffa:

	nop	word ptr [rax + rax]
.label_869:
	add	rdx, rax
	mov	qword ptr [rdx], rbx
	inc	qword ptr [r14 + 0x18]
	mov	qword ptr [rbp], 0
	mov	rax, qword ptr [r14 + 0x48]
	mov	qword ptr [rbp + 8], rax
	mov	qword ptr [r14 + 0x48], rbp
.label_876:
	test	rcx, rcx
	mov	rbp, rcx
	jne	.label_878
	mov	r12, qword ptr [r13]
.label_873:
	mov	qword ptr [r13 + 8], 0
	mov	rdi, r12
	call	qword ptr [r14 + 0x30]
	mov	rbx, rax
	cmp	rbx, qword ptr [r14 + 0x10]
	jae	.label_879
	mov	rbp, qword ptr [r14]
	shl	rbx, 4
	cmp	qword ptr [rbp + rbx], 0
	je	.label_862
	mov	rax, qword ptr [r14 + 0x48]
	test	rax, rax
	je	.label_868
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [r14 + 0x48], rcx
	jmp	.label_870
	.section	.text
	.align	32
	#Procedure 0x409068
	.globl sub_409068
	.type sub_409068, @function
sub_409068:

	nop	dword ptr [rax + rax]
.label_862:
	add	rbp, rbx
	mov	qword ptr [rbp], r12
	inc	qword ptr [r14 + 0x18]
	jmp	.label_877
.label_868:
	mov	edi, 0x10
	call	malloc
	test	rax, rax
	je	.label_863
.label_870:
	mov	qword ptr [rax], r12
	mov	rcx, qword ptr [rbp + rbx + 8]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [rbp + rbx + 8], rax
.label_877:
	mov	qword ptr [r13], 0
	dec	qword ptr [r15 + 0x18]
	mov	rax, qword ptr [r15 + 8]
.label_871:
	add	r13, 0x10
	cmp	r13, rax
	jb	.label_866
.label_860:
	mov	al, 1
.label_867:
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_863:
	xor	eax, eax
	jmp	.label_867
.label_865:
	call	abort
.label_879:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4090d9
	.globl sub_4090d9
	.type sub_4090d9, @function
sub_4090d9:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x4090e0

	.globl hash_insert_if_absent
	.type hash_insert_if_absent, @function
hash_insert_if_absent:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r15, rdx
	mov	r14, rsi
	mov	r13, rdi
	test	r14, r14
	je	.label_882
	mov	rsi, qword ptr [r13 + 0x10]
	mov	rdi, r14
	call	qword ptr [r13 + 0x30]
	mov	rbp, rax
	cmp	rbp, qword ptr [r13 + 0x10]
	jae	.label_882
	mov	rbx, qword ptr [r13]
	shl	rbp, 4
	lea	r12, [rbx + rbp]
	mov	rsi, qword ptr [rbx + rbp]
	test	rsi, rsi
	je	.label_886
	cmp	rsi, r14
	je	.label_892
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	test	al, al
	je	.label_907
	mov	rax, qword ptr [r12]
.label_891:
	test	rax, rax
	jne	.label_897
	jmp	.label_886
.label_892:
	mov	rax, r14
.label_897:
	xor	ebp, ebp
	test	r15, r15
	je	.label_887
	mov	qword ptr [r15], rax
	jmp	.label_887
.label_907:
	mov	rax, qword ptr [rbx + rbp + 8]
	test	rax, rax
	je	.label_886
	lea	rbp, [rbx + rbp + 8]
	nop	word ptr [rax + rax]
.label_884:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_910
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	mov	rbp, qword ptr [rbp]
	test	al, al
	jne	.label_881
	mov	rax, qword ptr [rbp + 8]
	add	rbp, 8
	test	rax, rax
	jne	.label_884
.label_886:
	mov	rcx, qword ptr [r13 + 0x10]
	mov	rax, qword ptr [r13 + 0x18]
	mov	edx, eax
	and	edx, 1
	test	rax, rax
	js	.label_888
	cvtsi2ss	xmm1, rax
	jmp	.label_894
.label_888:
	shr	rax, 1
	or	rdx, rax
	cvtsi2ss	xmm1, rdx
	addss	xmm1, xmm1
.label_894:
	mov	rax, qword ptr [r13 + 0x28]
	movss	xmm2, dword ptr [rax + 8]
	mov	edx, ecx
	and	edx, 1
	test	rcx, rcx
	js	.label_899
	cvtsi2ss	xmm0, rcx
	jmp	.label_905
.label_899:
	shr	rcx, 1
	or	rdx, rcx
	cvtsi2ss	xmm0, rdx
	addss	xmm0, xmm0
.label_905:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm1, xmm3
	jbe	.label_906
	mov	ecx, OFFSET FLAT:default_tuning
	cmp	rax, rcx
	je	.label_911
	ucomiss	xmm2, dword ptr [rip + label_810]
	jbe	.label_885
	movss	xmm3, dword ptr [rip + label_814]
	ucomiss	xmm3, xmm2
	jbe	.label_885
	movss	xmm3, dword ptr [rax + 0xc]
	ucomiss	xmm3, dword ptr [rip + label_819]
	jbe	.label_885
	movss	xmm3, dword ptr [rax]
	xorps	xmm4, xmm4
	ucomiss	xmm3, xmm4
	jb	.label_885
	addss	xmm3, dword ptr [rip + label_810]
	ucomiss	xmm2, xmm3
	jbe	.label_885
	movss	xmm4, dword ptr [rax + 4]
	movss	xmm5, dword ptr [rip + label_815]
	ucomiss	xmm5, xmm4
	jb	.label_885
	ucomiss	xmm4, xmm3
	ja	.label_890
.label_885:
	mov	qword ptr [r13 + 40], OFFSET FLAT:default_tuning
	mov	eax, OFFSET FLAT:default_tuning
	movss	xmm2, dword ptr [rip + label_889]
	jmp	.label_890
.label_911:
	mov	eax, OFFSET FLAT:default_tuning
.label_890:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm1, xmm3
	jbe	.label_906
	cmp	byte ptr [rax + 0x10], 0
	mulss	xmm0, dword ptr [rax + 0xc]
	jne	.label_909
	mulss	xmm0, xmm2
.label_909:
	mov	ebp, 0xffffffff
	ucomiss	xmm0, dword ptr [rip + label_818]
	jae	.label_887
	movss	xmm1, dword ptr [rip + label_817]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	mov	rdi, r13
	call	hash_rehash
	test	al, al
	je	.label_887
	mov	rsi, qword ptr [r13 + 0x10]
	mov	rdi, r14
	call	qword ptr [r13 + 0x30]
	mov	rbp, rax
	cmp	rbp, qword ptr [r13 + 0x10]
	jae	.label_882
	mov	rbx, qword ptr [r13]
	shl	rbp, 4
	lea	r12, [rbx + rbp]
	mov	rsi, qword ptr [rbx + rbp]
	test	rsi, rsi
	je	.label_906
	cmp	rsi, r14
	mov	rax, r14
	je	.label_901
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	test	al, al
	je	.label_883
	mov	rax, qword ptr [r12]
.label_901:
	test	rax, rax
	jne	.label_893
.label_906:
	cmp	qword ptr [r12], 0
	je	.label_895
	mov	rax, qword ptr [r13 + 0x48]
	test	rax, rax
	je	.label_896
	mov	rcx, qword ptr [rax + 8]
	mov	qword ptr [r13 + 0x48], rcx
	jmp	.label_900
.label_895:
	mov	qword ptr [r12], r14
	movdqu	xmm0, xmmword ptr [r13 + 0x18]
	paddq	xmm0, xmmword ptr [rip + label_903]
	movdqu	xmmword ptr [r13 + 0x18], xmm0
	jmp	.label_904
.label_896:
	mov	edi, 0x10
	call	malloc
	mov	ebp, 0xffffffff
	test	rax, rax
	je	.label_887
.label_900:
	mov	qword ptr [rax], r14
	mov	rcx, qword ptr [r12 + 8]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [r12 + 8], rax
	inc	qword ptr [r13 + 0x20]
.label_904:
	mov	ebp, 1
.label_887:
	mov	eax, ebp
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_910:
	mov	rax, r14
	jmp	.label_891
.label_881:
	mov	rax, qword ptr [rbp]
	jmp	.label_891
.label_883:
	mov	rax, qword ptr [rbx + rbp + 8]
	test	rax, rax
	je	.label_906
	lea	rbp, [rbx + rbp + 8]
.label_908:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_902
	mov	rdi, r14
	call	qword ptr [r13 + 0x38]
	mov	rbp, qword ptr [rbp]
	test	al, al
	jne	.label_898
	mov	rax, qword ptr [rbp + 8]
	add	rbp, 8
	test	rax, rax
	jne	.label_908
	jmp	.label_906
.label_902:
	mov	rax, r14
	jmp	.label_901
.label_898:
	mov	rax, qword ptr [rbp]
	jmp	.label_901
.label_882:
	call	abort
.label_893:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x409411
	.globl sub_409411
	.type sub_409411, @function
sub_409411:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409420

	.globl hash_insert
	.type hash_insert, @function
hash_insert:
	push	rbx
	sub	rsp, 0x10
	mov	rbx, rsi
	lea	rdx, [rsp + 8]
	call	hash_insert_if_absent
	mov	ecx, eax
	xor	eax, eax
	cmp	ecx, -1
	je	.label_912
	test	ecx, ecx
	cmove	rbx, qword ptr [rsp + 8]
	mov	rax, rbx
.label_912:
	add	rsp, 0x10
	pop	rbx
	ret	
	.section	.text
	.align	32
	#Procedure 0x40944c
	.globl sub_40944c
	.type sub_40944c, @function
sub_40944c:

	nop	dword ptr [rax]
	.section	.text
	.align	32
	#Procedure 0x409450

	.globl hash_delete
	.type hash_delete, @function
hash_delete:
	push	rbp
	push	r15
	push	r14
	push	r13
	push	r12
	push	rbx
	push	rax
	mov	r14, rsi
	mov	r15, rdi
	mov	rsi, qword ptr [r15 + 0x10]
	mov	rdi, r14
	call	qword ptr [r15 + 0x30]
	mov	rbx, rax
	cmp	rbx, qword ptr [r15 + 0x10]
	jae	.label_930
	mov	rbp, qword ptr [r15]
	shl	rbx, 4
	mov	rsi, qword ptr [rbp + rbx]
	xor	r12d, r12d
	test	rsi, rsi
	je	.label_917
	lea	r13, [rbp + rbx]
	cmp	rsi, r14
	je	.label_916
	mov	rdi, r14
	call	qword ptr [r15 + 0x38]
	test	al, al
	je	.label_919
	mov	r14, qword ptr [r13]
.label_916:
	mov	rax, qword ptr [rbp + rbx + 8]
	test	rax, rax
	je	.label_922
	movups	xmm0, xmmword ptr [rax]
	movups	xmmword ptr [r13], xmm0
	mov	qword ptr [rax], 0
	mov	rcx, qword ptr [r15 + 0x48]
	mov	qword ptr [rax + 8], rcx
	mov	qword ptr [r15 + 0x48], rax
	jmp	.label_924
.label_919:
	mov	rax, qword ptr [rbp + rbx + 8]
	xor	r12d, r12d
	test	rax, rax
	je	.label_917
	lea	rbx, [rbp + rbx + 8]
	xor	r12d, r12d
	nop	word ptr [rax + rax]
.label_913:
	mov	rsi, qword ptr [rax]
	cmp	rsi, r14
	je	.label_931
	mov	rdi, r14
	call	qword ptr [r15 + 0x38]
	mov	rcx, qword ptr [rbx]
	test	al, al
	jne	.label_933
	mov	rax, qword ptr [rcx + 8]
	add	rcx, 8
	test	rax, rax
	mov	rbx, rcx
	jne	.label_913
	jmp	.label_917
.label_922:
	mov	qword ptr [r13], 0
	jmp	.label_924
.label_931:
	mov	rcx, rax
	jmp	.label_921
.label_933:
	mov	r14, qword ptr [rcx]
.label_921:
	mov	rax, qword ptr [rcx + 8]
	mov	qword ptr [rbx], rax
	mov	qword ptr [rcx], 0
	mov	rax, qword ptr [r15 + 0x48]
	mov	qword ptr [rcx + 8], rax
	mov	qword ptr [r15 + 0x48], rcx
.label_924:
	xor	r12d, r12d
	test	r14, r14
	je	.label_917
	dec	qword ptr [r15 + 0x20]
	cmp	qword ptr [r13], 0
	jne	.label_918
	mov	rax, qword ptr [r15 + 0x18]
	dec	rax
	mov	qword ptr [r15 + 0x18], rax
	mov	ecx, eax
	and	ecx, 1
	test	rax, rax
	js	.label_928
	cvtsi2ss	xmm1, rax
	jmp	.label_932
.label_928:
	shr	rax, 1
	or	rcx, rax
	cvtsi2ss	xmm1, rcx
	addss	xmm1, xmm1
.label_932:
	mov	rcx, qword ptr [r15 + 0x10]
	mov	rax, qword ptr [r15 + 0x28]
	movss	xmm2, dword ptr [rax]
	mov	edx, ecx
	and	edx, 1
	test	rcx, rcx
	js	.label_915
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rcx
	jmp	.label_920
.label_915:
	shr	rcx, 1
	or	rdx, rcx
	xorps	xmm0, xmm0
	cvtsi2ss	xmm0, rdx
	addss	xmm0, xmm0
.label_920:
	movaps	xmm3, xmm2
	mulss	xmm3, xmm0
	ucomiss	xmm3, xmm1
	jbe	.label_918
	mov	ecx, OFFSET FLAT:default_tuning
	cmp	rax, rcx
	je	.label_926
	movss	xmm3, dword ptr [rax + 8]
	ucomiss	xmm3, dword ptr [rip + label_810]
	jbe	.label_914
	movss	xmm4, dword ptr [rip + label_814]
	ucomiss	xmm4, xmm3
	jbe	.label_914
	xorps	xmm4, xmm4
	ucomiss	xmm2, xmm4
	jb	.label_914
	movss	xmm4, dword ptr [rax + 0xc]
	ucomiss	xmm4, dword ptr [rip + label_819]
	jbe	.label_914
	movss	xmm4, dword ptr [rip + label_810]
	addss	xmm4, xmm2
	ucomiss	xmm3, xmm4
	jbe	.label_914
	movss	xmm3, dword ptr [rax + 4]
	movss	xmm5, dword ptr [rip + label_815]
	ucomiss	xmm5, xmm3
	jb	.label_914
	ucomiss	xmm3, xmm4
	ja	.label_923
.label_914:
	mov	qword ptr [r15 + 40], OFFSET FLAT:default_tuning
	mov	eax, OFFSET FLAT:default_tuning
	xorps	xmm2, xmm2
	jmp	.label_923
.label_926:
	mov	eax, OFFSET FLAT:default_tuning
.label_923:
	mulss	xmm2, xmm0
	ucomiss	xmm2, xmm1
	jbe	.label_918
	mulss	xmm0, dword ptr [rax + 4]
	cmp	byte ptr [rax + 0x10], 0
	jne	.label_927
	mulss	xmm0, dword ptr [rax + 8]
.label_927:
	movss	xmm1, dword ptr [rip + label_817]
	movaps	xmm2, xmm0
	subss	xmm2, xmm1
	cvttss2si	rax, xmm2
	movabs	rcx, 0x8000000000000000
	xor	rcx, rax
	cvttss2si	rsi, xmm0
	ucomiss	xmm0, xmm1
	cmovae	rsi, rcx
	mov	rdi, r15
	call	hash_rehash
	test	al, al
	jne	.label_918
	mov	rdi, qword ptr [r15 + 0x48]
	test	rdi, rdi
	je	.label_929
	nop	word ptr cs:[rax + rax]
.label_925:
	mov	rbx, qword ptr [rdi + 8]
	call	free
	test	rbx, rbx
	mov	rdi, rbx
	jne	.label_925
.label_929:
	mov	qword ptr [r15 + 0x48], 0
.label_918:
	mov	r12, r14
.label_917:
	mov	rax, r12
	add	rsp, 8
	pop	rbx
	pop	r12
	pop	r13
	pop	r14
	pop	r15
	pop	rbp
	ret	
.label_930:
	call	abort
	.section	.text
	.align	32
	#Procedure 0x4096e3
	.globl sub_4096e3
	.type sub_4096e3, @function
sub_4096e3:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4096f0

	.globl i_ring_init
	.type i_ring_init, @function
i_ring_init:
	mov	byte ptr [rdi + 0x1c], 1
	mov	dword ptr [rdi + 0x14], 0
	mov	dword ptr [rdi + 0x18], 0
	movd	xmm0, esi
	pshufd	xmm0, xmm0, 0
	movdqu	xmmword ptr [rdi], xmm0
	mov	dword ptr [rdi + 0x10], esi
	ret	
	.section	.text
	.align	32
	#Procedure 0x409713
	.globl sub_409713
	.type sub_409713, @function
sub_409713:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409720

	.globl i_ring_empty
	.type i_ring_empty, @function
i_ring_empty:
	mov	al, byte ptr [rdi + 0x1c]
	ret	
	.section	.text
	.align	32
	#Procedure 0x409724
	.globl sub_409724
	.type sub_409724, @function
sub_409724:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409730

	.globl i_ring_push
	.type i_ring_push, @function
i_ring_push:
	movzx	ecx, byte ptr [rdi + 0x1c]
	xor	ecx, 1
	add	ecx, dword ptr [rdi + 0x14]
	mov	edx, ecx
	and	edx, 3
	mov	eax, dword ptr [rdi + rdx*4]
	mov	dword ptr [rdi + rdx*4], esi
	mov	dword ptr [rdi + 0x14], edx
	cmp	edx, dword ptr [rdi + 0x18]
	jne	.label_934
	mov	dl, byte ptr [rdi + 0x1c]
	xor	dl, 1
	movzx	edx, dl
	add	edx, ecx
	and	edx, 3
	mov	dword ptr [rdi + 0x18], edx
.label_934:
	mov	byte ptr [rdi + 0x1c], 0
	ret	
	.section	.text
	.align	32
	#Procedure 0x409763
	.globl sub_409763
	.type sub_409763, @function
sub_409763:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409770

	.globl i_ring_pop
	.type i_ring_pop, @function
i_ring_pop:
	cmp	byte ptr [rdi + 0x1c], 0
	jne	.label_935
	mov	ecx, dword ptr [rdi + 0x10]
	mov	edx, dword ptr [rdi + 0x14]
	mov	eax, dword ptr [rdi + rdx*4]
	mov	dword ptr [rdi + rdx*4], ecx
	mov	ecx, dword ptr [rdi + 0x14]
	cmp	ecx, dword ptr [rdi + 0x18]
	jne	.label_936
	mov	byte ptr [rdi + 0x1c], 1
	ret	
.label_936:
	add	ecx, 3
	and	ecx, 3
	mov	dword ptr [rdi + 0x14], ecx
	ret	
.label_935:
	push	rax
	call	abort
	.section	.text
	.align	32
	#Procedure 0x40979f
	.globl sub_40979f
	.type sub_40979f, @function
sub_40979f:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4097a0

	.globl locale_charset
	.type locale_charset, @function
locale_charset:
	push	rax
	mov	edi, 0xe
	call	rpl_nl_langinfo
	test	rax, rax
	mov	ecx, OFFSET FLAT:label_42
	cmovne	rcx, rax
	cmp	byte ptr [rcx], 0
	mov	eax, OFFSET FLAT:label_937
	cmovne	rax, rcx
	pop	rcx
	ret	
	.section	.text
	.align	32
	#Procedure 0x4097c5
	.globl sub_4097c5
	.type sub_4097c5, @function
sub_4097c5:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4097d0

	.globl openat_safer
	.type openat_safer, @function
openat_safer:
	sub	rsp, 0xd8
	test	al, al
	je	.label_938
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_938:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	xor	ecx, ecx
	test	dl, 0x40
	je	.label_939
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xe0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x18
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_940
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_941
.label_940:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_941:
	mov	ecx, dword ptr [rax]
.label_939:
	xor	eax, eax
	call	openat
	mov	edi, eax
	call	fd_safer
	add	rsp, 0xd8
	ret	
	.section	.text
	.align	32
	#Procedure 0x40988e
	.globl sub_40988e
	.type sub_40988e, @function
sub_40988e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409890

	.globl opendirat
	.type opendirat, @function
opendirat:
	push	rbp
	push	r14
	push	rbx
	mov	r14, rcx
	or	edx, 0x90900
	xor	ebx, ebx
	xor	eax, eax
	call	openat_safer
	mov	ebp, eax
	test	ebp, ebp
	js	.label_943
	mov	edi, ebp
	call	fdopendir
	mov	rbx, rax
	test	rbx, rbx
	je	.label_942
	mov	dword ptr [r14], ebp
	jmp	.label_943
.label_942:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	xor	ebx, ebx
.label_943:
	mov	rax, rbx
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x4098df
	.globl sub_4098df
	.type sub_4098df, @function
sub_4098df:

	nop	
	.section	.text
	.align	32
	#Procedure 0x4098e0

	.globl fd_safer
	.type fd_safer, @function
fd_safer:
	push	rbp
	push	r15
	push	r14
	push	rbx
	push	rax
	mov	ebx, edi
	cmp	ebx, 2
	ja	.label_944
	mov	edi, ebx
	call	dup_safer
	mov	r14d, eax
	call	__errno_location
	mov	rbp, rax
	mov	r15d, dword ptr [rbp]
	mov	edi, ebx
	call	close
	mov	dword ptr [rbp], r15d
	mov	eax, r14d
	jmp	.label_945
.label_944:
	mov	eax, ebx
.label_945:
	add	rsp, 8
	pop	rbx
	pop	r14
	pop	r15
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409921
	.globl sub_409921
	.type sub_409921, @function
sub_409921:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409930

	.globl rpl_fclose
	.type rpl_fclose, @function
rpl_fclose:
	push	rbp
	push	r14
	push	rbx
	mov	rbx, rdi
	call	fileno
	test	eax, eax
	js	.label_946
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_948
	mov	rdi, rbx
	call	fileno
	xor	esi, esi
	mov	edx, 1
	mov	edi, eax
	call	lseek
	cmp	rax, -1
	je	.label_946
.label_948:
	mov	rdi, rbx
	call	rpl_fflush
	test	eax, eax
	je	.label_946
	call	__errno_location
	mov	r14, rax
	mov	ebp, dword ptr [r14]
	mov	rdi, rbx
	call	fclose
	test	ebp, ebp
	je	.label_947
	mov	dword ptr [r14], ebp
	mov	eax, 0xffffffff
.label_947:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_946:
	mov	rdi, rbx
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fclose
	.section	.text
	.align	32
	#Procedure 0x4099a4
	.globl sub_4099a4
	.type sub_4099a4, @function
sub_4099a4:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x4099b0

	.globl rpl_fcntl
	.type rpl_fcntl, @function
rpl_fcntl:
	push	rbp
	push	r14
	push	rbx
	sub	rsp, 0xd0
	mov	ebx, edi
	test	al, al
	je	.label_961
	movaps	xmmword ptr [rsp + 0x50], xmm0
	movaps	xmmword ptr [rsp + 0x60], xmm1
	movaps	xmmword ptr [rsp + 0x70], xmm2
	movaps	xmmword ptr [rsp + 0x80], xmm3
	movaps	xmmword ptr [rsp + 0x90], xmm4
	movaps	xmmword ptr [rsp + 0xa0], xmm5
	movaps	xmmword ptr [rsp + 0xb0], xmm6
	movaps	xmmword ptr [rsp + 0xc0], xmm7
.label_961:
	mov	qword ptr [rsp + 0x48], r9
	mov	qword ptr [rsp + 0x40], r8
	mov	qword ptr [rsp + 0x38], rcx
	mov	qword ptr [rsp + 0x30], rdx
	lea	rax, [rsp + 0x20]
	mov	qword ptr [rsp + 0x10], rax
	lea	rax, [rsp + 0xf0]
	mov	qword ptr [rsp + 8], rax
	mov	dword ptr [rsp + 4], 0x30
	mov	dword ptr [rsp], 0x10
	cmp	esi, 0xb
	ja	.label_964
	mov	eax, 0xa0a
	bt	eax, esi
	jb	.label_962
	mov	eax, 0x514
	bt	eax, esi
	jb	.label_952
	test	esi, esi
	jne	.label_964
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_965
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_966
.label_964:
	lea	eax, [rsi - 0x400]
	cmp	eax, 8
	ja	.label_958
	mov	ecx, 0x85
	bt	ecx, eax
	jb	.label_952
	mov	ecx, 0x102
	bt	ecx, eax
	jae	.label_953
.label_962:
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_956
.label_952:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_957
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_959
.label_957:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_959:
	mov	edx, dword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
.label_960:
	call	fcntl
.label_956:
	mov	ebp, eax
.label_951:
	mov	eax, ebp
	add	rsp, 0xd0
	pop	rbx
	pop	r14
	pop	rbp
	ret	
.label_953:
	cmp	eax, 6
	jne	.label_958
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_968
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_969
.label_958:
	movsxd	rcx, dword ptr [rsp]
	cmp	rcx, 0x28
	ja	.label_949
	mov	rax, rcx
	add	rax, qword ptr [rsp + 0x10]
	lea	ecx, [rcx + 8]
	mov	dword ptr [rsp], ecx
	jmp	.label_955
.label_965:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_966:
	mov	edx, dword ptr [rax]
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	jmp	.label_960
.label_968:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_969:
	mov	r14d, dword ptr [rax]
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0
	js	.label_963
	mov	esi, 0x406
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	jns	.label_967
	call	__errno_location
	cmp	dword ptr [rax], 0x16
	jne	.label_967
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	test	ebp, ebp
	js	.label_951
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  0xffffffff
	mov	al, 1
	jmp	.label_954
.label_967:
	mov	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  1
	jmp	.label_951
.label_949:
	mov	rax, qword ptr [rsp + 8]
	lea	rcx, [rax + 8]
	mov	qword ptr [rsp + 8], rcx
.label_955:
	mov	rdx, qword ptr [rax]
	xor	eax, eax
	mov	edi, ebx
	call	fcntl
	jmp	.label_956
.label_963:
	xor	esi, esi
	xor	eax, eax
	mov	edi, ebx
	mov	edx, r14d
	call	fcntl
	mov	ebp, eax
	cmp	dword ptr [rip + rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec],  -1
	sete	al
.label_954:
	test	al, al
	je	.label_951
	test	ebp, ebp
	js	.label_951
	mov	esi, 1
	xor	eax, eax
	mov	edi, ebp
	call	fcntl
	mov	ecx, eax
	test	ecx, ecx
	js	.label_950
	or	ecx, 1
	mov	esi, 2
	xor	eax, eax
	mov	edi, ebp
	mov	edx, ecx
	call	fcntl
	cmp	eax, -1
	jne	.label_951
.label_950:
	call	__errno_location
	mov	rbx, rax
	mov	r14d, dword ptr [rbx]
	mov	edi, ebp
	call	close
	mov	dword ptr [rbx], r14d
	mov	ebp, 0xffffffff
	jmp	.label_951
	.section	.text
	.align	32
	#Procedure 0x409c41
	.globl sub_409c41
	.type sub_409c41, @function
sub_409c41:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409c50

	.globl rpl_fflush
	.type rpl_fflush, @function
rpl_fflush:
	push	rbx
	mov	rbx, rdi
	test	rbx, rbx
	je	.label_970
	mov	rdi, rbx
	call	__freading
	test	eax, eax
	je	.label_970
	test	byte ptr [rbx + 1], 1
	je	.label_970
	xor	esi, esi
	mov	edx, 1
	mov	rdi, rbx
	call	rpl_fseeko
.label_970:
	mov	rdi, rbx
	pop	rbx
	jmp	fflush
	.section	.text
	.align	32
	#Procedure 0x409c83
	.globl sub_409c83
	.type sub_409c83, @function
sub_409c83:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409c90

	.globl rpl_fseeko
	.type rpl_fseeko, @function
rpl_fseeko:
	push	rbp
	push	r14
	push	rbx
	mov	r14d, edx
	mov	rbp, rsi
	mov	rbx, rdi
	mov	rax, qword ptr [rbx + 0x10]
	cmp	rax, qword ptr [rbx + 8]
	jne	.label_971
	mov	rax, qword ptr [rbx + 0x28]
	cmp	rax, qword ptr [rbx + 0x20]
	jne	.label_971
	cmp	qword ptr [rbx + 0x48], 0
	je	.label_972
.label_971:
	mov	rdi, rbx
	mov	rsi, rbp
	mov	edx, r14d
	pop	rbx
	pop	r14
	pop	rbp
	jmp	fseeko
.label_972:
	mov	rdi, rbx
	call	fileno
	mov	edi, eax
	mov	rsi, rbp
	mov	edx, r14d
	call	lseek
	mov	rcx, rax
	mov	eax, 0xffffffff
	cmp	rcx, -1
	je	.label_973
	and	byte ptr [rbx], 0xef
	mov	qword ptr [rbx + 0x90], rcx
	xor	eax, eax
.label_973:
	pop	rbx
	pop	r14
	pop	rbp
	ret	
	.section	.text
	.align	32
	#Procedure 0x409cfe
	.globl sub_409cfe
	.type sub_409cfe, @function
sub_409cfe:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409d00

	.globl rpl_nl_langinfo
	.type rpl_nl_langinfo, @function
rpl_nl_langinfo:
	lea	eax, [rdi - 0x27d8]
	lea	ecx, [rdi + 0x1d842]
	cmp	eax, 0xc
	cmovb	edi, ecx
	jmp	nl_langinfo
	.section	.text
	.align	32
	#Procedure 0x409d17
	.globl sub_409d17
	.type sub_409d17, @function
sub_409d17:

	nop	word ptr [rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409d20

	.globl dup_safer
	.type dup_safer, @function
dup_safer:
	xor	esi, esi
	mov	edx, 3
	xor	eax, eax
	jmp	rpl_fcntl
	.section	.text
	.align	32
	#Procedure 0x409d2e
	.globl sub_409d2e
	.type sub_409d2e, @function
sub_409d2e:

	nop	
	.section	.text
	.align	32
	#Procedure 0x409d95
	.globl sub_409d95
	.type sub_409d95, @function
sub_409d95:

	nop	
	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409da2
	.globl sub_409da2
	.type sub_409da2, @function
sub_409da2:

	nop	word ptr cs:[rax + rax]
	.section	.text
	.align	32
	#Procedure 0x409dc6
	.globl sub_409dc6
	.type sub_409dc6, @function
sub_409dc6:

	nop	word ptr cs:[rax + rax]
	.section .text
	.align 32
	.label_1141:
	.section .rodata
	.align 16
	.byte 1
	.byte 0
	.byte 2
	.byte 0
label_810:
	.long 0x3dcccccd
label_814:
	.long 0x3f666666
label_819:
	.long 0x3f8ccccd
label_815:
	.long 0x3f800000
label_817:
	.long 0x5f000000
label_818:
	.long 0x5f800000
label_889:
	.long 0x3f4ccccd
label_53:
	.quad .label_34
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_1019
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_1020
	.quad .label_46
	.quad .label_1021
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_1022
	.quad .label_46
	.quad .label_46
	.quad .label_1023
	.quad .label_46
	.quad .label_1024
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_1025
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_46
	.quad .label_1026
	.quad .label_1027
	.quad .label_1028
	.quad .label_1029
	.globl long_options
	.type long_options, @object
long_options:
	.quad label_1035
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 82
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 99
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_984
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_989
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1013
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 129
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1110
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 130
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_993
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1104
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 102
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_985
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 131
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1099
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 118
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1043
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 126
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.quad label_1124
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 125
	.byte 255
	.byte 255
	.byte 255
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_16:
	.asciz "Try '%s --help' for more information.\n"
label_25:
	.asciz "Usage: %s [OPTION]... GROUP FILE...\n  or:  %s [OPTION]... --reference=RFILE FILE...\n"
label_20:
	.asciz "Change the group of each FILE to GROUP.\nWith --reference, change the group of each FILE to that of RFILE.\n\n"
label_18:
	.asciz "  -c, --changes          like verbose but report only when a change is made\n  -f, --silent, --quiet  suppress most error messages\n  -v, --verbose          output a diagnostic for every file processed\n"
label_21:
	.asciz "      --dereference      affect the referent of each symbolic link (this is\n                         the default), rather than the symbolic link itself\n  -h, --no-dereference   affect symbolic links instead of any referenced file\n"
label_32:
	.asciz "                         (useful only on systems that can change the\n                         ownership of a symlink)\n"
label_22:
	.asciz "      --no-preserve-root  do not treat '/' specially (the default)\n      --preserve-root    fail to operate recursively on '/'\n"
label_26:
	.asciz "      --reference=RFILE  use RFILE's group rather than specifying a\n                         GROUP value\n"
label_27:
	.asciz "  -R, --recursive        operate on files and directories recursively\n"
label_28:
	.asciz "\nThe following options modify how a hierarchy is traversed when the -R\noption is also specified.  If more than one is specified, only the final\none takes effect.\n\n  -H                     if a command line argument is a symbolic link\n                         to a directory, traverse it\n  -L                     traverse every symbolic link to a directory\n                         encountered\n  -P                     do not traverse any symbolic links (default)\n\n"
label_9:
	.asciz "      --help     display this help and exit\n"
label_29:
	.asciz "      --version  output version information and exit\n"
label_30:
	.asciz "\nExamples:\n  %s staff /u      Change the group of /u to \"staff\".\n  %s -hR staff /u  Change the group of /u and subfiles to \"staff\".\n"
label_12:
	.asciz "chgrp"
label_42:
	.byte 0
label_51:
	.asciz "coreutils"
label_52:
	.asciz "/usr/local/share/locale"
label_38:
	.asciz "HLPRcfhv"
label_19:
	.asciz "GNU coreutils"
label_63:
	.asciz "David MacKenzie"
label_64:
	.asciz "Jim Meyering"
label_61:
	.asciz "-R --dereference requires either -H or -L"
label_60:
	.asciz "missing operand"
label_47:
	.asciz "missing operand after %s"
label_40:
	.asciz "failed to get attributes of %s"
label_45:
	.asciz "/"
label_10:
	.asciz "\n%s online help: <%s>\n"
label_11:
	.asciz "https://www.gnu.org/software/coreutils/"
label_13:
	.asciz "en_"
label_14:
	.asciz "Report any translation bugs to <https://translationproject.org/team/>\n"
label_31:
	.asciz "Full documentation <%s%s>\n"
label_24:
	.asciz "or available locally via: info '(coreutils) %s%s'\n"
label_17:
	.asciz " invocation"
label_1035:
	.asciz "recursive"
label_1130:
	.asciz "changes"
label_984:
	.asciz "dereference"
label_989:
	.asciz "no-dereference"
label_1013:
	.asciz "no-preserve-root"
label_1110:
	.asciz "preserve-root"
label_993:
	.asciz "quiet"
label_1104:
	.asciz "silent"
label_985:
	.asciz "reference"
label_1099:
	.asciz "verbose"
label_1043:
	.asciz "help"
label_1124:
	.asciz "version"
label_33:
	.asciz "invalid group: %s"
label_168:
	.asciz "fts_read failed"
label_72:
	.asciz "fts_close failed"
label_156:
	.asciz "it is dangerous to operate recursively on %s"
label_126:
	.asciz "it is dangerous to operate recursively on %s (same as %s)"
label_142:
	.asciz "use --no-preserve-root to override this failsafe"
label_158:
	.asciz "cannot access %s"
label_144:
	.asciz "%s"
label_148:
	.asciz "cannot read directory %s"
label_86:
	.asciz "WARNING: Circular directory structure.\nThis almost certainly means that you have a corrupted file system.\nNOTIFY YOUR SYSTEM MANAGER.\nThe following directory is part of the cycle:\n  %s\n"
label_136:
	.asciz "cannot dereference %s"
label_98:
	.asciz "changing ownership of %s"
label_102:
	.asciz "changing group of %s"
label_167:
	.asciz "neither symbolic link %s nor referent has been changed\n"
label_94:
	.asciz "changed ownership of %s from %s to %s\n"
label_171:
	.asciz "changed group of %s from %s to %s\n"
label_78:
	.asciz "no change to ownership of %s\n"
label_107:
	.asciz "failed to change ownership of %s from %s to %s\n"
label_122:
	.asciz "failed to change group of %s from %s to %s\n"
label_76:
	.asciz "failed to change ownership of %s\n"
label_116:
	.asciz "failed to change ownership of %s to %s\n"
label_132:
	.asciz "failed to change group of %s to %s\n"
label_125:
	.asciz "ownership of %s retained as %s\n"
label_147:
	.asciz "group of %s retained as %s\n"
label_123:
	.asciz "ownership of %s retained\n"
label_1012:
	.asciz "8.31"
label_179:
	.asciz "write error"
label_180:
	.asciz "%s: %s"
label_184:
	.asciz "A NULL argv[0] was passed through an exec system call.\n"
label_187:
	.asciz "/.libs/"
label_186:
	.asciz "lt-"
label_1089:
	.asciz "literal"
label_1090:
	.asciz "shell"
label_1091:
	.asciz "shell-always"
label_1092:
	.asciz "shell-escape"
label_1093:
	.asciz "shell-escape-always"
label_1094:
	.asciz "c"
label_1095:
	.asciz "c-maybe"
label_1096:
	.asciz "escape"
label_1097:
	.asciz "locale"
label_1098:
	.asciz "clocale"
label_258:
	.byte 34
	.byte 0
label_305:
	.byte 96
	.byte 0
label_243:
	.asciz "'"
label_345:
	.byte 226
	.byte 128
	.byte 152
	.byte 0
label_346:
	.byte 226
	.byte 128
	.byte 153
	.byte 0
label_349:
	.byte 161
	.byte 7
	.byte 101
	.byte 0
label_350:
	.byte 161
	.byte 175
	.byte 0
label_355:
	.asciz "%s (%s) %s\n"
label_362:
	.asciz "%s %s\n"
label_366:
	.asciz "(C)"
label_363:
	.asciz "\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n"
label_353:
	.asciz "Written by %s.\n"
label_359:
	.asciz "Written by %s and %s.\n"
label_356:
	.asciz "Written by %s, %s, and %s.\n"
label_370:
	.asciz "Written by %s, %s, %s,\nand %s.\n"
label_369:
	.asciz "Written by %s, %s, %s,\n%s, and %s.\n"
label_352:
	.asciz "Written by %s, %s, %s,\n%s, %s, and %s.\n"
label_357:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, and %s.\n"
label_365:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n"
label_360:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n"
label_358:
	.asciz "Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n"
label_386:
	.asciz "\nReport bugs to: %s\n"
label_387:
	.asciz "bug-coreutils@gnu.org"
label_389:
	.asciz "%s home page: <%s>\n"
label_388:
	.asciz "General help using GNU software: <https://www.gnu.org/gethelp/>\n"
label_421:
	.asciz "memory exhausted"
label_424:
	.asciz "errno != EINVAL"
label_425:
	.asciz "lib/xfts.c"
label_426:
	.asciz "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))"
label_443:
	.asciz "0 <= strtol_base && strtol_base <= 36"
label_444:
	.asciz "./lib/xstrtol.c"
label_445:
	.asciz "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"
label_467:
	.asciz "."
label_584:
	.asciz ".."
label_735:
	.asciz "state->magic == 9827862"
label_736:
	.asciz "lib/cycle-check.c"
label_737:
	.asciz "_Bool cycle_check(struct cycle_check_state *, const struct stat *)"
label_744:
	.asciz "POSIX"
label_767:
	.asciz "# entries:         %lu\n"
label_779:
	.asciz "# buckets:         %lu\n"
label_775:
	.asciz "# buckets used:    %lu (%.2f%%)\n"
label_771:
	.asciz "max bucket length: %lu\n"
label_937:
	.asciz "ASCII"
	.byte 0
label_141:
	.quad .label_1049
	.quad .label_1050
	.quad .label_82
	.quad .label_1051
	.quad .label_82
	.quad .label_1052
	.quad .label_1053
	.quad .label_82
	.quad .label_82
	.quad .label_1054
label_74:
	.quad .label_1060
	.quad .label_77
	.quad .label_77
	.quad .label_1061
	.quad .label_1062
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_297:
	.quad .label_1064
	.quad .label_1065
	.quad .label_1066
	.quad .label_1067
	.quad .label_1068
	.quad .label_1069
	.quad .label_1070
	.quad .label_213
	.quad .label_1071
	.quad .label_1071
	.quad .label_1072
label_315:
	.quad .label_1077
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_242
	.quad .label_1078
	.quad .label_1079
	.quad .label_255
	.quad .label_1080
	.quad .label_1081
	.quad .label_1082
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_312
	.quad .label_192
	.quad .label_1083
	.quad .label_1083
	.quad .label_1084
	.quad .label_1083
	.quad .label_193
	.quad .label_1083
	.quad .label_1085
	.quad .label_1083
	.quad .label_1083
	.quad .label_1083
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_1083
	.quad .label_1083
	.quad .label_1083
	.quad .label_1083
	.quad .label_1086
	.quad .label_312
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_1083
	.quad .label_1087
	.quad .label_193
	.quad .label_1083
	.quad .label_193
	.quad .label_1083
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_193
	.quad .label_1088
	.quad .label_1083
	.quad .label_1088
	.quad .label_1084
	.quad label_1089
	.quad label_1090
	.quad label_1091
	.quad label_1092
	.quad label_1093
	.quad label_1094
	.quad label_1095
	.quad label_1096
	.quad label_1097
	.quad label_1098
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 2
	.byte 0
	.byte 0
	.byte 0
	.byte 3
	.byte 0
	.byte 0
	.byte 0
	.byte 4
	.byte 0
	.byte 0
	.byte 0
	.byte 5
	.byte 0
	.byte 0
	.byte 0
	.byte 6
	.byte 0
	.byte 0
	.byte 0
	.byte 7
	.byte 0
	.byte 0
	.byte 0
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 9
	.byte 0
	.byte 0
	.byte 0
label_368:
	.quad .label_1112
	.quad .label_1113
	.quad .label_1114
	.quad .label_1115
	.quad .label_1116
	.quad .label_1117
	.quad .label_1118
	.quad .label_1119
	.quad .label_1120
	.quad .label_1121
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl version_etc_copyright
	.type version_etc_copyright, @object
version_etc_copyright:
	.asciz "Copyright %s %d Free Software Foundation, Inc."
	.byte 0
label_447:
	.quad .label_995
	.quad .label_440
	.quad .label_440
	.quad .label_996
	.quad .label_440
	.quad .label_997
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_998
	.quad .label_440
	.quad .label_999
	.quad .label_440
	.quad .label_440
	.quad .label_1000
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_1001
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_1002
	.quad .label_1003
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_1004
	.quad .label_436
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_997
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_998
	.quad .label_440
	.quad .label_999
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_440
	.quad .label_1001
	.quad .label_440
	.quad .label_440
	.quad .label_1005
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_772:
	.byte 0
	.byte 0
	.byte 48
	.byte 67
	.byte 0
	.byte 0
	.byte 48
	.byte 69
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_773:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 67
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 48
	.byte 69
label_903:
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
label_645:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 16
	.byte 0
	.byte 0
	.byte 0
	.byte 32
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 64
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 96
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 160
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 192
	.byte 0
	.byte 0
label_774:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.ascii "Y@"
	.globl default_tuning
	.type default_tuning, @object
default_tuning:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 128
	.byte 63
	.byte 205
	.byte 204
	.byte 76
	.byte 63
	.byte 244
	.byte 253
	.byte 180
	.byte 63
label_806:
	.long 0x0
	.label_1142:
	.section .data
	.align 8
.label_974:
	.quad 0
	.section .data
	.align 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl Version
	.type Version, @object
Version:
	.quad label_1012
	.globl exit_failure
	.type exit_failure, @object
exit_failure:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec
	.type slotvec, @object
slotvec:
	.quad slotvec0
	.globl nslots
	.type nslots, @object
nslots:
	.long 0x1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slotvec0
	.type slotvec0, @object
slotvec0:
	.byte 0
	.byte 1
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_322:
	.quad slot0
	.globl quote_quoting_options
	.type quote_quoting_options, @object
quote_quoting_options:
	.byte 8
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .tm_clone_table
	.align 16
		.globl __bss_start
	.type __bss_start, @notype
__bss_start:
	.section .bss
	.align 32
.label_4:
	.byte 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl reference_file
	.type reference_file, @object
reference_file:
	.quad 0x0
	.globl main.dev_ino_buf
	.type main.dev_ino_buf, @object
main.dev_ino_buf:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl file_name
	.type file_name, @object
file_name:
	.quad 0x0
	.globl ignore_EPIPE
	.type ignore_EPIPE, @object
ignore_EPIPE:
	.quad 0x0
	.globl program_name
	.type program_name, @object
program_name:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl default_quoting_options
	.type default_quoting_options, @object
default_quoting_options:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_336:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_335:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
label_334:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl slot0
	.type slot0, @object
slot0:
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.globl rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec
	.type rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, @object
rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec:
	.long 0x0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
	.byte 0
		.globl _end
	.type _end, @notype
_end: