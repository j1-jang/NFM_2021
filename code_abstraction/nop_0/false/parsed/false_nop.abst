Build cfg of: "usage" (61 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "close_stdout_set_ignore_EPIPE" (59 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (60 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "set_program_name" (58 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (54 text sections remaining)
Build cfg of: "set_char_quoting" (55 text sections remaining)
Build cfg of: "set_quoting_style" (56 text sections remaining)
Build cfg of: "get_quoting_style" (57 text sections remaining)
Build cfg of: "set_custom_quoting" (53 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (52 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (51 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "quotearg_n_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_char" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "version_etc_arn" (50 text sections remaining)
Build cfg of: "version_etc_ar" (49 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (48 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "x2nrealloc" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (47 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "hard_locale" (46 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (45 text sections remaining)
Build cfg of: "rpl_fseeko" (44 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (43 text sections remaining)
Build cfg of: "main" (42 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (41 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "quotearg_n_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_char" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Build cfg of: "xmalloc" (40 text sections remaining)
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Build cfg of: "xrealloc" (39 text sections remaining)
Build cfg of: "x2nrealloc" (38 text sections remaining)
Build cfg of: "xcharalloc" (37 text sections remaining)
Build cfg of: "x2realloc" (36 text sections remaining)
Build cfg of: "xzalloc" (35 text sections remaining)
Build cfg of: "xcalloc" (34 text sections remaining)
Build cfg of: "xmemdup" (33 text sections remaining)
Build cfg of: "xstrdup" (32 text sections remaining)
Build cfg of: "rpl_mbrtowc" (31 text sections remaining)
Build cfg of: "locale_charset" (30 text sections remaining)
Build cfg of: "rpl_fclose" (29 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (28 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Build cfg of: "quotearg_alloc_mem" (27 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Build cfg of: "quotearg_n_options" (26 text sections remaining)
Build cfg of: "quotearg_n_mem" (25 text sections remaining)
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Build cfg of: "quotearg_mem" (24 text sections remaining)
Build cfg of: "quotearg_n_style" (23 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (22 text sections remaining)
Build cfg of: "quotearg_style" (21 text sections remaining)
Build cfg of: "quotearg_style_mem" (20 text sections remaining)
Build cfg of: "quotearg_char_mem" (19 text sections remaining)
Build cfg of: "quotearg_char" (18 text sections remaining)
Build cfg of: "quotearg_colon" (17 text sections remaining)
Build cfg of: "quotearg_colon_mem" (16 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (15 text sections remaining)
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Build cfg of: "quotearg_n_custom_mem" (14 text sections remaining)
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Build cfg of: "quotearg_custom_mem" (13 text sections remaining)
Build cfg of: "quote_n_mem" (12 text sections remaining)
Build cfg of: "quote_mem" (11 text sections remaining)
Build cfg of: "quote_n" (10 text sections remaining)
Build cfg of: "quote" (9 text sections remaining)
Build cfg of: "gettext_quote" (8 text sections remaining)
Build cfg of: "xnmalloc" (7 text sections remaining)
Build cfg of: "xnrealloc" (6 text sections remaining)
Build cfg of: "close_stdout" (5 text sections remaining)
Build cfg of: "quotearg_alloc" (4 text sections remaining)
Build cfg of: "quotearg_n" (3 text sections remaining)
Build cfg of: "quotearg" (2 text sections remaining)
Build cfg of: "quotearg_n_custom" (1 text sections remaining)
Build cfg of: "quotearg_custom" (0 text sections remaining)
Build cfg of: "usage" (61 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "close_stdout_set_ignore_EPIPE" (59 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (60 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "set_program_name" (58 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (54 text sections remaining)
Build cfg of: "set_char_quoting" (55 text sections remaining)
Build cfg of: "set_quoting_style" (56 text sections remaining)
Build cfg of: "get_quoting_style" (57 text sections remaining)
Build cfg of: "set_custom_quoting" (53 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (52 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (51 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "quotearg_n_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_char" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "version_etc_arn" (50 text sections remaining)
Build cfg of: "version_etc_ar" (49 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (48 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "x2nrealloc" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (47 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "hard_locale" (46 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (45 text sections remaining)
Build cfg of: "rpl_fseeko" (44 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (43 text sections remaining)
Build cfg of: "main" (42 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (41 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "quotearg_n_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_style" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_style_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_char" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_char_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "quote_n_mem" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "quote_n" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Build cfg of: "xmalloc" (40 text sections remaining)
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Build cfg of: "xrealloc" (39 text sections remaining)
Build cfg of: "x2nrealloc" (38 text sections remaining)
Build cfg of: "xcharalloc" (37 text sections remaining)
Build cfg of: "x2realloc" (36 text sections remaining)
Build cfg of: "xzalloc" (35 text sections remaining)
Build cfg of: "xcalloc" (34 text sections remaining)
Build cfg of: "xmemdup" (33 text sections remaining)
Build cfg of: "xstrdup" (32 text sections remaining)
Build cfg of: "rpl_mbrtowc" (31 text sections remaining)
Build cfg of: "locale_charset" (30 text sections remaining)
Build cfg of: "rpl_fclose" (29 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (28 text sections remaining)
Calling "quotearg_alloc_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Build cfg of: "quotearg_alloc_mem" (27 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Build cfg of: "quotearg_n_options" (26 text sections remaining)
Build cfg of: "quotearg_n_mem" (25 text sections remaining)
Calling "quotearg_n" but CFG not yet computed.
Delayed building cfg of: quotearg
Build cfg of: "quotearg_mem" (24 text sections remaining)
Build cfg of: "quotearg_n_style" (23 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (22 text sections remaining)
Build cfg of: "quotearg_style" (21 text sections remaining)
Build cfg of: "quotearg_style_mem" (20 text sections remaining)
Build cfg of: "quotearg_char_mem" (19 text sections remaining)
Build cfg of: "quotearg_char" (18 text sections remaining)
Build cfg of: "quotearg_colon" (17 text sections remaining)
Build cfg of: "quotearg_colon_mem" (16 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (15 text sections remaining)
Calling "quotearg_n_custom_mem" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Build cfg of: "quotearg_n_custom_mem" (14 text sections remaining)
Calling "quotearg_n_custom" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Build cfg of: "quotearg_custom_mem" (13 text sections remaining)
Build cfg of: "quote_n_mem" (12 text sections remaining)
Build cfg of: "quote_mem" (11 text sections remaining)
Build cfg of: "quote_n" (10 text sections remaining)
Build cfg of: "quote" (9 text sections remaining)
Build cfg of: "gettext_quote" (8 text sections remaining)
Build cfg of: "xnmalloc" (7 text sections remaining)
Build cfg of: "xnrealloc" (6 text sections remaining)
Build cfg of: "close_stdout" (5 text sections remaining)
Build cfg of: "quotearg_alloc" (4 text sections remaining)
Build cfg of: "quotearg_n" (3 text sections remaining)
Build cfg of: "quotearg" (2 text sections remaining)
Build cfg of: "quotearg_n_custom" (1 text sections remaining)
Build cfg of: "quotearg_custom" (0 text sections remaining)
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
Considering text section (0/60): "quotearg_custom"
--------
.dot code for CFG of text section quotearg_custom for Vanilla
diGraph quotearg_custom_Vanilla{
	quotearg_custom_0  [label="[quotearg_custom,quotearg_custom_2727]"]
	quotearg_custom_1  [label="[quotearg_custom_2728,quotearg_custom_2728]"]
	quotearg_custom_2  [label="[quotearg_custom_2729,quotearg_custom_2731]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;

}
--------
--------
.dot code for CFG of text section quotearg_custom for Randomized
diGraph quotearg_custom_Randomized{
	quotearg_custom_0  [label="[quotearg_custom,quotearg_custom_3817]"]
	quotearg_custom_1  [label="[quotearg_custom_3818,quotearg_custom_3818]"]
	quotearg_custom_2  [label="[quotearg_custom_3819,quotearg_custom_3822]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_custom"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_custom@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_custom@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_custom -> quotearg_custom_2727 and quotearg_custom -> quotearg_custom_3817

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 64),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom -> quotearg_custom_2727 and quotearg_custom -> quotearg_custom_3817 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2728 -> quotearg_custom_2728 and quotearg_custom_3818 -> quotearg_custom_3818

same_behavior checking these two SStates:

SA || RAX := quotearg_n_custom@()

SB || RAX := quotearg_n_custom@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_custom" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_custom" "") []
Value B:
E_app (F2 "quotearg_n_custom" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2728 -> quotearg_custom_2728 and quotearg_custom_3818 -> quotearg_custom_3818 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_2729 -> quotearg_custom_2731 and quotearg_custom_3819 -> quotearg_custom_3822

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_2729 -> quotearg_custom_2731 and quotearg_custom_3819 -> quotearg_custom_3822 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (1/60): "quotearg_n_custom"
--------
.dot code for CFG of text section quotearg_n_custom for Vanilla
diGraph quotearg_n_custom_Vanilla{
	quotearg_n_custom_0  [label="[quotearg_n_custom,quotearg_n_custom_2668]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_2669,quotearg_n_custom_2669]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_2670,quotearg_n_custom_2672]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;

}
--------
--------
.dot code for CFG of text section quotearg_n_custom for Randomized
diGraph quotearg_n_custom_Randomized{
	quotearg_n_custom_0  [label="[quotearg_n_custom,quotearg_n_custom_3737]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_3738,quotearg_n_custom_3738]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_3739,quotearg_n_custom_3741]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom"
node 0:
RDI := TakeBits: <31,0>(Reg: RDI), R8 := Value: 18446744073709551615
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_custom_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom"
node 0:
RDI := TakeBits: <31,0>(Reg: RDI), R8 := Value: 18446744073709551615
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_custom_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_custom -> quotearg_n_custom_2668 and quotearg_n_custom -> quotearg_n_custom_3737

same_behavior checking these two SStates:

SA || RDI := TakeBits: <31,0>(Reg: RDI), R8 := Value: 18446744073709551615
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RDI := TakeBits: <31,0>(Reg: RDI), R8 := Value: 18446744073709551615
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_reg RCX),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI),(R8,E_val 18446744073709551615 64)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_reg RCX),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI),(R8,E_val 18446744073709551615 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_reg RCX),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI),(R8,E_val 18446744073709551615 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_reg RCX),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI),(R8,E_val 18446744073709551615 64)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RCX,E_reg RCX),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI),(R8,E_val 18446744073709551615 64)]
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom -> quotearg_n_custom_2668 and quotearg_n_custom -> quotearg_n_custom_3737 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2669 -> quotearg_n_custom_2669 and quotearg_n_custom_3738 -> quotearg_n_custom_3738

same_behavior checking these two SStates:

SA || RAX := quotearg_n_custom_mem@()

SB || RAX := quotearg_n_custom_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_custom_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_custom_mem" "") []
Value B:
E_app (F2 "quotearg_n_custom_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2669 -> quotearg_n_custom_2669 and quotearg_n_custom_3738 -> quotearg_n_custom_3738 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_2670 -> quotearg_n_custom_2672 and quotearg_n_custom_3739 -> quotearg_n_custom_3741

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_2670 -> quotearg_n_custom_2672 and quotearg_n_custom_3739 -> quotearg_n_custom_3741 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (2/60): "quotearg"
--------
.dot code for CFG of text section quotearg for Vanilla
diGraph quotearg_Vanilla{
	quotearg_0  [label="[quotearg,quotearg_2354]"]
	quotearg_1  [label="[quotearg_2355,quotearg_2355]"]
	quotearg_2  [label="[quotearg_2356,quotearg_2358]"]

	quotearg_0 -> quotearg_1;
	quotearg_1 -> quotearg_2;

}
--------
--------
.dot code for CFG of text section quotearg for Randomized
diGraph quotearg_Randomized{
	quotearg_0  [label="[quotearg,quotearg_3301]"]
	quotearg_1  [label="[quotearg_3302,quotearg_3302]"]
	quotearg_2  [label="[quotearg_3303,quotearg_3307]"]

	quotearg_0 -> quotearg_1;
	quotearg_1 -> quotearg_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg"
node 0:
RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg"
node 0:
RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
 := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg -> quotearg_2354 and quotearg -> quotearg_3301

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 32),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg -> quotearg_2354 and quotearg -> quotearg_3301 have been verified to do the same.

same_behavior for the nodes: quotearg_2355 -> quotearg_2355 and quotearg_3302 -> quotearg_3302

same_behavior checking these two SStates:

SA || RAX := quotearg_n@()

SB || RAX := quotearg_n@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n" "") []
Value B:
E_app (F2 "quotearg_n" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_2355 -> quotearg_2355 and quotearg_3302 -> quotearg_3302 have been verified to do the same.

same_behavior for the nodes: quotearg_2356 -> quotearg_2358 and quotearg_3303 -> quotearg_3307

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_2356 -> quotearg_2358 and quotearg_3303 -> quotearg_3307 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (3/60): "quotearg_n"
--------
.dot code for CFG of text section quotearg_n for Vanilla
diGraph quotearg_n_Vanilla{
	quotearg_n_0  [label="[quotearg_n,quotearg_n_2150]"]
	quotearg_n_1  [label="[quotearg_n_2151,quotearg_n_2151]"]
	quotearg_n_2  [label="[quotearg_n_2152,quotearg_n_2154]"]

	quotearg_n_0 -> quotearg_n_1;
	quotearg_n_1 -> quotearg_n_2;

}
--------
--------
.dot code for CFG of text section quotearg_n for Randomized
diGraph quotearg_n_Randomized{
	quotearg_n_0  [label="[quotearg_n,quotearg_n_3020]"]
	quotearg_n_1  [label="[quotearg_n_3021,quotearg_n_3021]"]
	quotearg_n_2  [label="[quotearg_n_3022,quotearg_n_3025]"]

	quotearg_n_0 -> quotearg_n_1;
	quotearg_n_1 -> quotearg_n_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n"
node 0:
RCX := Dereference: [Var: default_quoting_options,8], RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n"
node 0:
RCX := Dereference: [Var: default_quoting_options,8], RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n -> quotearg_n_2150 and quotearg_n -> quotearg_n_3020

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: default_quoting_options,8], RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RCX := Dereference: [Var: default_quoting_options,8], RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 :=(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
 a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n -> quotearg_n_2150 and quotearg_n -> quotearg_n_3020 have been verified to do the same.

same_behavior for the nodes: quotearg_n_2151 -> quotearg_n_2151 and quotearg_n_3021 -> quotearg_n_3021

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_2151 -> quotearg_n_2151 and quotearg_n_3021 -> quotearg_n_3021 have been verified to do the same.

same_behavior for the nodes: quotearg_n_2152 -> quotearg_n_2154 and quotearg_n_3022 -> quotearg_n_3025

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_2152 -> quotearg_n_2154 and quotearg_n_3022 -> quotearg_n_3025 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (4/60): "quotearg_alloc"
--------
.dot code for CFG of text section quotearg_alloc for Vanilla
diGraph quotearg_alloc_Vanilla{
	quotearg_alloc_0  [label="[quotearg_alloc,quotearg_alloc_1981]"]
	quotearg_alloc_1  [label="[quotearg_alloc_1982,quotearg_alloc_1982]"]
	quotearg_alloc_2  [label="[quotearg_alloc_1983,quotearg_alloc_1985]"]

	quotearg_alloc_0 -> quotearg_alloc_1;
	quotearg_alloc_1 -> quotearg_alloc_2;

}
--------
--------
.dot code for CFG of text section quotearg_alloc for Randomized
diGraph quotearg_alloc_Randomized{
	quotearg_alloc_0  [label="[quotearg_alloc,quotearg_alloc_2784]"]
	quotearg_alloc_1  [label="[quotearg_alloc_2785,quotearg_alloc_2785]"]
	quotearg_alloc_2  [label="[quotearg_alloc_2786,quotearg_alloc_2790]"]

	quotearg_alloc_0 -> quotearg_alloc_1;
	quotearg_alloc_1 -> quotearg_alloc_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_alloc_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_alloc_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_alloc -> quotearg_alloc_1981 and quotearg_alloc -> quotearg_alloc_2784

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RDX, RDX := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RDX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RDX, RDX := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RDX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_val 0 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc -> quotearg_alloc_1981 and quotearg_alloc -> quotearg_alloc_2784 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1982 -> quotearg_alloc_1982 and quotearg_alloc_2785 -> quotearg_alloc_2785

same_behavior checking these two SStates:

SA || RAX := quotearg_alloc_mem@()

SB || RAX := quotearg_alloc_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_alloc_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_alloc_mem" "") []
Value B:
E_app (F2 "quotearg_alloc_mem" "") []
Reg C(20,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == Var: RSP0 && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
hk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1982 -> quotearg_alloc_1982 and quotearg_alloc_2785 -> quotearg_alloc_2785 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_1983 -> quotearg_alloc_1985 and quotearg_alloc_2786 -> quotearg_alloc_2790

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_1983 -> quotearg_alloc_1985 and quotearg_alloc_2786 -> quotearg_alloc_2790 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (5/60): "close_stdout"
--------
.dot code for CFG of text section close_stdout for Vanilla
diGraph close_stdout_Vanilla{
	close_stdout_0  [label="[close_stdout_265,close_stdout_265]"]
	close_stdout_1  [label="[close_stdout_266,close_stdout_267]"]
	close_stdout_2  [label="[close_stdout_274,close_stdout_274]"]
	close_stdout_3  [label="[close_stdout_275,close_stdout_277]"]
	close_stdout_4  [label="[close_stdout_278,close_stdout_278]"]
	close_stdout_5  [label="[close_stdout_279,close_stdout_284]"]
	close_stdout_6  [label="[close_stdout_285,close_stdout_285]"]
	close_stdout_7  [label="[.label_17,.label_17]"]
	close_stdout_8  [label="[close_stdout_289,close_stdout_293]"]
	close_stdout_9  [label="[close_stdout_294,close_stdout_294]"]
	close_stdout_10  [label="[.label_20,.label_20]"]
	close_stdout_11  [label="[close_stdout_270,close_stdout_270]"]
	close_stdout_12  [label="[close_stdout_271,close_stdout_273]"]
	close_stdout_13  [label="[close_stdout_263,close_stdout_264]"]
	close_stdout_14  [label="[close_stdout_303,close_stdout_303]"]
	close_stdout_15  [label="[close_stdout_304,close_stdout_304]"]
	close_stdout_16  [label="[.label_16,close_stdout_308]"]
	close_stdout_17  [label="[.label_19,.label_19]"]
	close_stdout_18  [label="[close_stdout_300,close_stdout_300]"]
	close_stdout_19  [label="[close_stdout_301,close_stdout_302]"]
	close_stdout_20  [label="[close_stdout,close_stdout_259]"]
	close_stdout_21  [label="[close_stdout_260,close_stdout_260]"]
	close_stdout_22  [label="[close_stdout_261,close_stdout_262]"]

	close_stdout_0 -> close_stdout_1;
	close_stdout_1 -> close_stdout_17 [label="ZF"];
	close_stdout_1 -> close_stdout_10 [label="!ZF"];
	close_stdout_2 -> close_stdout_3;
	close_stdout_3 -> close_stdout_4;
	close_stdout_4 -> close_stdout_5;
	close_stdout_5 -> close_stdout_6;

	close_stdout_7 -> close_stdout_8;
	close_stdout_8 -> close_stdout_9;

	close_stdout_10 -> close_stdout_11;
	close_stdout_11 -> close_stdout_12;
	close_stdout_12 -> close_stdout_7 [label="ZF"];
	close_stdout_12 -> close_stdout_2 [label="!ZF"];
	close_stdout_13 -> close_stdout_10 [label="ZF"];
	close_stdout_13 -> close_stdout_0 [label="!ZF"];
	close_stdout_14 -> close_stdout_15;


	close_stdout_17 -> close_stdout_18;
	close_stdout_18 -> close_stdout_19;
	close_stdout_19 -> close_stdout_16 [label="ZF"];
	close_stdout_19 -> close_stdout_14 [label="!ZF"];
	close_stdout_20 -> close_stdout_21;
	close_stdout_21 -> close_stdout_22;
	close_stdout_22 -> close_stdout_17 [label="ZF"];
	close_stdout_22 -> close_stdout_13 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section close_stdout for Randomized
diGraph close_stdout_Randomized{
	close_stdout_0  [label="[close_stdout_356,close_stdout_356]"]
	close_stdout_1  [label="[close_stdout_357,close_stdout_357]"]
	close_stdout_2  [label="[close_stdout_358,close_stdout_360]"]
	close_stdout_3  [label="[close_stdout_368,close_stdout_368]"]
	close_stdout_4  [label="[close_stdout_369,close_stdout_369]"]
	close_stdout_5  [label="[close_stdout_370,close_stdout_373]"]
	close_stdout_6  [label="[close_stdout_374,close_stdout_374]"]
	close_stdout_7  [label="[close_stdout_375,close_stdout_384]"]
	close_stdout_8  [label="[close_stdout_385,close_stdout_385]"]
	close_stdout_9  [label="[.label_18,.label_18]"]
	close_stdout_10  [label="[close_stdout_389,close_stdout_398]"]
	close_stdout_11  [label="[close_stdout_399,close_stdout_399]"]
	close_stdout_12  [label="[.label_19,close_stdout_363]"]
	close_stdout_13  [label="[close_stdout_364,close_stdout_364]"]
	close_stdout_14  [label="[close_stdout_365,close_stdout_367]"]
	close_stdout_15  [label="[close_stdout_354,close_stdout_355]"]
	close_stdout_16  [label="[close_stdout_411,close_stdout_412]"]
	close_stdout_17  [label="[close_stdout_413,close_stdout_413]"]
	close_stdout_18  [label="[.label_17,close_stdout_420]"]
	close_stdout_19  [label="[.label_16,close_stdout_406]"]
	close_stdout_20  [label="[close_stdout_407,close_stdout_407]"]
	close_stdout_21  [label="[close_stdout_408,close_stdout_410]"]
	close_stdout_22  [label="[close_stdout,close_stdout_350]"]
	close_stdout_23  [label="[close_stdout_351,close_stdout_351]"]
	close_stdout_24  [label="[close_stdout_352,close_stdout_353]"]

	close_stdout_0 -> close_stdout_1;
	close_stdout_1 -> close_stdout_2;
	close_stdout_2 -> close_stdout_19 [label="ZF"];
	close_stdout_2 -> close_stdout_12 [label="!ZF"];
	close_stdout_3 -> close_stdout_4;
	close_stdout_4 -> close_stdout_5;
	close_stdout_5 -> close_stdout_6;
	close_stdout_6 -> close_stdout_7;
	close_stdout_7 -> close_stdout_8;

	close_stdout_9 -> close_stdout_10;
	close_stdout_10 -> close_stdout_11;

	close_stdout_12 -> close_stdout_13;
	close_stdout_13 -> close_stdout_14;
	close_stdout_14 -> close_stdout_9 [label="ZF"];
	close_stdout_14 -> close_stdout_3 [label="!ZF"];
	close_stdout_15 -> close_stdout_12 [label="ZF"];
	close_stdout_15 -> close_stdout_0 [label="!ZF"];
	close_stdout_16 -> close_stdout_17;


	close_stdout_19 -> close_stdout_20;
	close_stdout_20 -> close_stdout_21;
	close_stdout_21 -> close_stdout_18 [label="ZF"];
	close_stdout_21 -> close_stdout_16 [label="!ZF"];
	close_stdout_22 -> close_stdout_23;
	close_stdout_23 -> close_stdout_24;
	close_stdout_24 -> close_stdout_19 [label="ZF"];
	close_stdout_24 -> close_stdout_15 [label="!ZF"];
}
--------
Starting Node: 20

Edges: 0 ----> 1, 1 --ZF--> 17, 1 --!ZF--> 10, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, , 7 ----> 8, 8 ----> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 7, 12 --!ZF--> 2, 13 --ZF--> 10, 13 --!ZF--> 0, 14 ----> 15, , , 17 ----> 18, 18 ----> 19, 19 --ZF--> 16, 19 --!ZF--> 14, 20 ----> 21, 21 ----> 22, 22 --ZF--> 17, 22 --!ZF--> 13

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout"
node 0:
RAX := __errno_location@()
node 1:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 2:
RAX := __errno_location@()
node 3:
RDI := Dereference: [Var: file_name,8], RSI := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
node 4:
RAX := quotearg_colon@()
node 5:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 20),4], R8 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := error@()
node 7:
RAX := __errno_location@()
node 8:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Dereference: [(Var: RSP0 - Value: 16),8], RDX := Dereference: [Var: .str_2,8], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := error@()
node 10:
RDI := Dereference: [Var: .str_1,8]
node 11:
RAX := gettext@()
node 12:
[(Va(22,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == Var: RSP0 && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
r: RSP0 - Value: 16),8] := Reg: RAX
ZF := CMP(Dereference: [Var: file_name,8],Value: 0), CF := CMP(Dereference: [Var: file_name,8],Value: 0), SF := CMP(Dereference: [Var: file_name,8],Value: 0), OF := CMP(Dereference: [Var: file_name,8],Value: 0), PF := CMP(Dereference: [Var: file_name,8],Value: 0)
node 13:
ZF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), CF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), SF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), OF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), PF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1)
node 14:
RDI := Dereference: [Var: exit_failure,4]
node 15:
RAX := _exit@()
node 16:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 17:
RDI := Dereference: [Var: stderr,8]
node 18:
RAX := close_stream@()
node 19:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 20:
RDI := Dereference: [Var: stdout,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 21:
RAX := close_stream@()
node 22:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

Starting Node: 22

Edges: 0 ----> 1, 1 ----> 2, 2 --ZF--> 19, 2 --!ZF--> 12, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 ----> 10, 10 ----> 11, , 12 ----> 13, 13 ----> 14, 14 --ZF--> 9, 14 --!ZF--> 3, 15 --ZF--> 12, 15 --!ZF--> 0, 16 ----> 17, , , 19 ----> 20, 20 ----> 21, 21 --ZF--> 18, 21 --!ZF--> 16, 22 ----> 23, 23 ----> 24, 24 --ZF--> 19, 24 --!ZF--> 15

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout"
node 0:
skip'
node 1:
RAX := __errno_location@()
node 2:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 3:
skip'
node 4:
RAX := __errno_location@()
node 5:
RDI := Dereference: [Var: file_name,8], RSI := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
node 6:
RAX := quotearg_colon@()
node 7:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 20),4], R8 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := error@()
node 9:
RAX := __errno_location@()
node 10:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Dereference: [(Var: RSP0 - Value: 16),8], RDX := Dereference: [Var: .str_2,8], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := error@()
node 12:
RDI := Dereference: [Var: .str_1,8]
node 13:
RAX := gettext@()
node 14:
[(Var: RSP0 - Value: 16),8] := Reg: RAX
ZF := CMP(Dereference: [Var: file_name,8],Value: 0), CF := CMP(Dereference: [Var: file_name,8],Value: 0), SF := CMP(Dereference: [Var: file_name,8],Value: 0), OF := CMP(Dereference: [Var: file_name,8],Value: 0), PF := CMP(Dereference: [Var: file_name,8],Value: 0)
node 15:
ZF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), CF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), SF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), OF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), PF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1)
node 16:
RDI := Dereference: [Var: exit_failure,4]
node 17:
RAX := _exit@()
node 18:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 19:
RDI := Dereference: [Var: stderr,8]
node 20:
RAX := close_stream@()
node 21:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 22:
RDI := Dereference: [Var: stdout,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 23:
RAX := close_stream@()
node 24:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

same_behavior for the nodes: close_stdout -> close_stdout_259 and close_stdout -> close_stdout_350

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: stdout,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RDI := Dereference: [Var: stdout,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "stdout" 64) 8
Value B:
E_deref (E_var "stdout" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout -> close_stdout_259 and close_stdout -> close_stdout_350 have been verified to do the same.

same_behavior for the nodes: close_stdout_260 -> close_stdout_260 and close_stdout_351 -> close_stdout_351

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "close_stream" "") [])]
Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_260 -> close_stdout_260 and close_stdout_351 -> close_stdout_351 have been verified to do the same.

same_behavior for the nodes: close_stdout_261 -> close_stdout_262 and close_stdout_352 -> close_stdout_353

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_261 -> close_stdout_262 and close_stdout_352 -> close_stdout_353 have been verified to do the same.

same_behavior for the nodes: .label_19 -> .label_19 and .label_16 -> close_stdout_406

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: stderr,8]

SB || RDI := Dereference: [Var: stderr,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "stderr" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "stderr" 64) 8
Value B:
E_deref (E_var "stderr" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_19 -> .label_19 and .label_16 -> close_stdout_406 have been verified to do the same.

same_behavior for the nodes: close_stdout_300 -> close_stdout_300 and close_stdout_407 -> close_stdout_407

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "close_stream" "") [])]
Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_300 -> close_stdout_300 and close_stdout_407 -> close_stdout_407 have been verified to do the same.

same_behavior for the nodes: close_stdout_301 -> close_stdout_302 and close_stdout_408 -> close_stdout_410

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_301 -> close_stdout_302 and close_stdout_408 -> close_stdout_410 have been verified to do the same.

same_behavior for the nodes: .label_16 -> close_stdout_308 and .label_17 -> close_stdout_420

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_16 -> close_stdout_308 and .label_17 -> close_stdout_420 have been verified to do the same.

same_behavior for the nodes: close_stdout_303 -> close_stdout_303 and close_stdout_411 -> close_stdout_412

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: exit_failure,4]

SB || RDI := Dereference: [Var: exit_failure,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "exit_failure" 64) 4)]
Resulting values:
Value A:
E_deref (E_var "exit_failure" 64) 4
Value B:
E_deref (E_var "exit_failure" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_303 -> close_stdout_303 and close_stdout_411 -> close_stdout_412 have been verified to do the same.

same_behavior for the nodes: close_stdout_304 -> close_stdout_304 and close_stdout_413 -> close_stdout_413

same_behavior checking these two SStates:

SA || RAX := _exit@()

SB || RAX := _exit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "_exit" "") [])]
Resulting values:
Value A:
E_app (F2 "_exit" "") []
Value B:
E_app (F2 "_exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_304 -> close_stdout_304 and close_stdout_413 -> close_stdout_413 have been verified to do the same.

same_behavior for the nodes: close_stdout_263 -> close_stdout_264 and close_stdout_354 -> close_stdout_355

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), CF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), SF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), OF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), PF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1)

SB || ZF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), CF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), SF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), OF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1), PF := TEST(Dereference: [Var: ignore_EPIPE,1],Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_263 -> close_stdout_264 and close_stdout_354 -> close_stdout_355 have been verified to do the same.

same_behavior for the nodes: .label_20 -> .label_20 and .label_19 -> close_stdout_363

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str_1,8]

SB || RDI := Dereference: [Var: .str_1,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str_1" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str_1" 64) 8
Value B:
E_deref (E_var ".str_1" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_20 -> .label_20 and .label_19 -> close_stdout_363 have been verified to do the same.

same_behavior for the nodes: close_stdout_270 -> close_stdout_270 and close_stdout_364 -> close_stdout_364

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_270 -> close_stdout_270 and close_stdout_364 -> close_stdout_364 have been verified to do the same.

same_behavior for the nodes: close_stdout_271 -> close_stdout_273 and close_stdout_365 -> close_stdout_367

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 16),8] := Reg: RAX
SA || ZF := CMP(Dereference: [Var: file_name,8],Value: 0), CF := CMP(Dereference: [Var: file_name,8],Value: 0), SF := CMP(Dereference: [Var: file_name,8],Value: 0), OF := CMP(Dereference: [Var: file_name,8],Value: 0), PF := CMP(Dereference: [Var: file_name,8],Value: 0)

SB || [(Var: RSP0 - Value: 16),8] := Reg: RAX
SB || ZF := CMP(Dereference: [Var: file_name,8],Value: 0), CF := CMP(Dereference: [Var: file_name,8],Value: 0), SF := CMP(Dereference: [Var: file_name,8],Value: 0), OF := CMP(Dereference: [Var: file_name,8],Value: 0), PF := CMP(Dereference: [Var: file_name,8],Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout_271 -> close_stdout_273 and close_stdout_365 -> close_stdout_367 have been verified to do the same.

same_behavior for the nodes: .label_17 -> .label_17 and .label_18 -> .label_18

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_17 -> .label_17 and .label_18 -> .label_18 have been verified to do the same.

same_behavior for the nodes: close_stdout_289 -> close_stdout_293 and close_stdout_389 -> close_stdout_398

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Dereference: [(Var: RSP0 - Value: 16),8], RDX := Dereference: [Var: .str_2,8], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Dereference: [(Var: RSP0 - Value: 16),8], RDX := Dereference: [Var: .str_2,8], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str_2" 64) 8
Value B:
E_deref (E_var ".str_2" 64) 8
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_289 -> close_stdout_293 and close_stdout_389 -> close_stdout_398 have been verified to do the same.

same_behavior for the nodes: close_stdout_294 -> close_stdout_294 and close_stdout_399 -> close_stdout_399

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_294 -> close_stdout_294 and close_stdout_399 -> close_stdout_399 have been verified to do the same.

same_behavior for the nodes: close_stdout_274 -> close_stdout_274 and close_stdout_368 -> close_stdout_368

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: close_stdout_274 -> close_stdout_274 and close_stdout_369 -> close_stdout_369

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_274 -> close_stdout_274 and close_stdout_369 -> close_stdout_369 have been verified to do the same.

same_behavior for the nodes: close_stdout_275 -> close_stdout_277 and close_stdout_370 -> close_stdout_373

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: file_name,8], RSI := Dereference: [Reg: RAX,4]
SA || [(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]

SB || RDI := Dereference: [Var: file_name,8], RSI := Dereference: [Reg: RAX,4]
SB || [(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "file_name" 64) 8),(RSI,E_deref (E_reg RAX) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "file_name" 64) 8),(RSI,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_var "file_name" 64) 8
Value B:
E_deref (E_var "file_name" 64) 8
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout_275 -> close_stdout_277 and close_stdout_370 -> close_stdout_373 have been verified to do the same.

same_behavior for the nodes: close_stdout_278 -> close_stdout_278 and close_stdout_374 -> close_stdout_374

same_behavior checking these two SStates:

SA || RAX := quotearg_colon@()

SB || RAX := quotearg_colon@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_colon" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_colon" "") []
Value B:
E_app (F2 "quotearg_colon" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_278 -> close_stdout_278 and close_stdout_374 -> close_stdout_374 have been verified to do the same.

same_behavior for the nodes: close_stdout_279 -> close_stdout_284 and close_stdout_375 -> close_stdout_384

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 20),4], R8 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str.1_0,8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 20),4], R8 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str.1_0" 64) 8),(RDI,E_val 0 64),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.1_0" 64) 8
Value B:
E_deref (E_var ".str.1_0" 64) 8
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_279 -> close_stdout_284 and close_stdout_375 -> close_stdout_384 have been verified to do the same.

same_behavio(4,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
r for the nodes: close_stdout_285 -> close_stdout_285 and close_stdout_385 -> close_stdout_385

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_285 -> close_stdout_285 and close_stdout_385 -> close_stdout_385 have been verified to do the same.

same_behavior for the nodes: close_stdout_265 -> close_stdout_265 and close_stdout_356 -> close_stdout_356

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: close_stdout_265 -> close_stdout_265 and close_stdout_357 -> close_stdout_357

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_265 -> close_stdout_265 and close_stdout_357 -> close_stdout_357 have been verified to do the same.

same_behavior for the nodes: close_stdout_266 -> close_stdout_267 and close_stdout_358 -> close_stdout_360

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

SB || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_266 -> close_stdout_267 and close_stdout_358 -> close_stdout_360 have been verified to do the same.

Label relationship:
.str.1_0 <--> .str.1_0
file_name <--> file_name
.str_2 <--> .str_2
.str_1 <--> .str_1
exit_failure <--> exit_failure
stderr <--> stderr
 <--> 
stdout <--> stdout

Local variable relationship:
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (6/60): "xnrealloc"
--------
.dot code for CFG of text section xnrealloc for Vanilla
diGraph xnrealloc_Vanilla{
	xnrealloc_0  [label="[xnrealloc_3525,xnrealloc_3525]"]
	xnrealloc_1  [label="[.label_280,xnrealloc_3530]"]
	xnrealloc_2  [label="[xnrealloc_3531,xnrealloc_3531]"]
	xnrealloc_3  [label="[xnrealloc_3532,xnrealloc_3534]"]
	xnrealloc_4  [label="[xnrealloc,xnrealloc_3524]"]


	xnrealloc_1 -> xnrealloc_2;
	xnrealloc_2 -> xnrealloc_3;

	xnrealloc_4 -> xnrealloc_1 [label="!CF"];
	xnrealloc_4 -> xnrealloc_0 [label="CF"];
}
--------
--------
.dot code for CFG of text section xnrealloc for Randomized
diGraph xnrealloc_Randomized{
	xnrealloc_0  [label="[xnrealloc_4955,xnrealloc_4955]"]
	xnrealloc_1  [label="[xnrealloc_4956,xnrealloc_4956]"]
	xnrealloc_2  [label="[.label_280,xnrealloc_4966]"]
	xnrealloc_3  [label="[xnrealloc_4967,xnrealloc_4967]"]
	xnrealloc_4  [label="[xnrealloc_4968,xnrealloc_4972]"]
	xnrealloc_5  [label="[xnrealloc,xnrealloc_4954]"]

	xnrealloc_0 -> xnrealloc_1;

	xnrealloc_2 -> xnrealloc_3;
	xnrealloc_3 -> xnrealloc_4;

	xnrealloc_5 -> xnrealloc_2 [label="!CF"];
	xnrealloc_5 -> xnrealloc_0 [label="CF"];
}
--------
Starting Node: 4

Edges: , 1 ----> 2, 2 ----> 3, , 4 --!CF--> 1, 4 --CF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "xnrealloc"
node 0:
RAX := xalloc_die@()
node 1:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8])), RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8]))
node 2:
RAX := xrealloc@()
node 3:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 4:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

Starting Node: 5

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, , 5 --!CF--> 2, 5 --CF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "xnrealloc"
node 0:
skip'
node 1:
RAX := xalloc_die@()
node 2:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8])), RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8]))
node 3:
RAX := xrealloc@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

same_behavior for the nodes: xnrealloc -> xnrealloc_3524 and xnrealloc -> xnrealloc_4954

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnrealloc -> xnrealloc_3524 and xnrealloc -> xnrealloc_4954 have been verified to do the same.

same_behavior for the nodes: .label_280 -> xnrealloc_3530 and .label_280 -> xnrealloc_4966

same_behavior checking these two SStates:

SA || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8])), RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8]))

SB || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8])), RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 24),8],Dereference: [(Var: RSP0 - Value: 32),8]))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
local_var_cmp called

local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_280 -> xnrealloc_3530 and .label_280 -> xnrealloc_4966 have been verified to do the same.

same_behavior for the nodes: xnrealloc_3531 -> xnrealloc_3531 and xnrealloc_4967 -> xnrealloc_4967

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_3531 -> xnrealloc_3531 and xnrealloc_4967 -> xnrealloc_4967 have been verified to do the same.

same_behavior for the nodes: xnrealloc_3532 -> xnrealloc_3534 and xnrealloc_4968 -> xnrealloc_4972

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_3532 -> xnrealloc_3534 and xnrealloc_4968 -> xnrealloc_4972 have been verified to do the same.

same_behavior for the nodes: xnrealloc_3525 -> xnrealloc_3525 and xnrealloc_4955 -> xnrealloc_4955

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: x(4,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
nrealloc_3525 -> xnrealloc_3525 and xnrealloc_4956 -> xnrealloc_4956

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_3525 -> xnrealloc_3525 and xnrealloc_4956 -> xnrealloc_4956 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (7/60): "xnmalloc"
--------
.dot code for CFG of text section xnmalloc for Vanilla
diGraph xnmalloc_Vanilla{
	xnmalloc_0  [label="[xnmalloc_3473,xnmalloc_3473]"]
	xnmalloc_1  [label="[.label_278,xnmalloc_3477]"]
	xnmalloc_2  [label="[xnmalloc_3478,xnmalloc_3478]"]
	xnmalloc_3  [label="[xnmalloc_3479,xnmalloc_3481]"]
	xnmalloc_4  [label="[xnmalloc,xnmalloc_3472]"]


	xnmalloc_1 -> xnmalloc_2;
	xnmalloc_2 -> xnmalloc_3;

	xnmalloc_4 -> xnmalloc_1 [label="!CF"];
	xnmalloc_4 -> xnmalloc_0 [label="CF"];
}
--------
--------
.dot code for CFG of text section xnmalloc for Randomized
diGraph xnmalloc_Randomized{
	xnmalloc_0  [label="[xnmalloc_4885,xnmalloc_4885]"]
	xnmalloc_1  [label="[xnmalloc_4886,xnmalloc_4886]"]
	xnmalloc_2  [label="[.label_278,xnmalloc_4891]"]
	xnmalloc_3  [label="[xnmalloc_4892,xnmalloc_4892]"]
	xnmalloc_4  [label="[xnmalloc_4893,xnmalloc_4895]"]
	xnmalloc_5  [label="[xnmalloc,xnmalloc_4884]"]

	xnmalloc_0 -> xnmalloc_1;

	xnmalloc_2 -> xnmalloc_3;
	xnmalloc_3 -> xnmalloc_4;

	xnmalloc_5 -> xnmalloc_2 [label="!CF"];
	xnmalloc_5 -> xnmalloc_0 [label="CF"];
}
--------
Starting Node: 4

Edges: , 1 ----> 2, 2 ----> 3, , 4 --!CF--> 1, 4 --CF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "xnmalloc"
node 0:
RAX := xalloc_die@()
node 1:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8])), RDI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8]))
node 2:
RAX := xmalloc@()
node 3:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 4:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 5

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, , 5 --!CF--> 2, 5 --CF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "xnmalloc"
node 0:
skip'
node 1:
RAX := xalloc_die@()
node 2:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8])), RDI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8]))
node 3:
RAX := xmalloc@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xnmalloc -> xnmalloc_3472 and xnmalloc -> xnmalloc_4884

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnmalloc -> xnmalloc_3472 and xnmalloc -> xnmalloc_4884 have been verified to do the same.

same_behavior for the nodes: .label_278 -> xnmalloc_3477 and .label_278 -> xnmalloc_4891

same_behavior checking these two SStates:

SA || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8])), RDI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8]))

SB || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8])), RDI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [(Var: RSP0 - Value: 24),8]))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]),(RDI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]),(RDI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8]]
local_var_cmp called

local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_278 -> xnmalloc_3477 and .label_278 -> xnmalloc_4891 have been verified to do the same.

same_behavior for the nodes: xnmalloc_3478 -> xnmalloc_3478 and xnmalloc_4892 -> xnmalloc_4892

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_3478 -> xnmalloc_3478 and xnmalloc_4892 -> xnmalloc_4892 have been verified to do the same.

same_behavior for the nodes: xnmalloc_3479 -> xnmalloc_3481 and xnmalloc_4893 -> xnmalloc_4895

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_3479 -> xnmalloc_3481 and xnmalloc_4893 -> xnmalloc_4895 have been verified to do the same.

same_behavior for the nodes: xnmalloc_3473 -> xnmalloc_3473 and xnmalloc_4885 -> xnmalloc_4885

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64)]

Register or Memory is not compatible
same_behavior for the nodes: xnmalloc_3473 -> xnmalloc_3473 and xnmalloc_4886 -> xnmalloc_4886

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_3473 -> xnmalloc_3473 and xnmalloc_4886 -> xnmalloc_4886 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (8/60): "gettext_quote"
--------
.dot code for CFG of text section gettext_quote for Vanilla
diGraph gettext_quote_Vanilla{
	gettext_quote_0  [label="[gettext_quote_2852,gettext_quote_2854]"]
	gettext_quote_1  [label="[gettext_quote_2863,gettext_quote_2870]"]
	gettext_quote_2  [label="[gettext_quote_2877,gettext_quote_2884]"]
	gettext_quote_3  [label="[.label_260,gettext_quote_2890]"]
	gettext_quote_4  [label="[.label_261,gettext_quote_2895]"]
	gettext_quote_5  [label="[.label_258,gettext_quote_2873]"]
	gettext_quote_6  [label="[gettext_quote_2874,gettext_quote_2874]"]
	gettext_quote_7  [label="[gettext_quote_2875,gettext_quote_2876]"]
	gettext_quote_8  [label="[.label_259,.label_259]"]
	gettext_quote_9  [label="[gettext_quote_2857,gettext_quote_2859]"]
	gettext_quote_10  [label="[gettext_quote_2860,gettext_quote_2860]"]
	gettext_quote_11  [label="[gettext_quote_2861,gettext_quote_2862]"]
	gettext_quote_12  [label="[gettext_quote,gettext_quote_2846]"]
	gettext_quote_13  [label="[gettext_quote_2847,gettext_quote_2847]"]
	gettext_quote_14  [label="[gettext_quote_2848,gettext_quote_2851]"]

	gettext_quote_0 -> gettext_quote_4;
	gettext_quote_1 -> gettext_quote_4;
	gettext_quote_2 -> gettext_quote_4;
	gettext_quote_3 -> gettext_quote_4;

	gettext_quote_5 -> gettext_quote_6;
	gettext_quote_6 -> gettext_quote_7;
	gettext_quote_7 -> gettext_quote_3 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_2 [label="ZF"];
	gettext_quote_8 -> gettext_quote_9;
	gettext_quote_9 -> gettext_quote_10;
	gettext_quote_10 -> gettext_quote_11;
	gettext_quote_11 -> gettext_quote_5 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_1 [label="ZF"];
	gettext_quote_12 -> gettext_quote_13;
	gettext_quote_13 -> gettext_quote_14;
	gettext_quote_14 -> gettext_quote_8 [label="ZF"];
	gettext_quote_14 -> gettext_quote_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section gettext_quote for Randomized
diGraph gettext_quote_Randomized{
	gettext_quote_0  [label="[gettext_quote_3983,gettext_quote_3987]"]
	gettext_quote_1  [label="[gettext_quote_4000,gettext_quote_4010]"]
	gettext_quote_2  [label="[gettext_quote_4020,gettext_quote_4031]"]
	gettext_quote_3  [label="[.label_258,gettext_quote_4040]"]
	gettext_quote_4  [label="[.label_259,gettext_quote_4046]"]
	gettext_quote_5  [label="[.label_260,gettext_quote_4015]"]
	gettext_quote_6  [label="[gettext_quote_4016,gettext_quote_4016]"]
	gettext_quote_7  [label="[gettext_quote_4017,gettext_quote_4019]"]
	gettext_quote_8  [label="[.label_261,.label_261]"]
	gettext_quote_9  [label="[gettext_quote_3990,gettext_quote_3996]"]
	gettext_quote_10  [label="[gettext_quote_3997,gettext_quote_3997]"]
	gettext_quote_11  [labe(12,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
l="[gettext_quote_3998,gettext_quote_3999]"]
	gettext_quote_12  [label="[gettext_quote,gettext_quote_3976]"]
	gettext_quote_13  [label="[gettext_quote_3977,gettext_quote_3977]"]
	gettext_quote_14  [label="[gettext_quote_3978,gettext_quote_3982]"]

	gettext_quote_0 -> gettext_quote_4;
	gettext_quote_1 -> gettext_quote_4;
	gettext_quote_2 -> gettext_quote_4;
	gettext_quote_3 -> gettext_quote_4;

	gettext_quote_5 -> gettext_quote_6;
	gettext_quote_6 -> gettext_quote_7;
	gettext_quote_7 -> gettext_quote_3 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_2 [label="ZF"];
	gettext_quote_8 -> gettext_quote_9;
	gettext_quote_9 -> gettext_quote_10;
	gettext_quote_10 -> gettext_quote_11;
	gettext_quote_11 -> gettext_quote_5 [label="!ZF"];
	gettext_quote_11 -> gettext_quote_1 [label="ZF"];
	gettext_quote_12 -> gettext_quote_13;
	gettext_quote_13 -> gettext_quote_14;
	gettext_quote_14 -> gettext_quote_8 [label="ZF"];
	gettext_quote_14 -> gettext_quote_0 [label="!ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 4, 1 ----> 4, 2 ----> 4, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 --!ZF--> 3, 7 --ZF--> 2, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --!ZF--> 5, 11 --ZF--> 1, 12 ----> 13, 13 ----> 14, 14 --ZF--> 8, 14 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 40),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 40),8]
node 1:
RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8]), RCX := Dereference: [Var: .str.14,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
[(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8])
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)
node 2:
RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8]), RCX := Dereference: [Var: .str.17_0,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
[(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8])
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)
node 3:
RAX := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8]), RCX := Dereference: [Var: .str.10_0,8]
[(Var: RSP0 - Value: 16),8] := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8])
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9)
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RDI := Dereference: [(Var: RSP0 - Value: 48),8], RSI := Dereference: [Var: .str.16,8]
node 6:
RAX := c_strcasecmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := locale_charset@()
node 9:
RDI := Reg: RAX, RSI := Dereference: [Var: .str.13_0,8]
[(Var: RSP0 - Value: 48),8] := Reg: RAX
node 10:
RAX := c_strcasecmp@()
node 11:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 12:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RSI)
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 13:
RAX := gettext@()
node 14:
[(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), CF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), SF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), OF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), PF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8])
--------

Starting Node: 12

Edges: 0 ----> 4, 1 ----> 4, 2 ----> 4, 3 ----> 4, , 5 ----> 6, 6 ----> 7, 7 --!ZF--> 3, 7 --ZF--> 2, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --!ZF--> 5, 11 --ZF--> 1, 12 ----> 13, 13 ----> 14, 14 --ZF--> 8, 14 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 40),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 40),8]
node 1:
RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8]), RCX := Dereference: [Var: .str.14,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
[(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8])
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)
node 2:
RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8]), RCX := Dereference: [Var: .str.17_0,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
[(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8])
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)
node 3:
RAX := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8]), RCX := Dereference: [Var: .str.10_0,8]
[(Var: RSP0 - Value: 16),8] := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8])
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9)
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RDI := Dereference: [(Var: RSP0 - Value: 48),8], RSI := Dereference: [Var: .str.16,8]
node 6:
RAX := c_strcasecmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := locale_charset@()
node 9:
RDI := Reg: RAX, RSI := Dereference: [Var: .str.13_0,8]
[(Var: RSP0 - Value: 48),8] := Reg: RAX
node 10:
RAX := c_strcasecmp@()
node 11:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 12:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RSI)
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 13:
RAX := gettext@()
node 14:
[(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), CF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), SF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), OF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), PF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8])
--------

same_behavior for the nodes: gettext_quote -> gettext_quote_2846 and gettext_quote -> gettext_quote_3976

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote -> gettext_quote_2846 and gettext_quote -> gettext_quote_3976 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2847 -> gettext_quote_2847 and gettext_quote_3977 -> gettext_quote_3977

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2847 -> gettext_quote_2847 and gettext_quote_3977 -> gettext_quote_3977 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2848 -> gettext_quote_2851 and gettext_quote_3978 -> gettext_quote_3982

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 40),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), CF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), SF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), OF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), PF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8])

SB || [(Var: RSP0 - Value: 40),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), CF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), SF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), OF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8]), PF := CMP(Reg: RAX,Dereference: [(Var: RSP0 - Value: 24),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RAX)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2848 -> gettext_quote_2851 and gettext_quote_3978 -> gettext_quote_3982 have been verified to do the same.

same_behavior for the nodes: .label_259 -> .label_259 and .label_261 -> .label_261

same_behavior checking these two SStates:

SA || RAX := locale_charset@()

SB || RAX := locale_charset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "locale_charset" "") [])]
Resulting values:
Value A:
E_app (F2 "locale_charset" "") []
Value B:
E_app (F2 "locale_charset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_259 -> .label_259 and .label_261 -> .label_261 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2857 -> gettext_quote_2859 and gettext_quote_3990 -> gettext_quote_3996

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: .str.13_0,8]
SA || [(Var: RSP0 - Value: 48),8] := Reg: RAX

SB || RDI := Reg: RAX, RSI := Dereference: [Var: .str.13_0,8]
SB || [(Var: RSP0 - Value: 48),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.13_0" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.13_0" 64) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.13_0" 64) 8
Value B:
E_deref (E_var ".str.13_0" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2857 -> gettext_quote_2859 and gettext_quote_3990 -> gettext_quote_3996 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2860 -> gettext_quote_2860 and gettext_quote_3997 -> gettext_quote_3997

same_behavior checking these two SStates:

SA || RAX := c_strcasecmp@()

SB || RAX := c_strcasecmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "c_strcasecmp" "") [])]
Resulting values:
Value A:
E_app (F2 "c_strcasecmp" "") []
Value B:
E_app (F2 "c_strcasecmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2860 -> gettext_quote_2860 and gettext_quote_3997 -> gettext_quote_3997 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2861 -> gettext_quote_2862 and gettext_quote_3998 -> gettext_quote_3999

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2861 -> gettext_quote_2862 and gettext_quote_3998 -> gettext_quote_3999 have been verified to do the same.

same_behavior for the nodes: .label_258 -> gettext_quote_2873 and .label_260 -> gettext_quote_4015

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 48),8], RSI := Dereference: [Var: .str.16,8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 48),8], RSI := Dereference: [Var: .str.16,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RSI,E_deref (E_var ".str.16" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RSI,E_deref (E_var ".str.16" 64) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.16" 64) 8
Value B:
E_deref (E_var ".str.16" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_258 -> gettext_quote_2873 and .label_260 -> gettext_quote_4015 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2874 -> gettext_quote_2874 and gettext_quote_4016 -> gettext_quote_4016

same_behavior checking these two SStates:

SA || RAX := c_strcasecmp@()

SB || RAX := c_strcasecmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "c_strcasecmp" "") [])]
Resulting values:
Value A:
E_app (F2 "c_strcasecmp" "") []
Value B:
E_app (F2 "c_strcasecmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2874 -> gettext_quote_2874 and gettext_quote_4016 -> gettext_quote_4016 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2875 -> gettext_quote_2876 and gettext_quote_4017 -> gettext_quote_4019

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2875 -> gettext_quote_2876 and gettext_quote_4017 -> gettext_quote_4019 have been verified to do the same.

same_behavior for the nodes: .label_260 -> gettext_quote_2890 and .label_258 -> gettext_quote_4040

same_behavior checking these two SStates:

SA || RAX := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8]), RCX := Dereference: [Var: .str.10_0,8]
SA || [(Var: RSP0 - Value: 16),8] := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8])
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9)

SB || RAX := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8]), RCX := Dereference: [Var: .str.10_0,8]
SB || [(Var: RSP0 - Value: 16),8] := (if (Dereference: [(Var: RSP0 - Value: 28),4] == Value: 9) then Dereference: [Var: .str.10_0,8] else Dereference: [Var: .str.12,8])
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 9)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)),(RCX,E_deref (E_var ".str.10_0" 64) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)),(RCX,E_deref (E_var ".str.10_0" 64) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)
Value B:
E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.10_0" 64) 8
Value B:
E_deref (E_var ".str.10_0" 64) 8
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)
E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4,E_val 9 32]) (E_deref (E_var ".str.10_0" 64) 8) (E_deref (E_var ".str.12" 64) 8)
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_260 -> gettext_quote_2890 and .label_258 -> gettext_quote_4040 have been verified to do the same.

same_behavior for the nodes: .label_261 -> gettext_quote_2895 and .label_259 -> gettext_quote_4046

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_261 -> gettext_quote_2895 and .label_259 -> gettext_quote_4046 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2877 -> gettext_quote_2884 and gettext_quote_4020 -> gettext_quote_4031

same_behavior checking these two SStates:

SA || RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8]), RCX := Dereference: [Var: .str.17_0,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
SA || [(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8])
SA || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)

SB || RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8]), RCX := Dereference: [Var: .str.17_0,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
SB || [(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.17_0,8] else Dereference: [Var: .str.18_0,8])
SB || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)),(RCX,E_deref (E_var ".str.17_0" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)),(RCX,E_deref (E_var ".str.17_0" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)),(RCX,E_deref (E_var ".str.17_0" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)),(RCX,E_deref (E_var ".str.17_0" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)
Value B:
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.17_0" 64) 8
Value B:
E_deref (E_var ".str.17_0" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.17_0" 64) 8) (E_deref (E_var ".str.18_0" 64) 8)
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes gettext_quote_2877 -> gettext_quote_2884 and gettext_quote_4020 -> gettext_quote_4031 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2863 -> gettext_quote_2870 and gettext_quote_4000 -> gettext_quote_4010

same_behavior checking these two SStates:

SA || RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8]), RCX := Dereference: [Var: .str.14,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
SA || [(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8])
SA || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)

SB || RAX := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8]), RCX := Dereference: [Var: .str.14,8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RSI := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32)
SB || [(Var: RSP0 - Value: 16),8] := (if (sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32) == Value: 96) then Dereference: [Var: .str.14,8] else Dereference: [Var: .str.15,8])
SB || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],1],8,32),Value: 96)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)),(RCX,E_deref (E_var ".str.14" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
 (E_var ".str.15" 64) 8)),(RCX,E_deref (E_var ".str.14" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)),(RCX,E_deref (E_var ".str.14" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)),(RCX,E_deref (E_var ".str.14" 64) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1])]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)
Value B:
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.14" 64) 8
Value B:
E_deref (E_var ".str.14" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)
E_ite (E_app (F ==) [E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 1],E_val 96 32]) (E_deref (E_var ".str.14" 64) 8) (E_deref (E_var ".str.15" 64) 8)
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes gettext_quote_2863 -> gettext_quote_2870 and gettext_quote_4000 -> gettext_quote_4010 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2852 -> gettext_quote_2854 and gettext_quote_3983 -> gettext_quote_3987

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 40),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 40),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2852 -> gettext_quote_2854 and gettext_quote_3983 -> gettext_quote_3987 have been verified to do the same.

Label relationship:
.str.15 <--> .str.15
.str.14 <--> .str.14
.str.18_0 <--> .str.18_0
.str.17_0 <--> .str.17_0
.str.12 <--> .str.12
.str.10_0 <--> .str.10_0
.str.16 <--> .str.16
.str.13_0 <--> .str.13_0
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (9/60): "quote"
--------
.dot code for CFG of text section quote for Vanilla
diGraph quote_Vanilla{
	quote_0  [label="[quote,quote_2829]"]
	quote_1  [label="[quote_2830,quote_2830]"]
	quote_2  [label="[quote_2831,quote_2833]"]

	quote_0 -> quote_1;
	quote_1 -> quote_2;

}
--------
--------
.dot code for CFG of text section quote for Randomized
diGraph quote_Randomized{
	quote_0  [label="[quote,quote_3953]"]
	quote_1  [label="[quote_3954,quote_3954]"]
	quote_2  [label="[quote_3955,quote_3960]"]

	quote_0 -> quote_1;
	quote_1 -> quote_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quote"
node 0:
RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quote_n@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quote"
node 0:
RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quote_n@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quote -> quote_2829 and quote -> quote_3953

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 64),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_val 0 64),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Re(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
sult: Success
Nodes quote -> quote_2829 and quote -> quote_3953 have been verified to do the same.

same_behavior for the nodes: quote_2830 -> quote_2830 and quote_3954 -> quote_3954

same_behavior checking these two SStates:

SA || RAX := quote_n@()

SB || RAX := quote_n@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quote_n" "") [])]
Resulting values:
Value A:
E_app (F2 "quote_n" "") []
Value B:
E_app (F2 "quote_n" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_2830 -> quote_2830 and quote_3954 -> quote_3954 have been verified to do the same.

same_behavior for the nodes: quote_2831 -> quote_2833 and quote_3955 -> quote_3960

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_2831 -> quote_2833 and quote_3955 -> quote_3960 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (10/60): "quote_n"
--------
.dot code for CFG of text section quote_n for Vanilla
diGraph quote_n_Vanilla{
	quote_n_0  [label="[quote_n,quote_n_2811]"]
	quote_n_1  [label="[quote_n_2812,quote_n_2812]"]
	quote_n_2  [label="[quote_n_2813,quote_n_2815]"]

	quote_n_0 -> quote_n_1;
	quote_n_1 -> quote_n_2;

}
--------
--------
.dot code for CFG of text section quote_n for Randomized
diGraph quote_n_Randomized{
	quote_n_0  [label="[quote_n,quote_n_3930]"]
	quote_n_1  [label="[quote_n_3931,quote_n_3931]"]
	quote_n_2  [label="[quote_n_3932,quote_n_3935]"]

	quote_n_0 -> quote_n_1;
	quote_n_1 -> quote_n_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n"
node 0:
RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quote_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n"
node 0:
RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quote_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quote_n -> quote_n_2811 and quote_n -> quote_n_3930

same_behavior checking these two SStates:

SA || RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 18446744073709551615 64),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n -> quote_n_2811 and quote_n -> quote_n_3930 have been verified to do the same.

same_behavior for the nodes: quote_n_2812 -> quote_n_2812 and quote_n_3931 -> quote_n_3931

same_behavior checking these two SStates:

SA || RAX := quote_n_mem@()

SB || RAX := quote_n_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quote_n_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quote_n_mem" "") []
Value B:
E_app (F2 "quote_n_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_n_2812 -> quote_n_2812 and quote_n_3931 -> quote_n_3931 have been verified to do the same.

same_behavior for the nodes: quote_n_2813 -> quote_n_2815 and quote_n_3932 -> quote_n_3935

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_n_2813 -> quote_n_2815 and quote_n_3932 -> quote_n_3935 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (11/60): "quote_mem"
--------
.dot code for CFG of text section quote_mem for Vanilla
diGraph quote_mem_Vanilla{
	quote_mem_0  [label="[quote_mem,quote_mem_2792]"]
	quote_mem_1  [label="[quote_mem_2793,quote_mem_2793]"]
	quote_mem_2  [label="[quote_mem_2794,quote_mem_2796]"]

	quote_mem_0 -> quote_mem_1;
	quote_mem_1 -> quote_mem_2;

}
--------
--------
.dot code for CFG of text section quote_mem for Randomized
diGraph quote_mem_Randomized{
	quote_mem_0  [label="[quote_mem,quote_mem_3904]"]
	quote_mem_1  [label="[quote_mem_3905,quote_mem_3905]"]
	quote_mem_2  [label="[quote_mem_3906,quote_mem_3910]"]

	quote_mem_0 -> quote_mem_1;
	quote_mem_1 -> quote_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_mem"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF :=(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
 Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quote_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quote_mem"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quote_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quote_mem -> quote_mem_2792 and quote_mem -> quote_mem_3904

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_mem -> quote_mem_2792 and quote_mem -> quote_mem_3904 have been verified to do the same.

same_behavior for the nodes: quote_mem_2793 -> quote_mem_2793 and quote_mem_3905 -> quote_mem_3905

same_behavior checking these two SStates:

SA || RAX := quote_n_mem@()

SB || RAX := quote_n_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quote_n_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quote_n_mem" "") []
Value B:
E_app (F2 "quote_n_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_mem_2793 -> quote_mem_2793 and quote_mem_3905 -> quote_mem_3905 have been verified to do the same.

same_behavior for the nodes: quote_mem_2794 -> quote_mem_2796 and quote_mem_3906 -> quote_mem_3910

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_mem_2794 -> quote_mem_2796 and quote_mem_3906 -> quote_mem_3910 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (12/60): "quote_n_mem"
--------
.dot code for CFG of text section quote_n_mem for Vanilla
diGraph quote_n_mem_Vanilla{
	quote_n_mem_0  [label="[quote_n_mem,quote_n_mem_2772]"]
	quote_n_mem_1  [label="[quote_n_mem_2773,quote_n_mem_2773]"]
	quote_n_mem_2  [label="[quote_n_mem_2774,quote_n_mem_2776]"]

	quote_n_mem_0 -> quote_n_mem_1;
	quote_n_mem_1 -> quote_n_mem_2;

}
--------
--------
.dot code for CFG of text section quote_n_mem for Randomized
diGraph quote_n_mem_Randomized{
	quote_n_mem_0  [label="[quote_n_mem,quote_n_mem_3876]"]
	quote_n_mem_1  [label="[quote_n_mem_3877,quote_n_mem_3877]"]
	quote_n_mem_2  [label="[quote_n_mem_3878,quote_n_mem_3883]"]

	quote_n_mem_0 -> quote_n_mem_1;
	quote_n_mem_1 -> quote_n_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n_mem"
node 0:
RCX := Dereference: [Var: quote_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n_mem"
node 0:
RCX := Dereference: [Var: quote_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quote_n_mem -> quote_n_mem_2772 and quote_n_mem -> quote_n_mem_3876

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: quote_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RCX := Dereference: [Var: quote_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "quote_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "quote_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "quote_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "quote_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 8
Value B:
E_deref (E_var "quote_quoting_options" 64) 8
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n_mem -> quote_n_mem_2772 and quote_n_mem -> quote_n_mem_3876 have been verified to do the same.

same_behavior for the nodes: quote_n_mem_2773 -> quote_n_mem_2773 and quote_n_mem_3877 -> quote_n_mem_3877

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_n_mem_2773 -> quote_n_mem_2773 and quote_n_mem_3877 -> quote_n_mem_3877 have been verified to do the same.

same_behavior for the nodes: quote_n_mem_2774 -> quote_n_mem_2776 and quote_n_mem_3878 -> quote_n_mem_3883

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quote_n_mem_2774 -> quote_n_mem_2776 and quote_n_mem_3878 -> quote_n_mem_3883 have been verified to do the same.

Label relationship:
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (13/60): "quotearg_custom_mem"
--------
.dot code for CFG of text section quotearg_custom_mem for Vanilla
diGraph quotearg_custom_mem_Vanilla{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem,quotearg_custom_mem_2751]"]
	quotearg_custom_mem_1  [label="[quotearg_custom_mem_2752,quotearg_custom_mem_2752]"]
	quotearg_custom_mem_2  [label="[quotearg_custom_mem_2753,quotearg_custom_mem_2755]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quotearg_custom_mem_1 -> quotearg_custom_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_custom_mem for Randomized
diGraph quotearg_custom_mem_Randomized{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem,quotearg_custom_mem_3851]"]
	quotearg_custom_mem_1  [label="[quotearg_custom_mem_3852,quotearg_custom_mem_3852]"]
	quotearg_custom_mem_2  [label="[quotearg_custom_mem_3853,quotearg_custom_mem_3857]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quotearg_custom_mem_1 -> quotearg_custom_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_custom_mem"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_custom_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom_mem"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_custom_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_custom_mem -> quotearg_custom_mem_2751 and quotearg_custom_mem -> quotearg_custom_mem_3851

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RCX
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R8 := Reg: RCX
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI),(R8,E_reg RCX)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8))])
64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem -> quotearg_custom_mem_2751 and quotearg_custom_mem -> quotearg_custom_mem_3851 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2752 -> quotearg_custom_mem_2752 and quotearg_custom_mem_3852 -> quotearg_custom_mem_3852

same_behavior checking these two SStates:

SA || RAX := quotearg_n_custom_mem@()

SB || RAX := quotearg_n_custom_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_custom_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_custom_mem" "") []
Value B:
E_app (F2 "quotearg_n_custom_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2752 -> quotearg_custom_mem_2752 and quotearg_custom_mem_3852 -> quotearg_custom_mem_3852 have been verified to do the same.

same_behavior for the nodes: quotearg_custom_mem_2753 -> quotearg_custom_mem_2755 and quotearg_custom_mem_3853 -> quotearg_custom_mem_3857

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem_2753 -> quotearg_custom_mem_2755 and quotearg_custom_mem_3853 -> quotearg_custom_mem_3857 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (14/60): "quotearg_n_custom_mem"
--------
.dot code for CFG of text section quotearg_n_custom_mem for Vanilla
diGraph quotearg_n_custom_mem_Vanilla{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_2696]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_2697,quotearg_n_custom_mem_2697]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_2698,quotearg_n_custom_mem_2700]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_2701,quotearg_n_custom_mem_2701]"]
	quotearg_n_custom_mem_4  [label="[quotearg_n_custom_mem_2702,quotearg_n_custom_mem_2705]"]
	quotearg_n_custom_mem_5  [label="[quotearg_n_custom_mem_2706,quotearg_n_custom_mem_2706]"]
	quotearg_n_custom_mem_6  [label="[quotearg_n_custom_mem_2707,quotearg_n_custom_mem_2709]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;
	quotearg_n_custom_mem_2 -> quotearg_n_custom_mem_3;
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4;
	quotearg_n_custom_mem_4 -> quotearg_n_custom_mem_5;
	quotearg_n_custom_mem_5 -> quotearg_n_custom_mem_6;

}
--------
--------
.dot code for CFG of text section quotearg_n_custom_mem for Randomized
diGraph quotearg_n_custom_mem_Randomized{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_3772]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_3773,quotearg_n_custom_mem_3773]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_3774,quotearg_n_custom_mem_3778]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_3779,quotearg_n_custom_mem_3779]"]
	quotearg_n_custom_mem_4  [label="[quotearg_n_custom_mem_3780,quotearg_n_custom_mem_3785]"]
	quotearg_n_custom_mem_5  [label="[quotearg_n_custom_mem_3786,quotearg_n_custom_mem_3786]"]
	quotearg_n_custom_mem_6  [label="[quotearg_n_custom_mem_3787,quotearg_n_custom_mem_3791]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;
	quotearg_n_custom_mem_2 -> quotearg_n_custom_mem_3;
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4;
	quotearg_n_custom_mem_4 -> quotearg_n_custom_mem_5;
	quotearg_n_custom_mem_5 -> quotearg_n_custom_mem_6;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 104), RCX := (Var: RSP0 - Value: 104), RDX := Value: 56, RDI := (Var: RSP0 - Value: 104), RSI := Dereference: [Var: default_quoting_options,8], R11 := Value: 56, R10 := Value: 56, R9 := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 112),8] := (Var: RSP0 - Value: 104)
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 1:
RAX := memcpy@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 112),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := set_custom_quoting@()
node 4:
RCX := (Var: RSP0 - Value: 104), RDX := Dereference: [(Var: RSP0 - Value: 48),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 40),8]
node 5:
RAX := quotearg_n_options@()
node 6:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := (Var: RSP0 - Value: 104), RCX := (Var: RSP0 - Value: 104), RDX := Value: 56, RDI := (Var: RSP0 - Value: 104), RSI := Dereference: [Var: default_quoting_options,8], R11 := Value: 56, R10 := Value: 56, R9 := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 112),8] := (Var: RSP0 - Value: 104)
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 1:
RAX := memcpy@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 112),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := set_custom_quoting@()
node 4:
RCX := (Var: RSP0 - Value: 104), RDX := Dereference: [(Var: RSP0 - Value: 48),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 40),8]
node 5:
RAX := quotearg_n_options@()
node 6:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_custom_mem -> quotearg_n_custom_mem_2696 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3772

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 104), RCX := (Var: RSP0 - Value: 104), RDX := Value: 56, RDI := (Var: RSP0 - Value: 104), RSI := Dereference: [Var: default_quoting_options,8], R11 := Value: 56, R10 := Value: 56, R9 := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 112),8] := (Var: RSP0 - Value: 104)
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := (Var: RSP0 - Value: 104), RCX := (Var: RSP0 - Value: 104), RDX := Value: 56, RDI := (Var: RSP0 - Value: 104), RSI := Dereference: [Var: default_quoting_options,8], R11 := Value: 56, R10 := Value: 56, R9 := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 112),8] := (Var: RSP0 - Value: 104)
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R11,E_val 56 32),(R10,E_val 56 32),(R9,E_deref (E_var "default_quoting_options" 64) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem -> quotearg_n_custom_mem_2696 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3772 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2697 -> quotearg_n_custom_mem_2697 and quotearg_n_custom_mem_3773 -> quotearg_n_custom_mem_3773

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2697 -> quotearg_n_custom_mem_2697 and quotearg_n_custom_mem_3773 -> quotearg_n_custom_mem_3773 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2698 -> quotearg_n_custom_mem_2700 and quotearg_n_custom_mem_3774 -> quotearg_n_custom_mem_3778

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 112),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 112),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2698 -> quotearg_n_custom_mem_2700 and quotearg_n_custom_mem_3774 -> quotearg_n_custom_mem_3778 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2701 -> quotearg_n_custom_mem_2701 and quotearg_n_custom_mem_3779 -> quotearg_n_custom_mem_3779

same_behavior checking these two SStates:

SA || RAX := set_custom_quoting@()

SB || RAX := set_custom_quoting@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "set_custom_quoting" "") [])]
Resulting values:
Value A:
E_app (F2 "set_custom_quoting" "") []
Value B:
E_app (F2 "set_custom_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2701 -> quotearg_n_custom_mem_2701 and quotearg_n_custom_mem_3779 -> quotearg_n_custom_mem_3779 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2702 -> quotearg_n_custom_mem_2705 and quotearg_n_custom_mem_3780 -> quotearg_n_custom_mem_3785

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 104), RDX := Dereference: [(Var: RSP0 - Value: 48),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 40),8]

SB || RCX := (Var: RSP0 - Value: 104), RDX := Dereference: [(Var: RSP0 - Value: 48),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 40),8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2702 -> quotearg_n_custom_mem_2705 and quotearg_n_custom_mem_3780 -> quotearg_n_custom_mem_3785 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2706 -> quotearg_n_custom_mem_2706 and quotearg_n_custom_mem_3786 -> quotearg_n_custom_mem_3786

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2706 -> quotearg_n_custom_mem_2706 and quotearg_n_custom_mem_3786 -> quotearg_n_custom_mem_3786 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2707 -> quotearg_n_custom_mem_2709 and quotearg_n_custom_mem_3787 -> quotearg_n_custom_mem_3791

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2707 -> quotearg_n_custom_mem_2709 and quotearg_n_custom_mem_3787 -> quotearg_n_custom_mem_3791 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)

Succesful check!
Considering text section (15/60): "quotearg_n_style_colon"
--------
.dot code for CFG of text section quotearg_n_style_colon for Vanilla
diGraph quotearg_n_style_colon_Vanilla{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon,quotearg_n_style_colon_2619]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_2620,quotearg_n_style_colon_262(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 168) && RBP == (Var: RSP0 - Value: 8))])
0]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_2621,quotearg_n_style_colon_2635]"]
	quotearg_n_style_colon_3  [label="[quotearg_n_style_colon_2636,quotearg_n_style_colon_2636]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon_2637,quotearg_n_style_colon_2639]"]
	quotearg_n_style_colon_5  [label="[quotearg_n_style_colon_2640,quotearg_n_style_colon_2640]"]
	quotearg_n_style_colon_6  [label="[quotearg_n_style_colon_2641,quotearg_n_style_colon_2645]"]
	quotearg_n_style_colon_7  [label="[quotearg_n_style_colon_2646,quotearg_n_style_colon_2646]"]
	quotearg_n_style_colon_8  [label="[quotearg_n_style_colon_2647,quotearg_n_style_colon_2649]"]

	quotearg_n_style_colon_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;
	quotearg_n_style_colon_2 -> quotearg_n_style_colon_3;
	quotearg_n_style_colon_3 -> quotearg_n_style_colon_4;
	quotearg_n_style_colon_4 -> quotearg_n_style_colon_5;
	quotearg_n_style_colon_5 -> quotearg_n_style_colon_6;
	quotearg_n_style_colon_6 -> quotearg_n_style_colon_7;
	quotearg_n_style_colon_7 -> quotearg_n_style_colon_8;

}
--------
--------
.dot code for CFG of text section quotearg_n_style_colon for Randomized
diGraph quotearg_n_style_colon_Randomized{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon,quotearg_n_style_colon_3662]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_3663,quotearg_n_style_colon_3663]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_3664,quotearg_n_style_colon_3687]"]
	quotearg_n_style_colon_3  [label="[quotearg_n_style_colon_3688,quotearg_n_style_colon_3688]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon_3689,quotearg_n_style_colon_3692]"]
	quotearg_n_style_colon_5  [label="[quotearg_n_style_colon_3693,quotearg_n_style_colon_3693]"]
	quotearg_n_style_colon_6  [label="[quotearg_n_style_colon_3694,quotearg_n_style_colon_3702]"]
	quotearg_n_style_colon_7  [label="[quotearg_n_style_colon_3703,quotearg_n_style_colon_3703]"]
	quotearg_n_style_colon_8  [label="[quotearg_n_style_colon_3704,quotearg_n_style_colon_3709]"]

	quotearg_n_style_colon_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;
	quotearg_n_style_colon_2 -> quotearg_n_style_colon_3;
	quotearg_n_style_colon_3 -> quotearg_n_style_colon_4;
	quotearg_n_style_colon_4 -> quotearg_n_style_colon_5;
	quotearg_n_style_colon_5 -> quotearg_n_style_colon_6;
	quotearg_n_style_colon_6 -> quotearg_n_style_colon_7;
	quotearg_n_style_colon_7 -> quotearg_n_style_colon_8;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_colon"
node 0:
RAX := (Var: RSP0 - Value: 136), RDI := (Var: RSP0 - Value: 136), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 168), CF := (Var: RSP0 - Value: 168), SF := (Var: RSP0 - Value: 168), OF := (Var: RSP0 - Value: 168), PF := (Var: RSP0 - Value: 168)
node 1:
RAX := quoting_options_from_style@()
node 2:
RAX := (Var: RSP0 - Value: 80), RCX := Value: 56, RDX := Value: 56, RDI := (Var: RSP0 - Value: 80), RSI := (Var: RSP0 - Value: 136), R9 := (Var: RSP0 - Value: 80), R8 := Value: 56
[(Var: RSP0 - Value: 144),8] := Value: 56, [(Var: RSP0 - Value: 148),4] := Value: 58, [(Var: RSP0 - Value: 152),4] := Value: 1, [(Var: RSP0 - Value: 160),8] := (Var: RSP0 - Value: 80)
node 3:
RAX := memcpy@()
node 4:
RDX := Dereference: [(Var: RSP0 - Value: 152),4], RDI := Dereference: [(Var: RSP0 - Value: 160),8], RSI := Dereference: [(Var: RSP0 - Value: 148),4]
node 5:
RAX := set_char_quoting@()
node 6:
RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
[(Var: RSP0 - Value: 164),4] := TakeBits: <31,0>(Reg: RAX)
node 7:
RAX := quotearg_n_options@()
node 8:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_colon"
node 0:
RAX := (Var: RSP0 - Value: 136), RDI := (Var: RSP0 - Value: 136), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 168), CF := (Var: RSP0 - Value: 168), SF := (Var: RSP0 - Value: 168), OF := (Var: RSP0 - Value: 168), PF := (Var: RSP0 - Value: 168)
node 1:
RAX := quoting_options_from_style@()
node 2:
RAX := (Var: RSP0 - Value: 80), RCX := Value: 56, RDX := Value: 56, RDI := (Var: RSP0 - Value: 80), RSI := (Var: RSP0 - Value: 136), R9 := (Var: RSP0 - Value: 80), R8 := Value: 56
[(Var: RSP0 - Value: 144),8] := Value: 56, [(Var: RSP0 - Value: 148),4] := Value: 58, [(Var: RSP0 - Value: 152),4] := Value: 1, [(Var: RSP0 - Value: 160),8] := (Var: RSP0 - Value: 80)
node 3:
RAX := memcpy@()
node 4:
RDX := Dereference: [(Var: RSP0 - Value: 152),4], RDI := Dereference: [(Var: RSP0 - Value: 160),8], RSI := Dereference: [(Var: RSP0 - Value: 148),4]
node 5:
RAX := set_char_quoting@()
node 6:
RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
[(Var: RSP0 - Value: 164),4] := TakeBits: <31,0>(Reg: RAX)
node 7:
RAX := quotearg_n_options@()
node 8:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_style_colon -> quotearg_n_style_colon_2619 and quotearg_n_style_colon -> quotearg_n_style_colon_3662

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 136), RDI := (Var: RSP0 - Value: 136), RSI := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
SA || ZF := (Var: RSP0 - Value: 168), CF := (Var: RSP0 - Value: 168), SF := (Var: RSP0 - Value: 168), OF := (Var: RSP0 - Value: 168), PF := (Var: RSP0 - Value: 168)

SB || RAX := (Var: RSP0 - Value: 136), RDI := (Var: RSP0 - Value: 136), RSI := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
SB || ZF := (Var: RSP0 - Value: 168), CF := (Var: RSP0 - Value: 168), SF := (Var: RSP0 - Value: 168), OF := (Var: RSP0 - Value: 168), PF := (Var: RSP0 - Value: 168)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon -> quotearg_n_style_colon_2619 and quotearg_n_style_colon -> quotearg_n_style_colon_3662 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2620 -> quotearg_n_style_colon_2620 and quotearg_n_style_colon_3663 -> quotearg_n_style_colon_3663

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quoting_options_from_style" "") [])]
Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2620 -> quotearg_n_style_colon_2620 and quotearg_n_style_colon_3663 -> quotearg_n_style_colon_3663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2621 -> quotearg_n_style_colon_2635 and quotearg_n_style_colon_3664 -> quotearg_n_style_colon_3687

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 80), RCX := Value: 56, RDX := Value: 56, RDI := (Var: RSP0 - Value: 80), RSI := (Var: RSP0 - Value: 136), R9 := (Var: RSP0 - Value: 80), R8 := Value: 56
SA || [(Var: RSP0 - Value: 144),8] := Value: 56, [(Var: RSP0 - Value: 148),4] := Value: 58, [(Var: RSP0 - Value: 152),4] := Value: 1, [(Var: RSP0 - Value: 160),8] := (Var: RSP0 - Value: 80)

SB || RAX := (Var: RSP0 - Value: 80), RCX := Value: 56, RDX := Value: 56, RDI := (Var: RSP0 - Value: 80), RSI := (Var: RSP0 - Value: 136), R9 := (Var: RSP0 - Value: 80), R8 := Value: 56
SB || [(Var: RSP0 - Value: 144),8] := Value: 56, [(Var: RSP0 - Value: 148),4] := Value: 58, [(Var: RSP0 - Value: 152),4] := Value: 1, [(Var: RSP0 - Value: 160),8] := (Var: RSP0 - Value: 80)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RCX,E_val 56 32),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]),(R9,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(R8,E_val 56 32)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
(v1 := v2):
E_val 56 32
E_val 56 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]
(v1 := v2):
E_val 58 32
E_val 58 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2621 -> quotearg_n_style_colon_2635 and quotearg_n_style_colon_3664 -> quotearg_n_style_colon_3687 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2636 -> quotearg_n_style_colon_2636 and quotearg_n_style_colon_3688 -> quotearg_n_style_colon_3688

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2636 -> quotearg_n_style_colon_2636 and quotearg_n_style_colon_3688 -> quotearg_n_style_colon_3688 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2637 -> quotearg_n_style_colon_2639 and quotearg_n_style_colon_3689 -> quotearg_n_style_colon_3692

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 152),4], RDI := Dereference: [(Var: RSP0 - Value: 160),8], RSI := Dereference: [(Var: RSP0 - Value: 148),4]

SB || RDX := Dereference: [(Var: RSP0 - Value: 152),4], RDI := Dereference: [(Var: RSP0 - Value: 160),8], RSI := Dereference: [(Var: RSP0 - Value: 148),4]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_va(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
l 152 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 160 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 148 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2637 -> quotearg_n_style_colon_2639 and quotearg_n_style_colon_3689 -> quotearg_n_style_colon_3692 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2640 -> quotearg_n_style_colon_2640 and quotearg_n_style_colon_3693 -> quotearg_n_style_colon_3693

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "set_char_quoting" "") [])]
Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2640 -> quotearg_n_style_colon_2640 and quotearg_n_style_colon_3693 -> quotearg_n_style_colon_3693 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2641 -> quotearg_n_style_colon_2645 and quotearg_n_style_colon_3694 -> quotearg_n_style_colon_3702

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
SA || [(Var: RSP0 - Value: 164),4] := TakeBits: <31,0>(Reg: RAX)

SB || RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
SB || [(Var: RSP0 - Value: 164),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 164 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 164 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2641 -> quotearg_n_style_colon_2645 and quotearg_n_style_colon_3694 -> quotearg_n_style_colon_3702 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2646 -> quotearg_n_style_colon_2646 and quotearg_n_style_colon_3703 -> quotearg_n_style_colon_3703

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2646 -> quotearg_n_style_colon_2646 and quotearg_n_style_colon_3703 -> quotearg_n_style_colon_3703 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2647 -> quotearg_n_style_colon_2649 and quotearg_n_style_colon_3704 -> quotearg_n_style_colon_3709

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2647 -> quotearg_n_style_colon_2649 and quotearg_n_style_colon_3704 -> quotearg_n_style_colon_3709 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 164) <--> (Var: RSP0 - Value: 164)
(Var: RSP0 - Value: 160) <--> (Var: RSP0 - Value: 160)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 148) <--> (Var: RSP0 - Value: 148)
(Var: RSP0 - Value: 144) <--> (Var: RSP0 - Value: 144)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 136)

Succesful check!
Considering text section (16/60): "quotearg_colon_mem"
--------
.dot code for CFG of text section quotearg_colon_mem for Vanilla
diGraph quotearg_colon_mem_Vanilla{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_colon_mem_2599]"]
	quotearg_colon_mem_1  [label="[quotearg_colon_mem_2600,quotearg_colon_mem_2600]"]
	quotearg_colon_mem_2  [label="[quotearg_colon_mem_2601,quotearg_colon_mem_2603]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_colon_mem for Randomized
diGraph quotearg_colon_mem_Randomized{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_colon_mem_3637]"]
	quotearg_colon_mem_1  [label="[quotearg_colon_mem_3638,quotearg_colon_mem_3638]"]
	quotearg_colon_mem_2  [label="[quotearg_colon_mem_3639,quotearg_colon_mem_3643]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon_mem"
node 0:
RDX := Value: 58
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Va(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
lue: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon_mem"
node 0:
RDX := Value: 58
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_colon_mem -> quotearg_colon_mem_2599 and quotearg_colon_mem -> quotearg_colon_mem_3637

same_behavior checking these two SStates:

SA || RDX := Value: 58
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RDX := Value: 58
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_val 58 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_val 58 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_val 58 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem -> quotearg_colon_mem_2599 and quotearg_colon_mem -> quotearg_colon_mem_3637 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_mem_2600 -> quotearg_colon_mem_2600 and quotearg_colon_mem_3638 -> quotearg_colon_mem_3638

same_behavior checking these two SStates:

SA || RAX := quotearg_char_mem@()

SB || RAX := quotearg_char_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_char_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_char_mem" "") []
Value B:
E_app (F2 "quotearg_char_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem_2600 -> quotearg_colon_mem_2600 and quotearg_colon_mem_3638 -> quotearg_colon_mem_3638 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_mem_2601 -> quotearg_colon_mem_2603 and quotearg_colon_mem_3639 -> quotearg_colon_mem_3643

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem_2601 -> quotearg_colon_mem_2603 and quotearg_colon_mem_3639 -> quotearg_colon_mem_3643 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (17/60): "quotearg_colon"
--------
.dot code for CFG of text section quotearg_colon for Vanilla
diGraph quotearg_colon_Vanilla{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_colon_2580]"]
	quotearg_colon_1  [label="[quotearg_colon_2581,quotearg_colon_2581]"]
	quotearg_colon_2  [label="[quotearg_colon_2582,quotearg_colon_2584]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;

}
--------
--------
.dot code for CFG of text section quotearg_colon for Randomized
diGraph quotearg_colon_Randomized{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_colon_3613]"]
	quotearg_colon_1  [label="[quotearg_colon_3614,quotearg_colon_3614]"]
	quotearg_colon_2  [label="[quotearg_colon_3615,quotearg_colon_3619]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon"
node 0:
RSI := Value: 58
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon"
node 0:
RSI := Value: 58
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_colon -> quotearg_colon_2580 and quotearg_colon -> quotearg_colon_3613

same_behavior checking these two SStates:

SA || RSI := Value: 58
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RSI := Value: 58
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_val 58 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_val 58 32)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon -> quotearg_colon_2580 and quotearg_colon -> quotearg_colon_3613 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_2581 -> quotearg_colon_2581 and quotearg_colon_3614 -> quotearg_colon_3614

same_behavior checking these two SStates:

SA || RAX := quotearg_char@()

SB || RAX := quotearg_char@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_char" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_char" "") []
Value B:
E_app (F2 "quotearg_char" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_2581 -> quotearg_colon_2581 and quotearg_colon_3614 -> quotearg_colon_3614 have been verified to do the same.

same_behavior for the nodes: quotearg_colon_2582 -> quotearg_colon_2584 and quotearg_colon_3615 -> quotearg_colon_3619

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_2582 -> quotearg_colon_2584 and quotearg_colon_3615 -> quotearg_colon_3619 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (18/60): "quotearg_char"
--------
.dot code for CFG of text section quotearg_char for Vanilla
diGraph quotearg_char_Vanilla{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_2563]"]
	quotearg_char_1  [label="[quotearg_char_2564,quotearg_char_2564]"]
	quotearg_char_2  [label="[quotearg_char_2565,quotearg_char_2567]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;

}
--------
--------
.dot code for CFG of text section quotearg_char for Randomized
diGraph quotearg_char_Randomized{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_3591]"]
	quotearg_char_1  [label="[quotearg_char_3592,quotearg_char_3592]"]
	quotearg_char_2  [label="[quotearg_char_3593,quotearg_char_3596]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI)), RDX := sextend(TakeBits: <7,0>(Reg: RSI),8,32), RSI := Value: 18446744073709551615
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI)
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI)), RDX := sextend(TakeBits: <7,0>(Reg: RSI),8,32), RSI := Value: 18446744073709551615
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI)
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := quotearg_char_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_char -> quotearg_char_2563 and quotearg_char -> quotearg_char_3591

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI)), RDX := sextend(TakeBits: <7,0>(Reg: RSI),8,32), RSI := Value: 18446744073709551615
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI)
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI)), RDX := sextend(TakeBits: <7,0>(Reg: RSI),8,32), RSI := Value: 18446744073709551615
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI)
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]),(RDX,E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]),(RDI,E_reg RDI),(RSI,E_val 18446744073709551615 64)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]),(RDX,E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]),(RDI,E_reg RDI),(RSI,E_val 18446744073709551615 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]),(RDX,E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]),(RDI,E_reg RDI),(RSI,E_val 18446744073709551615 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]),(RDX,E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]),(RDI,E_reg RDI),(RSI,E_val 18446744073709551615 64)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg RSI]]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RSI]
E_app (TakeBits 7 0) [E_reg RSI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_char -> quotearg_char_2563 and quotearg_char -> quotearg_char_3591 have been verified to do the same.

same_behavior for the nodes: quotearg_char_2564 -> quotearg_char_2564 and quotearg_char_3592 -> quotearg_char_3592

same_behavior checking these two SStates:

SA || RAX := quotearg_char_mem@()

SB || RAX := quotearg_char_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_char_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_char_mem" "") []
Value B:
E_app (F2 "quotearg_char_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_2564 -> quotearg_char_2564 and quotearg_char_3592 -> quotearg_char_3592 have been verified to do the same.

same_behavior for the nodes: quotearg_char_2565 -> quotearg_char_2567 and quotearg_char_3593 -> quotearg_char_3596

same_behavior checking these two SStates:

(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8))])
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_2565 -> quotearg_char_2567 and quotearg_char_3593 -> quotearg_char_3596 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 17) <--> (Var: RSP0 - Value: 17)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (19/60): "quotearg_char_mem"
--------
.dot code for CFG of text section quotearg_char_mem for Vanilla
diGraph quotearg_char_mem_Vanilla{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_2533]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_2534,quotearg_char_mem_2534]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_2535,quotearg_char_mem_2537]"]
	quotearg_char_mem_3  [label="[quotearg_char_mem_2538,quotearg_char_mem_2538]"]
	quotearg_char_mem_4  [label="[quotearg_char_mem_2539,quotearg_char_mem_2543]"]
	quotearg_char_mem_5  [label="[quotearg_char_mem_2544,quotearg_char_mem_2544]"]
	quotearg_char_mem_6  [label="[quotearg_char_mem_2545,quotearg_char_mem_2547]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;
	quotearg_char_mem_2 -> quotearg_char_mem_3;
	quotearg_char_mem_3 -> quotearg_char_mem_4;
	quotearg_char_mem_4 -> quotearg_char_mem_5;
	quotearg_char_mem_5 -> quotearg_char_mem_6;

}
--------
--------
.dot code for CFG of text section quotearg_char_mem for Randomized
diGraph quotearg_char_mem_Randomized{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_3548]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_3549,quotearg_char_mem_3549]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_3550,quotearg_char_mem_3555]"]
	quotearg_char_mem_3  [label="[quotearg_char_mem_3556,quotearg_char_mem_3556]"]
	quotearg_char_mem_4  [label="[quotearg_char_mem_3557,quotearg_char_mem_3566]"]
	quotearg_char_mem_5  [label="[quotearg_char_mem_3567,quotearg_char_mem_3567]"]
	quotearg_char_mem_6  [label="[quotearg_char_mem_3568,quotearg_char_mem_3571]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;
	quotearg_char_mem_2 -> quotearg_char_mem_3;
	quotearg_char_mem_3 -> quotearg_char_mem_4;
	quotearg_char_mem_4 -> quotearg_char_mem_5;
	quotearg_char_mem_5 -> quotearg_char_mem_6;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char_mem"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDX)), RCX := (Var: RSP0 - Value: 88), RDX := Value: 56, RDI := (Var: RSP0 - Value: 88), RSI := Dereference: [Var: default_quoting_options,8], R10 := Value: 56, R9 := Value: 56, R8 := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RDX), [(Var: RSP0 - Value: 92),4] := Value: 1, [(Var: RSP0 - Value: 104),8] := (Var: RSP0 - Value: 88)
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 1:
RAX := memcpy@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 92),4], RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := sextend(Dereference: [(Var: RSP0 - Value: 25),1],8,32)
node 3:
RAX := set_char_quoting@()
node 4:
RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 108),4] := TakeBits: <31,0>(Reg: RAX)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_n_options@()
node 6:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char_mem"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDX)), RCX := (Var: RSP0 - Value: 88), RDX := Value: 56, RDI := (Var: RSP0 - Value: 88), RSI := Dereference: [Var: default_quoting_options,8], R10 := Value: 56, R9 := Value: 56, R8 := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RDX), [(Var: RSP0 - Value: 92),4] := Value: 1, [(Var: RSP0 - Value: 104),8] := (Var: RSP0 - Value: 88)
ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)
node 1:
RAX := memcpy@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 92),4], RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := sextend(Dereference: [(Var: RSP0 - Value: 25),1],8,32)
node 3:
RAX := set_char_quoting@()
node 4:
RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 108),4] := TakeBits: <31,0>(Reg: RAX)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_n_options@()
node 6:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_char_mem -> quotearg_char_mem_2533 and quotearg_char_mem -> quotearg_char_mem_3548

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDX)), RCX := (Var: RSP0 - Value: 88), RDX := Value: 56, RDI := (Var: RSP0 - Value: 88), RSI := Dereference: [Var: default_quoting_options,8], R10 := Value: 56, R9 := Value: 56, R8 := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RDX), [(Var: RSP0 - Value: 92),4] := Value: 1, [(Var: RSP0 - Value: 104),8] := (Var: RSP0 - Value: 88)
SA || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RDX)), RCX := (Var: RSP0 - Value: 88), RDX := Value: 56, RDI := (Var: RSP0 - Value: 88), RSI := Dereference: [Var: default_quoting_options,8], R10 := Value: 56, R9 := Value: 56, R8 := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RDX), [(Var: RSP0 - Value: 92),4] := Value: 1, [(Var: RSP0 - Value: 104),8] := (Var: RSP0 - Value: 88)
SB || ZF := (Var: RSP0 - Value: 120), CF := (Var: RSP0 - Value: 120), SF := (Var: RSP0 - Value: 120), OF := (Var: RSP0 - Value: 120), PF := (Var: RSP0 - Value: 120)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_val 56 32),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_deref (E_var "default_quoting_options" 64) 8),(R10,E_val 56 32),(R9,E_val 56 32),(R8,E_deref (E_var "default_quoting_options" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RDX]]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RDX]
E_app (TakeBits 7 0) [E_reg RDX]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem -> quotearg_char_mem_2533 and quotearg_char_mem -> quotearg_char_mem_3548 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2534 -> quotearg_char_mem_2534 and quotearg_char_mem_3549 -> quotearg_char_mem_3549

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2534 -> quotearg_char_mem_2534 and quotearg_char_mem_3549 -> quotearg_char_mem_3549 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2535 -> quotearg_char_mem_2537 and quotearg_char_mem_3550 -> quotearg_char_mem_3555

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 92),4], RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := sextend(Dereference: [(Var: RSP0 - Value: 25),1],8,32)

SB || RDX := Dereference: [(Var: RSP0 - Value: 92),4], RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := sextend(Dereference: [(Var: RSP0 - Value: 25),1],8,32)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (SExtend 8 32) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1])]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 92 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2535 -> quotearg_char_mem_2537 and quotearg_char_mem_3550 -> quotearg_char_mem_3555 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2538 -> quotearg_char_mem_2538 and quotearg_char_mem_3556 -> quotearg_char_mem_3556

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_cha(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
r_quoting@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "set_char_quoting" "") [])]
Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2538 -> quotearg_char_mem_2538 and quotearg_char_mem_3556 -> quotearg_char_mem_3556 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2539 -> quotearg_char_mem_2543 and quotearg_char_mem_3557 -> quotearg_char_mem_3566

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 108),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 108),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 108 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2539 -> quotearg_char_mem_2543 and quotearg_char_mem_3557 -> quotearg_char_mem_3566 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2544 -> quotearg_char_mem_2544 and quotearg_char_mem_3567 -> quotearg_char_mem_3567

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2544 -> quotearg_char_mem_2544 and quotearg_char_mem_3567 -> quotearg_char_mem_3567 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_2545 -> quotearg_char_mem_2547 and quotearg_char_mem_3568 -> quotearg_char_mem_3571

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_2545 -> quotearg_char_mem_2547 and quotearg_char_mem_3568 -> quotearg_char_mem_3571 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 108) <--> (Var: RSP0 - Value: 108)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 92) <--> (Var: RSP0 - Value: 92)
(Var: RSP0 - Value: 25) <--> (Var: RSP0 - Value: 25)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)

Succesful check!
Considering text section (20/60): "quotearg_style_mem"
--------
.dot code for CFG of text section quotearg_style_mem for Vanilla
diGraph quotearg_style_mem_Vanilla{
	quotearg_style_mem_0  [label="[quotearg_style_mem,quotearg_style_mem_2504]"]
	quotearg_style_mem_1  [label="[quotearg_style_mem_2505,quotearg_style_mem_2505]"]
	quotearg_style_mem_2  [label="[quotearg_style_mem_2506,quotearg_style_mem_2508]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_style_mem for Randomized
diGraph quotearg_style_mem_Randomized{
	quotearg_style_mem_0  [label="[quotearg_style_mem,quotearg_style_mem_3507]"]
	quotearg_style_mem_1  [label="[quotearg_style_mem_3508,quotearg_style_mem_3508]"]
	quotearg_style_mem_2  [label="[quotearg_style_mem_3509,quotearg_style_mem_3512]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style_mem"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_style_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style_mem"
node 0:
RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_style_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_style_mem -> quotearg_style_mem_2504 and quotearg_style_mem -> quotearg_style_mem_3507

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RDX, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_reg RDX),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem -> quotearg_style_mem_2504 and quotearg_style_mem -> quotearg_style_mem_3507 have been verified to do the same.

same_behavior for the nodes: quotearg_style_mem_2505 -> quotearg_style_mem_2505 and quotearg_style_mem_3508 -> quotearg_style_mem_3508

same_behavior checking these two SStates:

SA || RAX := quotearg_n_style_mem@()

SB || RAX := quotearg_n_style_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_style_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_style_mem" "") []
Value B:
E_app (F2 "quotearg_n_style_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem_2505 -> quotearg_style_mem_2505 and quotearg_style_mem_3508 -> quotearg_style_mem_3508 have been verified to do the same.

same_behavior for the nodes: quotearg_style_mem_2506 -> quotearg_style_mem_2508 and quotearg_style_mem_3509 -> quotearg_style_mem_3512

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem_2506 -> quotearg_style_mem_2508 and quotearg_style_mem_3509 -> quotearg_style_mem_3512 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (21/60): "quotearg_style"
--------
.dot code for CFG of text section quotearg_style for Vanilla
diGraph quotearg_style_Vanilla{
	quotearg_style_0  [label="[quotearg_style,quotearg_style_2482]"]
	quotearg_style_1  [label="[quotearg_style_2483,quotearg_style_2483]"]
	quotearg_style_2  [label="[quotearg_style_2484,quotearg_style_2486]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;

}
--------
--------
.dot code for CFG of text section quotearg_style for Randomized
diGraph quotearg_style_Randomized{
	quotearg_style_0  [label="[quotearg_style,quotearg_style_3483]"]
	quotearg_style_1  [label="[quotearg_style_3484,quotearg_style_3484]"]
	quotearg_style_2  [label="[quotearg_style_3485,quotearg_style_3488]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_style@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_style@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_style -> quotearg_style_2482 and quotearg_style -> quotearg_style_3483

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_app (TakeBits 31 0) [E_reg RDI])]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_a(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8))])
pp (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style -> quotearg_style_2482 and quotearg_style -> quotearg_style_3483 have been verified to do the same.

same_behavior for the nodes: quotearg_style_2483 -> quotearg_style_2483 and quotearg_style_3484 -> quotearg_style_3484

same_behavior checking these two SStates:

SA || RAX := quotearg_n_style@()

SB || RAX := quotearg_n_style@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_style" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_style" "") []
Value B:
E_app (F2 "quotearg_n_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_2483 -> quotearg_style_2483 and quotearg_style_3484 -> quotearg_style_3484 have been verified to do the same.

same_behavior for the nodes: quotearg_style_2484 -> quotearg_style_2486 and quotearg_style_3485 -> quotearg_style_3488

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_style_2484 -> quotearg_style_2486 and quotearg_style_3485 -> quotearg_style_3488 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (22/60): "quotearg_n_style_mem"
--------
.dot code for CFG of text section quotearg_n_style_mem for Vanilla
diGraph quotearg_n_style_mem_Vanilla{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem,quotearg_n_style_mem_2457]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_2458,quotearg_n_style_mem_2458]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_2459,quotearg_n_style_mem_2462]"]
	quotearg_n_style_mem_3  [label="[quotearg_n_style_mem_2463,quotearg_n_style_mem_2463]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem_2464,quotearg_n_style_mem_2466]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;
	quotearg_n_style_mem_2 -> quotearg_n_style_mem_3;
	quotearg_n_style_mem_3 -> quotearg_n_style_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_style_mem for Randomized
diGraph quotearg_n_style_mem_Randomized{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem,quotearg_n_style_mem_3449]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_3450,quotearg_n_style_mem_3450]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_3451,quotearg_n_style_mem_3456]"]
	quotearg_n_style_mem_3  [label="[quotearg_n_style_mem_3457,quotearg_n_style_mem_3457]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem_3458,quotearg_n_style_mem_3463]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;
	quotearg_n_style_mem_2 -> quotearg_n_style_mem_3;
	quotearg_n_style_mem_3 -> quotearg_n_style_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_mem"
node 0:
RAX := (Var: RSP0 - Value: 88), RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX, [(Var: RSP0 - Value: 32),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := quotearg_n_options@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_mem"
node 0:
RAX := (Var: RSP0 - Value: 88), RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX, [(Var: RSP0 - Value: 32),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := quotearg_n_options@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_style_mem -> quotearg_n_style_mem_2457 and quotearg_n_style_mem -> quotearg_n_style_mem_3449

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 88), RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX, [(Var: RSP0 - Value: 32),8] := Reg: RCX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := (Var: RSP0 - Value: 88), RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX, [(Var: RSP0 - Value: 32),8] := Reg: RCX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8))])
2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem -> quotearg_n_style_mem_2457 and quotearg_n_style_mem -> quotearg_n_style_mem_3449 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2458 -> quotearg_n_style_mem_2458 and quotearg_n_style_mem_3450 -> quotearg_n_style_mem_3450

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quoting_options_from_style" "") [])]
Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2458 -> quotearg_n_style_mem_2458 and quotearg_n_style_mem_3450 -> quotearg_n_style_mem_3450 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2459 -> quotearg_n_style_mem_2462 and quotearg_n_style_mem_3451 -> quotearg_n_style_mem_3456

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RCX := (Var: RSP0 - Value: 88), RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2459 -> quotearg_n_style_mem_2462 and quotearg_n_style_mem_3451 -> quotearg_n_style_mem_3456 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2463 -> quotearg_n_style_mem_2463 and quotearg_n_style_mem_3457 -> quotearg_n_style_mem_3457

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2463 -> quotearg_n_style_mem_2463 and quotearg_n_style_mem_3457 -> quotearg_n_style_mem_3457 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_2464 -> quotearg_n_style_mem_2466 and quotearg_n_style_mem_3458 -> quotearg_n_style_mem_3463

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_2464 -> quotearg_n_style_mem_2466 and quotearg_n_style_mem_3458 -> quotearg_n_style_mem_3463 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)

Succesful check!
Considering text section (23/60): "quotearg_n_style"
--------
.dot code for CFG of text section quotearg_n_style for Vanilla
diGraph quotearg_n_style_Vanilla{
	quotearg_n_style_0  [label="[quotearg_n_style,quotearg_n_style_2394]"]
	quotearg_n_style_1  [label="[quotearg_n_style_2395,quotearg_n_style_2395]"]
	quotearg_n_style_2  [label="[quotearg_n_style_2396,quotearg_n_style_2399]"]
	quotearg_n_style_3  [label="[quotearg_n_style_2400,quotearg_n_style_2400]"]
	quotearg_n_style_4  [label="[quotearg_n_style_2401,quotearg_n_style_2403]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;
	quotearg_n_style_2 -> quotearg_n_style_3;
	quotearg_n_style_3 -> quotearg_n_style_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_style for Randomized
diGraph quotearg_n_style_Randomized{
	quotearg_n_style_0  [label="[quotearg_n_style,quotearg_n_style_3357]"]
	quotearg_n_style_1  [label="[quotearg_n_style_3358,quotearg_n_style_3358]"]
	quotearg_n_style_2  [label="[quotearg_n_style_3359,quotearg_n_style_3362]"]
	quotearg_n_style_3  [label="[quotearg_n_style_3363,quotearg_n_style_3363]"]
	quotearg_n_style_4  [label="[quotearg_n_style_3364,quotearg_n_style_3369]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;
	quotearg_n_style_2 -> quotearg_n_style_3;
	quotearg_n_style_3 -> quotearg_n_style_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style"
node 0:
RAX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (Var: RSP0 - Value: 8))])
] := Reg: RDX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := quotearg_n_options@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style"
node 0:
RAX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := quotearg_n_options@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_style -> quotearg_n_style_2394 and quotearg_n_style -> quotearg_n_style_3357

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),8] := Reg: RDX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDI,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style -> quotearg_n_style_2394 and quotearg_n_style -> quotearg_n_style_3357 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_2395 -> quotearg_n_style_2395 and quotearg_n_style_3358 -> quotearg_n_style_3358

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quoting_options_from_style" "") [])]
Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_2395 -> quotearg_n_style_2395 and quotearg_n_style_3358 -> quotearg_n_style_3358 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_2396 -> quotearg_n_style_2399 and quotearg_n_style_3359 -> quotearg_n_style_3362

same_behavior checking these two SStates:

SA || RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RCX := (Var: RSP0 - Value: 80), RDX := Value: 18446744073709551615, RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]),(RDX,E_val 18446744073709551615 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_2396 -> quotearg_n_style_2399 and quotearg_n_style_3359 -> quotearg_n_style_3362 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_2400 -> quotearg_n_style_2400 and quotearg_n_style_3363 -> quotearg_n_style_3363

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_2400 -> quotearg_n_style_2400 and quotearg_n_style_3363 -> quotearg_n_style_3363 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_2401 -> quotearg_n_style_2403 and quotearg_n_style_3364 -> quotearg_n_style_3369

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_2401 -> quotearg_n_style_2403 and quotearg_n_style_3364 -> quotearg_n_style_3369 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)

Succesful check!
Considering text section (24/60): "quotearg_mem"
--------
.dot code for CFG of text section quotearg_mem for Vanilla
diGraph quotearg_mem_Vanilla{
	quotearg_mem_0  [label="[quotearg_mem,quotearg_mem_2374]"]
	quotearg_mem_1  [label="[quotearg_mem_2375,quotearg_mem_2375]"]
	quotearg_mem_2  [label="[quotearg_mem_2376,quotearg_mem_2378]"]

	quotearg_mem_0 -> quotearg_mem_1;
	quotearg_mem_1 -> quotearg_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_mem for Randomized
diGraph quotearg_mem_Randomized{
	quotearg_mem_0  [label="[quotearg_mem,quotearg_mem_3329]"]
	quotearg_mem_1  [label="[quotearg_mem_3330,quotearg_mem_3330]"]
	quotearg_mem_2  [label="[quotearg_mem_3331,quotearg_mem_3335]"]

	quotearg_mem_0 -> quotearg_mem_1;
	quotearg_mem_1 -> quotearg_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_mem"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_mem"
node 0:
RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := quotearg_n_mem@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_mem -> quotearg_mem_2374 and quotearg_mem -> quotearg_mem_3329

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDX,E_reg RSI),(RDI,E_val 0 32),(RSI,E_reg RDI)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_mem -> quotearg_mem_2374 and quotearg_mem -> quotearg_mem_3329 have been verified to do the same.

same_behavior for the nodes: quotearg_mem_2375 -> quotearg_mem_2375 and quotearg_mem_3330 -> quotearg_mem_3330

same_behavior checking these two SStates:

SA || RAX := quotearg_n_mem@()

SB || RAX := quotearg_n_mem@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_mem" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_mem" "") []
Value B:
E_app (F2 "quotearg_n_mem" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_mem_2375 -> quotearg_mem_2375 and quotearg_mem_3330 -> quotearg_mem_3330 have been verified to do the same.

same_behavior for the nodes: quotearg_mem_2376 -> quotearg_mem_2378 and quotearg_mem_3331 -> quotearg_mem_3335

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_mem_2376 -> quotearg_mem_2378 and quotearg_mem_3331 -> quotearg_mem_3335 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (25/60): "quotearg_n_mem"
--------
.dot code for CFG of text section quotearg_n_mem for Vanilla
diGraph quotearg_n_mem_Vanilla{
	quotearg_n_mem_0  [label="[quotearg_n_mem,quotearg_n_mem_2336]"]
	quotearg_n_mem_1  [label="[quotearg_n_mem_2337,quotearg_n_mem_2337]"]
	quotearg_n_mem_2  [label="[quotearg_n_mem_2338,quotearg_n_mem_2340]"]

	quotearg_n_mem_0 -> quotearg_n_mem_1;
	quotearg_n_mem_1 -> quotearg_n_mem_2;

}
--------
--------
.dot code for CFG of text section quotearg_n_mem for Randomized
diGraph quotearg_n_mem_Randomized{
	quotearg_n_mem_0  [label="[quotearg_n_mem,quotearg_n_mem_3279]"]
	quotearg_n_mem_1  [label="[quotearg_n_mem_3280,quotearg_n_mem_3280]"]
	quotearg_n_mem_2  [label="[quotearg_n_mem_3281,quotearg_n_mem_3283]"]

	quotearg_n_mem_0 -> quotearg_n_mem_1;
	quotearg_n_mem_1 -> quotearg_n_mem_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_mem"
node 0:
RCX := Dereference: [Var: default_quoting_options,8], RDI := TakeBits: <31,0>(Re(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
g: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_mem"
node 0:
RCX := Dereference: [Var: default_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := quotearg_n_options@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: quotearg_n_mem -> quotearg_n_mem_2336 and quotearg_n_mem -> quotearg_n_mem_3279

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: default_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RCX := Dereference: [Var: default_quoting_options,8], RDI := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var "default_quoting_options" 64) 8),(RDX,E_reg RDX),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_mem -> quotearg_n_mem_2336 and quotearg_n_mem -> quotearg_n_mem_3279 have been verified to do the same.

same_behavior for the nodes: quotearg_n_mem_2337 -> quotearg_n_mem_2337 and quotearg_n_mem_3280 -> quotearg_n_mem_3280

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_n_options" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_mem_2337 -> quotearg_n_mem_2337 and quotearg_n_mem_3280 -> quotearg_n_mem_3280 have been verified to do the same.

same_behavior for the nodes: quotearg_n_mem_2338 -> quotearg_n_mem_2340 and quotearg_n_mem_3281 -> quotearg_n_mem_3283

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_mem_2338 -> quotearg_n_mem_2340 and quotearg_n_mem_3281 -> quotearg_n_mem_3283 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (26/60): "quotearg_n_options"
--------
.dot code for CFG of text section quotearg_n_options for Vanilla
diGraph quotearg_n_options_Vanilla{
	quotearg_n_options_0  [label="[quotearg_n_options_2176,quotearg_n_options_2176]"]
	quotearg_n_options_1  [label="[quotearg_n_options_2190,quotearg_n_options_2190]"]
	quotearg_n_options_2  [label="[quotearg_n_options_2194,quotearg_n_options_2197]"]
	quotearg_n_options_3  [label="[quotearg_n_options_2214,quotearg_n_options_2218]"]
	quotearg_n_options_4  [label="[.label_256,quotearg_n_options_2231]"]
	quotearg_n_options_5  [label="[quotearg_n_options_2232,quotearg_n_options_2232]"]
	quotearg_n_options_6  [label="[quotearg_n_options_2233,quotearg_n_options_2235]"]
	quotearg_n_options_7  [label="[.label_250,quotearg_n_options_2200]"]
	quotearg_n_options_8  [label="[.label_252,quotearg_n_options_2208]"]
	quotearg_n_options_9  [label="[quotearg_n_options_2209,quotearg_n_options_2209]"]
	quotearg_n_options_10  [label="[quotearg_n_options_2210,quotearg_n_options_2213]"]
	quotearg_n_options_11  [label="[.label_253,quotearg_n_options_2193]"]
	quotearg_n_options_12  [label="[quotearg_n_options_2181,quotearg_n_options_2189]"]
	quotearg_n_options_13  [label="[quotearg_n_options_2282,quotearg_n_options_2282]"]
	quotearg_n_options_14  [label="[quotearg_n_options_2283,quotearg_n_options_2283]"]
	quotearg_n_options_15  [label="[.label_249,.label_249]"]
	quotearg_n_options_16  [label="[quotearg_n_options_2286,quotearg_n_options_2286]"]
	quotearg_n_options_17  [label="[quotearg_n_options_2287,quotearg_n_options_2307]"]
	quotearg_n_options_18  [label="[quotearg_n_options_2308,quotearg_n_options_2308]"]
	quotearg_n_options_19  [label="[quotearg_n_options_2309,quotearg_n_options_2309]"]
	quotearg_n_options_20  [label="[quotearg_n_options_2272,quotearg_n_options_2281]"]
	quotearg_n_options_21  [label="[.label_255,quotearg_n_options_2312]"]
	quotearg_n_options_22  [label="[quotearg_n_options_2313,quotearg_n_options_2313]"]
	quotearg_n_options_23  [label="[quot(28,fromList [(0,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(25,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(26,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(27,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(28,RSP == Var: RSP0 && RBP == Var: RBP0),(29,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(30,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8))])
earg_n_options_2314,quotearg_n_options_2319]"]
	quotearg_n_options_24  [label="[.label_251,quotearg_n_options_2266]"]
	quotearg_n_options_25  [label="[quotearg_n_options_2267,quotearg_n_options_2267]"]
	quotearg_n_options_26  [label="[quotearg_n_options_2268,quotearg_n_options_2271]"]
	quotearg_n_options_27  [label="[.label_254,quotearg_n_options_2180]"]
	quotearg_n_options_28  [label="[quotearg_n_options,quotearg_n_options_2168]"]
	quotearg_n_options_29  [label="[quotearg_n_options_2169,quotearg_n_options_2169]"]
	quotearg_n_options_30  [label="[quotearg_n_options_2170,quotearg_n_options_2175]"]



	quotearg_n_options_2 -> quotearg_n_options_8;
	quotearg_n_options_3 -> quotearg_n_options_4;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_24;
	quotearg_n_options_7 -> quotearg_n_options_8;
	quotearg_n_options_8 -> quotearg_n_options_9;
	quotearg_n_options_9 -> quotearg_n_options_10;
	quotearg_n_options_10 -> quotearg_n_options_4 [label="ZF"];
	quotearg_n_options_10 -> quotearg_n_options_3 [label="!ZF"];
	quotearg_n_options_11 -> quotearg_n_options_7 [label="ZF"];
	quotearg_n_options_11 -> quotearg_n_options_2 [label="!ZF"];
	quotearg_n_options_12 -> quotearg_n_options_11 [label="SF == OF"];
	quotearg_n_options_12 -> quotearg_n_options_1 [label="SF != OF"];
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_16;
	quotearg_n_options_16 -> quotearg_n_options_17;
	quotearg_n_options_17 -> quotearg_n_options_18;
	quotearg_n_options_18 -> quotearg_n_options_19;
	quotearg_n_options_19 -> quotearg_n_options_21;
	quotearg_n_options_20 -> quotearg_n_options_15 [label="ZF"];
	quotearg_n_options_20 -> quotearg_n_options_13 [label="!ZF"];
	quotearg_n_options_21 -> quotearg_n_options_22;
	quotearg_n_options_22 -> quotearg_n_options_23;

	quotearg_n_options_24 -> quotearg_n_options_25;
	quotearg_n_options_25 -> quotearg_n_options_26;
	quotearg_n_options_26 -> quotearg_n_options_21 [label="!CF && !ZF"];
	quotearg_n_options_26 -> quotearg_n_options_20 [label="CF || ZF"];
	quotearg_n_options_27 -> quotearg_n_options_24 [label="!ZF && SF == OF"];
	quotearg_n_options_27 -> quotearg_n_options_12 [label="ZF || SF != OF"];
	quotearg_n_options_28 -> quotearg_n_options_29;
	quotearg_n_options_29 -> quotearg_n_options_30;
	quotearg_n_options_30 -> quotearg_n_options_27 [label="SF == OF"];
	quotearg_n_options_30 -> quotearg_n_options_0 [label="SF != OF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_options for Randomized
diGraph quotearg_n_options_Randomized{
	quotearg_n_options_0  [label="[quotearg_n_options_3052,quotearg_n_options_3052]"]
	quotearg_n_options_1  [label="[quotearg_n_options_3073,quotearg_n_options_3073]"]
	quotearg_n_options_2  [label="[quotearg_n_options_3077,quotearg_n_options_3082]"]
	quotearg_n_options_3  [label="[quotearg_n_options_3101,quotearg_n_options_3107]"]
	quotearg_n_options_4  [label="[.label_249,quotearg_n_options_3127]"]
	quotearg_n_options_5  [label="[quotearg_n_options_3128,quotearg_n_options_3128]"]
	quotearg_n_options_6  [label="[quotearg_n_options_3129,quotearg_n_options_3132]"]
	quotearg_n_options_7  [label="[.label_255,quotearg_n_options_3085]"]
	quotearg_n_options_8  [label="[.label_251,quotearg_n_options_3094]"]
	quotearg_n_options_9  [label="[quotearg_n_options_3095,quotearg_n_options_3095]"]
	quotearg_n_options_10  [label="[quotearg_n_options_3096,quotearg_n_options_3100]"]
	quotearg_n_options_11  [label="[.label_254,quotearg_n_options_3076]"]
	quotearg_n_options_12  [label="[quotearg_n_options_3058,quotearg_n_options_3072]"]
	quotearg_n_options_13  [label="[quotearg_n_options_3208,quotearg_n_options_3209]"]
	quotearg_n_options_14  [label="[quotearg_n_options_3210,quotearg_n_options_3210]"]
	quotearg_n_options_15  [label="[.label_252,quotearg_n_options_3213]"]
	quotearg_n_options_16  [label="[quotearg_n_options_3214,quotearg_n_options_3214]"]
	quotearg_n_options_17  [label="[quotearg_n_options_3215,quotearg_n_options_3242]"]
	quotearg_n_options_18  [label="[quotearg_n_options_3243,quotearg_n_options_3243]"]
	quotearg_n_options_19  [label="[quotearg_n_options_3244,quotearg_n_options_3244]"]
	quotearg_n_options_20  [label="[quotearg_n_options_3193,quotearg_n_options_3207]"]
	quotearg_n_options_21  [label="[.label_256,quotearg_n_options_3250]"]
	quotearg_n_options_22  [label="[quotearg_n_options_3251,quotearg_n_options_3251]"]
	quotearg_n_options_23  [label="[quotearg_n_options_3252,quotearg_n_options_3259]"]
	quotearg_n_options_24  [label="[.label_253,quotearg_n_options_3183]"]
	quotearg_n_options_25  [label="[quotearg_n_options_3184,quotearg_n_options_3184]"]
	quotearg_n_options_26  [label="[quotearg_n_options_3185,quotearg_n_options_3192]"]
	quotearg_n_options_27  [label="[.label_250,quotearg_n_options_3057]"]
	quotearg_n_options_28  [label="[quotearg_n_options,quotearg_n_options_3043]"]
	quotearg_n_options_29  [label="[quotearg_n_options_3044,quotearg_n_options_3044]"]
	quotearg_n_options_30  [label="[quotearg_n_options_3045,quotearg_n_options_3051]"]



	quotearg_n_options_2 -> quotearg_n_options_8;
	quotearg_n_options_3 -> quotearg_n_options_4;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_24;
	quotearg_n_options_7 -> quotearg_n_options_8;
	quotearg_n_options_8 -> quotearg_n_options_9;
	quotearg_n_options_9 -> quotearg_n_options_10;
	quotearg_n_options_10 -> quotearg_n_options_4 [label="ZF"];
	quotearg_n_options_10 -> quotearg_n_options_3 [label="!ZF"];
	quotearg_n_options_11 -> quotearg_n_options_7 [label="ZF"];
	quotearg_n_options_11 -> quotearg_n_options_2 [label="!ZF"];
	quotearg_n_options_12 -> quotearg_n_options_11 [label="SF == OF"];
	quotearg_n_options_12 -> quotearg_n_options_1 [label="SF != OF"];
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_16;
	quotearg_n_options_16 -> quotearg_n_options_17;
	quotearg_n_options_17 -> quotearg_n_options_18;
	quotearg_n_options_18 -> quotearg_n_options_19;
	quotearg_n_options_19 -> quotearg_n_options_21;
	quotearg_n_options_20 -> quotearg_n_options_15 [label="ZF"];
	quotearg_n_options_20 -> quotearg_n_options_13 [label="!ZF"];
	quotearg_n_options_21 -> quotearg_n_options_22;
	quotearg_n_options_22 -> quotearg_n_options_23;

	quotearg_n_options_24 -> quotearg_n_options_25;
	quotearg_n_options_25 -> quotearg_n_options_26;
	quotearg_n_options_26 -> quotearg_n_options_21 [label="!CF && !ZF"];
	quotearg_n_options_26 -> quotearg_n_options_20 [label="CF || ZF"];
	quotearg_n_options_27 -> quotearg_n_options_24 [label="!ZF && SF == OF"];
	quotearg_n_options_27 -> quotearg_n_options_12 [label="ZF || SF != OF"];
	quotearg_n_options_28 -> quotearg_n_options_29;
	quotearg_n_options_29 -> quotearg_n_options_30;
	quotearg_n_options_30 -> quotearg_n_options_27 [label="SF == OF"];
	quotearg_n_options_30 -> quotearg_n_options_0 [label="SF != OF"];
}
--------
Starting Node: 28

Edges: , , 2 ----> 8, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 24, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 4, 10 --!ZF--> 3, 11 --ZF--> 7, 11 --!ZF--> 2, 12 --SF == OF--> 11, 12 --SF != OF--> 1, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 21, 20 --ZF--> 15, 20 --!ZF--> 13, 21 ----> 22, 22 ----> 23, , 24 ----> 25, 25 ----> 26, 26 --!CF && !ZF--> 21, 26 --CF || ZF--> 20, 27 --!ZF && SF == OF--> 24, 27 --ZF || SF != OF--> 12, 28 ----> 29, 29 ----> 30, 30 --SF == OF--> 27, 30 --SF != OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_options"
node 0:
RAX := abort@()
node 1:
RAX := xalloc_die@()
node 2:
RAX := Value: 0, RCX := Value: 0
[(Var: RSP0 - Value: 104),8] := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [Var: label_246,8]
[(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8),8] := Dereference: [Var: label_246,8], [Dereference: [(Var: RSP0 - Value: 56),8],8] := Dereference: [Var: slotvec0,8]
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RCX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDI := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), CF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), SF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), OF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), PF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1)
node 5:
RAX := memset@()
node 6:
RSI := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
[Var: nslots,4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 56),8]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 104),8], RCX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), RDX := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4), RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
node 9:
RAX := xrealloc@()
node 10:
[Var: slotvec,8] := Reg: RAX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)
node 11:
ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)
node 12:
RAX := Dereference: [Var: slotvec0,8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1)), RDX := Value: 2147483646
[(Var: RSP0 - Value: 57),1] := AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1), [(Var: RSP0 - Value: 64),4] := Value: 2147483646
ZF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4])
node 13:
RDI := Dereference: [(Var: RSP0 - Value: 80),8]
node 14:
RAX := free@()
node 15:
RDI := Dereference: [(Var: RSP0 - Value: 72),8]
node 16:
RAX := xcharalloc@()
node 17:
RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
[((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8] := Reg: RAX, [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
node 18:
RAX := quotearg_buffer_restyled@()
node 19:
[(Var: RSP0 - Value: 112),8] := Reg: RAX
node 20:
RAX := Dereference: [Var: slot0,8], RCX := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), RDX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8])
[(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), [(Var: RSP0 - Value: 72),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8])
node 21:
RAX := Dereference: [(Var: RSP0 - Value: 44),4]
[(Var: RSP0 - Value: 116),4] := Dereference: [(Var: RSP0 - Value: 44),4]
node 22:
RAX := __errno_location@()
node 23:
RAX := Dereference: [(Var: RSP0 - Value: 80),8], RCX := Dereference: [(Var: RSP0 - Value: 116),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 116),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 24:
RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], RSI := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
[(Var: RSP0 - Value: 72),8] := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 4(28,fromList [(0,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(25,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(26,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(27,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(28,RSP == Var: RSP0 && RBP == Var: RBP0),(29,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8)),(30,RSP == (Var: RSP0 - Value: 152) && RBP == (Var: RSP0 - Value: 8))])
0),8] + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
node 25:
RAX := quotearg_buffer_restyled@()
node 26:
RAX := Dereference: [(Var: RSP0 - Value: 72),8]
[(Var: RSP0 - Value: 96),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), CF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), SF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), OF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), PF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX)
node 27:
RAX := Dereference: [Var: nslots,4]
ZF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4])
node 28:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 152), CF := (Var: RSP0 - Value: 152), SF := (Var: RSP0 - Value: 152), OF := (Var: RSP0 - Value: 152), PF := (Var: RSP0 - Value: 152)
node 29:
RAX := __errno_location@()
node 30:
RAX := Dereference: [Var: slotvec,8], RDI := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 44),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 56),8] := Dereference: [Var: slotvec,8]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)
--------

Starting Node: 28

Edges: , , 2 ----> 8, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 24, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 4, 10 --!ZF--> 3, 11 --ZF--> 7, 11 --!ZF--> 2, 12 --SF == OF--> 11, 12 --SF != OF--> 1, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 21, 20 --ZF--> 15, 20 --!ZF--> 13, 21 ----> 22, 22 ----> 23, , 24 ----> 25, 25 ----> 26, 26 --!CF && !ZF--> 21, 26 --CF || ZF--> 20, 27 --!ZF && SF == OF--> 24, 27 --ZF || SF != OF--> 12, 28 ----> 29, 29 ----> 30, 30 --SF == OF--> 27, 30 --SF != OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_options"
node 0:
RAX := abort@()
node 1:
RAX := xalloc_die@()
node 2:
RAX := Value: 0, RCX := Value: 0
[(Var: RSP0 - Value: 104),8] := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [Var: label_244,8]
[(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8),8] := Dereference: [Var: label_244,8], [Dereference: [(Var: RSP0 - Value: 56),8],8] := Dereference: [Var: slotvec0,8]
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RCX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDI := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), CF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), SF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), OF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), PF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1)
node 5:
RAX := memset@()
node 6:
RSI := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
[Var: nslots,4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 56),8]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 104),8], RCX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), RDX := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4), RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
node 9:
RAX := xrealloc@()
node 10:
[Var: slotvec,8] := Reg: RAX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)
node 11:
ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)
node 12:
RAX := Dereference: [Var: slotvec0,8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1)), RDX := Value: 2147483646
[(Var: RSP0 - Value: 57),1] := AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1), [(Var: RSP0 - Value: 64),4] := Value: 2147483646
ZF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4])
node 13:
RDI := Dereference: [(Var: RSP0 - Value: 80),8]
node 14:
RAX := free@()
node 15:
RDI := Dereference: [(Var: RSP0 - Value: 72),8]
node 16:
RAX := xcharalloc@()
node 17:
RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
[((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8] := Reg: RAX, [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
node 18:
RAX := quotearg_buffer_restyled@()
node 19:
[(Var: RSP0 - Value: 112),8] := Reg: RAX
node 20:
RAX := Dereference: [Var: slot0,8], RCX := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), RDX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8])
[(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), [(Var: RSP0 - Value: 72),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8])
node 21:
RAX := Dereference: [(Var: RSP0 - Value: 44),4]
[(Var: RSP0 - Value: 116),4] := Dereference: [(Var: RSP0 - Value: 44),4]
node 22:
RAX := __errno_location@()
node 23:
RAX := Dereference: [(Var: RSP0 - Value: 80),8], RCX := Dereference: [(Var: RSP0 - Value: 116),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 116),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 24:
RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], RSI := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
[(Var: RSP0 - Value: 72),8] := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
node 25:
RAX := quotearg_buffer_restyled@()
node 26:
RAX := Dereference: [(Var: RSP0 - Value: 72),8]
[(Var: RSP0 - Value: 96),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), CF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), SF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), OF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), PF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX)
node 27:
RAX := Dereference: [Var: nslots,4]
ZF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4])
node 28:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
ZF := (Var: RSP0 - Value: 152), CF := (Var: RSP0 - Value: 152), SF := (Var: RSP0 - Value: 152), OF := (Var: RSP0 - Value: 152), PF := (Var: RSP0 - Value: 152)
node 29:
RAX := __errno_location@()
node 30:
RAX := Dereference: [Var: slotvec,8], RDI := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 44),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 56),8] := Dereference: [Var: slotvec,8]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)
--------

same_behavior for the nodes: quotearg_n_options -> quotearg_n_options_2168 and quotearg_n_options -> quotearg_n_options_3043

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SA || ZF := (Var: RSP0 - Value: 152), CF := (Var: RSP0 - Value: 152), SF := (Var: RSP0 - Value: 152), OF := (Var: RSP0 - Value: 152), PF := (Var: RSP0 - Value: 152)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX
SB || ZF := (Var: RSP0 - Value: 152), CF := (Var: RSP0 - Value: 152), SF := (Var: RSP0 - Value: 152), OF := (Var: RSP0 - Value: 152), PF := (Var: RSP0 - Value: 152)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options -> quotearg_n_options_2168 and quotearg_n_options -> quotearg_n_options_3043 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2169 -> quotearg_n_options_2169 and quotearg_n_options_3044 -> quotearg_n_options_3044

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2169 -> quotearg_n_options_2169 and quotearg_n_options_3044 -> quotearg_n_options_3044 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2170 -> quotearg_n_options_2175 and quotearg_n_options_3045 -> quotearg_n_options_3051

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec,8], RDI := Dereference: [Reg: RAX,4]
SA || [(Var: RSP0 - Value: 44),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 56),8] := Dereference: [Var: slotvec,8]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)

SB || RAX := Dereference: [Var: slotvec,8], RDI := Dereference: [Reg: RAX,4]
SB || [(Var: RSP0 - Value: 44),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 56),8] := Dereference: [Var: slotvec,8]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 12),4],Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec" 64) 8),(RDI,E_deref (E_reg RAX) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec" 64) 8),(RDI,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_var "slotvec" 64) 8
Value B:
E_deref (E_var "slotvec" 64) 8
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_var "slotvec" 64) 8
E_deref (E_var "slotvec" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2170 -> quotearg_n_options_2175 and quotearg_n_options_3045 -> quotearg_n_options_3051 have been verified to do the same.

same_behavior for the nodes: .label_254 -> quotearg_n_options_2180 and .label_250 -> quotearg_n_options_3057

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: nslots,4]
SA || ZF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4])

SB || RAX := Dereference: [Var: nslots,4]
SB || ZF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Dereference: [Var: nslots,4],Dereference: [(Var: RSP0 - Value: 12),4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "nslots" 64) 4)]
Resulting values:
Value A:
E_deref (E_var "nslots" 64) 4
Value B:
E_deref (E_var "nslots" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_254 -> quotearg_n_options_2180 and .label_250 -> quotearg_n_options_3057 have been verified to do the same.

same_behavior for the nodes: .label_251 -> quotearg_n_options_2266 and .label_253 -> quotearg_n_options_3183

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], RSI := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
SA || [(Var: RSP0 - Value: 72),8] := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], RSI := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
SB || [(Var: RSP0 - Value: 72),8] := Dereference: [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8], [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8),(RSI,E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8
Value B:
E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8
E_deref (E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_251 -> quotearg_n_options_2266 and .label_253 -> quotearg_n_options_3183 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2267 -> quotearg_n_options_2267 and quotearg_n_options_3184 -> quotearg_n_options_3184

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2267 -> quotearg_n_options_2267 and quotearg_n_options_3184 -> quotearg_n_options_3184 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2268 -> quotearg_n_options_2271 and quotearg_n_options_3185 -> quotearg_n_options_3192

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8]
SA || [(Var: RSP0 - Value: 96),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), CF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), SF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), OF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), PF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8]
SB || [(Var: RSP0 - Value: 96),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), CF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), SF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), OF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX), PF := CMP(Dereference: [(Var: RSP0 - Value: 72),8],Reg: RAX)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2268 -> quotearg_n_options_2271 and quotearg_n_options_3185 -> quotearg_n_options_3192 have been verified to do the same.

same_behavior for the nodes: .label_255 -> quotearg_n_options_2312 and .label_256 -> quotearg_n_options_3250

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 44),4]
SA || [(Var: RSP0 - Value: 116),4] := Dereference: [(Var: RSP0 - Value: 44),4]

SB || RAX := Dereference: [(Var: RSP0 - Value: 44),4]
SB || [(Var: RSP0 - Value: 116),4] := Dereference: [(Var: RSP0 - Value: 44),4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_255 -> quotearg_n_options_2312 and .label_256 -> quotearg_n_options_3250 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2313 -> quotearg_n_options_2313 and quotearg_n_options_3251 -> quotearg_n_options_3251

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2313 -> quotearg_n_options_2313 and quotearg_n_options_3251 -> quotearg_n_options_3251 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2314 -> quotearg_n_options_2319 and quotearg_n_options_3252 -> quotearg_n_options_3259

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 80),8], RCX := Dereference: [(Var: RSP0 - Value: 116),4]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 116),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 80),8], RCX := Dereference: [(Var: RSP0 - Value: 116),4]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 116),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 116 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_n_options_2314 -> quotearg_n_options_2319 and quotearg_n_options_3252 -> quotearg_n_options_3259 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2272 -> quotearg_n_options_2281 and quotearg_n_options_3193 -> quotearg_n_options_3207

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,8], RCX := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), RDX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8])
SA || [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), [(Var: RSP0 - Value: 72),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1)
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8])

SB || RAX := Dereference: [Var: slot0,8], RCX := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), RDX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8])
SB || [(SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1), [(Var: RSP0 - Value: 72),8] := (Dereference: [(Var: RSP0 - Value: 96),8] + Value: 1)
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 80),8],Dereference: [Var: slot0,8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]),(RDX,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]),(RDX,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]),(RDX,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 8
Value B:
E_deref (E_var "slot0" 64) 8
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]
local_var_cmp called

local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]) 8,E_val 1 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_n_options_2272 -> quotearg_n_options_2281 and quotearg_n_options_3193 -> quotearg_n_options_3207 have been verified to do the same.

same_behavior for the nodes: .label_249 -> .label_249 and .label_252 -> quotearg_n_options_3213

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 72),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 72),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_249 -> .label_249 and .label_252 -> quotearg_n_options_3213 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2286 -> quotearg_n_options_2286 and quotearg_n_options_3214 -> quotearg_n_options_3214

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xcharalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2286 -> quotearg_n_options_2286 and quotearg_n_options_3214 -> quotearg_n_options_3214 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2287 -> quotearg_n_options_2307 and quotearg_n_options_3215 -> quotearg_n_options_3242

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
SA || [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8] := Reg: RAX, [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 40),8],4]
SB || [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 12),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 56),8]) + Value: 8),8] := Reg: RAX, [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 136),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 48),8], [(Var: RSP0 - Value: 144),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 40),8] + Value: 40),8], [(Var: RSP0 - Value: 152),8] := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 40),8] + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8],E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2287 -> quotearg_n_options_2307 and quotearg_n_options_3215 -> quotearg_n_options_3242 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2308 -> quotearg_n_options_2308 and quotearg_n_options_3243 -> quotearg_n_options_3243

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2308 -> quotearg_n_options_2308 and quotearg_n_options_3243 -> quotearg_n_options_3243 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2309 -> quotearg_n_options_2309 and quotearg_n_options_3244 -> quotearg_n_options_3244

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 112),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 112),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2309 -> quotearg_n_options_2309 and quotearg_n_options_3244 -> quotearg_n_options_3244 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2282 -> quotearg_n_options_2282 and quotearg_n_options_3208 -> quotearg_n_options_3209

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 80),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 80),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2282 -> quotearg_n_options_2282 and quotearg_n_options_3208 -> quotearg_n_options_3209 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2283 -> quotearg_n_options_2283 and quotearg_n_options_3210 -> quotearg_n_options_3210

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2283 -> quotearg_n_options_2283 and quotearg_n_options_3210 -> quotearg_n_options_3210 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2181 -> quotearg_n_options_2189 and quotearg_n_options_3058 -> quotearg_n_options_3072

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec0,8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1)), RDX := Value: 2147483646
SA || [(Var: RSP0 - Value: 57),1] := AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1), [(Var: RSP0 - Value: 64),4] := Value: 2147483646
SA || ZF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4])

SB || RAX := Dereference: [Var: slotvec0,8], RCX := (TakeBits: <63,8>(Reg: RCX) . AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1)), RDX := Value: 2147483646
SB || [(Var: RSP0 - Value: 57),1] := AND((if (Dereference: [(Var: RSP0 - Value: 56),8] == Dereference: [Var: slotvec0,8]) then Value: 1 else Value: 0),Value: 1), [(Var: RSP0 - Value: 64),4] := Value: 2147483646
SB || ZF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), CF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), SF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), OF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4]), PF := CMP(Value: 2147483646,Dereference: [(Var: RSP0 - Value: 12),4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]]),(RDX,E_val 2147483646 32),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]]),(RDX,E_val 2147483646 32),(RDI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]]),(RDX,E_val 2147483646 32),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 8
Value B:
E_deref (E_var "slotvec0" 64) 8
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]]
local_var_cmp called

Resulting values:
Value A:
E_val 2147483646 32
Value B:
E_val 2147483646 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 57 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 57 64]
(v1 := v2):
E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]
E_app (Op AND) [E_ite (E_app (F ==) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_deref (E_var "slotvec0" 64) 8]) (E_val 1 8) (E_val 0 8),E_val 1 8]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_val 2147483646 32
E_val 2147483646 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2181 -> quotearg_n_options_2189 and quotearg_n_options_3058 -> quotearg_n_options_3072 have been verified to do the same.

same_behavior for the nodes: .label_253 -> quotearg_n_options_2193 and .label_254 -> quotearg_n_options_3076

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)

SB || ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_253 -> quotearg_n_options_2193 and .label_254 -> quotearg_n_options_3076 have been verified to do the same.

same_behavior for the nodes: .label_250 -> quotearg_n_options_2200 and .label_255 -> quotearg_n_options_3085

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 56),8]
SA || [(Var: RSP0 - Value: 104),8] := Dereference: [(Var: RSP0 - Value: 56),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8]
SB || [(Var: RSP0 - Value: 104),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_250 -> quotearg_n_options_2200 and .label_255 -> quotearg_n_options_3085 have been verified to do the same.

same_behavior for the nodes: .label_252 -> quotearg_n_options_2208 and .label_251 -> quotearg_n_options_3094

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 104),8], RCX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), RDX := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4), RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)

SB || RAX := Dereference: [(Var: RSP0 - Value: 104),8], RCX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), RDX := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4), RDI := Dereference: [(Var: RSP0 - Value: 104),8], RSI := SHL(zextend(sextend((Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1),32,64),Value: 64),Value: 4)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8),(RSI,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64])]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]],E_val 64 (-1)],E_val 4 64]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_252 -> quotearg_n_options_2208 and .label_251 -> quotearg_n_options_3094 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2209 -> quotearg_n_options_2209 and quotearg_n_options_3095 -> quotearg_n_options_3095

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2209 -> quotearg_n_options_2209 and quotearg_n_options_3095 -> quotearg_n_options_3095 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2210 -> quotearg_n_options_2213 and quotearg_n_options_3096 -> quotearg_n_options_3100

same_behavior checking these two SStates:

SA || [Var: slotvec,8] := Reg: RAX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
SA || ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)

SB || [Var: slotvec,8] := Reg: RAX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
SB || ZF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), CF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), SF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), OF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1), PF := TEST(Dereference: [(Var: RSP0 - Value: 57),1],Value: 1)

Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "slotvec" 64
E_var "slotvec" 64
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2210 -> quotearg_n_options_2213 and quotearg_n_options_3096 -> quotearg_n_options_3100 have been verified to do the same.

same_behavior for the nodes: .label_256 -> quotearg_n_options_2231 and .label_249 -> quotearg_n_options_3127

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RCX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDI := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), CF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), SF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), OF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), PF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RCX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDX := SHL(zextend(sextend(((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1),32,64),Value: 64),Value: 4), RDI := (Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(sextend(Dereference: [Var: nslots,4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), CF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), SF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), OF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1), PF := ((Dereference: [(Var: RSP0 - Value: 12),4] - Dereference: [Var: nslots,4]) + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RCX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RCX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RCX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RCX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RCX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (Op ADD) [E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_deref (E_var "nslots" 64) 4],E_val 1 32]],E_val 64 (-1)],E_val 4 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_var "nslots" 64) 4],E_val 64 (-1)],E_val 4 64]]
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_256 -> quotearg_n_options_2231 and .label_249 -> quotearg_n_options_3127 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2232 -> quotearg_n_options_2232 and quotearg_n_options_3128 -> quotearg_n_options_3128

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2232 -> quotearg_n_options_2232 and quotearg_n_options_3128 -> quotearg_n_options_3128 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2233 -> quotearg_n_options_2235 and quotearg_n_options_3129 -> quotearg_n_options_3132

same_behavior checking these two SStates:

SA || RSI := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
SA || [Var: nslots,4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)

SB || RSI := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
SB || [Var: nslots,4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 1)

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32])]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "nslots" 64
E_var "nslots" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 1 32]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_2233 -> quotearg_n_options_2235 and quotearg_n_options_3129 -> quotearg_n_options_3132 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2214 -> quotearg_n_options_2218 and quotearg_n_options_3101 -> quotearg_n_options_3107

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [Var: label_246,8]
SA || [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8),8] := Dereference: [Var: label_246,8], [Dereference: [(Var: RSP0 - Value: 56),8],8] := Dereference: [Var: slotvec0,8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [Var: label_244,8]
SB || [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8),8] := Dereference: [Var: label_244,8], [Dereference: [(Var: RSP0 - Value: 56),8],8] := Dereference: [Var: slotvec0,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RCX,E_deref (E_var "label_244" 64) 8),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RCX,E_deref (E_var "label_244" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var "label_246" 64) 8
Value B:
E_deref (E_var "label_244" 64) 8
Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
(v1 := v2):
E_deref (E_var "label_246" 64) 8
E_deref (E_var "label_244" 64) 8
b0: True b1: True


local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
(v1 := v2):
E_deref (E_var "slotvec0" 64) 8
E_deref (E_var "slotvec0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_2214 -> quotearg_n_options_2218 and quotearg_n_options_3101 -> quotearg_n_options_3107 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2194 -> quotearg_n_options_2197 and quotearg_n_options_3077 -> quotearg_n_options_3082

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Value: 0
SA || [(Var: RSP0 - Value: 104),8] := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Value: 0
SB || [(Var: RSP0 - Value: 104),8] := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_val 0 32)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RCX,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2194 -> quotearg_n_options_2197 and quotearg_n_options_3077 -> quotearg_n_options_3082 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2190 -> quotearg_n_options_2190 and quotearg_n_options_3073 -> quotearg_n_options_3073

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2190 -> quotearg_n_options_2190 and quotearg_n_options_3073 -> quotearg_n_options_3073 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_2176 -> quotearg_n_options_2176 and quotearg_n_options_3052 -> quotearg_n_options_3052

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_2176 -> quotearg_n_options_2176 and quotearg_n_options_3052 -> quotearg_n_options_3052 have been verified to do the same.

Label relationship:
label_246 <--> label_244
slotvec0 <--> slotvec0
slot0 <--> slot0
nslots <--> nslots
slotvec <--> slotvec
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 57) <--> (Var: RSP0 - Value: 57)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 116) <--> (Var: RSP0 - Value: 116),(Var: RSP0 - Value: 44)
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 96)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 144) <--> (Var: RSP0 - Value: 144)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 136)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 44) <--> (Var: RSP0 - Value: 44)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (27/60): "quotearg_alloc_mem"
--------
.dot code for CFG of text section quotearg_alloc_mem for Vanilla
diGraph quotearg_alloc_mem_Vanilla{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_2003,quotearg_alloc_mem_2005]"]
	quotearg_alloc_mem_1  [label="[quotearg_alloc_mem_2074,quotearg_alloc_mem_2077]"]
	quotearg_alloc_mem_2  [label="[.label_243,quotearg_alloc_mem_2083]"]
	quotearg_alloc_mem_3  [label="[.label_241,quotearg_alloc_mem_2009]"]
	quotearg_alloc_mem_4  [label="[.label_242,quotearg_alloc_mem_2012]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_2013,quotearg_alloc_mem_2013]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_2014,quotearg_alloc_mem_2042]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_2043,quotearg_alloc_mem_2043]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_2044,quotearg_alloc_mem_2046]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_2047,quotearg_alloc_mem_2047]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_2048,quotearg_alloc_mem_2064]"]
	quotearg_alloc_mem_11  [label="[quotearg_alloc_mem_2065,quotearg_alloc_mem_2065]"]
	quotearg_alloc_mem_12  [label="[quotearg_alloc_mem_2066,quotearg_alloc_mem_2068]"]
	quotearg_alloc_mem_13  [label="[quotearg_alloc(15,fromList [(0,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
_mem_2069,quotearg_alloc_mem_2069]"]
	quotearg_alloc_mem_14  [label="[quotearg_alloc_mem_2070,quotearg_alloc_mem_2073]"]
	quotearg_alloc_mem_15  [label="[quotearg_alloc_mem,quotearg_alloc_mem_2002]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_1 -> quotearg_alloc_mem_2;

	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_11;
	quotearg_alloc_mem_11 -> quotearg_alloc_mem_12;
	quotearg_alloc_mem_12 -> quotearg_alloc_mem_13;
	quotearg_alloc_mem_13 -> quotearg_alloc_mem_14;
	quotearg_alloc_mem_14 -> quotearg_alloc_mem_2 [label="ZF"];
	quotearg_alloc_mem_14 -> quotearg_alloc_mem_1 [label="!ZF"];
	quotearg_alloc_mem_15 -> quotearg_alloc_mem_3 [label="ZF"];
	quotearg_alloc_mem_15 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_alloc_mem for Randomized
diGraph quotearg_alloc_mem_Randomized{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_2812,quotearg_alloc_mem_2816]"]
	quotearg_alloc_mem_1  [label="[quotearg_alloc_mem_2917,quotearg_alloc_mem_2921]"]
	quotearg_alloc_mem_2  [label="[.label_243,quotearg_alloc_mem_2931]"]
	quotearg_alloc_mem_3  [label="[.label_241,quotearg_alloc_mem_2821]"]
	quotearg_alloc_mem_4  [label="[.label_242,quotearg_alloc_mem_2826]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_2827,quotearg_alloc_mem_2827]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_2828,quotearg_alloc_mem_2872]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_2873,quotearg_alloc_mem_2873]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_2874,quotearg_alloc_mem_2879]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_2880,quotearg_alloc_mem_2880]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_2881,quotearg_alloc_mem_2901]"]
	quotearg_alloc_mem_11  [label="[quotearg_alloc_mem_2902,quotearg_alloc_mem_2902]"]
	quotearg_alloc_mem_12  [label="[quotearg_alloc_mem_2903,quotearg_alloc_mem_2908]"]
	quotearg_alloc_mem_13  [label="[quotearg_alloc_mem_2909,quotearg_alloc_mem_2909]"]
	quotearg_alloc_mem_14  [label="[quotearg_alloc_mem_2910,quotearg_alloc_mem_2916]"]
	quotearg_alloc_mem_15  [label="[quotearg_alloc_mem,quotearg_alloc_mem_2811]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_1 -> quotearg_alloc_mem_2;

	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_11;
	quotearg_alloc_mem_11 -> quotearg_alloc_mem_12;
	quotearg_alloc_mem_12 -> quotearg_alloc_mem_13;
	quotearg_alloc_mem_13 -> quotearg_alloc_mem_14;
	quotearg_alloc_mem_14 -> quotearg_alloc_mem_2 [label="ZF"];
	quotearg_alloc_mem_14 -> quotearg_alloc_mem_1 [label="!ZF"];
	quotearg_alloc_mem_15 -> quotearg_alloc_mem_3 [label="ZF"];
	quotearg_alloc_mem_15 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
Starting Node: 15

Edges: 0 ----> 4, 1 ----> 2, , 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 --ZF--> 2, 14 --!ZF--> 1, 15 --ZF--> 3, 15 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc_mem"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 48),8]
[(Var: RSP0 - Value: 88),8] := Dereference: [(Var: RSP0 - Value: 48),8]
node 1:
RAX := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), RCX := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 40),8],8] := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 80),8], RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 3:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 88),8] := Dereference: [Var: default_quoting_options,8]
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 88),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 88),8]
node 5:
RAX := __errno_location@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RBX := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Value: 0, R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R10 := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
[(Var: RSP0 - Value: 72),8] := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 9:
RAX := xcharalloc@()
node 10:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 64),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 11:
RAX := quotearg_buffer_restyled@()
node 12:
R8 := Dereference: [(Var: RSP0 - Value: 60),4]
[(Var: RSP0 - Value: 96),8] := Reg: RAX, [(Var: RSP0 - Value: 100),4] := Dereference: [(Var: RSP0 - Value: 60),4]
node 13:
RAX := __errno_location@()
node 14:
R8 := Dereference: [(Var: RSP0 - Value: 100),4]
[Reg:(15,fromList [(0,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 136) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
 RAX,4] := Dereference: [(Var: RSP0 - Value: 100),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 15:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
ZF := CMP(Reg: RCX,Value: 0), CF := CMP(Reg: RCX,Value: 0), SF := CMP(Reg: RCX,Value: 0), OF := CMP(Reg: RCX,Value: 0), PF := CMP(Reg: RCX,Value: 0)
--------

Starting Node: 15

Edges: 0 ----> 4, 1 ----> 2, , 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 --ZF--> 2, 14 --!ZF--> 1, 15 --ZF--> 3, 15 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc_mem"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 48),8]
[(Var: RSP0 - Value: 88),8] := Dereference: [(Var: RSP0 - Value: 48),8]
node 1:
RAX := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), RCX := Dereference: [(Var: RSP0 - Value: 40),8]
[Dereference: [(Var: RSP0 - Value: 40),8],8] := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 80),8], RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 3:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 88),8] := Dereference: [Var: default_quoting_options,8]
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 88),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 88),8]
node 5:
RAX := __errno_location@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RBX := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Value: 0, R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R10 := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 7:
RAX := quotearg_buffer_restyled@()
node 8:
RAX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
[(Var: RSP0 - Value: 72),8] := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 9:
RAX := xcharalloc@()
node 10:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 64),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 11:
RAX := quotearg_buffer_restyled@()
node 12:
R8 := Dereference: [(Var: RSP0 - Value: 60),4]
[(Var: RSP0 - Value: 96),8] := Reg: RAX, [(Var: RSP0 - Value: 100),4] := Dereference: [(Var: RSP0 - Value: 60),4]
node 13:
RAX := __errno_location@()
node 14:
R8 := Dereference: [(Var: RSP0 - Value: 100),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 100),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 15:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
ZF := CMP(Reg: RCX,Value: 0), CF := CMP(Reg: RCX,Value: 0), SF := CMP(Reg: RCX,Value: 0), OF := CMP(Reg: RCX,Value: 0), PF := CMP(Reg: RCX,Value: 0)
--------

same_behavior for the nodes: quotearg_alloc_mem -> quotearg_alloc_mem_2002 and quotearg_alloc_mem -> quotearg_alloc_mem_2811

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
SA || ZF := CMP(Reg: RCX,Value: 0), CF := CMP(Reg: RCX,Value: 0), SF := CMP(Reg: RCX,Value: 0), OF := CMP(Reg: RCX,Value: 0), PF := CMP(Reg: RCX,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
SB || ZF := CMP(Reg: RCX,Value: 0), CF := CMP(Reg: RCX,Value: 0), SF := CMP(Reg: RCX,Value: 0), OF := CMP(Reg: RCX,Value: 0), PF := CMP(Reg: RCX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem -> quotearg_alloc_mem_2002 and quotearg_alloc_mem -> quotearg_alloc_mem_2811 have been verified to do the same.

same_behavior for the nodes: .label_241 -> quotearg_alloc_mem_2009 and .label_241 -> quotearg_alloc_mem_2821

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 88),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 88),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_241 -> quotearg_alloc_mem_2009 and .label_241 -> quotearg_alloc_mem_2821 have been verified to do the same.

same_behavior for the nodes: .label_242 -> quotearg_alloc_mem_2012 and .label_242 -> quotearg_alloc_mem_2826

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 88),8]
SA || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 88),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 88),8]
SB || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 88),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_242 -> quotearg_alloc_mem_2012 and .label_242 -> quotearg_alloc_mem_2826 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2013 -> quotearg_alloc_mem_2013 and quotearg_alloc_mem_2827 -> quotearg_alloc_mem_2827

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2013 -> quotearg_alloc_mem_2013 and quotearg_alloc_mem_2827 -> quotearg_alloc_mem_2827 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2014 -> quotearg_alloc_mem_2042 and quotearg_alloc_mem_2828 -> quotearg_alloc_mem_2872

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RBX := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Value: 0, R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R10 := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RBX := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Value: 0, RSI := Value: 0, R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R10 := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), R9 := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SB || [(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 64),4] := OR(Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4],(if (Dereference: [(Var: RSP0 - Value: 40),8] != Value: 0) then Value: 0 else Value: 1)), [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RBXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RBX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_val 0 32),(RSI,E_val 0 32),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R10,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(R9,E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4,E_ite (E_app (F !=) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 0 64]) (E_val 0 32) (E_val 1 32)]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 128 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 128 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2014 -> quotearg_alloc_mem_2042 and quotearg_alloc_mem_2828 -> quotearg_alloc_mem_2872 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2043 -> quotearg_alloc_mem_2043 and quotearg_alloc_mem_2873 -> quotearg_alloc_mem_2873

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2043 -> quotearg_alloc_mem_2043 and quotearg_alloc_mem_2873 -> quotearg_alloc_mem_2873 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2044 -> quotearg_alloc_mem_2046 and quotearg_alloc_mem_2874 -> quotearg_alloc_mem_2879

same_behavior checking these two SStates:

SA || RAX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
SA || [(Var: RSP0 - Value: 72),8] := (Reg: RAX + Value: 1)
SA || ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

SB || RAX := (Reg: RAX + Value: 1), RDI := (Reg: RAX + Value: 1)
SB || [(Var: RSP0 - Value: 72),8] := (Reg: RAX + Value: 1)
SB || ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RDI,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_app (Op ADD) [E_reg RAX,E_val 1 64]
E_app (Op ADD) [E_reg RAX,E_val 1 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2044 -> quotearg_alloc_mem_2046 and quotearg_alloc_mem_2874 -> quotearg_alloc_mem_2879 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2047 -> quotearg_alloc_mem_2047 and quotearg_alloc_mem_2880 -> quotearg_alloc_mem_2880

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xcharalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2047 -> quotearg_alloc_mem_2047 and quotearg_alloc_mem_2880 -> quotearg_alloc_mem_2880 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2048 -> quotearg_alloc_mem_2064 and quotearg_alloc_mem_2881 -> quotearg_alloc_mem_2901

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 64),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SA || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 72),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Var: RSP0 - Value: 64),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SB || [(Var: RSP0 - Value: 80),8] := Reg: RAX, [(Var: RSP0 - Value: 120),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 128),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 136),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 128 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 128 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2048 -> quotearg_alloc_mem_2064 and quotearg_alloc_mem_2881 -> quotearg_alloc_mem_2901 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2065 -> quotearg_alloc_mem_2065 and quotearg_alloc_mem_2902 -> quotearg_alloc_mem_2902

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2065 -> quotearg_alloc_mem_2065 and quotearg_alloc_mem_2902 -> quotearg_alloc_mem_2902 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2066 -> quotearg_alloc_mem_2068 and quotearg_alloc_mem_2903 -> quotearg_alloc_mem_2908

same_behavior checking these two SStates:

SA || R8 := Dereference: [(Var: RSP0 - Value: 60),4]
SA || [(Var: RSP0 - Value: 96),8] := Reg: RAX, [(Var: RSP0 - Value: 100),4] := Dereference: [(Var: RSP0 - Value: 60),4]

SB || R8 := Dereference: [(Var: RSP0 - Value: 60),4]
SB || [(Var: RSP0 - Value: 96),8] := Reg: RAX, [(Var: RSP0 - Value: 100),4] := Dereference: [(Var: RSP0 - Value: 60),4]

reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 96 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2066 -> quotearg_alloc_mem_2068 and quotearg_alloc_mem_2903 -> quotearg_alloc_mem_2908 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2069 -> quotearg_alloc_mem_2069 and quotearg_alloc_mem_2909 -> quotearg_alloc_mem_2909

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2069 -> quotearg_alloc_mem_2069 and quotearg_alloc_mem_2909 -> quotearg_alloc_mem_2909 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2070 -> quotearg_alloc_mem_2073 and quotearg_alloc_mem_2910 -> quotearg_alloc_mem_2916

same_behavior checking these two SStates:

SA || R8 := Dereference: [(Var: RSP0 - Value: 100),4]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 100),4]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

SB || R8 := Dereference: [(Var: RSP0 - Value: 100),4]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 100),4]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

reg_chk debug R8fromList [(RIP,E_var "returned" 64),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 100 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2070 -> quotearg_alloc_mem_2073 and quotearg_alloc_mem_2910 -> quotearg_alloc_mem_2916 have been verified to do the same.

same_behavior for the nodes: .label_243 -> quotearg_alloc_mem_2083 and .label_243 -> quotearg_alloc_mem_2931

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 80),8], RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RAX := Dereference: [(Var: RSP0 - Value: 80),8], RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RBXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8),(RBX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_243 -> quotearg_alloc_mem_2083 and .label_243 -> quotearg_alloc_mem_2931 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2074 -> quotearg_alloc_mem_2077 and quotearg_alloc_mem_2917 -> quotearg_alloc_mem_2921

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), RCX := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Dereference: [(Var: RSP0 - Value: 40),8],8] := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), RCX := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Dereference: [(Var: RSP0 - Value: 40),8],8] := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 72),8] - Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8)]
Resulting values:
Value A:
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]
Value B:
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
(v1 := v2):
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 1 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2074 -> quotearg_alloc_mem_2077 and quotearg_alloc_mem_2917 -> quotearg_alloc_mem_2921 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_2003 -> quotearg_alloc_mem_2005 and quotearg_alloc_mem_2812 -> quotearg_alloc_mem_2816

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 48),8]
SA || [(Var: RSP0 - Value: 88),8] := Dereference: [(Var: RSP0 - Value: 48),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 48),8]
SB || [(Var: RSP0 - Value: 88),8] := Dereference: [(Var: RSP0 - Value: 48),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_2003 -> quotearg_alloc_mem_2005 and quotearg_alloc_mem_2812 -> quotearg_alloc_mem_2816 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 100) <--> (Var: RSP0 - Value: 100),(Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 96) <--> (Var: RSP0 - Value: 96)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 136)
(Var: RSP0 - Value: 128) <--> (Var: RSP0 - Value: 128)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (28/60): "clone_quoting_options"
--------
.dot code for CFG of text section clone_quoting_options for Vanilla
diGr(7,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
(7,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
aph clone_quoting_options_Vanilla{
	clone_quoting_options_0  [label="[clone_quoting_options_398,clone_quoting_options_400]"]
	clone_quoting_options_1  [label="[.label_26,clone_quoting_options_404]"]
	clone_quoting_options_2  [label="[.label_27,clone_quoting_options_409]"]
	clone_quoting_options_3  [label="[clone_quoting_options_410,clone_quoting_options_410]"]
	clone_quoting_options_4  [label="[clone_quoting_options_411,clone_quoting_options_413]"]
	clone_quoting_options_5  [label="[clone_quoting_options_414,clone_quoting_options_414]"]
	clone_quoting_options_6  [label="[clone_quoting_options_415,clone_quoting_options_420]"]
	clone_quoting_options_7  [label="[clone_quoting_options,clone_quoting_options_392]"]
	clone_quoting_options_8  [label="[clone_quoting_options_393,clone_quoting_options_393]"]
	clone_quoting_options_9  [label="[clone_quoting_options_394,clone_quoting_options_397]"]

	clone_quoting_options_0 -> clone_quoting_options_2;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;
	clone_quoting_options_4 -> clone_quoting_options_5;
	clone_quoting_options_5 -> clone_quoting_options_6;

	clone_quoting_options_7 -> clone_quoting_options_8;
	clone_quoting_options_8 -> clone_quoting_options_9;
	clone_quoting_options_9 -> clone_quoting_options_1 [label="ZF"];
	clone_quoting_options_9 -> clone_quoting_options_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section clone_quoting_options for Randomized
diGraph clone_quoting_options_Randomized{
	clone_quoting_options_0  [label="[clone_quoting_options_548,clone_quoting_options_553]"]
	clone_quoting_options_1  [label="[.label_27,clone_quoting_options_559]"]
	clone_quoting_options_2  [label="[.label_26,clone_quoting_options_566]"]
	clone_quoting_options_3  [label="[clone_quoting_options_567,clone_quoting_options_567]"]
	clone_quoting_options_4  [label="[clone_quoting_options_568,clone_quoting_options_572]"]
	clone_quoting_options_5  [label="[clone_quoting_options_573,clone_quoting_options_573]"]
	clone_quoting_options_6  [label="[clone_quoting_options_574,clone_quoting_options_583]"]
	clone_quoting_options_7  [label="[clone_quoting_options,clone_quoting_options_541]"]
	clone_quoting_options_8  [label="[clone_quoting_options_542,clone_quoting_options_542]"]
	clone_quoting_options_9  [label="[clone_quoting_options_543,clone_quoting_options_547]"]

	clone_quoting_options_0 -> clone_quoting_options_2;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;
	clone_quoting_options_4 -> clone_quoting_options_5;
	clone_quoting_options_5 -> clone_quoting_options_6;

	clone_quoting_options_7 -> clone_quoting_options_8;
	clone_quoting_options_8 -> clone_quoting_options_9;
	clone_quoting_options_9 -> clone_quoting_options_1 [label="ZF"];
	clone_quoting_options_9 -> clone_quoting_options_0 [label="!ZF"];
}
--------
Starting Node: 7

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 1, 9 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "clone_quoting_options"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 40),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 40),8], RCX := Value: 56, RDI := Dereference: [(Var: RSP0 - Value: 40),8], RSI := Value: 56
node 3:
RAX := xmemdup@()
node 4:
RCX := Dereference: [(Var: RSP0 - Value: 20),4]
[(Var: RSP0 - Value: 32),8] := Reg: RAX, [(Var: RSP0 - Value: 44),4] := Dereference: [(Var: RSP0 - Value: 20),4]
node 5:
RAX := __errno_location@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 44),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 44),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 7:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 8:
RAX := __errno_location@()
node 9:
RCX := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)
--------

Starting Node: 7

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 1, 9 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "clone_quoting_options"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 40),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 40),8], RCX := Value: 56, RDI := Dereference: [(Var: RSP0 - Value: 40),8], RSI := Value: 56
node 3:
RAX := xmemdup@()
node 4:
RCX := Dereference: [(Var: RSP0 - Value: 20),4]
[(Var: RSP0 - Value: 32),8] := Reg: RAX, [(Var: RSP0 - Value: 44),4] := Dereference: [(Var: RSP0 - Value: 20),4]
node 5:
RAX := __errno_location@()
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 44),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 44),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 7:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 8:
RAX := __errno_location@()
node 9:
RCX := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)
--------

same_behavior for the nodes: clone_quoting_options -> clone_quoting_options_392 and clone_quoting_options -> clone_quoting_options_541

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options -> clone_quoting_options_392 and clone_quoting_options -> clone_quoting_options_541 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_393 -> clone_quoting_options_393 and clone_quoting_options_542 -> clone_quoting_options_542

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_393 -> clone_quoting_options_393 and clone_quoting_options_542 -> clone_quoting_options_542 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_394 -> clone_quoting_options_397 and clone_quoting_options_543 -> clone_quoting_options_547

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || [(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)

SB || RCX := Dereference: [Reg: RAX,4]
SB || [(Var: RSP0 - Value: 20),4] := Dereference: [Reg: RAX,4]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_394 -> clone_quoting_options_397 and clone_quoting_options_543 -> clone_quoting_options_547 have been verified to do the same.

same_behavior for the nodes: .label_26 -> clone_quoting_options_404 and .label_27 -> clone_quoting_options_559

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 40),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 40),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_26 -> clone_quoting_options_404 and .label_27 -> clone_quoting_options_559 have been verified to do the same.

same_behavior for the nodes: .label_27 -> clone_quoting_options_409 and .label_26 -> clone_quoting_options_566

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 40),8], RCX := Value: 56, RDI := Dereference: [(Var: RSP0 - Value: 40),8], RSI := Value: 56

SB || RAX := Dereference: [(Var: RSP0 - Value: 40),8], RCX := Value: 56, RDI := Dereference: [(Var: RSP0 - Value: 40),8], RSI := Value: 56

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RCX,E_val 56 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RSI,E_val 56 64)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RCX,E_val 56 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RSI,E_val 56 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RCX,E_val 56 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RSI,E_val 56 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RCX,E_val 56 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RSI,E_val 56 64)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_27 -> clone_quoting_options_409 and .label_26 -> clone_quoting_options_566 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_410 -> clone_quoting_options_410 and clone_quoting_options_567 -> clone_quoting_options_567

same_behavior checking these two SStates:

SA || RAX := xmemdup@()

SB || RAX := xmemdup@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmemdup" "") [])]
Resulting values:
Value A:
E_app (F2 "xmemdup" "") []
Value B:
E_app (F2 "xmemdup" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_410 -> clone_quoting_options_410 and clone_quoting_options_567 -> clone_quoting_options_567 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_411 -> clone_quoting_options_413 and clone_quoting_options_568 -> clone_quoting_options_572

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 20),4]
SA || [(Var: RSP0 - Value: 32),8] := Reg: RAX, [(Var: RSP0 - Value: 44),4] := Dereference: [(Var: RSP0 - Value: 20),4]

SB || RCX := Dereference: [(Var: RSP0 - Value: 20),4]
SB || [(Var: RSP0 - Value: 32),8] := Reg: RAX, [(Var: RSP0 - Value: 44),4] := Dereference: [(Var: RSP0 - Value: 20),4]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_411 -> clone_quoting_options_413 and clone_quoting_options_568 -> clone_quoting_options_572 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_414 -> clone_quoting_options_414 and clone_quoting_options_573 -> clone_quoting_options_573

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_414 -> clone_quoting_options_414 and clone_quoting_options_573 -> clone_quoting_options_573 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_415 -> clone_quoting_options_420 and clone_quoting_options_574 -> clone_quoting_options_583

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 44),4]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 44),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 44),4]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 44),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes clone_quoting_options_415 -> clone_quoting_options_420 and clone_quoting_options_574 -> clone_quoting_options_583 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_398 -> clone_quoting_options_400 and clone_quoting_options_548 -> clone_quoting_options_553

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_398 -> clone_quoting_options_400 and clone_quoting_options_548 -> clone_quoting_options_553 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 44) <--> (Var: RSP0 - Value: 44),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (29/60): "rpl_fclose"
--------
.dot code for CFG of text section rpl_fclose for Vanilla
diGraph rpl_fclose_Vanilla{
	rpl_fclose_0  [label="[rpl_fclose_4049,rpl_fclose_4049]"]
	rpl_fclose_1  [label="[rpl_fclose_4050,rpl_fclose_4050]"]
	rpl_fclose_2  [label="[rpl_fclose_4051,rpl_fclose_4052]"]
	rpl_fclose_3  [label="[rpl_fclose_4058,rpl_fclose_4058]"]
	rpl_fclose_4  [label="[rpl_fclose_4059,rpl_fclose_4059]"]
	rpl_fclose_5  [label="[rpl_fclose_4060,rpl_fclose_4063]"]
	rpl_fclose_6  [label="[rpl_fclose_4064,rpl_fclose_4064]"]
	rpl_fclose_7  [label="[rpl_fclose_4065,rpl_fclose_4066]"]
	rpl_fclose_8  [label="[rpl_fclose_4072,rpl_fclose_4072]"]
	rpl_fclose_9  [label="[rpl_fclose_4073,rpl_fclose_4074]"]
	rpl_fclose_10  [label="[rpl_fclose_4081,rpl_fclose_4082]"]
	rpl_fclose_11  [label="[rpl_fclose_4083,rpl_fclose_4083]"]
	rpl_fclose_12  [label="[rpl_fclose_4084,rpl_fclose_4086]"]
	rpl_fclose_13  [label="[.label_309,rpl_fclose_4089]"]
	rpl_fclose_14  [label="[.label_308,rpl_fclose_4094]"]
	rpl_fclose_15  [label="[.label_310,.label_310]"]
	rpl_fclose_16  [label="[rpl_fclose_4077,rpl_fclose_4077]"]
	rpl_fclose_17  [label="[rpl_fclose_4078,rpl_fclose_4080]"]
	rpl_fclose_18  [label="[.label_312,.label_312]"]
	rpl_fclose_19  [label="[rpl_fclose_4069,rpl_fclose_4069]"]
	rpl_fclose_20  [label="[rpl_fclose_4070,rpl_fclose_4071]"]
	rpl_fclose_21  [label="[.label_311,.label_311]"]
	rpl_fclose_22  [label="[rpl_fclose_4055,rpl_fclose_4055]"]
	rpl_fclose_23  [label="[rpl_fclose_4056,rpl_fclose_4057]"]
	rpl_fclose_24  [label="[rpl_fclose,rpl_fclose_4044]"]
	rpl_fclose_25  [label="[rpl_fclose_4045,rpl_fclose_4045]"]
	rpl_fclose_26  [label="[rpl_fclose_4046,rpl_fclose_4048]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_14;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_5;
	rpl_fclose_5 -> rpl_fclose_6;
	rpl_fclose_6 -> rpl_fclose_7;
	rpl_fclose_7 -> rpl_fclose_15 [label="ZF"];
	rpl_fclose_7 -> rpl_fclose_18 [label="!ZF"];
	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_15;
	rpl_fclose_10 -> rpl_fclose_11;
	rpl_fclose_11 -> rpl_fclose_12;
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_14;

	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_17;
	rpl_fclose_17 -> rpl_fclose_13 [label="ZF"];
	rpl_fclose_17 -> rpl_fclose_10 [label="!ZF"];
	rpl_fclose_18 -> rpl_fclose_19;
	rpl_fclose_19 -> rpl_fclose_20;
	rpl_fclose_20 -> rpl_fclose_15 [label="ZF"];
	rpl_fclose_20 -> rpl_fclose_8 [label="!ZF"];
	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_23;
	rpl_fclose_23 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_23 -> rpl_fclose_3 [label="!ZF"];
	rpl_fclose_24 -> rpl_fclose_25;
	rpl_fclose_25 -> rpl_fclose_26;
	rpl_fclose_26 -> rpl_fclose_21 [label="SF == OF"];
	rpl_fclose_26 -> rpl_fclose_0 [label="SF != OF"];
}
--------
--------
.dot code for CFG of text section rpl_fclose for Randomized
diGraph rpl_fclose_Randomized{
	rpl_fclose_0  [label="[rpl_fclose_5678,rpl_fclose_5678]"]
	rpl_fclose_1  [label="[rpl_fclose_5679,rpl_fclose_5679]"]
	rpl_fclose_2  [label="[rpl_fclose_5680,rpl_fclose_5682]"]
	rpl_fclose_3  [label="[rpl_fclose_5691,rpl_fclose_5692]"]
	rpl_fclose_4  [label="[rpl_fclose_5693,rpl_fclose_5693]"]
	rpl_fclose_5  [label="[rpl_fclose_5694,rpl_fclose_5699]"]
	rpl_fclose_6  [label="[rpl_fclose_5700,rpl_fclose_5700]"]
	rpl_fclose_7  [label="[rpl_fclose_5701,rpl_fclose_5704]"]
	rpl_fclose_8  [label="[rpl_fclose_5711,rpl_fclose_5711]"]
	rpl_fclose_9  [label="[rpl_fclose_5712,rpl_fclose_5715]"]
	rpl_fclose_10  [label="[rpl_fclose_5724,rpl_fclose_5726]"]
	rpl_fclose_11  [label="[rpl_fclose_5727,rpl_fclose_5727]"]
	rpl_fclose_12  [label="[rpl_fclose_5728,rpl_fclose_5733]"]
	rpl_fclose_13  [label="[.label_312,rpl_fclose_5736]"]
	rpl_fclose_14  [label="[.label_309,rpl_fclose_5744]"]
	rpl_fclose_15  [label="[.label_310,rpl_fclose_5718]"]
	rpl_fclose_16  [lab(24,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(26,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(24,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(26,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
el="[rpl_fclose_5719,rpl_fclose_5719]"]
	rpl_fclose_17  [label="[rpl_fclose_5720,rpl_fclose_5723]"]
	rpl_fclose_18  [label="[.label_308,.label_308]"]
	rpl_fclose_19  [label="[rpl_fclose_5707,rpl_fclose_5707]"]
	rpl_fclose_20  [label="[rpl_fclose_5708,rpl_fclose_5710]"]
	rpl_fclose_21  [label="[.label_311,rpl_fclose_5686]"]
	rpl_fclose_22  [label="[rpl_fclose_5687,rpl_fclose_5687]"]
	rpl_fclose_23  [label="[rpl_fclose_5688,rpl_fclose_5690]"]
	rpl_fclose_24  [label="[rpl_fclose,rpl_fclose_5672]"]
	rpl_fclose_25  [label="[rpl_fclose_5673,rpl_fclose_5673]"]
	rpl_fclose_26  [label="[rpl_fclose_5674,rpl_fclose_5677]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_14;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_5;
	rpl_fclose_5 -> rpl_fclose_6;
	rpl_fclose_6 -> rpl_fclose_7;
	rpl_fclose_7 -> rpl_fclose_15 [label="ZF"];
	rpl_fclose_7 -> rpl_fclose_18 [label="!ZF"];
	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_15;
	rpl_fclose_10 -> rpl_fclose_11;
	rpl_fclose_11 -> rpl_fclose_12;
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_14;

	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_17;
	rpl_fclose_17 -> rpl_fclose_13 [label="ZF"];
	rpl_fclose_17 -> rpl_fclose_10 [label="!ZF"];
	rpl_fclose_18 -> rpl_fclose_19;
	rpl_fclose_19 -> rpl_fclose_20;
	rpl_fclose_20 -> rpl_fclose_15 [label="ZF"];
	rpl_fclose_20 -> rpl_fclose_8 [label="!ZF"];
	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_23;
	rpl_fclose_23 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_23 -> rpl_fclose_3 [label="!ZF"];
	rpl_fclose_24 -> rpl_fclose_25;
	rpl_fclose_25 -> rpl_fclose_26;
	rpl_fclose_26 -> rpl_fclose_21 [label="SF == OF"];
	rpl_fclose_26 -> rpl_fclose_0 [label="SF != OF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 14, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --ZF--> 15, 7 --!ZF--> 18, 8 ----> 9, 9 ----> 15, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, , 15 ----> 16, 16 ----> 17, 17 --ZF--> 13, 17 --!ZF--> 10, 18 ----> 19, 19 ----> 20, 20 --ZF--> 15, 20 --!ZF--> 8, 21 ----> 22, 22 ----> 23, 23 --ZF--> 18, 23 --!ZF--> 3, 24 ----> 25, 25 ----> 26, 26 --SF == OF--> 21, 26 --SF != OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fclose"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := fclose@()
node 2:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 3:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 4:
RAX := fileno@()
node 5:
RCX := Value: 0, RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := lseek@()
node 7:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 8:
RAX := __errno_location@()
node 9:
RCX := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 28),4] := Dereference: [Reg: RAX,4]
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 28),4]
[(Var: RSP0 - Value: 40),4] := Dereference: [(Var: RSP0 - Value: 28),4]
node 11:
RAX := __errno_location@()
node 12:
RCX := Dereference: [(Var: RSP0 - Value: 40),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 40),4], [(Var: RSP0 - Value: 36),4] := Value: 4294967295
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 36),4]
[(Var: RSP0 - Value: 12),4] := Dereference: [(Var: RSP0 - Value: 36),4]
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 15:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 16:
RAX := fclose@()
node 17:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0)
node 18:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 19:
RAX := rpl_fflush@()
node 20:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 21:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 22:
RAX := __freading@()
node 23:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 24:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := Value: 0, [(Var: RSP0 - Value: 36),4] := Value: 0
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 25:
RAX := fileno@()
node 26:
[(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 14, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --ZF--> 15, 7 --!ZF--> 18, 8 ----> 9, 9 ----> 15, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, , 15 ----> 16, 16 ----> 17, 17 --ZF--> 13, 17 --!ZF--> 10, 18 ----> 19, 19 ----> 20, 20 --ZF--> 15, 20 --!ZF--> 8, 21 ----> 22, 22 ----> 23, 23 --ZF--> 18, 23 --!ZF--> 3, 24 ----> 25, 25 ----> 26, 26 --SF == OF--> 21, 26 --SF != OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fclose"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := fclose@()
node 2:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 3:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 4:
RAX := fileno@()
node 5:
RCX := Value: 0, RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := lseek@()
node 7:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 8:
RAX := __errno_location@()
node 9:
RCX := Dereference: [Reg: RAX,4]
[(Var: RSP0 - Value: 28),4] := Dereference: [Reg: RAX,4]
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 28),4]
[(Var: RSP0 - Value: 40),4] := Dereference: [(Var: RSP0 - Value: 28),4]
node 11:
RAX := __errno_location@()
node 12:
RCX := Dereference: [(Var: RSP0 - Value: 40),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 40),4], [(Var: RSP0 - Value: 36),4] := Value: 4294967295
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 36),4]
[(Var: RSP0 - Value: 12),4] := Dereference: [(Var: RSP0 - Value: 36),4]
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 15:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 16:
RAX := fclose@()
node 17:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0)
node 18:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 19:
RAX := rpl_fflush@()
node 20:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 21:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 22:
RAX := __freading@()
node 23:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 24:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := Value: 0, [(Var: RSP0 - Value: 36),4] := Value: 0
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 25:
RAX := fileno@()
node 26:
[(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
--------

same_behavior for the nodes: rpl_fclose -> rpl_fclose_4044 and rpl_fclose -> rpl_fclose_5672

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := Value: 0, [(Var: RSP0 - Value: 36),4] := Value: 0
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 28),4] := Value: 0, [(Var: RSP0 - Value: 36),4] := Value: 0
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose -> rpl_fclose_4044 and rpl_fclose -> rpl_fclose_5672 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4045 -> rpl_fclose_4045 and rpl_fclose_5673 -> rpl_fclose_5673

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4045 -> rpl_fclose_4045 and rpl_fclose_5673 -> rpl_fclose_5673 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4046 -> rpl_fclose_4048 and rpl_fclose_5674 -> rpl_fclose_5677

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || [(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4046 -> rpl_fclose_4048 and rpl_fclose_5674 -> rpl_fclose_5677 have been verified to do the same.

same_behavior for the nodes: .label_311 -> .label_311 and .label_311 -> rpl_fclose_5686

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_311 -> .label_311 and .label_311 -> rpl_fclose_5686 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4055 -> rpl_fclose_4055 and rpl_fclose_5687 -> rpl_fclose_5687

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__freading" "") [])]
Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4055 -> rpl_fclose_4055 and rpl_fclose_5687 -> rpl_fclose_5687 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4056 -> rpl_fclose_4057 and rpl_fclose_5688 -> rpl_fclose_5690

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4056 -> rpl_fclose_4057 and rpl_fclose_5688 -> rpl_fclose_5690 have been verified to do the same.

same_behavior for the nodes: .label_312 -> .label_312 and .label_308 -> .label_308

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_312 -> .label_312 and .label_308 -> .label_308 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4069 -> rpl_fclose_4069 and rpl_fclose_5707 -> rpl_fclose_5707

same_behavior checking these two SStates:

SA || RAX := rpl_fflush@()

SB || RAX := rpl_fflush@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_fflush" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_fflush" "") []
Value B:
E_app (F2 "rpl_fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4069 -> rpl_fclose_4069 and rpl_fclose_5707 -> rpl_fclose_5707 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4070 -> rpl_fclose_4071 and rpl_fclose_5708 -> rpl_fclose_5710

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4070 -> rpl_fclose_4071 and rpl_fclose_5708 -> rpl_fclose_5710 have been verified to do the same.

same_behavior for the nodes: .label_310 -> .label_310 and .label_310 -> rpl_fclose_5718

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_310 -> .label_310 and .label_310 -> rpl_fclose_5718 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4077 -> rpl_fclose_4077 and rpl_fclose_5719 -> rpl_fclose_5719

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fclose" "") [])]
Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4077 -> rpl_fclose_4077 and rpl_fclose_5719 -> rpl_fclose_5719 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4078 -> rpl_fclose_4080 and rpl_fclose_5720 -> rpl_fclose_5723

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0)

SB || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 28),4],Value: 0)

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4078 -> rpl_fclose_4080 and rpl_fclose_5720 -> rpl_fclose_5723 have been verified to do the same.

same_behavior for the nodes: .label_309 -> rpl_fclose_4089 and .label_312 -> rpl_fclose_5736

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 36),4]
SA || [(Var: RSP0 - Value: 12),4] := Dereference: [(Var: RSP0 - Value: 36),4]

SB || RAX := Dereference: [(Var: RSP0 - Value: 36),4]
SB || [(Var: RSP0 - Value: 12),4] := Dereference: [(Var: RSP0 - Value: 36),4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_309 -> rpl_fclose_4089 and .label_312 -> rpl_fclose_5736 have been verified to do the same.

same_behavior for the nodes: .label_308 -> rpl_fclose_4094 and .label_309 -> rpl_fclose_5744

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_308 -> rpl_fclose_4094 and .label_309 -> rpl_fclose_5744 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4081 -> rpl_fclose_4082 and rpl_fclose_5724 -> rpl_fclose_5726

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 28),4]
SA || [(Var: RSP0 - Value: 40),4] := Dereference: [(Var: RSP0 - Value: 28),4]

SB || RAX := Dereference: [(Var: RSP0 - Value: 28),4]
SB || [(Var: RSP0 - Value: 40),4] := Dereference: [(Var: RSP0 - Value: 28),4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4081 -> rpl_fclose_4082 and rpl_fclose_5724 -> rpl_fclose_5726 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4083 -> rpl_fclose_4083 and rpl_fclose_5727 -> rpl_fclose_5727

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4083 -> rpl_fclose_4083 and rpl_fclose_5727 -> rpl_fclose_5727 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4084 -> rpl_fclose_4086 and rpl_fclose_5728 -> rpl_fclose_5733

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 40),4]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 40),4], [(Var: RSP0 - Value: 36),4] := Value: 4294967295

SB || RCX := Dereference: [(Var: RSP0 - Value: 40),4]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 40),4], [(Var: RSP0 - Value: 36),4] := Value: 4294967295

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 4
b0: True b1: True


local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_val 4294967295 32
E_val 4294967295 32
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes rpl_fclose_4084 -> rpl_fclose_4086 and rpl_fclose_5728 -> rpl_fclose_5733 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4072 -> rpl_fclose_4072 and rpl_fclose_5711 -> rpl_fclose_5711

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4072 -> rpl_fclose_4072 and rpl_fclose_5711 -> rpl_fclose_5711 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4073 -> rpl_fclose_4074 and rpl_fclose_5712 -> rpl_fclose_5715

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RAX,4]
SA || [(Var: RSP0 - Value: 28),4] := Dereference: [Reg: RAX,4]

SB || RCX := Dereference: [Reg: RAX,4]
SB || [(Var: RSP0 - Value: 28),4] := Dereference: [Reg: RAX,4]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_reg RAX) 4),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4073 -> rpl_fclose_4074 and rpl_fclose_5712 -> rpl_fclose_5715 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4058 -> rpl_fclose_4058 and rpl_fclose_5691 -> rpl_fclose_5692

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4058 -> rpl_fclose_4058 and rpl_fclose_5691 -> rpl_fclose_5692 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4059 -> rpl_fclose_4059 and rpl_fclose_5693 -> rpl_fclose_5693

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4059 -> rpl_fclose_4059 and rpl_fclose_5693 -> rpl_fclose_5693 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4060 -> rpl_fclose_4063 and rpl_fclose_5694 -> rpl_fclose_5699

same_behavior checking these two SStates:

SA || RCX := Value: 0, RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Value: 0, RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_val 0 32),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_val 0 32),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_val 0 32),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_val 0 32),(RDX,E_val 1 32),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4060 -> rpl_fclose_4063 and rpl_fclose_5694 -> rpl_fclose_5699 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4064 -> rpl_fclose_4064 and rpl_fclose_5700 -> rpl_fclose_5700

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "lseek" "") [])]
Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4064 -> rpl_fclose_4064 and rpl_fclose_5700 -> rpl_fclose_5700 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4065 -> rpl_fclose_4066 and rpl_fclose_5701 -> rpl_fclose_5704

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4065 -> rpl_fclose_4066 and rpl_fclose_5701 -> rpl_fclose_5704 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4049 -> rpl_fclose_4049 and rpl_fclose_5678 -> rpl_fclose_5678

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4049 -> rpl_fclose_4049 and rpl_fclose_5678 -> rpl_fclose_5678 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_4050 -> rpl_fclose_4050 and rpl_fclose_5679 -> rpl_fclose_5679

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fclose" "") [])]
Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4050 -> rpl_fclose_4050 and rpl_fclose_5679 -> rpl_fclose_5679 have been verified to do the same.

same_behavior for(4,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
 the nodes: rpl_fclose_4051 -> rpl_fclose_4052 and rpl_fclose_5680 -> rpl_fclose_5682

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_4051 -> rpl_fclose_4052 and rpl_fclose_5680 -> rpl_fclose_5682 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 36),(Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36),(Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 36),(Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (30/60): "locale_charset"
--------
.dot code for CFG of text section locale_charset for Vanilla
diGraph locale_charset_Vanilla{
	locale_charset_0  [label="[locale_charset_4017,locale_charset_4018]"]
	locale_charset_1  [label="[locale_charset_4024,locale_charset_4025]"]
	locale_charset_2  [label="[.label_307,locale_charset_4030]"]
	locale_charset_3  [label="[.label_306,locale_charset_4023]"]
	locale_charset_4  [label="[locale_charset,locale_charset_4012]"]
	locale_charset_5  [label="[locale_charset_4013,locale_charset_4013]"]
	locale_charset_6  [label="[locale_charset_4014,locale_charset_4016]"]

	locale_charset_0 -> locale_charset_3;
	locale_charset_1 -> locale_charset_2;

	locale_charset_3 -> locale_charset_2 [label="!ZF"];
	locale_charset_3 -> locale_charset_1 [label="ZF"];
	locale_charset_4 -> locale_charset_5;
	locale_charset_5 -> locale_charset_6;
	locale_charset_6 -> locale_charset_3 [label="!ZF"];
	locale_charset_6 -> locale_charset_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section locale_charset for Randomized
diGraph locale_charset_Randomized{
	locale_charset_0  [label="[locale_charset_5631,locale_charset_5634]"]
	locale_charset_1  [label="[locale_charset_5643,locale_charset_5646]"]
	locale_charset_2  [label="[.label_306,locale_charset_5654]"]
	locale_charset_3  [label="[.label_307,locale_charset_5642]"]
	locale_charset_4  [label="[locale_charset,locale_charset_5625]"]
	locale_charset_5  [label="[locale_charset_5626,locale_charset_5626]"]
	locale_charset_6  [label="[locale_charset_5627,locale_charset_5630]"]

	locale_charset_0 -> locale_charset_3;
	locale_charset_1 -> locale_charset_2;

	locale_charset_3 -> locale_charset_2 [label="!ZF"];
	locale_charset_3 -> locale_charset_1 [label="ZF"];
	locale_charset_4 -> locale_charset_5;
	locale_charset_5 -> locale_charset_6;
	locale_charset_6 -> locale_charset_3 [label="!ZF"];
	locale_charset_6 -> locale_charset_0 [label="ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 3, 1 ----> 2, , 3 --!ZF--> 2, 3 --ZF--> 1, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 3, 6 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "locale_charset"
node 0:
RAX := Dereference: [Var: .str_0,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str_0,8]
node 1:
RAX := Dereference: [Var: .str.1_5,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str.1_5,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32)
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0)
node 4:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 5:
RAX := rpl_nl_langinfo@()
node 6:
[(Var: RSP0 - Value: 16),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

Starting Node: 4

Edges: 0 ----> 3, 1 ----> 2, , 3 --!ZF--> 2, 3 --ZF--> 1, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 3, 6 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "locale_charset"
node 0:
RAX := Dereference: [Var: .str_0,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str_0,8]
node 1:
RAX := Dereference: [Var: .str.1_5,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str.1_5,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32)
ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0)
node 4:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 5:
RAX := rpl_nl_langinfo@()
node 6:
[(Var: RSP0 - Value: 16),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

same_behavior for the nodes: locale_charset -> locale_charset_4012 and locale_charset -> locale_charset_5625

same_behavior checking these two SStates:

SA || RDI := Value: 14
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RDI := Value: 14
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 14 64)]
Resulting values:
Value A:
E_val 14 32
Value B:
E_val 14 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset -> locale_charset_4012 and locale_charset -> locale_charset_5625 have been verified to do the same.

same_behavior for the nodes: locale_charset_4013 -> locale_charset_4013 and locale_charset_5626 -> locale_charset_5626

same_behavior checking these two SStates:

SA || RAX := rpl_nl_langinfo@()

SB || RAX := rpl_nl_langinfo@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "rpl_nl_langinfo" "") [])]
Resulting values:
Value A:
E_app (F2 "rpl_nl_langinfo" "") []
Value B:
E_app (F2 "rpl_nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_4013 -> locale_charset_4013 and locale_charset_5626 -> locale_charset_5626 have been verified to do the same.

same_behavior for the nodes: locale_charset_4014 -> locale_charset_4016 and locale_charset_5627 -> locale_charset_5630

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 16),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 16),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset_4014 -> locale_charset_4016 and locale_charset_5627 -> locale_charset_5630 have been verified to do the same.

same_behavior for the nodes: .label_306 -> locale_charset_4023 and .label_307 -> locale_charset_5642

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32)
SA || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32)
SB || ZF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), CF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), SF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), OF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0), PF := CMP(sextend(Dereference: [Dereference: [(Var: RSP0 - Value: 16),8],1],8,32),Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RCX,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8) 1]),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RCX,E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8) 1]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8) 1]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_306 -> locale_charset_4023 and .label_307 -> locale_charset_5642 have been verified to do the same.

same_behavior for the nodes: .label_307 -> locale_charset_4030 and .label_306 -> locale_charset_5654

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_307 -> locale_charset_4030 and .label_306 -> locale_charset_5654 have been verified to do the same.

same_behavior for the nodes: locale_charset_4024 -> locale_charset_4025 and locale_charset_5643 -> locale_charset_5646

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.1_5,8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str.1_5,8]

SB || RAX := Dereference: [Var: .str.1_5,8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str.1_5,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_5" 64) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var ".str.1_5" 64) 8
Value B:
E_deref (E_var ".str.1_5" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_var ".str.1_5" 64) 8
E_deref (E_var ".str.1_5" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset_4024 -> locale_charset_4025 and locale_charset_5643 -> locale_charset_5646 have been verified to do the same.

same_behavior for the nodes: locale_charset_4017 -> locale_charset_4018 and locale_charset_5631 -> locale_charset_5634

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str_0,8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str_0,8]

SB || RAX := Dereference: [Var: .str_0,8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: .str_0,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str_0" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var ".str_0" 64) 8
Value B:
E_deref (E_var ".str_0" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_var ".str_0" 64) 8
E_deref (E_var ".str_0" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset_4017 -> locale_charset_4018 and locale_charset_5631 -> locale_charset_5634 have been verified to do the same.

Label relationship:
.str_0 <--> .str_0
.str.1_5 <--> .str.1_5
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (31/60): "rpl_mbrtowc"
--------
.dot code for CFG of text section rpl_mbrtowc for Vanilla
diGraph rpl_mbrtowc_Vanilla{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_3814,rpl_mbrtowc_3815]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_3832,rpl_mbrtowc_3839]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_3828,rpl_mbrtowc_3828]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_3829,rpl_mbrtowc_3829]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_3830,rpl_mbrtowc_3831]"]
	rpl_mbrtowc_5  [label="[rpl_mbrtowc_3826,rpl_mbrtowc_3827]"]
	rpl_mbrtowc_6  [label="[.label_292,rpl_mbrtowc_3842]"]
	rpl_mbrtowc_7  [label="[.label_293,rpl_mbrtowc_3847]"]
	rpl_mbrtowc_8  [label="[.label_291,rpl_mbrtowc_3820]"]
	rpl_mbrtowc_9  [label="[rpl_mbrtowc_3821,rpl_mbrtowc_3821]"]
	rpl_mbrtowc_10  [label="[rpl_mbrtowc_3822,rpl_mbrtowc_3825]"]
	rpl_mbrtowc_11  [label="[rpl_mbrtowc,rpl_mbrtowc_3813]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_8;
	rpl_mbrtowc_1 -> rpl_mbrtowc_7;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_4;
	rpl_mbrtowc_4 -> rpl_mbrtowc_6 [label="!ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="ZF"];
	rpl_mbrtowc_5 -> rpl_mbrtowc_6 [label="ZF"];
	rpl_mbrtowc_5 -> rpl_mbrtowc_2 [label="!ZF"];
	rpl_mbrtowc_6 -> rpl_mbrtowc_7;

	rpl_mbrtowc_8 -> rpl_mbrtowc_9;
	rpl_mbrtowc_9 -> rpl_mbrtowc_10;
	rpl_mbrtowc_10 -> rpl_mbrtowc_6 [label="!CF && !ZF"];
	rpl_mbrtowc_10 -> rpl_mbrtowc_5 [label="CF || ZF"];
	rpl_mbrtowc_11 -> rpl_mbrtowc_8 [label="!ZF"];
	rpl_mbrtowc_11 -> rpl_mbrtowc_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text(11,fromList [(0,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
(11,fromList [(0,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 72) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
 section rpl_mbrtowc for Randomized
diGraph rpl_mbrtowc_Randomized{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_5344,rpl_mbrtowc_5345]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_5372,rpl_mbrtowc_5385]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_5365,rpl_mbrtowc_5366]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_5367,rpl_mbrtowc_5367]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_5368,rpl_mbrtowc_5371]"]
	rpl_mbrtowc_5  [label="[rpl_mbrtowc_5361,rpl_mbrtowc_5364]"]
	rpl_mbrtowc_6  [label="[.label_292,rpl_mbrtowc_5388]"]
	rpl_mbrtowc_7  [label="[.label_293,rpl_mbrtowc_5396]"]
	rpl_mbrtowc_8  [label="[.label_291,rpl_mbrtowc_5353]"]
	rpl_mbrtowc_9  [label="[rpl_mbrtowc_5354,rpl_mbrtowc_5354]"]
	rpl_mbrtowc_10  [label="[rpl_mbrtowc_5355,rpl_mbrtowc_5360]"]
	rpl_mbrtowc_11  [label="[rpl_mbrtowc,rpl_mbrtowc_5343]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_8;
	rpl_mbrtowc_1 -> rpl_mbrtowc_7;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_4;
	rpl_mbrtowc_4 -> rpl_mbrtowc_6 [label="!ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="ZF"];
	rpl_mbrtowc_5 -> rpl_mbrtowc_6 [label="ZF"];
	rpl_mbrtowc_5 -> rpl_mbrtowc_2 [label="!ZF"];
	rpl_mbrtowc_6 -> rpl_mbrtowc_7;

	rpl_mbrtowc_8 -> rpl_mbrtowc_9;
	rpl_mbrtowc_9 -> rpl_mbrtowc_10;
	rpl_mbrtowc_10 -> rpl_mbrtowc_6 [label="!CF && !ZF"];
	rpl_mbrtowc_10 -> rpl_mbrtowc_5 [label="CF || ZF"];
	rpl_mbrtowc_11 -> rpl_mbrtowc_8 [label="!ZF"];
	rpl_mbrtowc_11 -> rpl_mbrtowc_0 [label="ZF"];
}
--------
Starting Node: 11

Edges: 0 ----> 8, 1 ----> 7, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --ZF--> 6, 5 --!ZF--> 2, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 --!CF && !ZF--> 6, 10 --CF || ZF--> 5, 11 --!ZF--> 8, 11 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_mbrtowc"
node 0:
RAX := (Var: RSP0 - Value: 60)
[(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 60)
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]), RDX := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
[(Var: RSP0 - Value: 16),8] := Value: 1, [(Var: RSP0 - Value: 61),1] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1], [Dereference: [(Var: RSP0 - Value: 24),8],4] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
node 2:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := hard_locale@()
node 4:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1)
node 5:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 48),8], RDX := Dereference: [(Var: RSP0 - Value: 40),8], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 9:
RAX := mbrtowc@()
node 10:
RCX := Value: 18446744073709551614
[(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := CMP(Value: 18446744073709551614,Reg: RAX), CF := CMP(Value: 18446744073709551614,Reg: RAX), SF := CMP(Value: 18446744073709551614,Reg: RAX), OF := CMP(Value: 18446744073709551614,Reg: RAX), PF := CMP(Value: 18446744073709551614,Reg: RAX)
node 11:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 11

Edges: 0 ----> 8, 1 ----> 7, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --ZF--> 6, 5 --!ZF--> 2, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 --!CF && !ZF--> 6, 10 --CF || ZF--> 5, 11 --!ZF--> 8, 11 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_mbrtowc"
node 0:
RAX := (Var: RSP0 - Value: 60)
[(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 60)
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]), RDX := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
[(Var: RSP0 - Value: 16),8] := Value: 1, [(Var: RSP0 - Value: 61),1] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1], [Dereference: [(Var: RSP0 - Value: 24),8],4] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
node 2:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := hard_locale@()
node 4:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1)
node 5:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 56),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 56),8]
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 48),8], RDX := Dereference: [(Var: RSP0 - Value: 40),8], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 9:
RAX := mbrtowc@()
node 10:
RCX := Value: 18446744073709551614
[(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := CMP(Value: 18446744073709551614,Reg: RAX), CF := CMP(Value: 18446744073709551614,Reg: RAX), SF := CMP(Value: 18446744073709551614,Reg: RAX), OF := CMP(Value: 18446744073709551614,Reg: RAX), PF := CMP(Value: 18446744073709551614,Reg: RAX)
node 11:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: rpl_mbrtowc -> rpl_mbrtowc_3813 and rpl_mbrtowc -> rpl_mbrtowc_5343

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 40),8] := Reg: RDX, [(Var: RSP0 - Value: 48),8] := Reg: RCX
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc -> rpl_mbrtowc_3813 and rpl_mbrtowc -> rpl_mbrtowc_5343 have been verified to do the same.

same_behavior for the nodes: .label_291 -> rpl_mbrtowc_3820 and .label_291 -> rpl_mbrtowc_5353

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 48),8], RDX := Dereference: [(Var: RSP0 - Value: 40),8], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RCX := Dereference: [(Var: RSP0 - Value: 48),8], RDX := Dereference: [(Var: RSP0 - Value: 40),8], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_291 -> rpl_mbrtowc_3820 and .label_291 -> rpl_mbrtowc_5353 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3821 -> rpl_mbrtowc_3821 and rpl_mbrtowc_5354 -> rpl_mbrtowc_5354

same_behavior checking these two SStates:

SA || RAX := mbrtowc@()

SB || RAX := mbrtowc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "mbrtowc" "") [])]
Resulting values:
Value A:
E_app (F2 "mbrtowc" "") []
Value B:
E_app (F2 "mbrtowc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3821 -> rpl_mbrtowc_3821 and rpl_mbrtowc_5354 -> rpl_mbrtowc_5354 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3822 -> rpl_mbrtowc_3825 and rpl_mbrtowc_5355 -> rpl_mbrtowc_5360

same_behavior checking these two SStates:

SA || RCX := Value: 18446744073709551614
SA || [(Var: RSP0 - Value: 56),8] := Reg: RAX
SA || ZF := CMP(Value: 18446744073709551614,Reg: RAX), CF := CMP(Value: 18446744073709551614,Reg: RAX), SF := CMP(Value: 18446744073709551614,Reg: RAX), OF := CMP(Value: 18446744073709551614,Reg: RAX), PF := CMP(Value: 18446744073709551614,Reg: RAX)

SB || RCX := Value: 18446744073709551614
SB || [(Var: RSP0 - Value: 56),8] := Reg: RAX
SB || ZF := CMP(Value: 18446744073709551614,Reg: RAX), CF := CMP(Value: 18446744073709551614,Reg: RAX), SF := CMP(Value: 18446744073709551614,Reg: RAX), OF := CMP(Value: 18446744073709551614,Reg: RAX), PF := CMP(Value: 18446744073709551614,Reg: RAX)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_val 18446744073709551614 64)]
Resulting values:
Value A:
E_val 18446744073709551614 64
Value B:
E_val 18446744073709551614 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3822 -> rpl_mbrtowc_3825 and rpl_mbrtowc_5355 -> rpl_mbrtowc_5360 have been verified to do the same.

same_behavior for the nodes: .label_292 -> rpl_mbrtowc_3842 and .label_292 -> rpl_mbrtowc_5388

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 56),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 56),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 56),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_292 -> rpl_mbrtowc_3842 and .label_292 -> rpl_mbrtowc_5388 have been verified to do the same.

same_behavior for the nodes: .label_293 -> rpl_mbrtowc_3847 and .label_293 -> rpl_mbrtowc_5396

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_293 -> rpl_mbrtowc_3847 and .label_293 -> rpl_mbrtowc_5396 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3826 -> rpl_mbrtowc_3827 and rpl_mbrtowc_5361 -> rpl_mbrtowc_5364

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3826 -> rpl_mbrtowc_3827 and rpl_mbrtowc_5361 -> rpl_mbrtowc_5364 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3828 -> rpl_mbrtowc_3828 and rpl_mbrtowc_5365 -> rpl_mbrtowc_5366

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 0 64)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3828 -> rpl_mbrtowc_3828 and rpl_mbrtowc_5365 -> rpl_mbrtowc_5366 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3829 -> rpl_mbrtowc_3829 and rpl_mbrtowc_5367 -> rpl_mbrtowc_5367

same_behavior checking these two SStates:

SA || RAX := hard_locale@()

SB || RAX := hard_locale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "hard_locale" "") [])]
Resulting values:
Value A:
E_app (F2 "hard_locale" "") []
Value B:
E_app (F2 "hard_locale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3829 -> rpl_mbrtowc_3829 and rpl_mbrtowc_5367 -> rpl_mbrtowc_5367 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3830 -> rpl_mbrtowc_3831 and rpl_mbrtowc_5368 -> rpl_mbrtowc_5371

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1)

SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), CF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), SF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), OF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1), PF := TEST(TakeBits: <7,0>(Reg: RAX),Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3830 -> rpl_mbrtowc_3831 and rpl_mbrtowc_5368 -> rpl_mbrtowc_5371 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3832 -> rpl_mbrtowc_3839 and rpl_mbrtowc_5372 -> rpl_mbrtowc_5385

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]), RDX := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
SA || [(Var: RSP0 - Value: 16),8] := Value: 1, [(Var: RSP0 - Value: 61),1] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1], [Dereference: [(Var: RSP0 - Value: 24),8],4] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := (TakeBits: <63,8>(Reg: RCX) . Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]), RDX := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]
SB || [(Var: RSP0 - Value: 16),8] := Value: 1, [(Var: RSP0 - Value: 61),1] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1], [Dereference: [(Var: RSP0 - Value: 24),8],4] := Dereference: [Dereference: [(Var: RSP0 - Value: 32),8],1]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1]),(RDX,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1]),(RDX,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1]),(RDX,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_val 1 64
E_val 1 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 61 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 61 64]
(v1 := v2):
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
(v1 := v2):
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8) 1
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3832 -> rpl_mbrtowc_3839 and rpl_mbrtowc_5372 -> rpl_mbrtowc_5385 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3814 -> rpl_mbrtowc_3815 and rpl_mbrtowc_5344 -> rpl_mbrtowc_5345

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 - Value: 60)
SA || [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 60)

SB || RAX := (Var: RSP0 - Value: 60)
SB || [(Var: RSP0 - Value: 24),8] := (Var: RSP0 - Value: 60)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64])]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3814 -> rpl_mbrtowc_3815 and rpl_mbrtowc_5344 -> rpl_mbrtowc_5345 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 60)
(Var: (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
RSP0 - Value: 61) <--> (Var: RSP0 - Value: 61)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (32/60): "xstrdup"
--------
.dot code for CFG of text section xstrdup for Vanilla
diGraph xstrdup_Vanilla{
	xstrdup_0  [label="[xstrdup,xstrdup_3768]"]
	xstrdup_1  [label="[xstrdup_3769,xstrdup_3769]"]
	xstrdup_2  [label="[xstrdup_3770,xstrdup_3772]"]
	xstrdup_3  [label="[xstrdup_3773,xstrdup_3773]"]
	xstrdup_4  [label="[xstrdup_3774,xstrdup_3776]"]

	xstrdup_0 -> xstrdup_1;
	xstrdup_1 -> xstrdup_2;
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;

}
--------
--------
.dot code for CFG of text section xstrdup for Randomized
diGraph xstrdup_Randomized{
	xstrdup_0  [label="[xstrdup,xstrdup_5281]"]
	xstrdup_1  [label="[xstrdup_5282,xstrdup_5282]"]
	xstrdup_2  [label="[xstrdup_5283,xstrdup_5288]"]
	xstrdup_3  [label="[xstrdup_5289,xstrdup_5289]"]
	xstrdup_4  [label="[xstrdup_5290,xstrdup_5293]"]

	xstrdup_0 -> xstrdup_1;
	xstrdup_1 -> xstrdup_2;
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xstrdup"
node 0:
RAX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := strlen@()
node 2:
RAX := (Reg: RAX + Value: 1), RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 3:
RAX := xmemdup@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "xstrdup"
node 0:
RAX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := strlen@()
node 2:
RAX := (Reg: RAX + Value: 1), RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := (Reg: RAX + Value: 1)
ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)
node 3:
RAX := xmemdup@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: xstrdup -> xstrdup_3768 and xstrdup -> xstrdup_5281

same_behavior checking these two SStates:

SA || RAX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_reg RDI),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xstrdup -> xstrdup_3768 and xstrdup -> xstrdup_5281 have been verified to do the same.

same_behavior for the nodes: xstrdup_3769 -> xstrdup_3769 and xstrdup_5282 -> xstrdup_5282

same_behavior checking these two SStates:

SA || RAX := strlen@()

SB || RAX := strlen@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strlen" "") [])]
Resulting values:
Value A:
E_app (F2 "strlen" "") []
Value B:
E_app (F2 "strlen" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3769 -> xstrdup_3769 and xstrdup_5282 -> xstrdup_5282 have been verified to do the same.

same_behavior for the nodes: xstrdup_3770 -> xstrdup_3772 and xstrdup_5283 -> xstrdup_5288

same_behavior checking these two SStates:

SA || RAX := (Reg: RAX + Value: 1), RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := (Reg: RAX + Value: 1)
SA || ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

SB || RAX := (Reg: RAX + Value: 1), RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := (Reg: RAX + Value: 1)
SB || ZF := (Reg: RAX + Value: 1), CF := (Reg: RAX + Value: 1), SF := (Reg: RAX + Value: 1), OF := (Reg: RAX + Value: 1), PF := (Reg: RAX + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_reg RAX,E_val 1 64]),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_app (Op ADD) [E_reg RAX,E_val 1 64])]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3770 -> xstrdup_3772 and xstrdup_5283 -> xstrdup_5288 have been verified to do the same.

same_behavior for the nodes: xstrdup_3773 -> xstrdup_3773 and xstrdup_5289 -> xstrdup_5289

same_behavior checking these two SStates:

SA || RAX := xmemdup@()

SB || RAX := xmemdup@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmemdup" "") [])]
Resulting values:
Value A:
E_app (F2 "xmemdup" "") []
Value B:
E_app ((0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
F2 "xmemdup" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3773 -> xstrdup_3773 and xstrdup_5289 -> xstrdup_5289 have been verified to do the same.

same_behavior for the nodes: xstrdup_3774 -> xstrdup_3776 and xstrdup_5290 -> xstrdup_5293

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3774 -> xstrdup_3776 and xstrdup_5290 -> xstrdup_5293 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (33/60): "xmemdup"
--------
.dot code for CFG of text section xmemdup for Vanilla
diGraph xmemdup_Vanilla{
	xmemdup_0  [label="[xmemdup,xmemdup_3743]"]
	xmemdup_1  [label="[xmemdup_3744,xmemdup_3744]"]
	xmemdup_2  [label="[xmemdup_3745,xmemdup_3748]"]
	xmemdup_3  [label="[xmemdup_3749,xmemdup_3749]"]
	xmemdup_4  [label="[xmemdup_3750,xmemdup_3753]"]

	xmemdup_0 -> xmemdup_1;
	xmemdup_1 -> xmemdup_2;
	xmemdup_2 -> xmemdup_3;
	xmemdup_3 -> xmemdup_4;

}
--------
--------
.dot code for CFG of text section xmemdup for Randomized
diGraph xmemdup_Randomized{
	xmemdup_0  [label="[xmemdup,xmemdup_5246]"]
	xmemdup_1  [label="[xmemdup_5247,xmemdup_5247]"]
	xmemdup_2  [label="[xmemdup_5248,xmemdup_5255]"]
	xmemdup_3  [label="[xmemdup_5256,xmemdup_5256]"]
	xmemdup_4  [label="[xmemdup_5257,xmemdup_5261]"]

	xmemdup_0 -> xmemdup_1;
	xmemdup_1 -> xmemdup_2;
	xmemdup_2 -> xmemdup_3;
	xmemdup_3 -> xmemdup_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xmemdup"
node 0:
RDI := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := xmalloc@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Reg: RAX
node 3:
RAX := memcpy@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "xmemdup"
node 0:
RDI := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := xmalloc@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Reg: RAX
node 3:
RAX := memcpy@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: xmemdup -> xmemdup_3743 and xmemdup -> xmemdup_5246

same_behavior checking these two SStates:

SA || RDI := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RDI := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RSI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmemdup -> xmemdup_3743 and xmemdup -> xmemdup_5246 have been verified to do the same.

same_behavior for the nodes: xmemdup_3744 -> xmemdup_3744 and xmemdup_5247 -> xmemdup_5247

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3744 -> xmemdup_3744 and xmemdup_5247 -> xmemdup_5247 have been verified to do the same.

same_behavior for the nodes: xmemdup_3745 -> xmemdup_3748 and xmemdup_5248 -> xmemdup_5255

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 32),8] := Reg: RAX

SB || RDX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Reg: RAX, RSI := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 32),8] := Reg: RAX

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RAX),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmemdup_3745 -> xmemdup_3748 and xmemdup_5248 -> xmemdup_5255 have been verified to do the same.

same_behavior for the nodes: xmemdup_3749 -> xmemdup_3749 and xmemdup_5256 -> xmemdup_5256

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memcpy" "") [])]
Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" ""(5,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
(6,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == Var: RSP0 && RBP == Var: RBP0)])
) []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3749 -> xmemdup_3749 and xmemdup_5256 -> xmemdup_5256 have been verified to do the same.

same_behavior for the nodes: xmemdup_3750 -> xmemdup_3753 and xmemdup_5257 -> xmemdup_5261

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3750 -> xmemdup_3753 and xmemdup_5257 -> xmemdup_5261 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (34/60): "xcalloc"
--------
.dot code for CFG of text section xcalloc for Vanilla
diGraph xcalloc_Vanilla{
	xcalloc_0  [label="[.label_290,xcalloc_3730]"]
	xcalloc_1  [label="[xcalloc_3718,xcalloc_3719]"]
	xcalloc_2  [label="[xcalloc_3720,xcalloc_3720]"]
	xcalloc_3  [label="[xcalloc_3721,xcalloc_3723]"]
	xcalloc_4  [label="[.label_289,.label_289]"]
	xcalloc_5  [label="[xcalloc,xcalloc_3717]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3;
	xcalloc_3 -> xcalloc_0 [label="!ZF"];
	xcalloc_3 -> xcalloc_4 [label="ZF"];

	xcalloc_5 -> xcalloc_4 [label="CF"];
	xcalloc_5 -> xcalloc_1 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xcalloc for Randomized
diGraph xcalloc_Randomized{
	xcalloc_0  [label="[.label_290,xcalloc_5230]"]
	xcalloc_1  [label="[xcalloc_5214,xcalloc_5215]"]
	xcalloc_2  [label="[xcalloc_5216,xcalloc_5216]"]
	xcalloc_3  [label="[xcalloc_5217,xcalloc_5219]"]
	xcalloc_4  [label="[.label_289,.label_289]"]
	xcalloc_5  [label="[xcalloc_5222,xcalloc_5222]"]
	xcalloc_6  [label="[xcalloc,xcalloc_5213]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3;
	xcalloc_3 -> xcalloc_0 [label="!ZF"];
	xcalloc_3 -> xcalloc_4 [label="ZF"];
	xcalloc_4 -> xcalloc_5;

	xcalloc_6 -> xcalloc_4 [label="CF"];
	xcalloc_6 -> xcalloc_1 [label="!CF"];
}
--------
Starting Node: 5

Edges: , 1 ----> 2, 2 ----> 3, 3 --!ZF--> 0, 3 --ZF--> 4, , 5 --CF--> 4, 5 --!CF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xcalloc"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 1:
RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 2:
RAX := calloc@()
node 3:
[(Var: RSP0 - Value: 32),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 4:
RAX := xalloc_die@()
node 5:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 6

Edges: , 1 ----> 2, 2 ----> 3, 3 --!ZF--> 0, 3 --ZF--> 4, 4 ----> 5, , 6 --CF--> 4, 6 --!CF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xcalloc"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 1:
RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]
node 2:
RAX := calloc@()
node 3:
[(Var: RSP0 - Value: 32),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 4:
skip'
node 5:
RAX := xalloc_die@()
node 6:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xcalloc -> xcalloc_3717 and xcalloc -> xcalloc_5213

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_va(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
l 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]])]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcalloc -> xcalloc_3717 and xcalloc -> xcalloc_5213 have been verified to do the same.

same_behavior for the nodes: .label_289 -> .label_289 and .label_289 -> .label_289

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: .label_289 -> .label_289 and xcalloc_5222 -> xcalloc_5222

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_289 -> .label_289 and xcalloc_5222 -> xcalloc_5222 have been verified to do the same.

same_behavior for the nodes: xcalloc_3718 -> xcalloc_3719 and xcalloc_5214 -> xcalloc_5215

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3718 -> xcalloc_3719 and xcalloc_5214 -> xcalloc_5215 have been verified to do the same.

same_behavior for the nodes: xcalloc_3720 -> xcalloc_3720 and xcalloc_5216 -> xcalloc_5216

same_behavior checking these two SStates:

SA || RAX := calloc@()

SB || RAX := calloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "calloc" "") [])]
Resulting values:
Value A:
E_app (F2 "calloc" "") []
Value B:
E_app (F2 "calloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3720 -> xcalloc_3720 and xcalloc_5216 -> xcalloc_5216 have been verified to do the same.

same_behavior for the nodes: xcalloc_3721 -> xcalloc_3723 and xcalloc_5217 -> xcalloc_5219

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 32),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 32),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcalloc_3721 -> xcalloc_3723 and xcalloc_5217 -> xcalloc_5219 have been verified to do the same.

same_behavior for the nodes: .label_290 -> xcalloc_3730 and .label_290 -> xcalloc_5230

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_290 -> xcalloc_3730 and .label_290 -> xcalloc_5230 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (35/60): "xzalloc"
--------
.dot code for CFG of text section xzalloc for Vanilla
diGraph xzalloc_Vanilla{
	xzalloc_0  [label="[xzalloc,xzalloc_3689]"]
	xzalloc_1  [label="[xzalloc_3690,xzalloc_3690]"]
	xzalloc_2  [label="[xzalloc_3691,xzalloc_3694]"]
	xzalloc_3  [label="[xzalloc_3695,xzalloc_3695]"]
	xzalloc_4  [label="[xzalloc_3696,xzalloc_3699]"]

	xzalloc_0 -> xzalloc_1;
	xzalloc_1 -> xzalloc_2;
	xzalloc_2 -> xzalloc_3;
	xzalloc_3 -> xzalloc_4;

}
--------
--------
.dot code for CFG of text section xzalloc for Randomized
diGraph xzalloc_Randomized{
	xzalloc_0  [label="[xzalloc,xzalloc_5177]"]
	xzalloc_1  [label="[xzalloc_5178,xzalloc_5178]"]
	xzalloc_2  [label="[xzalloc_5179,xzalloc_5184]"]
	xzalloc_3  [label="[xzalloc_5185,xzalloc_5185]"]
	xzalloc_4  [label="[xzalloc_5186,xzalloc_5191]"]

	xzalloc_0 -> xzalloc_1;
	xzalloc_1 -> xzalloc_2;
	xzalloc_2 -> xzalloc_3;
	xzalloc_3 -> xzalloc_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xzalloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := xmalloc@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
16),8], RDI := Reg: RAX, RSI := Value: 0
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := memset@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "xzalloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := xmalloc@()
node 2:
RDX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RAX, RSI := Value: 0
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := memset@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: xzalloc -> xzalloc_3689 and xzalloc -> xzalloc_5177

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xzalloc -> xzalloc_3689 and xzalloc -> xzalloc_5177 have been verified to do the same.

same_behavior for the nodes: xzalloc_3690 -> xzalloc_3690 and xzalloc_5178 -> xzalloc_5178

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3690 -> xzalloc_3690 and xzalloc_5178 -> xzalloc_5178 have been verified to do the same.

same_behavior for the nodes: xzalloc_3691 -> xzalloc_3694 and xzalloc_5179 -> xzalloc_5184

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RAX, RSI := Value: 0
SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RAX, RSI := Value: 0
SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RAX),(RSI,E_val 0 64)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RAX),(RSI,E_val 0 64)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RAX),(RSI,E_val 0 64)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xzalloc_3691 -> xzalloc_3694 and xzalloc_5179 -> xzalloc_5184 have been verified to do the same.

same_behavior for the nodes: xzalloc_3695 -> xzalloc_3695 and xzalloc_5185 -> xzalloc_5185

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "memset" "") [])]
Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3695 -> xzalloc_3695 and xzalloc_5185 -> xzalloc_5185 have been verified to do the same.

same_behavior for the nodes: xzalloc_3696 -> xzalloc_3699 and xzalloc_5186 -> xzalloc_5191

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3696 -> xzalloc_3699 and xzalloc_5186 -> xzalloc_5191 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (36/60): "x2realloc"
--------
.dot code for CFG of text section x2realloc for Vanilla
diGraph x2realloc_Vanilla{
	x2realloc_0  [label="[x2realloc,x2realloc_3673]"]
	x2realloc_1  [label="[x2realloc_3674,x2realloc_3674]"]
	x2realloc_2  [label="[x2realloc_3675,x2realloc_3677]"]

	x2realloc_0 -> x2realloc_1;
	x2realloc_1 -> x2realloc_2;

}
--------
--------
.dot code for CFG of text section x2realloc for Randomized
diGraph x2realloc_Randomized{
	x2realloc_0  [label="[x2realloc,x2realloc_5159]"]
	x2realloc_1  [label="[x2realloc_5160,x2realloc_5160]"]
	x2realloc_2  [label="[x2realloc_5161,x2realloc_5163]"]

	x2realloc_0 -> x2realloc_1;
	x2realloc_1 -> x2realloc_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "x2realloc"
node 0:
RAX := Value: 1, RDX := Value: 1
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := x2nrealloc@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "x2realloc"
node 0:
RAX := Value: 1, RDX := Value: 1
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := (Var: (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := x2nrealloc@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: x2realloc -> x2realloc_3673 and x2realloc -> x2realloc_5159

same_behavior checking these two SStates:

SA || RAX := Value: 1, RDX := Value: 1
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := Value: 1, RDX := Value: 1
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 1 32),(RDX,E_val 1 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 1 32),(RDX,E_val 1 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 1 32),(RDX,E_val 1 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 1 32),(RDX,E_val 1 32),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2realloc -> x2realloc_3673 and x2realloc -> x2realloc_5159 have been verified to do the same.

same_behavior for the nodes: x2realloc_3674 -> x2realloc_3674 and x2realloc_5160 -> x2realloc_5160

same_behavior checking these two SStates:

SA || RAX := x2nrealloc@()

SB || RAX := x2nrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "x2nrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "x2nrealloc" "") []
Value B:
E_app (F2 "x2nrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3674 -> x2realloc_3674 and x2realloc_5160 -> x2realloc_5160 have been verified to do the same.

same_behavior for the nodes: x2realloc_3675 -> x2realloc_3677 and x2realloc_5161 -> x2realloc_5163

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2realloc_3675 -> x2realloc_3677 and x2realloc_5161 -> x2realloc_5163 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (37/60): "xcharalloc"
--------
.dot code for CFG of text section xcharalloc for Vanilla
diGraph xcharalloc_Vanilla{
	xcharalloc_0  [label="[xcharalloc,xcharalloc_3653]"]
	xcharalloc_1  [label="[xcharalloc_3654,xcharalloc_3654]"]
	xcharalloc_2  [label="[xcharalloc_3655,xcharalloc_3657]"]

	xcharalloc_0 -> xcharalloc_1;
	xcharalloc_1 -> xcharalloc_2;

}
--------
--------
.dot code for CFG of text section xcharalloc for Randomized
diGraph xcharalloc_Randomized{
	xcharalloc_0  [label="[xcharalloc,xcharalloc_5134]"]
	xcharalloc_1  [label="[xcharalloc_5135,xcharalloc_5135]"]
	xcharalloc_2  [label="[xcharalloc_5136,xcharalloc_5139]"]

	xcharalloc_0 -> xcharalloc_1;
	xcharalloc_1 -> xcharalloc_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xcharalloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := xmalloc@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "xcharalloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := xmalloc@()
node 2:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: xcharalloc -> xcharalloc_3653 and xcharalloc -> xcharalloc_5134

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcharalloc -> xcharalloc_3653 and xcharalloc -> xcharalloc_5134 have been verified to do the same.

same_behavior for the nodes: xcharalloc_3654 -> xcharalloc_3654 and xcharalloc_5135 -> xcharalloc_5135

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xmalloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcharalloc_3654 -> xcharalloc_3654 and xcharalloc_5135 -> xcharalloc_5135 have been verified to do the same.

same_behavior for the nodes: xcharalloc_3655 -> xcharalloc_3657 and xcharalloc_5136 -> xcharalloc_5139

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RS(11,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
P0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcharalloc_3655 -> xcharalloc_3657 and xcharalloc_5136 -> xcharalloc_5139 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (38/60): "x2nrealloc"
--------
.dot code for CFG of text section x2nrealloc for Vanilla
diGraph x2nrealloc_Vanilla{
	x2nrealloc_0  [label="[x2nrealloc_3593,x2nrealloc_3605]"]
	x2nrealloc_1  [label="[x2nrealloc_3613,x2nrealloc_3613]"]
	x2nrealloc_2  [label="[.label_285,.label_285]"]
	x2nrealloc_3  [label="[.label_287,x2nrealloc_3612]"]
	x2nrealloc_4  [label="[x2nrealloc_3591,x2nrealloc_3592]"]
	x2nrealloc_5  [label="[x2nrealloc_3623,x2nrealloc_3623]"]
	x2nrealloc_6  [label="[.label_288,x2nrealloc_3629]"]
	x2nrealloc_7  [label="[.label_286,x2nrealloc_3637]"]
	x2nrealloc_8  [label="[x2nrealloc_3638,x2nrealloc_3638]"]
	x2nrealloc_9  [label="[x2nrealloc_3639,x2nrealloc_3641]"]
	x2nrealloc_10  [label="[.label_284,x2nrealloc_3622]"]
	x2nrealloc_11  [label="[x2nrealloc,x2nrealloc_3590]"]

	x2nrealloc_0 -> x2nrealloc_3;

	x2nrealloc_2 -> x2nrealloc_7;
	x2nrealloc_3 -> x2nrealloc_2 [label="!CF"];
	x2nrealloc_3 -> x2nrealloc_1 [label="CF"];
	x2nrealloc_4 -> x2nrealloc_3 [label="!ZF"];
	x2nrealloc_4 -> x2nrealloc_0 [label="ZF"];

	x2nrealloc_6 -> x2nrealloc_7;
	x2nrealloc_7 -> x2nrealloc_8;
	x2nrealloc_8 -> x2nrealloc_9;

	x2nrealloc_10 -> x2nrealloc_6 [label="!CF && !ZF"];
	x2nrealloc_10 -> x2nrealloc_5 [label="CF || ZF"];
	x2nrealloc_11 -> x2nrealloc_10 [label="!ZF"];
	x2nrealloc_11 -> x2nrealloc_4 [label="ZF"];
}
--------
--------
.dot code for CFG of text section x2nrealloc for Randomized
diGraph x2nrealloc_Randomized{
	x2nrealloc_0  [label="[x2nrealloc_5051,x2nrealloc_5066]"]
	x2nrealloc_1  [label="[x2nrealloc_5080,x2nrealloc_5080]"]
	x2nrealloc_2  [label="[.label_288,x2nrealloc_5083]"]
	x2nrealloc_3  [label="[.label_286,x2nrealloc_5079]"]
	x2nrealloc_4  [label="[x2nrealloc_5049,x2nrealloc_5050]"]
	x2nrealloc_5  [label="[x2nrealloc_5095,x2nrealloc_5095]"]
	x2nrealloc_6  [label="[.label_285,x2nrealloc_5104]"]
	x2nrealloc_7  [label="[.label_287,x2nrealloc_5116]"]
	x2nrealloc_8  [label="[x2nrealloc_5117,x2nrealloc_5117]"]
	x2nrealloc_9  [label="[x2nrealloc_5118,x2nrealloc_5121]"]
	x2nrealloc_10  [label="[.label_284,x2nrealloc_5094]"]
	x2nrealloc_11  [label="[x2nrealloc,x2nrealloc_5048]"]

	x2nrealloc_0 -> x2nrealloc_3;

	x2nrealloc_2 -> x2nrealloc_7;
	x2nrealloc_3 -> x2nrealloc_2 [label="!CF"];
	x2nrealloc_3 -> x2nrealloc_1 [label="CF"];
	x2nrealloc_4 -> x2nrealloc_3 [label="!ZF"];
	x2nrealloc_4 -> x2nrealloc_0 [label="ZF"];

	x2nrealloc_6 -> x2nrealloc_7;
	x2nrealloc_7 -> x2nrealloc_8;
	x2nrealloc_8 -> x2nrealloc_9;

	x2nrealloc_10 -> x2nrealloc_6 [label="!CF && !ZF"];
	x2nrealloc_10 -> x2nrealloc_5 [label="CF || ZF"];
	x2nrealloc_11 -> x2nrealloc_10 [label="!ZF"];
	x2nrealloc_11 -> x2nrealloc_4 [label="ZF"];
}
--------
Starting Node: 11

Edges: 0 ----> 3, , 2 ----> 7, 3 --!CF--> 2, 3 --CF--> 1, 4 --!ZF--> 3, 4 --ZF--> 0, , 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --!CF && !ZF--> 6, 10 --CF || ZF--> 5, 11 --!ZF--> 10, 11 --ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "x2nrealloc"
node 0:
RAX := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), RCX := AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1), RDX := (zextend(Value: 128,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RSI := (TakeBits: <63,8>(Reg: RSI) . AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1))
[(Var: RSP0 - Value: 40),8] := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
ZF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), CF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), SF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), OF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), PF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
node 1:
RAX := xalloc_die@()
node 2:
skip'
node 3:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])
node 4:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 5:
RAX := xalloc_die@()
node 6:
RAX := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
[(Var: RSP0 - Value: 40),8] := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
ZF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), CF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), SF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Val(11,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
ue: 40),8]) + Value: 1), OF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), PF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
node 7:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8])), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8]))
[Dereference: [(Var: RSP0 - Value: 24),8],8] := Dereference: [(Var: RSP0 - Value: 40),8]
node 8:
RAX := xrealloc@()
node 9:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 10:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])
node 11:
RDX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Dereference: [Reg: RSI,8]
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 11

Edges: 0 ----> 3, , 2 ----> 7, 3 --!CF--> 2, 3 --CF--> 1, 4 --!ZF--> 3, 4 --ZF--> 0, , 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --!CF && !ZF--> 6, 10 --CF || ZF--> 5, 11 --!ZF--> 10, 11 --ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "x2nrealloc"
node 0:
RAX := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), RCX := AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1), RDX := (zextend(Value: 128,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RSI := (TakeBits: <63,8>(Reg: RSI) . AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1))
[(Var: RSP0 - Value: 40),8] := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
ZF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), CF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), SF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), OF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), PF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
node 1:
RAX := xalloc_die@()
node 2:
skip'
node 3:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])
node 4:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)
node 5:
RAX := xalloc_die@()
node 6:
RAX := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
[(Var: RSP0 - Value: 40),8] := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
ZF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), CF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), SF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), OF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), PF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
node 7:
RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8])), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8]))
[Dereference: [(Var: RSP0 - Value: 24),8],8] := Dereference: [(Var: RSP0 - Value: 40),8]
node 8:
RAX := xrealloc@()
node 9:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 10:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])
node 11:
RDX := Dereference: [Reg: RSI,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Dereference: [Reg: RSI,8]
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: x2nrealloc -> x2nrealloc_3590 and x2nrealloc -> x2nrealloc_5048

same_behavior checking these two SStates:

SA || RDX := Dereference: [Reg: RSI,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Dereference: [Reg: RSI,8]
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || RDX := Dereference: [Reg: RSI,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Dereference: [Reg: RSI,8]
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_reg RSI) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_reg RSI) 8
Value B:
E_deref (E_reg RSI) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_reg RSI) 8
E_deref (E_reg RSI) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2nrealloc -> x2nrealloc_3590 and x2nrealloc -> x2nrealloc_5048 have been verified to do the same.

same_behavior for the nodes: .label_284 -> x2nrealloc_3622 and .label_284 -> x2nrealloc_5094

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])

SB || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_284 -> x2nrealloc_3622 and .label_284 -> x2nrealloc_5094 have been verified to do the same.

same_behavior for the nodes: .label_288 -> x2nrealloc_3629 and .label_285 -> x2nrealloc_5104

same_behavior checking these two SStates:

SA || RAX := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
SA || [(Var: RSP0 - Value: 40),8] := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
SA || ZF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), CF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), SF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), OF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), PF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)

SB || RAX := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
SB || [(Var: RSP0 - Value: 40),8] := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)
SB || ZF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), CF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), SF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), OF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1), PF := ((SHR(zextend(Dereference: [(Var: RSP0 - Value: 40),8],Value: 64),Value: 1) + Dereference: [(Var: RSP0 - Value: 40),8]) + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 64 (-1)],E_val 1 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8],E_val 1 64])]
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 64 (-1)],E_val 1 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8],E_val 1 64]
Value B:
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 64 (-1)],E_val 1 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8],E_val 1 64]
local_var_cmp called

local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 64 (-1)],E_val 1 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8],E_val 1 64]
E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_val 64 (-1)],E_val 1 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8],E_val 1 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_288 -> x2nrealloc_3629 and .label_285 -> x2nrealloc_5104 have been verified to do the same.

same_behavior for the nodes: .label_286 -> x2nrealloc_3637 and .label_287 -> x2nrealloc_5116

same_behavior checking these two SStates:

SA || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8])), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8]))
SA || [Dereference: [(Var: RSP0 - Value: 24),8],8] := Dereference: [(Var: RSP0 - Value: 40),8]

SB || RAX := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8])), RCX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := TakeBits: <63,0>(IMUL(Dereference: [(Var: RSP0 - Value: 40),8],Dereference: [(Var: RSP0 - Value: 32),8]))
SB || [Dereference: [(Var: RSP0 - Value: 24),8],8] := Dereference: [(Var: RSP0 - Value: 40),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]])]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8]]
local_var_cmp called

local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_286 -> x2nrealloc_3637 and .label_287 -> x2nrealloc_5116 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3638 -> x2nrealloc_3638 and x2nrealloc_5117 -> x2nrealloc_5117

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xrealloc" "") [])]
Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3638 -> x2nrealloc_3638 and x2nrealloc_5117 -> x2nrealloc_5117 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3639 -> x2nrealloc_3641 and x2nrealloc_5118 -> x2nrealloc_5121

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3639 -> x2nrealloc_3641 and x2nrealloc_5118 -> x2nrealloc_5121 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3623 -> x2nrealloc_3623 and x2nrealloc_5095 -> x2nrealloc_5095

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3623 -> x2nrealloc_3623 and x2nrealloc_5095 -> x2nrealloc_5095 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3591 -> x2nrealloc_3592 and x2nrealloc_5049 -> x2nrealloc_5050

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 40),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3591 -> x2nrealloc_3592 and x2nrealloc_5049 -> x2nrealloc_5050 have been verified to do the same.

same_behavior for the nodes: .label_287 -> x2nrealloc_3612 and .label_286 -> x2nrealloc_5079

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RCX := Value: 0, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8]), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)),Dereference: [(Var: RSP0 - Value: 40),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RDI,E_reg RDI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RCX,E_val 0 32),(RDX,E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_287 -> x2nrealloc_3612 and .label_286 -> x2nrealloc_5079 have been verified to do the same.

same_behavior for the nodes: .label_285 -> .label_285 and .label_288 -> x2nrealloc_5083

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_285 -> .label_285 and .label_288 -> x2nrealloc_5083 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3613 -> x2nrealloc_3613 and x2nrealloc_5080 -> x2nrealloc_5080

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3613 -> x2nrealloc_3613 and x2nrealloc_5080 -> x2nrealloc_5080 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3593 -> x2nrealloc_3605 and x2nrealloc_5051 -> x2nrealloc_5066

same_behavior checking these two SStates:

SA || RAX := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), RCX := AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1), RDX := (zextend(Value: 128,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RSI := (TakeBits: <63,8>(Reg: RSI) . AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1))
SA || [(Var: RSP0 - Value: 40),8] := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
SA || ZF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), CF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), SF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), OF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), PF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))

SB || RAX := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), RCX := AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1), RDX := (zextend(Value: 128,Value: 128) mod zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)), RSI := (TakeBits: <63,8>(Reg: RSI) . AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1))
SB || [(Var: RSP0 - Value: 40),8] := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))
SB || ZF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), CF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), SF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), OF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64))), PF := (sextend(AND(XOR((if (DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)) != Value: 0) then Value: 1 else Value: 0),Value: 255),Value: 1),32,64) + DIV(zextend(Value: 128,Value: 128),zextend(Dereference: [(Var: RSP0 - Value: 32),8],Value: 64)))

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]),(RCX,E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]])]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]),(RCX,E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]])]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]),(RCX,E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]])]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]),(RCX,E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]),(RDX,E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]),(RSI,E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]])]
Resulting values:
Value A:
E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]
Value B:
E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]
Value B:
E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]
local_var_cmp called

Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]
local_var_cmp called

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RSI],E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 8) (E_val 0 8),E_val 255 8],E_val 1 8]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]
E_app (Op ADD) [E_app (SExtend 32 64) [E_app (Op AND) [E_app (Op XOR) [E_ite (E_app (F !=) [E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]],E_val 0 64]) (E_val 1 32) (E_val 0 32),E_val 255 32],E_val 1 32]],E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 64 (-1)]]]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3593 -> x2nrealloc_3605 and x2nrealloc_5051 -> x2nrealloc_5066 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (39/60): "xrealloc"
--------
.dot code for CFG of text section xrealloc for Vanilla
diGraph xrealloc_Vanilla{
	xrealloc_0  [label="[xrealloc_3551,xrealloc_3551]"]
	xrealloc_1  [label="[xrealloc_3552,xrealloc_3552]"]
	xrealloc_2  [label="[xr(11,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == Var: RSP0 && RBP == Var: RBP0)])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
ealloc_3553,xrealloc_3554]"]
	xrealloc_3  [label="[xrealloc_3549,xrealloc_3550]"]
	xrealloc_4  [label="[xrealloc_3564,xrealloc_3564]"]
	xrealloc_5  [label="[xrealloc_3562,xrealloc_3563]"]
	xrealloc_6  [label="[.label_282,xrealloc_3567]"]
	xrealloc_7  [label="[.label_283,xrealloc_3572]"]
	xrealloc_8  [label="[.label_281,xrealloc_3557]"]
	xrealloc_9  [label="[xrealloc_3558,xrealloc_3558]"]
	xrealloc_10  [label="[xrealloc_3559,xrealloc_3561]"]
	xrealloc_11  [label="[xrealloc,xrealloc_3548]"]

	xrealloc_0 -> xrealloc_1;
	xrealloc_1 -> xrealloc_2;
	xrealloc_2 -> xrealloc_7;
	xrealloc_3 -> xrealloc_8 [label="ZF"];
	xrealloc_3 -> xrealloc_0 [label="!ZF"];

	xrealloc_5 -> xrealloc_6 [label="ZF"];
	xrealloc_5 -> xrealloc_4 [label="!ZF"];
	xrealloc_6 -> xrealloc_7;

	xrealloc_8 -> xrealloc_9;
	xrealloc_9 -> xrealloc_10;
	xrealloc_10 -> xrealloc_6 [label="!ZF"];
	xrealloc_10 -> xrealloc_5 [label="ZF"];
	xrealloc_11 -> xrealloc_8 [label="!ZF"];
	xrealloc_11 -> xrealloc_3 [label="ZF"];
}
--------
--------
.dot code for CFG of text section xrealloc for Randomized
diGraph xrealloc_Randomized{
	xrealloc_0  [label="[xrealloc_4995,xrealloc_4995]"]
	xrealloc_1  [label="[xrealloc_4996,xrealloc_4996]"]
	xrealloc_2  [label="[xrealloc_4997,xrealloc_4999]"]
	xrealloc_3  [label="[xrealloc_4991,xrealloc_4994]"]
	xrealloc_4  [label="[xrealloc_5014,xrealloc_5014]"]
	xrealloc_5  [label="[xrealloc_5015,xrealloc_5015]"]
	xrealloc_6  [label="[xrealloc_5010,xrealloc_5013]"]
	xrealloc_7  [label="[.label_282,xrealloc_5018]"]
	xrealloc_8  [label="[.label_283,xrealloc_5025]"]
	xrealloc_9  [label="[.label_281,xrealloc_5003]"]
	xrealloc_10  [label="[xrealloc_5004,xrealloc_5004]"]
	xrealloc_11  [label="[xrealloc_5005,xrealloc_5009]"]
	xrealloc_12  [label="[xrealloc,xrealloc_4990]"]

	xrealloc_0 -> xrealloc_1;
	xrealloc_1 -> xrealloc_2;
	xrealloc_2 -> xrealloc_8;
	xrealloc_3 -> xrealloc_9 [label="ZF"];
	xrealloc_3 -> xrealloc_0 [label="!ZF"];
	xrealloc_4 -> xrealloc_5;

	xrealloc_6 -> xrealloc_7 [label="ZF"];
	xrealloc_6 -> xrealloc_4 [label="!ZF"];
	xrealloc_7 -> xrealloc_8;

	xrealloc_9 -> xrealloc_10;
	xrealloc_10 -> xrealloc_11;
	xrealloc_11 -> xrealloc_7 [label="!ZF"];
	xrealloc_11 -> xrealloc_6 [label="ZF"];
	xrealloc_12 -> xrealloc_9 [label="!ZF"];
	xrealloc_12 -> xrealloc_3 [label="ZF"];
}
--------
Starting Node: 11

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 7, 3 --ZF--> 8, 3 --!ZF--> 0, , 5 --ZF--> 6, 5 --!ZF--> 4, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 --!ZF--> 6, 10 --ZF--> 5, 11 --!ZF--> 8, 11 --ZF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "xrealloc"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := free@()
node 2:
[(Var: RSP0 - Value: 16),8] := Value: 0
node 3:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)
node 4:
RAX := xalloc_die@()
node 5:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8]
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 8:
RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 9:
RAX := realloc@()
node 10:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 11:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI
ZF := CMP(Reg: RSI,Value: 0), CF := CMP(Reg: RSI,Value: 0), SF := CMP(Reg: RSI,Value: 0), OF := CMP(Reg: RSI,Value: 0), PF := CMP(Reg: RSI,Value: 0)
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 8, 3 --ZF--> 9, 3 --!ZF--> 0, 4 ----> 5, , 6 --ZF--> 7, 6 --!ZF--> 4, 7 ----> 8, , 9 ----> 10, 10 ----> 11, 11 --!ZF--> 7, 11 --ZF--> 6, 12 --!ZF--> 9, 12 --ZF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "xrealloc"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := free@()
node 2:
[(Var: RSP0 - Value: 16),8] := Value: 0
node 3:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)
node 4:
skip'
node 5:
RAX := xalloc_die@()
node 6:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8]
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 9:
RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 10:
RAX := realloc@()
node 11:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 12:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI
ZF := CMP(Reg: RSI,Value: 0), CF := CMP(Reg: RSI,Value: 0), SF := CMP(Reg: RSI,Value: 0), OF := CMP(Reg: RSI,Value: 0), PF := CMP(Reg: RSI,Value: 0)
--------

same_behavior for the nodes: xrealloc -> xrealloc_3548 and xrealloc -> xrealloc_4990

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI
SA || ZF := CMP(Reg: RSI,Value: 0), CF := CMP(Reg: RSI,Value: 0), SF := CMP(Reg: RSI,Value: 0), OF := CMP(Reg: RSI,Value: 0), PF := CMP(Reg: RSI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI
SB || ZF := CMP(Reg: RSI,Value: 0), CF := CMP(Reg: RSI,Value: 0), SF := CMP(Reg: RSI,Value: 0), OF := CMP(Reg: RSI,Value: 0), PF := CMP(Reg: RSI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xrealloc -> xrealloc_3548 and xrealloc -> xrealloc_4990 have been verified to do the same.

same_behavior for the nodes: .label_281 -> xrealloc_3557 and .label_281 -> xrealloc_5003

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_281 -> xrealloc_3557 and .label_281 -> xrealloc_5003 have been verified to do the same.

same_behavior for the nodes: xrealloc_3558 -> xrealloc_3558 and xrealloc_5004 -> xrealloc_5004

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "realloc" "") [])]
Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3558 -> xrealloc_3558 and xrealloc_5004 -> xrealloc_5004 have been verified to do the same.

same_behavior for the nodes: xrealloc_3559 -> xrealloc_3561 and xrealloc_5005 -> xrealloc_5009

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xrealloc_3559 -> xrealloc_3561 and xrealloc_5005 -> xrealloc_5009 have been verified to do the same.

same_behavior for the nodes: .label_282 -> xrealloc_3567 and .label_282 -> xrealloc_5018

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_282 -> xrealloc_3567 and .label_282 -> xrealloc_5018 have been verified to do the same.

same_behavior for the nodes: .label_283 -> xrealloc_3572 and .label_283 -> xrealloc_5025

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_283 -> xrealloc_3572 and .label_283 -> xrealloc_5025 have been verified to do the same.

same_behavior for the nodes: xrealloc_3562 -> xrealloc_3563 and xrealloc_5010 -> xrealloc_5013

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3562 -> xrealloc_3563 and xrealloc_5010 -> xrealloc_5013 have been verified to do the same.

same_behavior for the nodes: xrealloc_3564 -> xrealloc_3564 and xrealloc_5014 -> xrealloc_5014

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI)]

Register or Memory is not compatible
same_behavior for the nodes: xrealloc_3564 -> xrealloc_3564 and xrealloc_5015 -> xrealloc_5015

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3564 -> xrealloc_3564 and xrealloc_5015 -> xrealloc_5015 have been verified to do the same.

same_behavior for the nodes: xrealloc_3549 -> xrealloc_3550 and xrealloc_4991 -> xrealloc_4994

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3549 -> xrealloc_3550 and xrealloc_4991 -> xrealloc_4994 have been verified to do the same.

same_behavior for the nodes: xrealloc_3551 -> xrealloc_3551 and xrealloc_4995 -> xrealloc_4995

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3551 -> xr(3,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
ealloc_3551 and xrealloc_4995 -> xrealloc_4995 have been verified to do the same.

same_behavior for the nodes: xrealloc_3552 -> xrealloc_3552 and xrealloc_4996 -> xrealloc_4996

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3552 -> xrealloc_3552 and xrealloc_4996 -> xrealloc_4996 have been verified to do the same.

same_behavior for the nodes: xrealloc_3553 -> xrealloc_3554 and xrealloc_4997 -> xrealloc_4999

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 16),8] := Value: 0

SB || [(Var: RSP0 - Value: 16),8] := Value: 0

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xrealloc_3553 -> xrealloc_3554 and xrealloc_4997 -> xrealloc_4999 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (40/60): "xmalloc"
--------
.dot code for CFG of text section xmalloc for Vanilla
diGraph xmalloc_Vanilla{
	xmalloc_0  [label="[xmalloc_3500,xmalloc_3500]"]
	xmalloc_1  [label="[xmalloc_3498,xmalloc_3499]"]
	xmalloc_2  [label="[.label_279,xmalloc_3505]"]
	xmalloc_3  [label="[xmalloc,xmalloc_3493]"]
	xmalloc_4  [label="[xmalloc_3494,xmalloc_3494]"]
	xmalloc_5  [label="[xmalloc_3495,xmalloc_3497]"]


	xmalloc_1 -> xmalloc_2 [label="ZF"];
	xmalloc_1 -> xmalloc_0 [label="!ZF"];

	xmalloc_3 -> xmalloc_4;
	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_2 [label="!ZF"];
	xmalloc_5 -> xmalloc_1 [label="ZF"];
}
--------
--------
.dot code for CFG of text section xmalloc for Randomized
diGraph xmalloc_Randomized{
	xmalloc_0  [label="[xmalloc_4919,xmalloc_4919]"]
	xmalloc_1  [label="[xmalloc_4920,xmalloc_4920]"]
	xmalloc_2  [label="[xmalloc_4916,xmalloc_4918]"]
	xmalloc_3  [label="[.label_279,xmalloc_4927]"]
	xmalloc_4  [label="[xmalloc,xmalloc_4909]"]
	xmalloc_5  [label="[xmalloc_4910,xmalloc_4910]"]
	xmalloc_6  [label="[xmalloc_4911,xmalloc_4915]"]

	xmalloc_0 -> xmalloc_1;

	xmalloc_2 -> xmalloc_3 [label="ZF"];
	xmalloc_2 -> xmalloc_0 [label="!ZF"];

	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_6;
	xmalloc_6 -> xmalloc_3 [label="!ZF"];
	xmalloc_6 -> xmalloc_2 [label="ZF"];
}
--------
Starting Node: 3

Edges: , 1 --ZF--> 2, 1 --!ZF--> 0, , 3 ----> 4, 4 ----> 5, 5 --!ZF--> 2, 5 --ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 4:
RAX := malloc@()
node 5:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

Starting Node: 4

Edges: 0 ----> 1, , 2 --ZF--> 3, 2 --!ZF--> 0, , 4 ----> 5, 5 ----> 6, 6 --!ZF--> 3, 6 --ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "xmalloc"
node 0:
skip'
node 1:
RAX := xalloc_die@()
node 2:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 4:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 5:
RAX := malloc@()
node 6:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

same_behavior for the nodes: xmalloc -> xmalloc_3493 and xmalloc -> xmalloc_4909

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmalloc -> xmalloc_3493 and xmalloc -> xmalloc_4909 have been verified to do the same.

same_behavior for the nodes: xmalloc_3494 -> xmalloc_3494 and xmalloc_4910 -> xmalloc_4910

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "malloc" "") [])]
Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3494 -> xmalloc_3494 and xmalloc_4910 -> xmalloc_4910 have been verified to do the same.

same_behavior for the nodes: xmalloc_3495 -> xmalloc_3497 and xmalloc_4911 -> xmalloc_4915

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmalloc_3495 -> xmalloc_3497 and xmalloc_4911 -> xmalloc_4915 have been verified to do the same.

same_behavior for the nodes: .label_279 -> xmalloc_3505 and .label_279 -> xmalloc_4927

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 8), CF (9,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
:= (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_279 -> xmalloc_3505 and .label_279 -> xmalloc_4927 have been verified to do the same.

same_behavior for the nodes: xmalloc_3498 -> xmalloc_3499 and xmalloc_4916 -> xmalloc_4918

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3498 -> xmalloc_3499 and xmalloc_4916 -> xmalloc_4918 have been verified to do the same.

same_behavior for the nodes: xmalloc_3500 -> xmalloc_3500 and xmalloc_4919 -> xmalloc_4919

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || skip'

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]
Nothing: RAX
Show memory of SState: fromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI)]

Register or Memory is not compatible
same_behavior for the nodes: xmalloc_3500 -> xmalloc_3500 and xmalloc_4920 -> xmalloc_4920

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "xalloc_die" "") [])]
Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3500 -> xmalloc_3500 and xmalloc_4920 -> xmalloc_4920 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (41/60): "quotearg_buffer"
--------
.dot code for CFG of text section quotearg_buffer for Vanilla
diGraph quotearg_buffer_Vanilla{
	quotearg_buffer_0  [label="[quotearg_buffer_609,quotearg_buffer_611]"]
	quotearg_buffer_1  [label="[.label_38,quotearg_buffer_615]"]
	quotearg_buffer_2  [label="[.label_39,quotearg_buffer_618]"]
	quotearg_buffer_3  [label="[quotearg_buffer_619,quotearg_buffer_619]"]
	quotearg_buffer_4  [label="[quotearg_buffer_620,quotearg_buffer_638]"]
	quotearg_buffer_5  [label="[quotearg_buffer_639,quotearg_buffer_639]"]
	quotearg_buffer_6  [label="[quotearg_buffer_640,quotearg_buffer_642]"]
	quotearg_buffer_7  [label="[quotearg_buffer_643,quotearg_buffer_643]"]
	quotearg_buffer_8  [label="[quotearg_buffer_644,quotearg_buffer_649]"]
	quotearg_buffer_9  [label="[quotearg_buffer,quotearg_buffer_608]"]

	quotearg_buffer_0 -> quotearg_buffer_2;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;
	quotearg_buffer_4 -> quotearg_buffer_5;
	quotearg_buffer_5 -> quotearg_buffer_6;
	quotearg_buffer_6 -> quotearg_buffer_7;
	quotearg_buffer_7 -> quotearg_buffer_8;

	quotearg_buffer_9 -> quotearg_buffer_1 [label="ZF"];
	quotearg_buffer_9 -> quotearg_buffer_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_buffer for Randomized
diGraph quotearg_buffer_Randomized{
	quotearg_buffer_0  [label="[quotearg_buffer_847,quotearg_buffer_850]"]
	quotearg_buffer_1  [label="[.label_38,quotearg_buffer_855]"]
	quotearg_buffer_2  [label="[.label_39,quotearg_buffer_859]"]
	quotearg_buffer_3  [label="[quotearg_buffer_860,quotearg_buffer_860]"]
	quotearg_buffer_4  [label="[quotearg_buffer_861,quotearg_buffer_886]"]
	quotearg_buffer_5  [label="[quotearg_buffer_887,quotearg_buffer_887]"]
	quotearg_buffer_6  [label="[quotearg_buffer_888,quotearg_buffer_893]"]
	quotearg_buffer_7  [label="[quotearg_buffer_894,quotearg_buffer_894]"]
	quotearg_buffer_8  [label="[quotearg_buffer_895,quotearg_buffer_902]"]
	quotearg_buffer_9  [label="[quotearg_buffer,quotearg_buffer_846]"]

	quotearg_buffer_0 -> quotearg_buffer_2;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;
	quotearg_buffer_4 -> quotearg_buffer_5;
	quotearg_buffer_5 -> quotearg_buffer_6;
	quotearg_buffer_6 -> quotearg_buffer_7;
	quotearg_buffer_7 -> quotearg_buffer_8;

	quotearg_buffer_9 -> quotearg_buffer_1 [label="ZF"];
	quotearg_buffer_9 -> quotearg_buffer_0 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 1, 9 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_buffer"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 48),8]
[(Var: RSP0 - Value: 80),8] := Dereference: [(Var: RSP0 - Value: 48),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 80),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 80),8]
node 3:
RAX := __errno_location@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
R8 := Dereference: [(Var: RSP0 - Value: 60),4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [(Var: RSP0 - Value: 60),4]
node 7:
RAX := __errno_location@()
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], R8 := Dereference: [(Var: RSP0 - Value: 84),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 9:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8
ZF := CMP(Reg: R8,Value: 0), CF := CMP(Reg: R8,Value: 0), SF := CMP(Reg: R8,Value: 0), OF := CMP(Reg: R8,Value: 0), PF (9,fromList [(0,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 120) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
:= CMP(Reg: R8,Value: 0)
--------

Starting Node: 9

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 1, 9 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_buffer"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 48),8]
[(Var: RSP0 - Value: 80),8] := Dereference: [(Var: RSP0 - Value: 48),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 80),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 80),8]
node 3:
RAX := __errno_location@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
[(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
R8 := Dereference: [(Var: RSP0 - Value: 60),4]
[(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [(Var: RSP0 - Value: 60),4]
node 7:
RAX := __errno_location@()
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], R8 := Dereference: [(Var: RSP0 - Value: 84),4]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 9:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8
ZF := CMP(Reg: R8,Value: 0), CF := CMP(Reg: R8,Value: 0), SF := CMP(Reg: R8,Value: 0), OF := CMP(Reg: R8,Value: 0), PF := CMP(Reg: R8,Value: 0)
--------

same_behavior for the nodes: quotearg_buffer -> quotearg_buffer_608 and quotearg_buffer -> quotearg_buffer_846

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8
SA || ZF := CMP(Reg: R8,Value: 0), CF := CMP(Reg: R8,Value: 0), SF := CMP(Reg: R8,Value: 0), OF := CMP(Reg: R8,Value: 0), PF := CMP(Reg: R8,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8
SB || ZF := CMP(Reg: R8,Value: 0), CF := CMP(Reg: R8,Value: 0), SF := CMP(Reg: R8,Value: 0), OF := CMP(Reg: R8,Value: 0), PF := CMP(Reg: R8,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer -> quotearg_buffer_608 and quotearg_buffer -> quotearg_buffer_846 have been verified to do the same.

same_behavior for the nodes: .label_38 -> quotearg_buffer_615 and .label_38 -> quotearg_buffer_855

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 80),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 80),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_38 -> quotearg_buffer_615 and .label_38 -> quotearg_buffer_855 have been verified to do the same.

same_behavior for the nodes: .label_39 -> quotearg_buffer_618 and .label_39 -> quotearg_buffer_859

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 80),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 80),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_39 -> quotearg_buffer_618 and .label_39 -> quotearg_buffer_859 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_619 -> quotearg_buffer_619 and quotearg_buffer_860 -> quotearg_buffer_860

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_619 -> quotearg_buffer_619 and quotearg_buffer_860 -> quotearg_buffer_860 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_620 -> quotearg_buffer_638 and quotearg_buffer_861 -> quotearg_buffer_886

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SA || [(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R11 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], R10 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], R9 := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 4),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 56),8],4]
SB || [(Var: RSP0 - Value: 60),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 56),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 8)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R11fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R10fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R11,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8),(R10,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8),(R9,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4),(R8,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 4 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_620 -> quotearg_buffer_638 and quotearg_buffer_861 -> quotearg_buffer_886 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_639 -> quotearg_buffer_639 and quotearg_buffer_887 -> quotearg_buffer_887

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "quotearg_buffer_restyled" "") [])]
Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_639 -> quotearg_buffer_639 and quotearg_buffer_887 -> quotearg_buffer_887 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_640 -> quotearg_buffer_642 and quotearg_buffer_888 -> quotearg_buffer_893

same_behavior checking these two SStates:

SA || R8 := Dereference: [(Var: RSP0 - Value: 60),4]
SA || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [(Var: RSP0 - Value: 60),4]

SB || R8 := Dereference: [(Var: RSP0 - Value: 60),4]
SB || [(Var: RSP0 - Value: 72),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [(Var: RSP0 - Value: 60),4]

reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RSI,E_reg RSI),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_640 -> quotearg_buffer_642 and quotearg_buffer_888 -> quotearg_buffer_893 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_643 -> quotearg_buffer_643 and quotearg_buffer_894 -> quotearg_buffer_894

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__errno_location" "") [])]
Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_643 -> quotearg_buffer_643 and quotearg_buffer_894 -> quotearg_buffer_894 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_644 -> quotearg_buffer_649 and quotearg_buffer_895 -> quotearg_buffer_902

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], R8 := Dereference: [(Var: RSP0 - Value: 84),4]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 84),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], R8 := Dereference: [(Var: RSP0 - Value: 84),4]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 84),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4)]
reg_chk debug R8fromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_buffer_644 -> quotearg_buffer_649 and quotearg_buffer_895 -> quotearg_buffer_902 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_609 -> quotearg_buffer_611 and quotearg_buffer_847 -> quotearg_buffer_850

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 48),8]
SA || [(Var: RSP0 - Value: 80),8] := Dereference: [(Var: RSP0 - Value: 48),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 48),8]
SB || [(Var: RSP0 - Value: 80),8] := Dereference: [(Var: RSP0 - Value: 48),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_609 -> quotearg_buffer_611 and quotearg_buffer_847 -> quotearg_buffer_850 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84),(Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 80),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (42/60): "main"
--------
.dot code for CFG of text section main for Vanilla
diGraph main_Vanilla{
	main_0  [label="[main_192,main_192]"]
	main_1  [label="[main_193,main_193]"]
	main_2  [label="[main_202,main_209]"]
	main_3  [label="[main_210,main_210]"]
	main_4  [label="[.label_14,.label_14]"]
	main_5  [label="[.label_15,main_198]"]
	main_6  [label="[main_199,main_199]"]
	main_7  [label="[main_200,main_201]"]
	main_8  [label="[main_168,main_169]"]
	main_9  [label="[main_170,main_170]"]
	main_10  [label="[main_171,main_172]"]
	main_11  [label="[main_173,main_173]"]
	main_12  [label="[main_174,main_176]"]
	main_13  [label="[main_177,main_177]"]
	main_14  [label="[main_178,main_179]"]
	main_15  [label="[main_180,main_180]"]
	main_16  [label="[main_181,main_182]"]
	main_17  [label="[main_183,main_183]"]
	main_18  [label="[main_184,main_188]"]
	main_19  [label="[main_189,main_189]"]
	main_20  [label="[main_190,main_191]"]
	main_21  [label="[.label_13,main_217]"]
	main_22  [label="[main,main_167]"]

	main_0 -> main_1;

	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_21;
	main_5 -> main_6;
	main_6 -> main_7;
	main_7 -> main_4 [label="!ZF"];
	main_7 -> main_2 [label="ZF"];
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_20;
	main_20 -> main_5 [label="!ZF"];
	main_20 -> main_0 [label="ZF"];

	main_22 -> main_21 [label="!ZF"];
	main_22 -> main_8 [label="ZF"];
}
--------
--------
.dot code for CFG of text section main for Randomized
diGraph main_Randomized{
	main_0  [label="[main_256,main_256]"]
	main_1  [label="[main_257,main_257]"]
	main_2  [label="[main_270,main_282]"]
	main_3  [label="[main_283,main_283]"]
	main_4  [label="[.label_14,.label_14]"]
	main_5  [label="[.label_15,main_264]"]
	main_6  [label="[main_265,main_265]"]
	main_7  [label="[main_266,main_269]"]
	main_8  [label="[main_221,main_224]"]
	main_9  [label="[main_225,main_225]"]
	main_10  [label="[main_226,main_228]"]
	main_11  [label="[main_229,main_229]"]
	main_12  [label="[main_230,main_235]"]
	main_13  [label="[main_236,main_236]"]
	main_14  [label="[main_237,main_239]"]
	main_15  [label="[main_240,main_240]"]
	main_16  [label="[main_241,main_244]"]
	main_17  [label="[main_245,main_245]"]
	main_18  [label="[main_246,main_250]"]
	main_19  [label="[main_251,main_251]"]
	main_20  [label="[main_252,main_255]"]
	main_21  [label="[.label_13,main_292]"]
	mai(22,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == Var: RSP0 && RBP == Var: RBP0)])
(22,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == Var: RSP0 && RBP == Var: RBP0)])
n_22  [label="[main,main_220]"]

	main_0 -> main_1;

	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_21;
	main_5 -> main_6;
	main_6 -> main_7;
	main_7 -> main_4 [label="!ZF"];
	main_7 -> main_2 [label="ZF"];
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_20;
	main_20 -> main_5 [label="!ZF"];
	main_20 -> main_0 [label="ZF"];

	main_22 -> main_21 [label="!ZF"];
	main_22 -> main_8 [label="ZF"];
}
--------
Starting Node: 22

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 21, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 4, 7 --ZF--> 2, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 --!ZF--> 5, 20 --ZF--> 0, , 22 --!ZF--> 21, 22 --ZF--> 8

Symbolic Execution for Binary "Vanilla":
Current text section: "main"
node 0:
RDI := Value: 1
node 1:
RAX := usage@()
node 2:
RAX := Value: 0, RCX := Dereference: [Var: Version,8], RDX := Dereference: [Var: .str.17,8], RDI := Dereference: [Var: stdout,8], RSI := Dereference: [Var: .str.6,8], R9 := Value: 0, R8 := Dereference: [Var: .str.13,8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := version_etc@()
node 4:
skip'
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := Dereference: [Var: .str.11,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.11,4]
node 6:
RAX := strcmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],8]
node 9:
RAX := set_program_name@()
node 10:
RDI := Value: 6, RSI := Dereference: [Var: .str_0,8]
node 11:
RAX := setlocale@()
node 12:
RDI := Dereference: [Var: .str.8,8], RSI := Dereference: [Var: .str.9,8]
[(Var: RSP0 - Value: 32),8] := Reg: RAX
node 13:
RAX := bindtextdomain@()
node 14:
RDI := Dereference: [Var: .str.8,8]
[(Var: RSP0 - Value: 40),8] := Reg: RAX
node 15:
RAX := textdomain@()
node 16:
RDI := Dereference: [Var: close_stdout,8]
[(Var: RSP0 - Value: 48),8] := Reg: RAX
node 17:
RAX := atexit@()
node 18:
RCX := Dereference: [Var: .str.10,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
[(Var: RSP0 - Value: 52),4] := TakeBits: <31,0>(Reg: RAX)
node 19:
RAX := strcmp@()
node 20:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 21:
RAX := Value: 1
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 22:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

Starting Node: 22

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 21, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 4, 7 --ZF--> 2, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 --!ZF--> 5, 20 --ZF--> 0, , 22 --!ZF--> 21, 22 --ZF--> 8

Symbolic Execution for Binary "Randomized":
Current text section: "main"
node 0:
RDI := Value: 1
node 1:
RAX := usage@()
node 2:
RAX := Value: 0, RCX := Dereference: [Var: Version,8], RDX := Dereference: [Var: .str.17,8], RDI := Dereference: [Var: stdout,8], RSI := Dereference: [Var: .str.6,8], R9 := Value: 0, R8 := Dereference: [Var: .str.13,8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := version_etc@()
node 4:
skip'
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := Dereference: [Var: .str.11,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.11,4]
node 6:
RAX := strcmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],8]
node 9:
RAX := set_program_name@()
node 10:
RDI := Value: 6, RSI := Dereference: [Var: .str_0,8]
node 11:
RAX := setlocale@()
node 12:
RDI := Dereference: [Var: .str.8,8], RSI := Dereference: [Var: .str.9,8]
[(Var: RSP0 - Value: 32),8] := Reg: RAX
node 13:
RAX := bindtextdomain@()
node 14:
RDI := Dereference: [Var: .str.8,8]
[(Var: RSP0 - Value: 40),8] := Reg: RAX
node 15:
RAX := textdomain@()
node 16:
RDI := Dereference: [Var: close_stdout,8]
[(Var: RSP0 - Value: 48),8] := Reg: RAX
node 17:
RAX := atexit@()
node 18:
RCX := Dereference: [Var: .str.10,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
[(Var: RSP0 - Value: 52),4] := TakeBits: <31,0>(Reg: RAX)
node 19:
RAX := strcmp@()
node 20:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 21:
RAX := Value: 1
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 22:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

same_behavior for the nodes: main -> main_167 and main -> main_220

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Value: 0, [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 24),8] := Reg: RSI
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main -> main_167 and main -> main_220 have been verified to do the same.

same_behavior for the nodes: .label_13 -> main_217 and .label_13 -> main_292

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Value: 1
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_val 1 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_13 -> main_217 and .label_13 -> main_292 have been verified to do the same.

same_behavior for the nodes: main_168 -> main_169 and main_221 -> main_224

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RDI := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 8),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 8
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_168 -> main_169 and main_221 -> main_224 have been verified to do the same.

same_behavior for the nodes: main_170 -> main_170 and main_225 -> main_225

same_behavior checking these two SStates:

SA || RAX := set_program_name@()

SB || RAX := set_program_name@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "set_program_name" "") [])]
Resulting values:
Value A:
E_app (F2 "set_program_name" "") []
Value B:
E_app (F2 "set_program_name" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_170 -> main_170 and main_225 -> main_225 have been verified to do the same.

same_behavior for the nodes: main_171 -> main_172 and main_226 -> main_228

same_behavior checking these two SStates:

SA || RDI := Value: 6, RSI := Dereference: [Var: .str_0,8]

SB || RDI := Value: 6, RSI := Dereference: [Var: .str_0,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 6 32),(RSI,E_deref (E_var ".str_0" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_val 6 32),(RSI,E_deref (E_var ".str_0" 64) 8)]
Resulting values:
Value A:
E_val 6 32
Value B:
E_val 6 32
Resulting values:
Value A:
E_deref (E_var ".str_0" 64) 8
Value B:
E_deref (E_var ".str_0" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_171 -> main_172 and main_226 -> main_228 have been verified to do the same.

same_behavior for the nodes: main_173 -> main_173 and main_229 -> main_229

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "setlocale" "") [])]
Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_173 -> main_173 and main_229 -> main_229 have been verified to do the same.

same_behavior for the nodes: main_174 -> main_176 and main_230 -> main_235

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.8,8], RSI := Dereference: [Var: .str.9,8]
SA || [(Var: RSP0 - Value: 32),8] := Reg: RAX

SB || RDI := Dereference: [Var: .str.8,8], RSI := Dereference: [Var: .str.9,8]
SB || [(Var: RSP0 - Value: 32),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 8),(RSI,E_deref (E_var ".str.9" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 8),(RSI,E_deref (E_var ".str.9" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.8" 64) 8
Value B:
E_deref (E_var ".str.8" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str.9" 64) 8
Value B:
E_deref (E_var ".str.9" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main_174 -> main_176 and main_230 -> main_235 have been verified to do the same.

same_behavior for the nodes: main_177 -> main_177 and main_236 -> main_236

same_behavior checking these two SStates:

SA || RAX := bindtextdomain@()

SB || RAX := bindtextdomain@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "bindtextdomain" "") [])]
Resulting values:
Value A:
E_app (F2 "bindtextdomain" "") []
Value B:
E_app (F2 "bindtextdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_177 -> main_177 and main_236 -> main_236 have been verified to do the same.

same_behavior for the nodes: main_178 -> main_179 and main_237 -> main_239

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.8,8]
SA || [(Var: RSP0 - Value: 40),8] := Reg: RAX

SB || RDI := Dereference: [Var: .str.8,8]
SB || [(Var: RSP0 - Value: 40),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.8" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.8" 64) 8
Value B:
E_deref (E_var ".str.8" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main_178 -> main_179 and main_237 -> main_239 have been verified to do the same.

same_behavior for the nodes: main_180 -> main_180 and main_240 -> main_240

same_behavior checking these two SStates:

SA || RAX := textdomain@()

SB || RAX := textdomain@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "textdomain" "") [])]
Resulting values:
Value A:
E_app (F2 "textdomain" "") []
Value B:
E_app (F2 "textdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_180 -> main_180 and main_240 -> main_240 have been verified to do the same.

same_behavior for the nodes: main_181 -> main_182 and main_241 -> main_244

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: close_stdout,8]
SA || [(Var: RSP0 - Value: 48),8] := Reg: RAX

SB || RDI := Dereference: [Var: close_stdout,8]
SB || [(Var: RSP0 - Value: 48),8] := Reg: RAX

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var "close_stdout" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "close_stdout" 64) 8
Value B:
E_deref (E_var "close_stdout" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main_181 -> main_182 and main_241 -> main_244 have been verified to do the same.

same_behavior for the nodes: main_183 -> main_183 and main_245 -> main_245

same_behavior checking these two SStates:

SA || RAX := atexit@()

SB || RAX := atexit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "atexit" "") [])]
Resulting values:
Value A:
E_app (F2 "atexit" "") []
Value B:
E_app (F2 "atexit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_183 -> main_183 and main_245 -> main_245 have been verified to do the same.

same_behavior for the nodes: main_184 -> main_188 and main_246 -> main_250

same_behavior checking these two SStates:

SA || RCX := Dereference: [Var: .str.10,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
SA || [(Var: RSP0 - Value: 52),4] := TakeBits: <31,0>(Reg: RAX)

SB || RCX := Dereference: [Var: .str.10,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.10,4]
SB || [(Var: RSP0 - Value: 52),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var ".str.10" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var ".str.10" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_var ".str.10" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.10" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.10" 64) 4
Value B:
E_deref (E_var ".str.10" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.10" 64) 4
Value B:
E_deref (E_var ".str.10" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main_184 -> main_188 and main_246 -> main_250 have been verified to do the same.

same_behavior for the nodes: main_189 -> main_189 and main_251 -> main_251

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_189 -> main_189 and main_251 -> main_251 have been verified to do the same.

same_behavior for the nodes: main_190 -> main_191 and main_252 -> main_255

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_190 -> main_191 and main_252 -> main_255 have been verified to do the same.

same_behavior for the nodes: .label_15 -> main_198 and .label_15 -> main_264

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := Dereference: [Var: .str.11,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.11,4]

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8], RCX := Dereference: [Var: .str.11,4], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 8),8], RSI := Dereference: [Var: .str.11,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_deref (E_var ".str.11" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.11" 64) 4)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_deref (E_var ".str.11" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.11" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_deref (E_var ".str.11" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.11" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RCX,E_deref (E_var ".str.11" 64) 4),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8),(RSI,E_deref (E_var ".str.11" 64) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.11" 64) 4
Value B:
E_deref (E_var ".str.11" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.11" 64) 4
Value B:
E_deref (E_var ".str.11" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_15 -> main_198 and .label_15 -> main_264 have been verified to do the same.

same_behavior for the nodes: main_199 -> main_199 and main_265 -> main_265

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_199 -> main_199 and main_265 -> main_265 have been verified to do the same.

same_behavior for the nodes: main_200 -> main_201 and main_266 -> main_269

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_200 -> main_201 and main_266 -> main_269 have been verified to do the same.

same_behavior for the nodes: .label_14 -> .label_14 and .label_14 -> .label_14

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_14 -> .label_14 and .label_14 -> .label_14 have been verified to do the same.

same_behavior for the nodes: main_202 -> main_209 and main_270 -> main_282

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: Version,8], RDX := Dereference: [Var: .str.17,8], RDI := Dereference: [Var: stdout,8], RSI := Dereference: [Var: .str.6,8], R9 := Value: 0, R8 := Dereference: [Var: .str.13,8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: Version,8], RDX := Dereference: [Var: .str.17,8], RDI := Dereference: [Var(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
: stdout,8], RSI := Dereference: [Var: .str.6,8], R9 := Value: 0, R8 := Dereference: [Var: .str.13,8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RAX,E_val 0 8),(RCX,E_deref (E_var "Version" 64) 8),(RDX,E_deref (E_var ".str.17" 64) 8),(RDI,E_deref (E_var "stdout" 64) 8),(RSI,E_deref (E_var ".str.6" 64) 8),(R9,E_val 0 32),(R8,E_deref (E_var ".str.13" 64) 8)]
Resulting values:
Value A:
E_val 0 8
Value B:
E_val 0 8
Resulting values:
Value A:
E_deref (E_var "Version" 64) 8
Value B:
E_deref (E_var "Version" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str.17" 64) 8
Value B:
E_deref (E_var ".str.17" 64) 8
Resulting values:
Value A:
E_deref (E_var "stdout" 64) 8
Value B:
E_deref (E_var "stdout" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 8
Value B:
E_deref (E_var ".str.6" 64) 8
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var ".str.13" 64) 8
Value B:
E_deref (E_var ".str.13" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_202 -> main_209 and main_270 -> main_282 have been verified to do the same.

same_behavior for the nodes: main_210 -> main_210 and main_283 -> main_283

same_behavior checking these two SStates:

SA || RAX := version_etc@()

SB || RAX := version_etc@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "version_etc" "") [])]
Resulting values:
Value A:
E_app (F2 "version_etc" "") []
Value B:
E_app (F2 "version_etc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_210 -> main_210 and main_283 -> main_283 have been verified to do the same.

same_behavior for the nodes: main_192 -> main_192 and main_256 -> main_256

same_behavior checking these two SStates:

SA || RDI := Value: 1

SB || RDI := Value: 1

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_val 1 32)]
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_192 -> main_192 and main_256 -> main_256 have been verified to do the same.

same_behavior for the nodes: main_193 -> main_193 and main_257 -> main_257

same_behavior checking these two SStates:

SA || RAX := usage@()

SB || RAX := usage@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "usage" "") [])]
Resulting values:
Value A:
E_app (F2 "usage" "") []
Value B:
E_app (F2 "usage" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_193 -> main_193 and main_257 -> main_257 have been verified to do the same.

Label relationship:
.str.13 <--> .str.13
.str.6 <--> .str.6
stdout <--> stdout
.str.17 <--> .str.17
Version <--> Version
.str.11 <--> .str.11
.str.10 <--> .str.10
close_stdout <--> close_stdout
.str.9 <--> .str.9
.str.8 <--> .str.8
.str_0 <--> .str_0
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 52) <--> (Var: RSP0 - Value: 52)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (43/60): "rpl_nl_langinfo"
--------
.dot code for CFG of text section rpl_nl_langinfo for Vanilla
diGraph rpl_nl_langinfo_Vanilla{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo_4227,rpl_nl_langinfo_4233]"]
	rpl_nl_langinfo_1  [label="[.label_320,.label_320]"]
	rpl_nl_langinfo_2  [label="[.label_321,.label_321]"]
	rpl_nl_langinfo_3  [label="[rpl_nl_langinfo_4238,rpl_nl_langinfo_4238]"]
	rpl_nl_langinfo_4  [label="[rpl_nl_langinfo_4239,rpl_nl_langinfo_4241]"]
	rpl_nl_langinfo_5  [label="[rpl_nl_langinfo,rpl_nl_langinfo_4226]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_2;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;
	rpl_nl_langinfo_2 -> rpl_nl_langinfo_3;
	rpl_nl_langinfo_3 -> rpl_nl_langinfo_4;

	rpl_nl_langinfo_5 -> rpl_nl_langinfo_1 [label="!CF && !ZF"];
	rpl_nl_langinfo_5 -> rpl_nl_langinfo_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section rpl_nl_langinfo for Randomized
diGraph rpl_nl_langinfo_Randomized{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo_5924,rpl_nl_langinfo_5932]"]
	rpl_nl_langinfo_1  [label="[.label_320,rpl_nl_langinfo_5935]"]
	rpl_nl_langinfo_2  [label="[.label_321,.label_321]"]
	rpl_nl_langinfo_3  [label="[rpl_nl_langinfo_5938,rpl_nl_langinfo_5938]"]
	rpl_nl_langinfo_4  [label="[rpl_nl_langinfo_5939,rpl_nl_langinfo_5942]"]
	rpl_nl_langinfo_5  [label="[rpl_nl_langinfo,rpl_nl_langinfo_5923]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_2;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;
	rpl_nl_langinfo_2 -> rpl_nl_langinfo_3;
	rpl_nl_langinfo_3 -> rpl_nl_langinfo_4;

	rpl_nl_langinfo_5 -> rpl_nl_langinfo_1 [label="!CF && !ZF"];
	rpl_nl_langinfo_5 -> rpl_nl_langinfo_0 [label="CF || ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, , 5 --!CF && !ZF--> 1, 5 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
[(Var: RSP0 - Value: 12),4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
node 1:
skip'
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 12),4]
node 3:
RAX := nl_langinfo@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
ZF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), CF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), SF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), OF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), PF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
--------

Starting Node: 5

Edges: 0 ----> 2, 1 ----> 2, 2 ----> 3, 3 ----> 4, , 5 --!CF && !ZF--> 1, 5 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
[(Var: RSP0 - Value: 12),4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
node 1:
skip'
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 12),4]
node 3:
RAX := nl_langinfo@()
node 4:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 5:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
ZF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), CF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), SF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), OF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), PF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
--------

same_behavior for the nodes: rpl_nl_langinfo -> rpl_nl_langinfo_4226 and rpl_nl_langinfo -> rpl_nl_langinfo_5923

same_behavior checking these two SStates:

SA || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
SA || ZF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), CF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), SF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), OF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), PF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)

SB || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 16),4] := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)
SB || ZF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), CF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), SF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), OF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085), PF := (TakeBits: <31,0>(Reg: RDI) + Value: 4294957085)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 4294957085 32]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 4294957085 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 4294957085 32]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 4294957085 32]
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 4294957085 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo -> rpl_nl_langinfo_4226 and rpl_nl_langinfo -> rpl_nl_langinfo_5923 have been verified to do the same.

same_behavior for the nodes: .label_320 -> .label_320 and .label_320 -> rpl_nl_langinfo_5935

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_320 -> .label_320 and .label_320 -> rpl_nl_langinfo_5935 have been verified to do the same.

same_behavior for the nodes: .label_321 -> .label_321 and .label_321 -> .label_321

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 12),4]

SB || RDI := Dereference: [(Var: RSP0 - Value: 12),4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_321 -> .label_321 and .label_321 -> .label_321 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_4238 -> rpl_nl_langinfo_4238 and rpl_nl_langinfo_5938 -> rpl_nl_langinfo_5938

same_behavior checking these two SStates:

SA || RAX := nl_langinfo@()

SB || RAX := nl_langinfo@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "nl_langinfo" "") [])]
Resulting values:
Value A:
E_app (F2 "nl_langinfo" "") []
Value B:
E_app (F2 "nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_4238 -> rpl_nl_langinfo_4238 and rpl_nl_langinfo_5938 -> rpl_nl_langinfo_5938 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_4239 -> rpl_nl_langinfo_4241 and rpl_nl_langinfo_5939 -> rpl_nl_langinfo_5942

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_4239 -> rpl_nl_langinfo_4241 and rpl_nl_langinfo_5939 -> rpl_nl_langinfo_5942 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_4227 -> rpl_nl_langinfo_4233 and rpl_nl_langinfo_5924 -> rpl_nl_langinfo_5932

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
SA || [(Var: RSP0 - Value: 12),4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
SB || [(Var: RSP0 - Value: 12),4] := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), CF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), SF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), OF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898), PF := (Dereference: [(Var: RSP0 - Value: 12),4] + Value: 120898)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 120898 32])]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 120898 32]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 120898 32]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 120898 32]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4,E_val 120898 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_4227 -> rpl_nl_langinfo_4233 and rpl_nl_langinfo_5924 -> rpl_nl_langinfo_5932 (13,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == Var: RSP0 && RBP == Var: RBP0)])
(13,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == Var: RSP0 && RBP == Var: RBP0)])
have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (44/60): "rpl_fseeko"
--------
.dot code for CFG of text section rpl_fseeko for Vanilla
diGraph rpl_fseeko_Vanilla{
	rpl_fseeko_0  [label="[rpl_fseeko_4189,rpl_fseeko_4190]"]
	rpl_fseeko_1  [label="[.label_318,rpl_fseeko_4200]"]
	rpl_fseeko_2  [label="[rpl_fseeko_4180,rpl_fseeko_4180]"]
	rpl_fseeko_3  [label="[rpl_fseeko_4181,rpl_fseeko_4181]"]
	rpl_fseeko_4  [label="[rpl_fseeko_4182,rpl_fseeko_4184]"]
	rpl_fseeko_5  [label="[rpl_fseeko_4185,rpl_fseeko_4185]"]
	rpl_fseeko_6  [label="[rpl_fseeko_4186,rpl_fseeko_4188]"]
	rpl_fseeko_7  [label="[rpl_fseeko_4177,rpl_fseeko_4179]"]
	rpl_fseeko_8  [label="[rpl_fseeko_4172,rpl_fseeko_4176]"]
	rpl_fseeko_9  [label="[.label_317,rpl_fseeko_4204]"]
	rpl_fseeko_10  [label="[rpl_fseeko_4205,rpl_fseeko_4205]"]
	rpl_fseeko_11  [label="[rpl_fseeko_4206,rpl_fseeko_4206]"]
	rpl_fseeko_12  [label="[.label_319,rpl_fseeko_4211]"]
	rpl_fseeko_13  [label="[rpl_fseeko,rpl_fseeko_4171]"]

	rpl_fseeko_0 -> rpl_fseeko_12;
	rpl_fseeko_1 -> rpl_fseeko_12;
	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="!ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_fseeko_11;
	rpl_fseeko_11 -> rpl_fseeko_12;

	rpl_fseeko_13 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_13 -> rpl_fseeko_8 [label="ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fseeko for Randomized
diGraph rpl_fseeko_Randomized{
	rpl_fseeko_0  [label="[rpl_fseeko_5870,rpl_fseeko_5872]"]
	rpl_fseeko_1  [label="[.label_318,rpl_fseeko_5889]"]
	rpl_fseeko_2  [label="[rpl_fseeko_5858,rpl_fseeko_5859]"]
	rpl_fseeko_3  [label="[rpl_fseeko_5860,rpl_fseeko_5860]"]
	rpl_fseeko_4  [label="[rpl_fseeko_5861,rpl_fseeko_5865]"]
	rpl_fseeko_5  [label="[rpl_fseeko_5866,rpl_fseeko_5866]"]
	rpl_fseeko_6  [label="[rpl_fseeko_5867,rpl_fseeko_5869]"]
	rpl_fseeko_7  [label="[rpl_fseeko_5854,rpl_fseeko_5857]"]
	rpl_fseeko_8  [label="[rpl_fseeko_5846,rpl_fseeko_5853]"]
	rpl_fseeko_9  [label="[.label_317,rpl_fseeko_5895]"]
	rpl_fseeko_10  [label="[rpl_fseeko_5896,rpl_fseeko_5896]"]
	rpl_fseeko_11  [label="[rpl_fseeko_5897,rpl_fseeko_5898]"]
	rpl_fseeko_12  [label="[.label_319,rpl_fseeko_5906]"]
	rpl_fseeko_13  [label="[rpl_fseeko,rpl_fseeko_5845]"]

	rpl_fseeko_0 -> rpl_fseeko_12;
	rpl_fseeko_1 -> rpl_fseeko_12;
	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="!ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_fseeko_11;
	rpl_fseeko_11 -> rpl_fseeko_12;

	rpl_fseeko_13 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_13 -> rpl_fseeko_8 [label="ZF"];
}
--------
Starting Node: 13

Edges: 0 ----> 12, 1 ----> 12, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, 7 --!ZF--> 9, 7 --ZF--> 2, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, 11 ----> 12, , 13 --!ZF--> 9, 13 --ZF--> 8

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fseeko"
node 0:
[(Var: RSP0 - Value: 12),4] := Value: 4294967295
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), RDX := Dereference: [(Var: RSP0 - Value: 24),8]
[(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 144),8] := Dereference: [(Var: RSP0 - Value: 48),8], [(Var: RSP0 - Value: 12),4] := Value: 0, [Dereference: [(Var: RSP0 - Value: 24),8],4] := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
ZF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), CF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), SF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), OF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), PF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := fileno@()
node 4:
RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := TakeBits: <31,0>(Reg: RAX), RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 5:
RAX := lseek@()
node 6:
[(Var: RSP0 - Value: 48),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8])
node 9:
RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 10:
RAX := fseeko@()
node 11:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 12:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 13:
RSI := Dereference: [(Reg: RDI + Value: 16),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RDX)
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

Starting Node: 13

Edges: 0 ----> 12, 1 ----> 12, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, 7 --!ZF--> 9, 7 --ZF--> 2, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, 11 ----> 12, , 13 --!ZF--> 9, 13 --ZF--> 8

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fseeko"
node 0:
[(Var: RSP0 - Value: 12),4] := Value: 4294967295
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), RDX := Dereference: [(Var: RSP0 - Value: 24),8]
[(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 144),8] := Dereference: [(Var: RSP0 - Value: 48),8], [(Var: RSP0 - Value: 12),4] := Value: 0, [Dereference: [(Var: RSP0 - Value: 24),8],4] := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
ZF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), CF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), SF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), OF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), PF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := fileno@()
node 4:
RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := TakeBits: <31,0>(Reg: RAX), RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 5:
RAX := lseek@()
node 6:
[(Var: RSP0 - Value: 48),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
RAX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8])
node 9:
RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]
node 10:
RAX := fseeko@()
node 11:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 12:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 13:
RSI := Dereference: [(Reg: RDI + Value: 16),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RDX)
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

same_behavior for the nodes: rpl_fseeko -> rpl_fseeko_4171 and rpl_fseeko -> rpl_fseeko_5845

same_behavior checking these two SStates:

SA || RSI := Dereference: [(Reg: RDI + Value: 16),8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RDX)
SA || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

SB || RSI := Dereference: [(Reg: RDI + Value: 16),8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI, [(Var: RSP0 - Value: 32),8] := Reg: RSI, [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RDX)
SB || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDX]
E_app (TakeBits 31 0) [E_reg RDX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko -> rpl_fseeko_4171 and rpl_fseeko -> rpl_fseeko_5845 have been verified to do the same.

same_behavior for the nodes: .label_317 -> rpl_fseeko_4204 and .label_317 -> rpl_fseeko_5895

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [(Var: RSP0 - Value: 32),8]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_317 -> rpl_fseeko_4204 and .label_317 -> rpl_fseeko_5895 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4205 -> rpl_fseeko_4205 and rpl_fseeko_5896 -> rpl_fseeko_5896

same_behavior checking these two SStates:

SA || RAX := fseeko@()

SB || RAX := fseeko@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fseeko" "") [])]
Resulting values:
Value A:
E_app (F2 "fseeko" "") []
Value B:
E_app (F2 "fseeko" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4205 -> rpl_fseeko_4205 and rpl_fseeko_5896 -> rpl_fseeko_5896 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4206 -> rpl_fseeko_4206 and rpl_fseeko_5897 -> rpl_fseeko_5898

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4206 -> rpl_fseeko_4206 and rpl_fseeko_5897 -> rpl_fseeko_5898 have been verified to do the same.

same_behavior for the nodes: .label_319 -> rpl_fseeko_4211 and .label_319 -> rpl_fseeko_5906

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_319 -> rpl_fseeko_4211 and .label_319 -> rpl_fseeko_5906 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4172 -> rpl_fseeko_4176 and rpl_fseeko_5846 -> rpl_fseeko_5853

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8])

SB || RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8], RCX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 40),8],Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 32),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 40 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4172 -> rpl_fseeko_4176 and rpl_fseeko_5846 -> rpl_fseeko_5853 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4177 -> rpl_fseeko_4179 and rpl_fseeko_5854 -> rpl_fseeko_5857

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0)

SB || RAX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 72),8],Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4177 -> rpl_fseeko_4179 and rpl_fseeko_5854 -> rpl_fseeko_5857 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4180 -> rpl_fseeko_4180 and rpl_fseeko_5858 -> rpl_fseeko_5859

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4180 -> rpl_fseeko_4180 and rpl_fseeko_5858 -> rpl_fseeko_5859 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4181 -> rpl_fseeko_4181 and rpl_fseeko_5860 -> rpl_fseeko_5860

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fileno" "") [])]
Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4181 -> rpl_fseeko_4181 and rpl_fseeko_5860 -> rpl_fseeko_5860 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4182 -> rpl_fseeko_4184 and rpl_fseeko_5861 -> rpl_fseeko_5865

same_behavior checking these two SStates:

SA || RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := TakeBits: <31,0>(Reg: RAX), RSI := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RDX := Dereference: [(Var: RSP0 - Value: 36),4], RDI := TakeBits: <31,0>(Reg: RAX), RSI := Dereference: [(Var: RSP0 - Value: 32),8]

reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4),(RDI,E_app (TakeBits 31 0) [E_reg RAX]),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4182 -> rpl_fseeko_4184 and rpl_fseeko_5861 -> rpl_fseeko_5865 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4185 -> rpl_fseeko_4185 and rpl_fseeko_5866 -> rpl_fseeko_5866

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "lseek" "") [])]
Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4185 -> rpl_fseeko_4185 and rpl_fseeko_5866 -> rpl_fseeko_5866 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4186 -> rpl_fseeko_4188 and rpl_fseeko_5867 -> rpl_fseeko_5869

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 48),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || [(Var: RSP0 - Value: 48),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4186 -> rpl_fseeko_4188 and rpl_fseeko_5867 -> rpl_fseeko_5869 have been verified to do the same.

same_behavior for the nodes: .label_318 -> rpl_fseeko_4200 and .label_318 -> rpl_fseeko_5889

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), RDX := Dereference: [(Var: RSP0 - Value: 24),8]
SA || [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 144),8] := Dereference: [(Var: RSP0 - Value: 48),8], [(Var: RSP0 - Value: 12),4] := Value: 0, [Dereference: [(Var: RSP0 - Value: 24),8],4] := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
SA || ZF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), CF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), SF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), OF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), PF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)

SB || RAX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), RDX := Dereference: [(Var: RSP0 - Value: 24),8]
SB || [(Dereference: [(Var: RSP0 - Value: 24),8] + Value: 144),8] := Dereference: [(Var: RSP0 - Value: 48),8], [(Var: RSP0 - Value: 12),4] := Value: 0, [Dereference: [(Var: RSP0 - Value: 24),8],4] := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)
SB || ZF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), CF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), SF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), OF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279), PF := AND(Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4],Value: 4294967279)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RCX,E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]
Value B:
E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 144 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 144 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SU(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
B) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
(v1 := v2):
E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]
E_app (Op AND) [E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4,E_val 4294967279 32]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_318 -> rpl_fseeko_4200 and .label_318 -> rpl_fseeko_5889 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_4189 -> rpl_fseeko_4190 and rpl_fseeko_5870 -> rpl_fseeko_5872

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := Value: 4294967295

SB || [(Var: RSP0 - Value: 12),4] := Value: 4294967295

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_val 4294967295 32
E_val 4294967295 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_4189 -> rpl_fseeko_4190 and rpl_fseeko_5870 -> rpl_fseeko_5872 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (45/60): "rpl_fflush"
--------
.dot code for CFG of text section rpl_fflush for Vanilla
diGraph rpl_fflush_Vanilla{
	rpl_fflush_0  [label="[.label_314,.label_314]"]
	rpl_fflush_1  [label="[rpl_fflush_4119,rpl_fflush_4119]"]
	rpl_fflush_2  [label="[rpl_fflush_4120,rpl_fflush_4120]"]
	rpl_fflush_3  [label="[rpl_fflush_4121,rpl_fflush_4121]"]
	rpl_fflush_4  [label="[rpl_fflush_4122,rpl_fflush_4122]"]
	rpl_fflush_5  [label="[rpl_fflush_4108,rpl_fflush_4108]"]
	rpl_fflush_6  [label="[rpl_fflush_4109,rpl_fflush_4109]"]
	rpl_fflush_7  [label="[rpl_fflush_4110,rpl_fflush_4111]"]
	rpl_fflush_8  [label="[.label_313,.label_313]"]
	rpl_fflush_9  [label="[rpl_fflush_4114,rpl_fflush_4114]"]
	rpl_fflush_10  [label="[rpl_fflush_4115,rpl_fflush_4116]"]
	rpl_fflush_11  [label="[.label_315,rpl_fflush_4127]"]
	rpl_fflush_12  [label="[rpl_fflush,rpl_fflush_4107]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_2;
	rpl_fflush_2 -> rpl_fflush_3;
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_11;
	rpl_fflush_5 -> rpl_fflush_6;
	rpl_fflush_6 -> rpl_fflush_7;
	rpl_fflush_7 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_7 -> rpl_fflush_8 [label="ZF"];
	rpl_fflush_8 -> rpl_fflush_9;
	rpl_fflush_9 -> rpl_fflush_10;
	rpl_fflush_10 -> rpl_fflush_11;

	rpl_fflush_12 -> rpl_fflush_8 [label="ZF"];
	rpl_fflush_12 -> rpl_fflush_5 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fflush for Randomized
diGraph rpl_fflush_Randomized{
	rpl_fflush_0  [label="[.label_314,.label_314]"]
	rpl_fflush_1  [label="[rpl_fflush_5773,rpl_fflush_5773]"]
	rpl_fflush_2  [label="[rpl_fflush_5774,rpl_fflush_5774]"]
	rpl_fflush_3  [label="[rpl_fflush_5775,rpl_fflush_5775]"]
	rpl_fflush_4  [label="[rpl_fflush_5776,rpl_fflush_5776]"]
	rpl_fflush_5  [label="[rpl_fflush_5760,rpl_fflush_5760]"]
	rpl_fflush_6  [label="[rpl_fflush_5761,rpl_fflush_5761]"]
	rpl_fflush_7  [label="[rpl_fflush_5762,rpl_fflush_5763]"]
	rpl_fflush_8  [label="[.label_313,rpl_fflush_5766]"]
	rpl_fflush_9  [label="[rpl_fflush_5767,rpl_fflush_5767]"]
	rpl_fflush_10  [label="[rpl_fflush_5768,rpl_fflush_5770]"]
	rpl_fflush_11  [label="[.label_315,rpl_fflush_5783]"]
	rpl_fflush_12  [label="[rpl_fflush,rpl_fflush_5759]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_2;
	rpl_fflush_2 -> rpl_fflush_3;
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_11;
	rpl_fflush_5 -> rpl_fflush_6;
	rpl_fflush_6 -> rpl_fflush_7;
	rpl_fflush_7 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_7 -> rpl_fflush_8 [label="ZF"];
	rpl_fflush_8 -> rpl_fflush_9;
	rpl_fflush_9 -> rpl_fflush_10;
	rpl_fflush_10 -> rpl_fflush_11;

	rpl_fflush_12 -> rpl_fflush_8 [label="ZF"];
	rpl_fflush_12 -> rpl_fflush_5 [label="!ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 11, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 0, 7 --ZF--> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, , 12 --ZF--> 8, 12 --!ZF--> 5

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fflush"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := clear_ungetc_buffer_preserving_position@()
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := fflush@()
node 4:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 5:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 6:
RAX := __freading@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 9:
RAX := fflush@()
node 10:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 11:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 12:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 11, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 0, 7 --ZF--> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, , 12 --ZF--> 8, 12 --!ZF--> 5

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fflush"
node 0:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 1:
RAX := clear_ungetc_buffer_preserving_position@()
node 2:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 3:
RAX := fflush@()
node 4:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 5:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 6:
RAX := __freading@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RDI := Dereference: [(Var: RSP0 - Value: 24),8]
node 9:
RAX := fflush@()
node 10:
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 11:
RAX := Dereference: [(Var: RSP0 - Value: 12),4]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 12:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: rpl_fflush -> rpl_fflush_4107 and rpl_fflush -> rpl_fflush_5759

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 24),8] := Reg: RDI
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fflush -> rpl_fflush_4107 and rpl_fflush -> rpl_fflush_5759 have been verified to do the same.

same_behavior for the nodes: .label_313 -> .label_313 and .label_313 -> rpl_fflush_5766

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_313 -> .label_313 and .label_313 -> rpl_fflush_5766 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4114 -> rpl_fflush_4114 and rpl_fflush_5767 -> rpl_fflush_5767

same_behavior checking these two SStates:

SA || RAX := fflush@()

SB || RAX := fflush@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fflush" "") [])]
Resulting values:
Value A:
E_app (F2 "fflush" "") []
Value B:
E_app (F2 "fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4114 -> rpl_fflush_4114 and rpl_fflush_5767 -> rpl_fflush_5767 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4115 -> rpl_fflush_4116 and rpl_fflush_5768 -> rpl_fflush_5770

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4115 -> rpl_fflush_4116 and rpl_fflush_5768 -> rpl_fflush_5770 have been verified to do the same.

same_behavior for the nodes: .label_315 -> rpl_fflush_4127 and .label_315 -> rpl_fflush_5783

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 12),4]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_315 -> rpl_fflush_4127 and .label_315 -> rpl_fflush_5783 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4108 -> rpl_fflush_4108 and rpl_fflush_5760 -> rpl_fflush_5760

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4108 -> rpl_fflush_4108 and rpl_fflush_5760 -> rpl_fflush_5760 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4109 -> rpl_fflush_4109 and rpl_fflush_5761 -> rpl_fflush_5761

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "__freading" "") [])]
Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4109 -> rpl_fflush_4109 and rpl_fflush_5761 -> rpl_fflush_5761 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4110 -> rpl_fflush_4111 and rpl_fflush_5762 -> rpl_fflush_5763

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4110 -> rpl_fflush_4111 and rpl_fflush_5762 -> rpl_fflush_5763 have been verified to do the same.

same_behavior for the nodes: .label_314 -> .label_314 and .label_314 -> .label_314

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_314 -> .label_314 and .label_314 -> .label_314 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4119 -> rpl_fflush_4119 and rpl_fflush_5773 -> rpl_fflush_5773

same_behavior checking these two SStates:

SA || RAX := clear_ungetc_buffer_preserving_position@()

SB || RAX := clear_ungetc_buffer_preserving_position@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "clear_ungetc_buffer_preserving_position" "") [])]
Resulting values:
Value A:
E_app (F2 "clear_ungetc_buffer_preserving_position" "") []
Value B:
E_app (F2 "clear_ungetc_buffer_preserving_position" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4119 -> rpl_fflush_4119 and rpl_fflush_5773 -> rpl_fflush_5773 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4120 -> rpl_fflush_4120 and rpl_fflush_5774 -> rpl_fflush_5774

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

SB || RDI := Dereference: [(Var: RSP0 - Value: 24),8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4120 -> rpl_fflush_4120 and rpl_fflush_5774 -> rpl_fflush_5774 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4121 -> rpl_fflush_4121 and rpl_fflush_5775 -> rpl_fflush_5775

same_behavior checking these two SStates:

SA || RAX := fflush@()

SB || RAX := fflush@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fflush" "") [])]
Resulting values:
Value A:
E_app (F2 "fflush" "") []
Value B:
E_app (F2 "fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4121 -> rpl_fflush_4121 and rpl_fflush_5775 -> rpl_fflush_5775 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_4122 -> rpl_fflush_4122 and rpl_fflush_5776 -> rpl_fflush_5776

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

SB || (9,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == Var: RSP0 && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(9,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == Var: RSP0 && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_4122 -> rpl_fflush_4122 and rpl_fflush_5776 -> rpl_fflush_5776 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (46/60): "hard_locale"
--------
.dot code for CFG of text section hard_locale for Vanilla
diGraph hard_locale_Vanilla{
	hard_locale_0  [label="[hard_locale_3985,hard_locale_3987]"]
	hard_locale_1  [label="[hard_locale_3988,hard_locale_3988]"]
	hard_locale_2  [label="[hard_locale_3989,hard_locale_3990]"]
	hard_locale_3  [label="[.label_305,.label_305]"]
	hard_locale_4  [label="[.label_304,.label_304]"]
	hard_locale_5  [label="[hard_locale_3979,hard_locale_3981]"]
	hard_locale_6  [label="[hard_locale_3982,hard_locale_3982]"]
	hard_locale_7  [label="[hard_locale_3983,hard_locale_3984]"]
	hard_locale_8  [label="[.label_303,hard_locale_4001]"]
	hard_locale_9  [label="[hard_locale,hard_locale_3974]"]
	hard_locale_10  [label="[hard_locale_3975,hard_locale_3975]"]
	hard_locale_11  [label="[hard_locale_3976,hard_locale_3978]"]

	hard_locale_0 -> hard_locale_1;
	hard_locale_1 -> hard_locale_2;
	hard_locale_2 -> hard_locale_4 [label="!ZF"];
	hard_locale_2 -> hard_locale_3 [label="ZF"];
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_8;
	hard_locale_5 -> hard_locale_6;
	hard_locale_6 -> hard_locale_7;
	hard_locale_7 -> hard_locale_3 [label="ZF"];
	hard_locale_7 -> hard_locale_0 [label="!ZF"];

	hard_locale_9 -> hard_locale_10;
	hard_locale_10 -> hard_locale_11;
	hard_locale_11 -> hard_locale_8 [label="ZF"];
	hard_locale_11 -> hard_locale_5 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section hard_locale for Randomized
diGraph hard_locale_Randomized{
	hard_locale_0  [label="[hard_locale_5588,hard_locale_5592]"]
	hard_locale_1  [label="[hard_locale_5593,hard_locale_5593]"]
	hard_locale_2  [label="[hard_locale_5594,hard_locale_5595]"]
	hard_locale_3  [label="[.label_305,.label_305]"]
	hard_locale_4  [label="[.label_303,.label_303]"]
	hard_locale_5  [label="[hard_locale_5578,hard_locale_5583]"]
	hard_locale_6  [label="[hard_locale_5584,hard_locale_5584]"]
	hard_locale_7  [label="[hard_locale_5585,hard_locale_5587]"]
	hard_locale_8  [label="[.label_304,hard_locale_5610]"]
	hard_locale_9  [label="[hard_locale,hard_locale_5571]"]
	hard_locale_10  [label="[hard_locale_5572,hard_locale_5572]"]
	hard_locale_11  [label="[hard_locale_5573,hard_locale_5577]"]

	hard_locale_0 -> hard_locale_1;
	hard_locale_1 -> hard_locale_2;
	hard_locale_2 -> hard_locale_4 [label="!ZF"];
	hard_locale_2 -> hard_locale_3 [label="ZF"];
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_8;
	hard_locale_5 -> hard_locale_6;
	hard_locale_6 -> hard_locale_7;
	hard_locale_7 -> hard_locale_3 [label="ZF"];
	hard_locale_7 -> hard_locale_0 [label="!ZF"];

	hard_locale_9 -> hard_locale_10;
	hard_locale_10 -> hard_locale_11;
	hard_locale_11 -> hard_locale_8 [label="ZF"];
	hard_locale_11 -> hard_locale_5 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, 2 --!ZF--> 4, 2 --ZF--> 3, 3 ----> 4, 4 ----> 8, 5 ----> 6, 6 ----> 7, 7 --ZF--> 3, 7 --!ZF--> 0, , 9 ----> 10, 10 ----> 11, 11 --ZF--> 8, 11 --!ZF--> 5

Symbolic Execution for Binary "Vanilla":
Current text section: "hard_locale"
node 0:
RAX := Dereference: [Var: .str.1_4,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str.1_4,4]
node 1:
RAX := strcmp@()
node 2:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 3:
[(Var: RSP0 - Value: 13),1] := Value: 0
node 4:
skip'
node 5:
RAX := Dereference: [Var: .str_5,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str_5,4]
node 6:
RAX := strcmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := AND(Dereference: [(Var: RSP0 - Value: 13),1],Value: 1)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 9:
RAX := Value: 0, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 13),1] := Value: 1
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := setlocale@()
node 11:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, 2 --!ZF--> 4, 2 --ZF--> 3, 3 ----> 4, 4 ----> 8, 5 ----> 6, 6 ----> 7, 7 --ZF--> 3, 7 --!ZF--> 0, , 9 ----> 10, 10 ----> 11, 11 --ZF--> 8, 11 --!ZF--> 5

Symbolic Execution for Binary "Randomized":
Current text section: "hard_locale"
node 0:
RAX := Dereference: [Var: .str.1_4,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str.1_4,4]
node 1:
RAX := strcmp@()
node 2:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 3:
[(Var: RSP0 - Value: 13),1] := Value: 0
node 4:
skip'
node 5:
RAX := Dereference: [Var: .str_5,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str_5,4]
node 6:
RAX := strcmp@()
node 7:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 8:
RAX := AND(Dereference: [(Var: RSP0 - Value: 13),1],Value: 1)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 9:
RAX := Value: 0, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 13),1] := Value: 1
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := setlocale@()
node 11:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
--------

same_behavior for the nodes: hard_locale -> hard_locale_3974 and hard_locale -> hard_locale_5571

same_behavior checking these two SStates:

SA || RAX := Value: 0, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 13),1] := Value: 1
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI), [(Var: RSP0 - Value: 13),1] := Value: 1
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 0 32),(RDI,E_app (TakeBits 31 0) [E_reg RDI]),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]
(v1 := v2):
E_val 1 8
E_val 1 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes hard_locale -> hard_locale_3974 and hard_locale -> hard_locale_5571 have been verified to do the same.

same_behavior for the nodes: hard_locale_3975 -> hard_locale_3975 and hard_locale_5572 -> hard_locale_5572

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "setlocale" "") [])]
Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3975 -> hard_locale_3975 and hard_locale_5572 -> hard_locale_5572 have been verified to do the same.

same_behavior for the nodes: hard_locale_3976 -> hard_locale_3978 and hard_locale_5573 -> hard_locale_5577

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes hard_locale_3976 -> hard_locale_3978 and hard_locale_5573 -> hard_locale_5577 have been verified to do the same.

same_behavior for the nodes: .label_303 -> hard_locale_4001 and .label_304 -> hard_locale_5610

same_behavior checking these two SStates:

SA || RAX := AND(Dereference: [(Var: RSP0 - Value: 13),1],Value: 1)
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := AND(Dereference: [(Var: RSP0 - Value: 13),1],Value: 1)
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]) 1,E_val 1 8]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]) 1,E_val 1 8]
Value B:
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]) 1,E_val 1 8]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_303 -> hard_locale_4001 and .label_304 -> hard_locale_5610 have been verified to do the same.

same_behavior for the nodes: hard_locale_3979 -> hard_locale_3981 and hard_locale_5578 -> hard_locale_5583

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str_5,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str_5,4]

SB || RAX := Dereference: [Var: .str_5,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str_5,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str_5" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str_5" 64) 4)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str_5" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str_5" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str_5" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str_5" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str_5" 64) 4
Value B:
E_deref (E_var ".str_5" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str_5" 64) 4
Value B:
E_deref (E_var ".str_5" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3979 -> hard_locale_3981 and hard_locale_5578 -> hard_locale_5583 have been verified to do the same.

same_behavior for the nodes: hard_locale_3982 -> hard_locale_3982 and hard_locale_5584 -> hard_locale_5584

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3982 -> hard_locale_3982 and hard_locale_5584 -> hard_locale_5584 have been verified to do the same.

same_behavior for the nodes: hard_locale_3983 -> hard_locale_3984 and hard_locale_5585 -> hard_locale_5587

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3983 -> hard_locale_3984 and hard_locale_5585 -> hard_locale_5587 have been verified to do the same.

same_behavior for the nodes: .label_305 -> .label_305 and .label_305 -> .label_305

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 13),1] := Value: 0

SB || [(Var: RSP0 - Value: 13),1] := Value: 0

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 13 64]
(v1 := v2):
E_val 0 8
E_val 0 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_305 -> .label_305 and .label_305 -> .label_305 have been verified to do the same.

same_behavior for the nodes: .label_304 -> .label_304 and .label_303 -> .label_303

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_304 -> .label_304 and .label_303 -> .label_303 have been verified to do the same.

same_behavior for the nodes: hard_locale_3985 -> hard_locale_3987 and hard_locale_5588 -> hard_locale_5592

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str.1_4,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str.1_4,4]

SB || RAX := Dereference: [Var: .str.1_4,4], RDI := Dereference: [(Var: RSP0 - Value: 24),8], RSI := Dereference: [Var: .str.1_4,4]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_4" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str.1_4" 64) 4)]
reg_chk debug RDIfromLi(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
st [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_4" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str.1_4" 64) 4)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str.1_4" 64) 4),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(RSI,E_deref (E_var ".str.1_4" 64) 4)]
Resulting values:
Value A:
E_deref (E_var ".str.1_4" 64) 4
Value B:
E_deref (E_var ".str.1_4" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.1_4" 64) 4
Value B:
E_deref (E_var ".str.1_4" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3985 -> hard_locale_3987 and hard_locale_5588 -> hard_locale_5592 have been verified to do the same.

same_behavior for the nodes: hard_locale_3988 -> hard_locale_3988 and hard_locale_5593 -> hard_locale_5593

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strcmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3988 -> hard_locale_3988 and hard_locale_5593 -> hard_locale_5593 have been verified to do the same.

same_behavior for the nodes: hard_locale_3989 -> hard_locale_3990 and hard_locale_5594 -> hard_locale_5595

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3989 -> hard_locale_3990 and hard_locale_5594 -> hard_locale_5595 have been verified to do the same.

Label relationship:
.str.1_4 <--> .str.1_4
.str_5 <--> .str_5
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 13) <--> (Var: RSP0 - Value: 13)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (47/60): "xalloc_die"
--------
.dot code for CFG of text section xalloc_die for Vanilla
diGraph xalloc_die_Vanilla{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_3789]"]
	xalloc_die_1  [label="[xalloc_die_3790,xalloc_die_3790]"]
	xalloc_die_2  [label="[xalloc_die_3791,xalloc_die_3795]"]
	xalloc_die_3  [label="[xalloc_die_3796,xalloc_die_3796]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
--------
.dot code for CFG of text section xalloc_die for Randomized
diGraph xalloc_die_Randomized{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_5311]"]
	xalloc_die_1  [label="[xalloc_die_5312,xalloc_die_5312]"]
	xalloc_die_2  [label="[xalloc_die_5313,xalloc_die_5320]"]
	xalloc_die_3  [label="[xalloc_die_5321,xalloc_die_5321]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xalloc_die"
node 0:
RAX := Dereference: [Var: exit_failure,4], RDI := Dereference: [Var: .str.1_3,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Dereference: [Var: exit_failure,4]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Randomized":
Current text section: "xalloc_die"
node 0:
RAX := Dereference: [Var: exit_failure,4], RDI := Dereference: [Var: .str.1_3,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Dereference: [Var: exit_failure,4]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

same_behavior for the nodes: xalloc_die -> xalloc_die_3789 and xalloc_die -> xalloc_die_5311

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: exit_failure,4], RDI := Dereference: [Var: .str.1_3,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Dereference: [Var: exit_failure,4]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := Dereference: [Var: exit_failure,4], RDI := Dereference: [Var: .str.1_3,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := Dereference: [Var: exit_failure,4]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "exit_failure" 64) 4),(RDI,E_deref (E_var ".str.1_3" 64) 8),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "exit_failure" 64) 4),(RDI,E_deref (E_var ".str.1_3" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "exit_failure" 64) 4
Value B:
E_deref (E_var "exit_failure" 64) 4
Resulting values:
Value A:
E_deref (E_var ".str.1_3" 64) 8
Value B:
E_deref (E_var ".str.1_3" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_deref (E_var "exit_failure" 64) 4
E_deref (E_var "exit_failure" 64) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xalloc_die -> xalloc_die_3789 and xalloc_die -> xalloc_die_5311 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3790 -> xalloc_die_3790 and xalloc_die_5312 -> xalloc_die_5312

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3790 -> xalloc_die_3790 and xalloc_die_5312 -> xalloc_die_5312 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3791 -> xalloc_die_3795 and xalloc_die_5313 -> xalloc_die_5320

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RCX := Reg: RAX, RDX := Dereference: [Var: .str_2,8], RDI := Dereference: [(Var: RSP0 - Value: 12),4], RSI := Value: 0
SB || ZF := Value: 0, (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_val 0 32)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_val 0 32)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_val 0 32)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_val 0 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RCX,E_reg RAX),(RDX,E_deref (E_var ".str_2" 64) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4),(RSI,E_val 0 32)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str_2" 64) 8
Value B:
E_deref (E_var ".str_2" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3791 -> xalloc_die_3795 and xalloc_die_5313 -> xalloc_die_5320 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3796 -> xalloc_die_3796 and xalloc_die_5321 -> xalloc_die_5321

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "error" "") [])]
Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3796 -> xalloc_die_3796 and xalloc_die_5321 -> xalloc_die_5321 have been verified to do the same.

Label relationship:
.str_2 <--> .str_2
 <--> 
.str.1_3 <--> .str.1_3
exit_failure <--> exit_failure

Local variable relationship:
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (48/60): "emit_bug_reporting_address"
--------
.dot code for CFG of text section emit_bug_reporting_address for Vanilla
diGraph emit_bug_reporting_address_Vanilla{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_3431]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_3432,emit_bug_reporting_address_3432]"]
	emit_bug_reporting_address_2  [label="[emit_bug_reporting_address_3433,emit_bug_reporting_address_3435]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_3436,emit_bug_reporting_address_3436]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_3437,emit_bug_reporting_address_3438]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_3439,emit_bug_reporting_address_3439]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_3440,emit_bug_reporting_address_3443]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_3444,emit_bug_reporting_address_3444]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_3445,emit_bug_reporting_address_3446]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_3447,emit_bug_reporting_address_3447]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_3448,emit_bug_reporting_address_3449]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_3450,emit_bug_reporting_address_3450]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_3451,emit_bug_reporting_address_3454]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bug_reporting_address_12;

}
--------
--------
.dot code for CFG of text section emit_bug_reporting_address for Randomized
diGraph emit_bug_reporting_address_Randomized{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_4830]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_4831,emit_bug_reporting_address_4831]"]
	emit_bug_reporting_address_2  [label="[emit_bug_reporting_address_4832,emit_bug_reporting_address_4835]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_4836,emit_bug_reporting_address_4836]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_4837,emit_bug_reporting_address_4839]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_4840,emit_bug_reporting_address_4840]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_4841,emit_bug_reporting_address_4845]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_4846,emit_bug_reporting_address_4846]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_4847,emit_bug_reporting_address_4850]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_4851,emit_bug_reporting_address_4851]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_4852,emit_bug_reporting_address_4853]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_4854,emit_bug_reporting_address_4854]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_4855,emit_bug_reporting_address_4860]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bug_reporting_address_12;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Vanilla":
Current text section: "emit_bug_reporting_address"
node 0:
RDI := Dereference: [Var: .str.14_0,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.15_0,8]
node 3:
RAX := printf@()
node 4:
RDI := Dereference: [Var: .str.16_0,8]
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
(Reg: RAX)
node 5:
RAX := gettext@()
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: .str.18,8], RDI := Reg: RAX, RSI := Dereference: [Var: .str.17,8]
node 7:
RAX := printf@()
node 8:
RDI := Dereference: [Var: .str.19,8]
[(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)
node 9:
RAX := gettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 11:
RAX := fputs_unlocked@()
node 12:
[(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Randomized":
Current text section: "emit_bug_reporting_address"
node 0:
RDI := Dereference: [Var: .str.14_0,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.15_0,8]
node 3:
RAX := printf@()
node 4:
RDI := Dereference: [Var: .str.16_0,8]
[(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := gettext@()
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: .str.18,8], RDI := Reg: RAX, RSI := Dereference: [Var: .str.17,8]
node 7:
RAX := printf@()
node 8:
RDI := Dereference: [Var: .str.19,8]
[(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)
node 9:
RAX := gettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 11:
RAX := fputs_unlocked@()
node 12:
[(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
--------

same_behavior for the nodes: emit_bug_reporting_address -> emit_bug_reporting_address_3431 and emit_bug_reporting_address -> emit_bug_reporting_address_4830

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.14_0,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RDI := Dereference: [Var: .str.14_0,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.14_0" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var ".str.14_0" 64) 8
Value B:
E_deref (E_var ".str.14_0" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address -> emit_bug_reporting_address_3431 and emit_bug_reporting_address -> emit_bug_reporting_address_4830 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3432 -> emit_bug_reporting_address_3432 and emit_bug_reporting_address_4831 -> emit_bug_reporting_address_4831

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3432 -> emit_bug_reporting_address_3432 and emit_bug_reporting_address_4831 -> emit_bug_reporting_address_4831 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3433 -> emit_bug_reporting_address_3435 and emit_bug_reporting_address_4832 -> emit_bug_reporting_address_4835

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.15_0,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.15_0,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.15_0" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.15_0" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.15_0" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.15_0" 64) 8
Value B:
E_deref (E_var ".str.15_0" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3433 -> emit_bug_reporting_address_3435 and emit_bug_reporting_address_4832 -> emit_bug_reporting_address_4835 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3436 -> emit_bug_reporting_address_3436 and emit_bug_reporting_address_4836 -> emit_bug_reporting_address_4836

same_behavior checking these two SStates:

SA || RAX := printf@()

SB || RAX := printf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "printf" "") [])]
Resulting values:
Value A:
E_app (F2 "printf" "") []
Value B:
E_app (F2 "printf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3436 -> emit_bug_reporting_address_3436 and emit_bug_reporting_address_4836 -> emit_bug_reporting_address_4836 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3437 -> emit_bug_reporting_address_3438 and emit_bug_reporting_address_4837 -> emit_bug_reporting_address_4839

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.16_0,8]
SA || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.16_0,8]
SB || [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.16_0" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.16_0" 64) 8
Value B:
E_deref (E_var ".str.16_0" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3437 -> emit_bug_reporting_address_3438 and emit_bug_reporting_address_4837 -> emit_bug_reporting_address_4839 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3439 -> emit_bug_reporting_address_3439 and emit_bug_reporting_address_4840 -> emit_bug_reporting_address_4840

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3439 -> emit_bug_reporting_address_3439 and emit_bug_reporting_address_4840 -> emit_bug_reporting_address_4840 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3440 -> emit_bug_reporting_address_3443 and emit_bug_reporting_address_4841 -> emit_bug_reporting_address_4845

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: .str.18,8], RDI := Reg: RAX, RSI := Dereference: [Var: .str.17,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: .str.18,8], RDI := Reg: RAX, RSI := Dereference: [Var: .str.17,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var ".str.18" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.17" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var ".str.18" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.17" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var ".str.18" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.17" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var ".str.18" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.17" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var ".str.18" 64) 8
Value B:
E_deref (E_var ".str.18" 64) 8
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.17" 64) 8
Value B:
E_deref (E_var ".str.17" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3440 -> emit_bug_reporting_address_3443 and emit_bug_reporting_address_4841 -> emit_bug_reporting_address_4845 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3444 -> emit_bug_reporting_address_3444 and emit_bug_reporting_address_4846 -> emit_bug_reporting_address_4846

same_behavior checking these two SStates:

SA || RAX := printf@()

SB || RAX := printf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "printf" "") [])]
Resulting values:
Value A:
E_app (F2 "printf" "") []
Value B:
E_app (F2 "printf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3444 -> emit_bug_reporting_address_3444 and emit_bug_reporting_address_4846 -> emit_bug_reporting_address_4846 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3445 -> emit_bug_reporting_address_3446 and emit_bug_reporting_address_4847 -> emit_bug_reporting_address_4850

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.19,8]
SA || [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.19,8]
SB || [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.19" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.19" 64) 8
Value B:
E_deref (E_var ".str.19" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3445 -> emit_bug_reporting_address_3446 and emit_bug_reporting_address_4847 -> emit_bug_reporting_address_4850 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3447 -> emit_bug_reporting_address_3447 and emit_bug_reporting_address_4851 -> emit_bug_reporting_address_4851

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3447 -> emit_bug_reporting_address_3447 and emit_bug_reporting_address_4851 -> emit_bug_reporting_address_4851 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3448 -> emit_bug_reporting_address_3449 and emit_bug_reporting_address_4852 -> emit_bug_reporting_address_4853

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

SB || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "stdout" 64) 8
Value B:
E_deref (E_var "stdout" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3448 -> emit_bug_reporting_address_3449 and emit_bug_reporting_address_4852 -> emit_bug_reporting_address_4853 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3450 -> emit_bug_reporting_address_3450 and emit_bug_reporting_address_4854 -> emit_bug_reporting_address_4854

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3450 -> emit_bug_reporting_address_3450 and emit_bug_reporting_address_4854 -> emit_bug_reporting_address_4854 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3451 -> emit_bug_reporting_address_3454 and emit_bug_reporting_address_4855 -> emit_bug_reporting_address_4860

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3451 -> emit_bug_reporting_address_3454 and emit_bug_reporting_address_4855 -> emit_bug_reporting_address_4860 have been verified to do the same.

Label relationship:
stdout <--> stdout
.str.19 <--> .str.19
.str.17 <--> .str.17
.str.18 <--> .str.18
.str.16_0 <--> .str.16_0
.str.15_0 <--> .str.15_0
 <--> 
.str.14_0 <--> .str.14_0

Local variable relationship:
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (49/60): "version_etc_ar"
--------
.dot code for CFG of text section version_etc_ar for Vanilla
diGraph version_etc_ar_Vanilla{
	version_etc_ar_0  [label="[version_etc_ar_3260,version_etc_ar_3265]"]
	version_etc_ar_1  [label="[.label_267,version_etc_ar_3272]"]
	version_etc_ar_2  [label="[version_etc_ar_3273,version_etc_ar_3273]"]
	version_etc_ar_3  [label="[version_etc_ar_3274,version_etc_ar_3276]"]
	version_etc_ar_4  [label="[version_etc_ar,version_etc_ar_3254]"]
	version_etc_ar_5  [label="[.label_269,version_etc_ar_3259]"]

	version_etc_ar_0 -> version_etc_ar_5;
	version_etc_ar_1 -> version_etc_ar_2;
	version_etc_ar_2 -> version_etc_ar_3;

	version_etc_ar_4 -> version_etc_ar_5;
	version_etc_ar_5 -> version_etc_ar_1 [label="ZF"];
	version_etc_ar_5 -> version_etc_ar_0 [label="!ZF"];
}
--------
--------
.dot code for CFG(4,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8))])
 of text section version_etc_ar for Randomized
diGraph version_etc_ar_Randomized{
	version_etc_ar_0  [label="[version_etc_ar_4582,version_etc_ar_4591]"]
	version_etc_ar_1  [label="[.label_268,version_etc_ar_4603]"]
	version_etc_ar_2  [label="[version_etc_ar_4604,version_etc_ar_4604]"]
	version_etc_ar_3  [label="[version_etc_ar_4605,version_etc_ar_4610]"]
	version_etc_ar_4  [label="[version_etc_ar,version_etc_ar_4575]"]
	version_etc_ar_5  [label="[.label_267,version_etc_ar_4581]"]

	version_etc_ar_0 -> version_etc_ar_5;
	version_etc_ar_1 -> version_etc_ar_2;
	version_etc_ar_2 -> version_etc_ar_3;

	version_etc_ar_4 -> version_etc_ar_5;
	version_etc_ar_5 -> version_etc_ar_1 [label="ZF"];
	version_etc_ar_5 -> version_etc_ar_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, , 4 ----> 5, 5 --ZF--> 1, 5 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "version_etc_ar"
node 0:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
[(Var: RSP0 - Value: 56),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
node 1:
RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R9 := Dereference: [(Var: RSP0 - Value: 56),8], R8 := Dereference: [(Var: RSP0 - Value: 48),8]
node 2:
RAX := version_etc_arn@()
node 3:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 4:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 56),8] := Value: 0
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0)
--------

Starting Node: 4

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, , 4 ----> 5, 5 --ZF--> 1, 5 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "version_etc_ar"
node 0:
RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
[(Var: RSP0 - Value: 56),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
node 1:
RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R9 := Dereference: [(Var: RSP0 - Value: 56),8], R8 := Dereference: [(Var: RSP0 - Value: 48),8]
node 2:
RAX := version_etc_arn@()
node 3:
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 4:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 56),8] := Value: 0
ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)
node 5:
RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0)
--------

same_behavior for the nodes: version_etc_ar -> version_etc_ar_3254 and version_etc_ar -> version_etc_ar_4575

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 56),8] := Value: 0
SA || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX, [(Var: RSP0 - Value: 40),8] := Reg: RCX, [(Var: RSP0 - Value: 48),8] := Reg: R8, [(Var: RSP0 - Value: 56),8] := Value: 0
SB || ZF := (Var: RSP0 - Value: 56), CF := (Var: RSP0 - Value: 56), SF := (Var: RSP0 - Value: 56), OF := (Var: RSP0 - Value: 56), PF := (Var: RSP0 - Value: 56)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes version_etc_ar -> version_etc_ar_3254 and version_etc_ar -> version_etc_ar_4575 have been verified to do the same.

same_behavior for the nodes: .label_269 -> version_etc_ar_3259 and .label_267 -> version_etc_ar_4581

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [(Var: RSP0 - Value: 48),8]
SA || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0)

SB || RAX := Dereference: [(Var: RSP0 - Value: 56),8], RCX := Dereference: [(Var: RSP0 - Value: 48),8]
SB || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 48),8] + TakeBits: <63,0>((Dereference: [(Var: RSP0 - Value: 56),8] * Value: 8))),8],Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_269 -> version_etc_ar_3259 and .label_267 -> version_etc_ar_4581 have been verified to do the same.

same_behavior for the nodes: .label_267 -> version_etc_ar_3272 and .label_268 -> version_etc_ar_4603

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R9 := Dereference: [(Var: RSP0 - Value: 56),8], R8 := Dereference: [(Var: RSP0 - Value: 48),8]

SB || RCX := Dereference: [(Var: RSP0 - Value: 40),8], RDX := Dereference: [(Var: RSP0 - Value: 32),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Dereference: [(Var: RSP0 - Value: 24),8], R9 := Dereference: [(Var: RSP0 - Value: 56),8], R8 := Dereference: [(Var: RSP0 - Value: 48),8]

reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
reg_chk debug R9fromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
reg_chk debug R8fromList [(RIP,E_var "returned" 64),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8),(RDX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8),(R9,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8),(R8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Reg Chk: True
Mem (12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
Chk: True
Result: Success
Nodes .label_267 -> version_etc_ar_3272 and .label_268 -> version_etc_ar_4603 have been verified to do the same.

same_behavior for the nodes: version_etc_ar_3273 -> version_etc_ar_3273 and version_etc_ar_4604 -> version_etc_ar_4604

same_behavior checking these two SStates:

SA || RAX := version_etc_arn@()

SB || RAX := version_etc_arn@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "version_etc_arn" "") [])]
Resulting values:
Value A:
E_app (F2 "version_etc_arn" "") []
Value B:
E_app (F2 "version_etc_arn" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_ar_3273 -> version_etc_ar_3273 and version_etc_ar_4604 -> version_etc_ar_4604 have been verified to do the same.

same_behavior for the nodes: version_etc_ar_3274 -> version_etc_ar_3276 and version_etc_ar_4605 -> version_etc_ar_4610

same_behavior checking these two SStates:

SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_ar_3274 -> version_etc_ar_3276 and version_etc_ar_4605 -> version_etc_ar_4610 have been verified to do the same.

same_behavior for the nodes: version_etc_ar_3260 -> version_etc_ar_3265 and version_etc_ar_4582 -> version_etc_ar_4591

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
SA || [(Var: RSP0 - Value: 56),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
SB || [(Var: RSP0 - Value: 56),8] := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 56),8] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 1 64]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 1 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_val 1 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes version_etc_ar_3260 -> version_etc_ar_3265 and version_etc_ar_4582 -> version_etc_ar_4591 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (50/60): "quotearg_free"
--------
.dot code for CFG of text section quotearg_free for Vanilla
diGraph quotearg_free_Vanilla{
	quotearg_free_0  [label="[quotearg_free_2101,quotearg_free_2104]"]
	quotearg_free_1  [label="[quotearg_free_2105,quotearg_free_2105]"]
	quotearg_free_2  [label="[quotearg_free_2106,quotearg_free_2109]"]
	quotearg_free_3  [label="[quotearg_free_2115,quotearg_free_2116]"]
	quotearg_free_4  [label="[quotearg_free_2117,quotearg_free_2117]"]
	quotearg_free_5  [label="[quotearg_free_2118,quotearg_free_2120]"]
	quotearg_free_6  [label="[quotearg_free_2125,quotearg_free_2126]"]
	quotearg_free_7  [label="[quotearg_free_2127,quotearg_free_2127]"]
	quotearg_free_8  [label="[quotearg_free_2128,quotearg_free_2129]"]
	quotearg_free_9  [label="[.label_244,quotearg_free_2134]"]
	quotearg_free_10  [label="[.label_248,quotearg_free_2124]"]
	quotearg_free_11  [label="[.label_247,quotearg_free_2114]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_2096]"]
	quotearg_free_13  [label="[.label_245,quotearg_free_2100]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_13;
	quotearg_free_3 -> quotearg_free_4;
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_3 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_13;
	quotearg_free_13 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_13 -> quotearg_free_0 [label="SF != OF"];
}
--------
--------
.dot code for CFG of text section quotearg_free for Randomized
diGraph quotearg_free_Randomized{
	quotearg_free_0  [label="[quotearg_free_2950,quotearg_free_2957]"]
	quotearg_free_1  [label="[quotearg_free_2958,quotearg_free_2958]"]
	quotearg_free_2  [label="[quotearg_free_2959,quotearg_free_2966]"]
	quotearg_free_3  [label="[quotearg_free_2975,quotearg_free_2976]"]
	quotearg_free_4  [label="[quotearg_free_2977,quotearg_free_2977]"]
	quotearg_free_5  [label="[quotearg_free_2978,quotearg_free_2981]"]
	quotearg_free_6  [label="[quotearg_free_2986,quotearg_free_2989]"]
	quotearg_free_7  [label="[quotearg_free_2990,quotearg_free_2990]"]
	quotearg_free_8  [label="[quotearg_free_2991,quotearg_free_2993]"]
	quotearg_free_9  [label="[.label_245,quotearg_free_3000]"]
	quotearg_free_10  [label="[.label_246,quotearg_free_2985]"]
	quotearg_free_11  [label="[.label_247,quotearg_free_2974]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_2945]"]
	quotearg_free_13  [label="[.label_248,quotearg_free_2949]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_13;
	quotearg_free_3 -> quotearg_free_4;
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_3 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_13;
	quotearg_free_13 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_13 -> quotearg_free_0 [label="SF != OF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 13, 3 ----> 4, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 3, 12 ----> 13, 13 --SF == OF--> 11, 13 --SF != OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_free"
node 0:
RAX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]) + Value: 8),8]
ZF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), CF := (SHL(zextend(sext(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == (Var: RSP0 - Value: 8))])
end(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), SF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), OF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), PF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8])
node 1:
RAX := free@()
node 2:
RAX := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
[(Var: RSP0 - Value: 20),4] := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8]
node 4:
RAX := free@()
node 5:
RAX := Dereference: [Var: slot0,8]
[Var: label_246,8] := Dereference: [Var: slot0,8], [Var: slotvec0,8] := Value: 256
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8]
node 7:
RAX := free@()
node 8:
RAX := Dereference: [Var: slotvec0,8]
[Var: slotvec,8] := Dereference: [Var: slotvec0,8]
node 9:
[Var: nslots,4] := Value: 1
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 10:
RAX := Dereference: [Var: slotvec0,8]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8])
node 11:
RAX := Dereference: [Var: slot0,8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8])
node 12:
RAX := Dereference: [Var: slotvec,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Dereference: [Var: slotvec,8], [(Var: RSP0 - Value: 20),4] := Value: 1
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 20),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4])
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 13, 3 ----> 4, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 3, 12 ----> 13, 13 --SF == OF--> 11, 13 --SF != OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_free"
node 0:
RAX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]) + Value: 8),8]
ZF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), CF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), SF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), OF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), PF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8])
node 1:
RAX := free@()
node 2:
RAX := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
[(Var: RSP0 - Value: 20),4] := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
node 3:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8]
node 4:
RAX := free@()
node 5:
RAX := Dereference: [Var: slot0,8]
[Var: label_244,8] := Dereference: [Var: slot0,8], [Var: slotvec0,8] := Value: 256
node 6:
RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8]
node 7:
RAX := free@()
node 8:
RAX := Dereference: [Var: slotvec0,8]
[Var: slotvec,8] := Dereference: [Var: slotvec0,8]
node 9:
[Var: nslots,4] := Value: 1
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 10:
RAX := Dereference: [Var: slotvec0,8]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8])
node 11:
RAX := Dereference: [Var: slot0,8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8])
node 12:
RAX := Dereference: [Var: slotvec,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Dereference: [Var: slotvec,8], [(Var: RSP0 - Value: 20),4] := Value: 1
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 20),4]
ZF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4])
--------

same_behavior for the nodes: quotearg_free -> quotearg_free_2096 and quotearg_free -> quotearg_free_2945

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Dereference: [Var: slotvec,8], [(Var: RSP0 - Value: 20),4] := Value: 1
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RAX := Dereference: [Var: slotvec,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Dereference: [Var: slotvec,8], [(Var: RSP0 - Value: 20),4] := Value: 1
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "slotvec" 64) 8
Value B:
E_deref (E_var "slotvec" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_var "slotvec" 64) 8
E_deref (E_var "slotvec" 64) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_free -> quotearg_free_2096 and quotearg_free -> quotearg_free_2945 have been verified to do the same.

same_behavior for the nodes: .label_245 -> quotearg_free_2100 and .label_248 -> quotearg_free_2949

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 20),4]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4])

SB || RAX := Dereference: [(Var: RSP0 - Value: 20),4]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), CF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), SF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), OF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4]), PF := CMP(Dereference: [(Var: RSP0 - Value: 20),4],Dereference: [Var: nslots,4])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_245 -> quotearg_free_2100 and .label_248 -> quotearg_free_2949 have been verified to do the same.

same_behavior for the nodes: .label_247 -> quotearg_free_2114 and .label_247 -> quotearg_free_2974

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8])

SB || RAX := Dereference: [Var: slot0,8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), CF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), SF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), OF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8]), PF := CMP(Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8],Dereference: [Var: slot0,8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 8
Value B:
E_deref (E_var "slot0" 64) 8
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_247 -> quotearg_free_2114 and .label_247 -> quotearg_free_2974 have been verified to do the same.

same_behavior for the nodes: .label_248 -> quotearg_free_2124 and .label_246 -> quotearg_free_2985

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec0,8]
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8])

SB || RAX := Dereference: [Var: slotvec0,8]
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), CF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), SF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), OF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8]), PF := CMP(Dereference: [(Var: RSP0 - Value: 16),8],Dereference: [Var: slotvec0,8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 8
Value B:
E_deref (E_var "slotvec0" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_248 -> quotearg_free_2124 and .label_246 -> quotearg_free_2985 have been verified to do the same.

same_behavior for the nodes: .label_244 -> quotearg_free_2134 and .label_245 -> quotearg_free_3000

same_behavior checking these two SStates:

SA || [Var: nslots,4] := Value: 1
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || [Var: nslots,4] := Value: 1
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "nslots" 64
E_var "nslots" 64
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_244 -> quotearg_free_2134 and .label_245 -> quotearg_free_3000 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2125 -> quotearg_free_2126 and quotearg_free_2986 -> quotearg_free_2989

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2125 -> quotearg_free_2126 and quotearg_free_2986 -> quotearg_free_2989 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2127 -> quotearg_free_2127 and quotearg_free_2990 -> quotearg_free_2990

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2127 -> quotearg_free_2127 and quotearg_free_2990 -> quotearg_free_2990 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2128 -> quotearg_free_2129 and quotearg_free_2991 -> quotearg_free_2993

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec0,8]
SA || [Var: slotvec,8] := Dereference: [Var: slotvec0,8]

SB || RAX := Dereference: [Var: slotvec0,8]
SB || [Var: slotvec,8] := Dereference: [Var: slotvec0,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slotvec0" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 8
Value B:
E_deref (E_var "slotvec0" 64) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "slotvec" 64
E_var "slotvec" 64
(v1 := v2):
E_deref (E_var "slotvec0" 64) 8
E_deref (E_var "slotvec0" 64) 8
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "slotvec" 64
E_var "slotvec0" 64
(v1 := v2):
E_deref (E_var "slotvec0" 64) 8
E_deref (E_var "slotvec0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_2128 -> quotearg_free_2129 and quotearg_free_2991 -> quotearg_free_2993 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2115 -> quotearg_free_2116 and quotearg_free_2975 -> quotearg_free_2976

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 8),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 8 64]) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 8 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2115 -> quotearg_free_2116 and quotearg_free_2975 -> quotearg_free_2976 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2117 -> quotearg_free_2117 and quotearg_free_2977 -> quotearg_free_2977

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2117 -> quotearg_free_2117 and quotearg_free_2977 -> quotearg_free_2977 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2118 -> quotearg_free_2120 and quotearg_free_2978 -> quotearg_free_2981

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,8]
SA || [Var: label_246,8] := Dereference: [Var: slot0,8], [Var: slotvec0,8] := Value: 256

SB || RAX := Dereference: [Var: slot0,8]
SB || [Var: label_244,8] := Dereference: [Var: slot0,8], [Var: slotvec0,8] := Value: 256

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "slot0" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "slot0" 64) 8
Value B:
E_deref (E_var "slot0" 64) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "label_246" 64
E_var "label_244" 64
(v1 := v2):
E_deref (E_var "slot0" 64) 8
E_deref (E_var "slot0" 64) 8
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "label_246" 64
E_var "slot0" 64
(v1 := v2):
E_deref (E_var "slot0" 64) 8
E_deref (E_var "slot0" 64) 8
b0: True b1: True


Else resulting values:
(a1 := a2):
E_var "slotvec0" 64
E_var "slotvec0" 64
(v1 := v2):
E_val 256 64
E_val 256 64
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_2118 -> quotearg_free_2120 and quotearg_free_2978 -> quotearg_free_2981 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2101 -> quotearg_free_2104 and quotearg_free_2950 -> quotearg_free_2957

same_behavior checking these two SStates:

SA || RAX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]) + Value: 8),8]
SA || ZF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), CF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), SF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), OF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), PF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8])

SB || RAX := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), RDI := Dereference: [((SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]) + Value: 8),8]
SB || ZF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), CF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), SF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), OF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8]), PF := (SHL(zextend(sextend(Dereference: [(Var: RSP0 - Value: 20),4],32,64),Value: 64),Value: 4) + Dereference: [(Var: RSP0 - Value: 16),8])

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]),(RDI,E_deref (E_app (Op AD(5,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
D) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8],E_val 8 64]) 8),(RSI,E_reg RSI)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]),(RDI,E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8],E_val 8 64]) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8],E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4],E_val 64 (-1)],E_val 4 64],E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8],E_val 8 64]) 8
local_var_cmp called

local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2101 -> quotearg_free_2104 and quotearg_free_2950 -> quotearg_free_2957 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2105 -> quotearg_free_2105 and quotearg_free_2958 -> quotearg_free_2958

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "free" "") [])]
Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2105 -> quotearg_free_2105 and quotearg_free_2958 -> quotearg_free_2958 have been verified to do the same.

same_behavior for the nodes: quotearg_free_2106 -> quotearg_free_2109 and quotearg_free_2959 -> quotearg_free_2966

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
SA || [(Var: RSP0 - Value: 20),4] := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
SB || [(Var: RSP0 - Value: 20),4] := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 20),4] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4,E_val 1 32]),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4,E_val 1 32]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4,E_val 1 32]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4,E_val 1 32]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4,E_val 1 32]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_free_2106 -> quotearg_free_2109 and quotearg_free_2959 -> quotearg_free_2966 have been verified to do the same.

Label relationship:
label_246 <--> slot0,label_244
slotvec <--> slotvec0,slotvec
 <--> 
nslots <--> nslots
slotvec0 <--> slotvec0
slot0 <--> slot0

Local variable relationship:
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (51/60): "set_custom_quoting"
--------
.dot code for CFG of text section set_custom_quoting for Vanilla
diGraph set_custom_quoting_Vanilla{
	set_custom_quoting_0  [label="[set_custom_quoting_571,set_custom_quoting_572]"]
	set_custom_quoting_1  [label="[.label_36,set_custom_quoting_591]"]
	set_custom_quoting_2  [label="[set_custom_quoting_578,set_custom_quoting_579]"]
	set_custom_quoting_3  [label="[.label_37,.label_37]"]
	set_custom_quoting_4  [label="[.label_35,set_custom_quoting_577]"]
	set_custom_quoting_5  [label="[set_custom_quoting,set_custom_quoting_570]"]

	set_custom_quoting_0 -> set_custom_quoting_4;

	set_custom_quoting_2 -> set_custom_quoting_1 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3 [label="ZF"];

	set_custom_quoting_4 -> set_custom_quoting_3 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_2 [label="!ZF"];
	set_custom_quoting_5 -> set_custom_quoting_4 [label="!ZF"];
	set_custom_quoting_5 -> set_custom_quoting_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section set_custom_quoting for Randomized
diGraph set_custom_quoting_Randomized{
	set_custom_quoting_0  [label="[set_custom_quoting_795,set_custom_quoting_797]"]
	set_custom_quoting_1  [label="[.label_36,set_custom_quoting_825]"]
	set_custom_quoting_2  [label="[set_custom_quoting_806,set_custom_quoting_809]"]
	set_custom_quoting_3  [label="[.label_37,.label_37]"]
	set_custom_quoting_4  [label="[.label_35,set_custom_quoting_805]"]
	set_custom_quoting_5  [label="[set_custom_quoting,set_custom_quoting_794]"]

	set_custom_quoting_0 -> set_custom_quoting_4;

	set_custom_quoting_2 -> set_custom_quoting_1 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3 [label="ZF"];

	set_custom_quoting_4 -> set_custom_quoting_3 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_2 [label="!ZF"];
	set_custom_quoting_5 -> set_custom_quoting_4 [label="!ZF"];
	set_custom_quoting_5 -> set_custom_quoting_0 [label="ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 4, , 2 --!ZF--> 1, 2 --ZF--> 3, , 4 --ZF--> 3, 4 --!ZF--> 2, 5 --!ZF--> 4, 5 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "set_custom_quoting"
node 0:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 40),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 48),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 2:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)
node 3:
RAX := abort@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value:(5,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == Var: RSP0 && RBP == Var: RBP0)])
 16),8]
[Dereference: [(Var: RSP0 - Value: 16),8],4] := Value: 10
ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)
node 5:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 5

Edges: 0 ----> 4, , 2 --!ZF--> 1, 2 --ZF--> 3, , 4 --ZF--> 3, 4 --!ZF--> 2, 5 --!ZF--> 4, 5 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "set_custom_quoting"
node 0:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]
node 1:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 40),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 48),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 2:
ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)
node 3:
RAX := abort@()
node 4:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[Dereference: [(Var: RSP0 - Value: 16),8],4] := Value: 10
ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)
node 5:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: set_custom_quoting -> set_custom_quoting_570 and set_custom_quoting -> set_custom_quoting_794

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 24),8] := Reg: RSI, [(Var: RSP0 - Value: 32),8] := Reg: RDX
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting -> set_custom_quoting_570 and set_custom_quoting -> set_custom_quoting_794 have been verified to do the same.

same_behavior for the nodes: .label_35 -> set_custom_quoting_577 and .label_35 -> set_custom_quoting_805

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [Dereference: [(Var: RSP0 - Value: 16),8],4] := Value: 10
SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [Dereference: [(Var: RSP0 - Value: 16),8],4] := Value: 10
SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 24),8],Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
(v1 := v2):
E_val 10 32
E_val 10 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_35 -> set_custom_quoting_577 and .label_35 -> set_custom_quoting_805 have been verified to do the same.

same_behavior for the nodes: .label_37 -> .label_37 and .label_37 -> .label_37

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_37 -> .label_37 and .label_37 -> .label_37 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_578 -> set_custom_quoting_579 and set_custom_quoting_806 -> set_custom_quoting_809

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)

SB || ZF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), CF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), SF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), OF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0), PF := CMP(Dereference: [(Var: RSP0 - Value: 32),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_578 -> set_custom_quoting_579 and set_custom_quoting_806 -> set_custom_quoting_809 have been verified to do the same.

same_behavior for the nodes: .label_36 -> set_custom_quoting_591 and .label_36 -> set_custom_quoting_825

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 40),8] := Dereference: [(Va(2,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
r: RSP0 - Value: 24),8], [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 48),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 40),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 48),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 40 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 48 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Mem Chk: True
Result: Success
Nodes .label_36 -> set_custom_quoting_591 and .label_36 -> set_custom_quoting_825 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_571 -> set_custom_quoting_572 and set_custom_quoting_795 -> set_custom_quoting_797

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_571 -> set_custom_quoting_572 and set_custom_quoting_795 -> set_custom_quoting_797 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (52/60): "set_quoting_flags"
--------
.dot code for CFG of text section set_quoting_flags for Vanilla
diGraph set_quoting_flags_Vanilla{
	set_quoting_flags_0  [label="[set_quoting_flags_544,set_quoting_flags_545]"]
	set_quoting_flags_1  [label="[.label_34,set_quoting_flags_555]"]
	set_quoting_flags_2  [label="[set_quoting_flags,set_quoting_flags_543]"]

	set_quoting_flags_0 -> set_quoting_flags_1;

	set_quoting_flags_2 -> set_quoting_flags_1 [label="!ZF"];
	set_quoting_flags_2 -> set_quoting_flags_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section set_quoting_flags for Randomized
diGraph set_quoting_flags_Randomized{
	set_quoting_flags_0  [label="[set_quoting_flags_756,set_quoting_flags_758]"]
	set_quoting_flags_1  [label="[.label_34,set_quoting_flags_776]"]
	set_quoting_flags_2  [label="[set_quoting_flags,set_quoting_flags_755]"]

	set_quoting_flags_0 -> set_quoting_flags_1;

	set_quoting_flags_2 -> set_quoting_flags_1 [label="!ZF"];
	set_quoting_flags_2 -> set_quoting_flags_0 [label="ZF"];
}
--------
Starting Node: 2

Edges: 0 ----> 1, , 2 --!ZF--> 1, 2 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]
node 1:
RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4], RCX := Dereference: [(Var: RSP0 - Value: 20),4]
[(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4] := Dereference: [(Var: RSP0 - Value: 20),4], [(Var: RSP0 - Value: 24),4] := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4]
node 2:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 2

Edges: 0 ----> 1, , 2 --!ZF--> 1, 2 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]
node 1:
RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4], RCX := Dereference: [(Var: RSP0 - Value: 20),4]
[(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4] := Dereference: [(Var: RSP0 - Value: 20),4], [(Var: RSP0 - Value: 24),4] := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4]
node 2:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: set_quoting_flags -> set_quoting_flags_543 and set_quoting_flags -> set_quoting_flags_755

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_quoting_flags -> set_quoting_flags_543 and set_quoting_flags -> set_quoting_flags_755 have been verified to do the same.

same_behavior for the nodes: .label_34 -> set_quoting_flags_555 and .label_34 -> set_quoting_flags_776

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4], RCX := Dereference: [(Var: RSP0 - Value: 20),4]
SA || [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4] := Dereference: [(Var: RSP0 - Value: 20),4], [(Var: RSP0 - Value: 24),4] := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4]

SB || RAX := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4], RCX := Dereference: [(Var: RSP0 - Value: 20),4]
SB || [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4] := Dereference: [(Var: RSP0 - Value: 20),4], [(Var: RSP0 - Value: 24),4] := Dereference: [(Dereference: [(Var: RSP0 - Value: 16),8] + Value: 4),4]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(RDI,E_reg RDI)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]) 4
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8,E_val 4 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_34 -> set_quoting_flags_555 and .label_34 -> set_quoting_flags_776 have been verified to do the same.

same_behavior for the nodes: set_quoting_flags_544 -> set_quoting_flags_545 and set_quoting_flags_756 -> set_quoting_flags_758

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_quoting_flags_544 -> set_quoting_flags_545 and set_quoting_flags_756 -> set_quoting_flags_758 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (53/60): "set_char_quoting"
--------
.dot code for CFG of text section set_char_quoting for Vanilla
diGraph set_char_quoting_Vanilla{
	set_char_quoting_0  [label="[set_char_quoting_490,set_char_quoting_492]"]
	set_char_quoting_1  [label="[.label_32,set_char_quoting_496]"]
	set_char_quoting_2  [label="[.label_33,set_char_quoting_530]"]
	set_char_quoting_3  [label="[set_char_quoting,set_char_quoting_489]"]

	set_char_quoting_0 -> set_char_quoting_2;
	set_char_quoting_1 -> set_char_quoting_2;

	set_char_quoting_3 -> set_char_quoting_1 [label="ZF"];
	set_char_quoting_3 -> set_char_quoting_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_char_quoting for Randomized
diGraph set_char_quoting_Randomized{
	set_char_quoting_0  [label="[set_char_quoting_674,set_char_quoting_679]"]
	set_char_quoting_1  [label="[.label_32,set_char_quoting_686]"]
	set_char_quoting_2  [label="[.label_33,set_char_quoting_739]"]
	set_char_quoting_3  [label="[set_char_quoting,set_char_quoting_673]"]

	set_char_quoting_0 -> set_char_quoting_2;
	set_char_quoting_1 -> set_char_quoting_2;

	set_char_quoting_3 -> set_char_quoting_1 [label="ZF"];
	set_char_quoting_3 -> set_char_quoting_0 [label="!ZF"];
}
--------
Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "set_char_quoting"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 56),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), RCX := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), RDX := SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2), RSI := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
[((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4] := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), [(Var: RSP0 - Value: 40),8] := ((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8), [(Var: RSP0 - Value: 44),4] := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), [(Var: RSP0 - Value: 48),4] := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), [(Var: RSP0 - Value: 60),4] := Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]
ZF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), CF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), SF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), OF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), PF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RDX), [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "set_char_quoting"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 56),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), RCX := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), RDX := SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2), RSI := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
[((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4] := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), [(Var: RSP0 - Value: 40),8] := ((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8), [(Var: RSP0 - Value: 44),4] := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), [(Var: RSP0 - Value: 48),4] := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), [(Var: RSP0 - Value: 60),4] := Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]
ZF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), CF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), SF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), OF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), PF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI))
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RDX), [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: set_char_quoting -> set_char_quoting_489 and set_char_quoting -> set_char_quoting_673

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI))
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RDX), [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RSI)
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . TakeBits: <7,0>(Reg: RSI))
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 17),1] := TakeBits: <7,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RDX), [(Var: RSP0 - Value: 25),1] := TakeBits: <7,0>(Reg: RSI)
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (TakeBits 7 0) [E_reg RSI]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RSI]
E_app (TakeBits 7 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RSI]
E_app (TakeBits 7 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDX]
E_app (TakeBits 31 0) [E_reg RDX]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 17 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RSI]
E_app (TakeBits 7 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RSI]
E_app (TakeBits 7 0) [E_reg RSI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_char_quoting -> set_char_quoting_489 and set_char_quoting -> set_char_quoting_673 have been verified to do the same.

same_behavior for the nodes: .label_32 -> set_char_quoting_496 and .label_32 -> set_char_quoting_686

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 56),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 56),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_32 -> set_char_quoting_496 and .label_32 -> set_char_quoting_686 have been verified to do the same.

same_behavior for the nodes: .label_33 -> set_char_quoting_530 and .label_33 -> set_char_quoting_739

same_behavior checking these two SStates:

SA || RAX := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), RCX := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), RDX := SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2), RSI := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
SA || [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4] := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), [(Var: RSP0 - Value: 40),8] := ((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8), [(Var: RSP0 - Value: 44),4] := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), [(Var: RSP0 - Value: 48),4] := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), [(Var: RSP0 - Value: 60),4] := Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]
SA || ZF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), CF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), SF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), OF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), PF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])

SB || RAX := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), RCX := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), RDX := SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2), RSI := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])
SB || [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4] := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), [(Var: RSP0 - Value: 40),8] := ((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8), [(Var: RSP0 - Value: 44),4] := AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31), [(Var: RSP0 - Value: 48),4] := AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1), [(Var: RSP0 - Value: 60),4] := Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]
SB || ZF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), CF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), SF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), OF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4]), PF := XOR(SHL(zextend(XOR(AND(Dereference: [(Var: RSP0 - Value: 24),4],Value: 1),AND(SHR(zextend(Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4],Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Value: 1)),Value: 32),AND(Dereference: [(Var: RSP0 - Value: 25),1],Value: 31)),Dereference: [((Dereference: [(Var: RSP0 - Value: 56),8] + SHL(zextend(SHR(zextend(Dereference: [(Var: RSP0 - Value: 25),1],Value: 64),Value: 5),Value: 64),Value: 2)) + Value: 8),4])

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]),(RCX,E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]),(RDI,E_reg RDI),(RSI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4])]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]),(RCX,E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]),(RDI,E_reg RDI),(RSI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4])]
reg_chk debug RDXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]),(RCX,E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]),(RDI,E_reg RDI),(RSI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4])]
reg_chk debug RSIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]),(RCX,E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]),(RDX,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]),(RDI,E_reg RDI),(RSI,E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4])]
Resulting values:
Value A:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]
local_var_cmp called

local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]
Value B:
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4]
Value B:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4]
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]
E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]
(v1 := v2):
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4]
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op XOR) [E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4,E_val 1 32],E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]],E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8](3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
],E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4]
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]
E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 44 64]
(v1 := v2):
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]
E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4,E_val 32 (-1)],E_app (Op AND) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 31 8]],E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 60 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4
E_deref (E_app (Op ADD) [E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8,E_app (Op SHL) [E_app (F zextend) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 25 64]) 1,E_val 64 (-1)],E_val 5 64],E_val 64 (-1)],E_val 2 64]],E_val 8 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_33 -> set_char_quoting_530 and .label_33 -> set_char_quoting_739 have been verified to do the same.

same_behavior for the nodes: set_char_quoting_490 -> set_char_quoting_492 and set_char_quoting_674 -> set_char_quoting_679

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_char_quoting_490 -> set_char_quoting_492 and set_char_quoting_674 -> set_char_quoting_679 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 60) <--> (Var: RSP0 - Value: 60)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 44) <--> (Var: RSP0 - Value: 44)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 25) <--> (Var: RSP0 - Value: 25),(Var: RSP0 - Value: 17)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 17) <--> (Var: RSP0 - Value: 25),(Var: RSP0 - Value: 17)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (54/60): "set_quoting_style"
--------
.dot code for CFG of text section set_quoting_style for Vanilla
diGraph set_quoting_style_Vanilla{
	set_quoting_style_0  [label="[set_quoting_style_460,set_quoting_style_462]"]
	set_quoting_style_1  [label="[.label_30,set_quoting_style_466]"]
	set_quoting_style_2  [label="[.label_31,set_quoting_style_472]"]
	set_quoting_style_3  [label="[set_quoting_style,set_quoting_style_459]"]

	set_quoting_style_0 -> set_quoting_style_2;
	set_quoting_style_1 -> set_quoting_style_2;

	set_quoting_style_3 -> set_quoting_style_1 [label="ZF"];
	set_quoting_style_3 -> set_quoting_style_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_quoting_style for Randomized
diGraph set_quoting_style_Randomized{
	set_quoting_style_0  [label="[set_quoting_style_635,set_quoting_style_637]"]
	set_quoting_style_1  [label="[.label_30,set_quoting_style_642]"]
	set_quoting_style_2  [label="[.label_31,set_quoting_style_648]"]
	set_quoting_style_3  [label="[set_quoting_style,set_quoting_style_634]"]

	set_quoting_style_0 -> set_quoting_style_2;
	set_quoting_style_1 -> set_quoting_style_2;

	set_quoting_style_3 -> set_quoting_style_1 [label="ZF"];
	set_quoting_style_3 -> set_quoting_style_0 [label="!ZF"];
}
--------
Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 32),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 24),4]
[Dereference: [(Var: RSP0 - Value: 32),8],4] := Dereference: [(Var: RSP0 - Value: 24),4]
node 3:
RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := Tak(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
eBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 32),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 24),4]
[Dereference: [(Var: RSP0 - Value: 32),8],4] := Dereference: [(Var: RSP0 - Value: 24),4]
node 3:
RSI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RSI)
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: set_quoting_style -> set_quoting_style_459 and set_quoting_style -> set_quoting_style_634

same_behavior checking these two SStates:

SA || RSI := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || RSI := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI, [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RSI), [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RDI),(RSI,E_app (TakeBits 31 0) [E_reg RSI])]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_quoting_style -> set_quoting_style_459 and set_quoting_style -> set_quoting_style_634 have been verified to do the same.

same_behavior for the nodes: .label_30 -> set_quoting_style_466 and .label_30 -> set_quoting_style_642

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_30 -> set_quoting_style_466 and .label_30 -> set_quoting_style_642 have been verified to do the same.

same_behavior for the nodes: .label_31 -> set_quoting_style_472 and .label_31 -> set_quoting_style_648

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 24),4]
SA || [Dereference: [(Var: RSP0 - Value: 32),8],4] := Dereference: [(Var: RSP0 - Value: 24),4]

SB || RAX := Dereference: [(Var: RSP0 - Value: 32),8], RCX := Dereference: [(Var: RSP0 - Value: 24),4]
SB || [Dereference: [(Var: RSP0 - Value: 32),8],4] := Dereference: [(Var: RSP0 - Value: 24),4]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4)]
reg_chk debug RCXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_31 -> set_quoting_style_472 and .label_31 -> set_quoting_style_648 have been verified to do the same.

same_behavior for the nodes: set_quoting_style_460 -> set_quoting_style_462 and set_quoting_style_635 -> set_quoting_style_637

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_quoting_style_460 -> set_quoting_style_462 and set_quoting_style_635 -> set_quoting_style_637 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (55/60): "get_quoting_style"
--------
.dot code for CFG of text section get_quoting_style for Vanilla
diGraph get_quoting_style_Vanilla{
	get_quoting_style_0  [label="[get_quoting_style_433,get_quoting_style_435]"]
	get_quoting_style_1  [label="[.label_28,get_quoting_style_439]"]
	get_quoting_style_2  [label="[.label_29,get_quoting_style_444]"]
	get_quoting_style_3  [label="[get_quoting_style,get_quoting_style_432]"]

	get_quoting_style_0 -> get_quoting_style_2;
	get_quoting_style_1 -> get_quoting_style_2;

	get_quoting_style_3 -> get_quoting_style_1 [label="ZF"];
	get_quoting_style_3 -> get_quoting_style_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section get_quoting_style for Randomized
diGraph get_quoting_style_Randomized{
	get_quoting_style_0  [label="[get_quoting_style_600,get_quoting_style_603]"]
	get_quoting_style_1  [label="[.label_28,get_quoting_style_609]"]
	get_quoting_style_2  [label="[.label_29,get_quoting_style_616]"]
	get_quoting_style_3  [label="[get_quoting_style,get_quoting_style_599]"]

	get_quoting_style_0 -> get_quoting_style_2;
	get_quoting_style_1 -> get_quoting_style_2;

	get_quoting_style_3 -> get_quoting_style_1 [label="ZF"];
	get_quoting_style_3 -> get_quoting_style_0 [label="!ZF"];
}
--------
Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 24),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4]
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 3

Edges: 0 ----> 2, 1 ----> 2, , 3 --ZF--> 1, 3 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 1:
RAX := Dereference: [Var: default_quoting_options,8]
[(Var: RSP0 - Value: 24),8] := Dereference: [Var: default_quoting_options,8]
node 2:
RAX := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4]
node 3:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: get_quoting_style -> get_quoting_style_432 and get_quoting_style -> get_quoting_style_599

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes get_quoting_style -> get_quoting_style_432 and get_quoting_style -> get_quoting_style_599 have been verified to do the same.

same_behavior for the nodes: .label_28 -> get_quoting_style_439 and .label_28 -> get_quoting_style_609

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,8]
SA || [(Var: RSP0 - Value: 24),8] := Dereference: [Var: default_quoting_options,8]

SB || RAX := Dereference: [Var: default_quoting_options,8]
SB || [(Var: RSP0 - Value: 24),8] := Dereference: [Var: default_quoting_options,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var "default_quoting_options" 64) 8),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 8
Value B:
E_deref (E_var "default_quoting_options" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_var "default_quoting_options" 64) 8
E_deref (E_var "default_quoting_options" 64) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_28 -> get_quoting_style_439 and .label_28 -> get_quoting_style_609 have been verified to do the same.

same_behavior for the nodes: .label_29 -> get_quoting_style_444 and .label_29 -> get_quoting_style_616

same_behavior checking these two SStates:

SA || RAX := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4]

SB || RAX := Dereference: [Dereference: [(Var: RSP0 - Value: 24),8],4]

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4)]
Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_29 -> get_quoting_style_444 and .label_29 -> get_quoting_style_616 have been verified to do the same.

same_behavior for the nodes: get_quoting_style_433 -> get_quoting_style_435 and get_quoting_style_600 -> get_quoting_style_603

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes get_quoting_style_433 -> get_quoting_style_435 and get_quoting_style_600 -> get_quoting_style_603 have been verifie(19,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == Var: RSP0 && RBP == Var: RBP0)])
d to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (56/60): "set_program_name"
--------
.dot code for CFG of text section set_program_name for Vanilla
diGraph set_program_name_Vanilla{
	set_program_name_0  [label="[set_program_name_322,set_program_name_323]"]
	set_program_name_1  [label="[set_program_name_324,set_program_name_324]"]
	set_program_name_2  [label="[set_program_name_325,set_program_name_325]"]
	set_program_name_3  [label="[set_program_name_326,set_program_name_326]"]
	set_program_name_4  [label="[set_program_name_334,set_program_name_337]"]
	set_program_name_5  [label="[set_program_name_367,set_program_name_371]"]
	set_program_name_6  [label="[.label_22,.label_22]"]
	set_program_name_7  [label="[set_program_name_358,set_program_name_363]"]
	set_program_name_8  [label="[set_program_name_364,set_program_name_364]"]
	set_program_name_9  [label="[set_program_name_365,set_program_name_366]"]
	set_program_name_10  [label="[set_program_name_349,set_program_name_354]"]
	set_program_name_11  [label="[set_program_name_355,set_program_name_355]"]
	set_program_name_12  [label="[set_program_name_356,set_program_name_357]"]
	set_program_name_13  [label="[.label_25,set_program_name_381]"]
	set_program_name_14  [label="[.label_24,set_program_name_340]"]
	set_program_name_15  [label="[.label_21,set_program_name_348]"]
	set_program_name_16  [label="[.label_23,set_program_name_329]"]
	set_program_name_17  [label="[set_program_name_330,set_program_name_330]"]
	set_program_name_18  [label="[set_program_name_331,set_program_name_333]"]
	set_program_name_19  [label="[set_program_name,set_program_name_321]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_2;
	set_program_name_2 -> set_program_name_3;

	set_program_name_4 -> set_program_name_15;
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_13;
	set_program_name_7 -> set_program_name_8;
	set_program_name_8 -> set_program_name_9;
	set_program_name_9 -> set_program_name_6 [label="!ZF"];
	set_program_name_9 -> set_program_name_5 [label="ZF"];
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_12;
	set_program_name_12 -> set_program_name_13 [label="!ZF"];
	set_program_name_12 -> set_program_name_7 [label="ZF"];

	set_program_name_14 -> set_program_name_15;
	set_program_name_15 -> set_program_name_13 [label="SF != OF"];
	set_program_name_15 -> set_program_name_10 [label="SF == OF"];
	set_program_name_16 -> set_program_name_17;
	set_program_name_17 -> set_program_name_18;
	set_program_name_18 -> set_program_name_14 [label="ZF"];
	set_program_name_18 -> set_program_name_4 [label="!ZF"];
	set_program_name_19 -> set_program_name_16 [label="!ZF"];
	set_program_name_19 -> set_program_name_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section set_program_name for Randomized
diGraph set_program_name_Randomized{
	set_program_name_0  [label="[set_program_name_436,set_program_name_438]"]
	set_program_name_1  [label="[set_program_name_439,set_program_name_439]"]
	set_program_name_2  [label="[set_program_name_440,set_program_name_442]"]
	set_program_name_3  [label="[set_program_name_443,set_program_name_443]"]
	set_program_name_4  [label="[set_program_name_455,set_program_name_459]"]
	set_program_name_5  [label="[set_program_name_504,set_program_name_512]"]
	set_program_name_6  [label="[.label_22,.label_22]"]
	set_program_name_7  [label="[set_program_name_491,set_program_name_500]"]
	set_program_name_8  [label="[set_program_name_501,set_program_name_501]"]
	set_program_name_9  [label="[set_program_name_502,set_program_name_503]"]
	set_program_name_10  [label="[set_program_name_477,set_program_name_486]"]
	set_program_name_11  [label="[set_program_name_487,set_program_name_487]"]
	set_program_name_12  [label="[set_program_name_488,set_program_name_490]"]
	set_program_name_13  [label="[.label_24,set_program_name_526]"]
	set_program_name_14  [label="[.label_21,set_program_name_462]"]
	set_program_name_15  [label="[.label_25,set_program_name_476]"]
	set_program_name_16  [label="[.label_23,set_program_name_448]"]
	set_program_name_17  [label="[set_program_name_449,set_program_name_449]"]
	set_program_name_18  [label="[set_program_name_450,set_program_name_454]"]
	set_program_name_19  [label="[set_program_name,set_program_name_435]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_2;
	set_program_name_2 -> set_program_name_3;

	set_program_name_4 -> set_program_name_15;
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_13;
	set_program_name_7 -> set_program_name_8;
	set_program_name_8 -> set_program_name_9;
	set_program_name_9 -> set_program_name_6 [label="!ZF"];
	set_program_name_9 -> set_program_name_5 [label="ZF"];
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_12;
	set_program_name_12 -> set_program_name_13 [label="!ZF"];
	set_program_name_12 -> set_program_name_7 [label="ZF"];

	set_program_name_14 -> set_program_name_15;
	set_program_name_15 -> set_program_name_13 [label="SF != OF"];
	set_program_name_15 -> set_program_name_10 [label="SF == OF"];
	set_program_name_16 -> set_program_name_17;
	set_program_name_17 -> set_program_name_18;
	set_program_name_18 -> set_program_name_14 [label="ZF"];
	set_program_name_18 -> set_program_name_4 [label="!ZF"];
	set_program_name_19 -> set_program_name_16 [label="!ZF"];
	set_program_name_19 -> set_program_name_0 [label="ZF"];
}
--------
Starting Node: 19

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, , 4 ----> 15, 5 ----> 6, 6 ----> 13, 7 ----> 8, 8 ----> 9, 9 --!ZF--> 6, 9 --ZF--> 5, 10 ----> 11, 11 ----> 12, 12 --!ZF--> 13, 12 --ZF--> 7, , 14 ----> 15, 15 --SF != OF--> 13, 15 --SF == OF--> 10, 16 ----> 17, 17 ----> 18, 18 --ZF--> 14, 18 --!ZF--> 4, 19 --!ZF--> 16, 19 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "set_program_name"
node 0:
RDI := Dereference: [Var: .str_3,8], RSI := Dereference: [Var: stderr,8]
node 1:
RAX := fputs@()
node 2:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
node 3:
RAX := abort@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
[(Var: RSP0 - Value: 48),8] := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
node 5:
RAX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
[Var: program_invocation_short_name,8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), [(Var: RSP0 - Value: 16),8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
node 6:
skip'
node 7:
RAX := Value: 3, RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Value: 3, RDI := Dereference: [(Var: RSP0 - Value: 32),8], RSI := Dereference: [Var: .str.2_0,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 32),8]
node 8:
RAX := strncmp@()
node 9:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 10:
RAX := Value: 7, RCX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RDX := Value: 7, RDI := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 1844674407370955160(19,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 56) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == Var: RSP0 && RBP == Var: RBP0)])
9), RSI := Dereference: [Var: .str.1_1,8]
ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609)
node 11:
RAX := strncmp@()
node 12:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[Var: __progname_full,8] := Dereference: [(Var: RSP0 - Value: 16),8], [Var: program_name,8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 48),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 15:
RAX := (Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]), RCX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), CF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), SF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), OF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), PF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7)
node 16:
RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Value: 47
node 17:
RAX := strrchr@()
node 18:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 19:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

Starting Node: 19

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, , 4 ----> 15, 5 ----> 6, 6 ----> 13, 7 ----> 8, 8 ----> 9, 9 --!ZF--> 6, 9 --ZF--> 5, 10 ----> 11, 11 ----> 12, 12 --!ZF--> 13, 12 --ZF--> 7, , 14 ----> 15, 15 --SF != OF--> 13, 15 --SF == OF--> 10, 16 ----> 17, 17 ----> 18, 18 --ZF--> 14, 18 --!ZF--> 4, 19 --!ZF--> 16, 19 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "set_program_name"
node 0:
RDI := Dereference: [Var: .str_3,8], RSI := Dereference: [Var: stderr,8]
node 1:
RAX := fputs@()
node 2:
[(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)
node 3:
RAX := abort@()
node 4:
RAX := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
[(Var: RSP0 - Value: 48),8] := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
ZF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
node 5:
RAX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
[Var: program_invocation_short_name,8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), [(Var: RSP0 - Value: 16),8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
node 6:
skip'
node 7:
RAX := Value: 3, RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Value: 3, RDI := Dereference: [(Var: RSP0 - Value: 32),8], RSI := Dereference: [Var: .str.2_0,8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 32),8]
node 8:
RAX := strncmp@()
node 9:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 10:
RAX := Value: 7, RCX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RDX := Value: 7, RDI := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RSI := Dereference: [Var: .str.1_1,8]
ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609)
node 11:
RAX := strncmp@()
node 12:
ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[Var: __progname_full,8] := Dereference: [(Var: RSP0 - Value: 16),8], [Var: program_name,8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 48),8] := Dereference: [(Var: RSP0 - Value: 16),8]
node 15:
RAX := (Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]), RCX := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), CF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), SF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), OF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), PF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7)
node 16:
RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Value: 47
node 17:
RAX := strrchr@()
node 18:
[(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)
node 19:
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)
--------

same_behavior for the nodes: set_program_name -> set_program_name_321 and set_program_name -> set_program_name_435

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SA || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
SB || ZF := CMP(Reg: RDI,Value: 0), CF := CMP(Reg: RDI,Value: 0), SF := CMP(Reg: RDI,Value: 0), OF := CMP(Reg: RDI,Value: 0), PF := CMP(Reg: RDI,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name -> set_program_name_321 and set_program_name -> set_program_name_435 have been verified to do the same.

same_behavior for the nodes: .label_23 -> set_program_name_329 and .label_23 -> set_program_name_448

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Value: 47

SB || RDI := Dereference: [(Var: RSP0 - Value: 16),8], RSI := Value: 47

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_val 47 32)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RSI,E_val 47 32)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 47 32
Value B:
E_val 47 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_23 -> set_program_name_329 and .label_23 -> set_program_name_448 have been verified to do the same.

same_behavior for the nodes: set_program_name_330 -> set_program_name_330 and set_program_name_449 -> set_program_name_449

same_behavior checking these two SStates:

SA || RAX := strrchr@()

SB || RAX := strrchr@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strrchr" "") [])]
Resulting values:
Value A:
E_app (F2 "strrchr" "") []
Value B:
E_app (F2 "strrchr" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_330 -> set_program_name_330 and set_program_name_449 -> set_program_name_449 have been verified to do the same.

same_behavior for the nodes: set_program_name_331 -> set_program_name_333 and set_program_name_450 -> set_program_name_454

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

SB || [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 0), CF := CMP(Reg: RAX,Value: 0), SF := CMP(Reg: RAX,Value: 0), OF := CMP(Reg: RAX,Value: 0), PF := CMP(Reg: RAX,Value: 0)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name_331 -> set_program_name_333 and set_program_name_450 -> set_program_name_454 have been verified to do the same.

same_behavior for the nodes: .label_24 -> set_program_name_340 and .label_21 -> set_program_name_462

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 48),8] := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 48),8] := Dereference: [(Var: RSP0 - Value: 16),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_24 -> set_program_name_340 and .label_21 -> set_program_name_462 have been verified to do the same.

same_behavior for the nodes: .label_21 -> set_program_name_348 and .label_25 -> set_program_name_476

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]), RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SA || ZF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), CF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), SF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), OF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), PF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]), RCX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SB || ZF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), CF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), SF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), OF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7), PF := CMP((Dereference: [(Var: RSP0 - Value: 48),8] - Dereference: [(Var: RSP0 - Value: 16),8]),Value: 7)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]
Value B:
E_app (Op SUB) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8]
local_var_cmp called

local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_21 -> set_program_name_348 and .label_25 -> set_program_name_476 have been verified to do the same.

same_behavior for the nodes: .label_25 -> set_program_name_381 and .label_24 -> set_program_name_526

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [Var: __progname_full,8] := Dereference: [(Var: RSP0 - Value: 16),8], [Var: program_name,8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

SB || RAX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [Var: __progname_full,8] := Dereference: [(Var: RSP0 - Value: 16),8], [Var: program_name,8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 8), CF := (Var: RSP0 - Value: 8), SF := (Var: RSP0 - Value: 8), OF := (Var: RSP0 - Value: 8), PF := (Var: RSP0 - Value: 8)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "__progname_full" 64
E_var "__progname_full" 64
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True


local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "__progname_full" 64
E_var "program_name" 64
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "program_name" 64
E_var "__progname_full" 64
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True


local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "program_name" 64
E_var "program_name" 64
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True


local_var_cmp called

local_var_cmp called

Mem Chk: True
Result: Success
Nodes .label_25 -> set_program_name_381 and .label_24 -> set_program_name_526 have been verified to do the same.

same_behavior for the nodes: set_program_name_349 -> set_program_name_354 and set_program_name_477 -> set_program_name_486

same_behavior checking these two SStates:

SA || RAX := Value: 7, RCX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RDX := Value: 7, RDI := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RSI := Dereference: [Var: .str.1_1,8]
SA || ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609)

SB || RAX := Value: 7, RCX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RDX := Value: 7, RDI := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), RSI := Dereference: [Var: .str.1_1,8]
SB || ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 18446744073709551609)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 7 32),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RDX,E_val 7 32),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RSI,E_deref (E_var ".str.1_1" 64) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 7 32),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RDX,E_val 7 32),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RSI,E_deref (E_var ".str.1_1" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 7 32),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RDX,E_val 7 32),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RSI,E_deref (E_var ".str.1_1" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 7 32),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RDX,E_val 7 32),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RSI,E_deref (E_var ".str.1_1" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 7 32),(RCX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RDX,E_val 7 32),(RDI,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]),(RSI,E_deref (E_var ".str.1_1" 64) 8)]
Resulting values:
Value A:
E_val 7 32
Value B:
E_val 7 32
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]
local_var_cmp called

Resulting values:
Value A:
E_val 7 32
Value B:
E_val 7 32
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 18446744073709551609 64]
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.1_1" 64) 8
Value B:
E_deref (E_var ".str.1_1" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_349 -> set_program_name_354 and set_program_name_477 -> set_program_name_486 have been verified to do the same.

same_behavior for the nodes: set_program_name_355 -> set_program_name_355 and set_program_name_487 -> set_program_name_487

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strncmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_355 -> set_program_name_355 and set_program_name_487 -> set_program_name_487 have been verified to do the same.

same_behavior for the nodes: set_program_name_356 -> set_program_name_357 and set_program_name_488 -> set_program_name_490

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_356 -> set_program_name_357 and set_program_name_488 -> set_program_name_490 have been verified to do the same.

same_behavior for the nodes: set_program_name_358 -> set_program_name_363 and set_program_name_491 -> set_program_name_500

same_behavior checking these two SStates:

SA || RAX := Value: 3, RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Value: 3, RDI := Dereference: [(Var: RSP0 - Value: 32),8], RSI := Dereference: [Var: .str.2_0,8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RAX := Value: 3, RCX := Dereference: [(Var: RSP0 - Value: 32),8], RDX := Value: 3, RDI := Dereference: [(Var: RSP0 - Value: 32),8], RSI := Dereference: [Var: .str.2_0,8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 32),8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_val 3 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_val 3 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RSI,E_deref (E_var ".str.2_0" 64) 8)]
reg_chk debug RCXfromList [(RIP,E_var "returned" 64),(RAX,E_val 3 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_val 3 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RSI,E_deref (E_var ".str.2_0" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_val 3 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_val 3 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RSI,E_deref (E_var ".str.2_0" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_val 3 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_val 3 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RSI,E_deref (E_var ".str.2_0" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_val 3 32),(RCX,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RDX,E_val 3 32),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8),(RSI,E_deref (E_var ".str.2_0" 64) 8)]
Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_var ".str.2_0" 64) 8
Value B:
E_deref (E_var ".str.2_0" 64) 8
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name_358 -> set_program_name_363 and set_program_name_491 -> set_program_name_500 have been verified to do the same.

same_behavior for the nodes: set_program_name_364 -> set_program_name_364 and set_program_name_501 -> set_program_name_501

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "strncmp" "") [])]
Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_364 -> set_program_name_364 and set_program_name_501 -> set_program_name_501 have been verified to do the same.

same_behavior for the nodes: set_program_name_365 -> set_program_name_366 and set_program_name_502 -> set_program_name_503

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), CF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), SF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), OF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0), PF := CMP(TakeBits: <31,0>(Reg: RAX),Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_365 -> set_program_name_366 and set_program_name_502 -> set_program_name_503 have been verified to do the same.

same_behavior for the nodes: .label_22 -> .label_22 and .label_22 -> .label_22

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_22 -> .label_22 and .label_22 -> .label_22 have been verified to do the same.

same_behavior for the nodes: set_program_name_367 -> set_program_name_371 and set_program_name_504 -> set_program_name_512

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
SA || [Var: program_invocation_short_name,8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), [(Var: RSP0 - Value: 16),8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
SB || [Var: program_invocation_short_name,8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), [(Var: RSP0 - Value: 16),8] := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), CF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), SF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), OF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3), PF := (Dereference: [(Var: RSP0 - Value: 32),8] + Value: 3)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_var "program_invocation_short_name" 64
E_var "program_invocation_short_name" 64
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8,E_val 3 64]
b0: True b1: True
local_var_cmp called

Mem Chk: True
Result: Success
Nodes set_program_name_367 -> set_program_name_371 and set_program_name_504 -> set_program_name_512 have been verified to do the same.

same_behavior for the nodes: set_program_name_334 -> set_program_name_337 and set_program_name_455 -> set_program_name_459

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
SA || [(Var: RSP0 - Value: 48),8] := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
SA || ZF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)

SB || RAX := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
SB || [(Var: RSP0 - Value: (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
48),8] := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)
SB || ZF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), CF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), SF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), OF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1), PF := (Dereference: [(Var: RSP0 - Value: 24),8] + Value: 1)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 1 64])]
Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 1 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 1 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 1 64]
E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8,E_val 1 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name_334 -> set_program_name_337 and set_program_name_455 -> set_program_name_459 have been verified to do the same.

same_behavior for the nodes: set_program_name_322 -> set_program_name_323 and set_program_name_436 -> set_program_name_438

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str_3,8], RSI := Dereference: [Var: stderr,8]

SB || RDI := Dereference: [Var: .str_3,8], RSI := Dereference: [Var: stderr,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str_3" 64) 8),(RSI,E_deref (E_var "stderr" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str_3" 64) 8),(RSI,E_deref (E_var "stderr" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str_3" 64) 8
Value B:
E_deref (E_var ".str_3" 64) 8
Resulting values:
Value A:
E_deref (E_var "stderr" 64) 8
Value B:
E_deref (E_var "stderr" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_322 -> set_program_name_323 and set_program_name_436 -> set_program_name_438 have been verified to do the same.

same_behavior for the nodes: set_program_name_324 -> set_program_name_324 and set_program_name_439 -> set_program_name_439

same_behavior checking these two SStates:

SA || RAX := fputs@()

SB || RAX := fputs@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs" "") []
Value B:
E_app (F2 "fputs" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_324 -> set_program_name_324 and set_program_name_439 -> set_program_name_439 have been verified to do the same.

same_behavior for the nodes: set_program_name_325 -> set_program_name_325 and set_program_name_440 -> set_program_name_442

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)

SB || [(Var: RSP0 - Value: 36),4] := TakeBits: <31,0>(Reg: RAX)

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name_325 -> set_program_name_325 and set_program_name_440 -> set_program_name_442 have been verified to do the same.

same_behavior for the nodes: set_program_name_326 -> set_program_name_326 and set_program_name_443 -> set_program_name_443

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "abort" "") [])]
Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_326 -> set_program_name_326 and set_program_name_443 -> set_program_name_443 have been verified to do the same.

Label relationship:
stderr <--> stderr
.str_3 <--> .str_3
program_invocation_short_name <--> program_invocation_short_name
.str.2_0 <--> .str.2_0
.str.1_1 <--> .str.1_1
program_name <--> program_name,__progname_full
__progname_full <--> program_name,__progname_full
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 32),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (57/60): "close_stdout_set_ignore_EPIPE"
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Vanilla
diGraph close_stdout_set_ignore_EPIPE_Vanilla{
	close_stdout_set_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_248]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Randomized
diGraph close_stdout_set_ignore_EPIPE_Randomized{
	close_stdout_set_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_335]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1))
[Var: ignore_EPIPE,1] := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := AND(TakeBits: <7,0>(Reg: RDI),Value: 1)
ZF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), CF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), SF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), OF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), PF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1))
[Var: ignore_EPIPE,1] := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := AND(TakeBits: <7,0>(Reg: RDI),Value: 1)
ZF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), CF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), SF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), OF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), PF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1)
--------

same_behavior for the nodes: close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_248 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_335

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1))
SA || [Var: ignore_EPIPE,1] := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := AND(TakeBits: <7,0>(Reg: RDI),Value: 1)
SA || ZF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), CF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), SF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), OF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), PF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1))
SB || [Var: ignore_EPIPE,1] := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 9),1] := AND(TakeBits: <7,0>(Reg: RDI),Value: 1)
SB || ZF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), CF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), SF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), OF (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
:= AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1), PF := AND(AND(TakeBits: <7,0>(Reg: RDI),Value: 1),Value: 1)

reg_chk debug RAXfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8],E_val 1 8]]),(RDI,E_reg RDI)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8],E_val 1 8]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op AND) [E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8],E_val 1 8]]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "ignore_EPIPE" 64
E_var "ignore_EPIPE" 64
(v1 := v2):
E_app (Op AND) [E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8],E_val 1 8]
E_app (Op AND) [E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8],E_val 1 8]
b0: True b1: True


local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 9 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 9 64]
(v1 := v2):
E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8]
E_app (Op AND) [E_app (TakeBits 7 0) [E_reg RDI],E_val 1 8]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_248 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_335 have been verified to do the same.

Label relationship:
ignore_EPIPE <--> ignore_EPIPE

Local variable relationship:
(Var: RSP0 - Value: 9) <--> (Var: RSP0 - Value: 9)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (58/60): "close_stdout_set_file_name"
--------
.dot code for CFG of text section close_stdout_set_file_name for Vanilla
diGraph close_stdout_set_file_name_Vanilla{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_231]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_file_name for Randomized
diGraph close_stdout_set_file_name_Randomized{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_311]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_file_name"
node 0:
[Var: file_name,8] := Reg: RDI, [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_file_name"
node 0:
[Var: file_name,8] := Reg: RDI, [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI
--------

same_behavior for the nodes: close_stdout_set_file_name -> close_stdout_set_file_name_231 and close_stdout_set_file_name -> close_stdout_set_file_name_311

same_behavior checking these two SStates:

SA || [Var: file_name,8] := Reg: RDI, [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI

SB || [Var: file_name,8] := Reg: RDI, [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RDI

reg_chk debug RDIfromList [(RIP,E_deref (E_var "RSP0" 64) 8),(RDI,E_reg RDI),(RSI,E_reg RSI)]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
Else resulting values:
(a1 := a2):
E_var "file_name" 64
E_var "file_name" 64
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True


local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout_set_file_name -> close_stdout_set_file_name_231 and close_stdout_set_file_name -> close_stdout_set_file_name_311 have been verified to do the same.

Label relationship:
file_name <--> file_name

Local variable relationship:
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (59/60): "usage"
--------
.dot code for CFG of text section usage for Vanilla
diGraph usage_Vanilla{
	usage_0  [label="[usage,usage_13]"]
	usage_1  [label="[usage_14,usage_14]"]
	usage_2  [label="[usage_15,usage_18]"]
	usage_3  [label="[usage_19,usage_19]"]
	usage_4  [label="[usage_20,usage_21]"]
	usage_5  [label="[usage_22,usage_22]"]
	usage_6  [label="[usage_23,usage_25]"]
	usage_7  [label="[usage_26,usage_26]"]
	usage_8  [label="[usage_27,usage_28]"]
	usage_9  [label="[usage_29,usage_29]"]
	usage_10  [label="[usage_30,usage_31]"]
	usage_11  [label="[usage_32,usage_32]"]
	usage_12  [label="[usage_33,usage_34]"]
	usage_13  [label="[usage_35,usage_35]"]
	usage_14  [label="[usage_36,usage_37]"]
	usage_15  [label="[usage_38,usage_38]"]
	usage_16  [label="[usage_39,usage_40]"]
	usage_17  [label="[usage_41,usage_41]"]
	usage_18  [label="[usage_42,usage_44]"]
	usage_19  [label="[usage_45,usage_45]"]
	usage_20  [label="[usage_46,usage_47]"]
	usage_21  [label="[usage_48,usage_48]"]
	usage_22  [label="[usage_49,usage_49]"]
	usage_23  [label="[usage_50,usage_50]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_4;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7;
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;
	usage_16 -> usage_17;
	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;
	usage_22 -> usage_23;

}
--------
--------
.dot code for CFG of text section usage for Randomized
diGraph usage_Randomized{
	usage_0  [label="[usage,usage_16]"]
	usage_1  [label="[usage_17,usage_17]"]
	usage_2  [label="[usage_18,usage_22]"]
	usage_3  [label="[usage_23,usage_23]"]
	usage_4  [label="[usage_24,usage_25]"]
	usage_5  [label="[usage_26,usage_26]"]
	usage_6  [label="[usage_27,usage_30]"]
	usage_7  [label="[usage_31,usage_31]"]
	usage_8  [label="[usage_32,usage_34]"]
	usage_9  [label="[usage_35,usage_35]"]
	usage_10  [label="[usage_36,usage_38]"]
	usage_11  [label="[usage_39,usage_39]"]
	usage_12  [label="[usage_40,usage_42]"]
	usage_13  [label="[usage_43,usage_43]"]
	usage_14  [label="[usage_44,usage_46]"]
	usage_15  [label="[usage_47,usage_47]"]
	usage_16  [label="[usage_48,usage_50]"]
	usage_17  [label="[usage_51,usage_51]"]
	usage_18  [label="[usage_52,usage_55]"]
	usage_19  [label="[usage_56,usage_56]"]
	usage_20  [label="[usage_57,usage_60]"]
	usage_21  [label="[usage_61,usage_61]"]
	usage_22  [label="[usage_62,usage_63]"]
	usage_23  [label="[usage_64,usage_64]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_4;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7;
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;
	usage_16 -> usage_17;
	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;
	usage_22 -> usage_23;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 

Symbolic Execution for Binary "Vanilla":
Current text section: "usage"
node 0:
RAX := Dereference: [Var: .str,8], RDI := Dereference: [Var: .str,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(8,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(9,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(10,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(11,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(12,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(13,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(14,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(15,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(16,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(17,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(18,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(19,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(20,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(21,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(22,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == (Var: RSP0 - Value: 8))])
0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI)
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: program_name,8], RDI := Reg: RAX, RSI := Dereference: [Var: program_name,8]
node 3:
RAX := printf@()
node 4:
RDI := Dereference: [Var: .str.2,8]
[(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := gettext@()
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.1,8], RSI := Reg: RAX
node 7:
RAX := printf@()
node 8:
RDI := Dereference: [Var: .str.3,8]
[(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
node 9:
RAX := gettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 11:
RAX := fputs_unlocked@()
node 12:
RDI := Dereference: [Var: .str.4,8]
[(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RAX)
node 13:
RAX := gettext@()
node 14:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 15:
RAX := fputs_unlocked@()
node 16:
RDI := Dereference: [Var: .str.5,8]
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 17:
RAX := gettext@()
node 18:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.6,8]
node 19:
RAX := printf@()
node 20:
RDI := Dereference: [Var: .str.6,8]
[(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
node 21:
RAX := emit_ancillary_info@()
node 22:
RDI := Dereference: [(Var: RSP0 - Value: 12),4]
node 23:
RAX := exit@()
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 

Symbolic Execution for Binary "Randomized":
Current text section: "usage"
node 0:
RAX := Dereference: [Var: .str,8], RDI := Dereference: [Var: .str,8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI)
ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)
node 1:
RAX := gettext@()
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: program_name,8], RDI := Reg: RAX, RSI := Dereference: [Var: program_name,8]
node 3:
RAX := printf@()
node 4:
RDI := Dereference: [Var: .str.2,8]
[(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := gettext@()
node 6:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.1,8], RSI := Reg: RAX
node 7:
RAX := printf@()
node 8:
RDI := Dereference: [Var: .str.3,8]
[(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)
node 9:
RAX := gettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 11:
RAX := fputs_unlocked@()
node 12:
RDI := Dereference: [Var: .str.4,8]
[(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RAX)
node 13:
RAX := gettext@()
node 14:
RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]
node 15:
RAX := fputs_unlocked@()
node 16:
RDI := Dereference: [Var: .str.5,8]
[(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)
node 17:
RAX := gettext@()
node 18:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.6,8]
node 19:
RAX := printf@()
node 20:
RDI := Dereference: [Var: .str.6,8]
[(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)
node 21:
RAX := emit_ancillary_info@()
node 22:
RDI := Dereference: [(Var: RSP0 - Value: 12),4]
node 23:
RAX := exit@()
--------

same_behavior for the nodes: usage -> usage_13 and usage -> usage_16

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: .str,8], RDI := Dereference: [Var: .str,8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI)
SA || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

SB || RAX := Dereference: [Var: .str,8], RDI := Dereference: [Var: .str,8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 12),4] := TakeBits: <31,0>(Reg: RDI)
SB || ZF := (Var: RSP0 - Value: 40), CF := (Var: RSP0 - Value: 40), SF := (Var: RSP0 - Value: 40), OF := (Var: RSP0 - Value: 40), PF := (Var: RSP0 - Value: 40)

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str" 64) 8),(RDI,E_deref (E_var ".str" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_deref (E_var ".str" 64) 8),(RDI,E_deref (E_var ".str" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str" 64) 8
Value B:
E_deref (E_var ".str" 64) 8
Resulting values:
Value A:
E_deref (E_var ".str" 64) 8
Value B:
E_deref (E_var ".str" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RDI]
E_app (TakeBits 31 0) [E_reg RDI]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage -> usage_13 and usage -> usage_16 have been verified to do the same.

same_behavior for the nodes: usage_14 -> usage_14 and usage_17 -> usage_17

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_14 -> usage_14 and usage_17 -> usage_17 have been verified to do the same.

same_behavior for the nodes: usage_15 -> usage_18 and usage_18 -> usage_22

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: program_name,8], RDI := Reg: RAX, RSI := Dereference: [Var: program_name,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDX := Dereference: [Var: program_name,8], RDI := Reg: RAX, RSI := Dereference: [Var: program_name,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var "program_name" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var "program_name" 64) 8)]
reg_chk debug RDXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var "program_name" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var "program_name" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var "program_name" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var "program_name" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDX,E_deref (E_var "program_name" 64) 8),(RDI,E_reg RAX),(RSI,E_deref (E_var "program_name" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var "program_name" 64) 8
Value B:
E_deref (E_var "program_name" 64) 8
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "program_name" 64) 8
Value B:
E_deref (E_var "program_name" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_15 -> usage_18 and usage_18 -> usage_22 have been verified to do the same.

same_behavior for the nodes: usage_19 -> usage_19 and usage_23 -> usage_23

same_behavior checking these two SStates:

SA || RAX := printf@()

SB || RAX := printf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "printf" "") [])]
Resulting values:
Value A:
E_app (F2 "printf" "") []
Value B:
E_app (F2 "printf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_19 -> usage_19 and usage_23 -> usage_23 have been verified to do the same.

same_behavior for the nodes: usage_20 -> usage_21 and usage_24 -> usage_25

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.2,8]
SA || [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.2,8]
SB || [(Var: RSP0 - Value: 16),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.2" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.2" 64) 8
Value B:
E_deref (E_var ".str.2" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage_20 -> usage_21 and usage_24 -> usage_25 have been verified to do the same.

same_behavior for the nodes: usage_22 -> usage_22 and usage_26 -> usage_26

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_22 -> usage_22 and usage_26 -> usage_26 have been verified to do the same.

same_behavior for the nodes: usage_23 -> usage_25 and usage_27 -> usage_30

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.1,8], RSI := Reg: RAX

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Dereference: [Var: .str.1,8], RSI := Reg: RAX

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.1" 64) 8),(RSI,E_reg RAX)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.1" 64) 8),(RSI,E_reg RAX)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_deref (E_var ".str.1" 64) 8),(RSI,E_reg RAX)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_deref (E_var ".str.1" 64) 8
Value B:
E_deref (E_var ".str.1" 64) 8
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_23 -> usage_25 and usage_27 -> usage_30 have been verified to do the same.

same_behavior for the nodes: usage_26 -> usage_26 and usage_31 -> usage_31

same_behavior checking these two SStates:

SA || RAX := printf@()

SB || RAX := printf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "printf" "") [])]
Resulting values:
Value A:
E_app (F2 "printf" "") []
Value B:
E_app (F2 "printf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_26 -> usage_26 and usage_31 -> usage_31 have been verified to do the same.

same_behavior for the nodes: usage_27 -> usage_28 and usage_32 -> usage_34

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.3,8]
SA || [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.3,8]
SB || [(Var: RSP0 - Value: 20),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.3" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.3" 64) 8
Value B:
E_deref (E_var ".str.3" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 20 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage_27 -> usage_28 and usage_32 -> usage_34 have been verified to do the same.

same_behavior for the nodes: usage_29 -> usage_29 and usage_35 -> usage_35

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_29 -> usage_29 and usage_35 -> usage_35 have been verified to do the same.

same_behavior for the nodes: usage_30 -> usage_31 and usage_36 -> usage_38

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

SB || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "stdout" 64) 8
Value B:
E_deref (E_var "stdout" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_30 -> usage_31 and usage_36 -> usage_38 have been verified to do the same.

same_behavior for the nodes: usage_32 -> usage_32 and usage_39 -> usage_39

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_32 -> usage_32 and usage_39 -> usage_39 have been verified to do the same.

same_behavior for the nodes: usage_33 -> usage_34 and usage_40 -> usage_42

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.4,8]
SA || [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.4,8]
SB || [(Var: RSP0 - Value: 24),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.4" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.4" 64) 8
Value B:
E_deref (E_var ".str.4" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage_33 -> usage_34 and usage_40 -> usage_42 have been verified to do the same.

same_behavior for the nodes: usage_35 -> usage_35 and usage_43 -> usage_43

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_35 -> usage_35 and usage_43 -> usage_43 have been verified to do the same.

same_behavior for the nodes: usage_36 -> usage_37 and usage_44 -> usage_46

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

SB || RDI := Reg: RAX, RSI := Dereference: [Var: stdout,8]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RDI,E_reg RAX),(RSI,E_deref (E_var "stdout" 64) 8)]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "stdout" 64) 8
Value B:
E_deref (E_var "stdout" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_36 -> usage_37 and usage_44 -> usage_46 have been verified to do the same.

same_behavior for the nodes: usage_38 -> usage_38 and usage_47 -> usage_47

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "fputs_unlocked" "") [])]
Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_38 -> usage_38 and usage_47 -> usage_47 have been verified to do the same.

same_behavior for the nodes: usage_39 -> usage_40 and usage_48 -> usage_50

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.5,8]
SA || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.5,8]
SB || [(Var: RSP0 - Value: 28),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.5" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.5" 64) 8
Value B:
E_deref (E_var ".str.5" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 28 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage_39 -> usage_40 and usage_48 -> usage_50 have been verified to do the same.

same_behavior for the nodes: usage_41 -> usage_41 and usage_51 -> usage_51

same_behavior checking these two SStates:

SA || RAX := gettext@()

SB || RAX := gettext@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "gettext" "") [])]
Resulting values:
Value A:
E_app (F2 "gettext" "") []
Value B:
E_app (F2 "gettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_41 -> usage_41 and usage_51 -> usage_51 have been verified to do the same.

same_behavior for the nodes: usage_42 -> usage_44 and usage_52 -> usage_55

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.6,8]

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 0), RDI := Reg: RAX, RSI := Dereference: [Var: .str.6,8]

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.6" 64) 8)]
reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.6" 64) 8)]
reg_chk debug RSIfromList [(RIP,E_var "returned" 64),(RAX,E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]),(RDI,E_reg RAX),(RSI,E_deref (E_var ".str.6" 64) 8)]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 0 8]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 8
Value B:
E_deref (E_var ".str.6" 64) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_42 -> usage_44 and usage_52 -> usage_55 have been verified to do the same.

same_behavior for the nodes: usage_45 -> usage_45 and usage_56 -> usage_56

same_behavior checking these two SStates:

SA || RAX := printf@()

SB || RAX := printf@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "printf" "") [])]
Resulting values:
Value A:
E_app (F2 "printf" "") []
Value B:
E_app (F2 "printf" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_45 -> usage_45 and usage_56 -> usage_56 have been verified to do the same.

same_behavior for the nodes: usage_46 -> usage_47 and usage_57 -> usage_60

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: .str.6,8]
SA || [(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)

SB || RDI := Dereference: [Var: .str.6,8]
SB || [(Var: RSP0 - Value: 32),4] := TakeBits: <31,0>(Reg: RAX)

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_var ".str.6" 64) 8)]
Resulting values:
Value A:
E_deref (E_var ".str.6" 64) 8
Value B:
E_deref (E_var ".str.6" 64) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RAX]
E_app (TakeBits 31 0) [E_reg RAX]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage_46 -> usage_47 and usage_57 -> usage_60 have been verified to do the same.

same_behavior for the nodes: usage_48 -> usage_48 and usage_61 -> usage_61

same_behavior checking these two SStates:

SA || RAX := emit_ancillary_info@()

SB || RAX := emit_ancillary_info@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "emit_ancillary_info" "") [])]
Resulting values:
Value A:
E_app (F2 "emit_ancillary_info" "") []
Value B:
E_app (F2 "emit_ancillary_info" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_48 -> usage_48 and usage_61 -> usage_61 have been verified to do the same.

same_behavior for the nodes: usage_49 -> usage_49 and usage_62 -> usage_63

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: RSP0 - Value: 12),4]

SB || RDI := Dereference: [(Var: RSP0 - Value: 12),4]

reg_chk debug RDIfromList [(RIP,E_var "returned" 64),(RDI,E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4)]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 12 64]) 4
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_49 -> usage_49 and usage_62 -> usage_63 have been verified to do the same.

same_behavior for the nodes: usage_50 -> usage_50 and usage_64 -> usage_64

same_behavior checking these two SStates:

SA || RAX := exit@()

SB || RAX := exit@()

reg_chk debug RAXfromList [(RIP,E_var "returned" 64),(RAX,E_app (F2 "exit" "") [])]
Resulting values:
Value A:
E_app (F2 "exit" "") []
Value B:
E_app (F2 "exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_50 -> usage_50 and usage_64 -> usage_64 have been verified to do the same.

Label relationship:
.str.6 <--> .str.6
.str.5 <--> .str.5
.str.4 <--> .str.4
stdout <--> stdout
.str.3 <--> .str.3
.str.1 <--> .str.1
.str.2 <--> .str.2
program_name <--> program_name
 <--> 
.str <--> .str

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 28) <--> (Var: RSP0 - Value: 28)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 20) <--> (Var: RSP0 - Value: 20)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 12) <--> (Var: RSP0 - Value: 12)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Relevant vanilla text sections: 62
Success: 60 text sections
Failure during CFG generation (indirect branching): 2 text sections
Failure during symbolic excution (indirect calls): 0 text sections
Failure caused by alloca: 0 text sections
