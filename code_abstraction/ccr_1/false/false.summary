Calling "emit_ancillary_info" but CFG not yet computed.
Delayed building cfg of: usage
Build cfg of: "emit_ancillary_info" (90 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "close_stdout_set_ignore_EPIPE" (88 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (89 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "set_program_name" (87 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "set_quoting_flags" (83 text sections remaining)
Build cfg of: "set_char_quoting" (84 text sections remaining)
Build cfg of: "set_quoting_style" (85 text sections remaining)
Build cfg of: "get_quoting_style" (86 text sections remaining)
Build cfg of: "set_custom_quoting" (82 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Build cfg of: "quotearg_buffer_restyled" (81 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "quotearg_free" (80 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quoting_options_from_style" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Build cfg of: "quoting_options_from_style" (79 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq0
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq1
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq2
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq3
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq4
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq5
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq6
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq7
Build cfg of: "version_etc_arn" (78 text sections remaining)
Build cfg of: "version_etc_ar" (77 text sections remaining)
Build cfg of: "version_etc_va" (76 text sections remaining)
Build cfg of: "version_etc" (75 text sections remaining)
Build cfg of: "emit_bug_reporting_address" (74 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xzalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "xalloc_die" (73 text sections remaining)
Build cfg of: "rpl_calloc" (72 text sections remaining)
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "c_toupper" (57 text sections remaining)
Build cfg of: "c_tolower" (58 text sections remaining)
Build cfg of: "c_isxdigit" (59 text sections remaining)
Build cfg of: "c_isupper" (60 text sections remaining)
Build cfg of: "c_isspace" (61 text sections remaining)
Build cfg of: "c_ispunct" (62 text sections remaining)
Build cfg of: "c_isprint" (63 text sections remaining)
Build cfg of: "c_islower" (64 text sections remaining)
Build cfg of: "c_isgraph" (65 text sections remaining)
Build cfg of: "c_isdigit" (66 text sections remaining)
Build cfg of: "c_iscntrl" (67 text sections remaining)
Build cfg of: "c_isblank" (68 text sections remaining)
Build cfg of: "c_isascii" (69 text sections remaining)
Build cfg of: "c_isalpha" (70 text sections remaining)
Build cfg of: "c_isalnum" (71 text sections remaining)
Build cfg of: "hard_locale" (56 text sections remaining)
Calling "rpl_nl_langinfo" but CFG not yet computed.
Delayed building cfg of: locale_charset
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Calling "clear_ungetc_buffer_preserving_position" but CFG not yet computed.
Delayed building cfg of: rpl_fflush
Build cfg of: "clear_ungetc_buffer_preserving_position" (55 text sections remaining)
Build cfg of: "rpl_fseeko" (54 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (53 text sections remaining)
Build cfg of: "usage" (52 text sections remaining)
Build cfg of: "main" (51 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "quotearg_buffer" (50 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote
Calling "locale_charset" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Calling "strcaseeq1" but CFG not yet computed.
Delayed building cfg of: strcaseeq0
Build cfg of: "strcaseeq1" (49 text sections remaining)
Build cfg of: "strcaseeq2" (48 text sections remaining)
Build cfg of: "strcaseeq3" (47 text sections remaining)
Build cfg of: "strcaseeq4" (46 text sections remaining)
Build cfg of: "strcaseeq5" (45 text sections remaining)
Build cfg of: "strcaseeq6" (44 text sections remaining)
Build cfg of: "strcaseeq7" (43 text sections remaining)
Build cfg of: "xnmalloc" (42 text sections remaining)
Build cfg of: "xmalloc" (41 text sections remaining)
Build cfg of: "xnrealloc" (40 text sections remaining)
Build cfg of: "xrealloc" (39 text sections remaining)
Build cfg of: "x2nrealloc" (38 text sections remaining)
Build cfg of: "xcharalloc" (37 text sections remaining)
Build cfg of: "x2realloc" (36 text sections remaining)
Build cfg of: "xzalloc" (35 text sections remaining)
Build cfg of: "xcalloc" (34 text sections remaining)
Build cfg of: "xmemdup" (33 text sections remaining)
Build cfg of: "xstrdup" (32 text sections remaining)
Build cfg of: "rpl_mbrtowc" (31 text sections remaining)
Build cfg of: "locale_charset" (30 text sections remaining)
Calling "rpl_fflush" but CFG not yet computed.
Delayed building cfg of: rpl_fclose
Build cfg of: "rpl_fflush" (29 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Build cfg of: "clone_quoting_options" (28 text sections remaining)
Build cfg of: "quotearg_alloc" (27 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (26 text sections remaining)
Build cfg of: "quotearg_n" (25 text sections remaining)
Build cfg of: "quotearg_n_options" (24 text sections remaining)
Build cfg of: "quotearg_n_mem" (23 text sections remaining)
Build cfg of: "quotearg" (22 text sections remaining)
Build cfg of: "quotearg_mem" (21 text sections remaining)
Build cfg of: "quotearg_n_style" (20 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (19 text sections remaining)
Build cfg of: "quotearg_style" (18 text sections remaining)
Build cfg of: "quotearg_style_mem" (17 text sections remaining)
Build cfg of: "quotearg_char_mem" (16 text sections remaining)
Build cfg of: "quotearg_char" (15 text sections remaining)
Build cfg of: "quotearg_colon" (14 text sections remaining)
Build cfg of: "quotearg_colon_mem" (13 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (12 text sections remaining)
Build cfg of: "quotearg_n_custom" (11 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (10 text sections remaining)
Build cfg of: "quotearg_custom" (9 text sections remaining)
Build cfg of: "quotearg_custom_mem" (8 text sections remaining)
Build cfg of: "quote_n_mem" (7 text sections remaining)
Build cfg of: "quote_mem" (6 text sections remaining)
Build cfg of: "quote_n" (5 text sections remaining)
Build cfg of: "quote" (4 text sections remaining)
Calling "strcaseeq0" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "strcaseeq0" (3 text sections remaining)
Build cfg of: "rpl_fclose" (2 text sections remaining)
Build cfg of: "close_stdout" (1 text sections remaining)
Build cfg of: "gettext_quote" (0 text sections remaining)
Build cfg of: "c_ispunct" (90 text sections remaining)
Calling "quotearg_buffer_restyled" but CFG not yet computed.
Delayed building cfg of: quotearg_buffer
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcharalloc
Build cfg of: "set_quoting_flags" (87 text sections remaining)
Build cfg of: "c_tolower" (88 text sections remaining)
Build cfg of: "version_etc_ar" (89 text sections remaining)
Calling "quoting_options_from_style" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "c_isxdigit" (84 text sections remaining)
Build cfg of: "c_isprint" (85 text sections remaining)
Build cfg of: "quotearg_free" (86 text sections remaining)
Calling "c_isupper" but CFG not yet computed.
Delayed building cfg of: strcaseeq0
Build cfg of: "c_isalpha" (83 text sections remaining)
Build cfg of: "close_stdout_set_ignore_EPIPE" (81 text sections remaining)
Build cfg of: "quotearg_buffer_restyled" (82 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Build cfg of: "emit_bug_reporting_address" (80 text sections remaining)
Calling "set_program_name" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "c_toupper" (78 text sections remaining)
Build cfg of: "quoting_options_from_style" (79 text sections remaining)
Build cfg of: "close_stdout_set_file_name" (76 text sections remaining)
Build cfg of: "clear_ungetc_buffer_preserving_position" (77 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnmalloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xmalloc
Build cfg of: "c_isblank" (75 text sections remaining)
Build cfg of: "version_etc_arn" (74 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "c_isgraph" (72 text sections remaining)
Build cfg of: "c_islower" (73 text sections remaining)
Calling "version_etc_va" but CFG not yet computed.
Delayed building cfg of: version_etc
Build cfg of: "c_isupper" (71 text sections remaining)
Calling "set_custom_quoting" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Calling "emit_ancillary_info" but CFG not yet computed.
Delayed building cfg of: usage
Calling "hard_locale" but CFG not yet computed.
Delayed building cfg of: rpl_mbrtowc
Build cfg of: "set_custom_quoting" (70 text sections remaining)
Build cfg of: "rpl_nl_langinfo" (69 text sections remaining)
Build cfg of: "set_program_name" (68 text sections remaining)
Calling "set_char_quoting" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "set_char_quoting" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "set_char_quoting" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Build cfg of: "rpl_fflush" (67 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2realloc
Build cfg of: "set_char_quoting" (66 text sections remaining)
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: x2nrealloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quotearg_alloc_mem
Build cfg of: "locale_charset" (65 text sections remaining)
Calling "strcaseeq0" but CFG not yet computed.
Delayed building cfg of: gettext_quote
Build cfg of: "set_quoting_style" (64 text sections remaining)
Build cfg of: "emit_ancillary_info" (63 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xcalloc
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xnrealloc
Calling "xalloc_die" but CFG not yet computed.
Delayed building cfg of: xrealloc
Build cfg of: "c_isascii" (62 text sections remaining)
Build cfg of: "rpl_calloc" (61 text sections remaining)
Build cfg of: "strcaseeq1" (60 text sections remaining)
Build cfg of: "strcaseeq2" (59 text sections remaining)
Build cfg of: "strcaseeq3" (58 text sections remaining)
Build cfg of: "strcaseeq4" (57 text sections remaining)
Build cfg of: "strcaseeq5" (56 text sections remaining)
Build cfg of: "strcaseeq6" (55 text sections remaining)
Build cfg of: "c_isalnum" (53 text sections remaining)
Build cfg of: "strcaseeq7" (54 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Build cfg of: "c_isdigit" (51 text sections remaining)
Build cfg of: "c_isspace" (52 text sections remaining)
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_mem
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote_n
Calling "xcharalloc" but CFG not yet computed.
Delayed building cfg of: quote
Build cfg of: "get_quoting_style" (50 text sections remaining)
Build cfg of: "c_iscntrl" (48 text sections remaining)
Build cfg of: "version_etc_va" (49 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Build cfg of: "rpl_fseeko" (47 text sections remaining)
Build cfg of: "xalloc_die" (46 text sections remaining)
Build cfg of: "rpl_fclose" (45 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Build cfg of: "hard_locale" (44 text sections remaining)
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xzalloc
Build cfg of: "quotearg_buffer" (43 text sections remaining)
Build cfg of: "xcharalloc" (42 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xmemdup
Calling "xmalloc" but CFG not yet computed.
Delayed building cfg of: xstrdup
Build cfg of: "strcaseeq0" (41 text sections remaining)
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_options
Calling "usage" but CFG not yet computed.
Delayed building cfg of: main
Build cfg of: "xnmalloc" (40 text sections remaining)
Build cfg of: "xmalloc" (39 text sections remaining)
Calling "xmemdup" but CFG not yet computed.
Delayed building cfg of: clone_quoting_options
Build cfg of: "version_etc" (38 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom_mem
Build cfg of: "usage" (37 text sections remaining)
Build cfg of: "rpl_mbrtowc" (36 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_char
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_n_mem
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg
Calling "xrealloc" but CFG not yet computed.
Delayed building cfg of: quotearg_mem
Build cfg of: "x2realloc" (35 text sections remaining)
Build cfg of: "x2nrealloc" (34 text sections remaining)
Build cfg of: "quotearg_alloc" (33 text sections remaining)
Build cfg of: "quotearg_alloc_mem" (32 text sections remaining)
Build cfg of: "gettext_quote" (31 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_custom_mem
Build cfg of: "xcalloc" (30 text sections remaining)
Calling "quotearg_colon" but CFG not yet computed.
Delayed building cfg of: close_stdout
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_style_mem
Build cfg of: "xnrealloc" (29 text sections remaining)
Build cfg of: "xrealloc" (28 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_custom
Build cfg of: "quote_n_mem" (27 text sections remaining)
Build cfg of: "quote_mem" (26 text sections remaining)
Build cfg of: "quote_n" (25 text sections remaining)
Build cfg of: "quote" (24 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_colon_mem
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style_colon
Build cfg of: "xzalloc" (23 text sections remaining)
Calling "quotearg_n_options" but CFG not yet computed.
Delayed building cfg of: quotearg_n_style
Build cfg of: "xmemdup" (22 text sections remaining)
Build cfg of: "xstrdup" (21 text sections remaining)
Build cfg of: "quotearg_n" (20 text sections remaining)
Build cfg of: "quotearg_n_options" (19 text sections remaining)
Build cfg of: "main" (18 text sections remaining)
Build cfg of: "clone_quoting_options" (17 text sections remaining)
Build cfg of: "quotearg_custom_mem" (16 text sections remaining)
Build cfg of: "quotearg_char_mem" (15 text sections remaining)
Build cfg of: "quotearg_char" (14 text sections remaining)
Build cfg of: "quotearg_colon" (13 text sections remaining)
Build cfg of: "quotearg_n_mem" (12 text sections remaining)
Build cfg of: "quotearg" (11 text sections remaining)
Build cfg of: "quotearg_mem" (10 text sections remaining)
Build cfg of: "quotearg_n_custom" (9 text sections remaining)
Build cfg of: "quotearg_n_custom_mem" (8 text sections remaining)
Build cfg of: "close_stdout" (7 text sections remaining)
Build cfg of: "quotearg_n_style_mem" (6 text sections remaining)
Build cfg of: "quotearg_style" (5 text sections remaining)
Build cfg of: "quotearg_style_mem" (4 text sections remaining)
Build cfg of: "quotearg_custom" (3 text sections remaining)
Build cfg of: "quotearg_colon_mem" (2 text sections remaining)
Build cfg of: "quotearg_n_style_colon" (1 text sections remaining)
Build cfg of: "quotearg_n_style" (0 text sections remaining)
(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing)
(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RAX),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(6,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(10,RSP == (Var: RSP0 - Value: 40) && RBP == Reg: RAX),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Nothing),(12,RSP == Var: RSP0 && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
Considering text section (0/87): "gettext_quote"
--------
.dot code for CFG of text section gettext_quote for Vanilla
diGraph gettext_quote_Vanilla{
	gettext_quote_0  [label="[gettext_quote_2212,gettext_quote_2215]"]
	gettext_quote_1  [label="[gettext_quote_2229,gettext_quote_2232]"]
	gettext_quote_2  [label="[.label_189,gettext_quote_2236]"]
	gettext_quote_3  [label="[.label_185,.label_185]"]
	gettext_quote_4  [label="[.label_182,gettext_quote_2224]"]
	gettext_quote_5  [label="[gettext_quote_2225,gettext_quote_2225]"]
	gettext_quote_6  [label="[gettext_quote_2226,gettext_quote_2228]"]
	gettext_quote_7  [label="[gettext_quote_2198,gettext_quote_2198]"]
	gettext_quote_8  [label="[gettext_quote_2199,gettext_quote_2207]"]
	gettext_quote_9  [label="[gettext_quote_2208,gettext_quote_2208]"]
	gettext_quote_10  [label="[gettext_quote_2209,gettext_quote_2211]"]
	gettext_quote_11  [label="[.label_186,gettext_quote_2243]"]
	gettext_quote_12  [label="[gettext_quote,gettext_quote_2194]"]
	gettext_quote_13  [label="[gettext_quote_2195,gettext_quote_2195]"]
	gettext_quote_14  [label="[gettext_quote_2196,gettext_quote_2197]"]

	gettext_quote_0 -> gettext_quote_3;
	gettext_quote_1 -> gettext_quote_3;
	gettext_quote_2 -> gettext_quote_3;
	gettext_quote_3 -> gettext_quote_11;
	gettext_quote_4 -> gettext_quote_5;
	gettext_quote_5 -> gettext_quote_6;
	gettext_quote_6 -> gettext_quote_2 [label="ZF"];
	gettext_quote_6 -> gettext_quote_1 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_8;
	gettext_quote_8 -> gettext_quote_9;
	gettext_quote_9 -> gettext_quote_10;
	gettext_quote_10 -> gettext_quote_4 [label="ZF"];
	gettext_quote_10 -> gettext_quote_0 [label="!ZF"];

	gettext_quote_12 -> gettext_quote_13;
	gettext_quote_13 -> gettext_quote_14;
	gettext_quote_14 -> gettext_quote_11 [label="!ZF"];
	gettext_quote_14 -> gettext_quote_7 [label="ZF"];
}
--------
--------
.dot code for CFG of text section gettext_quote for Randomized
diGraph gettext_quote_Randomized{
	gettext_quote_0  [label="[gettext_quote_3143,gettext_quote_3146]"]
	gettext_quote_1  [label="[gettext_quote_3160,gettext_quote_3163]"]
	gettext_quote_2  [label="[.label_219,gettext_quote_3167]"]
	gettext_quote_3  [label="[.label_216,.label_216]"]
	gettext_quote_4  [label="[.label_212,gettext_quote_3155]"]
	gettext_quote_5  [label="[gettext_quote_3156,gettext_quote_3156]"]
	gettext_quote_6  [label="[gettext_quote_3157,gettext_quote_3159]"]
	gettext_quote_7  [label="[gettext_quote_3129,gettext_quote_3129]"]
	gettext_quote_8  [label="[gettext_quote_3130,gettext_quote_3138]"]
	gettext_quote_9  [label="[gettext_quote_3139,gettext_quote_3139]"]
	gettext_quote_10  [label="[gettext_quote_3140,gettext_quote_3142]"]
	gettext_quote_11  [label="[.label_213,gettext_quote_3174]"]
	gettext_quote_12  [label="[gettext_quote,gettext_quote_3125]"]
	gettext_quote_13  [label="[gettext_quote_3126,gettext_quote_3126]"]
	gettext_quote_14  [label="[gettext_quote_3127,gettext_quote_3128]"]

	gettext_quote_0 -> gettext_quote_3;
	gettext_quote_1 -> gettext_quote_3;
	gettext_quote_2 -> gettext_quote_3;
	gettext_quote_3 -> gettext_quote_11;
	gettext_quote_4 -> gettext_quote_5;
	gettext_quote_5 -> gettext_quote_6;
	gettext_quote_6 -> gettext_quote_2 [label="ZF"];
	gettext_quote_6 -> gettext_quote_1 [label="!ZF"];
	gettext_quote_7 -> gettext_quote_8;
	gettext_quote_8 -> gettext_quote_9;
	gettext_quote_9 -> gettext_quote_10;
	gettext_quote_10 -> gettext_quote_4 [label="ZF"];
	gettext_quote_10 -> gettext_quote_0 [label="!ZF"];

	gettext_quote_12 -> gettext_quote_13;
	gettext_quote_13 -> gettext_quote_14;
	gettext_quote_14 -> gettext_quote_11 [label="!ZF"];
	gettext_quote_14 -> gettext_quote_7 [label="ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 3, 1 ----> 3, 2 ----> 3, 3 ----> 11, 4 ----> 5, 5 ----> 6, 6 --ZF--> 2, 6 --!ZF--> 1, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 4, 10 --!ZF--> 0, , 12 ----> 13, 13 ----> 14, 14 --!ZF--> 11, 14 --ZF--> 7

Symbolic Execution for Binary "Vanilla":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [Var: label_188,4], RCX := Dereference: [Var: label_187,4]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 1:
RAX := Dereference: [Var: label_184,4], RCX := Dereference: [Var: label_183,4]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 2:
RAX := Dereference: [Var: label_66,4], RCX := Dereference: [Var: label_81,4]
ZF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9)
node 3:
RAX := (if Flag: ZF then Reg: RCX else Reg: RAX)
node 4:
RCX := Value: 49, RDX := Value: 66, RDI := Reg: RAX, RSI := Value: 71, R9 := Value: 48, R8 := Value: 56
[(Var: RSP0 - Value: 32),8] := Value: 48, [(Var: RSP0 - Value: 40),8] := Value: 51
node 5:
RAX := strcaseeq0@()
node 6:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 7:
RAX := locale_charset@()
node 8:
RCX := Value: 70, RDX := Value: 84, RDI := Reg: RAX, RSI := Value: 85, R9 := Value: 56, R8 := Value: 45
[(Var: RSP0 - Value: 32),8] := Value: 0, [(Var: RSP0 - Value: 40),8] := Value: 0
node 9:
RAX := strcaseeq0@()
node 10:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 12:
RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)
--------

Starting Node: 12

Edges: 0 ----> 3, 1 ----> 3, 2 ----> 3, 3 ----> 11, 4 ----> 5, 5 ----> 6, 6 --ZF--> 2, 6 --!ZF--> 1, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 4, 10 --!ZF--> 0, , 12 ----> 13, 13 ----> 14, 14 --!ZF--> 11, 14 --ZF--> 7

Symbolic Execution for Binary "Randomized":
Current text section: "gettext_quote"
node 0:
RAX := Dereference: [Var: label_218,4], RCX := Dereference: [Var: label_217,4]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 1:
RAX := Dereference: [Var: label_215,4], RCX := Dereference: [Var: label_214,4]
ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)
node 2:
RAX := Dereference: [Var: label_73,4], RCX := Dereference: [Var: label_131,4]
ZF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9)
node 3:
RAX := (if Flag: ZF then Reg: RCX else Reg: RAX)
node 4:
RCX := Value: 49, RDX := Value: 66, RDI := Reg: RAX, RSI := Value: 71, R9 := Value: 48, R8 := Value: 56
[(Var: RSP0 - Value: 32),8] := Value: 48, [(Var: RSP0 - Value: 40),8] := Value: 51
node 5:
RAX := strcaseeq0@()
node 6:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 7:
RAX := locale_charset@()
node 8:
RCX := Value: 70, RDX := Value: 84, RDI := Reg: RAX, RSI := Value: 85, R9 := Value: 56, R8 := Value: 45
[(Var: RSP0 - Value: 32),8] := Value: 0, [(Var: RSP0 - Value: 40),8] := Value: 0
node 9:
RAX := strcaseeq0@()
node 10:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 12:
RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)
--------

same_behavior for the nodes: gettext_quote -> gettext_quote_2194 and gettext_quote -> gettext_quote_3125

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Reg: RDI, RDX := Value: 5, RDI := Value: 0, RSI := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote -> gettext_quote_2194 and gettext_quote -> gettext_quote_3125 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2195 -> gettext_quote_2195 and gettext_quote_3126 -> gettext_quote_3126

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2195 -> gettext_quote_2195 and gettext_quote_3126 -> gettext_quote_3126 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2196 -> gettext_quote_2197 and gettext_quote_3127 -> gettext_quote_3128

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)

SB || ZF := CMP(Reg: RAX,Reg: RBX), CF := CMP(Reg: RAX,Reg: RBX), SF := CMP(Reg: RAX,Reg: RBX), OF := CMP(Reg: RAX,Reg: RBX), PF := CMP(Reg: RAX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2196 -> gettext_quote_2197 and gettext_quote_3127 -> gettext_quote_3128 have been verified to do the same.

same_behavior for the nodes: .label_186 -> gettext_quote_2243 and .label_213 -> gettext_quote_3174

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_186 -> gettext_quote_2243 and .label_213 -> gettext_quote_3174 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2198 -> gettext_quote_2198 and gettext_quote_3129 -> gettext_quote_3129

same_behavior checking these two SStates:

SA || RAX := locale_charset@()

SB || RAX := locale_charset@()

Resulting values:
Value A:
E_app (F2 "locale_charset" "") []
Value B:
E_app (F2 "locale_charset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2198 -> gettext_quote_2198 and gettext_quote_3129 -> gettext_quote_3129 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2199 -> gettext_quote_2207 and gettext_quote_3130 -> gettext_quote_3138

same_behavior checking these two SStates:

SA || RCX := Value: 70, RDX := Value: 84, RDI := Reg: RAX, RSI := Value: 85, R9 := Value: 56, R8 := Value: 45
SA || [(Var: RSP0 - Value: 32),8] := Value: 0, [(Var: RSP0 - Value: 40),8] := Value: 0

SB || RCX := Value: 70, RDX := Value: 84, RDI := Reg: RAX, RSI := Value: 85, R9 := Value: 56, R8 := Value: 45
SB || [(Var: RSP0 - Value: 32),8] := Value: 0, [(Var: RSP0 - Value: 40),8] := Value: 0

Resulting values:
Value A:
E_val 70 32
Value B:
E_val 70 32
Resulting values:
Value A:
E_val 84 32
Value B:
E_val 84 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 85 32
Value B:
E_val 85 32
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_val 45 32
Value B:
E_val 45 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2199 -> gettext_quote_2207 and gettext_quote_3130 -> gettext_quote_3138 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2208 -> gettext_quote_2208 and gettext_quote_3139 -> gettext_quote_3139

same_behavior checking these two SStates:

SA || RAX := strcaseeq0@()

SB || RAX := strcaseeq0@()

Resulting values:
Value A:
E_app (F2 "strcaseeq0" "") []
Value B:
E_app (F2 "strcaseeq0" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2208 -> gettext_quote_2208 and gettext_quote_3139 -> gettext_quote_3139 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2209 -> gettext_quote_2211 and gettext_quote_3140 -> gettext_quote_3142

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2209 -> gettext_quote_2211 and gettext_quote_3140 -> gettext_quote_3142 have been verified to do the same.

same_behavior for the nodes: .label_182 -> gettext_quote_2224 and .label_212 -> gettext_quote_3155

same_behavior checking these two SStates:

SA || RCX := Value: 49, RDX := Value: 66, RDI := Reg: RAX, RSI := Value: 71, R9 := Value: 48, R8 := Value: 56
SA || [(Var: RSP0 - Value: 32),8] := Value: 48, [(Var: RSP0 - Value: 40),8] := Value: 51

SB || RCX := Value: 49, RDX := Value: 66, RDI := Reg: RAX, RSI := Value: 71, R9 := Value: 48, R8 := Value: 56
SB || [(Var: RSP0 - Value: 32),8] := Value: 48, [(Var: RSP0 - Value: 40),8] := Value: 51

Resulting values:
Value A:
E_val 49 32
Value B:
E_val 49 32
Resulting values:
Value A:
E_val 66 32
Value B:
E_val 66 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 71 32
Value B:
E_val 71 32
Resulting values:
Value A:
E_val 48 32
Value B:
E_val 48 32
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_val 48 64
E_val 48 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 51 64
E_val 51 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_182 -> gettext_quote_2224 and .label_212 -> gettext_quote_3155 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2225 -> gettext_quote_2225 and gettext_quote_3156 -> gettext_quote_3156

same_behavior checking these two SStates:

SA || RAX := strcaseeq0@()

SB || RAX := strcaseeq0@()

Resulting values:
Value A:
E_app (F2 "strcaseeq0" "") []
Value B:
E_app (F2 "strcaseeq0" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2225 -> gettext_quote_2225 and gettext_quote_3156 -> gettext_quote_3156 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2226 -> gettext_quote_2228 and gettext_quote_3157 -> gettext_quote_3159

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2226 -> gettext_quote_2228 and gettext_quote_3157 -> gettext_quote_3159 have been verified to do the same.

same_behavior for the nodes: .label_189 -> gettext_quote_2236 and .label_219 -> gettext_quote_3167

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: label_66,4], RCX := Dereference: [Var: label_81,4]
SA || ZF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9)

SB || RAX := Dereference: [Var: label_73,4], RCX := Dereference: [Var: label_131,4]
SB || ZF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), CF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), SF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), OF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9), PF := CMP(TakeBits: <31,0>(Reg: R14),Value: 9)

Resulting values:
Value A:
E_deref (E_var "label_66" 64) 4
Value B:
E_deref (E_var "label_73" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_81" 64) 4
Value B:
E_deref (E_var "label_131" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_189 -> gettext_quote_2236 and .label_219 -> gettext_quote_3167 have been verified to do the same.

same_behavior for the nodes: .label_185 -> .label_185 and .label_216 -> .label_216

same_behavior checking these two SStates:

SA || RAX := (if Flag: ZF then Reg: RCX else Reg: RAX)

SB || RAX := (if Flag: ZF then Reg: RCX else Reg: RAX)

Resulting values:
Value A:
E_ite (E_flg ZF) (E_reg RCX) (E_reg RAX)
Value B:
E_ite (E_flg ZF) (E_reg RCX) (E_reg RAX)
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_185 -> .label_185 and .label_216 -> .label_216 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2229 -> gettext_quote_2232 and gettext_quote_3160 -> gettext_quote_3163

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: label_184,4], RCX := Dereference: [Var: label_183,4]
SA || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

SB || RAX := Dereference: [Var: label_215,4], RCX := Dereference: [Var: label_214,4]
SB || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

Resulting values:
Value A:
E_deref (E_var "label_184" 64) 4
Value B:
E_deref (E_var "label_215" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_183" 64) 4
Value B:
E_deref (E_var "label_214" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2229 -> gettext_quote_2232 and gettext_quote_3160 -> gettext_quote_3163 have been verified to do the same.

same_behavior for the nodes: gettext_quote_2212 -> gettext_quote_2215 and gettext_quote_3143 -> gettext_quote_3146

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: label_188,4], RCX := Dereference: [Var: label_187,4]
SA || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

SB || RAX := Dereference: [Var: label_218,4], RCX := Dereference: [Var: label_217,4]
SB || ZF := CMP(Dereference: [Reg: RBX,1],Value: 96), CF := CMP(Dereference: [Reg: RBX,1],Value: 96), SF := CMP(Dereference: [Reg: RBX,1],Value: 96), OF := CMP(Dereference: [Reg: RBX,1],Value: 96), PF := CMP(Dereference: [Reg: RBX,1],Value: 96)

Resulting values:
Value A:
E_deref (E_var "label_188" 64) 4
Value B:
E_deref (E_var "label_218" 64) 4
Res(20,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(20,RSP == Var: RSP0 && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
ulting values:
Value A:
E_deref (E_var "label_187" 64) 4
Value B:
E_deref (E_var "label_217" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes gettext_quote_2212 -> gettext_quote_2215 and gettext_quote_3143 -> gettext_quote_3146 have been verified to do the same.

Label relationship:
label_187 <--> label_217
label_188 <--> label_218
label_183 <--> label_214
label_184 <--> label_215
label_81 <--> label_131
label_66 <--> label_73
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (1/87): "close_stdout"
--------
.dot code for CFG of text section close_stdout for Vanilla
diGraph close_stdout_Vanilla{
	close_stdout_0  [label="[close_stdout_231,close_stdout_231]"]
	close_stdout_1  [label="[close_stdout_232,close_stdout_233]"]
	close_stdout_2  [label="[close_stdout_254,close_stdout_258]"]
	close_stdout_3  [label="[close_stdout_259,close_stdout_259]"]
	close_stdout_4  [label="[.label_38,.label_38]"]
	close_stdout_5  [label="[close_stdout_267,close_stdout_267]"]
	close_stdout_6  [label="[close_stdout_268,close_stdout_273]"]
	close_stdout_7  [label="[close_stdout_274,close_stdout_274]"]
	close_stdout_8  [label="[.label_36,close_stdout_246]"]
	close_stdout_9  [label="[close_stdout_247,close_stdout_247]"]
	close_stdout_10  [label="[close_stdout_248,close_stdout_249]"]
	close_stdout_11  [label="[close_stdout_250,close_stdout_250]"]
	close_stdout_12  [label="[close_stdout_251,close_stdout_253]"]
	close_stdout_13  [label="[close_stdout_229,close_stdout_230]"]
	close_stdout_14  [label="[close_stdout_239,close_stdout_242]"]
	close_stdout_15  [label="[.label_40,.label_40]"]
	close_stdout_16  [label="[close_stdout_264,close_stdout_264]"]
	close_stdout_17  [label="[.label_39,.label_39]"]
	close_stdout_18  [label="[close_stdout_236,close_stdout_236]"]
	close_stdout_19  [label="[close_stdout_237,close_stdout_238]"]
	close_stdout_20  [label="[close_stdout,close_stdout_225]"]
	close_stdout_21  [label="[close_stdout_226,close_stdout_226]"]
	close_stdout_22  [label="[close_stdout_227,close_stdout_228]"]

	close_stdout_0 -> close_stdout_1;
	close_stdout_1 -> close_stdout_8 [label="!ZF"];
	close_stdout_1 -> close_stdout_17 [label="ZF"];
	close_stdout_2 -> close_stdout_3;

	close_stdout_4 -> close_stdout_5;
	close_stdout_5 -> close_stdout_6;
	close_stdout_6 -> close_stdout_7;

	close_stdout_8 -> close_stdout_9;
	close_stdout_9 -> close_stdout_10;
	close_stdout_10 -> close_stdout_11;
	close_stdout_11 -> close_stdout_12;
	close_stdout_12 -> close_stdout_4 [label="!ZF"];
	close_stdout_12 -> close_stdout_2 [label="ZF"];
	close_stdout_13 -> close_stdout_8 [label="ZF"];
	close_stdout_13 -> close_stdout_0 [label="!ZF"];

	close_stdout_15 -> close_stdout_16;

	close_stdout_17 -> close_stdout_18;
	close_stdout_18 -> close_stdout_19;
	close_stdout_19 -> close_stdout_15 [label="!ZF"];
	close_stdout_19 -> close_stdout_14 [label="ZF"];
	close_stdout_20 -> close_stdout_21;
	close_stdout_21 -> close_stdout_22;
	close_stdout_22 -> close_stdout_17 [label="ZF"];
	close_stdout_22 -> close_stdout_13 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section close_stdout for Randomized
diGraph close_stdout_Randomized{
	close_stdout_0  [label="[close_stdout_3401,close_stdout_3401]"]
	close_stdout_1  [label="[close_stdout_3402,close_stdout_3403]"]
	close_stdout_2  [label="[close_stdout_3441,close_stdout_3445]"]
	close_stdout_3  [label="[close_stdout_3446,close_stdout_3446]"]
	close_stdout_4  [label="[.label_234,.label_234]"]
	close_stdout_5  [label="[close_stdout_3415,close_stdout_3415]"]
	close_stdout_6  [label="[close_stdout_3416,close_stdout_3421]"]
	close_stdout_7  [label="[close_stdout_3422,close_stdout_3422]"]
	close_stdout_8  [label="[.label_233,close_stdout_3433]"]
	close_stdout_9  [label="[close_stdout_3434,close_stdout_3434]"]
	close_stdout_10  [label="[close_stdout_3435,close_stdout_3436]"]
	close_stdout_11  [label="[close_stdout_3437,close_stdout_3437]"]
	close_stdout_12  [label="[close_stdout_3438,close_stdout_3440]"]
	close_stdout_13  [label="[close_stdout_3399,close_stdout_3400]"]
	close_stdout_14  [label="[close_stdout_3409,close_stdout_3412]"]
	close_stdout_15  [label="[.label_232,.label_232]"]
	close_stdout_16  [label="[close_stdout_3429,close_stdout_3429]"]
	close_stdout_17  [label="[.label_231,.label_231]"]
	close_stdout_18  [label="[close_stdout_3406,close_stdout_3406]"]
	close_stdout_19  [label="[close_stdout_3407,close_stdout_3408]"]
	close_stdout_20  [label="[close_stdout,close_stdout_3395]"]
	close_stdout_21  [label="[close_stdout_3396,close_stdout_3396]"]
	close_stdout_22  [label="[close_stdout_3397,close_stdout_3398]"]

	close_stdout_0 -> close_stdout_1;
	close_stdout_1 -> close_stdout_8 [label="!ZF"];
	close_stdout_1 -> close_stdout_17 [label="ZF"];
	close_stdout_2 -> close_stdout_3;

	close_stdout_4 -> close_stdout_5;
	close_stdout_5 -> close_stdout_6;
	close_stdout_6 -> close_stdout_7;

	close_stdout_8 -> close_stdout_9;
	close_stdout_9 -> close_stdout_10;
	close_stdout_10 -> close_stdout_11;
	close_stdout_11 -> close_stdout_12;
	close_stdout_12 -> close_stdout_4 [label="!ZF"];
	close_stdout_12 -> close_stdout_2 [label="ZF"];
	close_stdout_13 -> close_stdout_8 [label="ZF"];
	close_stdout_13 -> close_stdout_0 [label="!ZF"];

	close_stdout_15 -> close_stdout_16;

	close_stdout_17 -> close_stdout_18;
	close_stdout_18 -> close_stdout_19;
	close_stdout_19 -> close_stdout_15 [label="!ZF"];
	close_stdout_19 -> close_stdout_14 [label="ZF"];
	close_stdout_20 -> close_stdout_21;
	close_stdout_21 -> close_stdout_22;
	close_stdout_22 -> close_stdout_17 [label="ZF"];
	close_stdout_22 -> close_stdout_13 [label="!ZF"];
}
--------
Starting Node: 20

Edges: 0 ----> 1, 1 --!ZF--> 8, 1 --ZF--> 17, 2 ----> 3, , 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 --!ZF--> 4, 12 --ZF--> 2, 13 --ZF--> 8, 13 --!ZF--> 0, , 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 --!ZF--> 15, 19 --ZF--> 14, 20 ----> 21, 21 ----> 22, 22 --ZF--> 17, 22 --!ZF--> 13

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout"
node 0:
RAX := __errno_location@()
node 1:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 2:
RAX := Value: 0, RCX := Reg: R14, RDX := Dereference: [Var: label_37,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
node 4:
RDI := Reg: RBX
node 5:
RAX := quotearg_colon@()
node 6:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_41,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: R14
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := error@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_42,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RBX := Dereference: [(Var: returned + Var: file_name),8], R14 := Reg: RAX
node 11:
RAX := __errno_location@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
ZF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), CF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), SF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), OF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), PF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0)
node 14:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value:(20,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(20,RSP == Var: RSP0 && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
 16),8]
node 15:
RDI := Dereference: [(Var: returned + Var: exit_failure),4]
node 16:
RAX := _exit@()
node 17:
RDI := Dereference: [(Var: returned + Var: stderr),8]
node 18:
RAX := close_stream@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RDI := Dereference: [(Var: returned + Var: stdout),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 21:
RAX := close_stream@()
node 22:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

Starting Node: 20

Edges: 0 ----> 1, 1 --!ZF--> 8, 1 --ZF--> 17, 2 ----> 3, , 4 ----> 5, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 --!ZF--> 4, 12 --ZF--> 2, 13 --ZF--> 8, 13 --!ZF--> 0, , 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 --!ZF--> 15, 19 --ZF--> 14, 20 ----> 21, 21 ----> 22, 22 --ZF--> 17, 22 --!ZF--> 13

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout"
node 0:
RAX := __errno_location@()
node 1:
ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)
node 2:
RAX := Value: 0, RCX := Reg: R14, RDX := Dereference: [Var: label_235,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
node 4:
RDI := Reg: RBX
node 5:
RAX := quotearg_colon@()
node 6:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_237,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: R14
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := error@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_236,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RBX := Dereference: [(Var: returned + Var: file_name),8], R14 := Reg: RAX
node 11:
RAX := __errno_location@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
ZF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), CF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), SF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), OF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), PF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0)
node 14:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 15:
RDI := Dereference: [(Var: returned + Var: exit_failure),4]
node 16:
RAX := _exit@()
node 17:
RDI := Dereference: [(Var: returned + Var: stderr),8]
node 18:
RAX := close_stream@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RDI := Dereference: [(Var: returned + Var: stdout),8]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 21:
RAX := close_stream@()
node 22:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

same_behavior for the nodes: close_stdout -> close_stdout_225 and close_stdout -> close_stdout_3395

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: stdout),8]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RDI := Dereference: [(Var: returned + Var: stdout),8]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stdout" 64]) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes close_stdout -> close_stdout_225 and close_stdout -> close_stdout_3395 have been verified to do the same.

same_behavior for the nodes: close_stdout_226 -> close_stdout_226 and close_stdout_3396 -> close_stdout_3396

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_226 -> close_stdout_226 and close_stdout_3396 -> close_stdout_3396 have been verified to do the same.

same_behavior for the nodes: close_stdout_227 -> close_stdout_228 and close_stdout_3397 -> close_stdout_3398

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_227 -> close_stdout_228 and close_stdout_3397 -> close_stdout_3398 have been verified to do the same.

same_behavior for the nodes: .label_39 -> .label_39 and .label_231 -> .label_231

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: stderr),8]

SB || RDI := Dereference: [(Var: returned + Var: stderr),8]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stderr" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "stderr" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_39 -> .label_39 and .label_231 -> .label_231 have been verified to do the same.

same_behavior for the nodes: close_stdout_236 -> close_stdout_236 and close_stdout_3406 -> close_stdout_3406

same_behavior checking these two SStates:

SA || RAX := close_stream@()

SB || RAX := close_stream@()

Resulting values:
Value A:
E_app (F2 "close_stream" "") []
Value B:
E_app (F2 "close_stream" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_236 -> close_stdout_236 and close_stdout_3406 -> close_stdout_3406 have been verified to do the same.

same_behavior for the nodes: close_stdout_237 -> close_stdout_238 and close_stdout_3407 -> close_stdout_3408

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_237 -> close_stdout_238 and close_stdout_3407 -> close_stdout_3408 have been verified to do the same.

same_behavior for the nodes: .label_40 -> .label_40 and .label_232 -> .label_232

same_behavior checking these two SStates:

SA || RDI := Dereference: [(Var: returned + Var: exit_failure),4]

SB || RDI := Dereference: [(Var: returned + Var: exit_failure),4]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "exit_failure" 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "exit_failure" 64]) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_40 -> .label_40 and .label_232 -> .label_232 have been verified to do the same.

same_behavior for the nodes: close_stdout_264 -> close_stdout_264 and close_stdout_3429 -> close_stdout_3429

same_behavior checking these two SStates:

SA || RAX := _exit@()

SB || RAX := _exit@()

Resulting values:
Value A:
E_app (F2 "_exit" "") []
Value B:
E_app (F2 "_exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_264 -> close_stdout_264 and close_stdout_3429 -> close_stdout_3429 have been verified to do the same.

same_behavior for the nodes: close_stdout_239 -> close_stdout_242 and close_stdout_3409 -> close_stdout_3412

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_239 -> close_stdout_242 and close_stdout_3409 -> close_stdout_3412 have been verified to do the same.

same_behavior for the nodes: close_stdout_229 -> close_stdout_230 and close_stdout_3399 -> close_stdout_3400

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), CF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), SF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), OF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0), PF := CMP(Dereference: [(Var: close_stdout_229 + Var: ignore_EPIPE),1],Value: 0)

SB || ZF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), CF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), SF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), OF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0), PF := CMP(Dereference: [(Var: close_stdout_3399 + Var: ignore_EPIPE),1],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_229 -> close_stdout_230 and close_stdout_3399 -> close_stdout_3400 have been verified to do the same.

same_behavior for the nodes: .label_36 -> close_stdout_246 and .label_233 -> close_stdout_3433

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_42,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_236,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_42" 64) 4
Value B:
E_deref (E_var "label_236" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_36 -> close_stdout_246 and .label_233 -> close_stdout_3433 have been verified to do the same.

same_behavior for the nodes: close_stdout_247 -> close_stdout_247 and close_stdout_3434 -> close_stdout_3434

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_247 -> close_stdout_247 and close_stdout_3434 -> close_stdout_3434 have been verified to do the same.

same_behavior for the nodes: close_stdout_248 -> close_stdout_249 and close_stdout_3435 -> close_stdout_3436

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: returned + Var: file_name),8], R14 := Reg: RAX

SB || RBX := Dereference: [(Var: returned + Var: file_name),8], R14 := Reg: RAX

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "file_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "returned" 64,E_var "file_name" 64]) 8
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_248 -> close_stdout_249 and close_stdout_3435 -> close_stdout_3436 have been verified to do the same.

same_behavior for the nodes: close_stdout_250 -> close_stdout_250 and close_stdout_3437 -> close_stdout_3437

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_250 -> close_stdout_250 and close_stdout_3437 -> close_stdout_3437 have been verified to do the same.

same_behavior for the nodes: close_stdout_251 -> close_stdout_253 and close_stdout_3438 -> close_stdout_3440

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_251 -> close_stdout_253 and close_stdout_3438 -> close_stdout_3440 have been verified to do the same.

same_behavior for the nodes: .label_38 -> .label_38 and .label_234 -> .label_234

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_38 -> .label_38 and .label_234 -> .label_234 have been verified to do the same.

same_behavior for the nodes: close_stdout_267 -> close_stdout_267 and close_stdout_3415 -> close_stdout_3415

same_behavior checking these two SStates:

SA || RAX := quotearg_colon@()

SB || RAX := quotearg_colon@()

Resulting values:
Value A:
E_app (F2 "quotearg_colon" "") []
Value B:
E_app (F2 "quotearg_colon" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_267 -> close_stdout_267 and close_stdout_3415 -> close_stdout_3415 have been verified to do the same.

same_behavior for the nodes: close_stdout_268 -> close_stdout_273 and close_stdout_3416 -> close_stdout_3421

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_41,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: R14
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_237,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4], R8 := Reg: R14
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_41" 64) 4
Value B:
E_deref (E_var "label_237" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_268 -> close_stdout_273 and close_stdout_3416 -> close_stdout_3421 have been verified to do the same.

same_behavior for the nodes: close_stdout_274 -> close_stdout_274 and close_stdout_3422 -> close_stdout_3422

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_274 -> close_stdout_274 and close_stdout_3422 -> close_stdout_3422 have been verified to do the same.

same_behavior for the nodes: close_stdout_254 -> close_stdout_258 and close_stdout_3441 -> close_stdout_3445

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: R14, RDX := Dereference: [Var: label_37,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: R14, RDX := Dereference: [Var: label_235,4], RDI := Value: 0, RSI := Dereference: [Reg: RAX,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_var "label_37" 64) 4
Value B:
E_deref (E_var "label_235" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_reg RAX) 4
Value B:
E_deref (E_reg RAX) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_254 -> close_stdout_258 and close_stdout_3441 -> close_stdout_3445 have been verified to do the same.

same_behavior for the nodes: close_stdout_259 -> close_stdout_259 and close_stdout_3446 -> close_stdout_3446

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_259 -> close_stdout_259 and close_stdout_3446 -> close_stdout_3446 have been verified to do the same.

same_behavior for the nodes: close_stdout_231 -> close_stdout_231 and close_stdout_3401 -> close_stdout_3401

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_231 -> close_stdout_231 and close_stdout_3401 -> close_stdout_3401 have been verified to do the same.

same_behavior for the nodes: close_stdout_232 -> close_stdout_233 and close_stdout_3402 -> close_stdout_3403

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

SB || ZF := CMP(Dereference: [Reg: RAX,4],Value: 32), CF := CMP(Dereference: [Reg: RAX,4],Value: 32), SF := CMP(Dereference: [Reg: RAX,4],Value: 32), OF := CMP(Dereference: [Reg: RAX,4],Value: 32), PF := CMP(Dereference: [Reg: RAX,4],Value: 32)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes close_stdout_232 -> close_stdout_233 and close_stdout_3402 -> close_stdout_3403 have been verified to do the same.

Label relationship:
label_37 <--> label_235
label_41 <--> label_237
file_name <--> file_name
label_42 <--> label_236
exit_failure <--> exit_failure
stderr <--> stderr
 <--> 
stdout <--> stdout
returned <--> returned

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (2/87): "rpl_fclose"
--------
.dot code for CFG of text section rpl_fclose for Vanilla
diGraph rpl_fclose_Vanilla{
	rpl_fclose_0  [label="[rpl_fclose_3691,rpl_fclose_3691]"]
	rpl_fclose_1  [label="[rpl_fclose_3692,rpl_fclose_3692]"]
	rpl_fclose_2  [label="[rpl_fclose_3693,rpl_fclose_3695]"]
	rpl_fclose_3  [label="[rpl_fclose_3696,rpl_fclose_3696]"]
	rpl_fclose_4  [label="[rpl_fclose_3697,rpl_fclose_3698]"]
	rpl_fclose_5  [label="[rpl_fclose_3710,rpl_fclose_3710]"]
	rpl_fclose_6  [label="[rpl_fclose_3711,rpl_fclose_3712]"]
	rpl_fclose_7  [label="[.label_278,rpl_fclose_3717]"]
	rpl_fclose_8  [label="[rpl_fclose_3704,rpl_fclose_3704]"]
	rpl_fclose_9  [label="[rpl_fclose_3705,rpl_fclose_3706]"]
	rpl_fclose_10  [label="[rpl_fclose_3707,rpl_fclose_3707]"]
	rpl_fclose_11  [label="[rpl_fclose_3708,rpl_fclose_3709]"]
	rpl_fclose_12  [label="[.label_279,.label_279]"]
	rpl_fclose_13  [label="[rpl_fclose_3701,rpl_fclose_3701]"]
	rpl_fclose_14  [label="[rpl_fclose_3702,rpl_fclose_3703]"]
	rpl_fclose_15  [label="[rpl_fclose_3687,rpl_fclose_3687]"]
	rpl_fclose_16  [label="[rpl_fclose_3688,rpl_fclose_3688]"]
	rpl_fclose_17  [label="[rpl_fclose_3689,rpl_fclose_3690]"]
	rpl_fclose_18  [label="[.label_277,rpl_fclose_3722]"]
	rpl_fclose_19  [label="[rpl_fclose_3723,rpl_fclose_3723]"]
	rpl_fclose_20  [label="[rpl_fclose_3723_ret,rpl_fclose_3723_ret]"]
	rpl_fclose_21  [label="[rpl_fclose,rpl_fclose_3683]"]
	rpl_fclose_22  [label="[rpl_fclose_3684,rpl_fclose_3684]"]
	rpl_fclose_23  [label="[rpl_fclose_3685,rpl_fclose_3686]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_3;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_4 -> rpl_fclose_12 [label="!ZF"];
	rpl_fclose_5 -> rpl_fclose_6;
	rpl_fclose_6 -> rpl_fclose_7;

	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_10;
	rpl_fclose_10 -> rpl_fclose_11;
	rpl_fclose_11 -> rpl_fclose_7 [label="ZF"];
	rpl_fclose_11 -> rpl_fclose_5 [label="!ZF"];
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_14;
	rpl_fclose_14 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_14 -> rpl_fclose_8 [label="!ZF"];
	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_17;
	rpl_fclose_17 -> rpl_fclose_12 [label="ZF"];
	rpl_fclose_17 -> rpl_fclose_0 [label="!ZF"];
	rpl_fclose_18 -> rpl_fclose_19;
	rpl_fclose_19 -> rpl_fclose_20;

	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_23;
	rpl_fclose_23 -> rpl_fclose_18 [label="SF"];
	rpl_fclose_23 -> rpl_fclose_15 [label="!SF"];
}
--------
--------
.dot code for CFG of text section rpl_fclose for Randomized
diGraph rpl_fclose_Randomized{
	rpl_fclose_0  [label="[rpl_fclose_4421,rpl_fclose_4421]"]
	rpl_fclose_1  [label="[rpl_fclose_4422,rpl_fclose_4422]"]
	rpl_fclose_2  [label="[rpl_fclose_4423,rpl_fclose_4425]"]
	rpl_fclose_3  [label="[rpl_fclose_4426,rpl_fclose_4426]"]
	rpl_fclose_4  [label="[rpl_fclose_4427,rpl_fclose_4428]"]
	rpl_fclose_5  [label="[rpl_fclose_4440,rpl_fclose_4440]"]
	rpl_f(21,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(21,RSP == Var: RSP0 && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(21,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(21,RSP == Var: RSP0 && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
close_6  [label="[rpl_fclose_4441,rpl_fclose_4442]"]
	rpl_fclose_7  [label="[.label_279,rpl_fclose_4447]"]
	rpl_fclose_8  [label="[rpl_fclose_4434,rpl_fclose_4434]"]
	rpl_fclose_9  [label="[rpl_fclose_4435,rpl_fclose_4436]"]
	rpl_fclose_10  [label="[rpl_fclose_4437,rpl_fclose_4437]"]
	rpl_fclose_11  [label="[rpl_fclose_4438,rpl_fclose_4439]"]
	rpl_fclose_12  [label="[.label_280,.label_280]"]
	rpl_fclose_13  [label="[rpl_fclose_4431,rpl_fclose_4431]"]
	rpl_fclose_14  [label="[rpl_fclose_4432,rpl_fclose_4433]"]
	rpl_fclose_15  [label="[rpl_fclose_4417,rpl_fclose_4417]"]
	rpl_fclose_16  [label="[rpl_fclose_4418,rpl_fclose_4418]"]
	rpl_fclose_17  [label="[rpl_fclose_4419,rpl_fclose_4420]"]
	rpl_fclose_18  [label="[.label_278,xalloc_die_4393]"]
	rpl_fclose_19  [label="[xalloc_die_4394,xalloc_die_4394]"]
	rpl_fclose_20  [label="[xalloc_die_4394_ret,xalloc_die_4394_ret]"]
	rpl_fclose_21  [label="[rpl_fclose,rpl_fclose_4413]"]
	rpl_fclose_22  [label="[rpl_fclose_4414,rpl_fclose_4414]"]
	rpl_fclose_23  [label="[rpl_fclose_4415,rpl_fclose_4416]"]

	rpl_fclose_0 -> rpl_fclose_1;
	rpl_fclose_1 -> rpl_fclose_2;
	rpl_fclose_2 -> rpl_fclose_3;
	rpl_fclose_3 -> rpl_fclose_4;
	rpl_fclose_4 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_4 -> rpl_fclose_12 [label="!ZF"];
	rpl_fclose_5 -> rpl_fclose_6;
	rpl_fclose_6 -> rpl_fclose_7;

	rpl_fclose_8 -> rpl_fclose_9;
	rpl_fclose_9 -> rpl_fclose_10;
	rpl_fclose_10 -> rpl_fclose_11;
	rpl_fclose_11 -> rpl_fclose_7 [label="ZF"];
	rpl_fclose_11 -> rpl_fclose_5 [label="!ZF"];
	rpl_fclose_12 -> rpl_fclose_13;
	rpl_fclose_13 -> rpl_fclose_14;
	rpl_fclose_14 -> rpl_fclose_18 [label="ZF"];
	rpl_fclose_14 -> rpl_fclose_8 [label="!ZF"];
	rpl_fclose_15 -> rpl_fclose_16;
	rpl_fclose_16 -> rpl_fclose_17;
	rpl_fclose_17 -> rpl_fclose_12 [label="ZF"];
	rpl_fclose_17 -> rpl_fclose_0 [label="!ZF"];
	rpl_fclose_18 -> rpl_fclose_19;
	rpl_fclose_19 -> rpl_fclose_20;

	rpl_fclose_21 -> rpl_fclose_22;
	rpl_fclose_22 -> rpl_fclose_23;
	rpl_fclose_23 -> rpl_fclose_18 [label="SF"];
	rpl_fclose_23 -> rpl_fclose_15 [label="!SF"];
}
--------
Starting Node: 21

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 --ZF--> 18, 4 --!ZF--> 12, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --ZF--> 7, 11 --!ZF--> 5, 12 ----> 13, 13 ----> 14, 14 --ZF--> 18, 14 --!ZF--> 8, 15 ----> 16, 16 ----> 17, 17 --ZF--> 12, 17 --!ZF--> 0, 18 ----> 19, 19 ----> 20, , 21 ----> 22, 22 ----> 23, 23 --SF--> 18, 23 --!SF--> 15

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fclose"
node 0:
RDI := Reg: RBX
node 1:
RAX := fileno@()
node 2:
RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := lseek@()
node 4:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 5:
RAX := __errno_location@()
node 6:
RAX := Value: 4294967295
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 8:
RAX := __errno_location@()
node 9:
RDI := Reg: RBX
node 10:
RAX := fclose@()
node 11:
ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])
node 12:
RDI := Reg: RBX
node 13:
RAX := rpl_fflush@()
node 14:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 15:
RDI := Reg: RBX
node 16:
RAX := __freading@()
node 17:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 18:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 19:
RAX := fclose@()
node 20:
skip'
node 21:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 22:
RAX := fileno@()
node 23:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

Starting Node: 21

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 --ZF--> 18, 4 --!ZF--> 12, 5 ----> 6, 6 ----> 7, , 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 --ZF--> 7, 11 --!ZF--> 5, 12 ----> 13, 13 ----> 14, 14 --ZF--> 18, 14 --!ZF--> 8, 15 ----> 16, 16 ----> 17, 17 --ZF--> 12, 17 --!ZF--> 0, 18 ----> 19, 19 ----> 20, , 21 ----> 22, 22 ----> 23, 23 --SF--> 18, 23 --!SF--> 15

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fclose"
node 0:
RDI := Reg: RBX
node 1:
RAX := fileno@()
node 2:
RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := lseek@()
node 4:
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 5:
RAX := __errno_location@()
node 6:
RAX := Value: 4294967295
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 8:
RAX := __errno_location@()
node 9:
RDI := Reg: RBX
node 10:
RAX := fclose@()
node 11:
ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])
node 12:
RDI := Reg: RBX
node 13:
RAX := rpl_fflush@()
node 14:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 15:
RDI := Reg: RBX
node 16:
RAX := __freading@()
node 17:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 18:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 19:
RAX := fclose@()
node 20:
skip'
node 21:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 22:
RAX := fileno@()
node 23:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

same_behavior for the nodes: rpl_fclose -> rpl_fclose_3683 and rpl_fclose -> rpl_fclose_4413

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fclose -> rpl_fclose_3683 and rpl_fclose -> rpl_fclose_4413 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3684 -> rpl_fclose_3684 and rpl_fclose_4414 -> rpl_fclose_4414

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3684 -> rpl_fclose_3684 and rpl_fclose_4414 -> rpl_fclose_4414 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3685 -> rpl_fclose_3686 and rpl_fclose_4415 -> rpl_fclose_4416

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3685 -> rpl_fclose_3686 and rpl_fclose_4415 -> rpl_fclose_4416 have been verified to do the same.

same_behavior for the nodes: .label_277 -> rpl_fclose_3722 and .label_278 -> xalloc_die_4393

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8], RDI := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_277 -> rpl_fclose_3722 and .label_278 -> xalloc_die_4393 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3723 -> rpl_fclose_3723 and xalloc_die_4394 -> xalloc_die_4394

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3723 -> rpl_fclose_3723 and xalloc_die_4394 -> xalloc_die_4394 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3723_ret -> rpl_fclose_3723_ret and xalloc_die_4394_ret -> xalloc_die_4394_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3723_ret -> rpl_fclose_3723_ret and xalloc_die_4394_ret -> xalloc_die_4394_ret have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3687 -> rpl_fclose_3687 and rpl_fclose_4417 -> rpl_fclose_4417

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3687 -> rpl_fclose_3687 and rpl_fclose_4417 -> rpl_fclose_4417 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3688 -> rpl_fclose_3688 and rpl_fclose_4418 -> rpl_fclose_4418

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3688 -> rpl_fclose_3688 and rpl_fclose_4418 -> rpl_fclose_4418 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3689 -> rpl_fclose_3690 and rpl_fclose_4419 -> rpl_fclose_4420

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3689 -> rpl_fclose_3690 and rpl_fclose_4419 -> rpl_fclose_4420 have been verified to do the same.

same_behavior for the nodes: .label_279 -> .label_279 and .label_280 -> .label_280

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_279 -> .label_279 and .label_280 -> .label_280 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3701 -> rpl_fclose_3701 and rpl_fclose_4431 -> rpl_fclose_4431

same_behavior checking these two SStates:

SA || RAX := rpl_fflush@()

SB || RAX := rpl_fflush@()

Resulting values:
Value A:
E_app (F2 "rpl_fflush" "") []
Value B:
E_app (F2 "rpl_fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3701 -> rpl_fclose_3701 and rpl_fclose_4431 -> rpl_fclose_4431 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3702 -> rpl_fclose_3703 and rpl_fclose_4432 -> rpl_fclose_4433

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3702 -> rpl_fclose_3703 and rpl_fclose_4432 -> rpl_fclose_4433 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3704 -> rpl_fclose_3704 and rpl_fclose_4434 -> rpl_fclose_4434

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3704 -> rpl_fclose_3704 and rpl_fclose_4434 -> rpl_fclose_4434 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3705 -> rpl_fclose_3706 and rpl_fclose_4435 -> rpl_fclose_4436

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3705 -> rpl_fclose_3706 and rpl_fclose_4435 -> rpl_fclose_4436 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3707 -> rpl_fclose_3707 and rpl_fclose_4437 -> rpl_fclose_4437

same_behavior checking these two SStates:

SA || RAX := fclose@()

SB || RAX := fclose@()

Resulting values:
Value A:
E_app (F2 "fclose" "") []
Value B:
E_app (F2 "fclose" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3707 -> rpl_fclose_3707 and rpl_fclose_4437 -> rpl_fclose_4437 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3708 -> rpl_fclose_3709 and rpl_fclose_4438 -> rpl_fclose_4439

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])

SB || ZF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), CF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), SF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), OF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4]), PF := TEST(Dereference: [Reg: RAX,4],Dereference: [Reg: RAX,4])

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3708 -> rpl_fclose_3709 and rpl_fclose_4438 -> rpl_fclose_4439 have been verified to do the same.

same_behavior for the nodes: .label_278 -> rpl_fclose_3717 and .label_279 -> rpl_fclose_4447

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_278 -> rpl_fclose_3717 and .label_279 -> rpl_fclose_4447 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3710 -> rpl_fclose_3710 and rpl_fclose_4440 -> rpl_fclose_4440

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3710 -> rpl_fclose_3710 and rpl_fclose_4440 -> rpl_fclose_4440 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3711 -> rpl_fclose_3712 and rpl_fclose_4441 -> rpl_fclose_4442

same_behavior checking these two SStates:

SA || RAX := Value: 4294967295

SB || RAX := Value: 4294967295

Resulting values:
Value A:
E_val 4294967295 32
Value B:
E_val 4294967295 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3711 -> rpl_fclose_3712 and rpl_fclose_4441 -> rpl_fclose_4442 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3691 -> rpl_fclose_3691 and rpl_fclose_4421 -> rpl_fclose_4421

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3691 -> rpl_fclose_3691 and rpl_fclose_4421 -> rpl_fclose_4421 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3692 -> rpl_fclose_3692 and rpl_fclose_4422 -> rpl_fclose_4422

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3692 -> rpl_fclose_3692 and rpl_fclose_4422 -> rpl_fclose_4422 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3693 -> rpl_fclose_3695 and rpl_fclose_4423 -> rpl_fclose_4425

same_behavior checking these two SStates:

SA || RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 1, RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3693 -> rpl_fclose_3695 and rpl_fclose_4423 -> rpl_fclose_4425 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3696 -> rpl_fclose_3696 and rpl_fclose_4426 -> rpl_fclose_4426

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3696 -> rpl_fclose_3696 and rpl_fclose_4426 -> rpl_fclose_4426 have been verified to do the same.

same_behavior for the nodes: rpl_fclose_3697 -> rpl_fclose_3698 and rpl_fclose_4427 -> rpl_fclose_4428

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fclose_3697 -> rpl_fclose_3698 and rpl_fclose_4427 -> rpl_fclose_4428 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (3/87): "strcaseeq0"
--------
.dot code for CFG of text section strcaseeq0 for Vanilla
diGraph strcaseeq0_Vanilla{
	strcaseeq0_0  [label="[strcaseeq0_2274,strcaseeq0_2274]"]
	strcaseeq0_1  [label="[strcaseeq0_2270,strcaseeq0_2273]"]
	strcaseeq0_2  [label="[strcaseeq0_2283,strcaseeq0_2291]"]
	strcaseeq0_3  [label="[strcaseeq0_2292,strcaseeq0_2292]"]
	strcaseeq0_4  [label="[.label_192,strcaseeq0_2282]"]
	strcaseeq0_5  [label="[.label_190,strcaseeq0_23(7,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
(7,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(4,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(5,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(6,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(9,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
01]"]
	strcaseeq0_6  [label="[.label_191,strcaseeq0_2278]"]
	strcaseeq0_7  [label="[strcaseeq0,strcaseeq0_2265]"]
	strcaseeq0_8  [label="[strcaseeq0_2266,strcaseeq0_2266]"]
	strcaseeq0_9  [label="[strcaseeq0_2267,strcaseeq0_2269]"]

	strcaseeq0_0 -> strcaseeq0_5;
	strcaseeq0_1 -> strcaseeq0_4 [label="ZF"];
	strcaseeq0_1 -> strcaseeq0_0 [label="!ZF"];
	strcaseeq0_2 -> strcaseeq0_3;
	strcaseeq0_3 -> strcaseeq0_5;
	strcaseeq0_4 -> strcaseeq0_5 [label="ZF"];
	strcaseeq0_4 -> strcaseeq0_2 [label="!ZF"];

	strcaseeq0_6 -> strcaseeq0_5 [label="!ZF"];
	strcaseeq0_6 -> strcaseeq0_4 [label="ZF"];
	strcaseeq0_7 -> strcaseeq0_8;
	strcaseeq0_8 -> strcaseeq0_9;
	strcaseeq0_9 -> strcaseeq0_6 [label="ZF"];
	strcaseeq0_9 -> strcaseeq0_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq0 for Randomized
diGraph strcaseeq0_Randomized{
	strcaseeq0_0  [label="[strcaseeq0_468,strcaseeq0_468]"]
	strcaseeq0_1  [label="[strcaseeq0_464,strcaseeq0_467]"]
	strcaseeq0_2  [label="[sub_40152e_412,sub_40152e_420]"]
	strcaseeq0_3  [label="[sub_40152e_421,sub_40152e_421]"]
	strcaseeq0_4  [label="[.label_20,sub_40152e_411]"]
	strcaseeq0_5  [label="[.label_19,sub_40152e_430]"]
	strcaseeq0_6  [label="[.label_21,sub_40152e_407]"]
	strcaseeq0_7  [label="[strcaseeq0,strcaseeq0_459]"]
	strcaseeq0_8  [label="[strcaseeq0_460,strcaseeq0_460]"]
	strcaseeq0_9  [label="[strcaseeq0_461,strcaseeq0_463]"]

	strcaseeq0_0 -> strcaseeq0_5;
	strcaseeq0_1 -> strcaseeq0_4 [label="ZF"];
	strcaseeq0_1 -> strcaseeq0_0 [label="!ZF"];
	strcaseeq0_2 -> strcaseeq0_3;
	strcaseeq0_3 -> strcaseeq0_5;
	strcaseeq0_4 -> strcaseeq0_5 [label="ZF"];
	strcaseeq0_4 -> strcaseeq0_2 [label="!ZF"];

	strcaseeq0_6 -> strcaseeq0_5 [label="!ZF"];
	strcaseeq0_6 -> strcaseeq0_4 [label="ZF"];
	strcaseeq0_7 -> strcaseeq0_8;
	strcaseeq0_8 -> strcaseeq0_9;
	strcaseeq0_9 -> strcaseeq0_6 [label="ZF"];
	strcaseeq0_9 -> strcaseeq0_1 [label="!ZF"];
}
--------
Starting Node: 7

Edges: 0 ----> 5, 1 --ZF--> 4, 1 --!ZF--> 0, 2 ----> 3, 3 ----> 5, 4 --ZF--> 5, 4 --!ZF--> 2, , 6 --!ZF--> 5, 6 --ZF--> 4, 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq0"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Dereference: [(Var: RSP0 + Value: 8),1]), RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := Reg: RBX, RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R9 := sextend(Dereference: [(Var: RSP0 + Value: 8),1],8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 56),4] := sextend(Dereference: [(Var: RSP0 + Value: 16),1],8,32)
node 3:
RAX := strcaseeq1@()
node 4:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 6:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 7:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
node 8:
RAX := c_isupper@()
node 9:
RCX := sextend(Dereference: [Reg: RBX,1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 7

Edges: 0 ----> 5, 1 --ZF--> 4, 1 --!ZF--> 0, 2 ----> 3, 3 ----> 5, 4 --ZF--> 5, 4 --!ZF--> 2, , 6 --!ZF--> 5, 6 --ZF--> 4, 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq0"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
RAX := (TakeBits: <63,8>(Reg: RAX) . Dereference: [(Var: RSP0 + Value: 8),1]), RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := Reg: RBX, RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R9 := sextend(Dereference: [(Var: RSP0 + Value: 8),1],8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 56),4] := sextend(Dereference: [(Var: RSP0 + Value: 16),1],8,32)
node 3:
RAX := strcaseeq1@()
node 4:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 6:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 7:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
node 8:
RAX := c_isupper@()
node 9:
RCX := sextend(Dereference: [Reg: RBX,1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq0 -> strcaseeq0_2265 and strcaseeq0 -> strcaseeq0_459

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R8]
Value B:
E_app (TakeBits 31 0) [E_reg R8]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R9]
Value B:
E_app (TakeBits 31 0) [E_reg R9]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RCX]
Value B:
E_app (TakeBits 31 0) [E_reg RCX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq0 -> strcaseeq0_2265 and strcaseeq0 -> strcaseeq0_459 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2266 -> strcaseeq0_2266 and strcaseeq0_460 -> strcaseeq0_460

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2266 -> strcaseeq0_2266 and strcaseeq0_460 -> strcaseeq0_460 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2267 -> strcaseeq0_2269 and strcaseeq0_461 -> strcaseeq0_463

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [Reg: RBX,1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [Reg: RBX,1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_reg RBX) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_reg RBX) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2267 -> strcaseeq0_2269 and strcaseeq0_461 -> strcaseeq0_463 have been verified to do the same.

same_behavior for the nodes: .label_191 -> strcaseeq0_2278 and .label_21 -> sub_40152e_407

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_191 -> strcaseeq0_2278 and .label_21 -> sub_40152e_407 have been verified to do the same.

same_behavior for the nodes: .label_190 -> strcaseeq0_2301 and .label_19 -> sub_40152e_430

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_190 -> strcaseeq0_2301 and .label_19 -> sub_40152e_430 have been verified to do the same.

same_behavior for the nodes: .label_192 -> strcaseeq0_2282 and .label_20 -> sub_40152e_411

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_192 -> strcaseeq0_2282 and .label_20 -> sub_40152e_411 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2283 -> strcaseeq0_2291 and sub_40152e_412 -> sub_40152e_420

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Dereference: [(Var: RSP0 + Value: 8),1]), RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := Reg: RBX, RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R9 := sextend(Dereference: [(Var: RSP0 + Value: 8),1],8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 56),4] := sextend(Dereference: [(Var: RSP0 + Value: 16),1],8,32)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Dereference: [(Var: RSP0 + Value: 8),1]), RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := Reg: RBX, RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R9 := sextend(Dereference: [(Var: RSP0 + Value: 8),1],8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 56),4] := sextend(Dereference: [(Var: RSP0 + Value: 16),1],8,32)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 16 64]) 1]
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 16 64]) 1]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2283 -> strcaseeq0_2291 and sub_40152e_412 -> sub_40152e_420 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2292 -> strcaseeq0_2292 and sub_40152e_421 -> sub_40152e_421

same_behavior checking these two SStates:

SA || RAX := strcaseeq1@()

SB || RAX := strcaseeq1@()

Resulting values:
Value A:
E_app (F2 "strcaseeq1" "") []
Value B:
E_app (F2 "strcaseeq1" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2292 -> strcaseeq0_2292 and sub_40152e_421 -> sub_40152e_421 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2270 -> strcaseeq0_2273 and strcaseeq0_464 -> strcaseeq0_467

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2270 -> strcaseeq0_2273 and strcaseeq0_464 -> strcaseeq0_467 have been verified to do the same.

same_behavior for the nodes: strcaseeq0_2274 -> strcaseeq0_2274 and strcaseeq0_468 -> strcaseeq0_468

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq0_2274 -> strcaseeq0_2274 and strcaseeq0_468 -> strcaseeq0_468 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (4/87): "quote"
--------
.dot code for CFG of text section quote for Vanilla
diGraph quote_Vanilla{
	quote_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quote_1  [label="[.label_175,quotearg_n_options_1724]"]
	quote_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quote_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quote_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quote_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quote_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quote_7  [label="[.label_172,.label_172]"]
	quote_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quote_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quote_10  [label="[quotearg_n_opt(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
ions_1766,quotearg_n_options_1766]"]
	quote_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quote_12  [label="[.label_171,.label_171]"]
	quote_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quote_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quote_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quote_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quote_17  [label="[.label_176,quotearg_n_options_1797]"]
	quote_18  [label="[.label_173,quotearg_n_options_1765]"]
	quote_19  [label="[.label_177,quotearg_n_options_1748]"]
	quote_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quote_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quote_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quote_23  [label="[.label_174,.label_174]"]
	quote_24  [label="[quote,quotearg_n_options_1685]"]
	quote_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quote_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quote_0 -> quote_1;
	quote_1 -> quote_2;
	quote_2 -> quote_3;
	quote_3 -> quote_19;
	quote_4 -> quote_5;
	quote_5 -> quote_6;
	quote_6 -> quote_1 [label="!ZF"];
	quote_6 -> quote_0 [label="ZF"];

	quote_8 -> quote_7 [label="ZF"];
	quote_8 -> quote_4 [label="!ZF"];
	quote_9 -> quote_17;
	quote_10 -> quote_11;
	quote_11 -> quote_12;
	quote_12 -> quote_13;
	quote_13 -> quote_14;
	quote_14 -> quote_15;
	quote_15 -> quote_16;
	quote_16 -> quote_17;

	quote_18 -> quote_12 [label="ZF"];
	quote_18 -> quote_10 [label="!ZF"];
	quote_19 -> quote_20;
	quote_20 -> quote_21;
	quote_21 -> quote_18 [label="CF || ZF"];
	quote_21 -> quote_9 [label="!CF && !ZF"];
	quote_22 -> quote_19 [label="!ZF && SF == OF"];
	quote_22 -> quote_8 [label="ZF || SF != OF"];

	quote_24 -> quote_25;
	quote_25 -> quote_26;
	quote_26 -> quote_23 [label="SF"];
	quote_26 -> quote_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote for Randomized
diGraph quote_Randomized{
	quote_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quote_1  [label="[.label_142,quotearg_n_options_1680]"]
	quote_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quote_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quote_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quote_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quote_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quote_7  [label="[.label_139,.label_139]"]
	quote_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quote_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quote_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quote_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quote_12  [label="[.label_138,.label_138]"]
	quote_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quote_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quote_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quote_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quote_17  [label="[.label_143,quotearg_n_options_1753]"]
	quote_18  [label="[.label_140,quotearg_n_options_1721]"]
	quote_19  [label="[.label_144,quotearg_n_options_1704]"]
	quote_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quote_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quote_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quote_23  [label="[.label_141,.label_141]"]
	quote_24  [label="[quote,quotearg_n_options_1641]"]
	quote_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quote_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quote_0 -> quote_1;
	quote_1 -> quote_2;
	quote_2 -> quote_3;
	quote_3 -> quote_19;
	quote_4 -> quote_5;
	quote_5 -> quote_6;
	quote_6 -> quote_1 [label="!ZF"];
	quote_6 -> quote_0 [label="ZF"];

	quote_8 -> quote_7 [label="ZF"];
	quote_8 -> quote_4 [label="!ZF"];
	quote_9 -> quote_17;
	quote_10 -> quote_11;
	quote_11 -> quote_12;
	quote_12 -> quote_13;
	quote_13 -> quote_14;
	quote_14 -> quote_15;
	quote_15 -> quote_16;
	quote_16 -> quote_17;

	quote_18 -> quote_12 [label="ZF"];
	quote_18 -> quote_10 [label="!ZF"];
	quote_19 -> quote_20;
	quote_20 -> quote_21;
	quote_21 -> quote_18 [label="CF || ZF"];
	quote_21 -> quote_9 [label="!CF && !ZF"];
	quote_22 -> quote_19 [label="!ZF && SF == OF"];
	quote_22 -> quote_8 [label="ZF || SF != OF"];

	quote_24 -> quote_25;
	quote_25 -> quote_26;
	quote_26 -> quote_23 [label="SF"];
	quote_26 -> quote_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quote"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Deref(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
erence: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RDI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RDI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quote -> quotearg_n_options_1685 and quote -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RDI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote -> quotearg_n_options_1685 and quote -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: (19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (5/87): "quote_n"
--------
.dot code for CFG of text section quote_n for Vanilla
diGraph quote_n_Vanilla{
	quote_n_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quote_n_1  [label="[.label_175,quotearg_n_options_1724]"]
	quote_n_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quote_n_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quote_n_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quote_n_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quote_n_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quote_n_7  [label="[.label_172,.label_172]"]
	quote_n_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quote_n_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quote_n_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quote_n_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quote_n_12  [label="[.label_171,.label_171]"]
	quote_n_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quote_n_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quote_n_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quote_n_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quote_n_17  [label="[.label_176,quotearg_n_options_1797]"]
	quote_n_18  [label="[.label_173,quotearg_n_options_1765]"]
	quote_n_19  [label="[.label_177,quotearg_n_options_1748]"]
	quote_n_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quote_n_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quote_n_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quote_n_23  [label="[.label_174,.label_174]"]
	quote_n_24  [label="[quote_n,quotearg_n_options_1685]"]
	quote_n_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quote_n_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quote_n_0 -> quote_n_1;
	quote_n_1 -> quote_n_2;
	quote_n_2 -> quote_n_3;
	quote_n_3 -> quote_n_19;
	quote_n_4 -> quote_n_5;
	quote_n_5 -> quote_n_6;
	quote_n_6 -> quote_n_1 [label="!ZF"];
	quote_n_6 -> quote_n_0 [label="ZF"];

	quote_n_8 -> quote_n_7 [label="ZF"];
	quote_n_8 -> quote_n_4 [label="!ZF"];
	quote_n_9 -> quote_n_17;
	quote_n_10 -> quote_n_11;
	quote_n_11 -> quote_n_12;
	quote_n_12 -> quote_n_13;
	quote_n_13 -> quote_n_14;
	quote_n_14 -> quote_n_15;
	quote_n_15 -> quote_n_16;
	quote_n_16 -> quote_n_17;

	quote_n_18 -> quote_n_12 [label="ZF"];
	quote_n_18 -> quote_n_10 [label="!ZF"];
	quote_n_19 -> quote_n_20;
	quote_n_20 -> quote_n_21;
	quote_n_21 -> quote_n_18 [label="CF || ZF"];
	quote_n_21 -> quote_n_9 [label="!CF && !ZF"];
	quote_n_22 -> quote_n_19 [label="!ZF && SF == OF"];
	quote_n_22 -> quote_n_8 [label="ZF || SF != OF"];

	quote_n_24 -> quote_n_25;
	quote_n_25 -> quote_n_26;
	quote_n_26 -> quote_n_23 [label="SF"];
	quote_n_26 -> quote_n_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_n for Randomized
diGraph quote_n_Randomized{
	quote_n_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quote_n_1  [label="[.label_142,quotearg_n_options_1680]"]
	quote_n_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quote_n_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quote_n_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quote_n_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quote_n_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quote_n_7  [label="[.label_139,.label_139]"]
	quote_n_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quote_n_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quote_n_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quote_n_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quote_n_12  [label="[.label_138,.label_138]"]
	quote_n_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quote_n_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quote_n_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quote_n_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quote_n_17  [label="[.label_143,quotearg_n_options_1753]"]
	quote_n_18  [label="[.label_140,quotearg_n_options_1721]"]
	quote_n_19  [label="[.label_144,quotearg_n_options_1704]"]
	quote_n_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quote_n_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quote_n_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quote_n_23  [label="[.label_141,.label_141]"]
	quote_n_24  [label="[quote_n,quotearg_n_options_1641]"]
	quote_n_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quote_n_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quote_n_0 -> quote_n_1;
	quote_n_1 -> quote_n_2;
	quote_n_2 -> quote_n_3;
	quote_n_3 -> quote_n_19;
	quote_n_4 -> quote_n_5;
	quote_n_5 -> quote_n_6;
	quote_n_6 -> quote_n_1 [label="!ZF"];
	quote_n_6 -> quote_n_0 [label="ZF"];

	quote_n_8 -> quote_n_7 [label="ZF"];
	quote_n_8 -> quote_n_4 [label="!ZF"];
	quote_n_9 -> quote_n_17;
	quote_n_10 -> quote_n_11;
	quote_n_11 -> quote_n_12;
	quote_n_12 -> quote_n_13;
	quote_n_13 -> quote_n_14;
	quote_n_14 -> quote_n_15;
	quote_n_15 -> quote_n_16;
	quote_n_16 -> quote_n_17;

	quote_n_18 -> quote_n_12 [label="ZF"];
	quote_n_18 -> quote_n_10 [label="!ZF"];
	quote_n_19 -> quote_n_20;
	quote_n_20 -> quote_n_21;
	quote_n_21 -> quote_n_18 [label="CF || ZF"];
	quote_n_21 -> quote_n_9 [label="!CF && !ZF"];
	quote_n_22 -> quote_n_19 [label="!ZF && SF == OF"];
	quote_n_22 -> quote_n_8 [label="ZF || SF != OF"];

	quote_n_24 -> quote_n_25;
	quote_n_25 -> quote_n_26;
	quote_n_26 -> quote_n_23 [label="SF"];
	quote_n_26 -> quote_n_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslo(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
ts),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quote_n -> quotearg_n_options_1685 and quote_n -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n -> quotearg_n_options_1685 and quote_n -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (6/87): "quote_mem"
--------
.dot code for CFG of text section quote_mem for Vanilla
diGraph quote_mem_Vanilla{
	quote_mem_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quote_mem_1  [label="[.label_175,quotearg_n_options_1724]"]
	quote_mem_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quote_mem_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quote_mem_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quote_mem_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quote_mem_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quote_mem_7  [label="[.label_172,.label_172]"]
	quote_mem_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quote_mem_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quote_mem_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quote_mem_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quote_mem_12  [label="[.label_171,.label_171]"]
	quote_mem_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quote_mem_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quote_mem_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quote_mem_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quote_mem_17  [label="[.label_176,quotearg_n_options_1797]"]
	quote_mem_18  [label="[.label_173,quotearg_n_options_1765]"]
	quote_mem_19  [label="[.label_177,quotearg_n_options_1748]"]
	quote_mem_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quote_mem_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quote_mem_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quote_mem_23  [label="[.label_174,.label_174]"]
	quote_mem_24  [label="[quote_mem,quotearg_n_options_1685]"]
	quote_mem_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quote_mem_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quote_mem_0 -> quote_mem_1;
	quote_mem_1 -> quote_mem_2;
	quote_mem_2 -> quote_mem_3;
	quote_mem_3 -> quote_mem_19;
	quote_mem_4 -> quote_mem_5;
	quote_mem_5 -> quote_mem_6;
	quote_mem_6 -> quote_mem_1 [label="!ZF"];
	quote_mem_6 -> quote_mem_0 [label="ZF"];

	quote_mem_8 -> quote_mem_7 [label="ZF"];
	quote_mem_8 -> quote_mem_4 [label="!ZF"];
	quote_mem_9 -> quote_mem_17;
	quote_mem_10 -> quote_mem_11;
	quote_mem_11 -> quote_mem_12;
	quote_mem_12 -> quote_mem_13;
	quote_mem_13 -> quote_mem_14;
	quote_mem_14 -> quote_mem_15;
	quote_mem_15 -> quote_mem_16;
	quote_mem_16 -> quote_mem_17;

	quote_mem_18 -> quote_mem_12 [label="ZF"];
	quote_mem_18 -> quote_mem_10 [label="!ZF"];
	quote_mem_19 -> quote_mem_20;
	quote_mem_20 -> quote_mem_21;
	quote_mem_21 -> quote_mem_18 [label="CF || ZF"];
	quote_mem_21 -> quote_mem_9 [label="!CF && !ZF"];
	quote_mem_22 -> quote_mem_19 [label="!ZF && SF == OF"];
	quote_mem_22 -> quote_mem_8 [label="ZF || SF != OF"];

	quote_mem_24 -> quote_mem_25;
	quote_mem_25 -> quote_mem_26;
	quote_mem_26 -> quote_mem_23 [label="SF"];
	quote_mem_26 -> quote_mem_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_mem for Randomized
diGraph quote_mem_Randomized{
	quote_mem_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quote_mem_1  [label="[.label_142,quotearg_n_options_1680]"]
	quote_mem_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quote_mem_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quote_mem_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quote_mem_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quote_mem_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quote_mem_7  [label="[.label_139,.label_139]"]
	quote_mem_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quote_mem_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quote_mem_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quote_mem_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quote_mem_12  [label="[.label_138,.label_138]"]
	quote_mem_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quote_mem_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quote_mem_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quote_mem_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quote_mem_17  [label="[.label_143,quotearg_n_options_1753]"]
	quote_mem_18  [label="[.label_140,quotearg_n_options_1721]"]
	quote_mem_19  [label="[.label_144,quotearg_n_options_1704]"]
	quote_mem_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quote_mem_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quote_mem_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quote_mem_23  [label="[.label_141,.label_141]"]
	quote_mem_24  [label="[quote_mem,quotearg_n_options_1641]"]
	quote_mem_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quote_mem_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quote_mem_0 -> quote_mem_1;
	quote_mem_1 -> quote_mem_2;
	quote_mem_2 -> quote_mem_3;
	quote_mem_3 -> quote_mem_19;
	quote_mem_4 -> quote_mem_5;
	quote_mem_5 -> quote_mem_6;
	quote_mem_6 -> q(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
uote_mem_1 [label="!ZF"];
	quote_mem_6 -> quote_mem_0 [label="ZF"];

	quote_mem_8 -> quote_mem_7 [label="ZF"];
	quote_mem_8 -> quote_mem_4 [label="!ZF"];
	quote_mem_9 -> quote_mem_17;
	quote_mem_10 -> quote_mem_11;
	quote_mem_11 -> quote_mem_12;
	quote_mem_12 -> quote_mem_13;
	quote_mem_13 -> quote_mem_14;
	quote_mem_14 -> quote_mem_15;
	quote_mem_15 -> quote_mem_16;
	quote_mem_16 -> quote_mem_17;

	quote_mem_18 -> quote_mem_12 [label="ZF"];
	quote_mem_18 -> quote_mem_10 [label="!ZF"];
	quote_mem_19 -> quote_mem_20;
	quote_mem_20 -> quote_mem_21;
	quote_mem_21 -> quote_mem_18 [label="CF || ZF"];
	quote_mem_21 -> quote_mem_9 [label="!CF && !ZF"];
	quote_mem_22 -> quote_mem_19 [label="!ZF && SF == OF"];
	quote_mem_22 -> quote_mem_8 [label="ZF || SF != OF"];

	quote_mem_24 -> quote_mem_25;
	quote_mem_25 -> quote_mem_26;
	quote_mem_26 -> quote_mem_23 [label="SF"];
	quote_mem_26 -> quote_mem_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R1(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
2)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RSI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RSI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quote_mem -> quotearg_n_options_1685 and quote_mem -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RSI, RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_mem -> quotearg_n_options_1685 and quote_mem -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (7/87): "quote_n_mem"
--------
.dot code for CFG of text section quote_n_mem for Vanilla
diGraph quote_n_mem_Vanilla{
	quote_n_mem_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quote_n_mem_1  [label="[.label_175,quotearg_n_options_1724]"]
	quote_n_mem_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quote_n_mem_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quote_n_mem_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quote_n_mem_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quote_n_mem_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quote_n_mem_7  [label="[.label_172,.label_172]"]
	quote_n_mem_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quote_n_mem_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quote_n_mem_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quote_n_mem_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quote_n_mem_12  [label="[.label_171,.label_171]"]
	quote_n_mem_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quote_n_mem_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quote_n_mem_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quote_n_mem_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quote_n_mem_17  [label="[.label_176,quotearg_n_options_1797]"]
	quote_n_mem_18  [label="[.label_173,quotearg_n_options_1765]"]
	quote_n_mem_19  [label="[.label_177,quotearg_n_options_1748]"]
	quote_n_mem_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quote_n_mem_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quote_n_mem_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quote_n_mem_23  [label="[.label_174,.label_174]"]
	quote_n_mem_24  [label="[quote_n_mem,quotearg_n_options_1685]"]
	quote_n_mem_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quote_n_mem_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quote_n_mem_0 -> quote_n_mem_1;
	quote_n_mem_1 -> quote_n_mem_2;
	quote_n_mem_2 -> quote_n_mem_3;
	quote_n_mem_3 -> quote_n_mem_19;
	quote_n_mem_4 -> quote_n_mem_5;
	quote_n_mem_5 -> quote_n_mem_6;
	quote_n_mem_6 -> quote_n_mem_1 [label="!ZF"];
	quote_n_mem_6 -> quote_n_mem_0 [label="ZF"];

	quote_n_mem_8 -> quote_n_mem_7 [label="ZF"];
	quote_n_mem_8 -> quote_n_mem_4 [label="!ZF"];
	quote_n_mem_9 -> quote_n_mem_17;
	quote_n_mem_10 -> quote_n_mem_11;
	quote_n_mem_11 -> quote_n_mem_12;
	quote_n_mem_12 -> quote_n_mem_13;
	quote_n_mem_13 -> quote_n_mem_14;
	quote_n_mem_14 -> quote_n_mem_15;
	quote_n_mem_15 -> quote_n_mem_16;
	quote_n_mem_16 -> quote_n_mem_17;

	quote_n_mem_18 -> quote_n_mem_12 [label="ZF"];
	quote_n_mem_18 -> quote_n_mem_10 [label="!ZF"];
	quote_n_mem_19 -> quote_n_mem_20;
	quote_n_mem_20 -> quote_n_mem_21;
	quote_n_mem_21 -> quote_n_mem_18 [label="CF || ZF"];
	quote_n_mem_21 -(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
> quote_n_mem_9 [label="!CF && !ZF"];
	quote_n_mem_22 -> quote_n_mem_19 [label="!ZF && SF == OF"];
	quote_n_mem_22 -> quote_n_mem_8 [label="ZF || SF != OF"];

	quote_n_mem_24 -> quote_n_mem_25;
	quote_n_mem_25 -> quote_n_mem_26;
	quote_n_mem_26 -> quote_n_mem_23 [label="SF"];
	quote_n_mem_26 -> quote_n_mem_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quote_n_mem for Randomized
diGraph quote_n_mem_Randomized{
	quote_n_mem_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quote_n_mem_1  [label="[.label_142,quotearg_n_options_1680]"]
	quote_n_mem_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quote_n_mem_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quote_n_mem_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quote_n_mem_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quote_n_mem_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quote_n_mem_7  [label="[.label_139,.label_139]"]
	quote_n_mem_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quote_n_mem_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quote_n_mem_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quote_n_mem_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quote_n_mem_12  [label="[.label_138,.label_138]"]
	quote_n_mem_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quote_n_mem_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quote_n_mem_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quote_n_mem_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quote_n_mem_17  [label="[.label_143,quotearg_n_options_1753]"]
	quote_n_mem_18  [label="[.label_140,quotearg_n_options_1721]"]
	quote_n_mem_19  [label="[.label_144,quotearg_n_options_1704]"]
	quote_n_mem_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quote_n_mem_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quote_n_mem_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quote_n_mem_23  [label="[.label_141,.label_141]"]
	quote_n_mem_24  [label="[quote_n_mem,quotearg_n_options_1641]"]
	quote_n_mem_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quote_n_mem_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quote_n_mem_0 -> quote_n_mem_1;
	quote_n_mem_1 -> quote_n_mem_2;
	quote_n_mem_2 -> quote_n_mem_3;
	quote_n_mem_3 -> quote_n_mem_19;
	quote_n_mem_4 -> quote_n_mem_5;
	quote_n_mem_5 -> quote_n_mem_6;
	quote_n_mem_6 -> quote_n_mem_1 [label="!ZF"];
	quote_n_mem_6 -> quote_n_mem_0 [label="ZF"];

	quote_n_mem_8 -> quote_n_mem_7 [label="ZF"];
	quote_n_mem_8 -> quote_n_mem_4 [label="!ZF"];
	quote_n_mem_9 -> quote_n_mem_17;
	quote_n_mem_10 -> quote_n_mem_11;
	quote_n_mem_11 -> quote_n_mem_12;
	quote_n_mem_12 -> quote_n_mem_13;
	quote_n_mem_13 -> quote_n_mem_14;
	quote_n_mem_14 -> quote_n_mem_15;
	quote_n_mem_15 -> quote_n_mem_16;
	quote_n_mem_16 -> quote_n_mem_17;

	quote_n_mem_18 -> quote_n_mem_12 [label="ZF"];
	quote_n_mem_18 -> quote_n_mem_10 [label="!ZF"];
	quote_n_mem_19 -> quote_n_mem_20;
	quote_n_mem_20 -> quote_n_mem_21;
	quote_n_mem_21 -> quote_n_mem_18 [label="CF || ZF"];
	quote_n_mem_21 -> quote_n_mem_9 [label="!CF && !ZF"];
	quote_n_mem_22 -> quote_n_mem_19 [label="!ZF && SF == OF"];
	quote_n_mem_22 -> quote_n_mem_8 [label="ZF || SF != OF"];

	quote_n_mem_24 -> quote_n_mem_25;
	quote_n_mem_25 -> quote_n_mem_26;
	quote_n_mem_26 -> quote_n_mem_23 [label="SF"];
	quote_n_mem_26 -> quote_n_mem_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quote_n_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: (19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quote_n_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quote_n_mem -> quotearg_n_options_1685 and quote_n_mem -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Dereference: [Var: quote_quoting_options,4], RCX := Dereference: [Var: quote_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "quote_quoting_options" 64) 4
Value B:
E_deref (E_var "quote_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quote_n_mem -> quotearg_n_options_1685 and quote_n_mem -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
quote_quoting_options <--> quote_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (8/87): "quotearg_custom_mem"
--------
.dot code for CFG of text section quotearg_custom_mem for Vanilla
diGraph quotearg_custom_mem_Vanilla{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem,quotearg_n_custom_mem_2090]"]
	quotearg_custom_mem_1  [label="[quotearg_n_custom_mem_2091,quotearg_n_custom_mem_2091]"]
	quotearg_custom_mem_2  [label="[quotearg_n_custom_mem_2092,quotearg_n_custom_mem_2095]"]
	quotearg_custom_mem_3  [label="[quotearg_n_custom_mem_2096,quotearg_n_custom_mem_2096]"]
	quotearg_custom_mem_4  [label="[quotearg_n_custom_mem_2097,quotearg_n_custom_mem_2102]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quo(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
tearg_custom_mem_1 -> quotearg_custom_mem_2;
	quotearg_custom_mem_2 -> quotearg_custom_mem_3;
	quotearg_custom_mem_3 -> quotearg_custom_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_custom_mem for Randomized
diGraph quotearg_custom_mem_Randomized{
	quotearg_custom_mem_0  [label="[quotearg_custom_mem,quotearg_n_custom_mem_3336]"]
	quotearg_custom_mem_1  [label="[quotearg_n_custom_mem_3337,quotearg_n_custom_mem_3337]"]
	quotearg_custom_mem_2  [label="[quotearg_n_custom_mem_3338,quotearg_n_custom_mem_3341]"]
	quotearg_custom_mem_3  [label="[quotearg_n_custom_mem_3342,quotearg_n_custom_mem_3342]"]
	quotearg_custom_mem_4  [label="[quotearg_n_custom_mem_3343,quotearg_n_custom_mem_3348]"]

	quotearg_custom_mem_0 -> quotearg_custom_mem_1;
	quotearg_custom_mem_1 -> quotearg_custom_mem_2;
	quotearg_custom_mem_2 -> quotearg_custom_mem_3;
	quotearg_custom_mem_3 -> quotearg_custom_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_custom_mem"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX, R8 := Reg: RCX, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom_mem"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX, R8 := Reg: RCX, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_custom_mem -> quotearg_n_custom_mem_2090 and quotearg_custom_mem -> quotearg_n_custom_mem_3336

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX, R8 := Reg: RCX, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX, R8 := Reg: RCX, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom_mem -> quotearg_n_custom_mem_2090 and quotearg_custom_mem -> quotearg_n_custom_mem_3336 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337

same_behavior checking these two SStates:

SA || RAX := set_custom_quoting@()

SB || RAX := set_custom_quoting@()

Resulting values:
Value A:
E_app (F2 "set_custom_quoting" "") []
Value B:
E_app (F2 "set_custom_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_n_custom_mem(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
_2087 <--> quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329,quotearg_n_custom_mem_3333
label_181 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2085 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_180 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2083 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_179 <--> label_201
quotearg_n_custom_mem_2081 <--> quotearg_n_custom_mem_3327

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (9/87): "quotearg_custom"
--------
.dot code for CFG of text section quotearg_custom for Vanilla
diGraph quotearg_custom_Vanilla{
	quotearg_custom_0  [label="[quotearg_custom,quotearg_n_custom_mem_2090]"]
	quotearg_custom_1  [label="[quotearg_n_custom_mem_2091,quotearg_n_custom_mem_2091]"]
	quotearg_custom_2  [label="[quotearg_n_custom_mem_2092,quotearg_n_custom_mem_2095]"]
	quotearg_custom_3  [label="[quotearg_n_custom_mem_2096,quotearg_n_custom_mem_2096]"]
	quotearg_custom_4  [label="[quotearg_n_custom_mem_2097,quotearg_n_custom_mem_2102]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;
	quotearg_custom_2 -> quotearg_custom_3;
	quotearg_custom_3 -> quotearg_custom_4;

}
--------
--------
.dot code for CFG of text section quotearg_custom for Randomized
diGraph quotearg_custom_Randomized{
	quotearg_custom_0  [label="[quotearg_custom,quotearg_n_custom_mem_3336]"]
	quotearg_custom_1  [label="[quotearg_n_custom_mem_3337,quotearg_n_custom_mem_3337]"]
	quotearg_custom_2  [label="[quotearg_n_custom_mem_3338,quotearg_n_custom_mem_3341]"]
	quotearg_custom_3  [label="[quotearg_n_custom_mem_3342,quotearg_n_custom_mem_3342]"]
	quotearg_custom_4  [label="[quotearg_n_custom_mem_3343,quotearg_n_custom_mem_3348]"]

	quotearg_custom_0 -> quotearg_custom_1;
	quotearg_custom_1 -> quotearg_custom_2;
	quotearg_custom_2 -> quotearg_custom_3;
	quotearg_custom_3 -> quotearg_custom_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_custom"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_custom"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_custom -> quotearg_n_custom_mem_2090 and quotearg_custom -> quotearg_n_custom_mem_3336

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RDX, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := Reg: RDI, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_custom -> quotearg_n_custom_mem_2090 and quotearg_custom -> quotearg_n_custom_mem_3336 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337

same_behavior checking these two SStates:

SA || RAX := set_custom_quoting@()

SB || RAX := set_custom_quoting@()

Resulting values:
Value A:
E_app (F2 "set_custom_quoting" "") []
Value B:
E_app (F2 "set_custom_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_opti(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
ons" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_n_custom_mem_2087 <--> quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329,quotearg_n_custom_mem_3333
label_181 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2085 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_180 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2083 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_179 <--> label_201
quotearg_n_custom_mem_2081 <--> quotearg_n_custom_mem_3327

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (10/87): "quotearg_n_custom_mem"
--------
.dot code for CFG of text section quotearg_n_custom_mem for Vanilla
diGraph quotearg_n_custom_mem_Vanilla{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_2090]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_2091,quotearg_n_custom_mem_2091]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_2092,quotearg_n_custom_mem_2095]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_2096,quotearg_n_custom_mem_2096]"]
	quotearg_n_custom_mem_4  [label="[quotearg_n_custom_mem_2097,quotearg_n_custom_mem_2102]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;
	quotearg_n_custom_mem_2 -> quotearg_n_custom_mem_3;
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_custom_mem for Randomized
diGraph quotearg_n_custom_mem_Randomized{
	quotearg_n_custom_mem_0  [label="[quotearg_n_custom_mem,quotearg_n_custom_mem_3336]"]
	quotearg_n_custom_mem_1  [label="[quotearg_n_custom_mem_3337,quotearg_n_custom_mem_3337]"]
	quotearg_n_custom_mem_2  [label="[quotearg_n_custom_mem_3338,quotearg_n_custom_mem_3341]"]
	quotearg_n_custom_mem_3  [label="[quotearg_n_custom_mem_3342,quotearg_n_custom_mem_3342]"]
	quotearg_n_custom_mem_4  [label="[quotearg_n_custom_mem_3343,quotearg_n_custom_mem_3348]"]

	quotearg_n_custom_mem_0 -> quotearg_n_custom_mem_1;
	quotearg_n_custom_mem_1 -> quotearg_n_custom_mem_2;
	quotearg_n_custom_mem_2 -> quotearg_n_custom_mem_3;
	quotearg_n_custom_mem_3 -> quotearg_n_custom_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: R8, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom_mem"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: R8, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_n_custom_mem -> quotearg_n_custom_mem_2090 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3336

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: R8, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: R8, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg R8
Value B:
E_reg R8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem -> quotearg_n_custom_mem_2090 and quotearg_n_custom_mem -> quotearg_n_custom_mem_3336 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337

same_behavior checking these two SStates:

SA || RAX := set_custom_quoting@()

SB || RAX := set_custom_quoting@()

Resulting values:
Value A:
E_app (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(F2 "set_custom_quoting" "") []
Value B:
E_app (F2 "set_custom_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_n_custom_mem_2087 <--> quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329,quotearg_n_custom_mem_3333
label_181 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2085 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_180 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2083 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_179 <--> label_201
quotearg_n_custom_mem_2081 <--> quotearg_n_custom_mem_3327

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (11/87): "quotearg_n_custom"
--------
.dot code for CFG of text section quotearg_n_custom for Vanilla
diGraph quotearg_n_custom_Vanilla{
	quotearg_n_custom_0  [label="[quotearg_n_custom,quotearg_n_custom_mem_2090]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_mem_2091,quotearg_n_custom_mem_2091]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_mem_2092,quotearg_n_custom_mem_2095]"]
	quotearg_n_custom_3  [label="[quotearg_n_custom_mem_2096,quotearg_n_custom_mem_2096]"]
	quotearg_n_custom_4  [label="[quotearg_n_custom_mem_2097,quotearg_n_custom_mem_2102]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;
	quotearg_n_custom_2 -> quotearg_n_custom_3;
	quotearg_n_custom_3 -> quotearg_n_custom_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_custom for Randomized
diGraph quotearg_n_custom_Randomized{
	quotearg_n_custom_0  [label="[quotearg_n_custom,quotearg_n_custom_mem_3336]"]
	quotearg_n_custom_1  [label="[quotearg_n_custom_mem_3337,quotearg_n_custom_mem_3337]"]
	quotearg_n_custom_2  [label="[quotearg_n_custom_mem_3338,quotearg_n_custom_mem_3341]"]
	quotearg_n_custom_3  [label="[quotearg_n_custom_mem_3342,quotearg_n_custom_mem_3342]"]
	quotearg_n_custom_4  [label="[quotearg_n_custom_mem_3343,quotearg_n_custom_mem_3348]"]

	quotearg_n_custom_0 -> quotearg_n_custom_1;
	quotearg_n_custom_1 -> quotearg_n_custom_2;
	quotearg_n_custom_2 -> quotearg_n_custom_3;
	quotearg_n_custom_3 -> quotearg_n_custom_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_custom"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_custom"
node 0:
RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_custom_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_n_custom -> quotearg_n_custom_mem_2090 and quotearg_n_custom -> quotearg_n_custom_mem_3336

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_2081 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_2083 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_2085 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_2087 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], RBX := Reg: RCX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, R8 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_n_custom_mem_3327 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_n_custom_mem_3329 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_n_custom_mem_3331 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_n_custom_mem_3333 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2081" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3327" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2083" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2085" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3329" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3331" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_2087" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_custom_mem_3333" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom -> quotearg_n_custom_mem_2090 and quotearg_n_custom -> quotearg_n_custom_mem_3336 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337

same_behavior checking these two SStates:

SA || RAX := set_custom_quoting@()

SB || RAX := set_custom_quoting@()

Resulting values:
Value A:
E_app (F2 "set_custom_quoting" "") []
Value B:
E_app (F2 "set_custom_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2091 -> quotearg_n_custom_mem_2091 and quotearg_n_custom_mem_3337 -> quotearg_n_custom_mem_3337 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2092 -> quotearg_n_custom_mem_2095 and quotearg_n_custom_mem_3338 -> quotearg_n_custom_mem_3341 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2096 -> quotearg_n_custom_mem_2096 and quotearg_n_custom_mem_3342 -> quotearg_n_custom_mem_3342 have been verified to do the same.

same_behavior for the nodes: quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_custom_mem_2097 -> quotearg_n_custom_mem_2102 and quotearg_n_custom_mem_3343 -> quotearg_n_custom_mem_3348 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_n_custom_mem_2087 <--> quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329,quotearg_n_custom_mem_3333
label_181 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2085 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_180 <--> default_quoting_options,label_203,label_202
quotearg_n_custom_mem_2083 <--> quotearg_n_custom_mem_3333,quotearg_n_custom_mem_3331,quotearg_n_custom_mem_3329
label_179 <--> label_201
quotearg_n_custom_mem_2081 <--> quotearg_n_custom_mem_3327

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (12/87): "quotearg_n_style_colon"
--------
.dot code for CFG of text section quotearg_n_style_colon for Vanilla
diGraph quotearg_n_style_colon_Vanilla{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon,quotearg_n_style_colon_2039]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_2040,quotearg_n_style_colon_2040]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_2041,quotearg_n_style_colon_2043]"]
	quotearg_n_style_colon_3  [label="[quotearg_n_style_colon_2044,quotearg_n_style_colon_2044]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon_2045,quotearg_n_style_colon_2048]"]
	quotearg_n_style_colon_5  [label="[quotearg_n_style_colon_2049,quotearg_n_style_colon_2049]"]
	quotearg_n_style_colon_6  [label="[quotearg_n_style_colon_2050,quotearg_n_style_colon_2054]"]

	quotearg_n_style_colon_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;
	quotearg_n_style_colon_2 -> quotearg_n_style_colon_3;
	quotearg_n_style_colon_3 -> quotearg_n_style_colon_4;
	quotearg_n_style_colon_4 -> quotearg_n_style_colon_5;
	quotearg_n_style_colon_5 -> quotearg_n_style_colon_6;

}
--------
--------
.dot code for CFG of text section quotearg_n_style_colon for Randomized
diGraph quotearg_n_style_colon_Randomized{
	quotearg_n_style_colon_0  [label="[quotearg_n_style_colon,quotearg_n_style_colon_4462]"]
	quotearg_n_style_colon_1  [label="[quotearg_n_style_colon_4463,quotearg_n_style_colon_4463]"]
	quotearg_n_style_colon_2  [label="[quotearg_n_style_colon_4464,quotearg_n_style_colon_4466]"]
	quotearg_n_style_colon_3  [label="[quotearg_n_style_colon_4467,quotearg_n_style_colon_4467]"]
	quotearg_n_style_colon_4  [label="[quotearg_n_style_colon_4468,quotearg_n_style_colon_4471]"]
	quotearg_n_style_colon_5  [label="[quotearg_n_style_colon_4472,quotearg_n_style_colon_4472]"]
	quotearg_n_style_colon_6  [label="[quotearg_n_style_colon_4473,quotearg_n_style_colon_4477]"]

	quotearg_n_style_colon(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(5,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(6,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(5,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(6,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
_0 -> quotearg_n_style_colon_1;
	quotearg_n_style_colon_1 -> quotearg_n_style_colon_2;
	quotearg_n_style_colon_2 -> quotearg_n_style_colon_3;
	quotearg_n_style_colon_3 -> quotearg_n_style_colon_4;
	quotearg_n_style_colon_4 -> quotearg_n_style_colon_5;
	quotearg_n_style_colon_5 -> quotearg_n_style_colon_6;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_colon"
node 0:
RBX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), R14 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 58
node 3:
RAX := set_char_quoting@()
node 4:
RCX := Reg: RBX, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: R14
node 5:
RAX := quotearg_n_options@()
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_colon"
node 0:
RBX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), R14 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 58
node 3:
RAX := set_char_quoting@()
node 4:
RCX := Reg: RBX, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: R14
node 5:
RAX := quotearg_n_options@()
node 6:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_n_style_colon -> quotearg_n_style_colon_2039 and quotearg_n_style_colon -> quotearg_n_style_colon_4462

same_behavior checking these two SStates:

SA || RBX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), R14 := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := (Var: RSP0 - Value: 80), RDI := (Var: RSP0 - Value: 80), R14 := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon -> quotearg_n_style_colon_2039 and quotearg_n_style_colon -> quotearg_n_style_colon_4462 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2040 -> quotearg_n_style_colon_2040 and quotearg_n_style_colon_4463 -> quotearg_n_style_colon_4463

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2040 -> quotearg_n_style_colon_2040 and quotearg_n_style_colon_4463 -> quotearg_n_style_colon_4463 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2041 -> quotearg_n_style_colon_2043 and quotearg_n_style_colon_4464 -> quotearg_n_style_colon_4466

same_behavior checking these two SStates:

SA || RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 58

SB || RDX := Value: 1, RDI := Reg: RBX, RSI := Value: 58

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2041 -> quotearg_n_style_colon_2043 and quotearg_n_style_colon_4464 -> quotearg_n_style_colon_4466 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2044 -> quotearg_n_style_colon_2044 and quotearg_n_style_colon_4467 -> quotearg_n_style_colon_4467

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2044 -> quotearg_n_style_colon_2044 and quotearg_n_style_colon_4467 -> quotearg_n_style_colon_4467 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2045 -> quotearg_n_style_colon_2048 and quotearg_n_style_colon_4468 -> quotearg_n_style_colon_4471

same_behavior checking these two SStates:

SA || RCX := Reg: RBX, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: R14

SB || RCX := Reg: RBX, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: R14

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2045 -> quotearg_n_style_colon_2048 and quotearg_n_style_colon_4468 -> quotearg_n_style_colon_4471 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_colon_2049 -> quotearg_n_style_colon_2049 and quotearg_n_style_colon_4472 -> quotearg_n_style_colon_4472

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2049 -> quotearg_n_style_colon_2049 and quotearg_n_style_colon_4472 -> quotearg_n_style_colon_4472 have been verified to do the same.

same_behavior for the nodes: quotearg_n(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
_style_colon_2050 -> quotearg_n_style_colon_2054 and quotearg_n_style_colon_4473 -> quotearg_n_style_colon_4477

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_colon_2050 -> quotearg_n_style_colon_2054 and quotearg_n_style_colon_4473 -> quotearg_n_style_colon_4477 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)

Succesful check!
Considering text section (13/87): "quotearg_colon_mem"
--------
.dot code for CFG of text section quotearg_colon_mem for Vanilla
diGraph quotearg_colon_mem_Vanilla{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_char_mem_1980]"]
	quotearg_colon_mem_1  [label="[quotearg_char_mem_1981,quotearg_char_mem_1981]"]
	quotearg_colon_mem_2  [label="[quotearg_char_mem_1982,quotearg_char_mem_1985]"]
	quotearg_colon_mem_3  [label="[quotearg_char_mem_1986,quotearg_char_mem_1986]"]
	quotearg_colon_mem_4  [label="[quotearg_char_mem_1987,quotearg_char_mem_1991]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;
	quotearg_colon_mem_2 -> quotearg_colon_mem_3;
	quotearg_colon_mem_3 -> quotearg_colon_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_colon_mem for Randomized
diGraph quotearg_colon_mem_Randomized{
	quotearg_colon_mem_0  [label="[quotearg_colon_mem,quotearg_char_mem_2741]"]
	quotearg_colon_mem_1  [label="[quotearg_char_mem_2742,quotearg_char_mem_2742]"]
	quotearg_colon_mem_2  [label="[quotearg_char_mem_2743,quotearg_char_mem_2746]"]
	quotearg_colon_mem_3  [label="[quotearg_char_mem_2747,quotearg_char_mem_2747]"]
	quotearg_colon_mem_4  [label="[quotearg_char_mem_2748,quotearg_char_mem_2752]"]

	quotearg_colon_mem_0 -> quotearg_colon_mem_1;
	quotearg_colon_mem_1 -> quotearg_colon_mem_2;
	quotearg_colon_mem_2 -> quotearg_colon_mem_3;
	quotearg_colon_mem_3 -> quotearg_colon_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon_mem"
node 0:
RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon_mem"
node 0:
RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_colon_mem -> quotearg_char_mem_1980 and quotearg_colon_mem -> quotearg_char_mem_2741

same_behavior checking these two SStates:

SA || RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon_mem -> quotearg_char_mem_1980 and quotearg_colon_mem -> quotearg_char_mem_2741 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_char_mem_1975 <--> quotearg_char_mem_2734,quotearg_char_mem_2732,quotearg_char_mem_2736
label_181 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1973 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_180 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1971 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_179 <--> label_201
quotearg_char_mem_1969 <--> quotearg_char_mem_2730

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (14/87): "quotearg_colon"
--------
.dot code for CFG of text section quotearg_colon for Vanilla
diGraph quotearg_colon_Vanilla{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_char_mem_1980]"]
	quotearg_colon_1  [label="[quotearg_char_mem_1981,quotearg_char_mem_1981]"]
	quotearg_colon_2  [label="[quotearg_char_mem_1982,quotearg_char_mem_1985]"]
	quotearg_colon_3  [label="[quotearg_char_mem_1986,quotearg_char_mem_1986]"]
	quotearg_colon_4  [label="[quotearg_char_mem_1987,quotearg_char_mem_1991]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;
	quotearg_colon_2 -> quotearg_colon_3;
	quotearg_colon_3 -> quotearg_colon_4;

}
--------
--------
.dot code for CFG of text section quotearg_colon for Randomized
diGraph quotearg_colon_Randomized{
	quotearg_colon_0  [label="[quotearg_colon,quotearg_char_mem_2741]"]
	quotearg_colon_1  [label="[quotearg_char_mem_2742,quotearg_char_mem_2742]"]
	quotearg_colon_2  [label="[quotearg_char_mem_2743,quotearg_char_mem_2746]"]
	quotearg_colon_3  [label="[quotearg_char_mem_2747,quotearg_char_mem_2747]"]
	quotearg_colon_4  [label="[quotearg_char_mem_2748,quotearg_char_mem_2752]"]

	quotearg_colon_0 -> quotearg_colon_1;
	quotearg_colon_1 -> quotearg_colon_2;
	quotearg_colon_2 -> quotearg_colon_3;
	quotearg_colon_3 -> quotearg_colon_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_colon"
node 0:
RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_colon"
node 0:
RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_colon -> quotearg_char_mem_1980 and quotearg_colon -> quotearg_char_mem_2741

same_behavior checking these two SStates:

SA || RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Value: 58, RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := Value: 58, R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 58 32
Value B:
E_val 58 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_colon -> quotearg_char_mem_1980 and quotearg_colon -> quotearg_char_mem_2741 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1982 -> quotearg_char_mem_1985 an(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
d quotearg_char_mem_2743 -> quotearg_char_mem_2746 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_char_mem_1975 <--> quotearg_char_mem_2734,quotearg_char_mem_2732,quotearg_char_mem_2736
label_181 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1973 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_180 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1971 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_179 <--> label_201
quotearg_char_mem_1969 <--> quotearg_char_mem_2730

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (15/87): "quotearg_char"
--------
.dot code for CFG of text section quotearg_char for Vanilla
diGraph quotearg_char_Vanilla{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_mem_1980]"]
	quotearg_char_1  [label="[quotearg_char_mem_1981,quotearg_char_mem_1981]"]
	quotearg_char_2  [label="[quotearg_char_mem_1982,quotearg_char_mem_1985]"]
	quotearg_char_3  [label="[quotearg_char_mem_1986,quotearg_char_mem_1986]"]
	quotearg_char_4  [label="[quotearg_char_mem_1987,quotearg_char_mem_1991]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;
	quotearg_char_2 -> quotearg_char_3;
	quotearg_char_3 -> quotearg_char_4;

}
--------
--------
.dot code for CFG of text section quotearg_char for Randomized
diGraph quotearg_char_Randomized{
	quotearg_char_0  [label="[quotearg_char,quotearg_char_mem_2741]"]
	quotearg_char_1  [label="[quotearg_char_mem_2742,quotearg_char_mem_2742]"]
	quotearg_char_2  [label="[quotearg_char_mem_2743,quotearg_char_mem_2746]"]
	quotearg_char_3  [label="[quotearg_char_mem_2747,quotearg_char_mem_2747]"]
	quotearg_char_4  [label="[quotearg_char_mem_2748,quotearg_char_mem_2752]"]

	quotearg_char_0 -> quotearg_char_1;
	quotearg_char_1 -> quotearg_char_2;
	quotearg_char_2 -> quotearg_char_3;
	quotearg_char_3 -> quotearg_char_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char"
node 0:
RAX := TakeBits: <31,0>(Reg: RSI), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char"
node 0:
RAX := TakeBits: <31,0>(Reg: RSI), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_char -> quotearg_char_mem_1980 and quotearg_char -> quotearg_char_mem_2741

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>(Reg: RSI), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := TakeBits: <31,0>(Reg: RSI), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RSI), R15 := (Var: RSP0 - Value: 88), R14 := Value: 18446744073709551615, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_char -> quotearg_char_mem_1980 and quotearg_char -> quotearg_char_mem_2741 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])

E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_char_mem_1975 <--> quotearg_char_mem_2734,quotearg_char_mem_2732,quotearg_char_mem_2736
label_181 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1973 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_180 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1971 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_179 <--> label_201
quotearg_char_mem_1969 <--> quotearg_char_mem_2730

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (16/87): "quotearg_char_mem"
--------
.dot code for CFG of text section quotearg_char_mem for Vanilla
diGraph quotearg_char_mem_Vanilla{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_1980]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_1981,quotearg_char_mem_1981]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_1982,quotearg_char_mem_1985]"]
	quotearg_char_mem_3  [label="[quotearg_char_mem_1986,quotearg_char_mem_1986]"]
	quotearg_char_mem_4  [label="[quotearg_char_mem_1987,quotearg_char_mem_1991]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;
	quotearg_char_mem_2 -> quotearg_char_mem_3;
	quotearg_char_mem_3 -> quotearg_char_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_char_mem for Randomized
diGraph quotearg_char_mem_Randomized{
	quotearg_char_mem_0  [label="[quotearg_char_mem,quotearg_char_mem_2741]"]
	quotearg_char_mem_1  [label="[quotearg_char_mem_2742,quotearg_char_mem_2742]"]
	quotearg_char_mem_2  [label="[quotearg_char_mem_2743,quotearg_char_mem_2746]"]
	quotearg_char_mem_3  [label="[quotearg_char_mem_2747,quotearg_char_mem_2747]"]
	quotearg_char_mem_4  [label="[quotearg_char_mem_2748,quotearg_char_mem_2752]"]

	quotearg_char_mem_0 -> quotearg_char_mem_1;
	quotearg_char_mem_1 -> quotearg_char_mem_2;
	quotearg_char_mem_2 -> quotearg_char_mem_3;
	quotearg_char_mem_3 -> quotearg_char_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_char_mem"
node 0:
RAX := TakeBits: <31,0>(Reg: RDX), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDX), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_char_mem"
node 0:
RAX := TakeBits: <31,0>(Reg: RDX), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDX), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := set_char_quoting@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_char_mem -> quotearg_char_mem_1980 and quotearg_char_mem -> quotearg_char_mem_2741

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>(Reg: RDX), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDX), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_1969 + Var: label_179),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_1971 + Var: label_180),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_1973 + Var: label_181),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_1975 + Var: default_quoting_options),16]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := TakeBits: <31,0>(Reg: RDX), RBX := Reg: RDI, RCX := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], RDX := Value: 1, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDX), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RSI, XMM0 := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: quotearg_char_mem_2730 + Var: label_201),8], [(Var: RSP0 - Value: 56),16] := Dereference: [(Var: quotearg_char_mem_2732 + Var: label_202),16], [(Var: RSP0 - Value: 72),16] := Dereference: [(Var: quotearg_char_mem_2734 + Var: label_203),16], [(Var: RSP0 - Value: 88),16] := Dereference: [(Var: quotearg_char_mem_2736 + Var: default_quoting_options),16]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1969" 64,E_var "label_179" 64]) 8
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2730" 64,E_var "label_201" 64]) 8
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1971" 64,E_var "label_180" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1973" 64,E_var "label_181" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2732" 64,E_var "label_202" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RS(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
P0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2734" 64,E_var "label_203" 64]) 16
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_1975" 64,E_var "default_quoting_options" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_char_mem_2736" 64,E_var "default_quoting_options" 64]) 16
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem -> quotearg_char_mem_1980 and quotearg_char_mem -> quotearg_char_mem_2741 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742

same_behavior checking these two SStates:

SA || RAX := set_char_quoting@()

SB || RAX := set_char_quoting@()

Resulting values:
Value A:
E_app (F2 "set_char_quoting" "") []
Value B:
E_app (F2 "set_char_quoting" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1981 -> quotearg_char_mem_1981 and quotearg_char_mem_2742 -> quotearg_char_mem_2742 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1982 -> quotearg_char_mem_1985 and quotearg_char_mem_2743 -> quotearg_char_mem_2746 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1986 -> quotearg_char_mem_1986 and quotearg_char_mem_2747 -> quotearg_char_mem_2747 have been verified to do the same.

same_behavior for the nodes: quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_char_mem_1987 -> quotearg_char_mem_1991 and quotearg_char_mem_2748 -> quotearg_char_mem_2752 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> label_203,label_202,default_quoting_options
quotearg_char_mem_1975 <--> quotearg_char_mem_2734,quotearg_char_mem_2732,quotearg_char_mem_2736
label_181 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1973 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_180 <--> default_quoting_options,label_203,label_202
quotearg_char_mem_1971 <--> quotearg_char_mem_2736,quotearg_char_mem_2734,quotearg_char_mem_2732
label_179 <--> label_201
quotearg_char_mem_1969 <--> quotearg_char_mem_2730

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56),(Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 88),(Var: RSP0 - Value: 72),(Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (17/87): "quotearg_style_mem"
--------
.dot code for CFG of text section quotearg_style_mem for Vanilla
diGraph quotearg_style_mem_Vanilla{
	quotearg_style_mem_0  [label="[quotearg_style_mem,quotearg_n_style_mem_1911]"]
	quotearg_style_mem_1  [label="[quotearg_n_style_mem_1912,quotearg_n_style_mem_1912]"]
	quotearg_style_mem_2  [label="[quotearg_n_style_mem_1913,quotearg_n_style_mem_1916]"]
	quotearg_style_mem_3  [label="[quotearg_n_style_mem_1917,quotearg_n_style_mem_1917]"]
	quotearg_style_mem_4  [label="[quotearg_n_style_mem_1918,quotearg_n_style_mem_1923]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;
	quotearg_style_mem_2 -> quotearg_style_mem_3;
	quotearg_style_mem_3 -> quotearg_style_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_style_mem for Randomized
diGraph quotearg_style_mem_Randomized{
	quotearg_style_mem_0  [label="[quotearg_style_mem,quotearg_n_style_mem_3465]"]
	quotearg_style_mem_1  [label="[quotearg_n_style_mem_3466,quotearg_n_style_mem_3466]"]
	quotearg_style_mem_2  [label="[quotearg_n_style_mem_3467,quotearg_n_style_mem_3470]"]
	quotearg_style_mem_3  [label="[quotearg_n_style_mem_3471,quotearg_n_style_mem_3471]"]
	quotearg_style_mem_4  [label="[quotearg_n_style_mem_3472,quotearg_n_style_mem_3477]"]

	quotearg_style_mem_0 -> quotearg_style_mem_1;
	quotearg_style_mem_1 -> quotearg_style_mem_2;
	quotearg_style_mem_2 -> quotearg_style_mem_3;
	quotearg_style_mem_3 -> quotearg_style_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style_mem"
node 0:
RAX := Reg: RDX, RBX := Reg: RSI, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDI), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style_mem"
node 0:
RAX := Reg: RDX, RBX := Reg: RSI, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDI), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_style_mem -> quotearg_n_style_mem_1911 and quotearg_style_mem -> quotearg_n_style_mem_3465

same_behavior checking these two SStates:

SA || RAX := Reg: RDX, RBX := Reg: RSI, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDI), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RDX, RBX := Reg: RSI, RCX := Reg: RDX, RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 88), RSI := TakeBits: <31,0>(Reg: RDI), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style_mem -> quotearg_n_style_mem_1911 and quotearg_style_mem -> quotearg_n_style_mem_3465 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1912 -> quotearg_n_style_mem_1912 and quotearg_n_style_mem_3466 -> quotearg_n_style_mem_3466

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1912 -> quotearg_n_style_mem_1912 and quotearg_n_style_mem_3466 -> quotearg_n_style_mem_3466 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1913 -> quotearg_n_style_mem_1916 and quotearg_n_style_mem_3467 -> quotearg_n_style_mem_3470

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := Value: 0, RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1913 -> quotearg_n_style_mem_1916 and quotearg_n_style_mem_3467 -> quotearg_n_style_mem_3470 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1917 -> quotearg_n_style_mem_1917 and quotearg_n_style_mem_3471 -> quotearg_n_style_mem_3471

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1917 -> quotearg_n_style_mem_1917 and quotearg_n_style_mem_3471 -> quotearg_n_style_mem_3471 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1918 -> quotearg_n_style_mem_1923 and quotearg_n_style_mem_3472 -> quotearg_n_style_mem_3477

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1918 -> quotearg_n_style_mem_1923 and quotearg_n_style_mem_3472 -> quotearg_n_style_mem_3477 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)

Succesful check!
Considering text section (18/87): "quotearg_style"
--------
.dot code for CFG of text section quotearg_style for Vanilla
diGraph quotearg_style_Vanilla{
	quotearg_style_0  [label="[quotearg_style,quotearg_n_style_1852]"]
	(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Value: 0)])
quotearg_style_1  [label="[quotearg_n_style_1853,quotearg_n_style_1853]"]
	quotearg_style_2  [label="[quotearg_n_style_1854,quotearg_n_style_1857]"]
	quotearg_style_3  [label="[quotearg_n_style_1858,quotearg_n_style_1858]"]
	quotearg_style_4  [label="[quotearg_n_style_1859,quotearg_n_style_1863]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;
	quotearg_style_2 -> quotearg_style_3;
	quotearg_style_3 -> quotearg_style_4;

}
--------
--------
.dot code for CFG of text section quotearg_style for Randomized
diGraph quotearg_style_Randomized{
	quotearg_style_0  [label="[quotearg_style,quotearg_n_style_232]"]
	quotearg_style_1  [label="[quotearg_n_style_233,quotearg_n_style_233]"]
	quotearg_style_2  [label="[quotearg_n_style_234,quotearg_n_style_237]"]
	quotearg_style_3  [label="[quotearg_n_style_238,quotearg_n_style_238]"]
	quotearg_style_4  [label="[quotearg_n_style_239,quotearg_n_style_243]"]

	quotearg_style_0 -> quotearg_style_1;
	quotearg_style_1 -> quotearg_style_2;
	quotearg_style_2 -> quotearg_style_3;
	quotearg_style_3 -> quotearg_style_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_style"
node 0:
RAX := Reg: RSI, RBX := Reg: RSI, RCX := TakeBits: <31,0>(Reg: RDI), RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RDI), R14 := (Var: RSP0 - Value: 80)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_style"
node 0:
RAX := Reg: RSI, RBX := Reg: RSI, RCX := TakeBits: <31,0>(Reg: RDI), RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RDI), R14 := (Var: RSP0 - Value: 80)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_style -> quotearg_n_style_1852 and quotearg_style -> quotearg_n_style_232

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RBX := Reg: RSI, RCX := TakeBits: <31,0>(Reg: RDI), RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RDI), R14 := (Var: RSP0 - Value: 80)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RSI, RBX := Reg: RSI, RCX := TakeBits: <31,0>(Reg: RDI), RDX := Reg: RSI, RDI := (Var: RSP0 - Value: 80), RSI := TakeBits: <31,0>(Reg: RDI), R14 := (Var: RSP0 - Value: 80)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_style -> quotearg_n_style_1852 and quotearg_style -> quotearg_n_style_232 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1853 -> quotearg_n_style_1853 and quotearg_n_style_233 -> quotearg_n_style_233

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1853 -> quotearg_n_style_1853 and quotearg_n_style_233 -> quotearg_n_style_233 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1854 -> quotearg_n_style_1857 and quotearg_n_style_234 -> quotearg_n_style_237

same_behavior checking these two SStates:

SA || RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RBX

SB || RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RBX

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1854 -> quotearg_n_style_1857 and quotearg_n_style_234 -> quotearg_n_style_237 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1858 -> quotearg_n_style_1858 and quotearg_n_style_238 -> quotearg_n_style_238

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1858 -> quotearg_n_style_1858 and quotearg_n_style_238 -> quotearg_n_style_238 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1859 -> quotearg_n_style_1863 and quotearg_n_style_239 -> quotearg_n_style_243

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24),(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
 OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1859 -> quotearg_n_style_1863 and quotearg_n_style_239 -> quotearg_n_style_243 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)

Succesful check!
Considering text section (19/87): "quotearg_n_style_mem"
--------
.dot code for CFG of text section quotearg_n_style_mem for Vanilla
diGraph quotearg_n_style_mem_Vanilla{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem,quotearg_n_style_mem_1911]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_1912,quotearg_n_style_mem_1912]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_1913,quotearg_n_style_mem_1916]"]
	quotearg_n_style_mem_3  [label="[quotearg_n_style_mem_1917,quotearg_n_style_mem_1917]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem_1918,quotearg_n_style_mem_1923]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;
	quotearg_n_style_mem_2 -> quotearg_n_style_mem_3;
	quotearg_n_style_mem_3 -> quotearg_n_style_mem_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_style_mem for Randomized
diGraph quotearg_n_style_mem_Randomized{
	quotearg_n_style_mem_0  [label="[quotearg_n_style_mem,quotearg_n_style_mem_3465]"]
	quotearg_n_style_mem_1  [label="[quotearg_n_style_mem_3466,quotearg_n_style_mem_3466]"]
	quotearg_n_style_mem_2  [label="[quotearg_n_style_mem_3467,quotearg_n_style_mem_3470]"]
	quotearg_n_style_mem_3  [label="[quotearg_n_style_mem_3471,quotearg_n_style_mem_3471]"]
	quotearg_n_style_mem_4  [label="[quotearg_n_style_mem_3472,quotearg_n_style_mem_3477]"]

	quotearg_n_style_mem_0 -> quotearg_n_style_mem_1;
	quotearg_n_style_mem_1 -> quotearg_n_style_mem_2;
	quotearg_n_style_mem_2 -> quotearg_n_style_mem_3;
	quotearg_n_style_mem_3 -> quotearg_n_style_mem_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style_mem"
node 0:
RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style_mem"
node 0:
RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
--------

same_behavior for the nodes: quotearg_n_style_mem -> quotearg_n_style_mem_1911 and quotearg_n_style_mem -> quotearg_n_style_mem_3465

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 88), R15 := (Var: RSP0 - Value: 88), R14 := Reg: RCX
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem -> quotearg_n_style_mem_1911 and quotearg_n_style_mem -> quotearg_n_style_mem_3465 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1912 -> quotearg_n_style_mem_1912 and quotearg_n_style_mem_3466 -> quotearg_n_style_mem_3466

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1912 -> quotearg_n_style_mem_1912 and quotearg_n_style_mem_3466 -> quotearg_n_style_mem_3466 have been verified to do the same.

same(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(2,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == TakeBits: <31,0>(Reg: RDI))])
_behavior for the nodes: quotearg_n_style_mem_1913 -> quotearg_n_style_mem_1916 and quotearg_n_style_mem_3467 -> quotearg_n_style_mem_3470

same_behavior checking these two SStates:

SA || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

SB || RCX := Reg: R15, RDX := Reg: R14, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1913 -> quotearg_n_style_mem_1916 and quotearg_n_style_mem_3467 -> quotearg_n_style_mem_3470 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1917 -> quotearg_n_style_mem_1917 and quotearg_n_style_mem_3471 -> quotearg_n_style_mem_3471

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1917 -> quotearg_n_style_mem_1917 and quotearg_n_style_mem_3471 -> quotearg_n_style_mem_3471 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_mem_1918 -> quotearg_n_style_mem_1923 and quotearg_n_style_mem_3472 -> quotearg_n_style_mem_3477

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_mem_1918 -> quotearg_n_style_mem_1923 and quotearg_n_style_mem_3472 -> quotearg_n_style_mem_3477 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)

Succesful check!
Considering text section (20/87): "quotearg_n_style"
--------
.dot code for CFG of text section quotearg_n_style for Vanilla
diGraph quotearg_n_style_Vanilla{
	quotearg_n_style_0  [label="[quotearg_n_style,quotearg_n_style_1852]"]
	quotearg_n_style_1  [label="[quotearg_n_style_1853,quotearg_n_style_1853]"]
	quotearg_n_style_2  [label="[quotearg_n_style_1854,quotearg_n_style_1857]"]
	quotearg_n_style_3  [label="[quotearg_n_style_1858,quotearg_n_style_1858]"]
	quotearg_n_style_4  [label="[quotearg_n_style_1859,quotearg_n_style_1863]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;
	quotearg_n_style_2 -> quotearg_n_style_3;
	quotearg_n_style_3 -> quotearg_n_style_4;

}
--------
--------
.dot code for CFG of text section quotearg_n_style for Randomized
diGraph quotearg_n_style_Randomized{
	quotearg_n_style_0  [label="[quotearg_n_style,quotearg_n_style_232]"]
	quotearg_n_style_1  [label="[quotearg_n_style_233,quotearg_n_style_233]"]
	quotearg_n_style_2  [label="[quotearg_n_style_234,quotearg_n_style_237]"]
	quotearg_n_style_3  [label="[quotearg_n_style_238,quotearg_n_style_238]"]
	quotearg_n_style_4  [label="[quotearg_n_style_239,quotearg_n_style_243]"]

	quotearg_n_style_0 -> quotearg_n_style_1;
	quotearg_n_style_1 -> quotearg_n_style_2;
	quotearg_n_style_2 -> quotearg_n_style_3;
	quotearg_n_style_3 -> quotearg_n_style_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_style"
node 0:
RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 80), R14 := (Var: RSP0 - Value: 80)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_style"
node 0:
RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 80), R14 := (Var: RSP0 - Value: 80)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 1:
RAX := quoting_options_from_style@()
node 2:
RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX
node 3:
RAX := quotearg_n_options@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)
--------

same_behavior for the nodes: quotearg_n_style -> quotearg_n_style_1852 and quotearg_n_style -> quotearg_n_style_232

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 80), R14 := (Var: RSP0 - Value: 80)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Reg: RDX, RDI := (Var: RSP0 - Value: 80), R14 := (Var: RSP0 - Value: 80)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style -> quotearg_n_style_1852 and quotearg_n_style -> quotearg_n_style_232 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1853 -> quotearg_n_style_1853 and quotearg_n_style_233 -> quotearg_n_style_233

same_behavior checking these two SStates:

SA || RAX := quoting_options_from_style@()

SB || RAX := quoting_options_from_style@()

Resulting values:
Value A:
E_app (F2 "quoting_options_from_style" "") []
Value B:
E_app (F2 "quoting_options_from_style" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1853 -> quotearg_n_style_1853 and quotearg_n_style_233 -> quotearg_n_style_233 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1854 -> quotearg_n_style_1857 and quotearg_n_style_234 -> quotearg_n_style_237

same_behavior checking these two SStates:

SA || RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

SB || RCX := Reg: R14, RDX := Value: 18446744073709551615, RDI := TakeBits: <31,0>(Reg: RDI), RSI := Reg: RBX

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1854 -> quotearg_n_style_1857 and quotearg_n_style_234 -> quotearg_n_style_237 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1858 -> quotearg_n_style_1858 and quotearg_n_style_238 -> quotearg_n_style_238

same_behavior checking these two SStates:

SA || RAX := quotearg_n_options@()

SB || RAX := quotearg_n_options@()

Resulting values:
Value A:
E_app (F2 "quotearg_n_options" "") []
Value B:
E_app (F2 "quotearg_n_options" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1858 -> quotearg_n_style_1858 and quotearg_n_style_238 -> quotearg_n_style_238 have been verified to do the same.

same_behavior for the nodes: quotearg_n_style_1859 -> quotearg_n_style_1863 and quotearg_n_style_239 -> quotearg_n_style_243

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 24), CF := (Var: RSP0 - Value: 24), SF := (Var: RSP0 - Value: 24), OF := (Var: RSP0 - Value: 24), PF := (Var: RSP0 - Value: 24)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_style_1859 -> quotearg_n_style_1863 and quotearg_n_style_239 -> quotearg_n_style_243 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)

Succesful check!
Considering text section (21/87): "quotearg_mem"
--------
.dot code for CFG of text section quotearg_mem for Vanilla
diGraph quotearg_mem_Vanilla{
	quotearg_mem_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quotearg_mem_1  [label="[.label_175,quotearg_n_options_1724]"]
	quotearg_mem_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quotearg_mem_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quotearg_mem_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quotearg_mem_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quotearg_mem_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quotearg_mem_7  [label="[.label_172,.label_172]"]
	quotearg_mem_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quotearg_mem_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quotearg_mem_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quotearg_mem_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quotearg_mem_12  [label="[.label_171,.label_171]"]
	quotearg_mem_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quotearg_mem_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quotearg_mem_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quotearg_mem_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quotearg_mem_17  [label="[.label_176,quotearg_n_options_1797]"]
	quotearg_mem_18  [label="[.label_173,quotearg_n_options_1765]"]
	quotearg_mem_19  [label="[.label_177,quotearg_n_options_1748]"]
	quotearg_mem_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quotearg_mem_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quotearg_mem_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quotearg_mem_23  [label="[.label_174,.label_174]"]
	quotearg_mem_24  [label="[quotearg_mem,quotearg_n_options_1685]"]
	quotearg_mem_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quotearg_mem_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quotearg_mem_0 -> quotearg_mem_1;
	quotearg_mem_1 -> quotearg_mem_2;
	quotearg_mem_2 -> quotearg_mem_3;
	quotearg_mem_3 -> quotearg_mem_19;
	quotearg_mem_4 -> quotearg_mem_5;
	quotearg_mem_5 -> quotearg_mem_6;
	quotearg_mem_6 -> quotearg_mem_1 [label="!ZF"];
	quotearg_mem_6 -> quotearg_mem_0 [label="ZF"];

	quotearg_mem_8 -> quotearg_mem_7 [label="ZF"];
	quotearg_mem_8 -> quotearg_mem_4 [label="!ZF"];
	quotearg_mem_9 -> quotearg_mem_17;
	quotearg_mem_10 -> quotearg_mem_11;
	quotearg_mem_11 -> quotearg_mem_12;
	quotearg_mem_12 -> quotearg_mem_13;
	quotearg_mem_13 -> quotearg_mem_14;
	quotearg_mem_14 -> quotearg_mem_15;
	quotearg_mem_15 -> quotearg_mem_16;
	quotearg_mem_16 -> quotearg_mem_17;

	quotearg_mem_18 -> quotearg_mem_12 [label="ZF"];
	quotearg_mem_18 -> quotearg_mem_10 [label="!ZF"];
	quotearg_mem_19 -> quotearg_mem_20;
	quotearg_mem_20 -> quotearg_mem_21;
	quotearg_mem_21 -> quotearg_mem_18 [label="CF || ZF"];
	quotearg_mem_21 -> quotearg_mem_9 [label="!CF && !ZF"];
	quotearg_mem_22 -> quotearg_mem_19 [label="!ZF && SF == OF"];
	quotearg_mem_22 -> quotearg_mem_8 [label="ZF || SF != OF"];

	quotearg_mem_24 -> quotearg_mem_25;
	quotearg_mem_25 -> quotearg_mem_26;
	quotearg_mem_26 -> quotearg_mem_23 [label="SF"];
	quotearg_mem_26 -> quotearg_mem_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_mem for Randomized
diGraph quotearg_mem_Randomized{
	quotearg_mem_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quotearg_mem_1  [label="[.label_142,quotearg_n_options_1680]"]
	quotearg_mem_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quotearg_mem_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quotearg_mem_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quotearg_mem_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quotearg_mem_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quotearg_mem_7  [label="[.label_139,.label_139]"]
	quotearg_(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
mem_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quotearg_mem_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quotearg_mem_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quotearg_mem_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quotearg_mem_12  [label="[.label_138,.label_138]"]
	quotearg_mem_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quotearg_mem_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quotearg_mem_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quotearg_mem_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quotearg_mem_17  [label="[.label_143,quotearg_n_options_1753]"]
	quotearg_mem_18  [label="[.label_140,quotearg_n_options_1721]"]
	quotearg_mem_19  [label="[.label_144,quotearg_n_options_1704]"]
	quotearg_mem_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quotearg_mem_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quotearg_mem_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quotearg_mem_23  [label="[.label_141,.label_141]"]
	quotearg_mem_24  [label="[quotearg_mem,quotearg_n_options_1641]"]
	quotearg_mem_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quotearg_mem_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quotearg_mem_0 -> quotearg_mem_1;
	quotearg_mem_1 -> quotearg_mem_2;
	quotearg_mem_2 -> quotearg_mem_3;
	quotearg_mem_3 -> quotearg_mem_19;
	quotearg_mem_4 -> quotearg_mem_5;
	quotearg_mem_5 -> quotearg_mem_6;
	quotearg_mem_6 -> quotearg_mem_1 [label="!ZF"];
	quotearg_mem_6 -> quotearg_mem_0 [label="ZF"];

	quotearg_mem_8 -> quotearg_mem_7 [label="ZF"];
	quotearg_mem_8 -> quotearg_mem_4 [label="!ZF"];
	quotearg_mem_9 -> quotearg_mem_17;
	quotearg_mem_10 -> quotearg_mem_11;
	quotearg_mem_11 -> quotearg_mem_12;
	quotearg_mem_12 -> quotearg_mem_13;
	quotearg_mem_13 -> quotearg_mem_14;
	quotearg_mem_14 -> quotearg_mem_15;
	quotearg_mem_15 -> quotearg_mem_16;
	quotearg_mem_16 -> quotearg_mem_17;

	quotearg_mem_18 -> quotearg_mem_12 [label="ZF"];
	quotearg_mem_18 -> quotearg_mem_10 [label="!ZF"];
	quotearg_mem_19 -> quotearg_mem_20;
	quotearg_mem_20 -> quotearg_mem_21;
	quotearg_mem_21 -> quotearg_mem_18 [label="CF || ZF"];
	quotearg_mem_21 -> quotearg_mem_9 [label="!CF && !ZF"];
	quotearg_mem_22 -> quotearg_mem_19 [label="!ZF && SF == OF"];
	quotearg_mem_22 -> quotearg_mem_8 [label="ZF || SF != OF"];

	quotearg_mem_24 -> quotearg_mem_25;
	quotearg_mem_25 -> quotearg_mem_26;
	quotearg_mem_26 -> quotearg_mem_23 [label="SF"];
	quotearg_mem_26 -> quotearg_mem_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBi(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
ts: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RSI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RSI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quotearg_mem -> quotearg_n_options_1685 and quotearg_mem -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RSI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Reg: RSI, RDI := Value: 0, RSI := Reg: RDI, R15 := Reg: RSI, R12 := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_mem -> quotearg_n_options_1685 and quotearg_mem -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (22/87): "quotearg"
--------
.dot code for CFG of text section quotearg for Vanilla
diGraph quotearg_Vanilla{
	quotearg_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quotearg_1  [label="[.label_175,quotearg_n_options_1724]"]
	quotearg_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quotearg_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quotearg_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quotearg_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quotearg_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quotearg_7  [label="[.label_172,.label_172]"]
	quotearg_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quotearg_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quotearg_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quotearg_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quotearg_12  [label="[.label_171,.label_171]"]
	quotearg_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quotearg_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quotearg_15  [lab(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
el="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quotearg_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quotearg_17  [label="[.label_176,quotearg_n_options_1797]"]
	quotearg_18  [label="[.label_173,quotearg_n_options_1765]"]
	quotearg_19  [label="[.label_177,quotearg_n_options_1748]"]
	quotearg_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quotearg_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quotearg_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quotearg_23  [label="[.label_174,.label_174]"]
	quotearg_24  [label="[quotearg,quotearg_n_options_1685]"]
	quotearg_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quotearg_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quotearg_0 -> quotearg_1;
	quotearg_1 -> quotearg_2;
	quotearg_2 -> quotearg_3;
	quotearg_3 -> quotearg_19;
	quotearg_4 -> quotearg_5;
	quotearg_5 -> quotearg_6;
	quotearg_6 -> quotearg_1 [label="!ZF"];
	quotearg_6 -> quotearg_0 [label="ZF"];

	quotearg_8 -> quotearg_7 [label="ZF"];
	quotearg_8 -> quotearg_4 [label="!ZF"];
	quotearg_9 -> quotearg_17;
	quotearg_10 -> quotearg_11;
	quotearg_11 -> quotearg_12;
	quotearg_12 -> quotearg_13;
	quotearg_13 -> quotearg_14;
	quotearg_14 -> quotearg_15;
	quotearg_15 -> quotearg_16;
	quotearg_16 -> quotearg_17;

	quotearg_18 -> quotearg_12 [label="ZF"];
	quotearg_18 -> quotearg_10 [label="!ZF"];
	quotearg_19 -> quotearg_20;
	quotearg_20 -> quotearg_21;
	quotearg_21 -> quotearg_18 [label="CF || ZF"];
	quotearg_21 -> quotearg_9 [label="!CF && !ZF"];
	quotearg_22 -> quotearg_19 [label="!ZF && SF == OF"];
	quotearg_22 -> quotearg_8 [label="ZF || SF != OF"];

	quotearg_24 -> quotearg_25;
	quotearg_25 -> quotearg_26;
	quotearg_26 -> quotearg_23 [label="SF"];
	quotearg_26 -> quotearg_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg for Randomized
diGraph quotearg_Randomized{
	quotearg_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quotearg_1  [label="[.label_142,quotearg_n_options_1680]"]
	quotearg_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quotearg_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quotearg_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quotearg_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quotearg_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quotearg_7  [label="[.label_139,.label_139]"]
	quotearg_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quotearg_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quotearg_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quotearg_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quotearg_12  [label="[.label_138,.label_138]"]
	quotearg_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quotearg_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quotearg_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quotearg_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quotearg_17  [label="[.label_143,quotearg_n_options_1753]"]
	quotearg_18  [label="[.label_140,quotearg_n_options_1721]"]
	quotearg_19  [label="[.label_144,quotearg_n_options_1704]"]
	quotearg_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quotearg_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quotearg_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quotearg_23  [label="[.label_141,.label_141]"]
	quotearg_24  [label="[quotearg,quotearg_n_options_1641]"]
	quotearg_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quotearg_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quotearg_0 -> quotearg_1;
	quotearg_1 -> quotearg_2;
	quotearg_2 -> quotearg_3;
	quotearg_3 -> quotearg_19;
	quotearg_4 -> quotearg_5;
	quotearg_5 -> quotearg_6;
	quotearg_6 -> quotearg_1 [label="!ZF"];
	quotearg_6 -> quotearg_0 [label="ZF"];

	quotearg_8 -> quotearg_7 [label="ZF"];
	quotearg_8 -> quotearg_4 [label="!ZF"];
	quotearg_9 -> quotearg_17;
	quotearg_10 -> quotearg_11;
	quotearg_11 -> quotearg_12;
	quotearg_12 -> quotearg_13;
	quotearg_13 -> quotearg_14;
	quotearg_14 -> quotearg_15;
	quotearg_15 -> quotearg_16;
	quotearg_16 -> quotearg_17;

	quotearg_18 -> quotearg_12 [label="ZF"];
	quotearg_18 -> quotearg_10 [label="!ZF"];
	quotearg_19 -> quotearg_20;
	quotearg_20 -> quotearg_21;
	quotearg_21 -> quotearg_18 [label="CF || ZF"];
	quotearg_21 -> quotearg_9 [label="!CF && !ZF"];
	quotearg_22 -> quotearg_19 [label="!ZF && SF == OF"];
	quotearg_22 -> quotearg_8 [label="ZF || SF != OF"];

	quotearg_24 -> quotearg_25;
	quotearg_25 -> quotearg_26;
	quotearg_26 -> quotearg_23 [label="SF"];
	quotearg_26 -> quotearg_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RDI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RAX := Reg: RDI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quotearg -> quotearg_n_options_1685 and quotearg -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Reg: RDI, RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, RDI := Value: 0, RSI := Reg: RDI, R15 := Value: 18446744073709551615, R12 := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RDI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg -> quotearg_n_options_1685 and quotearg -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (23/87): "quotearg_n_mem"
--------
.dot code for CFG of text section quotearg_n_mem for Vanilla
diGraph quotearg_n_mem_Vanilla{
	quotearg_n_mem_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quotearg_n_mem_1  [label="[.label_175,quotearg_n_options_1724]"]
	quotearg_n_mem_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quotearg_n_mem_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quotearg_n_mem_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quotearg_n_mem_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quotearg_n_mem_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quotearg_n_mem_7  [label="[.label_172,.label_172]"]
	quotearg_n_mem_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quotearg_n_mem_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quotearg_n_mem_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quotearg_n_mem_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quotearg_n_mem_12  [label="[.label_171,.label_171]"]
	quotearg_n_mem_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quotearg_n_mem_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quotearg_n_mem_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quotearg_n_mem_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quotearg_n_mem_17  [label="[.label_176,quotearg_n_options_1797]"]
	quotearg_n_mem_18  [label="[.label_173,quotearg_n_options_1765]"]
	quotearg_n_mem_19  [label="[.label_177,quotearg_n_options_1748]"]
	quotearg_n_mem_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quotearg_n_mem_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quotearg_n_mem_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quotearg_n_mem_23  [label="[.label_174,.label_174]"]
	quotearg_n_mem_24  [label="[quotearg_n_mem,quotearg_n_options_1685]"]
	quotearg_n_mem_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quotearg_n_mem_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quotearg_n_mem_0 -> quotearg_n_mem_1;
	quotearg_n_mem_1 -> quotearg_n_mem_2;
	quotearg_n_mem_2 -> quotearg_n_mem_3;
	quotearg_n_mem_3 -> quotearg_n_mem_19;
	quotearg_n_mem_4 -> quotearg_n_mem_5;
	quotearg_n_mem_5 -> quotearg_n_mem_6;
	quotearg_n_mem_6 -> quotearg_n_mem_1 [label="!ZF"];
	quotearg_n_mem_6 -> quotearg_n_mem_0 [label="ZF"];

	quotearg_n_mem_8 -> quotearg_n_mem_7 [label="ZF"];
	quotearg_n_mem_8 -> quotearg_n_mem_4 [label="!ZF"];
	quotearg_n_mem_9 -> quotearg_n_mem_17;
	quotearg_n_mem_10 -> quotearg_n_mem_11;
	quotearg_n_mem_11 -> quotearg_n_mem_12;
	quotearg_n_mem_12 -> quotearg_n_mem_13;
	quotearg_n_mem_13 -> quotearg_n_mem_14;
	quotearg_n_mem_14 -> quotearg_n_mem_15;
	quotearg_n_mem_15 -> quotearg_n_mem_16;
	quotearg_n_mem_16 -> quotearg_n_mem_17;

	quotearg_n_mem_18 -> quotearg_n_mem_12 [label="ZF"];
	quotearg_n_mem_18 -> quotearg_n_mem_10 [label="!ZF"];
	quotearg_n_mem_19 -> quotearg_n_mem_20;
	quotearg_n_mem_20 -> quotearg_n_mem_21;
	quotearg_n_mem_21 -> quotearg_n_mem_18 [label="CF || ZF"];
	quotearg_n_mem_21 -> quotearg_n_mem_9 [label="!CF && !ZF"];
	quotearg_n_mem_22 -> quotearg_n_mem_19 [label="!ZF && SF == OF"];
	quotearg_n_mem_22 -> quotearg_n_mem_8 [label="ZF || SF != OF"];

	quotearg_n_mem_24 -> quotearg_n_mem_25;
	quotearg_n_mem_25 -> quotearg_n_mem_26;
	quotearg_n_mem_26 -> quotearg_n_mem_23 [label="SF"];
	quotearg_n_mem_26 -> quotearg_n_mem_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_mem for Randomized
diGraph quotearg_n_mem_Randomized{
	quotearg_n_mem_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quotearg_n_mem_1  [label="[.label_142,quotearg_n_options_1680]"]
	quotearg_n_mem_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quotearg_n_mem_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quotearg_n_mem_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quotearg_n_mem_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quotearg_n_mem_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quotearg_n_mem_7  [label="[.label_139,.label_139]"]
	quotearg_n_mem_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quotearg_n_mem_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quotearg_n_mem_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quotearg_n_mem_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quotearg_n_mem_12  [label="[.label_138,.label_138]"]
	quotearg_n_mem_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quotearg_n_mem_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quotearg_n_mem_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quotearg_n_mem_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quotearg_n_mem_17  [label="[.label_143,quotearg_n_options_1753]"]
	quotearg_n_mem_18  [label="[.label_140,quotearg_n_options_1721]"]
	quotearg_n_mem_19  [label="[.label_144,quotearg_n_options_1704]"]
	quotearg_n_mem_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quotearg_n_mem_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quotearg_n_mem_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quotearg_n_mem_23  [label="[.label_141,.label_141]"]
	quotearg_n_mem_24  [label="[quotearg_n_mem,quotearg_n_options_1641]"]
	quotearg_n_mem_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quotearg_n_mem_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quotearg_n_mem_0 -> quotearg_n_mem_1;
	quotearg_n_mem_1 -> quotearg_n_mem_2;
	quotearg_n_mem_2 -> quotearg_n_mem_3;
	quotearg_n_mem_3 -> quotearg_n_mem_19;
	quotearg_n_mem_4 -> quotearg_n_mem_5;
	quotearg_n_mem_5 -> quotearg_n_mem_6;
	quotearg_n_mem_6 -> quotearg_n_mem_1 [label="!ZF"];
	quotearg_n_mem_6 -> quotearg_n_mem_0 [label="ZF"];

	quotearg_n_mem_8 -> quotearg_n_mem_7 [label="ZF"];
	quotearg_n_mem_8 -> quotearg_n_mem_4 [label="!ZF"];
	quotearg_n_mem_9 -> quotearg_n_mem_17;
	quotearg_n_mem_10 -> quotearg_n_mem_11;
	quotearg_n_mem_11 -> quotearg_n_mem_12;
	quotearg_n_mem_12 -> quotearg_n_mem_13;
	quotearg_n_mem_13 -> quotearg_n_mem_14;
	quotearg_n_mem_14 -> quotearg_n_mem_15;
	quotearg_n_mem_15 -> quotearg_n_mem_16;
	quotearg_n_mem_16 -> quotearg_n_mem_17;

	quotearg_n_mem_18 -> quotearg_n_mem_12 [label="ZF"];
	quotearg_n_mem_18 -> quotearg_n_mem_10 [label="!ZF"];
	quotearg_n_mem_19 -> quotearg_n_mem_20;
	quotearg_n_mem_20 -> quotearg_n_mem_21;
	quotearg_n_mem_21 -> quotearg_n_mem_18 [label="CF || ZF"];
	quotearg_n_mem_21 -> quotearg_n_mem_9 [label="!CF && !ZF"];
	quotearg_n_mem_22 -> quotearg_n_mem_19 [label="!ZF && SF == OF"];
	quotearg_n_mem_22 -> quotearg_n_mem_8 [label="ZF || SF != OF"];

	quotearg_n_mem_24 -> quotearg_n_mem_25;
	quotearg_n_mem_25 -> q(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
uotearg_n_mem_26;
	quotearg_n_mem_26 -> quotearg_n_mem_23 [label="SF"];
	quotearg_n_mem_26 -> quotearg_n_mem_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_mem"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quotearg_n_mem -> quotearg_n_options_1685 and quotearg_n_mem -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_mem -> quotearg_n_options_1685 and quotearg_n_mem -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (24/87): "quotearg_n_options"
--------
.dot code for CFG of text section quotearg_n_options for Vanilla
diGraph quotearg_n_options_Vanilla{
	quotearg_n_options_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quotearg_n_options_1  [label="[.label_175,quotearg_n_options_1724]"]
	quotearg_n_options_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quotearg_n_options_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quotearg_n_options_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quotearg_n_options_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quotearg_n_options_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quotearg_n_options_7  [label="[.label_172,.label_172]"]
	quotearg_n_options_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quotearg_n_options_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quotearg_n_options_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quotearg_n_options_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quotearg_n_options_12  [label="[.label_171,.label_171]"]
	quotearg_n_options_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quotearg_n_options_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quotearg_n_options_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quotearg_n_options_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quotearg_n_options_17  [label="[.label_176,quotearg_n_options_1797]"]
	quotearg_n_options_18  [label="[.label_173,quotearg_n_options_1765]"]
	quotearg_n_options_19  [label="[.label_177,quotearg_n_options_1748]"]
	quotearg_n_options_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quotearg_n_options_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quotearg_n_options_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quotearg_n_options_23  [label="[.label_174,.label_174]"]
	quotearg_n_options_24  [label="[quotearg_n_options,quotearg_n_options_1685]"]
	quotearg_n_options_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quotearg_n_options_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quotearg_n_options_0 -> quotearg_n_options_1;
	quotearg_n_options_1 -> quotearg_n_options_2;
	quotearg_n_options_2 -> quotearg_n_options_3;
	quotearg_n_options_3 -> quotearg_n_options_19;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_1 [label="!ZF"];
	quotearg_n_options_6 -> quotearg_n_options_0 [label="ZF"];

	quotearg_n_options_8 -> quotearg_n_options_7 [label="ZF"];
	quotearg_n_options_8 -> quotearg_n_options_4 [label="!ZF"];
	quotearg_n_options_9 -> quotearg_n_options_17;
	quotearg_n_options_10 -> quotearg_n_options_11;
	quotearg_n_options_11 -> quotearg_n_options_12;
	quotearg_n_options_12 -> quotearg_n_options_13;
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_16;
	quotearg_n_options_16 -> quotearg_n_options_17;

	quotearg_n_options_18 -> quotearg_n_options_12 [label="ZF"];
	quotearg_n_options_18 -> quotearg_n_options_10 [label="!ZF"];
	quotearg_n_options_19 -> quotearg_n_options_20;
	quotearg_n_options_20 -> quotearg_n_options_21;
	quotearg_n_options_21 -> quotearg_n_options_18 [label="CF || ZF"];
	quotearg_n_options_21 -> quotearg_n_options_9 [label="!CF && !ZF"];
	quotearg_n_options_22 -> quotearg_n_options_19 [label="!ZF && SF == OF"];
	quotearg_n_options_22 -> quotearg_n_options_8 [label="ZF || SF != OF"];

	quotearg_n_options_24 -> quotearg_n_options_25;
	quotearg_n_options_25 -> quotearg_n_options_26;
	quotearg_n_options_26 -> quotearg_n_options_23 [label="SF"];
	quotearg_n_options_26 -> quotearg_n_options_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n_options for Randomized
diGraph quotearg_n_options_Randomized{
	quotearg_n_options_0 (19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
 [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quotearg_n_options_1  [label="[.label_142,quotearg_n_options_1680]"]
	quotearg_n_options_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quotearg_n_options_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quotearg_n_options_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quotearg_n_options_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quotearg_n_options_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quotearg_n_options_7  [label="[.label_139,.label_139]"]
	quotearg_n_options_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quotearg_n_options_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quotearg_n_options_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quotearg_n_options_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quotearg_n_options_12  [label="[.label_138,.label_138]"]
	quotearg_n_options_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quotearg_n_options_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quotearg_n_options_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quotearg_n_options_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quotearg_n_options_17  [label="[.label_143,quotearg_n_options_1753]"]
	quotearg_n_options_18  [label="[.label_140,quotearg_n_options_1721]"]
	quotearg_n_options_19  [label="[.label_144,quotearg_n_options_1704]"]
	quotearg_n_options_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quotearg_n_options_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quotearg_n_options_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quotearg_n_options_23  [label="[.label_141,.label_141]"]
	quotearg_n_options_24  [label="[quotearg_n_options,quotearg_n_options_1641]"]
	quotearg_n_options_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quotearg_n_options_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quotearg_n_options_0 -> quotearg_n_options_1;
	quotearg_n_options_1 -> quotearg_n_options_2;
	quotearg_n_options_2 -> quotearg_n_options_3;
	quotearg_n_options_3 -> quotearg_n_options_19;
	quotearg_n_options_4 -> quotearg_n_options_5;
	quotearg_n_options_5 -> quotearg_n_options_6;
	quotearg_n_options_6 -> quotearg_n_options_1 [label="!ZF"];
	quotearg_n_options_6 -> quotearg_n_options_0 [label="ZF"];

	quotearg_n_options_8 -> quotearg_n_options_7 [label="ZF"];
	quotearg_n_options_8 -> quotearg_n_options_4 [label="!ZF"];
	quotearg_n_options_9 -> quotearg_n_options_17;
	quotearg_n_options_10 -> quotearg_n_options_11;
	quotearg_n_options_11 -> quotearg_n_options_12;
	quotearg_n_options_12 -> quotearg_n_options_13;
	quotearg_n_options_13 -> quotearg_n_options_14;
	quotearg_n_options_14 -> quotearg_n_options_15;
	quotearg_n_options_15 -> quotearg_n_options_16;
	quotearg_n_options_16 -> quotearg_n_options_17;

	quotearg_n_options_18 -> quotearg_n_options_12 [label="ZF"];
	quotearg_n_options_18 -> quotearg_n_options_10 [label="!ZF"];
	quotearg_n_options_19 -> quotearg_n_options_20;
	quotearg_n_options_20 -> quotearg_n_options_21;
	quotearg_n_options_21 -> quotearg_n_options_18 [label="CF || ZF"];
	quotearg_n_options_21 -> quotearg_n_options_9 [label="!CF && !ZF"];
	quotearg_n_options_22 -> quotearg_n_options_19 [label="!ZF && SF == OF"];
	quotearg_n_options_22 -> quotearg_n_options_8 [label="ZF || SF != OF"];

	quotearg_n_options_24 -> quotearg_n_options_25;
	quotearg_n_options_25 -> quotearg_n_options_26;
	quotearg_n_options_26 -> quotearg_n_options_23 [label="SF"];
	quotearg_n_options_26 -> quotearg_n_options_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n_options"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Reg: RCX, R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n_options"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Reg: RCX, R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quotearg_n_options -> quotearg_n_options_1685 and quotearg_n_options -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RBX := Reg: RCX, R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Reg: RCX, R15 := Reg: RDX, R12 := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options -> quotearg_n_options_1685 and quotearg_n_options -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <--> slotvec0
slot0 <--> slot0
 <--> 

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (25/87): "quotearg_n"
--------
.dot code for CFG of text section quotearg_n for Vanilla
diGraph quotearg_n_Vanilla{
	quotearg_n_0  [label="[quotearg_n_options_1713,quotearg_n_options_1714]"]
	quotearg_n_1  [label="[.label_175,quotearg_n_options_1724]"]
	quotearg_n_2  [label="[quotearg_n_options_1725,quotearg_n_options_1725]"]
	quotearg_n_3  [label="[quotearg_n_options_1726,quotearg_n_options_1729]"]
	quotearg_n_4  [label="[quotearg_n_options_1700,quotearg_n_options_1707]"]
	quotearg_n_5  [label="[quotearg_n_options_1708,quotearg_n_options_1708]"]
	quotearg_n_6  [label="[quotearg_n_options_1709,quotearg_n_options_1712]"]
	quotearg_n_7  [label="[.label_172,.label_172]"]
	quotearg_n_8  [label="[quotearg_n_options_1698,quotearg_n_options_1699]"]
	quotearg_n_9  [label="[quotearg_n_options_1754,quotearg_n_options_1756]"]
	quotearg_n_10  [label="[quotearg_n_options_1766,quotearg_n_options_1766]"]
	quotearg_n_11  [label="[quotearg_n_options_1767,quotearg_n_options_1767]"]
	quotearg_n_12  [label="[.label_171,.label_171]"]
	quote(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
arg_n_13  [label="[quotearg_n_options_1770,quotearg_n_options_1770]"]
	quotearg_n_14  [label="[quotearg_n_options_1771,quotearg_n_options_1783]"]
	quotearg_n_15  [label="[quotearg_n_options_1784,quotearg_n_options_1784]"]
	quotearg_n_16  [label="[quotearg_n_options_1785,quotearg_n_options_1786]"]
	quotearg_n_17  [label="[.label_176,quotearg_n_options_1797]"]
	quotearg_n_18  [label="[.label_173,quotearg_n_options_1765]"]
	quotearg_n_19  [label="[.label_177,quotearg_n_options_1748]"]
	quotearg_n_20  [label="[quotearg_n_options_1749,quotearg_n_options_1749]"]
	quotearg_n_21  [label="[quotearg_n_options_1750,quotearg_n_options_1753]"]
	quotearg_n_22  [label="[quotearg_n_options_1690,quotearg_n_options_1697]"]
	quotearg_n_23  [label="[.label_174,.label_174]"]
	quotearg_n_24  [label="[quotearg_n,quotearg_n_options_1685]"]
	quotearg_n_25  [label="[quotearg_n_options_1686,quotearg_n_options_1686]"]
	quotearg_n_26  [label="[quotearg_n_options_1687,quotearg_n_options_1689]"]

	quotearg_n_0 -> quotearg_n_1;
	quotearg_n_1 -> quotearg_n_2;
	quotearg_n_2 -> quotearg_n_3;
	quotearg_n_3 -> quotearg_n_19;
	quotearg_n_4 -> quotearg_n_5;
	quotearg_n_5 -> quotearg_n_6;
	quotearg_n_6 -> quotearg_n_1 [label="!ZF"];
	quotearg_n_6 -> quotearg_n_0 [label="ZF"];

	quotearg_n_8 -> quotearg_n_7 [label="ZF"];
	quotearg_n_8 -> quotearg_n_4 [label="!ZF"];
	quotearg_n_9 -> quotearg_n_17;
	quotearg_n_10 -> quotearg_n_11;
	quotearg_n_11 -> quotearg_n_12;
	quotearg_n_12 -> quotearg_n_13;
	quotearg_n_13 -> quotearg_n_14;
	quotearg_n_14 -> quotearg_n_15;
	quotearg_n_15 -> quotearg_n_16;
	quotearg_n_16 -> quotearg_n_17;

	quotearg_n_18 -> quotearg_n_12 [label="ZF"];
	quotearg_n_18 -> quotearg_n_10 [label="!ZF"];
	quotearg_n_19 -> quotearg_n_20;
	quotearg_n_20 -> quotearg_n_21;
	quotearg_n_21 -> quotearg_n_18 [label="CF || ZF"];
	quotearg_n_21 -> quotearg_n_9 [label="!CF && !ZF"];
	quotearg_n_22 -> quotearg_n_19 [label="!ZF && SF == OF"];
	quotearg_n_22 -> quotearg_n_8 [label="ZF || SF != OF"];

	quotearg_n_24 -> quotearg_n_25;
	quotearg_n_25 -> quotearg_n_26;
	quotearg_n_26 -> quotearg_n_23 [label="SF"];
	quotearg_n_26 -> quotearg_n_22 [label="!SF"];
}
--------
--------
.dot code for CFG of text section quotearg_n for Randomized
diGraph quotearg_n_Randomized{
	quotearg_n_0  [label="[quotearg_n_options_1669,quotearg_n_options_1670]"]
	quotearg_n_1  [label="[.label_142,quotearg_n_options_1680]"]
	quotearg_n_2  [label="[quotearg_n_options_1681,quotearg_n_options_1681]"]
	quotearg_n_3  [label="[quotearg_n_options_1682,quotearg_n_options_1685]"]
	quotearg_n_4  [label="[quotearg_n_options_1656,quotearg_n_options_1663]"]
	quotearg_n_5  [label="[quotearg_n_options_1664,quotearg_n_options_1664]"]
	quotearg_n_6  [label="[quotearg_n_options_1665,quotearg_n_options_1668]"]
	quotearg_n_7  [label="[.label_139,.label_139]"]
	quotearg_n_8  [label="[quotearg_n_options_1654,quotearg_n_options_1655]"]
	quotearg_n_9  [label="[quotearg_n_options_1710,quotearg_n_options_1712]"]
	quotearg_n_10  [label="[quotearg_n_options_1722,quotearg_n_options_1722]"]
	quotearg_n_11  [label="[quotearg_n_options_1723,quotearg_n_options_1723]"]
	quotearg_n_12  [label="[.label_138,.label_138]"]
	quotearg_n_13  [label="[quotearg_n_options_1726,quotearg_n_options_1726]"]
	quotearg_n_14  [label="[quotearg_n_options_1727,quotearg_n_options_1739]"]
	quotearg_n_15  [label="[quotearg_n_options_1740,quotearg_n_options_1740]"]
	quotearg_n_16  [label="[quotearg_n_options_1741,quotearg_n_options_1742]"]
	quotearg_n_17  [label="[.label_143,quotearg_n_options_1753]"]
	quotearg_n_18  [label="[.label_140,quotearg_n_options_1721]"]
	quotearg_n_19  [label="[.label_144,quotearg_n_options_1704]"]
	quotearg_n_20  [label="[quotearg_n_options_1705,quotearg_n_options_1705]"]
	quotearg_n_21  [label="[quotearg_n_options_1706,quotearg_n_options_1709]"]
	quotearg_n_22  [label="[quotearg_n_options_1646,quotearg_n_options_1653]"]
	quotearg_n_23  [label="[.label_141,.label_141]"]
	quotearg_n_24  [label="[quotearg_n,quotearg_n_options_1641]"]
	quotearg_n_25  [label="[quotearg_n_options_1642,quotearg_n_options_1642]"]
	quotearg_n_26  [label="[quotearg_n_options_1643,quotearg_n_options_1645]"]

	quotearg_n_0 -> quotearg_n_1;
	quotearg_n_1 -> quotearg_n_2;
	quotearg_n_2 -> quotearg_n_3;
	quotearg_n_3 -> quotearg_n_19;
	quotearg_n_4 -> quotearg_n_5;
	quotearg_n_5 -> quotearg_n_6;
	quotearg_n_6 -> quotearg_n_1 [label="!ZF"];
	quotearg_n_6 -> quotearg_n_0 [label="ZF"];

	quotearg_n_8 -> quotearg_n_7 [label="ZF"];
	quotearg_n_8 -> quotearg_n_4 [label="!ZF"];
	quotearg_n_9 -> quotearg_n_17;
	quotearg_n_10 -> quotearg_n_11;
	quotearg_n_11 -> quotearg_n_12;
	quotearg_n_12 -> quotearg_n_13;
	quotearg_n_13 -> quotearg_n_14;
	quotearg_n_14 -> quotearg_n_15;
	quotearg_n_15 -> quotearg_n_16;
	quotearg_n_16 -> quotearg_n_17;

	quotearg_n_18 -> quotearg_n_12 [label="ZF"];
	quotearg_n_18 -> quotearg_n_10 [label="!ZF"];
	quotearg_n_19 -> quotearg_n_20;
	quotearg_n_20 -> quotearg_n_21;
	quotearg_n_21 -> quotearg_n_18 [label="CF || ZF"];
	quotearg_n_21 -> quotearg_n_9 [label="!CF && !ZF"];
	quotearg_n_22 -> quotearg_n_19 [label="!ZF && SF == OF"];
	quotearg_n_22 -> quotearg_n_8 [label="ZF || SF != OF"];

	quotearg_n_24 -> quotearg_n_25;
	quotearg_n_25 -> quotearg_n_26;
	quotearg_n_26 -> quotearg_n_23 [label="SF"];
	quotearg_n_26 -> quotearg_n_22 [label="!SF"];
}
--------
Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_n"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()(19,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Reg: R14,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(20,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(21,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 120) && RBP == Nothing,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing)
(18,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(9,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],RSP == (Var: RSP0 - Value: 88) && RBP == Nothing,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing)
(24,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(2,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(3,RSP == (Var: RSP0 - Value: 88) && RBP == sextend(TakeBits: <31,0>(Reg: R15),32,64)),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(7,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8]),(9,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(10,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(11,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(12,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(13,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(14,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(15,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(16,RSP == (Var: RSP0 - Value: 120) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(17,RSP == (Var: RSP0 - Value: 88) && RBP == Dereference: [(Var: RSP0 - Value: 88),4]),(18,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(19,RSP == (Var: RSP0 - Value: 88) && RBP == Nothing),(20,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(21,RSP == (Var: RSP0 - Value: 120) && RBP == Nothing),(22,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])

node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

Starting Node: 24

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 19, 4 ----> 5, 5 ----> 6, 6 --!ZF--> 1, 6 --ZF--> 0, , 8 --ZF--> 7, 8 --!ZF--> 4, 9 ----> 17, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, , 18 --ZF--> 12, 18 --!ZF--> 10, 19 ----> 20, 20 ----> 21, 21 --CF || ZF--> 18, 21 --!CF && !ZF--> 9, 22 --!ZF && SF == OF--> 19, 22 --ZF || SF != OF--> 8, , 24 ----> 25, 25 ----> 26, 26 --SF--> 23, 26 --!SF--> 22

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_n"
node 0:
XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
[Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
node 1:
RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := memset@()
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
[(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))
node 4:
RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)
node 5:
RAX := xrealloc@()
node 6:
R14 := Reg: RAX
[(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)
node 9:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
node 10:
RDI := Reg: R14
node 11:
RAX := free@()
node 12:
RDI := Reg: R15
node 13:
RAX := xcharalloc@()
node 14:
RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
[Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 15:
RAX := quotearg_buffer_restyled@()
node 16:
RAX := Dereference: [(Var: RSP0 - Value: 64),8]
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 17:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 18:
RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
[(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])
node 19:
RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
[(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 20:
RAX := quotearg_buffer_restyled@()
node 21:
R15 := Reg: RAX
ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)
node 22:
RAX := Dereference: [Reg: R13,4]
[(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))
node 23:
RAX := abort@()
node 24:
RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 25:
RAX := __errno_location@()
node 26:
R13 := Reg: RAX
ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))
--------

same_behavior for the nodes: quotearg_n -> quotearg_n_options_1685 and quotearg_n -> quotearg_n_options_1641

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Dereference: [Var: default_quoting_options,4], RCX := Dereference: [Var: default_quoting_options,4], RDX := Value: 18446744073709551615, R15 := Value: 18446744073709551615, R12 := TakeBits: <31,0>(Reg: RDI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RSI
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_val 18446744073709551615 64
Value B:
E_val 18446744073709551615 64
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n -> quotearg_n_options_1685 and quotearg_n -> quotearg_n_options_1641 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1686 -> quotearg_n_options_1686 and quotearg_n_options_1642 -> quotearg_n_options_1642 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645

same_behavior checking these two SStates:

SA || R13 := Reg: RAX
SA || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

SB || R13 := Reg: RAX
SB || ZF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), CF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), SF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), OF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12)), PF := TEST(TakeBits: <31,0>(Reg: R12),TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1687 -> quotearg_n_options_1689 and quotearg_n_options_1643 -> quotearg_n_options_1645 have been verified to do the same.

same_behavior for the nodes: .label_174 -> .label_174 and .label_141 -> .label_141

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_174 -> .label_174 and .label_141 -> .label_141 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R13,4]
SA || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1692 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

SB || RAX := Dereference: [Reg: R13,4]
SB || [(Var: RSP0 - Value: 64),8] := Reg: R13, [(Var: RSP0 - Value: 72),8] := Reg: RBX, [(Var: RSP0 - Value: 80),8] := Reg: R15, [(Var: RSP0 - Value: 88),4] := Dereference: [Reg: R13,4]
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), CF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), SF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), OF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12)), PF := CMP(Dereference: [(Var: quotearg_n_options_1648 + Var: nslots),4],TakeBits: <31,0>(Reg: R12))

Resulting values:
Value A:
E_deref (E_reg R13) 4
Value B:
E_deref (E_reg R13) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_deref (E_reg R13) 4
E_deref (E_reg R13) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1690 -> quotearg_n_options_1697 and quotearg_n_options_1646 -> quotearg_n_options_1653 have been verified to do the same.

same_behavior for the nodes: .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704

same_behavior checking these two SStates:

SA || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SA || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := (Reg: RBX + Value: 8), RBX := (Reg: RBX + Value: 8), RCX := Reg: R15, RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], RSI := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R14 := Dereference: [(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)),8], R13 := SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4), R12 := Dereference: [(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)),8], R9 := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), R8 := Dereference: [Reg: RBX,4]
SB || [(Var: RSP0 - Value: 84),4] := OR(Dereference: [(Reg: RBX + Value: 4),4],Value: 1), [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: RBX + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: RBX + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: RBX + Value: 8)
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 8 64]
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 8 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBP,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64]]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Value B:
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
Resulting values:
Value A:
E_deref (E_reg RBX) 4
Value B:
E_deref (E_reg RBX) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
E_app (Op OR) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 4,E_val 1 32]
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg RBX,E_val 8 64]
E_app (Op ADD) [E_reg RBX,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_177 -> quotearg_n_options_1748 and .label_144 -> quotearg_n_options_1704 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1749 -> quotearg_n_options_1749 and quotearg_n_options_1705 -> quotearg_n_options_1705 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

SB || R15 := Reg: RAX
SB || ZF := CMP(Reg: R12,Reg: RAX), CF := CMP(Reg: R12,Reg: RAX), SF := CMP(Reg: R12,Reg: RAX), OF := CMP(Reg: R12,Reg: RAX), PF := CMP(Reg: R12,Reg: RAX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1750 -> quotearg_n_options_1753 and quotearg_n_options_1706 -> quotearg_n_options_1709 have been verified to do the same.

same_behavior for the nodes: .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SA || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SA || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], R15 := (Reg: R15 + Value: 1), R12 := (Reg: RBP + (Reg: R13 + Value: 8))
SB || [(Reg: RBP + Reg: R13),8] := (Reg: R15 + Value: 1)
SB || ZF := CMP(Reg: R14,Dereference: [Var: slot0,4]), CF := CMP(Reg: R14,Dereference: [Var: slot0,4]), SF := CMP(Reg: R14,Dereference: [Var: slot0,4]), OF := CMP(Reg: R14,Dereference: [Var: slot0,4]), PF := CMP(Reg: R14,Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R15,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
Value B:
E_app (Op ADD) [E_reg RBP,E_app (Op ADD) [E_reg R13,E_val 8 64]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBP,E_reg R13]
E_app (Op ADD) [E_reg RBP,E_reg R13]
(v1 := v2):
E_app (Op ADD) [E_reg R15,E_val 1 8]
E_app (Op ADD) [E_reg R15,E_val 1 8]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_173 -> quotearg_n_options_1765 and .label_140 -> quotearg_n_options_1721 have been verified to do the same.

same_behavior for the nodes: .label_171 -> .label_171 and .label_138 -> .label_138

same_behavior checking these two SStates:

SA || RDI := Reg: R15

SB || RDI := Reg: R15

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_171 -> .label_171 and .label_138 -> .label_138 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1770 -> quotearg_n_options_1770 and quotearg_n_options_1726 -> quotearg_n_options_1726 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SA || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RAX := Dereference: [(Var: RSP0 - Value: 72),8], RCX := Dereference: [(Var: RSP0 - Value: 80),8], RDX := Dereference: [(Var: RSP0 - Value: 56),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := Dereference: [(Var: RSP0 - Value: 84),4], R8 := Dereference: [Dereference: [(Var: RSP0 - Value: 72),8],4]
SB || [Reg: R12,8] := Reg: RAX, [(Var: RSP0 - Value: 104),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Dereference: [(Var: RSP0 - Value: 72),8] + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
Value B:
E_deref (E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8) 4
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R12
E_reg R12
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1771 -> quotearg_n_options_1783 and quotearg_n_options_1727 -> quotearg_n_options_1739 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1784 -> quotearg_n_options_1784 and quotearg_n_options_1740 -> quotearg_n_options_1740 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1785 -> quotearg_n_options_1786 and quotearg_n_options_1741 -> quotearg_n_options_1742 have been verified to do the same.

same_behavior for the nodes: .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RAX,4] := Dereference: [(Var: RSP0 - Value: 88),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_176 -> quotearg_n_options_1797 and .label_143 -> quotearg_n_options_1753 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1766 -> quotearg_n_options_1766 and quotearg_n_options_1722 -> quotearg_n_options_1722 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1767 -> quotearg_n_options_1767 and quotearg_n_options_1723 -> quotearg_n_options_1723 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1754 -> quotearg_n_options_1756 and quotearg_n_options_1710 -> quotearg_n_options_1712 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

SB || ZF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), CF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), SF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), OF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647), PF := CMP(TakeBits: <31,0>(Reg: R12),Value: 2147483647)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1698 -> quotearg_n_options_1699 and quotearg_n_options_1654 -> quotearg_n_options_1655 have been verified to do the same.

same_behavior for the nodes: .label_172 -> .label_172 and .label_139 -> .label_139

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_172 -> .label_172 and .label_139 -> .label_139 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SA || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

SB || RBX := Dereference: [Var: slotvec0,4], RDI := (if (Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] != Dereference: [Var: slotvec0,4]) then Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8] else Value: 0), RSI := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), R15 := TakeBits: <31,0>((Reg: R12 + Value: 1))
SB || ZF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), CF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), SF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), OF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16), PF := (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 16)

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1691" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8,E_deref (E_var "slotvec0" 64) 4]) (E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1647" 64,E_var "slotvec" 64]) 8) (E_val 0 32)
Resulting values:
Value A:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Value B:
E_app (Op ADD) [E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R12]],E_val 64 (-1)],E_val 4 64],E_val 16 64]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R12,E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1700 -> quotearg_n_options_1707 and quotearg_n_options_1656 -> quotearg_n_options_1663 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664

same_behavior checking these two SStates:

SA || RAX := xrealloc@()

SB || RAX := xrealloc@()

Resulting values:
Value A:
E_app (F2 "xrealloc" "") []
Value B:
E_app (F2 "xrealloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1708 -> quotearg_n_options_1708 and quotearg_n_options_1664 -> quotearg_n_options_1664 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668

same_behavior checking these two SStates:

SA || R14 := Reg: RAX
SA || [(Var: quotearg_n_options_1711 + Var: slotvec),8] := Reg: RAX
SA || ZF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1691 + Var: slotvec),8],Reg: RBX)

SB || R14 := Reg: RAX
SB || [(Var: quotearg_n_options_1667 + Var: slotvec),8] := Reg: RAX
SB || ZF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), CF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), SF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), OF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX), PF := CMP(Dereference: [(Var: quotearg_n_options_1647 + Var: slotvec),8],Reg: RBX)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1711" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1667" 64,E_var "slotvec" 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1709 -> quotearg_n_options_1712 and quotearg_n_options_1665 -> quotearg_n_options_1668 have been verified to do the same.

same_behavior for the nodes: .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680

same_behavior checking these two SStates:

SA || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_175 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4), RDX := SHL(zextend((sextend(TakeBits: <31,0>(Reg: R15),32,64) - sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64)),Value: 64),Value: 4), RDI := (Reg: R14 + SHL(zextend(sextend(Dereference: [(Var: .label_142 + Var: nslots),4],32,64),Value: 64),Value: 4)), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Value B:
E_app (Op SHL) [E_app (F zextend) [E_app (Op SUB) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]],E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4]],E_val 64 (-1)],E_val 4 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_175" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Value B:
E_app (Op ADD) [E_reg R14,E_app (Op SHL) [E_app (F zextend) [E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var ".label_142" 64,E_var "nslots" 64]) 4],E_val 64 (-1)],E_val 4 64]]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_175 -> quotearg_n_options_1724 and .label_142 -> quotearg_n_options_1680 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_n_options_1725 -> quotearg_n_options_1725 and quotearg_n_options_1681 -> quotearg_n_options_1681 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SA || [(Var: quotearg_n_options_1726 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

SB || RBX := Dereference: [(Var: RSP0 - Value: 72),8], R15 := Dereference: [(Var: RSP0 - Value: 80),8]
SB || [(Var: quotearg_n_options_1682 + Var: nslots),4] := TakeBits: <31,0>(sextend(TakeBits: <31,0>(Reg: R15),32,64))

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_n_options_1726" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var "quotearg_n_options_1682" 64,E_var "nslots" 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
E_app (TakeBits 31 0) [E_app (SExtend 32 64) [E_app (TakeBits 31 0) [E_reg R15]]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1726 -> quotearg_n_options_1729 and quotearg_n_options_1682 -> quotearg_n_options_1685 have been verified to do the same.

same_behavior for the nodes: quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670

same_behavior checking these two SStates:

SA || XMM0 := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]
SA || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1713 + Var: slotvec0),16]

SB || XMM0 := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]
SB || [Reg: R14,16] := Dereference: [(Var: quotearg_n_options_1669 + Var: slotvec0),16]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1713" 64,E_var "slotvec0" 64]) 16
E_deref (E_app (Op ADD) [E_var "quotearg_n_options_1669" 64,E_var "slotvec0" 64]) 16
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_n_options_1713 -> quotearg_n_options_1714 and quotearg_n_options_1669 -> quotearg_n_options_1670 have been verified to do the same.

Label relationship:
quotearg_n_options_1713 <--> quotearg_n_options_1669
quotearg_n_options_1726 <--> quotearg_n_options_1682
nslots <--> nslots
.label_175 <--> .label_142
quotearg_n_options_1711 <--> quotearg_n_options_1667
slotvec <--> slotvec
quotearg_n_options_1691 <--> quotearg_n_options_1647
slotvec0 <(2,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
--> slotvec0
slot0 <--> slot0
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Reg: RBP + Reg: R13) <--> (Reg: RBP + Reg: R13)
(Reg: RBP + (Reg: R13 + Value: 8)) <--> (Reg: RBP + (Reg: R13 + Value: 8))
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4)) <--> (Reg: RBP + SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4))
(Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8)) <--> (Reg: RBP + (SHL(zextend(sextend(TakeBits: <31,0>(Reg: R12),32,64),Value: 64),Value: 4) + Value: 8))
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (26/87): "quotearg_alloc_mem"
--------
.dot code for CFG of text section quotearg_alloc_mem for Vanilla
diGraph quotearg_alloc_mem_Vanilla{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_1599,quotearg_alloc_mem_1599]"]
	quotearg_alloc_mem_1  [label="[.label_165,quotearg_alloc_mem_1609]"]
	quotearg_alloc_mem_2  [label="[quotearg_alloc_mem,quotearg_alloc_mem_1554]"]
	quotearg_alloc_mem_3  [label="[quotearg_alloc_mem_1555,quotearg_alloc_mem_1555]"]
	quotearg_alloc_mem_4  [label="[quotearg_alloc_mem_1556,quotearg_alloc_mem_1573]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_1574,quotearg_alloc_mem_1574]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_1575,quotearg_alloc_mem_1578]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_1579,quotearg_alloc_mem_1579]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_1580,quotearg_alloc_mem_1590]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_1591,quotearg_alloc_mem_1591]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_1592,quotearg_alloc_mem_1598]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_1;

	quotearg_alloc_mem_2 -> quotearg_alloc_mem_3;
	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_1 [label="ZF"];
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_alloc_mem for Randomized
diGraph quotearg_alloc_mem_Randomized{
	quotearg_alloc_mem_0  [label="[quotearg_alloc_mem_3066,quotearg_alloc_mem_3066]"]
	quotearg_alloc_mem_1  [label="[.label_210,quotearg_alloc_mem_3076]"]
	quotearg_alloc_mem_2  [label="[quotearg_alloc_mem,quotearg_alloc_mem_3021]"]
	quotearg_alloc_mem_3  [label="[quotearg_alloc_mem_3022,quotearg_alloc_mem_3022]"]
	quotearg_alloc_mem_4  [label="[quotearg_alloc_mem_3023,quotearg_alloc_mem_3040]"]
	quotearg_alloc_mem_5  [label="[quotearg_alloc_mem_3041,quotearg_alloc_mem_3041]"]
	quotearg_alloc_mem_6  [label="[quotearg_alloc_mem_3042,quotearg_alloc_mem_3045]"]
	quotearg_alloc_mem_7  [label="[quotearg_alloc_mem_3046,quotearg_alloc_mem_3046]"]
	quotearg_alloc_mem_8  [label="[quotearg_alloc_mem_3047,quotearg_alloc_mem_3057]"]
	quotearg_alloc_mem_9  [label="[quotearg_alloc_mem_3058,quotearg_alloc_mem_3058]"]
	quotearg_alloc_mem_10  [label="[quotearg_alloc_mem_3059,quotearg_alloc_mem_3065]"]

	quotearg_alloc_mem_0 -> quotearg_alloc_mem_1;

	quotearg_alloc_mem_2 -> quotearg_alloc_mem_3;
	quotearg_alloc_mem_3 -> quotearg_alloc_mem_4;
	quotearg_alloc_mem_4 -> quotearg_alloc_mem_5;
	quotearg_alloc_mem_5 -> quotearg_alloc_mem_6;
	quotearg_alloc_mem_6 -> quotearg_alloc_mem_7;
	quotearg_alloc_mem_7 -> quotearg_alloc_mem_8;
	quotearg_alloc_mem_8 -> quotearg_alloc_mem_9;
	quotearg_alloc_mem_9 -> quotearg_alloc_mem_10;
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_1 [label="ZF"];
	quotearg_alloc_mem_10 -> quotearg_alloc_mem_0 [label="!ZF"];
}
--------
Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc_mem"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Reg: RDX, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 3:
RAX := __errno_location@()
node 4:
RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 7:
RAX := xcharalloc@()
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
[Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])(2,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
, OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])
--------

Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc_mem"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Reg: RDX, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 3:
RAX := __errno_location@()
node 4:
RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 7:
RAX := xcharalloc@()
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
[Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])
--------

same_behavior for the nodes: quotearg_alloc_mem -> quotearg_alloc_mem_1554 and quotearg_alloc_mem -> quotearg_alloc_mem_3021

same_behavior checking these two SStates:

SA || RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Reg: RDX, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
SA || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

SB || RBX := Reg: RDX, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RCX != Value: 0) then Reg: RCX else Dereference: [Var: default_quoting_options,4])
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Reg: RDX, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
SB || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RCX,E_val 0 (-1)]) (E_reg RCX) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem -> quotearg_alloc_mem_1554 and quotearg_alloc_mem -> quotearg_alloc_mem_3021 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1555 -> quotearg_alloc_mem_1555 and quotearg_alloc_mem_3022 -> quotearg_alloc_mem_3022

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1555 -> quotearg_alloc_mem_1555 and quotearg_alloc_mem_3022 -> quotearg_alloc_mem_3022 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1556 -> quotearg_alloc_mem_1573 and quotearg_alloc_mem_3023 -> quotearg_alloc_mem_3040

same_behavior checking these two SStates:

SA || RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1556 -> quotearg_alloc_mem_1573 and quotearg_alloc_mem_3023 -> quotearg_alloc_mem_3040 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1574 -> quotearg_alloc_mem_1574 and quotearg_alloc_mem_3041 -> quotearg_alloc_mem_3041

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1574 -> quotearg_alloc_mem_1574 and quotearg_alloc_mem_3041 -> quotearg_alloc_mem_3041 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1575 -> quotearg_alloc_mem_1578 and quotearg_alloc_mem_3042 -> quotearg_alloc_mem_3045

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1575 -> quotearg_alloc_mem_1578 and quotearg_alloc_mem_3042 -> quotearg_alloc_mem_3045 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1579 -> quotearg_alloc_mem_1579 and quotearg_alloc_mem_3046 -> quotearg_alloc_mem_3046

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1579 -> quotearg_alloc_mem_1579 and quotearg_alloc_mem_3046 -> quotearg_alloc_mem_3046 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1580 -> quotearg_alloc_mem_1590 and quotearg_alloc_mem_3047 -> quotearg_alloc_mem_3057

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1580 -> quotearg_alloc_mem_1590 and quotearg_alloc_mem_3047 -> quotearg_alloc_mem_3057 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1591 -> quotearg_alloc_mem_1591 and quotearg_alloc_mem_3058 -> quotearg_alloc_mem_3058

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1591 -> quotearg_alloc_mem_1591 and quotearg_alloc_mem_3058 -> quotearg_alloc_mem_3058 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1592 -> quotearg_alloc_mem_1598 and quotearg_alloc_mem_3059 -> quotearg_alloc_mem_3065

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
SA || [Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
SA || ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
SB || [Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
SB || ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1592 -> quotearg_alloc_mem_1598 and quotearg_alloc_mem_3059 -> quotearg_alloc_mem_3065 have been verified to do the same.

same_behavior for the nodes: .label_165 -> quotearg_alloc_mem_1609 and .label_210 -> quotearg_alloc_mem_3076

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value(2,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
 A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_165 -> quotearg_alloc_mem_1609 and .label_210 -> quotearg_alloc_mem_3076 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1599 -> quotearg_alloc_mem_1599 and quotearg_alloc_mem_3066 -> quotearg_alloc_mem_3066

same_behavior checking these two SStates:

SA || [Reg: RAX,8] := Reg: RBX

SB || [Reg: RAX,8] := Reg: RBX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1599 -> quotearg_alloc_mem_1599 and quotearg_alloc_mem_3066 -> quotearg_alloc_mem_3066 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (27/87): "quotearg_alloc"
--------
.dot code for CFG of text section quotearg_alloc for Vanilla
diGraph quotearg_alloc_Vanilla{
	quotearg_alloc_0  [label="[quotearg_alloc_mem_1599,quotearg_alloc_mem_1599]"]
	quotearg_alloc_1  [label="[.label_165,quotearg_alloc_mem_1609]"]
	quotearg_alloc_2  [label="[quotearg_alloc,quotearg_alloc_mem_1554]"]
	quotearg_alloc_3  [label="[quotearg_alloc_mem_1555,quotearg_alloc_mem_1555]"]
	quotearg_alloc_4  [label="[quotearg_alloc_mem_1556,quotearg_alloc_mem_1573]"]
	quotearg_alloc_5  [label="[quotearg_alloc_mem_1574,quotearg_alloc_mem_1574]"]
	quotearg_alloc_6  [label="[quotearg_alloc_mem_1575,quotearg_alloc_mem_1578]"]
	quotearg_alloc_7  [label="[quotearg_alloc_mem_1579,quotearg_alloc_mem_1579]"]
	quotearg_alloc_8  [label="[quotearg_alloc_mem_1580,quotearg_alloc_mem_1590]"]
	quotearg_alloc_9  [label="[quotearg_alloc_mem_1591,quotearg_alloc_mem_1591]"]
	quotearg_alloc_10  [label="[quotearg_alloc_mem_1592,quotearg_alloc_mem_1598]"]

	quotearg_alloc_0 -> quotearg_alloc_1;

	quotearg_alloc_2 -> quotearg_alloc_3;
	quotearg_alloc_3 -> quotearg_alloc_4;
	quotearg_alloc_4 -> quotearg_alloc_5;
	quotearg_alloc_5 -> quotearg_alloc_6;
	quotearg_alloc_6 -> quotearg_alloc_7;
	quotearg_alloc_7 -> quotearg_alloc_8;
	quotearg_alloc_8 -> quotearg_alloc_9;
	quotearg_alloc_9 -> quotearg_alloc_10;
	quotearg_alloc_10 -> quotearg_alloc_1 [label="ZF"];
	quotearg_alloc_10 -> quotearg_alloc_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quotearg_alloc for Randomized
diGraph quotearg_alloc_Randomized{
	quotearg_alloc_0  [label="[quotearg_alloc_mem_3066,quotearg_alloc_mem_3066]"]
	quotearg_alloc_1  [label="[.label_210,quotearg_alloc_mem_3076]"]
	quotearg_alloc_2  [label="[quotearg_alloc,quotearg_alloc_mem_3021]"]
	quotearg_alloc_3  [label="[quotearg_alloc_mem_3022,quotearg_alloc_mem_3022]"]
	quotearg_alloc_4  [label="[quotearg_alloc_mem_3023,quotearg_alloc_mem_3040]"]
	quotearg_alloc_5  [label="[quotearg_alloc_mem_3041,quotearg_alloc_mem_3041]"]
	quotearg_alloc_6  [label="[quotearg_alloc_mem_3042,quotearg_alloc_mem_3045]"]
	quotearg_alloc_7  [label="[quotearg_alloc_mem_3046,quotearg_alloc_mem_3046]"]
	quotearg_alloc_8  [label="[quotearg_alloc_mem_3047,quotearg_alloc_mem_3057]"]
	quotearg_alloc_9  [label="[quotearg_alloc_mem_3058,quotearg_alloc_mem_3058]"]
	quotearg_alloc_10  [label="[quotearg_alloc_mem_3059,quotearg_alloc_mem_3065]"]

	quotearg_alloc_0 -> quotearg_alloc_1;

	quotearg_alloc_2 -> quotearg_alloc_3;
	quotearg_alloc_3 -> quotearg_alloc_4;
	quotearg_alloc_4 -> quotearg_alloc_5;
	quotearg_alloc_5 -> quotearg_alloc_6;
	quotearg_alloc_6 -> quotearg_alloc_7;
	quotearg_alloc_7 -> quotearg_alloc_8;
	quotearg_alloc_8 -> quotearg_alloc_9;
	quotearg_alloc_9 -> quotearg_alloc_10;
	quotearg_alloc_10 -> quotearg_alloc_1 [label="ZF"];
	quotearg_alloc_10 -> quotearg_alloc_0 [label="!ZF"];
}
--------
Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_alloc"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RAX := Reg: RDX, RBX := Value: 0, RCX := Reg: RDX, RDX := Value: 0, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Value: 0, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 3:
RAX := __errno_location@()
node 4:
RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 7:
RAX := xcharalloc@()
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
[Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RS(2,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(1,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(6,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(7,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(8,RSP == (Var: RSP0 - Value: 88) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(9,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4])),(10,RSP == (Var: RSP0 - Value: 120) && RBP == OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]))])
P0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])
--------

Starting Node: 2

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 --ZF--> 1, 10 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_alloc"
node 0:
[Reg: RAX,8] := Reg: RBX
node 1:
RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 2:
RAX := Reg: RDX, RBX := Value: 0, RCX := Reg: RDX, RDX := Value: 0, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4])
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Value: 0, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 3:
RAX := __errno_location@()
node 4:
RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := quotearg_buffer_restyled@()
node 6:
RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)
node 7:
RAX := xcharalloc@()
node 8:
RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
[(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)
node 9:
RAX := quotearg_buffer_restyled@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
[Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])
--------

same_behavior for the nodes: quotearg_alloc -> quotearg_alloc_mem_1554 and quotearg_alloc -> quotearg_alloc_mem_3021

same_behavior checking these two SStates:

SA || RAX := Reg: RDX, RBX := Value: 0, RCX := Reg: RDX, RDX := Value: 0, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4])
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Value: 0, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || RAX := Reg: RDX, RBX := Value: 0, RCX := Reg: RDX, RDX := Value: 0, R15 := Reg: RDI, R14 := Reg: RSI, R12 := (if (Reg: RDX != Value: 0) then Reg: RDX else Dereference: [Var: default_quoting_options,4])
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 64),8] := Value: 0, [(Var: RSP0 - Value: 72),8] := Reg: RSI, [(Var: RSP0 - Value: 80),8] := Reg: RDI
SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDX,E_val 0 (-1)]) (E_reg RDX) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc -> quotearg_alloc_mem_1554 and quotearg_alloc -> quotearg_alloc_mem_3021 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1555 -> quotearg_alloc_mem_1555 and quotearg_alloc_mem_3022 -> quotearg_alloc_mem_3022

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1555 -> quotearg_alloc_mem_1555 and quotearg_alloc_mem_3022 -> quotearg_alloc_mem_3022 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1556 -> quotearg_alloc_mem_1573 and quotearg_alloc_mem_3023 -> quotearg_alloc_mem_3040

same_behavior checking these two SStates:

SA || RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RCX := Reg: R14, RDX := Reg: R15, RDI := Value: 0, RSI := Value: 0, R13 := (Reg: R12 + Value: 8), R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 56),8] := Reg: RAX, [(Var: RSP0 - Value: 84),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := (Reg: R12 + Value: 8)
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Value B:
E_app (Op ADD) [E_reg R12,E_val 8 64]
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_app (Op ADD) [E_reg R12,E_val 8 64]
E_app (Op ADD) [E_reg R12,E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1556 -> quotearg_alloc_mem_1573 and quotearg_alloc_mem_3023 -> quotearg_alloc_mem_3040 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1574 -> quotearg_alloc_mem_1574 and quotearg_alloc_mem_3041 -> quotearg_alloc_mem_3041

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1574 -> quotearg_alloc_mem_1574 and quotearg_alloc_mem_3041 -> quotearg_alloc_mem_3041 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1575 -> quotearg_alloc_mem_1578 and quotearg_alloc_mem_3042 -> quotearg_alloc_mem_3045

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
SA || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

SB || RBX := Reg: RAX, RDI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1)
SB || ZF := (Var: RSP0 - Value: 88), CF := (Var: RSP0 - Value: 88), SF := (Var: RSP0 - Value: 88), OF := (Var: RSP0 - Value: 88), PF := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1575 -> quotearg_alloc_mem_1578 and quotearg_alloc_mem_3042 -> quotearg_alloc_mem_3045 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1579 -> quotearg_alloc_mem_1579 and quotearg_alloc_mem_3046 -> quotearg_alloc_mem_3046

same_behavior checking these two SStates:

SA || RAX := xcharalloc@()

SB || RAX := xcharalloc@()

Resulting values:
Value A:
E_app (F2 "xcharalloc" "") []
Value B:
E_app (F2 "xcharalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1579 -> quotearg_alloc_mem_1579 and quotearg_alloc_mem_3046 -> quotearg_alloc_mem_3046 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1580 -> quotearg_alloc_mem_1590 and quotearg_alloc_mem_3047 -> quotearg_alloc_mem_3057

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SA || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
SA || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

SB || RCX := Dereference: [(Var: RSP0 - Value: 72),8], RDX := Dereference: [(Var: RSP0 - Value: 80),8], RDI := Reg: RAX, RSI := Reg: R15, R14 := Reg: RAX, R9 := OR((if (Reg: RBX == Value: 0) then Value: 1 else Value: 0),Dereference: [(Reg: R12 + Value: 4),4]), R8 := Dereference: [Reg: R12,4]
SB || [(Var: RSP0 - Value: 104),8] := Dereference: [(Reg: R12 + Value: 48),8], [(Var: RSP0 - Value: 112),8] := Dereference: [(Reg: R12 + Value: 40),8], [(Var: RSP0 - Value: 120),8] := Reg: R13
SB || ZF := (Var: RSP0 - Value: 96), CF := (Var: RSP0 - Value: 96), SF := (Var: RSP0 - Value: 96), OF := (Var: RSP0 - Value: 96), PF := (Var: RSP0 - Value: 96)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Value B:
E_app (Op OR) [E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_val 1 32) (E_val 0 32),E_deref (E_app (Op ADD) [E_reg R12,E_val 4 64]) 4]
Resulting values:
Value A:
E_deref (E_reg R12) 4
Value B:
E_deref (E_reg R12) 4
Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 112 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_reg R12,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1580 -> quotearg_alloc_mem_1590 and quotearg_alloc_mem_3047 -> quotearg_alloc_mem_3057 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1591 -> quotearg_alloc_mem_1591 and quotearg_alloc_mem_3058 -> quotearg_alloc_mem_3058

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1591 -> quotearg_alloc_mem_1591 and quotearg_alloc_mem_3058 -> quotearg_alloc_mem_3058 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1592 -> quotearg_alloc_mem_1598 and quotearg_alloc_mem_3059 -> quotearg_alloc_mem_3065

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
SA || [Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
SA || ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])

SB || RAX := Dereference: [(Var: RSP0 - Value: 64),8], RCX := Dereference: [(Var: RSP0 - Value: 84),4], RDX := Dereference: [(Var: RSP0 - Value: 56),8]
SB || [Dereference: [(Var: RSP0 - Value: 56),8],4] := Dereference: [(Var: RSP0 - Value: 84),4]
SB || ZF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), CF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), SF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), OF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8]), PF := TEST(Dereference: [(Var: RSP0 - Value: 64),8],Dereference: [(Var: RSP0 - Value: 64),8])

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 64 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 8
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 84 64]) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1592 -> quotearg_alloc_mem_1598 and quotearg_alloc_mem_3059 -> quotearg_alloc_mem_3065 have been verified to do the same.

same_behavior for the nodes: .label_165 -> quotearg_alloc_mem_1609 and .label_210 -> quotearg_alloc_mem_3076

same_behavior checking these two SStates:

SA || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Reg: R14, RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4])])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4]),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Dereference: [Reg: RAX,4])])
 A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_165 -> quotearg_alloc_mem_1609 and .label_210 -> quotearg_alloc_mem_3076 have been verified to do the same.

same_behavior for the nodes: quotearg_alloc_mem_1599 -> quotearg_alloc_mem_1599 and quotearg_alloc_mem_3066 -> quotearg_alloc_mem_3066

same_behavior checking these two SStates:

SA || [Reg: RAX,8] := Reg: RBX

SB || [Reg: RAX,8] := Reg: RBX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_alloc_mem_1599 -> quotearg_alloc_mem_1599 and quotearg_alloc_mem_3066 -> quotearg_alloc_mem_3066 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 112) <--> (Var: RSP0 - Value: 112)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 84) <--> (Var: RSP0 - Value: 84)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 64) <--> (Var: RSP0 - Value: 64)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (28/87): "clone_quoting_options"
--------
.dot code for CFG of text section clone_quoting_options for Vanilla
diGraph clone_quoting_options_Vanilla{
	clone_quoting_options_0  [label="[clone_quoting_options,clone_quoting_options_343]"]
	clone_quoting_options_1  [label="[clone_quoting_options_344,clone_quoting_options_344]"]
	clone_quoting_options_2  [label="[clone_quoting_options_345,clone_quoting_options_351]"]
	clone_quoting_options_3  [label="[clone_quoting_options_352,clone_quoting_options_352]"]
	clone_quoting_options_4  [label="[clone_quoting_options_353,clone_quoting_options_357]"]

	clone_quoting_options_0 -> clone_quoting_options_1;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;

}
--------
--------
.dot code for CFG of text section clone_quoting_options for Randomized
diGraph clone_quoting_options_Randomized{
	clone_quoting_options_0  [label="[clone_quoting_options,clone_quoting_options_2299]"]
	clone_quoting_options_1  [label="[clone_quoting_options_2300,clone_quoting_options_2300]"]
	clone_quoting_options_2  [label="[clone_quoting_options_2301,clone_quoting_options_2307]"]
	clone_quoting_options_3  [label="[clone_quoting_options_2308,clone_quoting_options_2308]"]
	clone_quoting_options_4  [label="[clone_quoting_options_2309,clone_quoting_options_2313]"]

	clone_quoting_options_0 -> clone_quoting_options_1;
	clone_quoting_options_1 -> clone_quoting_options_2;
	clone_quoting_options_2 -> clone_quoting_options_3;
	clone_quoting_options_3 -> clone_quoting_options_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "clone_quoting_options"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xmemdup@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[Reg: R14,4] := Dereference: [Reg: RAX,4]
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "clone_quoting_options"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := __errno_location@()
node 2:
RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xmemdup@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[Reg: R14,4] := Dereference: [Reg: RAX,4]
--------

same_behavior for the nodes: clone_quoting_options -> clone_quoting_options_343 and clone_quoting_options -> clone_quoting_options_2299

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options -> clone_quoting_options_343 and clone_quoting_options -> clone_quoting_options_2299 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_344 -> clone_quoting_options_344 and clone_quoting_options_2300 -> clone_quoting_options_2300

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_344 -> clone_quoting_options_344 and clone_quoting_options_2300 -> clone_quoting_options_2300 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_345 -> clone_quoting_options_351 and clone_quoting_options_2301 -> clone_quoting_options_2307

same(8,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0)])
(8,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0)])
_behavior checking these two SStates:

SA || RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || RAX := Dereference: [Var: default_quoting_options,4], RBX := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RDI := (if (Reg: RBX == Value: 0) then Dereference: [Var: default_quoting_options,4] else Reg: RBX), RSI := Value: 56, R14 := Reg: RAX
SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Resulting values:
Value A:
E_deref (E_var "default_quoting_options" 64) 4
Value B:
E_deref (E_var "default_quoting_options" 64) 4
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Value B:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Value B:
E_ite (E_app (F ==) [E_reg RBX,E_val 0 (-1)]) (E_deref (E_var "default_quoting_options" 64) 4) (E_reg RBX)
Resulting values:
Value A:
E_val 56 32
Value B:
E_val 56 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_345 -> clone_quoting_options_351 and clone_quoting_options_2301 -> clone_quoting_options_2307 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_352 -> clone_quoting_options_352 and clone_quoting_options_2308 -> clone_quoting_options_2308

same_behavior checking these two SStates:

SA || RAX := xmemdup@()

SB || RAX := xmemdup@()

Resulting values:
Value A:
E_app (F2 "xmemdup" "") []
Value B:
E_app (F2 "xmemdup" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes clone_quoting_options_352 -> clone_quoting_options_352 and clone_quoting_options_2308 -> clone_quoting_options_2308 have been verified to do the same.

same_behavior for the nodes: clone_quoting_options_353 -> clone_quoting_options_357 and clone_quoting_options_2309 -> clone_quoting_options_2313

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [Reg: R14,4] := Dereference: [Reg: RAX,4]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [Reg: R14,4] := Dereference: [Reg: RAX,4]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R14
E_reg R14
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True


Mem Chk: True
Result: Success
Nodes clone_quoting_options_353 -> clone_quoting_options_357 and clone_quoting_options_2309 -> clone_quoting_options_2313 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (29/87): "rpl_fflush"
--------
.dot code for CFG of text section rpl_fflush for Vanilla
diGraph rpl_fflush_Vanilla{
	rpl_fflush_0  [label="[rpl_fflush_3740,rpl_fflush_3740]"]
	rpl_fflush_1  [label="[rpl_fflush_3741,rpl_fflush_3741]"]
	rpl_fflush_2  [label="[rpl_fflush_3736,rpl_fflush_3736]"]
	rpl_fflush_3  [label="[rpl_fflush_3737,rpl_fflush_3737]"]
	rpl_fflush_4  [label="[rpl_fflush_3738,rpl_fflush_3739]"]
	rpl_fflush_5  [label="[.label_280,rpl_fflush_3744]"]
	rpl_fflush_6  [label="[rpl_fflush_3745,rpl_fflush_3745]"]
	rpl_fflush_7  [label="[rpl_fflush_3745_ret,rpl_fflush_3745_ret]"]
	rpl_fflush_8  [label="[rpl_fflush,rpl_fflush_3735]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_5;
	rpl_fflush_2 -> rpl_fflush_3;
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_5 [label="ZF"];
	rpl_fflush_4 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_5 -> rpl_fflush_6;
	rpl_fflush_6 -> rpl_fflush_7;

	rpl_fflush_8 -> rpl_fflush_5 [label="ZF"];
	rpl_fflush_8 -> rpl_fflush_2 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fflush for Randomized
diGraph rpl_fflush_Randomized{
	rpl_fflush_0  [label="[rpl_fflush_2812,rpl_fflush_2812]"]
	rpl_fflush_1  [label="[rpl_fflush_2813,rpl_fflush_2813]"]
	rpl_fflush_2  [label="[rpl_fflush_2808,rpl_fflush_2808]"]
	rpl_fflush_3  [label="[rpl_fflush_2809,rpl_fflush_2809]"]
	rpl_fflush_4  [label="[rpl_fflush_2810,rpl_fflush_2811]"]
	rpl_fflush_5  [label="[.label_204,rpl_fflush_2816]"]
	rpl_fflush_6  [label="[rpl_fflush_2817,rpl_fflush_2817]"]
	rpl_fflush_7  [label="[rpl_fflush_2817_ret,rpl_fflush_2817_ret]"]
	rpl_fflush_8  [label="[rpl_fflush,rpl_fflush_2807]"]

	rpl_fflush_0 -> rpl_fflush_1;
	rpl_fflush_1 -> rpl_fflush_5;
	rpl_fflush_2 -> rpl_fflush_3;
	rpl_fflush_3 -> rpl_fflush_4;
	rpl_fflush_4 -> rpl_fflush_5 [label="ZF"];
	rpl_fflush_4 -> rpl_fflush_0 [label="!ZF"];
	rpl_fflush_5 -> rpl_fflush_6;
	rpl_fflush_6 -> rpl_fflush_7;

	rpl_fflush_8 -> rpl_fflush_5 [label="ZF"];
	rpl_fflush_8 -> rpl_fflush_2 [label="!ZF"];
}
--------
Starting Node: 8

Edges: 0 ----> 1, 1 ----> 5, 2 ----> 3, 3 ----> 4, 4 --ZF--> 5, 4 --!ZF--> 0, 5 ----> 6, 6 ----> 7, , 8 --ZF--> 5, 8 --!ZF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fflush"
node 0:
RDI := Reg: RBX
node 1:
RAX := clear_ungetc_buffer_preserving_position@()
node 2:
RDI := Reg: RBX
node 3:
RAX := __freading@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX
node 6:
RAX := fflush@()
node 7:
skip'
node 8:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 8

Edges: 0 ----> 1, 1 ----> 5, 2 ----> 3, 3 ----> 4, 4 --ZF--> 5, 4 --!ZF--> 0, 5 ----> 6, 6 ----> 7, , 8 --ZF--> 5, 8 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fflush"
node 0:
RDI := Reg: RBX
node 1:
RAX := clear_ungetc_buffer_preserving_position@()
node 2:
RDI := Reg: RBX
node 3:
RAX := __freading@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX
node 6:
RAX := fflush@()
node 7:
skip'
node 8:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: rpl_fflush -> rpl_fflush_3735 and rpl_fflush -> rpl_fflush_2807

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: R(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
SP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fflush -> rpl_fflush_3735 and rpl_fflush -> rpl_fflush_2807 have been verified to do the same.

same_behavior for the nodes: .label_280 -> rpl_fflush_3744 and .label_204 -> rpl_fflush_2816

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RBX

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_280 -> rpl_fflush_3744 and .label_204 -> rpl_fflush_2816 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3745 -> rpl_fflush_3745 and rpl_fflush_2817 -> rpl_fflush_2817

same_behavior checking these two SStates:

SA || RAX := fflush@()

SB || RAX := fflush@()

Resulting values:
Value A:
E_app (F2 "fflush" "") []
Value B:
E_app (F2 "fflush" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3745 -> rpl_fflush_3745 and rpl_fflush_2817 -> rpl_fflush_2817 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3745_ret -> rpl_fflush_3745_ret and rpl_fflush_2817_ret -> rpl_fflush_2817_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3745_ret -> rpl_fflush_3745_ret and rpl_fflush_2817_ret -> rpl_fflush_2817_ret have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3736 -> rpl_fflush_3736 and rpl_fflush_2808 -> rpl_fflush_2808

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3736 -> rpl_fflush_3736 and rpl_fflush_2808 -> rpl_fflush_2808 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3737 -> rpl_fflush_3737 and rpl_fflush_2809 -> rpl_fflush_2809

same_behavior checking these two SStates:

SA || RAX := __freading@()

SB || RAX := __freading@()

Resulting values:
Value A:
E_app (F2 "__freading" "") []
Value B:
E_app (F2 "__freading" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3737 -> rpl_fflush_3737 and rpl_fflush_2809 -> rpl_fflush_2809 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3738 -> rpl_fflush_3739 and rpl_fflush_2810 -> rpl_fflush_2811

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3738 -> rpl_fflush_3739 and rpl_fflush_2810 -> rpl_fflush_2811 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3740 -> rpl_fflush_3740 and rpl_fflush_2812 -> rpl_fflush_2812

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3740 -> rpl_fflush_3740 and rpl_fflush_2812 -> rpl_fflush_2812 have been verified to do the same.

same_behavior for the nodes: rpl_fflush_3741 -> rpl_fflush_3741 and rpl_fflush_2813 -> rpl_fflush_2813

same_behavior checking these two SStates:

SA || RAX := clear_ungetc_buffer_preserving_position@()

SB || RAX := clear_ungetc_buffer_preserving_position@()

Resulting values:
Value A:
E_app (F2 "clear_ungetc_buffer_preserving_position" "") []
Value B:
E_app (F2 "clear_ungetc_buffer_preserving_position" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fflush_3741 -> rpl_fflush_3741 and rpl_fflush_2813 -> rpl_fflush_2813 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (30/87): "locale_charset"
--------
.dot code for CFG of text section locale_charset for Vanilla
diGraph locale_charset_Vanilla{
	locale_charset_0  [label="[locale_charset,locale_charset_3662]"]
	locale_charset_1  [label="[locale_charset_3663,locale_charset_3663]"]
	locale_charset_2  [label="[locale_charset_3664,locale_charset_3671]"]

	locale_charset_0 -> locale_charset_1;
	locale_charset_1 -> locale_charset_2;

}
--------
--------
.dot code for CFG of text section locale_charset for Randomized
diGraph locale_charset_Randomized{
	locale_charset_0  [label="[locale_charset,locale_charset_3093]"]
	locale_charset_1  [label="[locale_charset_3094,locale_charset_3094]"]
	locale_charset_2  [label="[locale_charset_3095,locale_charset_3102]"]

	locale_charset_0 -> locale_charset_1;
	locale_charset_1 -> locale_charset_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "locale_charset"
node 0:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := rpl_nl_langinfo@()
node 2:
RAX := (if (Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1] != Value: 0) then (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]) else Dereference: [Var: label_276,4]), RCX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "locale_charset"
node 0:
RDI := Value: 14
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := rpl_nl_langinfo@()
node 2:
RAX := (if (Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1] != Value: 0) then (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]) else Dereference: [Var: label_211,4]), RCX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: la(6,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0)])
bel_152,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0)
--------

same_behavior for the nodes: locale_charset -> locale_charset_3662 and locale_charset -> locale_charset_3093

same_behavior checking these two SStates:

SA || RDI := Value: 14
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || RDI := Value: 14
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Resulting values:
Value A:
E_val 14 32
Value B:
E_val 14 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes locale_charset -> locale_charset_3662 and locale_charset -> locale_charset_3093 have been verified to do the same.

same_behavior for the nodes: locale_charset_3663 -> locale_charset_3663 and locale_charset_3094 -> locale_charset_3094

same_behavior checking these two SStates:

SA || RAX := rpl_nl_langinfo@()

SB || RAX := rpl_nl_langinfo@()

Resulting values:
Value A:
E_app (F2 "rpl_nl_langinfo" "") []
Value B:
E_app (F2 "rpl_nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_3663 -> locale_charset_3663 and locale_charset_3094 -> locale_charset_3094 have been verified to do the same.

same_behavior for the nodes: locale_charset_3664 -> locale_charset_3671 and locale_charset_3095 -> locale_charset_3102

same_behavior checking these two SStates:

SA || RAX := (if (Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1] != Value: 0) then (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]) else Dereference: [Var: label_276,4]), RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_28,4]),1],Value: 0)

SB || RAX := (if (Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1] != Value: 0) then (if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]) else Dereference: [Var: label_211,4]), RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), CF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), SF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), OF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0), PF := CMP(Dereference: [(if (Reg: RAX != Value: 0) then Reg: RAX else Dereference: [Var: label_152,4]),1],Value: 0)

Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var "label_28" 64) 4)) 1,E_val 0 8]) (E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var "label_28" 64) 4)) (E_deref (E_var "label_276" 64) 4)
Value B:
E_ite (E_app (F !=) [E_deref (E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var "label_152" 64) 4)) 1,E_val 0 8]) (E_ite (E_app (F !=) [E_reg RAX,E_val 0 (-1)]) (E_reg RAX) (E_deref (E_var "label_152" 64) 4)) (E_deref (E_var "label_211" 64) 4)
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes locale_charset_3664 -> locale_charset_3671 and locale_charset_3095 -> locale_charset_3102 have been verified to do the same.

Label relationship:
label_276 <--> label_211
label_28 <--> label_152
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (31/87): "rpl_mbrtowc"
--------
.dot code for CFG of text section rpl_mbrtowc for Vanilla
diGraph rpl_mbrtowc_Vanilla{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_3338,rpl_mbrtowc_3340]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_3334,rpl_mbrtowc_3334]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_3335,rpl_mbrtowc_3335]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_3336,rpl_mbrtowc_3337]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_3332,rpl_mbrtowc_3333]"]
	rpl_mbrtowc_5  [label="[.label_259,rpl_mbrtowc_3348]"]
	rpl_mbrtowc_6  [label="[rpl_mbrtowc,rpl_mbrtowc_3327]"]
	rpl_mbrtowc_7  [label="[rpl_mbrtowc_3328,rpl_mbrtowc_3328]"]
	rpl_mbrtowc_8  [label="[rpl_mbrtowc_3329,rpl_mbrtowc_3331]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_5;
	rpl_mbrtowc_1 -> rpl_mbrtowc_2;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_5 [label="!ZF"];
	rpl_mbrtowc_3 -> rpl_mbrtowc_0 [label="ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_5 [label="CF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="!CF"];

	rpl_mbrtowc_6 -> rpl_mbrtowc_7;
	rpl_mbrtowc_7 -> rpl_mbrtowc_8;
	rpl_mbrtowc_8 -> rpl_mbrtowc_5 [label="ZF"];
	rpl_mbrtowc_8 -> rpl_mbrtowc_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_mbrtowc for Randomized
diGraph rpl_mbrtowc_Randomized{
	rpl_mbrtowc_0  [label="[rpl_mbrtowc_2533,rpl_mbrtowc_2535]"]
	rpl_mbrtowc_1  [label="[rpl_mbrtowc_2529,rpl_mbrtowc_2529]"]
	rpl_mbrtowc_2  [label="[rpl_mbrtowc_2530,rpl_mbrtowc_2530]"]
	rpl_mbrtowc_3  [label="[rpl_mbrtowc_2531,rpl_mbrtowc_2532]"]
	rpl_mbrtowc_4  [label="[rpl_mbrtowc_2527,rpl_mbrtowc_2528]"]
	rpl_mbrtowc_5  [label="[.label_191,rpl_mbrtowc_2543]"]
	rpl_mbrtowc_6  [label="[rpl_mbrtowc,rpl_mbrtowc_2522]"]
	rpl_mbrtowc_7  [label="[rpl_mbrtowc_2523,rpl_mbrtowc_2523]"]
	rpl_mbrtowc_8  [label="[rpl_mbrtowc_2524,rpl_mbrtowc_2526]"]

	rpl_mbrtowc_0 -> rpl_mbrtowc_5;
	rpl_mbrtowc_1 -> rpl_mbrtowc_2;
	rpl_mbrtowc_2 -> rpl_mbrtowc_3;
	rpl_mbrtowc_3 -> rpl_mbrtowc_5 [label="!ZF"];
	rpl_mbrtowc_3 -> rpl_mbrtowc_0 [label="ZF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_5 [label="CF"];
	rpl_mbrtowc_4 -> rpl_mbrtowc_1 [label="!CF"];

	rpl_mbrtowc_6 -> rpl_mbrtowc_7;
	rpl_mbrtowc_7 -> rpl_mbrtowc_8;
	rpl_mbrtowc_8 -> rpl_mbrtowc_5 [label="ZF"];
	rpl_mbrtowc_8 -> rpl_mbrtowc_4 [label="!ZF"];
}
--------
Starting Node: 6

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, 3 --!ZF--> 5, 3 --ZF--> 0, 4 --CF--> 5, 4 --!CF--> 1, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_mbrtowc"
node 0:
RAX := Dereference: [Reg: R14,1], R15 := Value: 1
[Reg: RBX,4] := Dereference: [Reg: R14,1]
node 1:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := hard_locale@()
node 3:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 4:
ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)
node 5:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 6:
RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != V(6,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 40) && RBP == Var: RBP0)])
alue: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 7:
RAX := mbrtowc@()
node 8:
R15 := Reg: RAX
ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)
--------

Starting Node: 6

Edges: 0 ----> 5, 1 ----> 2, 2 ----> 3, 3 --!ZF--> 5, 3 --ZF--> 0, 4 --CF--> 5, 4 --!CF--> 1, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_mbrtowc"
node 0:
RAX := Dereference: [Reg: R14,1], R15 := Value: 1
[Reg: RBX,4] := Dereference: [Reg: R14,1]
node 1:
RDI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := hard_locale@()
node 3:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 4:
ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)
node 5:
RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 6:
RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 7:
RAX := mbrtowc@()
node 8:
R15 := Reg: RAX
ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)
--------

same_behavior for the nodes: rpl_mbrtowc -> rpl_mbrtowc_3327 and rpl_mbrtowc -> rpl_mbrtowc_2522

same_behavior checking these two SStates:

SA || RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), RDI := (if (Reg: RDI != Value: 0) then Reg: RDI else (Var: RSP0 - Value: 36)), R14 := Reg: RSI, R12 := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: R12, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
local_var_cmp called

Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_app (Op SUB) [E_var "RSP0" 64,E_val 36 64])
local_var_cmp called

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc -> rpl_mbrtowc_3327 and rpl_mbrtowc -> rpl_mbrtowc_2522 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3328 -> rpl_mbrtowc_3328 and rpl_mbrtowc_2523 -> rpl_mbrtowc_2523

same_behavior checking these two SStates:

SA || RAX := mbrtowc@()

SB || RAX := mbrtowc@()

Resulting values:
Value A:
E_app (F2 "mbrtowc" "") []
Value B:
E_app (F2 "mbrtowc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3328 -> rpl_mbrtowc_3328 and rpl_mbrtowc_2523 -> rpl_mbrtowc_2523 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3329 -> rpl_mbrtowc_3331 and rpl_mbrtowc_2524 -> rpl_mbrtowc_2526

same_behavior checking these two SStates:

SA || R15 := Reg: RAX
SA || ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)

SB || R15 := Reg: RAX
SB || ZF := TEST(Reg: R12,Reg: R12), CF := TEST(Reg: R12,Reg: R12), SF := TEST(Reg: R12,Reg: R12), OF := TEST(Reg: R12,Reg: R12), PF := TEST(Reg: R12,Reg: R12)

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3329 -> rpl_mbrtowc_3331 and rpl_mbrtowc_2524 -> rpl_mbrtowc_2526 have been verified to do the same.

same_behavior for the nodes: .label_259 -> rpl_mbrtowc_3348 and .label_191 -> rpl_mbrtowc_2543

same_behavior checking these two SStates:

SA || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RAX := Reg: R15, RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Deref(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
erence: [(Var: RSP0 - Value: 16),8], R12 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_259 -> rpl_mbrtowc_3348 and .label_191 -> rpl_mbrtowc_2543 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3332 -> rpl_mbrtowc_3333 and rpl_mbrtowc_2527 -> rpl_mbrtowc_2528

same_behavior checking these two SStates:

SA || ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)

SB || ZF := CMP(Reg: R15,Value: 18446744073709551614), CF := CMP(Reg: R15,Value: 18446744073709551614), SF := CMP(Reg: R15,Value: 18446744073709551614), OF := CMP(Reg: R15,Value: 18446744073709551614), PF := CMP(Reg: R15,Value: 18446744073709551614)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3332 -> rpl_mbrtowc_3333 and rpl_mbrtowc_2527 -> rpl_mbrtowc_2528 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3334 -> rpl_mbrtowc_3334 and rpl_mbrtowc_2529 -> rpl_mbrtowc_2529

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3334 -> rpl_mbrtowc_3334 and rpl_mbrtowc_2529 -> rpl_mbrtowc_2529 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3335 -> rpl_mbrtowc_3335 and rpl_mbrtowc_2530 -> rpl_mbrtowc_2530

same_behavior checking these two SStates:

SA || RAX := hard_locale@()

SB || RAX := hard_locale@()

Resulting values:
Value A:
E_app (F2 "hard_locale" "") []
Value B:
E_app (F2 "hard_locale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3335 -> rpl_mbrtowc_3335 and rpl_mbrtowc_2530 -> rpl_mbrtowc_2530 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3336 -> rpl_mbrtowc_3337 and rpl_mbrtowc_2531 -> rpl_mbrtowc_2532

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3336 -> rpl_mbrtowc_3337 and rpl_mbrtowc_2531 -> rpl_mbrtowc_2532 have been verified to do the same.

same_behavior for the nodes: rpl_mbrtowc_3338 -> rpl_mbrtowc_3340 and rpl_mbrtowc_2533 -> rpl_mbrtowc_2535

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R14,1], R15 := Value: 1
SA || [Reg: RBX,4] := Dereference: [Reg: R14,1]

SB || RAX := Dereference: [Reg: R14,1], R15 := Value: 1
SB || [Reg: RBX,4] := Dereference: [Reg: R14,1]

Resulting values:
Value A:
E_deref (E_reg R14) 1
Value B:
E_deref (E_reg R14) 1
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_deref (E_reg R14) 1
E_deref (E_reg R14) 1
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_mbrtowc_3338 -> rpl_mbrtowc_3340 and rpl_mbrtowc_2533 -> rpl_mbrtowc_2535 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 36) <--> (Var: RSP0 - Value: 36)

Succesful check!
Considering text section (32/87): "xstrdup"
--------
.dot code for CFG of text section xstrdup for Vanilla
diGraph xstrdup_Vanilla{
	xstrdup_0  [label="[xstrdup,xstrdup_3249]"]
	xstrdup_1  [label="[xstrdup_3250,xstrdup_3250]"]
	xstrdup_2  [label="[xstrdup_3251,xmemdup_3228]"]
	xstrdup_3  [label="[xmemdup_3229,xmemdup_3229]"]
	xstrdup_4  [label="[xmemdup_3230,xmemdup_3233]"]
	xstrdup_5  [label="[xmemdup_3234,xmemdup_3234]"]
	xstrdup_6  [label="[xmemdup_3235,xmemdup_3239]"]

	xstrdup_0 -> xstrdup_1;
	xstrdup_1 -> xstrdup_2;
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;
	xstrdup_4 -> xstrdup_5;
	xstrdup_5 -> xstrdup_6;

}
--------
--------
.dot code for CFG of text section xstrdup for Randomized
diGraph xstrdup_Randomized{
	xstrdup_0  [label="[xstrdup,xstrdup_292]"]
	xstrdup_1  [label="[xstrdup_293,xstrdup_293]"]
	xstrdup_2  [label="[xstrdup_294,xmemdup_264]"]
	xstrdup_3  [label="[xmemdup_265,xmemdup_265]"]
	xstrdup_4  [label="[xmemdup_266,xmemdup_269]"]
	xstrdup_5  [label="[xmemdup_270,xmemdup_270]"]
	xstrdup_6  [label="[xmemdup_271,xmemdup_275]"]

	xstrdup_0 -> xstrdup_1;
	xstrdup_1 -> xstrdup_2;
	xstrdup_2 -> xstrdup_3;
	xstrdup_3 -> xstrdup_4;
	xstrdup_4 -> xstrdup_5;
	xstrdup_5 -> xstrdup_6;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xstrdup"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 1:
RAX := strlen@()
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := (Reg: RAX + Value: 1), RSI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1), R14 := Reg: RBX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RAX := xmalloc@()
node 4:
RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14
node 5:
RAX := memcpy@()
node 6:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 

Symbolic Execution for Binary "Randomized":
Current text section: "xstrdup"
node 0:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 1:
RAX := strlen@()
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := (Reg: RAX + Value: 1), RSI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1), R14 := Reg: RBX
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RAX := xmalloc@()
node 4:
RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14
node 5:
RAX := memcpy@()
node 6:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
--------

same_behavior for the nodes: xstr(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
dup -> xstrdup_3249 and xstrdup -> xstrdup_292

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xstrdup -> xstrdup_3249 and xstrdup -> xstrdup_292 have been verified to do the same.

same_behavior for the nodes: xstrdup_3250 -> xstrdup_3250 and xstrdup_293 -> xstrdup_293

same_behavior checking these two SStates:

SA || RAX := strlen@()

SB || RAX := strlen@()

Resulting values:
Value A:
E_app (F2 "strlen" "") []
Value B:
E_app (F2 "strlen" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xstrdup_3250 -> xstrdup_3250 and xstrdup_293 -> xstrdup_293 have been verified to do the same.

same_behavior for the nodes: xstrdup_3251 -> xmemdup_3228 and xstrdup_294 -> xmemdup_264

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := (Reg: RAX + Value: 1), RSI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1), R14 := Reg: RBX
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := (Reg: RAX + Value: 1), RSI := (Reg: RAX + Value: 1), R15 := (Reg: RAX + Value: 1), R14 := Reg: RBX
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Value B:
E_app (Op ADD) [E_reg RAX,E_val 1 64]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xstrdup_3251 -> xmemdup_3228 and xstrdup_294 -> xmemdup_264 have been verified to do the same.

same_behavior for the nodes: xmemdup_3229 -> xmemdup_3229 and xmemdup_265 -> xmemdup_265

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3229 -> xmemdup_3229 and xmemdup_265 -> xmemdup_265 have been verified to do the same.

same_behavior for the nodes: xmemdup_3230 -> xmemdup_3233 and xmemdup_266 -> xmemdup_269

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14

SB || RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3230 -> xmemdup_3233 and xmemdup_266 -> xmemdup_269 have been verified to do the same.

same_behavior for the nodes: xmemdup_3234 -> xmemdup_3234 and xmemdup_270 -> xmemdup_270

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3234 -> xmemdup_3234 and xmemdup_270 -> xmemdup_270 have been verified to do the same.

same_behavior for the nodes: xmemdup_3235 -> xmemdup_3239 and xmemdup_271 -> xmemdup_275

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3235 -> xmemdup_3239 and xmemdup_271 -> xmemdup_275 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (33/87): "xmemdup"
--------
.dot code for CFG of text section xmemdup for Vanilla
diGraph xmemdup_Vanilla{
	xmemdup_0  [label="[xmemdup,xmemdup_3228]"]
	xmemdup_1  [label="[xmemdup_3229,xmemdup_3229]"]
	xmemdup_2  [label="[xmemdup_3230,xmemdup_3233]"]
	xmemdup_3  [label="[xmemdup_3234,xmemdup_3234]"]
	xmemdup_4  [label="[xmemdup_3235,xmemdup_3239]"]

	xmemdup_0 -> xmemdup_1;
	xmemdup_1 -> xmemdup_2;
	xmemdup_2 -> xmemdup_3;
	xmemdup_3 -> xmemdup_4;

}
--------
--------
.dot code for CFG of text section xmemdup for Randomized
diGraph xmemdup_Randomized{
	xmemdup_0  [label="[xmemdup,xmemdup_264]"]
	xmemdup_1  [label="[xmemdup_265,xmemdup_265]"]
	xmemdup_2  [label="[xmemdup_266,xmemdup_269]"]
	xmemdup_3  [label="[xmemdup_270,xmemdup_270]"]
	xmemdup_4  [label="[xmemdup_271,xmemdup_275]"]

	xmemdup_0 -> xmemdup_1;
	xmemdup_1 -> xmemdup_2;
	xmemdup_2 -> xmemdup_3;
	xmemdup_3 -> xmemdup_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xmemdup"
node 0:
RDI := Reg: RSI, R15 := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := xmalloc@()
node 2:
RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14
node 3:
RAX := memcpy@()
node 4:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "xmemdup"
node 0:
RDI := Reg: RSI, R15 := Reg: RSI, R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 1:
RAX := xmalloc@()
node 2:
RBX := Reg: RAX, RDX := Reg: R(4,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
15, RDI := Reg: RAX, RSI := Reg: R14
node 3:
RAX := memcpy@()
node 4:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
--------

same_behavior for the nodes: xmemdup -> xmemdup_3228 and xmemdup -> xmemdup_264

same_behavior checking these two SStates:

SA || RDI := Reg: RSI, R15 := Reg: RSI, R14 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RDI := Reg: RSI, R15 := Reg: RSI, R14 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmemdup -> xmemdup_3228 and xmemdup -> xmemdup_264 have been verified to do the same.

same_behavior for the nodes: xmemdup_3229 -> xmemdup_3229 and xmemdup_265 -> xmemdup_265

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3229 -> xmemdup_3229 and xmemdup_265 -> xmemdup_265 have been verified to do the same.

same_behavior for the nodes: xmemdup_3230 -> xmemdup_3233 and xmemdup_266 -> xmemdup_269

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14

SB || RBX := Reg: RAX, RDX := Reg: R15, RDI := Reg: RAX, RSI := Reg: R14

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3230 -> xmemdup_3233 and xmemdup_266 -> xmemdup_269 have been verified to do the same.

same_behavior for the nodes: xmemdup_3234 -> xmemdup_3234 and xmemdup_270 -> xmemdup_270

same_behavior checking these two SStates:

SA || RAX := memcpy@()

SB || RAX := memcpy@()

Resulting values:
Value A:
E_app (F2 "memcpy" "") []
Value B:
E_app (F2 "memcpy" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3234 -> xmemdup_3234 and xmemdup_270 -> xmemdup_270 have been verified to do the same.

same_behavior for the nodes: xmemdup_3235 -> xmemdup_3239 and xmemdup_271 -> xmemdup_275

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmemdup_3235 -> xmemdup_3239 and xmemdup_271 -> xmemdup_275 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (34/87): "xcalloc"
--------
.dot code for CFG of text section xcalloc for Vanilla
diGraph xcalloc_Vanilla{
	xcalloc_0  [label="[xcalloc_3211,xcalloc_3212]"]
	xcalloc_1  [label="[xcalloc_3208,xcalloc_3208]"]
	xcalloc_2  [label="[xcalloc_3209,xcalloc_3210]"]
	xcalloc_3  [label="[.label_255,.label_255]"]
	xcalloc_4  [label="[xcalloc,xcalloc_3207]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3 [label="ZF"];
	xcalloc_2 -> xcalloc_0 [label="!ZF"];

	xcalloc_4 -> xcalloc_3 [label="CF"];
	xcalloc_4 -> xcalloc_1 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xcalloc for Randomized
diGraph xcalloc_Randomized{
	xcalloc_0  [label="[xcalloc_3373,xcalloc_3374]"]
	xcalloc_1  [label="[xcalloc_3370,xcalloc_3370]"]
	xcalloc_2  [label="[xcalloc_3371,xcalloc_3372]"]
	xcalloc_3  [label="[.label_230,.label_230]"]
	xcalloc_4  [label="[xcalloc,xcalloc_3369]"]


	xcalloc_1 -> xcalloc_2;
	xcalloc_2 -> xcalloc_3 [label="ZF"];
	xcalloc_2 -> xcalloc_0 [label="!ZF"];

	xcalloc_4 -> xcalloc_3 [label="CF"];
	xcalloc_4 -> xcalloc_1 [label="!CF"];
}
--------
Starting Node: 4

Edges: , 1 ----> 2, 2 --ZF--> 3, 2 --!ZF--> 0, , 4 --CF--> 3, 4 --!CF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xcalloc"
node 0:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 1:
RAX := rpl_calloc@()
node 2:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 3:
RAX := xalloc_die@()
node 4:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 4

Edges: , 1 ----> 2, 2 --ZF--> 3, 2 --!ZF--> 0, , 4 --CF--> 3, 4 --!CF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xcalloc"
node 0:
RCX := Dereference: [(Var: RSP0 - Value: 8),8]
node 1:
RAX := rpl_calloc@()
node 2:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 3:
RAX := xalloc_die@()
node 4:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xcalloc -> xcalloc_3207 and xcalloc -> xcalloc_336(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
9

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcalloc -> xcalloc_3207 and xcalloc -> xcalloc_3369 have been verified to do the same.

same_behavior for the nodes: .label_255 -> .label_255 and .label_230 -> .label_230

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_255 -> .label_255 and .label_230 -> .label_230 have been verified to do the same.

same_behavior for the nodes: xcalloc_3208 -> xcalloc_3208 and xcalloc_3370 -> xcalloc_3370

same_behavior checking these two SStates:

SA || RAX := rpl_calloc@()

SB || RAX := rpl_calloc@()

Resulting values:
Value A:
E_app (F2 "rpl_calloc" "") []
Value B:
E_app (F2 "rpl_calloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3208 -> xcalloc_3208 and xcalloc_3370 -> xcalloc_3370 have been verified to do the same.

same_behavior for the nodes: xcalloc_3209 -> xcalloc_3210 and xcalloc_3371 -> xcalloc_3372

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3209 -> xcalloc_3210 and xcalloc_3371 -> xcalloc_3372 have been verified to do the same.

same_behavior for the nodes: xcalloc_3211 -> xcalloc_3212 and xcalloc_3373 -> xcalloc_3374

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RCX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xcalloc_3211 -> xcalloc_3212 and xcalloc_3373 -> xcalloc_3374 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (35/87): "xzalloc"
--------
.dot code for CFG of text section xzalloc for Vanilla
diGraph xzalloc_Vanilla{
	xzalloc_0  [label="[xzalloc,xzalloc_3182]"]
	xzalloc_1  [label="[xzalloc_3183,xzalloc_3183]"]
	xzalloc_2  [label="[xzalloc_3184,xzalloc_3187]"]
	xzalloc_3  [label="[xzalloc_3188,xzalloc_3188]"]
	xzalloc_4  [label="[xzalloc_3189,xzalloc_3193]"]

	xzalloc_0 -> xzalloc_1;
	xzalloc_1 -> xzalloc_2;
	xzalloc_2 -> xzalloc_3;
	xzalloc_3 -> xzalloc_4;

}
--------
--------
.dot code for CFG of text section xzalloc for Randomized
diGraph xzalloc_Randomized{
	xzalloc_0  [label="[xzalloc,xzalloc_4533]"]
	xzalloc_1  [label="[xzalloc_4534,xzalloc_4534]"]
	xzalloc_2  [label="[xzalloc_4535,xzalloc_4538]"]
	xzalloc_3  [label="[xzalloc_4539,xzalloc_4539]"]
	xzalloc_4  [label="[xzalloc_4540,xzalloc_4544]"]

	xzalloc_0 -> xzalloc_1;
	xzalloc_1 -> xzalloc_2;
	xzalloc_2 -> xzalloc_3;
	xzalloc_3 -> xzalloc_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xzalloc"
node 0:
R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 1:
RAX := xmalloc@()
node 2:
RBX := Reg: RAX, RDX := Reg: R14, RDI := Reg: RAX, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := memset@()
node 4:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "xzalloc"
node 0:
R14 := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 1:
RAX := xmalloc@()
node 2:
RBX := Reg: RAX, RDX := Reg: R14, RDI := Reg: RAX, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := memset@()
node 4:
RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
--------

same_behavior for the nodes: xzalloc -> xzalloc_3182 and xzalloc -> xzalloc_4533

same_behavior checking these two SStates:

SA || R14 := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || R14 := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app(17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0)])
 (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xzalloc -> xzalloc_3182 and xzalloc -> xzalloc_4533 have been verified to do the same.

same_behavior for the nodes: xzalloc_3183 -> xzalloc_3183 and xzalloc_4534 -> xzalloc_4534

same_behavior checking these two SStates:

SA || RAX := xmalloc@()

SB || RAX := xmalloc@()

Resulting values:
Value A:
E_app (F2 "xmalloc" "") []
Value B:
E_app (F2 "xmalloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3183 -> xzalloc_3183 and xzalloc_4534 -> xzalloc_4534 have been verified to do the same.

same_behavior for the nodes: xzalloc_3184 -> xzalloc_3187 and xzalloc_4535 -> xzalloc_4538

same_behavior checking these two SStates:

SA || RBX := Reg: RAX, RDX := Reg: R14, RDI := Reg: RAX, RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Reg: RAX, RDX := Reg: R14, RDI := Reg: RAX, RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3184 -> xzalloc_3187 and xzalloc_4535 -> xzalloc_4538 have been verified to do the same.

same_behavior for the nodes: xzalloc_3188 -> xzalloc_3188 and xzalloc_4539 -> xzalloc_4539

same_behavior checking these two SStates:

SA || RAX := memset@()

SB || RAX := memset@()

Resulting values:
Value A:
E_app (F2 "memset" "") []
Value B:
E_app (F2 "memset" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3188 -> xzalloc_3188 and xzalloc_4539 -> xzalloc_4539 have been verified to do the same.

same_behavior for the nodes: xzalloc_3189 -> xzalloc_3193 and xzalloc_4540 -> xzalloc_4544

same_behavior checking these two SStates:

SA || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RAX := Reg: RBX, RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xzalloc_3189 -> xzalloc_3193 and xzalloc_4540 -> xzalloc_4544 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (36/87): "x2realloc"
--------
.dot code for CFG of text section x2realloc for Vanilla
diGraph x2realloc_Vanilla{
	x2realloc_0  [label="[x2nrealloc_3122,x2nrealloc_3125]"]
	x2realloc_1  [label="[.label_253,.label_253]"]
	x2realloc_2  [label="[x2nrealloc_3117,x2nrealloc_3121]"]
	x2realloc_3  [label="[x2nrealloc_3129,x2nrealloc_3135]"]
	x2realloc_4  [label="[xrealloc_3089,xrealloc_3089]"]
	x2realloc_5  [label="[xrealloc_3090,xrealloc_3092]"]
	x2realloc_6  [label="[xrealloc_3087,xrealloc_3088]"]
	x2realloc_7  [label="[.label_248,.label_248]"]
	x2realloc_8  [label="[xrealloc_3098,xrealloc_3099]"]
	x2realloc_9  [label="[.label_249,xrealloc_3102]"]
	x2realloc_10  [label="[.label_247,.label_247]"]
	x2realloc_11  [label="[xrealloc_3095,xrealloc_3095]"]
	x2realloc_12  [label="[xrealloc_3096,xrealloc_3097]"]
	x2realloc_13  [label="[.label_251,xrealloc_3086]"]
	x2realloc_14  [label="[.label_252,.label_252]"]
	x2realloc_15  [label="[.label_254,x2nrealloc_3141]"]
	x2realloc_16  [label="[.label_250,x2nrealloc_3128]"]
	x2realloc_17  [label="[x2realloc,x2nrealloc_3116]"]

	x2realloc_0 -> x2realloc_13;

	x2realloc_2 -> x2realloc_1 [label="CF || ZF"];
	x2realloc_2 -> x2realloc_0 [label="!CF && !ZF"];
	x2realloc_3 -> x2realloc_15;
	x2realloc_4 -> x2realloc_5;

	x2realloc_6 -> x2realloc_10 [label="!ZF"];
	x2realloc_6 -> x2realloc_4 [label="ZF"];

	x2realloc_8 -> x2realloc_7 [label="ZF"];
	x2realloc_8 -> x2realloc_9 [label="!ZF"];

	x2realloc_10 -> x2realloc_11;
	x2realloc_11 -> x2realloc_12;
	x2realloc_12 -> x2realloc_9 [label="ZF"];
	x2realloc_12 -> x2realloc_8 [label="!ZF"];
	x2realloc_13 -> x2realloc_10 [label="ZF"];
	x2realloc_13 -> x2realloc_6 [label="!ZF"];

	x2realloc_15 -> x2realloc_14 [label="CF"];
	x2realloc_15 -> x2realloc_13 [label="!CF"];
	x2realloc_16 -> x2realloc_15 [label="!ZF"];
	x2realloc_16 -> x2realloc_3 [label="ZF"];
	x2realloc_17 -> x2realloc_16 [label="ZF"];
	x2realloc_17 -> x2realloc_2 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section x2realloc for Randomized
diGraph x2realloc_Randomized{
	x2realloc_0  [label="[x2nrealloc_2974,x2nrealloc_2977]"]
	x2realloc_1  [label="[.label_207,.label_207]"]
	x2realloc_2  [label="[x2nrealloc_2969,x2nrealloc_2973]"]
	x2realloc_3  [label="[sub_402ff6_2928,sub_402ff6_2934]"]
	x2realloc_4  [label="[xrealloc_3570,xrealloc_3570]"]
	x2realloc_5  [label="[xrealloc_3571,xrealloc_3573]"]
	x2realloc_6  [label="[xrealloc_3568,xrealloc_3569]"]
	x2realloc_7  [label="[.label_240,.label_240]"]
	x2realloc_8  [label="[xrealloc_3579,xrealloc_3580]"]
	x2realloc_9  [label="[.label_241,xrealloc_3583]"]
	x2realloc_10  [label="[.label_239,.label_239]"]
	x2realloc_11  [label="[xrealloc_3576,xrealloc_3576]"]
	x2realloc_12  [label="[xrealloc_3577,xrealloc_3578]"]
	x2realloc_13  [label="[.label_208,xrealloc_3567]"]
	x2realloc_14  [label="[.label_209,.label_209]"]
	x2realloc_15  [label="[.label_205,sub_402ff6_2940]"]
	x2realloc_16  [label="[.label_206,sub_402ff6_2927]"]
	x2realloc_17  [label="[x2realloc,x2nrealloc_2968]"]

	x2realloc_0 -> x2realloc_13;

	x2realloc_2 -> x2realloc_1 [label="CF || ZF"];
	x2realloc_2 -> x2realloc_0 [label="!CF && !ZF"];
	x2realloc_3 -> x2realloc_15;
	x2realloc_4 -> x2realloc_5;

	x2realloc_6 -> x2realloc_10 [label="!ZF"];
	x2realloc_6 -> x2realloc_4 [label="ZF"];

	x2realloc_8 -> x2realloc_7 [label="ZF"];
	x2realloc_8 -> x2realloc_9 [label="!ZF"];

	x2realloc_10 -> x2realloc_11;
	x2realloc_11 -> x2realloc_12;
	x2realloc_12 -> x2realloc_9 [label="ZF"];
	x2realloc_12 -> x2realloc_8 [label="!ZF"];
	x2realloc_13 -> x2realloc_10 [label="ZF"];
	x2realloc_13 -> x2realloc_6 [label="!ZF"];

	x2realloc_15 -> x2realloc_14 [label="CF"];
	x2realloc_15 -> x2realloc_13 [label="!CF"];
	x2realloc_16 -> x2realloc_15 [label="!ZF"];
	x2realloc_16 -> x2realloc_3 [label="ZF"];
	x2realloc_17 -> x2realloc_16 [label="ZF"];
	x2realloc_17 -> x2realloc_2 [label="!ZF"];
}
--------
Starting Node: 17

Edges: 0 ----> 13, , 2 --CF || ZF--> 1, 2 --!CF && !ZF--> 0, 3 ----> 15, 4 ----> 5, , 6 --!ZF--> 10, 6 --ZF--> 4, , 8 --ZF--> 7, 8 --!ZF--> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 9, 12 --!ZF--> 8, 13 --ZF--> 10, 13 --!ZF--> 6, , 15 --CF--> 14, 15 --!CF--> 13, 16 --!ZF--> 15, 16 --ZF--> 3, 17 --ZF--> 16, 17 --!ZF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "x2realloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := xalloc_die@()
node 2:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend((17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0)])
Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 3:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))
node 4:
RAX := free@()
node 5:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RSI := Reg: RBX
node 11:
RAX := realloc@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
[Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 14:
RAX := xalloc_die@()
node 15:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 16:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 17:
RCX := Dereference: [Reg: RSI,8], RDX := Value: 1, R8 := Value: 1
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 17

Edges: 0 ----> 13, , 2 --CF || ZF--> 1, 2 --!CF && !ZF--> 0, 3 ----> 15, 4 ----> 5, , 6 --!ZF--> 10, 6 --ZF--> 4, , 8 --ZF--> 7, 8 --!ZF--> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 9, 12 --!ZF--> 8, 13 --ZF--> 10, 13 --!ZF--> 6, , 15 --CF--> 14, 15 --!CF--> 13, 16 --!ZF--> 15, 16 --ZF--> 3, 17 --ZF--> 16, 17 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "x2realloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := xalloc_die@()
node 2:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 3:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))
node 4:
RAX := free@()
node 5:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RSI := Reg: RBX
node 11:
RAX := realloc@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
[Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 14:
RAX := xalloc_die@()
node 15:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 16:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 17:
RCX := Dereference: [Reg: RSI,8], RDX := Value: 1, R8 := Value: 1
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: x2realloc -> x2nrealloc_3116 and x2realloc -> x2nrealloc_2968

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RSI,8], RDX := Value: 1, R8 := Value: 1
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RCX := Dereference: [Reg: RSI,8], RDX := Value: 1, R8 := Value: 1
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_reg RSI) 8
Value B:
E_deref (E_reg RSI) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2realloc -> x2nrealloc_3116 and x2realloc -> x2nrealloc_2968 have been verified to do the same.

same_behavior for the nodes: .label_250 -> x2nrealloc_3128 and .label_206 -> sub_402ff6_2927

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

SB || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_250 -> x2nrealloc_3128 and .label_206 -> sub_402ff6_2927 have been verified to do the same.

same_behavior for the nodes: .label_254 -> x2nrealloc_3141 and .label_205 -> sub_402ff6_2940

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_254 -> x2nrealloc_3141 and .label_205 -> sub_402ff6_2940 have been verified to do the same.

same_behavior for the nodes: .label_252 -> .label_252 and .label_209 -> .label_209

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_252 -> .label_252 and .label_209 -> .label_209 have been verified to do the same.

same_behavior for the nodes: .label_251 -> xrealloc_3086 and .label_208 -> xrealloc_3567

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
SA || [Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
SB || [Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RSI
E_reg RSI
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_251 -> xrealloc_3086 and .label_208 -> xrealloc_3567 have been verified to do the same.

same_behavior for the nodes: .label_247 -> .label_247 and .label_239 -> .label_239

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_247 -> .label_247 and .label_239 -> .label_239 have been verified to do the same.

same_behavior for the nodes: xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576 have been verified to do the same.

same_behavior for the nodes: xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578 have been verified to do the same.

same_behavior for the nodes: .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583 have been verified to do the same.

same_behavior for the nodes: xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580 have been verified to do the same.

same_behavior for the nodes: .label_248 -> .label_248 and .label_240 -> .label_240

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_248 -> .label_248 and .label_240 -> .label_240 have been verified to do the same.

same_behavior for the nodes: xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569 have been verified to do the same.

same_behavior for the nodes: xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570 have been verified to do the same.

same_behavior for the nodes: xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3129 -> x2nrealloc_3135 and sub_402ff6_2928 -> sub_402ff6_2934

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))

SB || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (Op ADD) [E_ite (E_app (F >) [E_reg R8,E_val 128 64]) (E_val 1 8) (E_val 0 8),E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]]
Value B:
E_app (Op ADD) [E_ite (E_app (F >) [E_reg R8,E_val 128 64]) (E_val 1 8) (E_val 0 8),E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3129 -> x2nrealloc_3135 and sub_402ff6_2928 -> sub_402ff6_2934 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3117 -> x2nrealloc_3121 and x2nrealloc_2969 -> x2nrealloc_2973

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_ap(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
p (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3117 -> x2nrealloc_3121 and x2nrealloc_2969 -> x2nrealloc_2973 have been verified to do the same.

same_behavior for the nodes: .label_253 -> .label_253 and .label_207 -> .label_207

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_253 -> .label_253 and .label_207 -> .label_207 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3122 -> x2nrealloc_3125 and x2nrealloc_2974 -> x2nrealloc_2977

same_behavior checking these two SStates:

SA || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

SB || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Value B:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3122 -> x2nrealloc_3125 and x2nrealloc_2974 -> x2nrealloc_2977 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (37/87): "xcharalloc"
--------
.dot code for CFG of text section xcharalloc for Vanilla
diGraph xcharalloc_Vanilla{
	xcharalloc_0  [label="[.label_245,.label_245]"]
	xcharalloc_1  [label="[xmalloc_3048,xmalloc_3049]"]
	xcharalloc_2  [label="[.label_244,xmalloc_3052]"]
	xcharalloc_3  [label="[xcharalloc,xmalloc_3044]"]
	xcharalloc_4  [label="[xmalloc_3045,xmalloc_3045]"]
	xcharalloc_5  [label="[xmalloc_3046,xmalloc_3047]"]


	xcharalloc_1 -> xcharalloc_0 [label="ZF"];
	xcharalloc_1 -> xcharalloc_2 [label="!ZF"];

	xcharalloc_3 -> xcharalloc_4;
	xcharalloc_4 -> xcharalloc_5;
	xcharalloc_5 -> xcharalloc_2 [label="ZF"];
	xcharalloc_5 -> xcharalloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xcharalloc for Randomized
diGraph xcharalloc_Randomized{
	xcharalloc_0  [label="[.label_164,.label_164]"]
	xcharalloc_1  [label="[xmalloc_1995,xmalloc_1996]"]
	xcharalloc_2  [label="[.label_163,xmalloc_1999]"]
	xcharalloc_3  [label="[xcharalloc,xmalloc_1991]"]
	xcharalloc_4  [label="[xmalloc_1992,xmalloc_1992]"]
	xcharalloc_5  [label="[xmalloc_1993,xmalloc_1994]"]


	xcharalloc_1 -> xcharalloc_0 [label="ZF"];
	xcharalloc_1 -> xcharalloc_2 [label="!ZF"];

	xcharalloc_3 -> xcharalloc_4;
	xcharalloc_4 -> xcharalloc_5;
	xcharalloc_5 -> xcharalloc_2 [label="ZF"];
	xcharalloc_5 -> xcharalloc_1 [label="!ZF"];
}
--------
Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xcharalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xcharalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xcharalloc -> xmalloc_3044 and xcharalloc -> xmalloc_1991

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xcharalloc -> xmalloc_3044 and xcharalloc -> xmalloc_1991 have been verified to do the same.

same_behavior for the nodes: xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992 have been verified to do the same.

same_behavior for the nodes: xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994 have been verified to do the same.

same_behavior for the nodes: .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999 have been verified to do the same.

same_behavior for the nodes: xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996 have been verified to do the same.

same_behavior for the nodes: .label_245 -> .label_245 and .label_164 -> .label_164

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_245 -> .label_245 and .label_164 -> .label_164 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (38/87): "x2nrealloc"
--------
.dot code for CFG of (17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0)])
text section x2nrealloc for Vanilla
diGraph x2nrealloc_Vanilla{
	x2nrealloc_0  [label="[x2nrealloc_3122,x2nrealloc_3125]"]
	x2nrealloc_1  [label="[.label_253,.label_253]"]
	x2nrealloc_2  [label="[x2nrealloc_3117,x2nrealloc_3121]"]
	x2nrealloc_3  [label="[x2nrealloc_3129,x2nrealloc_3135]"]
	x2nrealloc_4  [label="[xrealloc_3089,xrealloc_3089]"]
	x2nrealloc_5  [label="[xrealloc_3090,xrealloc_3092]"]
	x2nrealloc_6  [label="[xrealloc_3087,xrealloc_3088]"]
	x2nrealloc_7  [label="[.label_248,.label_248]"]
	x2nrealloc_8  [label="[xrealloc_3098,xrealloc_3099]"]
	x2nrealloc_9  [label="[.label_249,xrealloc_3102]"]
	x2nrealloc_10  [label="[.label_247,.label_247]"]
	x2nrealloc_11  [label="[xrealloc_3095,xrealloc_3095]"]
	x2nrealloc_12  [label="[xrealloc_3096,xrealloc_3097]"]
	x2nrealloc_13  [label="[.label_251,xrealloc_3086]"]
	x2nrealloc_14  [label="[.label_252,.label_252]"]
	x2nrealloc_15  [label="[.label_254,x2nrealloc_3141]"]
	x2nrealloc_16  [label="[.label_250,x2nrealloc_3128]"]
	x2nrealloc_17  [label="[x2nrealloc,x2nrealloc_3116]"]

	x2nrealloc_0 -> x2nrealloc_13;

	x2nrealloc_2 -> x2nrealloc_1 [label="CF || ZF"];
	x2nrealloc_2 -> x2nrealloc_0 [label="!CF && !ZF"];
	x2nrealloc_3 -> x2nrealloc_15;
	x2nrealloc_4 -> x2nrealloc_5;

	x2nrealloc_6 -> x2nrealloc_10 [label="!ZF"];
	x2nrealloc_6 -> x2nrealloc_4 [label="ZF"];

	x2nrealloc_8 -> x2nrealloc_7 [label="ZF"];
	x2nrealloc_8 -> x2nrealloc_9 [label="!ZF"];

	x2nrealloc_10 -> x2nrealloc_11;
	x2nrealloc_11 -> x2nrealloc_12;
	x2nrealloc_12 -> x2nrealloc_9 [label="ZF"];
	x2nrealloc_12 -> x2nrealloc_8 [label="!ZF"];
	x2nrealloc_13 -> x2nrealloc_10 [label="ZF"];
	x2nrealloc_13 -> x2nrealloc_6 [label="!ZF"];

	x2nrealloc_15 -> x2nrealloc_14 [label="CF"];
	x2nrealloc_15 -> x2nrealloc_13 [label="!CF"];
	x2nrealloc_16 -> x2nrealloc_15 [label="!ZF"];
	x2nrealloc_16 -> x2nrealloc_3 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_16 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_2 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section x2nrealloc for Randomized
diGraph x2nrealloc_Randomized{
	x2nrealloc_0  [label="[x2nrealloc_2974,x2nrealloc_2977]"]
	x2nrealloc_1  [label="[.label_207,.label_207]"]
	x2nrealloc_2  [label="[x2nrealloc_2969,x2nrealloc_2973]"]
	x2nrealloc_3  [label="[sub_402ff6_2928,sub_402ff6_2934]"]
	x2nrealloc_4  [label="[xrealloc_3570,xrealloc_3570]"]
	x2nrealloc_5  [label="[xrealloc_3571,xrealloc_3573]"]
	x2nrealloc_6  [label="[xrealloc_3568,xrealloc_3569]"]
	x2nrealloc_7  [label="[.label_240,.label_240]"]
	x2nrealloc_8  [label="[xrealloc_3579,xrealloc_3580]"]
	x2nrealloc_9  [label="[.label_241,xrealloc_3583]"]
	x2nrealloc_10  [label="[.label_239,.label_239]"]
	x2nrealloc_11  [label="[xrealloc_3576,xrealloc_3576]"]
	x2nrealloc_12  [label="[xrealloc_3577,xrealloc_3578]"]
	x2nrealloc_13  [label="[.label_208,xrealloc_3567]"]
	x2nrealloc_14  [label="[.label_209,.label_209]"]
	x2nrealloc_15  [label="[.label_205,sub_402ff6_2940]"]
	x2nrealloc_16  [label="[.label_206,sub_402ff6_2927]"]
	x2nrealloc_17  [label="[x2nrealloc,x2nrealloc_2968]"]

	x2nrealloc_0 -> x2nrealloc_13;

	x2nrealloc_2 -> x2nrealloc_1 [label="CF || ZF"];
	x2nrealloc_2 -> x2nrealloc_0 [label="!CF && !ZF"];
	x2nrealloc_3 -> x2nrealloc_15;
	x2nrealloc_4 -> x2nrealloc_5;

	x2nrealloc_6 -> x2nrealloc_10 [label="!ZF"];
	x2nrealloc_6 -> x2nrealloc_4 [label="ZF"];

	x2nrealloc_8 -> x2nrealloc_7 [label="ZF"];
	x2nrealloc_8 -> x2nrealloc_9 [label="!ZF"];

	x2nrealloc_10 -> x2nrealloc_11;
	x2nrealloc_11 -> x2nrealloc_12;
	x2nrealloc_12 -> x2nrealloc_9 [label="ZF"];
	x2nrealloc_12 -> x2nrealloc_8 [label="!ZF"];
	x2nrealloc_13 -> x2nrealloc_10 [label="ZF"];
	x2nrealloc_13 -> x2nrealloc_6 [label="!ZF"];

	x2nrealloc_15 -> x2nrealloc_14 [label="CF"];
	x2nrealloc_15 -> x2nrealloc_13 [label="!CF"];
	x2nrealloc_16 -> x2nrealloc_15 [label="!ZF"];
	x2nrealloc_16 -> x2nrealloc_3 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_16 [label="ZF"];
	x2nrealloc_17 -> x2nrealloc_2 [label="!ZF"];
}
--------
Starting Node: 17

Edges: 0 ----> 13, , 2 --CF || ZF--> 1, 2 --!CF && !ZF--> 0, 3 ----> 15, 4 ----> 5, , 6 --!ZF--> 10, 6 --ZF--> 4, , 8 --ZF--> 7, 8 --!ZF--> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 9, 12 --!ZF--> 8, 13 --ZF--> 10, 13 --!ZF--> 6, , 15 --CF--> 14, 15 --!CF--> 13, 16 --!ZF--> 15, 16 --ZF--> 3, 17 --ZF--> 16, 17 --!ZF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "x2nrealloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := xalloc_die@()
node 2:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 3:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))
node 4:
RAX := free@()
node 5:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RSI := Reg: RBX
node 11:
RAX := realloc@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
[Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 14:
RAX := xalloc_die@()
node 15:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 16:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Re(17,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == Var: RSP0 && RBP == Var: RBP0)])
g: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 17:
RCX := Dereference: [Reg: RSI,8], R8 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 17

Edges: 0 ----> 13, , 2 --CF || ZF--> 1, 2 --!CF && !ZF--> 0, 3 ----> 15, 4 ----> 5, , 6 --!ZF--> 10, 6 --ZF--> 4, , 8 --ZF--> 7, 8 --!ZF--> 9, , 10 ----> 11, 11 ----> 12, 12 --ZF--> 9, 12 --!ZF--> 8, 13 --ZF--> 10, 13 --!ZF--> 6, , 15 --CF--> 14, 15 --!CF--> 13, 16 --!ZF--> 15, 16 --ZF--> 3, 17 --ZF--> 16, 17 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "x2nrealloc"
node 0:
RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))
node 1:
RAX := xalloc_die@()
node 2:
RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 3:
RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))
node 4:
RAX := free@()
node 5:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 7:
RAX := xalloc_die@()
node 8:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RSI := Reg: RBX
node 11:
RAX := realloc@()
node 12:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 13:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
[Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 14:
RAX := xalloc_die@()
node 15:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)
node 16:
ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)
node 17:
RCX := Dereference: [Reg: RSI,8], R8 := Reg: RDX
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: x2nrealloc -> x2nrealloc_3116 and x2nrealloc -> x2nrealloc_2968

same_behavior checking these two SStates:

SA || RCX := Dereference: [Reg: RSI,8], R8 := Reg: RDX
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RCX := Dereference: [Reg: RSI,8], R8 := Reg: RDX
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_reg RSI) 8
Value B:
E_deref (E_reg RSI) 8
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes x2nrealloc -> x2nrealloc_3116 and x2nrealloc -> x2nrealloc_2968 have been verified to do the same.

same_behavior for the nodes: .label_250 -> x2nrealloc_3128 and .label_206 -> sub_402ff6_2927

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

SB || ZF := TEST(Reg: RCX,Reg: RCX), CF := TEST(Reg: RCX,Reg: RCX), SF := TEST(Reg: RCX,Reg: RCX), OF := TEST(Reg: RCX,Reg: RCX), PF := TEST(Reg: RCX,Reg: RCX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_250 -> x2nrealloc_3128 and .label_206 -> sub_402ff6_2927 have been verified to do the same.

same_behavior for the nodes: .label_254 -> x2nrealloc_3141 and .label_205 -> sub_402ff6_2940

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_254 -> x2nrealloc_3141 and .label_205 -> sub_402ff6_2940 have been verified to do the same.

same_behavior for the nodes: .label_252 -> .label_252 and .label_209 -> .label_209

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_252 -> .label_252 and .label_209 -> .label_209 have been verified to do the same.

same_behavior for the nodes: .label_251 -> xrealloc_3086 and .label_208 -> xrealloc_3567

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
SA || [Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RBX := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), RSI := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX)), R8 := TakeBits: <63,0>(IMUL(Reg: R8,Reg: RCX))
SB || [Reg: RSI,8] := Reg: RCX, [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg R8,E_reg RCX]]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RSI
E_reg RSI
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_251 -> xrealloc_3086 and .label_208 -> xrealloc_3567 have been verified to do the same.

same_behavior for the nodes: .label_247 -> .label_247 and .label_239 -> .label_239

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_247 -> .label_247 and .label_239 -> .label_239 have been verified to do the same.

same_behavior for the nodes: xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576 have been verified to do the same.

same_behavior for the nodes: xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578 have been verified to do the same.

same_behavior for the nodes: .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583 have been verified to do the same.

same_behavior for the nodes: xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580 have been verified to do the same.

same_behavior for the nodes: .label_248 -> .label_248 and .label_240 -> .label_240

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_248 -> .label_248 and .label_240 -> .label_240 have been verified to do the same.

same_behavior for the nodes: xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569 have been verified to do the same.

same_behavior for the nodes: xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570 have been verified to do the same.

same_behavior for the nodes: xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3129 -> x2nrealloc_3135 and sub_402ff6_2928 -> sub_402ff6_2934

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))

SB || RAX := DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)), RCX := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), RDX := (zextend(Value: 128,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), CF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), SF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), OF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64))), PF := ((if (Reg: R8 > Value: 128) then Value: 1 else Value: 0) + DIV(zextend(Value: 128,Value: 128),zextend(Reg: R8,Value: 64)))

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (Op ADD) [E_ite (E_app (F >) [E_reg R8,E_val 128 64]) (E_val 1 8) (E_val 0 8),E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]]
Value B:
E_app (Op ADD) [E_ite (E_app (F >) [E_reg R8,E_val 128 64]) (E_val 1 8) (E_val 0 8),E_app (Op DIV) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 128 32,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3129 -> x2nrealloc_3135 and sub_402ff6_2928 -> sub_402ff6_2934 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3117 -> x2nrealloc_3121 and x2nrealloc_2969 -> x2nrealloc_2973

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

SB || RAX := DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)), RDX := (zextend(Value: 6148914691236517204,Value: 128) mod zextend(Reg: R8,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), CF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), SF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), OF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX), PF := CMP(DIV(zextend(Value: 6148914691236517204,Value: 128),zextend(Reg: R8,Value: 64)),Reg: RCX)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 6148914691236517204 64,E_val 128 (-1)],E_app (F zextend) [E_reg R8,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3117 -> x2nrealloc_3121 and x2nrealloc_2969 -> x2nrealloc_2973 have been verified to do the same.

same_behavior for the nodes: .label_253 -> .label_253 and .label_207 -> .label_207

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_253 -> .label_253 and .label_207 -> .label_207 have been verified to do the same.

same_behavior for the nodes: x2nrealloc_3122 -> x2nrealloc_3125 and x2nrealloc_2974 -> x2nrealloc_2977

same_behavior checking these two SStates:

SA || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

SB || RAX := SHR(zextend(Reg: RCX,Value: 64),Value: 1), RCX := (Reg: RCX + (SHR(zextend(Reg: RCX,Value: 64),Value: 1) + Value: 1))

Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Value B:
E_app (Op ADD) [E_reg RCX,E_app (Op ADD) [E_app (Op SHR) [E_app (F zextend) [E_reg RCX,E_val 64 (-1)],E_val 1 64],E_val 1 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes x2nrealloc_3122 -> x2nrealloc_3125 and x2nrealloc_2974 -> x2nrealloc_2977 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (39/87): "xrealloc"
--------
.dot code for CFG of text section xrealloc for Vanilla
diGraph xrealloc_Vanilla{
	xrealloc_0  [label="[xrealloc_3089,xrealloc_3089]"]
	xrealloc_1  [label="[xrealloc_3090,xrealloc_3092]"]
	xrealloc_2  [label="[xrealloc_3087,xrealloc_3088]"]
	xrealloc_3  [label="[.label_248,.label_248]"]
	xrealloc_4  [label="[xrealloc_3098,xrealloc_3099]"]
	xrealloc_5  [label="[.label_249,xrealloc_3102]"]
	xrealloc_6  [label="[.label_247,.label_247]"]
	xrealloc_7  [label="[xrealloc_3095,xrealloc_3095]"]
	xrealloc_8  [label="[xrealloc_3096,xrealloc_3097]"]
	xrealloc_9  [label="[xrealloc,xrealloc_3086]"]

	xrealloc_0 -> xrealloc_1;

	xrealloc_2 -> xrealloc_6 [label="!ZF"];
	xrealloc_2 -> xrealloc_0 [label="ZF"];

	xrealloc_4 -> xrealloc_3 [label="ZF"];
	xrealloc_4 -> xrealloc_5 [label="!ZF"];

	xrealloc_6 -> xrealloc_7;
	xrealloc_7 -> xrealloc_8;
	xrealloc_8 -> xrealloc_5 [label="ZF"];
	xrealloc_8 -> xrealloc_4 [label="!ZF"];
	xrealloc_9 -> xrealloc_6 [label="ZF"];
	xrealloc_9 -> xrealloc_2 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xrealloc for Randomized
diGraph xrealloc_Randomized{
	xrealloc_0  [label="[xrealloc_3570,xrealloc_3570]"]
	xrealloc_1  [label="[xrealloc_3571,xrealloc_3573]"]
	xrealloc_2  [label="[xrealloc_3568,xrealloc_3569]"]
	xrealloc_3  [label="[.label_240,.label_240]"]
	xrealloc_4  [label="[xrealloc_3579,xrealloc_3580]"]
	xrealloc_5  [label="[.lab(9,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
(9,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
el_241,xrealloc_3583]"]
	xrealloc_6  [label="[.label_239,.label_239]"]
	xrealloc_7  [label="[xrealloc_3576,xrealloc_3576]"]
	xrealloc_8  [label="[xrealloc_3577,xrealloc_3578]"]
	xrealloc_9  [label="[xrealloc,xrealloc_3567]"]

	xrealloc_0 -> xrealloc_1;

	xrealloc_2 -> xrealloc_6 [label="!ZF"];
	xrealloc_2 -> xrealloc_0 [label="ZF"];

	xrealloc_4 -> xrealloc_3 [label="ZF"];
	xrealloc_4 -> xrealloc_5 [label="!ZF"];

	xrealloc_6 -> xrealloc_7;
	xrealloc_7 -> xrealloc_8;
	xrealloc_8 -> xrealloc_5 [label="ZF"];
	xrealloc_8 -> xrealloc_4 [label="!ZF"];
	xrealloc_9 -> xrealloc_6 [label="ZF"];
	xrealloc_9 -> xrealloc_2 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, , 2 --!ZF--> 6, 2 --ZF--> 0, , 4 --ZF--> 3, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 2

Symbolic Execution for Binary "Vanilla":
Current text section: "xrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xalloc_die@()
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 9

Edges: 0 ----> 1, , 2 --!ZF--> 6, 2 --ZF--> 0, , 4 --ZF--> 3, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 2

Symbolic Execution for Binary "Randomized":
Current text section: "xrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xalloc_die@()
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: xrealloc -> xrealloc_3086 and xrealloc -> xrealloc_3567

same_behavior checking these two SStates:

SA || RBX := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xrealloc -> xrealloc_3086 and xrealloc -> xrealloc_3567 have been verified to do the same.

same_behavior for the nodes: .label_247 -> .label_247 and .label_239 -> .label_239

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_247 -> .label_247 and .label_239 -> .label_239 have been verified to do the same.

same_behavior for the nodes: xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576 have been verified to do the same.

same_behavior for the nodes: xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578 have been verified to do the same.

same_behavior for the nodes: .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583 have been verified to do the same.

same_behavior for the nodes: xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580 have been verified to do the same.

same_behavior for the nodes: .label_248 -> .label_248 and .label_240 -> .label_240

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_248 -> .label_248 and .label_240 -> .label_240 have been verified to do the same.

same_behavior for the nodes: xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569 have been verified to do the same.

same_behavior for the nodes: xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570 have been verified to do the same.

(12,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0),(10,RSP == Var: RSP0 && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0),(10,RSP == Var: RSP0 && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
same_behavior for the nodes: xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (40/87): "xnrealloc"
--------
.dot code for CFG of text section xnrealloc for Vanilla
diGraph xnrealloc_Vanilla{
	xnrealloc_0  [label="[xrealloc_3089,xrealloc_3089]"]
	xnrealloc_1  [label="[xrealloc_3090,xrealloc_3092]"]
	xnrealloc_2  [label="[xrealloc_3087,xrealloc_3088]"]
	xnrealloc_3  [label="[.label_248,.label_248]"]
	xnrealloc_4  [label="[xrealloc_3098,xrealloc_3099]"]
	xnrealloc_5  [label="[.label_249,xrealloc_3102]"]
	xnrealloc_6  [label="[.label_247,.label_247]"]
	xnrealloc_7  [label="[xrealloc_3095,xrealloc_3095]"]
	xnrealloc_8  [label="[xrealloc_3096,xrealloc_3097]"]
	xnrealloc_9  [label="[xnrealloc_3069,xrealloc_3086]"]
	xnrealloc_10  [label="[.label_246,.label_246]"]
	xnrealloc_11  [label="[xnrealloc_3074,xnrealloc_3074]"]
	xnrealloc_12  [label="[xnrealloc,xnrealloc_3068]"]

	xnrealloc_0 -> xnrealloc_1;

	xnrealloc_2 -> xnrealloc_6 [label="!ZF"];
	xnrealloc_2 -> xnrealloc_0 [label="ZF"];

	xnrealloc_4 -> xnrealloc_3 [label="ZF"];
	xnrealloc_4 -> xnrealloc_5 [label="!ZF"];

	xnrealloc_6 -> xnrealloc_7;
	xnrealloc_7 -> xnrealloc_8;
	xnrealloc_8 -> xnrealloc_5 [label="ZF"];
	xnrealloc_8 -> xnrealloc_4 [label="!ZF"];
	xnrealloc_9 -> xnrealloc_6 [label="ZF"];
	xnrealloc_9 -> xnrealloc_2 [label="!ZF"];
	xnrealloc_10 -> xnrealloc_11;

	xnrealloc_12 -> xnrealloc_10 [label="CF"];
	xnrealloc_12 -> xnrealloc_9 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xnrealloc for Randomized
diGraph xnrealloc_Randomized{
	xnrealloc_0  [label="[xrealloc_3570,xrealloc_3570]"]
	xnrealloc_1  [label="[xrealloc_3571,xrealloc_3573]"]
	xnrealloc_2  [label="[xrealloc_3568,xrealloc_3569]"]
	xnrealloc_3  [label="[.label_240,.label_240]"]
	xnrealloc_4  [label="[xrealloc_3579,xrealloc_3580]"]
	xnrealloc_5  [label="[.label_241,xrealloc_3583]"]
	xnrealloc_6  [label="[.label_239,.label_239]"]
	xnrealloc_7  [label="[xrealloc_3576,xrealloc_3576]"]
	xnrealloc_8  [label="[xrealloc_3577,xrealloc_3578]"]
	xnrealloc_9  [label="[xnrealloc_3543,xrealloc_3567]"]
	xnrealloc_10  [label="[.label_238,.label_238]"]
	xnrealloc_11  [label="[xnrealloc_3548,xnrealloc_3548]"]
	xnrealloc_12  [label="[xnrealloc,xnrealloc_3542]"]

	xnrealloc_0 -> xnrealloc_1;

	xnrealloc_2 -> xnrealloc_6 [label="!ZF"];
	xnrealloc_2 -> xnrealloc_0 [label="ZF"];

	xnrealloc_4 -> xnrealloc_3 [label="ZF"];
	xnrealloc_4 -> xnrealloc_5 [label="!ZF"];

	xnrealloc_6 -> xnrealloc_7;
	xnrealloc_7 -> xnrealloc_8;
	xnrealloc_8 -> xnrealloc_5 [label="ZF"];
	xnrealloc_8 -> xnrealloc_4 [label="!ZF"];
	xnrealloc_9 -> xnrealloc_6 [label="ZF"];
	xnrealloc_9 -> xnrealloc_2 [label="!ZF"];
	xnrealloc_10 -> xnrealloc_11;

	xnrealloc_12 -> xnrealloc_10 [label="CF"];
	xnrealloc_12 -> xnrealloc_9 [label="!CF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, , 2 --!ZF--> 6, 2 --ZF--> 0, , 4 --ZF--> 3, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 2, 10 ----> 11, , 12 --CF--> 10, 12 --!CF--> 9

Symbolic Execution for Binary "Vanilla":
Current text section: "xnrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xalloc_die@()
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RCX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RSI := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 10:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 11:
RAX := xalloc_die@()
node 12:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

Starting Node: 12

Edges: 0 ----> 1, , 2 --!ZF--> 6, 2 --ZF--> 0, , 4 --ZF--> 3, 4 --!ZF--> 5, , 6 ----> 7, 7 ----> 8, 8 --ZF--> 5, 8 --!ZF--> 4, 9 --ZF--> 6, 9 --!ZF--> 2, 10 ----> 11, , 12 --CF--> 10, 12 --!CF--> 9

Symbolic Execution for Binary "Randomized":
Current text section: "xnrealloc"
node 0:
RAX := free@()
node 1:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 3:
RAX := xalloc_die@()
node 4:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RSI := Reg: RBX
node 7:
RAX := realloc@()
node 8:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 9:
RBX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RCX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RSI := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
node 10:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 11:
RAX := xalloc_die@()
node 12:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)
--------

same_behavior for the nodes: xnrealloc -> xnrealloc_3068 and xnrealloc -> xnrealloc_3542

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)), RCX := Reg: RDX, RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RDX,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RDX,Value: 64)),Reg: RSI)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RDX,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc -> xnrealloc_3068 and xnrealloc -> xnrealloc_3542 have been verified to do the same.

same_behavior for the nodes: .label_246 -> .label_246 and .label_238 -> .label_238

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_246 -> .label_246 and .label_238 -> .label_238 have been verified to do the same.

same_behavior for the nodes: xnrealloc_3074 -> xnrealloc_3074 and xnrealloc_3548 -> xnrealloc_3548

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnrealloc_3074 -> xnrealloc_3074 and xnrealloc_3548 -> xnrealloc_3548 have been verified to do the same.

same_behavior for the nodes: xnrealloc_3069 -> xrealloc_3086 and xnrealloc_3543 -> xrealloc_3567

same_behavior checking these two SStates:

SA || RBX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RCX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RSI := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RCX := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI)), RSI := TakeBits: <63,0>(IMUL(Reg: RCX,Reg: RSI))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RCX,E_reg RSI]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnrealloc_3069 -> xrealloc_3086 and xnrealloc_3543 -> xrealloc_3567 have been verified to do the same.

same_behavior for the nodes: .label_247 -> .label_247 and .label_239 -> .label_239

same_behavior checking these two SStates:

SA || RSI := Reg: RBX

SB || RSI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_247 -> .label_247 and .label_239 -> .label_239 have been verified to do the same.

same_behavior for the nodes: xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576

same_behavior checking these two SStates:

SA || RAX := realloc@()

SB || RAX := realloc@()

Resulting values:
Value A:
E_app (F2 "realloc" "") []
Value B:
E_app (F2 "realloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3095 -> xrealloc_3095 and xrealloc_3576 -> xrealloc_3576 have been verified to do the same.

same_behavior for the nodes: xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3096 -> xrealloc_3097 and xrealloc_3577 -> xrealloc_3578 have been verified to do the same.

same_behavior for the nodes: .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_249 -> xrealloc_3102 and .label_241 -> xrealloc_3583 have been verified to do the same.

same_behavior for the nodes: xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3098 -> xrealloc_3099 and xrealloc_3579 -> xrealloc_3580 have been verified to do the same.

same_behavior for the nodes: .label_248 -> .label_248 and .label_240 -> .label_240

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_248 -> .label_248 and .label_240 -> .label_240 have been verified to do the same.

same_behavior for the nodes: xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := T(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(3,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
EST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3087 -> xrealloc_3088 and xrealloc_3568 -> xrealloc_3569 have been verified to do the same.

same_behavior for the nodes: xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3089 -> xrealloc_3089 and xrealloc_3570 -> xrealloc_3570 have been verified to do the same.

same_behavior for the nodes: xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xrealloc_3090 -> xrealloc_3092 and xrealloc_3571 -> xrealloc_3573 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (41/87): "xmalloc"
--------
.dot code for CFG of text section xmalloc for Vanilla
diGraph xmalloc_Vanilla{
	xmalloc_0  [label="[.label_245,.label_245]"]
	xmalloc_1  [label="[xmalloc_3048,xmalloc_3049]"]
	xmalloc_2  [label="[.label_244,xmalloc_3052]"]
	xmalloc_3  [label="[xmalloc,xmalloc_3044]"]
	xmalloc_4  [label="[xmalloc_3045,xmalloc_3045]"]
	xmalloc_5  [label="[xmalloc_3046,xmalloc_3047]"]


	xmalloc_1 -> xmalloc_0 [label="ZF"];
	xmalloc_1 -> xmalloc_2 [label="!ZF"];

	xmalloc_3 -> xmalloc_4;
	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_2 [label="ZF"];
	xmalloc_5 -> xmalloc_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section xmalloc for Randomized
diGraph xmalloc_Randomized{
	xmalloc_0  [label="[.label_164,.label_164]"]
	xmalloc_1  [label="[xmalloc_1995,xmalloc_1996]"]
	xmalloc_2  [label="[.label_163,xmalloc_1999]"]
	xmalloc_3  [label="[xmalloc,xmalloc_1991]"]
	xmalloc_4  [label="[xmalloc_1992,xmalloc_1992]"]
	xmalloc_5  [label="[xmalloc_1993,xmalloc_1994]"]


	xmalloc_1 -> xmalloc_0 [label="ZF"];
	xmalloc_1 -> xmalloc_2 [label="!ZF"];

	xmalloc_3 -> xmalloc_4;
	xmalloc_4 -> xmalloc_5;
	xmalloc_5 -> xmalloc_2 [label="ZF"];
	xmalloc_5 -> xmalloc_1 [label="!ZF"];
}
--------
Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "xmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

Starting Node: 3

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "xmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
--------

same_behavior for the nodes: xmalloc -> xmalloc_3044 and xmalloc -> xmalloc_1991

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xmalloc -> xmalloc_3044 and xmalloc -> xmalloc_1991 have been verified to do the same.

same_behavior for the nodes: xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992 have been verified to do the same.

same_behavior for the nodes: xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994 have been verified to do the same.

same_behavior for the nodes: .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999 have been verified to do the same.

same_behavior for the nodes: xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996 have been verified to do the same.

same_behavior for the nodes: .label_245 -> .label_245 and .label_164 -> .label_164

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_245 -> .label_245 and .label_164 -> .label_164 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (42/87): "xnmalloc"
--------
.dot code for CFG of text section xnmalloc for Vanilla
diGraph xnmalloc_Vanilla{
	xnmalloc_0  [label="[.label_245,.label_245]"]
	xnmalloc_1  [label="[xmalloc_3048,xmalloc_3049]"]
	xnmalloc_2  [label="[.label_244,xmalloc_3052]"]
	xnmalloc_3  [label="[xnmalloc_3029,xmalloc_3044]"]
	xnmalloc_4  [label="[xmalloc_3045,xmalloc_3045]"]
	xnmalloc_5  [label="[xmalloc_3046,xmalloc_304(8,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0)])
(8,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0)])
7]"]
	xnmalloc_6  [label="[.label_243,.label_243]"]
	xnmalloc_7  [label="[xnmalloc_3034,xnmalloc_3034]"]
	xnmalloc_8  [label="[xnmalloc,xnmalloc_3028]"]


	xnmalloc_1 -> xnmalloc_0 [label="ZF"];
	xnmalloc_1 -> xnmalloc_2 [label="!ZF"];

	xnmalloc_3 -> xnmalloc_4;
	xnmalloc_4 -> xnmalloc_5;
	xnmalloc_5 -> xnmalloc_2 [label="ZF"];
	xnmalloc_5 -> xnmalloc_1 [label="!ZF"];
	xnmalloc_6 -> xnmalloc_7;

	xnmalloc_8 -> xnmalloc_6 [label="CF"];
	xnmalloc_8 -> xnmalloc_3 [label="!CF"];
}
--------
--------
.dot code for CFG of text section xnmalloc for Randomized
diGraph xnmalloc_Randomized{
	xnmalloc_0  [label="[.label_164,.label_164]"]
	xnmalloc_1  [label="[xmalloc_1995,xmalloc_1996]"]
	xnmalloc_2  [label="[.label_163,xmalloc_1999]"]
	xnmalloc_3  [label="[xnmalloc_1969,xmalloc_1991]"]
	xnmalloc_4  [label="[xmalloc_1992,xmalloc_1992]"]
	xnmalloc_5  [label="[xmalloc_1993,xmalloc_1994]"]
	xnmalloc_6  [label="[.label_162,.label_162]"]
	xnmalloc_7  [label="[xnmalloc_1974,xnmalloc_1974]"]
	xnmalloc_8  [label="[xnmalloc,xnmalloc_1968]"]


	xnmalloc_1 -> xnmalloc_0 [label="ZF"];
	xnmalloc_1 -> xnmalloc_2 [label="!ZF"];

	xnmalloc_3 -> xnmalloc_4;
	xnmalloc_4 -> xnmalloc_5;
	xnmalloc_5 -> xnmalloc_2 [label="ZF"];
	xnmalloc_5 -> xnmalloc_1 [label="!ZF"];
	xnmalloc_6 -> xnmalloc_7;

	xnmalloc_8 -> xnmalloc_6 [label="CF"];
	xnmalloc_8 -> xnmalloc_3 [label="!CF"];
}
--------
Starting Node: 8

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1, 6 ----> 7, , 8 --CF--> 6, 8 --!CF--> 3

Symbolic Execution for Binary "Vanilla":
Current text section: "xnmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RSI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 6:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 7:
RAX := xalloc_die@()
node 8:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

Starting Node: 8

Edges: , 1 --ZF--> 0, 1 --!ZF--> 2, , 3 ----> 4, 4 ----> 5, 5 --ZF--> 2, 5 --!ZF--> 1, 6 ----> 7, , 8 --CF--> 6, 8 --!CF--> 3

Symbolic Execution for Binary "Randomized":
Current text section: "xnmalloc"
node 0:
RAX := xalloc_die@()
node 1:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 3:
RBX := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RSI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI))
[(Var: RSP0 - Value: 8),8] := Reg: RBX
node 4:
RAX := malloc@()
node 5:
ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)
node 6:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 7:
RAX := xalloc_die@()
node 8:
RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
--------

same_behavior for the nodes: xnmalloc -> xnmalloc_3028 and xnmalloc -> xnmalloc_1968

same_behavior checking these two SStates:

SA || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)), RDX := (zextend(Value: 9223372036854775807,Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || ZF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(Value: 9223372036854775807,Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

Resulting values:
Value A:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (Op DIV) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_val 9223372036854775807 64,E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc -> xnmalloc_3028 and xnmalloc -> xnmalloc_1968 have been verified to do the same.

same_behavior for the nodes: .label_243 -> .label_243 and .label_162 -> .label_162

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_243 -> .label_243 and .label_162 -> .label_162 have been verified to do the same.

same_behavior for the nodes: xnmalloc_3034 -> xnmalloc_3034 and xnmalloc_1974 -> xnmalloc_1974

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xnmalloc_3034 -> xnmalloc_3034 and xnmalloc_1974 -> xnmalloc_1974 have been verified to do the same.

same_behavior for the nodes: xnmalloc_3029 -> xmalloc_3044 and xnmalloc_1969 -> xmalloc_1991

same_behavior checking these two SStates:

SA || RBX := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RSI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI))
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX

SB || RBX(5,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(5,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
 := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RDI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)), RSI := TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI))
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX

Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Resulting values:
Value A:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Value B:
E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xnmalloc_3029 -> xmalloc_3044 and xnmalloc_1969 -> xmalloc_1991 have been verified to do the same.

same_behavior for the nodes: xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992

same_behavior checking these two SStates:

SA || RAX := malloc@()

SB || RAX := malloc@()

Resulting values:
Value A:
E_app (F2 "malloc" "") []
Value B:
E_app (F2 "malloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3045 -> xmalloc_3045 and xmalloc_1992 -> xmalloc_1992 have been verified to do the same.

same_behavior for the nodes: xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

SB || ZF := TEST(Reg: RBX,Reg: RBX), CF := TEST(Reg: RBX,Reg: RBX), SF := TEST(Reg: RBX,Reg: RBX), OF := TEST(Reg: RBX,Reg: RBX), PF := TEST(Reg: RBX,Reg: RBX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3046 -> xmalloc_3047 and xmalloc_1993 -> xmalloc_1994 have been verified to do the same.

same_behavior for the nodes: .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_244 -> xmalloc_3052 and .label_163 -> xmalloc_1999 have been verified to do the same.

same_behavior for the nodes: xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes xmalloc_3048 -> xmalloc_3049 and xmalloc_1995 -> xmalloc_1996 have been verified to do the same.

same_behavior for the nodes: .label_245 -> .label_245 and .label_164 -> .label_164

same_behavior checking these two SStates:

SA || RAX := xalloc_die@()

SB || RAX := xalloc_die@()

Resulting values:
Value A:
E_app (F2 "xalloc_die" "") []
Value B:
E_app (F2 "xalloc_die" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_245 -> .label_245 and .label_164 -> .label_164 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (43/87): "strcaseeq7"
--------
.dot code for CFG of text section strcaseeq7 for Vanilla
diGraph strcaseeq7_Vanilla{
	strcaseeq7_0  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq7_1  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq7_2  [label="[.label_212,.label_212]"]
	strcaseeq7_3  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq7_4  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq7_5  [label="[strcaseeq7,strcaseeq7_2625]"]
	strcaseeq7_6  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq7_7  [label="[strcaseeq7_2627,strcaseeq7_2629]"]

	strcaseeq7_0 -> strcaseeq7_3;
	strcaseeq7_1 -> strcaseeq7_2 [label="!ZF"];
	strcaseeq7_1 -> strcaseeq7_0 [label="ZF"];
	strcaseeq7_2 -> strcaseeq7_3;

	strcaseeq7_4 -> strcaseeq7_3 [label="ZF"];
	strcaseeq7_4 -> strcaseeq7_2 [label="!ZF"];
	strcaseeq7_5 -> strcaseeq7_6;
	strcaseeq7_6 -> strcaseeq7_7;
	strcaseeq7_7 -> strcaseeq7_4 [label="ZF"];
	strcaseeq7_7 -> strcaseeq7_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq7 for Randomized
diGraph strcaseeq7_Randomized{
	strcaseeq7_0  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq7_1  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq7_2  [label="[.label_263,.label_263]"]
	strcaseeq7_3  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq7_4  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq7_5  [label="[strcaseeq7,strcaseeq7_4009]"]
	strcaseeq7_6  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq7_7  [label="[strcaseeq7_4011,strcaseeq7_4013]"]

	strcaseeq7_0 -> strcaseeq7_3;
	strcaseeq7_1 -> strcaseeq7_2 [label="!ZF"];
	strcaseeq7_1 -> strcaseeq7_0 [label="ZF"];
	strcaseeq7_2 -> strcaseeq7_3;

	strcaseeq7_4 -> strcaseeq7_3 [label="ZF"];
	strcaseeq7_4 -> strcaseeq7_2 [label="!ZF"];
	strcaseeq7_5 -> strcaseeq7_6;
	strcaseeq7_6 -> strcaseeq7_7;
	strcaseeq7_7 -> strcaseeq7_4 [label="ZF"];
	strcaseeq7_7 -> strcaseeq7_1 [label="!ZF"];
}
--------
Starting Node: 5

Edges: 0 ----> 3, 1 --!ZF--> 2, 1 --ZF--> 0, 2 ----> 3, , 4 --ZF--> 3, 4 --!ZF--> 2, 5 ----> 6, 6 ----> 7, 7 --ZF--> 4, 7 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq7"
node 0:
skip'
node 1:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 2:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 4:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 5:
RBX := Reg: RDI, RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := c_isupper@()
node 7:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 5

Edges: 0 ----> 3, 1 --!ZF--> 2, 1 --ZF--> 0, 2 ----> 3, , 4 --ZF--> 3, 4 --!ZF--> 2, 5 ----> 6, 6 ----> 7, 7 --ZF--> 4, 7 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq7"
node 0:
skip'
node 1:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 2:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 4:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 5:
RBX := Reg: RDI, RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 6:
RAX := c_isupper@()
node 7:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq7 -> strcaseeq7_2625 and strcaseeq7 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Reg: RDI, RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq7 -> strcaseeq7_2625 and strcaseeq7 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (44/87): "strcaseeq6"
--------
.dot code for CFG of text section strcaseeq6 for Vanilla
diGraph strcaseeq6_Vanilla{
	strcaseeq6_0  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq6_1  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq6_2  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq6_3  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq6_4  [label="[.label_212,.label_212]"]
	strcaseeq6_5  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq6_6  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq6_7  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq6_8  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq6_9  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq6_10  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq6_11  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq6_12  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq6_13  [label="[strcaseeq6,strcaseeq6_2587]"]
	strcaseeq6_14  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq6_15  [label="[strcaseeq6_2589,strcaseeq6_2591]"]

	strcaseeq6_0 -> strcaseeq6_11;
	strcaseeq6_1 -> strcas(13,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(13,RSP == Var: RSP0 && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
(13,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(12,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(13,RSP == Var: RSP0 && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
eeq6_10 [label="ZF"];
	strcaseeq6_1 -> strcaseeq6_0 [label="!ZF"];
	strcaseeq6_2 -> strcaseeq6_5;
	strcaseeq6_3 -> strcaseeq6_4 [label="!ZF"];
	strcaseeq6_3 -> strcaseeq6_2 [label="ZF"];
	strcaseeq6_4 -> strcaseeq6_5;

	strcaseeq6_6 -> strcaseeq6_5 [label="ZF"];
	strcaseeq6_6 -> strcaseeq6_4 [label="!ZF"];
	strcaseeq6_7 -> strcaseeq6_8;
	strcaseeq6_8 -> strcaseeq6_9;
	strcaseeq6_9 -> strcaseeq6_6 [label="ZF"];
	strcaseeq6_9 -> strcaseeq6_3 [label="!ZF"];
	strcaseeq6_10 -> strcaseeq6_11 [label="ZF"];
	strcaseeq6_10 -> strcaseeq6_7 [label="!ZF"];

	strcaseeq6_12 -> strcaseeq6_11 [label="!ZF"];
	strcaseeq6_12 -> strcaseeq6_10 [label="ZF"];
	strcaseeq6_13 -> strcaseeq6_14;
	strcaseeq6_14 -> strcaseeq6_15;
	strcaseeq6_15 -> strcaseeq6_12 [label="ZF"];
	strcaseeq6_15 -> strcaseeq6_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq6 for Randomized
diGraph strcaseeq6_Randomized{
	strcaseeq6_0  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq6_1  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq6_2  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq6_3  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq6_4  [label="[.label_263,.label_263]"]
	strcaseeq6_5  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq6_6  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq6_7  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq6_8  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq6_9  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq6_10  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq6_11  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq6_12  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq6_13  [label="[strcaseeq6,strcaseeq6_3964]"]
	strcaseeq6_14  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq6_15  [label="[strcaseeq6_3966,strcaseeq6_3968]"]

	strcaseeq6_0 -> strcaseeq6_11;
	strcaseeq6_1 -> strcaseeq6_10 [label="ZF"];
	strcaseeq6_1 -> strcaseeq6_0 [label="!ZF"];
	strcaseeq6_2 -> strcaseeq6_5;
	strcaseeq6_3 -> strcaseeq6_4 [label="!ZF"];
	strcaseeq6_3 -> strcaseeq6_2 [label="ZF"];
	strcaseeq6_4 -> strcaseeq6_5;

	strcaseeq6_6 -> strcaseeq6_5 [label="ZF"];
	strcaseeq6_6 -> strcaseeq6_4 [label="!ZF"];
	strcaseeq6_7 -> strcaseeq6_8;
	strcaseeq6_8 -> strcaseeq6_9;
	strcaseeq6_9 -> strcaseeq6_6 [label="ZF"];
	strcaseeq6_9 -> strcaseeq6_3 [label="!ZF"];
	strcaseeq6_10 -> strcaseeq6_11 [label="ZF"];
	strcaseeq6_10 -> strcaseeq6_7 [label="!ZF"];

	strcaseeq6_12 -> strcaseeq6_11 [label="!ZF"];
	strcaseeq6_12 -> strcaseeq6_10 [label="ZF"];
	strcaseeq6_13 -> strcaseeq6_14;
	strcaseeq6_14 -> strcaseeq6_15;
	strcaseeq6_15 -> strcaseeq6_12 [label="ZF"];
	strcaseeq6_15 -> strcaseeq6_1 [label="!ZF"];
}
--------
Starting Node: 13

Edges: 0 ----> 11, 1 --ZF--> 10, 1 --!ZF--> 0, 2 ----> 5, 3 --!ZF--> 4, 3 --ZF--> 2, 4 ----> 5, , 6 --ZF--> 5, 6 --!ZF--> 4, 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 3, 10 --ZF--> 11, 10 --!ZF--> 7, , 12 --!ZF--> 11, 12 --ZF--> 10, 13 ----> 14, 14 ----> 15, 15 --ZF--> 12, 15 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq6"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 4:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 7:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := c_isupper@()
node 9:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 10:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 12:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 13:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 14:
RAX := c_isupper@()
node 15:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 13

Edges: 0 ----> 11, 1 --ZF--> 10, 1 --!ZF--> 0, 2 ----> 5, 3 --!ZF--> 4, 3 --ZF--> 2, 4 ----> 5, , 6 --ZF--> 5, 6 --!ZF--> 4, 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 3, 10 --ZF--> 11, 10 --!ZF--> 7, , 12 --!ZF--> 11, 12 --ZF--> 10, 13 ----> 14, 14 ----> 15, 15 --ZF--> 12, 15 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq6"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 4:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 6:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 7:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := c_isupper@()
node 9:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 10:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 12:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 13:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 14:
RAX := c_isupper@()
node 15:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq6 -> strcaseeq6_2587 and strcaseeq6 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6 -> strcaseeq6_2587 and strcaseeq6 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Va(21,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(21,RSP == Var: RSP0 && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
lue A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)

Succesful check!
Considering text section (45/87): "strcaseeq5"
--------
.dot code for CFG of text section strcaseeq5 for Vanilla
diGraph strcaseeq5_Vanilla{
	strcaseeq5_0  [label="[strcaseeq5_2554,strcaseeq5_2554]"]
	strcaseeq5_1  [label="[strcaseeq5_2550,strcaseeq5_2553]"]
	strcaseeq5_2  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq5_3  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq5_4  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq5_5  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq5_6  [label="[.label_212,.label_212]"]
	strcaseeq5_7  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq5_8  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq5_9  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq5_10  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq5_11  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq5_12  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq5_13  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq5_14  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq5_15  [label="[strcaseeq5_2563,strcaseeq6_2587]"]
	strcaseeq5_16  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq5_17  [label="[strcaseeq6_2589,strcaseeq6_2591]"]
	strcaseeq5_18  [label="[.label_207,strcaseeq5_2562]"]
	strcaseeq5_19  [label="[.label_206,strcaseeq5_2573]"]
	strcaseeq5_20  [label="[.label_205,strcaseeq5_2558]"]
	strcaseeq5_21  [label="[strcaseeq5,strcaseeq5_2545]"]
	strcaseeq5_22  [label="[strcaseeq5_2546,strcaseeq5_2546]"]
	strcaseeq5_23  [label="[strcaseeq5_2547,strcaseeq5_2549]"]

	strcaseeq5_0 -> strcaseeq5_19;
	strcaseeq5_1 -> strcaseeq5_18 [label="ZF"];
	strcaseeq5_1 -> strcaseeq5_0 [label="!ZF"];
	strcaseeq5_2 -> strcaseeq5_13;
	strcaseeq5_3 -> strcaseeq5_12 [label="ZF"];
	strcaseeq5_3 -> strcaseeq5_2 [label="!ZF"];
	strcaseeq5_4 -> strcaseeq5_7;
	strcaseeq5_5 -> strcaseeq5_6 [label="!ZF"];
	strcaseeq5_5 -> strcaseeq5_4 [label="ZF"];
	strcaseeq5_6 -> strcaseeq5_7;

	strcaseeq5_8 -> strcaseeq5_7 [label="ZF"];
	strcaseeq5_8 -> strcaseeq5_6 [label="!ZF"];
	strcaseeq5_9 -> strcaseeq5_10;
	strcaseeq5_10 -> strcaseeq5_11;
	strcaseeq5_11 -> strcaseeq5_8 [label="ZF"];
	strcaseeq5_11 -> strcaseeq5_5 [label="!ZF"];
	strcaseeq5_12 -> strcaseeq5_13 [label="ZF"];
	strcaseeq5_12 -> strcaseeq5_9 [label="!ZF"];

	strcaseeq5_14 -> strcaseeq5_13 [label="!ZF"];
	strcaseeq5_14 -> strcaseeq5_12 [label="ZF"];
	strcaseeq5_15 -> strcaseeq5_16;
	strcaseeq5_16 -> strcaseeq5_17;
	strcaseeq5_17 -> strcaseeq5_14 [label="ZF"];
	strcaseeq5_17 -> strcaseeq5_3 [label="!ZF"];
	strcaseeq5_18 -> strcaseeq5_19 [label="ZF"];
	strcaseeq5_18 -> strcaseeq5_15 [label="!ZF"];

	strcaseeq5_20 -> strcaseeq5_19 [label="!ZF"];
	strcaseeq5_20 -> strcaseeq5_18 [label="ZF"];
	strcaseeq5_21 -> strcaseeq5_22;
	strcaseeq5_22 -> strcaseeq5_23;
	strcaseeq5_23 -> strcaseeq5_20 [label="ZF"];
	strcaseeq5_23 -> strcaseeq5_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq5 for Randomized
diGraph strcaseeq5_Randomized{
	strcaseeq5_0  [label="[strcaseeq5_3924,strcaseeq5_3924]"]
	strcaseeq5_1  [label="[strcaseeq5_3920,strcaseeq5_3923]"]
	strcaseeq5_2  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq5_3  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq5_4  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq5_5  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq5_6  [label="[.label_263,.label_263]"]
	strcaseeq5_7  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq5_8  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq5_9  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq5_10  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq5_11  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq5_12  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq5_13  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq5_14  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq5_15  [label="[strcaseeq5_3933,strcaseeq6_3964]"]
	strcaseeq5_16  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq5_17  [label="[strcaseeq6_3966,strcaseeq6_3968]"]
	strcaseeq5_18  [label="[.label_258,strcaseeq5_3932]"]
	strcaseeq5_19  [label="[.label_257,strcaseeq5_3943]"]
	strcaseeq5_20  [label="[.label_256,strcaseeq5_3928]"]
	strcaseeq5_21  [label="[strcaseeq5,strcaseeq5_3915]"]
	strcaseeq5_22  [label="[strcaseeq5_3916,strcaseeq5_3916]"]
	strcaseeq5_23  [label="[strcaseeq5_3917,strcaseeq5_3919]"]

	strcaseeq5_0 -> strcaseeq5_19;
	strcaseeq5_1 -> strcaseeq5_18 [label="ZF"];
	strcaseeq5_1 -> strcaseeq5_0 [label="!ZF"];
	strcaseeq5_2 -> strcaseeq5_13;
	strcaseeq5_3 -> strcaseeq5_12 [label="ZF"];
	strcaseeq5_3 -> strcaseeq5_2 [label="!ZF"];
	strcaseeq5_4 -> strcaseeq5_7;
	strcaseeq5_5 -> strcaseeq5_6 [label="!ZF"];
	strcaseeq5_5 -> strcaseeq5_4 [label="ZF"];
	strcaseeq5_6 -> strcaseeq5_7;

	strcaseeq5_8 -> strcaseeq5_7 [label="ZF"];
	strcaseeq5_8 -> strcaseeq5_6 [label="!ZF"];
	strcaseeq5_9 -> strcaseeq5_10;
	strcaseeq5_10 -> strcaseeq5_11;
	strcaseeq5_11 -> strcaseeq5_8 [label="ZF"];
	strcaseeq5_11 -> strcaseeq5_5 [label="!ZF"];
	strcaseeq5_12 -> strcaseeq5_13 [label="ZF"];
	strcaseeq5_12 -> strcaseeq5_9 [label="!ZF"];

	strcaseeq5_14 -> strcaseeq5_13 [label="!ZF"];
	strcaseeq5_14 -> strcaseeq5_12 [label="ZF"];
	strcaseeq5_15 -> strcaseeq5_16;
	strcaseeq5_16 -> strcaseeq5_17;
	strcaseeq5_17 -> strcaseeq5_14 [label="ZF"];
	strcaseeq5_17 -> strcaseeq5_3 [label="!ZF"];
	strcaseeq5_18 -> strcaseeq5_19 [label="ZF"];
	strcaseeq5_18 -> strcaseeq5_15 [label="!ZF"];

	strcaseeq5_20 -> strcaseeq5_19 [label="!ZF"];
	strcaseeq5_20 -> strcaseeq5_18 [label="ZF"];
	strcaseeq5_21 -> strcaseeq5_22;
	strcaseeq5_22 -> strcaseeq5_23;
	strcaseeq5_23 -> strcaseeq5_20 [label="ZF"];
	strcaseeq5_23 -> strcaseeq5_1 [label="!ZF"];
}
--------
Starting Node: 21

Edges: 0 ----> 19, 1 --ZF--> 18, 1 --!ZF--> 0, 2 ----> 13, 3 --ZF--> 12, 3 --!ZF--> 2, 4 ----> 7, 5 --!ZF--> 6, 5 --ZF--> 4, 6 ----> 7, , 8 --ZF--> 7, 8 --!ZF--> 6, 9 ----> 10, 10 ----> 11, 11 --ZF--> 8, 11 --!ZF--> 5, 12 --ZF--> 13, 12 --!ZF--> 9, , 14 --!ZF--> 13, 14 --ZF--> 12, 15 ----> 16, 16 ----> 17, 17 --ZF--> 14, 17 --!ZF--> 3, 18 --ZF--> 19, 18 --!ZF--> 15, , 20 --!ZF--> 19, 20 --ZF--> 18, 21 ----> 22, 22 ----> 23, 23 --ZF--> 20, 23 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq5"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 429496726(21,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(13,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(14,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(21,RSP == Var: RSP0 && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == TakeBits: <31,0>(Reg: RSI))])
3),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 4:
skip'
node 5:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 6:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 8:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 9:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := c_isupper@()
node 11:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 12:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 13:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 14:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 15:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 16:
RAX := c_isupper@()
node 17:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 18:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 19:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 20:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 21:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 22:
RAX := c_isupper@()
node 23:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 21

Edges: 0 ----> 19, 1 --ZF--> 18, 1 --!ZF--> 0, 2 ----> 13, 3 --ZF--> 12, 3 --!ZF--> 2, 4 ----> 7, 5 --!ZF--> 6, 5 --ZF--> 4, 6 ----> 7, , 8 --ZF--> 7, 8 --!ZF--> 6, 9 ----> 10, 10 ----> 11, 11 --ZF--> 8, 11 --!ZF--> 5, 12 --ZF--> 13, 12 --!ZF--> 9, , 14 --!ZF--> 13, 14 --ZF--> 12, 15 ----> 16, 16 ----> 17, 17 --ZF--> 14, 17 --!ZF--> 3, 18 --ZF--> 19, 18 --!ZF--> 15, , 20 --!ZF--> 19, 20 --ZF--> 18, 21 ----> 22, 22 ----> 23, 23 --ZF--> 20, 23 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq5"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 4:
skip'
node 5:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 6:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 8:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 9:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 10:
RAX := c_isupper@()
node 11:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 12:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 13:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 14:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 15:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 16:
RAX := c_isupper@()
node 17:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 18:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 19:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 20:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 21:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
node 22:
RAX := c_isupper@()
node 23:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq5 -> strcaseeq5_2545 and strcaseeq5 -> strcaseeq5_3915

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R14 := TakeBits: <31,0>(Reg: RDX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R14 := TakeBits: <31,0>(Reg: RDX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5 -> strcaseeq5_2545 and strcaseeq5 -> strcaseeq5_3915 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919 have been verified to do the same.

same_behavior for the nodes: .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928 have been verified to do the same.

same_behavior for the nodes: .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943 have been verified to do the same.

same_behavior for the nodes: .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 8),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 8),(Var: RSP0 - Value: 16)

Succesful check!
Considering text section (46/87): "strcaseeq4"
--------
.dot code for CFG of text section strcaseeq4 for Vanilla
diGraph strcaseeq4_Vanilla{
	strcaseeq4_0  [label="[strcaseeq4_2506,strcaseeq4_2506]"]
	strcaseeq4_1  [label="[strcaseeq4_2502,strcaseeq4_2505]"]
	strcaseeq4_2  [label="[strcaseeq5_2554,strcaseeq5_2554]"]
	strcaseeq4_3  [label="[strcaseeq5_2550,strcaseeq5_2553]"]
	strcaseeq4_4  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq4_5  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq4_6  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq4_7  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq4_8  [label="[.label_212,.label_212]"]
	strcaseeq4_9  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq4_10  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq4_11  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq4_12  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq4_13  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq4_14  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq4_15  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq4_16  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq4_17  [label="[strcaseeq5_2563,strcaseeq6_2587]"]
	strcaseeq4_18  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq4_19  [label="[strcaseeq6_2589,strcaseeq6_2591]"]
	strcaseeq4_20  [label="[.label_207,strcaseeq5_2562]"]
	strcaseeq4_21  [label="[.label_206,strcaseeq5_2573]"]
	strcaseeq4_22  [label="[.label_205,strcaseeq5_2558]"]
	strcaseeq4_23  [label="[strcaseeq4_2515,strcaseeq5_2545]"]
	strcaseeq4_24  [label="[strcaseeq5_2546,strcaseeq5_2546]"]
	strcaseeq4_25  [label="[strcaseeq5_2547,strcaseeq5_2549]"]
	strcaseeq4_26  [label="[.label_202,strcaseeq4_2514]"]
	strcaseeq4_27  [label="[.label_203,strcaseeq4_2530]"]
	strcaseeq4_28  [label="[.label_204,strcaseeq4_2510]"]
	strcaseeq4_29  [label="[strcaseeq4,strcaseeq4_2497]"]
	strcaseeq4_30  [label="[strcaseeq4_2498,strcaseeq4_2498]"]
	strcaseeq4_31  [label="[strcaseeq4_2499,strcaseeq4_2501]"]

	strcaseeq4_0 -> strcaseeq4_27;
	strcaseeq4_1 -> strcaseeq4_26 [label="ZF"];
	strcaseeq4_1 -> strcaseeq4_0 [label="!ZF"];
	strcaseeq4_2 -> strcaseeq4_21;
	strcaseeq4_3 -> strcaseeq4_20 [label="ZF"];
	strcaseeq4_3 -> strcaseeq4_2 [label="!ZF"];
	strcaseeq4_4 -> strcaseeq4_15;
	strcaseeq4_5 -> strcaseeq4_14 [label="ZF"];
	strcaseeq4_5 -> strcaseeq4_4 [label="!ZF"];
	strcaseeq4_6 -> strcaseeq4_9;
	strcaseeq4_7 -> strcaseeq4_8 [label="!ZF"];
	strcaseeq4_7 -> strcaseeq4_6 [label="ZF"];
	strcaseeq4_8 -> strcaseeq4_9;

	strcaseeq4_10 -> strcaseeq4_9 [label="ZF"];
	strcaseeq4_10 -> strcaseeq4_8 [label="!ZF"];
	strcaseeq4_11 -> strcaseeq4_12;
	strcaseeq4_12 -> strcaseeq4_13;
	strcaseeq4_13 -> strcaseeq4_10 [label="ZF"];
	strcaseeq4_13 -> strcaseeq4_7 [label="!ZF"];
	strcaseeq4_14 -> strcaseeq4_15 [label="ZF"];
	strcaseeq4_14 -> strcaseeq4_11 [label="!ZF"];

	strcaseeq4_16 -> strcaseeq4_15 [label="!ZF"];
	strcaseeq4_16 -> strcaseeq4_14 [label="ZF"];
	strcaseeq4_17 -> strcaseeq4_18;
	strcaseeq4_18 -> strcaseeq4_19;
	strcaseeq4_19 -> strcaseeq4_16 [label="ZF"];
	strcaseeq4_19 -> strcaseeq4_5 [label="!ZF"];
	strcaseeq4_20 -> strcaseeq4_21 [label="ZF"];
	strcaseeq4_20 -> strcaseeq4_17 [label="!ZF"];

	strcaseeq4_22 -> strcaseeq4_21 [label="!ZF"];
	strcaseeq4_22 -> strcaseeq4_20 [label="ZF"];
	strcaseeq4_23 -> strcaseeq4_24;
	strcaseeq4_24 -> strcaseeq4_25;
	strcaseeq4_25 -> strcaseeq4_22 [label="ZF"];
	strcaseeq4_25 -> strcaseeq4_3 [label="!ZF"];
	strcaseeq4_26 -> strcaseeq4_27 [label="ZF"];
	strcaseeq4_26 -> strcaseeq4_23 [label="!ZF"];

	strcaseeq4_28 -> strcaseeq4_27 [label="!ZF"];
	strcaseeq4_28 -> strcaseeq4_26 [label="ZF"];
	strcaseeq4_29 -> strcaseeq4_30;
	strcaseeq4_30 -> strcaseeq4_31;
	strcaseeq4_31 -> strcaseeq4_28 [label="ZF"];
	strcaseeq4_31 -> strcaseeq4_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq4 for Randomized
diGraph strcaseeq4_Randomized{
	strcaseeq4_0  [label="[strcaseeq4_3869,strcaseeq4_3869]"]
	strcaseeq4_1  [label="[strcaseeq4_3865,strcaseeq4_386(29,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(26,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(28,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(29,RSP == Var: RSP0 && RBP == Var: RBP0),(30,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI))])
8]"]
	strcaseeq4_2  [label="[strcaseeq5_3924,strcaseeq5_3924]"]
	strcaseeq4_3  [label="[strcaseeq5_3920,strcaseeq5_3923]"]
	strcaseeq4_4  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq4_5  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq4_6  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq4_7  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq4_8  [label="[.label_263,.label_263]"]
	strcaseeq4_9  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq4_10  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq4_11  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq4_12  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq4_13  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq4_14  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq4_15  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq4_16  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq4_17  [label="[strcaseeq5_3933,strcaseeq6_3964]"]
	strcaseeq4_18  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq4_19  [label="[strcaseeq6_3966,strcaseeq6_3968]"]
	strcaseeq4_20  [label="[.label_258,strcaseeq5_3932]"]
	strcaseeq4_21  [label="[.label_257,strcaseeq5_3943]"]
	strcaseeq4_22  [label="[.label_256,strcaseeq5_3928]"]
	strcaseeq4_23  [label="[strcaseeq4_3878,strcaseeq5_3915]"]
	strcaseeq4_24  [label="[strcaseeq5_3916,strcaseeq5_3916]"]
	strcaseeq4_25  [label="[strcaseeq5_3917,strcaseeq5_3919]"]
	strcaseeq4_26  [label="[.label_253,strcaseeq4_3877]"]
	strcaseeq4_27  [label="[.label_254,strcaseeq4_3893]"]
	strcaseeq4_28  [label="[.label_255,strcaseeq4_3873]"]
	strcaseeq4_29  [label="[strcaseeq4,strcaseeq4_3860]"]
	strcaseeq4_30  [label="[strcaseeq4_3861,strcaseeq4_3861]"]
	strcaseeq4_31  [label="[strcaseeq4_3862,strcaseeq4_3864]"]

	strcaseeq4_0 -> strcaseeq4_27;
	strcaseeq4_1 -> strcaseeq4_26 [label="ZF"];
	strcaseeq4_1 -> strcaseeq4_0 [label="!ZF"];
	strcaseeq4_2 -> strcaseeq4_21;
	strcaseeq4_3 -> strcaseeq4_20 [label="ZF"];
	strcaseeq4_3 -> strcaseeq4_2 [label="!ZF"];
	strcaseeq4_4 -> strcaseeq4_15;
	strcaseeq4_5 -> strcaseeq4_14 [label="ZF"];
	strcaseeq4_5 -> strcaseeq4_4 [label="!ZF"];
	strcaseeq4_6 -> strcaseeq4_9;
	strcaseeq4_7 -> strcaseeq4_8 [label="!ZF"];
	strcaseeq4_7 -> strcaseeq4_6 [label="ZF"];
	strcaseeq4_8 -> strcaseeq4_9;

	strcaseeq4_10 -> strcaseeq4_9 [label="ZF"];
	strcaseeq4_10 -> strcaseeq4_8 [label="!ZF"];
	strcaseeq4_11 -> strcaseeq4_12;
	strcaseeq4_12 -> strcaseeq4_13;
	strcaseeq4_13 -> strcaseeq4_10 [label="ZF"];
	strcaseeq4_13 -> strcaseeq4_7 [label="!ZF"];
	strcaseeq4_14 -> strcaseeq4_15 [label="ZF"];
	strcaseeq4_14 -> strcaseeq4_11 [label="!ZF"];

	strcaseeq4_16 -> strcaseeq4_15 [label="!ZF"];
	strcaseeq4_16 -> strcaseeq4_14 [label="ZF"];
	strcaseeq4_17 -> strcaseeq4_18;
	strcaseeq4_18 -> strcaseeq4_19;
	strcaseeq4_19 -> strcaseeq4_16 [label="ZF"];
	strcaseeq4_19 -> strcaseeq4_5 [label="!ZF"];
	strcaseeq4_20 -> strcaseeq4_21 [label="ZF"];
	strcaseeq4_20 -> strcaseeq4_17 [label="!ZF"];

	strcaseeq4_22 -> strcaseeq4_21 [label="!ZF"];
	strcaseeq4_22 -> strcaseeq4_20 [label="ZF"];
	strcaseeq4_23 -> strcaseeq4_24;
	strcaseeq4_24 -> strcaseeq4_25;
	strcaseeq4_25 -> strcaseeq4_22 [label="ZF"];
	strcaseeq4_25 -> strcaseeq4_3 [label="!ZF"];
	strcaseeq4_26 -> strcaseeq4_27 [label="ZF"];
	strcaseeq4_26 -> strcaseeq4_23 [label="!ZF"];

	strcaseeq4_28 -> strcaseeq4_27 [label="!ZF"];
	strcaseeq4_28 -> strcaseeq4_26 [label="ZF"];
	strcaseeq4_29 -> strcaseeq4_30;
	strcaseeq4_30 -> strcaseeq4_31;
	strcaseeq4_31 -> strcaseeq4_28 [label="ZF"];
	strcaseeq4_31 -> strcaseeq4_1 [label="!ZF"];
}
--------
Starting Node: 29

Edges: 0 ----> 27, 1 --ZF--> 26, 1 --!ZF--> 0, 2 ----> 21, 3 --ZF--> 20, 3 --!ZF--> 2, 4 ----> 15, 5 --ZF--> 14, 5 --!ZF--> 4, 6 ----> 9, 7 --!ZF--> 8, 7 --ZF--> 6, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 8, 11 ----> 12, 12 ----> 13, 13 --ZF--> 10, 13 --!ZF--> 7, 14 --ZF--> 15, 14 --!ZF--> 11, , 16 --!ZF--> 15, 16 --ZF--> 14, 17 ----> 18, 18 ----> 19, 19 --ZF--> 16, 19 --!ZF--> 5, 20 --ZF--> 21, 20 --!ZF--> 17, , 22 --!ZF--> 21, 22 --ZF--> 20, 23 ----> 24, 24 ----> 25, 25 --ZF--> 22, 25 --!ZF--> 3, 26 --ZF--> 27, 26 --!ZF--> 23, , 28 --!ZF--> 27, 28 --ZF--> 26, 29 ----> 30, 30 ----> 31, 31 --ZF--> 28, 31 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq4"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 6:
skip'
node 7:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 8:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 11:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 12:
RAX := c_isupper@()
node 13:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 14:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 15:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF :=(29,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(3,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(15,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(23,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(26,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(28,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(29,RSP == Var: RSP0 && RBP == Var: RBP0),(30,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI))])
 (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 16:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 17:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 18:
RAX := c_isupper@()
node 19:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 20:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 22:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 23:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 24:
RAX := c_isupper@()
node 25:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 26:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 27:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 28:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 29:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RDX), R14 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 30:
RAX := c_isupper@()
node 31:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 29

Edges: 0 ----> 27, 1 --ZF--> 26, 1 --!ZF--> 0, 2 ----> 21, 3 --ZF--> 20, 3 --!ZF--> 2, 4 ----> 15, 5 --ZF--> 14, 5 --!ZF--> 4, 6 ----> 9, 7 --!ZF--> 8, 7 --ZF--> 6, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 8, 11 ----> 12, 12 ----> 13, 13 --ZF--> 10, 13 --!ZF--> 7, 14 --ZF--> 15, 14 --!ZF--> 11, , 16 --!ZF--> 15, 16 --ZF--> 14, 17 ----> 18, 18 ----> 19, 19 --ZF--> 16, 19 --!ZF--> 5, 20 --ZF--> 21, 20 --!ZF--> 17, , 22 --!ZF--> 21, 22 --ZF--> 20, 23 ----> 24, 24 ----> 25, 25 --ZF--> 22, 25 --!ZF--> 3, 26 --ZF--> 27, 26 --!ZF--> 23, , 28 --!ZF--> 27, 28 --ZF--> 26, 29 ----> 30, 30 ----> 31, 31 --ZF--> 28, 31 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq4"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 6:
skip'
node 7:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 8:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 10:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 11:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 12:
RAX := c_isupper@()
node 13:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 14:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 15:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 16:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 17:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 18:
RAX := c_isupper@()
node 19:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 20:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 22:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 23:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 24:
RAX := c_isupper@()
node 25:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 26:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 27:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 28:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 29:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RDX), R14 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 30:
RAX := c_isupper@()
node 31:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq4 -> strcaseeq4_2497 and strcaseeq4 -> strcaseeq4_3860

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RDX), R14 := TakeBits: <31,0>(Reg: RCX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RDX), R14 := TakeBits: <31,0>(Reg: RCX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: RBX, [(Var: RSP0 - Value: 40),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RCX]
Value B:
E_app (TakeBits 31 0) [E_reg RCX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq4 -> strcaseeq4_2497 and strcaseeq4 -> strcaseeq4_3860 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864 have been verified to do the same.

same_behavior for the nodes: .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873 have been verified to do the same.

same_behavior for the nodes: .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893 have been verified to do the same.

same_behavior for the nodes: .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915

same_behavior checking these two SStates:

SA || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919 have been verified to do the same.

same_behavior for the nodes: .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928 have been verified to do the same.

same_behavior for the nodes: .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943 have been verified to do the same.

same_behavior for the nodes: .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 32),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)

Succesful check!
Considering text section (47/87): "strcaseeq3"
--------
.dot code for CFG of text section strcaseeq3 for Vanilla
diGraph strcaseeq3_Vanilla{
	strcaseeq3_0  [label="[strcaseeq3_2454,strcaseeq3_2454]"]
	strcaseeq3_1  [label="[strcaseeq3_2450,strcaseeq3_2453]"]
	strcaseeq3_2  [label="[strcaseeq4_2506,strcaseeq4_2506]"]
	strcaseeq3_3  [label="[strcaseeq4_2502,strcaseeq4_2505]"]
	strcaseeq3_4  [label="[strcaseeq5_2554,strcaseeq5_2554]"]
	strcaseeq3_5  [label="[strcaseeq5_2550,strcaseeq5_2553]"]
	strcaseeq3_6  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq3_7  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq3_8  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq3_9  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq3_10  [label="[.label_212,.label_212]"]
	strcaseeq3_11  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq3_12  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq3_13  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq3_14  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq3_15  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq3_16  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq3_17  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq3_18  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq3_19  [label="[strcaseeq5_2563,strcaseeq6_2587]"]
	strcaseeq3_20  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq3_21  [label="[strcaseeq6_2589,strcaseeq6_2591]"]
	strcaseeq3_22  [label="[.label_207,strcaseeq5_2562]"]
	strcaseeq3_23  [label="[.label_206,strcaseeq5_2573]"]
	strcaseeq3_24  [label="[.label_205,strcaseeq5_2558]"]
	strcaseeq3_25  [label="[strcaseeq4_2515,strcaseeq5_2545]"]
	strcaseeq3_26  [label="[strcaseeq5_2546,strcaseeq5_2546]"]
	strcaseeq3_27  [label="[strcaseeq5_2547,strcaseeq5_2549]"]
	strcaseeq3_28  [label="[.label_202,strcaseeq4_2514]"]
	strcaseeq3_29  [label="[.label_203,strcaseeq4_2530]"]
	strcaseeq3_30  [label="[.label_204,strcaseeq4_2510]"]
	strcaseeq3_31  [label="[strcaseeq3_2463,strcaseeq4_2497]"]
	strcaseeq3_32  [label="[strcaseeq4_2498,strcaseeq4_2498]"]
	strcaseeq3_33  [label="[strcaseeq4_2499,strcaseeq4_2501]"]
	strcaseeq3_34  [label="[.label_200,strcaseeq3_2462]"]
	strcaseeq3_35  [label="[.label_199,strcaseeq3_2479]"]
	strcaseeq3_36  [label="[.label_201,strcaseeq3_2458]"]
	strcaseeq3_37  [label="[strcaseeq3,strcaseeq3_2445]"]
	strcaseeq3_38  [label="[strcaseeq3_2446,strcaseeq3_2446]"]
	strcaseeq3_39  [label="[strcaseeq3_2447,strcaseeq3_2449]"]

	strcaseeq3_0 -> strcaseeq3_35;
	strcaseeq3_1 -> strcaseeq3_34 [label="ZF"];
	strcaseeq3_1 -> strcaseeq3_0 [label="!ZF"];
	(37,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(28,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(29,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(30,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(37,RSP == Var: RSP0 && RBP == Var: RBP0),(38,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(39,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI))])
strcaseeq3_2 -> strcaseeq3_29;
	strcaseeq3_3 -> strcaseeq3_28 [label="ZF"];
	strcaseeq3_3 -> strcaseeq3_2 [label="!ZF"];
	strcaseeq3_4 -> strcaseeq3_23;
	strcaseeq3_5 -> strcaseeq3_22 [label="ZF"];
	strcaseeq3_5 -> strcaseeq3_4 [label="!ZF"];
	strcaseeq3_6 -> strcaseeq3_17;
	strcaseeq3_7 -> strcaseeq3_16 [label="ZF"];
	strcaseeq3_7 -> strcaseeq3_6 [label="!ZF"];
	strcaseeq3_8 -> strcaseeq3_11;
	strcaseeq3_9 -> strcaseeq3_10 [label="!ZF"];
	strcaseeq3_9 -> strcaseeq3_8 [label="ZF"];
	strcaseeq3_10 -> strcaseeq3_11;

	strcaseeq3_12 -> strcaseeq3_11 [label="ZF"];
	strcaseeq3_12 -> strcaseeq3_10 [label="!ZF"];
	strcaseeq3_13 -> strcaseeq3_14;
	strcaseeq3_14 -> strcaseeq3_15;
	strcaseeq3_15 -> strcaseeq3_12 [label="ZF"];
	strcaseeq3_15 -> strcaseeq3_9 [label="!ZF"];
	strcaseeq3_16 -> strcaseeq3_17 [label="ZF"];
	strcaseeq3_16 -> strcaseeq3_13 [label="!ZF"];

	strcaseeq3_18 -> strcaseeq3_17 [label="!ZF"];
	strcaseeq3_18 -> strcaseeq3_16 [label="ZF"];
	strcaseeq3_19 -> strcaseeq3_20;
	strcaseeq3_20 -> strcaseeq3_21;
	strcaseeq3_21 -> strcaseeq3_18 [label="ZF"];
	strcaseeq3_21 -> strcaseeq3_7 [label="!ZF"];
	strcaseeq3_22 -> strcaseeq3_23 [label="ZF"];
	strcaseeq3_22 -> strcaseeq3_19 [label="!ZF"];

	strcaseeq3_24 -> strcaseeq3_23 [label="!ZF"];
	strcaseeq3_24 -> strcaseeq3_22 [label="ZF"];
	strcaseeq3_25 -> strcaseeq3_26;
	strcaseeq3_26 -> strcaseeq3_27;
	strcaseeq3_27 -> strcaseeq3_24 [label="ZF"];
	strcaseeq3_27 -> strcaseeq3_5 [label="!ZF"];
	strcaseeq3_28 -> strcaseeq3_29 [label="ZF"];
	strcaseeq3_28 -> strcaseeq3_25 [label="!ZF"];

	strcaseeq3_30 -> strcaseeq3_29 [label="!ZF"];
	strcaseeq3_30 -> strcaseeq3_28 [label="ZF"];
	strcaseeq3_31 -> strcaseeq3_32;
	strcaseeq3_32 -> strcaseeq3_33;
	strcaseeq3_33 -> strcaseeq3_30 [label="ZF"];
	strcaseeq3_33 -> strcaseeq3_3 [label="!ZF"];
	strcaseeq3_34 -> strcaseeq3_35 [label="ZF"];
	strcaseeq3_34 -> strcaseeq3_31 [label="!ZF"];

	strcaseeq3_36 -> strcaseeq3_35 [label="!ZF"];
	strcaseeq3_36 -> strcaseeq3_34 [label="ZF"];
	strcaseeq3_37 -> strcaseeq3_38;
	strcaseeq3_38 -> strcaseeq3_39;
	strcaseeq3_39 -> strcaseeq3_36 [label="ZF"];
	strcaseeq3_39 -> strcaseeq3_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq3 for Randomized
diGraph strcaseeq3_Randomized{
	strcaseeq3_0  [label="[strcaseeq3_3810,strcaseeq3_3810]"]
	strcaseeq3_1  [label="[strcaseeq3_3806,strcaseeq3_3809]"]
	strcaseeq3_2  [label="[strcaseeq4_3869,strcaseeq4_3869]"]
	strcaseeq3_3  [label="[strcaseeq4_3865,strcaseeq4_3868]"]
	strcaseeq3_4  [label="[strcaseeq5_3924,strcaseeq5_3924]"]
	strcaseeq3_5  [label="[strcaseeq5_3920,strcaseeq5_3923]"]
	strcaseeq3_6  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq3_7  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq3_8  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq3_9  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq3_10  [label="[.label_263,.label_263]"]
	strcaseeq3_11  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq3_12  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq3_13  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq3_14  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq3_15  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq3_16  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq3_17  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq3_18  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq3_19  [label="[strcaseeq5_3933,strcaseeq6_3964]"]
	strcaseeq3_20  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq3_21  [label="[strcaseeq6_3966,strcaseeq6_3968]"]
	strcaseeq3_22  [label="[.label_258,strcaseeq5_3932]"]
	strcaseeq3_23  [label="[.label_257,strcaseeq5_3943]"]
	strcaseeq3_24  [label="[.label_256,strcaseeq5_3928]"]
	strcaseeq3_25  [label="[strcaseeq4_3878,strcaseeq5_3915]"]
	strcaseeq3_26  [label="[strcaseeq5_3916,strcaseeq5_3916]"]
	strcaseeq3_27  [label="[strcaseeq5_3917,strcaseeq5_3919]"]
	strcaseeq3_28  [label="[.label_253,strcaseeq4_3877]"]
	strcaseeq3_29  [label="[.label_254,strcaseeq4_3893]"]
	strcaseeq3_30  [label="[.label_255,strcaseeq4_3873]"]
	strcaseeq3_31  [label="[strcaseeq3_3819,strcaseeq4_3860]"]
	strcaseeq3_32  [label="[strcaseeq4_3861,strcaseeq4_3861]"]
	strcaseeq3_33  [label="[strcaseeq4_3862,strcaseeq4_3864]"]
	strcaseeq3_34  [label="[.label_251,strcaseeq3_3818]"]
	strcaseeq3_35  [label="[.label_250,strcaseeq3_3835]"]
	strcaseeq3_36  [label="[.label_252,strcaseeq3_3814]"]
	strcaseeq3_37  [label="[strcaseeq3,strcaseeq3_3801]"]
	strcaseeq3_38  [label="[strcaseeq3_3802,strcaseeq3_3802]"]
	strcaseeq3_39  [label="[strcaseeq3_3803,strcaseeq3_3805]"]

	strcaseeq3_0 -> strcaseeq3_35;
	strcaseeq3_1 -> strcaseeq3_34 [label="ZF"];
	strcaseeq3_1 -> strcaseeq3_0 [label="!ZF"];
	strcaseeq3_2 -> strcaseeq3_29;
	strcaseeq3_3 -> strcaseeq3_28 [label="ZF"];
	strcaseeq3_3 -> strcaseeq3_2 [label="!ZF"];
	strcaseeq3_4 -> strcaseeq3_23;
	strcaseeq3_5 -> strcaseeq3_22 [label="ZF"];
	strcaseeq3_5 -> strcaseeq3_4 [label="!ZF"];
	strcaseeq3_6 -> strcaseeq3_17;
	strcaseeq3_7 -> strcaseeq3_16 [label="ZF"];
	strcaseeq3_7 -> strcaseeq3_6 [label="!ZF"];
	strcaseeq3_8 -> strcaseeq3_11;
	strcaseeq3_9 -> strcaseeq3_10 [label="!ZF"];
	strcaseeq3_9 -> strcaseeq3_8 [label="ZF"];
	strcaseeq3_10 -> strcaseeq3_11;

	strcaseeq3_12 -> strcaseeq3_11 [label="ZF"];
	strcaseeq3_12 -> strcaseeq3_10 [label="!ZF"];
	strcaseeq3_13 -> strcaseeq3_14;
	strcaseeq3_14 -> strcaseeq3_15;
	strcaseeq3_15 -> strcaseeq3_12 [label="ZF"];
	strcaseeq3_15 -> strcaseeq3_9 [label="!ZF"];
	strcaseeq3_16 -> strcaseeq3_17 [label="ZF"];
	strcaseeq3_16 -> strcaseeq3_13 [label="!ZF"];

	strcaseeq3_18 -> strcaseeq3_17 [label="!ZF"];
	strcaseeq3_18 -> strcaseeq3_16 [label="ZF"];
	strcaseeq3_19 -> strcaseeq3_20;
	strcaseeq3_20 -> strcaseeq3_21;
	strcaseeq3_21 -> strcaseeq3_18 [label="ZF"];
	strcaseeq3_21 -> strcaseeq3_7 [label="!ZF"];
	strcaseeq3_22 -> strcaseeq3_23 [label="ZF"];
	strcaseeq3_22 -> strcaseeq3_19 [label="!ZF"];

	strcaseeq3_24 -> strcaseeq3_23 [label="!ZF"];
	strcaseeq3_24 -> strcaseeq3_22 [label="ZF"];
	strcaseeq3_25 -> strcaseeq3_26;
	strcaseeq3_26 -> strcaseeq3_27;
	strcaseeq3_27 -> strcaseeq3_24 [label="ZF"];
	strcaseeq3_27 -> strcaseeq3_5 [label="!ZF"];
	strcaseeq3_28 -> strcaseeq3_29 [label="ZF"];
	strcaseeq3_28 -> strcaseeq3_25 [label="!ZF"];

	strcaseeq3_30 -> strcaseeq3_29 [label="!ZF"];
	strcaseeq3_30 -> strcaseeq3_28 [label="ZF"];
	strcaseeq3_31 -> strcaseeq3_32;
	strcaseeq3_32 -> strcaseeq3_33;
	strcaseeq3_33 -> strcaseeq3_30 [label="ZF"];
	strcaseeq3_33 -> strcaseeq3_3 [label="!ZF"];
	strcaseeq3_34 -> strcaseeq3_35 [label="ZF"];
	strcaseeq3_34 -> strcaseeq3_31 [label="!ZF"];

	strcaseeq3_36 -> strcaseeq3_35 [label="!ZF"];
	strcaseeq3_36 -> strcaseeq3_34 [label="ZF"];
	strcaseeq3_37 -> strcaseeq3_38;
	strcaseeq3_38 -> strcaseeq3_39;
	strcaseeq3_39 -> strcaseeq3_36 [label="ZF"];
	strcaseeq3_39 -> strcaseeq3_1 [label="!ZF"];
}
--------
Starting Node: 37

Edges: 0 ----> 35, 1 --ZF--> 34, 1 --!ZF--> 0, 2 ----> 29, 3 --ZF--> 28, 3 --!ZF--> 2, 4 ----> 23, 5 --ZF--> 22, 5 --!ZF--> 4, 6 ----> 17, 7 --ZF--> 16, 7 --!ZF--> 6, 8 ----> 11, 9 --!ZF--> 10, 9 --ZF--> 8, 10 ----> 11, , 12 --ZF--> 11, 12 --!ZF--> 10, 13 ----> 14, 14 ----> 15, 15 --ZF--> 12, 15 --!ZF--> 9, 16 --ZF--> 17, 16 --!ZF--> 13, , 18 --!ZF--> 17, 18 --ZF--> 16, 19 ----> 20, 20 ----> 21, 21 --ZF--> 18, 21 --!ZF--> 7, 22 --ZF--> 23, 22 --!ZF--> 19, , 24 --!ZF--> 23, 24 --ZF--> 22, 25 ----> 26, 26 ----> 27, 27 --ZF--> 24, 27 --!ZF--> 5, 28 --ZF--> 29, 28 --!ZF--> 25, , 30 --!ZF--> 29, 30 --ZF--> 28, 31 ----> 32, 32 ----> 33, 33 --ZF--> 30, 33 --!ZF--> 3, 34 --ZF--> 35, 34 --!ZF--> 31, , 36 --!ZF--> 35, 36 --ZF--> 34, 37 ----> 38, 38 ----> 39, 39 --ZF--> 36, 39 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq3"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 10:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 12:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 13:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 14:
RAX := c_isupper@()
node 15:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 16:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 18:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 19:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 20:
RAX := c_isupper@()
node 21:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 22:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 23:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 24:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 25:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 26:
RAX := c_isupper@()
node 27:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 28:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sexten(37,fromList [(0,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(4,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(5,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(16,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(28,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(29,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(30,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(37,RSP == Var: RSP0 && RBP == Var: RBP0),(38,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI)),(39,RSP == (Var: RSP0 - Value: 40) && RBP == TakeBits: <31,0>(Reg: RSI))])
d(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 29:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 30:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 31:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 32:
RAX := c_isupper@()
node 33:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 34:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 35:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 36:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 37:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RCX), R14 := TakeBits: <31,0>(Reg: R8), R12 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX
node 38:
RAX := c_isupper@()
node 39:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 37

Edges: 0 ----> 35, 1 --ZF--> 34, 1 --!ZF--> 0, 2 ----> 29, 3 --ZF--> 28, 3 --!ZF--> 2, 4 ----> 23, 5 --ZF--> 22, 5 --!ZF--> 4, 6 ----> 17, 7 --ZF--> 16, 7 --!ZF--> 6, 8 ----> 11, 9 --!ZF--> 10, 9 --ZF--> 8, 10 ----> 11, , 12 --ZF--> 11, 12 --!ZF--> 10, 13 ----> 14, 14 ----> 15, 15 --ZF--> 12, 15 --!ZF--> 9, 16 --ZF--> 17, 16 --!ZF--> 13, , 18 --!ZF--> 17, 18 --ZF--> 16, 19 ----> 20, 20 ----> 21, 21 --ZF--> 18, 21 --!ZF--> 7, 22 --ZF--> 23, 22 --!ZF--> 19, , 24 --!ZF--> 23, 24 --ZF--> 22, 25 ----> 26, 26 ----> 27, 27 --ZF--> 24, 27 --!ZF--> 5, 28 --ZF--> 29, 28 --!ZF--> 25, , 30 --!ZF--> 29, 30 --ZF--> 28, 31 ----> 32, 32 ----> 33, 33 --ZF--> 30, 33 --!ZF--> 3, 34 --ZF--> 35, 34 --!ZF--> 31, , 36 --!ZF--> 35, 36 --ZF--> 34, 37 ----> 38, 38 ----> 39, 39 --ZF--> 36, 39 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq3"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 10:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 12:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 13:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 14:
RAX := c_isupper@()
node 15:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 16:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 17:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 18:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 19:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 20:
RAX := c_isupper@()
node 21:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 22:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 23:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 24:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 25:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 26:
RAX := c_isupper@()
node 27:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 28:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 29:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 30:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 31:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 32:
RAX := c_isupper@()
node 33:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 34:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 35:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 36:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 37:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RCX), R14 := TakeBits: <31,0>(Reg: R8), R12 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX
node 38:
RAX := c_isupper@()
node 39:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq3 -> strcaseeq3_2445 and strcaseeq3 -> strcaseeq3_3801

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RCX), R14 := TakeBits: <31,0>(Reg: R8), R12 := TakeBits: <31,0>(Reg: RDX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: RCX), R14 := TakeBits: <31,0>(Reg: R8), R12 := TakeBits: <31,0>(Reg: RDX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R12, [(Var: RSP0 - Value: 40),8] := Reg: RBX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RCX]
Value B:
E_app (TakeBits 31 0) [E_reg RCX]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R8]
Value B:
E_app (TakeBits 31 0) [E_reg R8]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq3 -> strcaseeq3_2445 and strcaseeq3 -> strcaseeq3_3801 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805 have been verified to do the same.

same_behavior for the nodes: .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814 have been verified to do the same.

same_behavior for the nodes: .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835 have been verified to do the same.

same_behavior for the nodes: .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860

same_behavior checking these two SStates:

SA || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

SB || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864 have been verified to do the same.

same_behavior for the nodes: .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873 have been verified to do the same.

same_behavior for the nodes: .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893 have been verified to do the same.

same_behavior for the nodes: .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915

same_behavior checking these two SStates:

SA || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919 have been verified to do the same.

same_behavior for the nodes: .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928 have been verified to do the same.

same_behavior for the nodes: .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943 have been verified to do the same.

same_behavior for the nodes: .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 32),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 32)

Succesful check!
Considering text section (48/87): "strcaseeq2"
--------
.dot code for CFG of text section strcaseeq2 for Vanilla
diGraph strcaseeq2_Vanilla{
	strcaseeq2_0  [label="[strcaseeq2_2396,strcaseeq2_2396]"]
	strcaseeq2_1  [label="[strcaseeq2_2392,strcaseeq2_2395]"]
	strcaseeq2_2  [label="[strcaseeq3_2454,strcaseeq3_2454]"]
	strcaseeq2_3  [label="[strcaseeq3_2450,strcaseeq3_2453]"]
	strcaseeq2_4  [label="[strcaseeq4_2506,strcaseeq4_2506]"]
	strcaseeq2_5  [label="[strcaseeq4_2502,strcaseeq4_2505]"]
	strcaseeq2_6  [label="[strcaseeq5_2554,strcaseeq5_2554]"]
	strcaseeq2_7  [label="[strcaseeq5_2550,strcaseeq5_2553]"]
	strcaseeq2_8  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq2_9  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq2_10  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq2_11  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq2_12  [label="[.label_212,.label_212]"]
	strcaseeq2_13  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq2_14  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq2_15  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq2_16  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq2_17  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq2_18  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq2_19  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq2_20  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq2_21  [label="[strcaseeq5_2563,strcaseeq6_2587]"]
	strcaseeq2_22  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq2_23  [label="[strcaseeq6_2589,strcaseeq6_2591]"]
	strcaseeq2_24  [label="[.label_207,strcaseeq5_2562]"]
	strcaseeq2_25  [label="[.label_206,strcaseeq5_2573]"]
	strcaseeq2_26  [label="[.label_205,strcaseeq5_2558]"]
	strcaseeq2_27  [label="[strcaseeq4_2515,strcaseeq5_2545]"]
	strcaseeq2_28  [label="[strcaseeq5_2546,strcaseeq5_2546]"]
	strcaseeq2_29  [label="[strcaseeq5_2547,strcaseeq5_2549]"]
	strcaseeq2_30  [label="[.label_202,strcaseeq4_2514]"]
	strcaseeq2_31  [label="[.label_203,strcaseeq4_2530]"]
	strcaseeq2_32  [label="[.label_204,strcaseeq4_2510]"]
	strcaseeq2_33  [label="[strcaseeq3_2463,strcaseeq4_2497]"]
	strcaseeq2_34  [label="[strcaseeq4_2498,strcaseeq4_2498]"]
	strcaseeq2_35  [label="[strcaseeq4_2499,strcaseeq4_2501]"]
	strcaseeq2_36  [label="[.label_200,strcaseeq3_2462]"]
	strcaseeq2_37  [label="[.label_199,strcaseeq3_2479]"]
	strcaseeq2_38  [label="[.label_201,strcaseeq3_2458]"]
	strcaseeq2_39  [label="[strcaseeq2_2405,strcaseeq3_2445]"]
	strcaseeq2_40  [label="[strcaseeq3_2446,strcaseeq3_2446]"]
	strcaseeq2_41  [label="[strcaseeq3_2447,strcaseeq3_2449]"]
	strcaseeq2_42  [label="[.label_198,strcaseeq2_2404]"]
	strcaseeq2_43  [label="[.label_197,strcaseeq2_2426]"]
	strcaseeq2_44  [label="[.label_196,strcaseeq2_2400]"]
	strcaseeq2_45  [label="[strcaseeq2,strcaseeq2_2387]"]
	strcaseeq2_46  [label="[strcaseeq2_2388,strcaseeq2_2388]"]
	strcaseeq2_47  [label="[strcaseeq2_2389,strcaseeq2_2391]"]

	strcaseeq2_0 -> strcaseeq2_43;
	strcaseeq2_1 -> strcaseeq2_42 [label="ZF"];
	strcaseeq2_1 -> strcaseeq2_0 [label="!ZF"];
	strcaseeq2_2 -> strcaseeq2_37;
	strcaseeq2_3 -> strcaseeq2_36 [label="ZF"];
	strcaseeq2_3 -> strcaseeq2_2 [label="!ZF"];
	strcaseeq2_4 -> strcaseeq2_31;
	strcaseeq2_5 -> strcaseeq2_30 [label="ZF"];
	strcaseeq2_5 -> strcaseeq2_4 [label="!ZF"];
	strcaseeq2_6 -> strcaseeq2_25;
	strcaseeq2_7 -> strcaseeq2_24 [label="ZF"];
	strcaseeq2_7 -> strcaseeq2_6 [label="!ZF"];
	strcaseeq2_8 -> strcaseeq2_19;
	strcaseeq2_9 -> strcaseeq2_18 [label="ZF"];
	strcaseeq2_9 -> strcaseeq2_8 [label="!ZF"];
	strcaseeq2_10 -> strcaseeq2_13;
	strcaseeq2_11 -> strcaseeq2_12 [label="!ZF"];
	strcaseeq2_11 -> strcaseeq2_10 [label="ZF"];
	strcaseeq2_12 -> strcaseeq2_13;

	strcaseeq2_14 -> strcaseeq2_13 [label="ZF"];
	strcaseeq2_14 -> strcaseeq2_12 [label="!ZF"];
	strcaseeq2_15 -> strcaseeq2_16;
	strcaseeq2_16 -> strcaseeq2_17;
	strcaseeq2_17 -> strcaseeq2_14 [label="ZF"];
	strcaseeq2_17 -> strcaseeq2_11 [label="!ZF"];
	strcaseeq2_18 -> strcaseeq2_19 [label="ZF"];
	strcaseeq2_18 -> strcaseeq2_15 [label="!ZF"];

	strcaseeq2_20 -> strcaseeq2_19 [label="!ZF"];
	strcaseeq2_20 -> strcaseeq2_18 [label="ZF"];
	strcaseeq2_21 -> strcaseeq2_22;
	strcaseeq2_22 -> strcaseeq2_23;
	strcaseeq2_23 -> strcaseeq2_20 [label="ZF"];
	strcaseeq2_23 -> strcaseeq2_9 [label="!ZF"];
	strcaseeq2_24 -> strcaseeq2_25 [label="ZF"];
	strcaseeq2_24 -> strcaseeq2_21 [label="!ZF"];

	strcaseeq2_26 -> strcaseeq2_25 [label="!ZF"];
	strcaseeq2_26 -> strcaseeq2_24 [label="ZF"];
	strcaseeq2_27 -> strcaseeq2_28;
	strcaseeq2_28 -> strcaseeq2_29;
	strcaseeq2_29 -> strcaseeq2_26 [label="ZF"];
	strcaseeq2_29 -> strcaseeq2_7 [label="!ZF"];
	strcaseeq2_30 -> strcaseeq2_31 [label="ZF"];
	strcaseeq2_30 -> strcaseeq2_27 [label="!ZF"];

	strcaseeq2_32 -> strcaseeq2_31 [label="!ZF"];
	strcaseeq2_32 -> strcaseeq2_30 [label="ZF"];
	strcaseeq2_33 -> strcaseeq2_34;
	strcaseeq2_34 -> strcaseeq2_35;
	strcaseeq2_35 -> strcaseeq2_32 [label="ZF"];
	strcaseeq2_35 -> strcaseeq2_5 [label="!ZF"];
	strcaseeq2_36 -> strcaseeq2_37 [label="ZF"];
	strcaseeq2_36 -> strcaseeq2_33 [label="!ZF"];

	strcaseeq2_38 -> strcaseeq2_37 [label="!ZF"];
	strcaseeq2_38 -> strcaseeq2_36 [label="ZF"];
	strcaseeq2_39 -> strcaseeq2_40;
	strcaseeq2_40 -> strcaseeq2_41;
	strcaseeq2_41 -> strcaseeq2_38 [label="ZF"];
	strcaseeq2_41 -> strcaseeq2_3 [label="!ZF"];
	strcaseeq2_42 -> strcaseeq2_43 [label="ZF"];
	strcase(45,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(28,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(29,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(30,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(37,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(38,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(39,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(40,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(41,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(42,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(43,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(44,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(45,RSP == Var: RSP0 && RBP == Var: RBP0),(46,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(47,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
eq2_42 -> strcaseeq2_39 [label="!ZF"];

	strcaseeq2_44 -> strcaseeq2_43 [label="!ZF"];
	strcaseeq2_44 -> strcaseeq2_42 [label="ZF"];
	strcaseeq2_45 -> strcaseeq2_46;
	strcaseeq2_46 -> strcaseeq2_47;
	strcaseeq2_47 -> strcaseeq2_44 [label="ZF"];
	strcaseeq2_47 -> strcaseeq2_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq2 for Randomized
diGraph strcaseeq2_Randomized{
	strcaseeq2_0  [label="[strcaseeq2_3745,strcaseeq2_3745]"]
	strcaseeq2_1  [label="[strcaseeq2_3741,strcaseeq2_3744]"]
	strcaseeq2_2  [label="[strcaseeq3_3810,strcaseeq3_3810]"]
	strcaseeq2_3  [label="[strcaseeq3_3806,strcaseeq3_3809]"]
	strcaseeq2_4  [label="[strcaseeq4_3869,strcaseeq4_3869]"]
	strcaseeq2_5  [label="[strcaseeq4_3865,strcaseeq4_3868]"]
	strcaseeq2_6  [label="[strcaseeq5_3924,strcaseeq5_3924]"]
	strcaseeq2_7  [label="[strcaseeq5_3920,strcaseeq5_3923]"]
	strcaseeq2_8  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq2_9  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq2_10  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq2_11  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq2_12  [label="[.label_263,.label_263]"]
	strcaseeq2_13  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq2_14  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq2_15  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq2_16  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq2_17  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq2_18  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq2_19  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq2_20  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq2_21  [label="[strcaseeq5_3933,strcaseeq6_3964]"]
	strcaseeq2_22  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq2_23  [label="[strcaseeq6_3966,strcaseeq6_3968]"]
	strcaseeq2_24  [label="[.label_258,strcaseeq5_3932]"]
	strcaseeq2_25  [label="[.label_257,strcaseeq5_3943]"]
	strcaseeq2_26  [label="[.label_256,strcaseeq5_3928]"]
	strcaseeq2_27  [label="[strcaseeq4_3878,strcaseeq5_3915]"]
	strcaseeq2_28  [label="[strcaseeq5_3916,strcaseeq5_3916]"]
	strcaseeq2_29  [label="[strcaseeq5_3917,strcaseeq5_3919]"]
	strcaseeq2_30  [label="[.label_253,strcaseeq4_3877]"]
	strcaseeq2_31  [label="[.label_254,strcaseeq4_3893]"]
	strcaseeq2_32  [label="[.label_255,strcaseeq4_3873]"]
	strcaseeq2_33  [label="[strcaseeq3_3819,strcaseeq4_3860]"]
	strcaseeq2_34  [label="[strcaseeq4_3861,strcaseeq4_3861]"]
	strcaseeq2_35  [label="[strcaseeq4_3862,strcaseeq4_3864]"]
	strcaseeq2_36  [label="[.label_251,strcaseeq3_3818]"]
	strcaseeq2_37  [label="[.label_250,strcaseeq3_3835]"]
	strcaseeq2_38  [label="[.label_252,strcaseeq3_3814]"]
	strcaseeq2_39  [label="[strcaseeq2_3754,strcaseeq3_3801]"]
	strcaseeq2_40  [label="[strcaseeq3_3802,strcaseeq3_3802]"]
	strcaseeq2_41  [label="[strcaseeq3_3803,strcaseeq3_3805]"]
	strcaseeq2_42  [label="[.label_249,strcaseeq2_3753]"]
	strcaseeq2_43  [label="[.label_248,strcaseeq2_3775]"]
	strcaseeq2_44  [label="[.label_247,strcaseeq2_3749]"]
	strcaseeq2_45  [label="[strcaseeq2,strcaseeq2_3736]"]
	strcaseeq2_46  [label="[strcaseeq2_3737,strcaseeq2_3737]"]
	strcaseeq2_47  [label="[strcaseeq2_3738,strcaseeq2_3740]"]

	strcaseeq2_0 -> strcaseeq2_43;
	strcaseeq2_1 -> strcaseeq2_42 [label="ZF"];
	strcaseeq2_1 -> strcaseeq2_0 [label="!ZF"];
	strcaseeq2_2 -> strcaseeq2_37;
	strcaseeq2_3 -> strcaseeq2_36 [label="ZF"];
	strcaseeq2_3 -> strcaseeq2_2 [label="!ZF"];
	strcaseeq2_4 -> strcaseeq2_31;
	strcaseeq2_5 -> strcaseeq2_30 [label="ZF"];
	strcaseeq2_5 -> strcaseeq2_4 [label="!ZF"];
	strcaseeq2_6 -> strcaseeq2_25;
	strcaseeq2_7 -> strcaseeq2_24 [label="ZF"];
	strcaseeq2_7 -> strcaseeq2_6 [label="!ZF"];
	strcaseeq2_8 -> strcaseeq2_19;
	strcaseeq2_9 -> strcaseeq2_18 [label="ZF"];
	strcaseeq2_9 -> strcaseeq2_8 [label="!ZF"];
	strcaseeq2_10 -> strcaseeq2_13;
	strcaseeq2_11 -> strcaseeq2_12 [label="!ZF"];
	strcaseeq2_11 -> strcaseeq2_10 [label="ZF"];
	strcaseeq2_12 -> strcaseeq2_13;

	strcaseeq2_14 -> strcaseeq2_13 [label="ZF"];
	strcaseeq2_14 -> strcaseeq2_12 [label="!ZF"];
	strcaseeq2_15 -> strcaseeq2_16;
	strcaseeq2_16 -> strcaseeq2_17;
	strcaseeq2_17 -> strcaseeq2_14 [label="ZF"];
	strcaseeq2_17 -> strcaseeq2_11 [label="!ZF"];
	strcaseeq2_18 -> strcaseeq2_19 [label="ZF"];
	strcaseeq2_18 -> strcaseeq2_15 [label="!ZF"];

	strcaseeq2_20 -> strcaseeq2_19 [label="!ZF"];
	strcaseeq2_20 -> strcaseeq2_18 [label="ZF"];
	strcaseeq2_21 -> strcaseeq2_22;
	strcaseeq2_22 -> strcaseeq2_23;
	strcaseeq2_23 -> strcaseeq2_20 [label="ZF"];
	strcaseeq2_23 -> strcaseeq2_9 [label="!ZF"];
	strcaseeq2_24 -> strcaseeq2_25 [label="ZF"];
	strcaseeq2_24 -> strcaseeq2_21 [label="!ZF"];

	strcaseeq2_26 -> strcaseeq2_25 [label="!ZF"];
	strcaseeq2_26 -> strcaseeq2_24 [label="ZF"];
	strcaseeq2_27 -> strcaseeq2_28;
	strcaseeq2_28 -> strcaseeq2_29;
	strcaseeq2_29 -> strcaseeq2_26 [label="ZF"];
	strcaseeq2_29 -> strcaseeq2_7 [label="!ZF"];
	strcaseeq2_30 -> strcaseeq2_31 [label="ZF"];
	strcaseeq2_30 -> strcaseeq2_27 [label="!ZF"];

	strcaseeq2_32 -> strcaseeq2_31 [label="!ZF"];
	strcaseeq2_32 -> strcaseeq2_30 [label="ZF"];
	strcaseeq2_33 -> strcaseeq2_34;
	strcaseeq2_34 -> strcaseeq2_35;
	strcaseeq2_35 -> strcaseeq2_32 [label="ZF"];
	strcaseeq2_35 -> strcaseeq2_5 [label="!ZF"];
	strcaseeq2_36 -> strcaseeq2_37 [label="ZF"];
	strcaseeq2_36 -> strcaseeq2_33 [label="!ZF"];

	strcaseeq2_38 -> strcaseeq2_37 [label="!ZF"];
	strcaseeq2_38 -> strcaseeq2_36 [label="ZF"];
	strcaseeq2_39 -> strcaseeq2_40;
	strcaseeq2_40 -> strcaseeq2_41;
	strcaseeq2_41 -> strcaseeq2_38 [label="ZF"];
	strcaseeq2_41 -> strcaseeq2_3 [label="!ZF"];
	strcaseeq2_42 -> strcaseeq2_43 [label="ZF"];
	strcaseeq2_42 -> strcaseeq2_39 [label="!ZF"];

	strcaseeq2_44 -> strcaseeq2_43 [label="!ZF"];
	strcaseeq2_44 -> strcaseeq2_42 [label="ZF"];
	strcaseeq2_45 -> strcaseeq2_46;
	strcaseeq2_46 -> strcaseeq2_47;
	strcaseeq2_47 -> strcaseeq2_44 [label="ZF"];
	strcaseeq2_47 -> strcaseeq2_1 [label="!ZF"];
}
--------
Starting Node: 45

Edges: 0 ----> 43, 1 --ZF--> 42, 1 --!ZF--> 0, 2 ----> 37, 3 --ZF--> 36, 3 --!ZF--> 2, 4 ----> 31, 5 --ZF--> 30, 5 --!ZF--> 4, 6 ----> 25, 7 --ZF--> 24, 7 --!ZF--> 6, 8 ----> 19, 9 --ZF--> 18, 9 --!ZF--> 8, 10 ----> 13, 11 --!ZF--> 12, 11 --ZF--> 10, 12 ----> 13, , 14 --ZF--> 13, 14 --!ZF--> 12, 15 ----> 16, 16 ----> 17, 17 --ZF--> 14, 17 --!ZF--> 11, 18 --ZF--> 19, 18 --!ZF--> 15, , 20 --!ZF--> 19, 20 --ZF--> 18, 21 ----> 22, 22 ----> 23, 23 --ZF--> 20, 23 --!ZF--> 9, 24 --ZF--> 25, 24 --!ZF--> 21, , 26 --!ZF--> 25, 26 --ZF--> 24, 27 ----> 28, 28 ----> 29, 29 --ZF--> 26, 29 --!ZF--> 7, 30 --ZF--> 31, 30 --!ZF--> 27, , 32 --!ZF--> 31, 32 --ZF--> 30, 33 ----> 34, 34 ----> 35, 35 --ZF--> 32, 35 --!ZF--> 5, 36 --ZF--> 37, 36 --!ZF--> 33, , 38 --!ZF--> 37, 38 --ZF--> 36, 39 ----> 40, 40 ----> 41, 41 --ZF--> 38, 41 --!ZF--> 3, 42 --ZF--> 43, 42 --!ZF--> 39, , 44 --!ZF--> 43, 44 --ZF--> 42, 45 ----> 46, 46 ----> 47, 47 --ZF--> 44, 47 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq2"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 8:
skip'
node 9:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 10:
skip'
node 11:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 12:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 14:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 15:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 16:
RAX := c_isupper@()
node 17:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 18:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 19:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 20:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 21:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 22:
RAX := c_isupper@()
node 23:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 24:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 25:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 26:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 27:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 28:
RAX := c_isupper@()
node 29:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 30:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 31:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R(45,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(3,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(6,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(7,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(18,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(19,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(28,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(29,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(30,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(31,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(37,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(38,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(39,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(40,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(41,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(42,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(43,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(44,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(45,RSP == Var: RSP0 && RBP == Var: RBP0),(46,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(47,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 32:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 33:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 34:
RAX := c_isupper@()
node 35:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 36:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 37:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 38:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 39:
RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 40:
RAX := c_isupper@()
node 41:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 42:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 43:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 44:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 45:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
node 46:
RAX := c_isupper@()
node 47:
RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 45

Edges: 0 ----> 43, 1 --ZF--> 42, 1 --!ZF--> 0, 2 ----> 37, 3 --ZF--> 36, 3 --!ZF--> 2, 4 ----> 31, 5 --ZF--> 30, 5 --!ZF--> 4, 6 ----> 25, 7 --ZF--> 24, 7 --!ZF--> 6, 8 ----> 19, 9 --ZF--> 18, 9 --!ZF--> 8, 10 ----> 13, 11 --!ZF--> 12, 11 --ZF--> 10, 12 ----> 13, , 14 --ZF--> 13, 14 --!ZF--> 12, 15 ----> 16, 16 ----> 17, 17 --ZF--> 14, 17 --!ZF--> 11, 18 --ZF--> 19, 18 --!ZF--> 15, , 20 --!ZF--> 19, 20 --ZF--> 18, 21 ----> 22, 22 ----> 23, 23 --ZF--> 20, 23 --!ZF--> 9, 24 --ZF--> 25, 24 --!ZF--> 21, , 26 --!ZF--> 25, 26 --ZF--> 24, 27 ----> 28, 28 ----> 29, 29 --ZF--> 26, 29 --!ZF--> 7, 30 --ZF--> 31, 30 --!ZF--> 27, , 32 --!ZF--> 31, 32 --ZF--> 30, 33 ----> 34, 34 ----> 35, 35 --ZF--> 32, 35 --!ZF--> 5, 36 --ZF--> 37, 36 --!ZF--> 33, , 38 --!ZF--> 37, 38 --ZF--> 36, 39 ----> 40, 40 ----> 41, 41 --ZF--> 38, 41 --!ZF--> 3, 42 --ZF--> 43, 42 --!ZF--> 39, , 44 --!ZF--> 43, 44 --ZF--> 42, 45 ----> 46, 46 ----> 47, 47 --ZF--> 44, 47 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq2"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 8:
skip'
node 9:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 10:
skip'
node 11:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 12:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 14:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 15:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 16:
RAX := c_isupper@()
node 17:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 18:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 19:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 20:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 21:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 22:
RAX := c_isupper@()
node 23:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 24:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 25:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 26:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 27:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 28:
RAX := c_isupper@()
node 29:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 30:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 31:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 32:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 33:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 34:
RAX := c_isupper@()
node 35:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 36:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 37:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 38:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 39:
RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 40:
RAX := c_isupper@()
node 41:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 42:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 43:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 44:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 45:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
node 46:
RAX := c_isupper@()
node 47:
RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq2 -> strcaseeq2_2387 and strcaseeq2 -> strcaseeq2_3736

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := TakeBits: <31,0>(Reg: R9), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R8]
Value B:
E_app (TakeBits 31 0) [E_reg R8]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R9]
Value B:
E_app (TakeBits 31 0) [E_reg R9]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RCX]
Value B:
E_app (TakeBits 31 0) [E_reg RCX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq2 -> strcaseeq2_2387 and strcaseeq2 -> strcaseeq2_3736 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2388 -> strcaseeq2_2388 and strcaseeq2_3737 -> strcaseeq2_3737

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2388 -> strcaseeq2_2388 and strcaseeq2_3737 -> strcaseeq2_3737 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2389 -> strcaseeq2_2391 and strcaseeq2_3738 -> strcaseeq2_3740

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 2 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 2 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2389 -> strcaseeq2_2391 and strcaseeq2_3738 -> strcaseeq2_3740 have been verified to do the same.

same_behavior for the nodes: .label_196 -> strcaseeq2_2400 and .label_247 -> strcaseeq2_3749

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_196 -> strcaseeq2_2400 and .label_247 -> strcaseeq2_3749 have been verified to do the same.

same_behavior for the nodes: .label_197 -> strcaseeq2_2426 and .label_248 -> strcaseeq2_3775

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_197 -> strcaseeq2_2426 and .label_248 -> strcaseeq2_3775 have been verified to do the same.

same_behavior for the nodes: .label_198 -> strcaseeq2_2404 and .label_249 -> strcaseeq2_3753

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_198 -> strcaseeq2_2404 and .label_249 -> strcaseeq2_3753 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2405 -> strcaseeq3_2445 and strcaseeq2_3754 -> strcaseeq3_3801

same_behavior checking these two SStates:

SA || RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2405 -> strcaseeq3_2445 and strcaseeq2_3754 -> strcaseeq3_3801 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805 have been verified to do the same.

same_behavior for the nodes: .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814 have been verified to do the same.

same_behavior for the nodes: .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835 have been verified to do the same.

same_behavior for the nodes: .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860

same_behavior checking these two SStates:

SA || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

SB || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864 have been verified to do the same.

same_behavior for the nodes: .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873 have been verified to do the same.

same_behavior for the nodes: .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893 have been verified to do the same.

same_behavior for the nodes: .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915

same_behavior checking these two SStates:

SA || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919 have been verified to do the same.

same_behavior for the nodes: .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928 have been verified to do the same.

same_behavior for the nodes: .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943 have been verified to do the same.

same_behavior for the nodes: .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2392 -> strcaseeq2_2395 and strcaseeq2_3741 -> strcaseeq2_3744

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2392 -> strcaseeq2_2395 and strcaseeq2_3741 -> strcaseeq2_3744 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2396 -> strcaseeq2_2396 and strcaseeq2_3745 -> strcaseeq2_3745

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2396 -> strcaseeq2_2396 and strcaseeq2_3745 -> strcaseeq2_3745 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 32),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 48),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)

Succesful check!
Considering text section (49/87): "strcaseeq1"
--------
.dot code for CFG of text section strcaseeq1 for Vanilla
diGraph strcaseeq1_Vanilla{
	strcaseeq1_0  [label="[strcaseeq1_2333,strcaseeq1_2333]"]
	strcaseeq1_1  [label="[strcaseeq1_2329,strcaseeq1_2332]"]
	strcaseeq1_2  [label="[strcaseeq2_2396,strcaseeq2_2396]"]
	strcaseeq1_3  [label="[strcaseeq2_2392,strcaseeq2_2395]"]
	strcaseeq1_4  [label="[strcaseeq3_2454,strcaseeq3_2454]"]
	strcaseeq1_5  [label="[strcaseeq3_2450,strcaseeq3_2453]"]
	strcaseeq1_6  [label="[strcaseeq4_2506,strcaseeq4_2506]"]
	strcaseeq1_7  [label="[strcaseeq4_2502,strcaseeq4_2505]"]
	strcaseeq1_8  [label="[strcaseeq5_2554,strcaseeq5_2554]"]
	strcaseeq1_9  [label="[strcaseeq5_2550,strcaseeq5_2553]"]
	strcaseeq1_10  [label="[strcaseeq6_2596,strcaseeq6_2596]"]
	strcaseeq1_11  [label="[strcaseeq6_2592,strcaseeq6_2595]"]
	strcaseeq1_12  [label="[strcaseeq7_2633,strcaseeq7_2633]"]
	strcaseeq1_13  [label="[strcaseeq7_2630,strcaseeq7_2632]"]
	strcaseeq1_14  [label="[.label_212,.label_212]"]
	strcaseeq1_15  [label="[.label_211,strcaseeq7_2642]"]
	strcaseeq1_16  [label="[.label_213,strcaseeq7_2637]"]
	strcaseeq1_17  [label="[strcaseeq6_2605,strcaseeq7_2625]"]
	strcaseeq1_18  [label="[strcaseeq7_2626,strcaseeq7_2626]"]
	strcaseeq1_19  [label="[strcaseeq7_2627,strcaseeq7_2629]"]
	strcaseeq1_20  [label="[.label_209,strcaseeq6_2604]"]
	strcaseeq1_21  [label="[.label_208,strcaseeq6_2614]"]
	strcaseeq1_22  [label="[.label_210,strcaseeq6_2600]"]
	strcaseeq1_23  [label="[strcaseeq5_2563,strcaseeq6_2587]"]
	strcaseeq1_24  [label="[strcaseeq6_2588,strcaseeq6_2588]"]
	strcaseeq1_25  [label="[strcaseeq6_2589,strcaseeq6_2591]"]
	strcaseeq1_26  [label="[.label_207,strcaseeq5_2562]"]
	strcaseeq1_27  [label="[.label_206,strcaseeq5_2573]"]
	strcaseeq1_28  [label="[.label_205,strcaseeq5_2558]"]
	strcaseeq1_29  [label="[strcaseeq4_2515,strcaseeq5_2545]"]
	strcaseeq1_30  [label="[strcaseeq5_2546,strcaseeq5_2546]"]
	strcaseeq1_31  [label="[strcaseeq5_2547,strcaseeq5_2549]"]
	strcaseeq1_32  [label="[.label_202,strcaseeq4_2514]"]
	strcaseeq1_33  [label="[.label_203,strcaseeq4_2530]"]
	strcaseeq1_34  [label="[.label_204,strcaseeq4_2510]"]
	strcaseeq1_35  [label="[strcaseeq3_2463,strcaseeq4_2497]"]
	strcaseeq1_36  [label="[strcaseeq4_2498,strcaseeq4_2498]"]
	strcaseeq1_37  [label="[strcaseeq4_2499,strcaseeq4_2501]"]
	strcaseeq1_38  [label="[.label_200,strcaseeq3_2462]"]
	strcaseeq1_39  [label="[.label_199,strcaseeq3_2479]"]
	strcaseeq1_40  [label="[.label_201,strcaseeq3_2458]"]
	strcaseeq1_41  [label="[strcaseeq2_2405,strcaseeq3_2445]"]
	strcaseeq1_42  [label="[strcaseeq3_2446,strcaseeq3_2446]"]
	strcaseeq1_43  [label="[strcaseeq3_2447,strcaseeq3_2449]"]
	strcaseeq1_44  [label="[.label_198,strcaseeq2_2404]"]
	strcaseeq1_45  [label="[.label_197,strcaseeq2_2426]"]
	strcaseeq1_46  [label="[.label_196,strcaseeq2_2400]"]
	strcaseeq1_47  [label="[strcaseeq1_2342,strcaseeq2_2387]"]
	strcaseeq1_48  [label="[strcaseeq2_2388,strcaseeq2_2388]"]
	strcaseeq1_49  [label="[strcaseeq2_2389,strcaseeq2_2391]"]
	strcaseeq1_50  [label="[.label_193,strcaseeq1_2341]"]
	strcaseeq1_51  [label="[.label_194,strcaseeq1_2365]"]
	strcaseeq1_52  [label="[.label_195,strcaseeq1_2337]"]
	strcaseeq1_53  [label="[strcaseeq1,strcaseeq1_2324]"]
	strcaseeq1_54  [label="[strcaseeq1_2325,strcaseeq1_2325]"]
	strcaseeq1_55  [label="[strcaseeq1_2326,strcaseeq1_2328]"]

	strcaseeq1_0 -> strcaseeq1_51;
	strcaseeq1_1 -> strcaseeq1_50 [label="ZF"];
	strcaseeq1_1 -> strcaseeq1_0 [label="!ZF"];
	strcaseeq1_2 -> strcaseeq1_45;
	strcaseeq1_3 -> strcaseeq1_44 [label="ZF"];
	strcaseeq1_3 -> strcaseeq1_2 [label="!ZF"];
	strcaseeq1_4 -> strcaseeq1_39;
	strcaseeq1_5 -> strcaseeq1_38 [label="ZF"];
	strcaseeq1_5 -> strcaseeq1_4 [label="!ZF"];
	strcaseeq1_6 -> strcaseeq1_33;
	strcaseeq1_7 -> strcaseeq1_32 [label="ZF"];
	strcaseeq1_7 -> strcaseeq1_6 [label="!ZF"];
	strcaseeq1_8 -> strcaseeq1_27;
	strcaseeq1_9 -> strcaseeq1_26 [label="ZF"];
	strcaseeq1_9 -> strcaseeq1_8 [label="!ZF"];
	strcaseeq1_10 -> strcaseeq1_21;
	strcaseeq1_11 -> strcaseeq1_20 [label="ZF"];
	strcaseeq1_11 -> strcaseeq1_10 [label="!ZF"];
	strcaseeq1_12 -> strcaseeq1_15;
	strcaseeq1_13 -> strcaseeq1_14 [label="!ZF"];
	strcaseeq1_13 -> strcaseeq1_12 [label="ZF"];
	strcaseeq1_14 -> strcaseeq1_15;

	strcaseeq1_16 -> strcaseeq1_15 [label="ZF"];
	strcaseeq1_16 -> strcaseeq1_14 [label="!ZF"];
	strcaseeq1_17 -> strcaseeq1_18;
	strcaseeq1_18 -> strcaseeq1_19;
	strcaseeq1_19 -> strcaseeq1_16 [label="ZF"];
	strcaseeq1_19 -> strcaseeq1_13 [label="!ZF"];
	strcaseeq1_20 -> strcaseeq1_21 [label="ZF"];
	strcaseeq1_20 -> strcaseeq1_17 [label="!ZF"];

	strcaseeq1_22 -> strcaseeq1_21 [label="!ZF"];
	strcaseeq1_22 -> strcaseeq1_20 [label="ZF"];
	strcaseeq1_23 -> strcaseeq1_24;
	strcaseeq1_24 -> strcaseeq1_25;
	strcaseeq1_25 -> strcaseeq1_22 [label="ZF"];
	strcaseeq1_25 -> strcaseeq1_11 [label="!ZF"];
	strcaseeq1_26 -> strcaseeq1_27 [label="ZF"];
	strcaseeq1_26 -> strcaseeq1_23 [label="!ZF"];

	strcaseeq1_28 -> strcaseeq1_27 [label="!ZF"];
	strcaseeq1_28 -> strcaseeq1_26 [label="ZF"];
	strcaseeq1_29 -> strcaseeq1_30;
	strcaseeq1_30 -> strcaseeq1_31;
	strcaseeq1_31 -> strcaseeq1_28 [label="ZF"];
	strcaseeq1_31 -> strcaseeq1_9 [label="!ZF"];
	strcaseeq1_32 -> strcaseeq1_33 [label="ZF"];
	strcaseeq1_32 -> strcaseeq1_29 [label="!ZF"];

	strcaseeq1_34 -> strcaseeq1_33 [label="!ZF"];
	strcaseeq1_34 -> strcaseeq1_32 [label="ZF"];
	strcaseeq1_35 -> strcaseeq1_36;
	strcaseeq1_36 -> strcaseeq1_37;
	strcaseeq1_37 -> strcaseeq1_34 [label="ZF"];
	strcaseeq1_37 -> strcaseeq1_7 [label="!ZF"];
	strcaseeq1_38 -> strcaseeq1_39 [label="ZF"];
	strcaseeq1_38 -> strcaseeq1_35 [label="!ZF"];

	strcaseeq1_40 -> strcaseeq1_39 [label="!ZF"];
	strcaseeq1_40 -> strcaseeq1_38 [label="ZF"];
	strcaseeq1_41 -> strcaseeq1_42;
	strcaseeq1_42 -> strcaseeq1_43;
	strcaseeq1_43 -> strcaseeq1_40 [label="ZF"];
	strcaseeq1_43 -> strcaseeq1_5 [label="!ZF"];
	strcaseeq1_44 -> strcaseeq1_45 [label="ZF"];
	strcaseeq1_44 -> strcaseeq1_41 [label="!ZF"];

	strcaseeq1_46 -> strcaseeq1_45 [label="!ZF"];
	strcaseeq1_46 -> strcaseeq1_44 [label="ZF"];
	strcaseeq1_47 -> strcaseeq1_48;
	strcaseeq1_48 -> strcaseeq1_49;
	strcaseeq1_49 -> strcaseeq1_46 [label="ZF"];
	strcaseeq1_49 -> strcaseeq1_3 [label="!ZF"];
	strcaseeq1_50 -> strcaseeq1_51 [label="ZF"];
	strcaseeq1_50 -> strcaseeq1_47 [label="!ZF"];

	strcaseeq1_52 -> strcaseeq1_51 [label="!ZF"];
	(53,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(28,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(29,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(30,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(31,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(37,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(38,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(39,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(40,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(41,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(42,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(43,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(44,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(45,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(46,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(47,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(48,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(49,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(50,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(51,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(52,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(53,RSP == Var: RSP0 && RBP == Var: RBP0),(54,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(55,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
strcaseeq1_52 -> strcaseeq1_50 [label="ZF"];
	strcaseeq1_53 -> strcaseeq1_54;
	strcaseeq1_54 -> strcaseeq1_55;
	strcaseeq1_55 -> strcaseeq1_52 [label="ZF"];
	strcaseeq1_55 -> strcaseeq1_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section strcaseeq1 for Randomized
diGraph strcaseeq1_Randomized{
	strcaseeq1_0  [label="[strcaseeq1_3675,strcaseeq1_3675]"]
	strcaseeq1_1  [label="[strcaseeq1_3671,strcaseeq1_3674]"]
	strcaseeq1_2  [label="[strcaseeq2_3745,strcaseeq2_3745]"]
	strcaseeq1_3  [label="[strcaseeq2_3741,strcaseeq2_3744]"]
	strcaseeq1_4  [label="[strcaseeq3_3810,strcaseeq3_3810]"]
	strcaseeq1_5  [label="[strcaseeq3_3806,strcaseeq3_3809]"]
	strcaseeq1_6  [label="[strcaseeq4_3869,strcaseeq4_3869]"]
	strcaseeq1_7  [label="[strcaseeq4_3865,strcaseeq4_3868]"]
	strcaseeq1_8  [label="[strcaseeq5_3924,strcaseeq5_3924]"]
	strcaseeq1_9  [label="[strcaseeq5_3920,strcaseeq5_3923]"]
	strcaseeq1_10  [label="[strcaseeq6_3973,strcaseeq6_3973]"]
	strcaseeq1_11  [label="[strcaseeq6_3969,strcaseeq6_3972]"]
	strcaseeq1_12  [label="[strcaseeq7_4017,strcaseeq7_4017]"]
	strcaseeq1_13  [label="[strcaseeq7_4014,strcaseeq7_4016]"]
	strcaseeq1_14  [label="[.label_263,.label_263]"]
	strcaseeq1_15  [label="[.label_262,strcaseeq7_4026]"]
	strcaseeq1_16  [label="[.label_264,strcaseeq7_4021]"]
	strcaseeq1_17  [label="[strcaseeq6_3982,strcaseeq7_4009]"]
	strcaseeq1_18  [label="[strcaseeq7_4010,strcaseeq7_4010]"]
	strcaseeq1_19  [label="[strcaseeq7_4011,strcaseeq7_4013]"]
	strcaseeq1_20  [label="[.label_260,strcaseeq6_3981]"]
	strcaseeq1_21  [label="[.label_259,strcaseeq6_3991]"]
	strcaseeq1_22  [label="[.label_261,strcaseeq6_3977]"]
	strcaseeq1_23  [label="[strcaseeq5_3933,strcaseeq6_3964]"]
	strcaseeq1_24  [label="[strcaseeq6_3965,strcaseeq6_3965]"]
	strcaseeq1_25  [label="[strcaseeq6_3966,strcaseeq6_3968]"]
	strcaseeq1_26  [label="[.label_258,strcaseeq5_3932]"]
	strcaseeq1_27  [label="[.label_257,strcaseeq5_3943]"]
	strcaseeq1_28  [label="[.label_256,strcaseeq5_3928]"]
	strcaseeq1_29  [label="[strcaseeq4_3878,strcaseeq5_3915]"]
	strcaseeq1_30  [label="[strcaseeq5_3916,strcaseeq5_3916]"]
	strcaseeq1_31  [label="[strcaseeq5_3917,strcaseeq5_3919]"]
	strcaseeq1_32  [label="[.label_253,strcaseeq4_3877]"]
	strcaseeq1_33  [label="[.label_254,strcaseeq4_3893]"]
	strcaseeq1_34  [label="[.label_255,strcaseeq4_3873]"]
	strcaseeq1_35  [label="[strcaseeq3_3819,strcaseeq4_3860]"]
	strcaseeq1_36  [label="[strcaseeq4_3861,strcaseeq4_3861]"]
	strcaseeq1_37  [label="[strcaseeq4_3862,strcaseeq4_3864]"]
	strcaseeq1_38  [label="[.label_251,strcaseeq3_3818]"]
	strcaseeq1_39  [label="[.label_250,strcaseeq3_3835]"]
	strcaseeq1_40  [label="[.label_252,strcaseeq3_3814]"]
	strcaseeq1_41  [label="[strcaseeq2_3754,strcaseeq3_3801]"]
	strcaseeq1_42  [label="[strcaseeq3_3802,strcaseeq3_3802]"]
	strcaseeq1_43  [label="[strcaseeq3_3803,strcaseeq3_3805]"]
	strcaseeq1_44  [label="[.label_249,strcaseeq2_3753]"]
	strcaseeq1_45  [label="[.label_248,strcaseeq2_3775]"]
	strcaseeq1_46  [label="[.label_247,strcaseeq2_3749]"]
	strcaseeq1_47  [label="[strcaseeq1_3684,strcaseeq2_3736]"]
	strcaseeq1_48  [label="[strcaseeq2_3737,strcaseeq2_3737]"]
	strcaseeq1_49  [label="[strcaseeq2_3738,strcaseeq2_3740]"]
	strcaseeq1_50  [label="[.label_244,strcaseeq1_3683]"]
	strcaseeq1_51  [label="[.label_245,strcaseeq1_3707]"]
	strcaseeq1_52  [label="[.label_246,strcaseeq1_3679]"]
	strcaseeq1_53  [label="[strcaseeq1,strcaseeq1_3666]"]
	strcaseeq1_54  [label="[strcaseeq1_3667,strcaseeq1_3667]"]
	strcaseeq1_55  [label="[strcaseeq1_3668,strcaseeq1_3670]"]

	strcaseeq1_0 -> strcaseeq1_51;
	strcaseeq1_1 -> strcaseeq1_50 [label="ZF"];
	strcaseeq1_1 -> strcaseeq1_0 [label="!ZF"];
	strcaseeq1_2 -> strcaseeq1_45;
	strcaseeq1_3 -> strcaseeq1_44 [label="ZF"];
	strcaseeq1_3 -> strcaseeq1_2 [label="!ZF"];
	strcaseeq1_4 -> strcaseeq1_39;
	strcaseeq1_5 -> strcaseeq1_38 [label="ZF"];
	strcaseeq1_5 -> strcaseeq1_4 [label="!ZF"];
	strcaseeq1_6 -> strcaseeq1_33;
	strcaseeq1_7 -> strcaseeq1_32 [label="ZF"];
	strcaseeq1_7 -> strcaseeq1_6 [label="!ZF"];
	strcaseeq1_8 -> strcaseeq1_27;
	strcaseeq1_9 -> strcaseeq1_26 [label="ZF"];
	strcaseeq1_9 -> strcaseeq1_8 [label="!ZF"];
	strcaseeq1_10 -> strcaseeq1_21;
	strcaseeq1_11 -> strcaseeq1_20 [label="ZF"];
	strcaseeq1_11 -> strcaseeq1_10 [label="!ZF"];
	strcaseeq1_12 -> strcaseeq1_15;
	strcaseeq1_13 -> strcaseeq1_14 [label="!ZF"];
	strcaseeq1_13 -> strcaseeq1_12 [label="ZF"];
	strcaseeq1_14 -> strcaseeq1_15;

	strcaseeq1_16 -> strcaseeq1_15 [label="ZF"];
	strcaseeq1_16 -> strcaseeq1_14 [label="!ZF"];
	strcaseeq1_17 -> strcaseeq1_18;
	strcaseeq1_18 -> strcaseeq1_19;
	strcaseeq1_19 -> strcaseeq1_16 [label="ZF"];
	strcaseeq1_19 -> strcaseeq1_13 [label="!ZF"];
	strcaseeq1_20 -> strcaseeq1_21 [label="ZF"];
	strcaseeq1_20 -> strcaseeq1_17 [label="!ZF"];

	strcaseeq1_22 -> strcaseeq1_21 [label="!ZF"];
	strcaseeq1_22 -> strcaseeq1_20 [label="ZF"];
	strcaseeq1_23 -> strcaseeq1_24;
	strcaseeq1_24 -> strcaseeq1_25;
	strcaseeq1_25 -> strcaseeq1_22 [label="ZF"];
	strcaseeq1_25 -> strcaseeq1_11 [label="!ZF"];
	strcaseeq1_26 -> strcaseeq1_27 [label="ZF"];
	strcaseeq1_26 -> strcaseeq1_23 [label="!ZF"];

	strcaseeq1_28 -> strcaseeq1_27 [label="!ZF"];
	strcaseeq1_28 -> strcaseeq1_26 [label="ZF"];
	strcaseeq1_29 -> strcaseeq1_30;
	strcaseeq1_30 -> strcaseeq1_31;
	strcaseeq1_31 -> strcaseeq1_28 [label="ZF"];
	strcaseeq1_31 -> strcaseeq1_9 [label="!ZF"];
	strcaseeq1_32 -> strcaseeq1_33 [label="ZF"];
	strcaseeq1_32 -> strcaseeq1_29 [label="!ZF"];

	strcaseeq1_34 -> strcaseeq1_33 [label="!ZF"];
	strcaseeq1_34 -> strcaseeq1_32 [label="ZF"];
	strcaseeq1_35 -> strcaseeq1_36;
	strcaseeq1_36 -> strcaseeq1_37;
	strcaseeq1_37 -> strcaseeq1_34 [label="ZF"];
	strcaseeq1_37 -> strcaseeq1_7 [label="!ZF"];
	strcaseeq1_38 -> strcaseeq1_39 [label="ZF"];
	strcaseeq1_38 -> strcaseeq1_35 [label="!ZF"];

	strcaseeq1_40 -> strcaseeq1_39 [label="!ZF"];
	strcaseeq1_40 -> strcaseeq1_38 [label="ZF"];
	strcaseeq1_41 -> strcaseeq1_42;
	strcaseeq1_42 -> strcaseeq1_43;
	strcaseeq1_43 -> strcaseeq1_40 [label="ZF"];
	strcaseeq1_43 -> strcaseeq1_5 [label="!ZF"];
	strcaseeq1_44 -> strcaseeq1_45 [label="ZF"];
	strcaseeq1_44 -> strcaseeq1_41 [label="!ZF"];

	strcaseeq1_46 -> strcaseeq1_45 [label="!ZF"];
	strcaseeq1_46 -> strcaseeq1_44 [label="ZF"];
	strcaseeq1_47 -> strcaseeq1_48;
	strcaseeq1_48 -> strcaseeq1_49;
	strcaseeq1_49 -> strcaseeq1_46 [label="ZF"];
	strcaseeq1_49 -> strcaseeq1_3 [label="!ZF"];
	strcaseeq1_50 -> strcaseeq1_51 [label="ZF"];
	strcaseeq1_50 -> strcaseeq1_47 [label="!ZF"];

	strcaseeq1_52 -> strcaseeq1_51 [label="!ZF"];
	strcaseeq1_52 -> strcaseeq1_50 [label="ZF"];
	strcaseeq1_53 -> strcaseeq1_54;
	strcaseeq1_54 -> strcaseeq1_55;
	strcaseeq1_55 -> strcaseeq1_52 [label="ZF"];
	strcaseeq1_55 -> strcaseeq1_1 [label="!ZF"];
}
--------
Starting Node: 53

Edges: 0 ----> 51, 1 --ZF--> 50, 1 --!ZF--> 0, 2 ----> 45, 3 --ZF--> 44, 3 --!ZF--> 2, 4 ----> 39, 5 --ZF--> 38, 5 --!ZF--> 4, 6 ----> 33, 7 --ZF--> 32, 7 --!ZF--> 6, 8 ----> 27, 9 --ZF--> 26, 9 --!ZF--> 8, 10 ----> 21, 11 --ZF--> 20, 11 --!ZF--> 10, 12 ----> 15, 13 --!ZF--> 14, 13 --ZF--> 12, 14 ----> 15, , 16 --ZF--> 15, 16 --!ZF--> 14, 17 ----> 18, 18 ----> 19, 19 --ZF--> 16, 19 --!ZF--> 13, 20 --ZF--> 21, 20 --!ZF--> 17, , 22 --!ZF--> 21, 22 --ZF--> 20, 23 ----> 24, 24 ----> 25, 25 --ZF--> 22, 25 --!ZF--> 11, 26 --ZF--> 27, 26 --!ZF--> 23, , 28 --!ZF--> 27, 28 --ZF--> 26, 29 ----> 30, 30 ----> 31, 31 --ZF--> 28, 31 --!ZF--> 9, 32 --ZF--> 33, 32 --!ZF--> 29, , 34 --!ZF--> 33, 34 --ZF--> 32, 35 ----> 36, 36 ----> 37, 37 --ZF--> 34, 37 --!ZF--> 7, 38 --ZF--> 39, 38 --!ZF--> 35, , 40 --!ZF--> 39, 40 --ZF--> 38, 41 ----> 42, 42 ----> 43, 43 --ZF--> 40, 43 --!ZF--> 5, 44 --ZF--> 45, 44 --!ZF--> 41, , 46 --!ZF--> 45, 46 --ZF--> 44, 47 ----> 48, 48 ----> 49, 49 --ZF--> 46, 49 --!ZF--> 3, 50 --ZF--> 51, 50 --!ZF--> 47, , 52 --!ZF--> 51, 52 --ZF--> 50, 53 ----> 54, 54 ----> 55, 55 --ZF--> 52, 55 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "strcaseeq1"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 8:
skip'
node 9:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 10:
skip'
node 11:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 12:
skip'
node 13:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 14:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 15:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 16:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 17:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := c_isupper@()
node 19:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 20:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 22:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 23:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 24:
RAX := c_isupper@()
node 25:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 26:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 27:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 28:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 29:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 30:
RAX := c_isupper@()
node 31:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 32:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 33:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 34:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 35:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 36:
RAX := c_isupper@()
node 37:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 38:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 39:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 40:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 41:
RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 42:
RAX := c_isupper@()
node 43:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 44:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 45:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 46:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 47:
RAX := Dereference: [(Var: RSP0 - Value: 52),4], RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R12 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R9 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R8 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32)
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 48:
RAX := c_isupper@()
(53,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(1,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(2,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(3,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(4,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(5,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(6,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(7,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(8,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(9,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(10,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(11,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(17,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(20,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(21,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(22,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(23,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(24,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(25,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R14),8,32)),(26,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(27,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(28,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(29,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(30,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(31,RSP == (Var: RSP0 - Value: 24) && RBP == sextend(TakeBits: <7,0>(Reg: R15),8,32)),(32,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(33,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(34,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(35,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(36,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(37,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R12),8,32)),(38,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(39,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(40,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(41,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(42,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(43,RSP == (Var: RSP0 - Value: 40) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(44,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(45,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(46,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(47,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(48,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(49,RSP == (Var: RSP0 - Value: 56) && RBP == sextend(TakeBits: <7,0>(Reg: R13),8,32)),(50,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(51,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(52,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(53,RSP == Var: RSP0 && RBP == Var: RBP0),(54,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI)),(55,RSP == (Var: RSP0 - Value: 56) && RBP == TakeBits: <31,0>(Reg: RSI))])
node 49:
RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 50:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 51:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 52:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 53:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := (TakeBits: <63,8>(Reg: R14) . Dereference: [(Var: RSP0 + Value: 8),1]), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := (TakeBits: <31,0>(Reg: R9) . TakeBits: <31,0>(Reg: RAX))
node 54:
RAX := c_isupper@()
node 55:
RCX := sextend(Dereference: [(Reg: RBX + Value: 1),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 53

Edges: 0 ----> 51, 1 --ZF--> 50, 1 --!ZF--> 0, 2 ----> 45, 3 --ZF--> 44, 3 --!ZF--> 2, 4 ----> 39, 5 --ZF--> 38, 5 --!ZF--> 4, 6 ----> 33, 7 --ZF--> 32, 7 --!ZF--> 6, 8 ----> 27, 9 --ZF--> 26, 9 --!ZF--> 8, 10 ----> 21, 11 --ZF--> 20, 11 --!ZF--> 10, 12 ----> 15, 13 --!ZF--> 14, 13 --ZF--> 12, 14 ----> 15, , 16 --ZF--> 15, 16 --!ZF--> 14, 17 ----> 18, 18 ----> 19, 19 --ZF--> 16, 19 --!ZF--> 13, 20 --ZF--> 21, 20 --!ZF--> 17, , 22 --!ZF--> 21, 22 --ZF--> 20, 23 ----> 24, 24 ----> 25, 25 --ZF--> 22, 25 --!ZF--> 11, 26 --ZF--> 27, 26 --!ZF--> 23, , 28 --!ZF--> 27, 28 --ZF--> 26, 29 ----> 30, 30 ----> 31, 31 --ZF--> 28, 31 --!ZF--> 9, 32 --ZF--> 33, 32 --!ZF--> 29, , 34 --!ZF--> 33, 34 --ZF--> 32, 35 ----> 36, 36 ----> 37, 37 --ZF--> 34, 37 --!ZF--> 7, 38 --ZF--> 39, 38 --!ZF--> 35, , 40 --!ZF--> 39, 40 --ZF--> 38, 41 ----> 42, 42 ----> 43, 43 --ZF--> 40, 43 --!ZF--> 5, 44 --ZF--> 45, 44 --!ZF--> 41, , 46 --!ZF--> 45, 46 --ZF--> 44, 47 ----> 48, 48 ----> 49, 49 --ZF--> 46, 49 --!ZF--> 3, 50 --ZF--> 51, 50 --!ZF--> 47, , 52 --!ZF--> 51, 52 --ZF--> 50, 53 ----> 54, 54 ----> 55, 55 --ZF--> 52, 55 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "strcaseeq1"
node 0:
skip'
node 1:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))
node 2:
skip'
node 3:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 4:
skip'
node 5:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))
node 6:
skip'
node 7:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))
node 8:
skip'
node 9:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))
node 10:
skip'
node 11:
RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))
node 12:
skip'
node 13:
RAX := Value: 1
ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
node 14:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 15:
RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 16:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))
node 17:
RDI := Value: 0
[(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := c_isupper@()
node 19:
RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 20:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 21:
RBX := Dereference: [(Var: RSP0 - Value: 16),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 22:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))
node 23:
RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 24:
RAX := c_isupper@()
node 25:
RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 26:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 27:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 28:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))
node 29:
RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 30:
RAX := c_isupper@()
node 31:
RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 32:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 33:
RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)
node 34:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))
node 35:
RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX
node 36:
RAX := c_isupper@()
node 37:
RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 38:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 39:
RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]
node 40:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 41:
RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
[(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 42:
RAX := c_isupper@()
node 43:
RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 44:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 45:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 46:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))
node 47:
RAX := Dereference: [(Var: RSP0 - Value: 52),4], RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R12 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R9 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R8 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32)
[(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 48:
RAX := c_isupper@()
node 49:
RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
node 50:
RAX := Value: 1
ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))
node 51:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
node 52:
RAX := Value: 0
ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))
node 53:
RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := (TakeBits: <63,8>(Reg: R14) . Dereference: [(Var: RSP0 + Value: 8),1]), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := (TakeBits: <31,0>(Reg: R9) . TakeBits: <31,0>(Reg: RAX))
node 54:
RAX := c_isupper@()
node 55:
RCX := sextend(Dereference: [(Reg: RBX + Value: 1),1],8,32)
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: strcaseeq1 -> strcaseeq1_2324 and strcaseeq1 -> strcaseeq1_3666

same_behavior checking these two SStates:

SA || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := (TakeBits: <63,8>(Reg: R14) . Dereference: [(Var: RSP0 + Value: 8),1]), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := (TakeBits: <31,0>(Reg: R9) . TakeBits: <31,0>(Reg: RAX))

SB || RBX := Reg: RDI, RDI := TakeBits: <31,0>(Reg: RSI), R15 := TakeBits: <31,0>(Reg: R8), R14 := (TakeBits: <63,8>(Reg: R14) . Dereference: [(Var: RSP0 + Value: 8),1]), R13 := TakeBits: <31,0>(Reg: RDX), R12 := TakeBits: <31,0>(Reg: RCX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := (TakeBits: <31,0>(Reg: R9) . TakeBits: <31,0>(Reg: RAX))

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R8]
Value B:
E_app (TakeBits 31 0) [E_reg R8]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg R14],E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg R14],E_deref (E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]) 1]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RCX]
Value B:
E_app (TakeBits 31 0) [E_reg RCX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_app Concat [E_app (TakeBits 31 0) [E_reg R9],E_app (TakeBits 31 0) [E_reg RAX]]
E_app Concat [E_app (TakeBits 31 0) [E_reg R9],E_app (TakeBits 31 0) [E_reg RAX]]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq1 -> strcaseeq1_2324 and strcaseeq1 -> strcaseeq1_3666 have been verified to do the same.

same_behavior for the nodes: strcaseeq1_2325 -> strcaseeq1_2325 and strcaseeq1_3667 -> strcaseeq1_3667

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq1_2325 -> strcaseeq1_2325 and strcaseeq1_3667 -> strcaseeq1_3667 have been verified to do the same.

same_behavior for the nodes: strcaseeq1_2326 -> strcaseeq1_2328 and strcaseeq1_3668 -> strcaseeq1_3670

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 1),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 1),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 1 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 1 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq1_2326 -> strcaseeq1_2328 and strcaseeq1_3668 -> strcaseeq1_3670 have been verified to do the same.

same_behavior for the nodes: .label_195 -> strcaseeq1_2337 and .label_246 -> strcaseeq1_3679

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI)), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_195 -> strcaseeq1_2337 and .label_246 -> strcaseeq1_3679 have been verified to do the same.

same_behavior for the nodes: .label_194 -> strcaseeq1_2365 and .label_245 -> strcaseeq1_3707

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_194 -> strcaseeq1_2365 and .label_245 -> strcaseeq1_3707 have been verified to do the same.

same_behavior for the nodes: .label_193 -> strcaseeq1_2341 and .label_244 -> strcaseeq1_3683

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), CF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), SF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), OF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI)), PF := TEST(TakeBits: <7,0>(Reg: RSI),TakeBits: <7,0>(Reg: RSI))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_193 -> strcaseeq1_2341 and .label_244 -> strcaseeq1_3683 have been verified to do the same.

same_behavior for the nodes: strcaseeq1_2342 -> strcaseeq2_2387 and strcaseeq1_3684 -> strcaseeq2_3736

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 52),4], RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R12 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R9 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R8 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32)
SA || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 52),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RAX := Dereference: [(Var: RSP0 - Value: 52),4], RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R12 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R9 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R8 := sextend(TakeBits: <7,0>(Dereference: [(Var: RSP0 - Value: 52),4]),8,32)
SB || [(Var: RSP0 - Value: 56),8] := Dereference: [(Var: RSP0 - Value: 52),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4]]
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4]]
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq1_2342 -> strcaseeq2_2387 and strcaseeq1_3684 -> strcaseeq2_3736 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2388 -> strcaseeq2_2388 and strcaseeq2_3737 -> strcaseeq2_3737

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2388 -> strcaseeq2_2388 and strcaseeq2_3737 -> strcaseeq2_3737 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2389 -> strcaseeq2_2391 and strcaseeq2_3738 -> strcaseeq2_3740

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 2),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 2 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 2 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2389 -> strcaseeq2_2391 and strcaseeq2_3738 -> strcaseeq2_3740 have been verified to do the same.

same_behavior for the nodes: .label_196 -> strcaseeq2_2400 and .label_247 -> strcaseeq2_3749

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_196 -> strcaseeq2_2400 and .label_247 -> strcaseeq2_3749 have been verified to do the same.

same_behavior for the nodes: .label_197 -> strcaseeq2_2426 and .label_248 -> strcaseeq2_3775

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_197 -> strcaseeq2_2426 and .label_248 -> strcaseeq2_3775 have been verified to do the same.

same_behavior for the nodes: .label_198 -> strcaseeq2_2404 and .label_249 -> strcaseeq2_3753

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_198 -> strcaseeq2_2404 and .label_249 -> strcaseeq2_3753 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2405 -> strcaseeq3_2445 and strcaseeq2_3754 -> strcaseeq3_3801

same_behavior checking these two SStates:

SA || RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

SB || RCX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R12),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R13),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R13),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := sextend(TakeBits: <7,0>(Reg: R12),8,32), R8 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Dereference: [(Var: RSP0 - Value: 48),8]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R13]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2405 -> strcaseeq3_2445 and strcaseeq2_3754 -> strcaseeq3_3801 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2446 -> strcaseeq3_2446 and strcaseeq3_3802 -> strcaseeq3_3802 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 3),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 3 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2447 -> strcaseeq3_2449 and strcaseeq3_3803 -> strcaseeq3_3805 have been verified to do the same.

same_behavior for the nodes: .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_201 -> strcaseeq3_2458 and .label_252 -> strcaseeq3_3814 have been verified to do the same.

same_behavior for the nodes: .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 40),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R12 := Dereference: [(Var: RSP0 - Value: 32),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_199 -> strcaseeq3_2479 and .label_250 -> strcaseeq3_3835 have been verified to do the same.

same_behavior for the nodes: .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R13),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_200 -> strcaseeq3_2462 and .label_251 -> strcaseeq3_3818 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860

same_behavior checking these two SStates:

SA || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SA || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

SB || RCX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDX := sextend(TakeBits: <7,0>(Reg: R15),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R12),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R12),8,32), R15 := sextend(TakeBits: <7,0>(Reg: R15),8,32), R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32), R12 := Dereference: [(Var: RSP0 - Value: 32),8]
SB || [(Var: RSP0 - Value: 32),8] := Dereference: [(Var: RSP0 - Value: 40),8], [(Var: RSP0 - Value: 40),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R12]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2463 -> strcaseeq4_2497 and strcaseeq3_3819 -> strcaseeq4_3860 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2498 -> strcaseeq4_2498 and strcaseeq4_3861 -> strcaseeq4_3861 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 4),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 4 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2499 -> strcaseeq4_2501 and strcaseeq4_3862 -> strcaseeq4_3864 have been verified to do the same.

same_behavior for the nodes: .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_204 -> strcaseeq4_2510 and .label_255 -> strcaseeq4_3873 have been verified to do the same.

same_behavior for the nodes: .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RBX := Dereference: [(Var: RSP0 - Value: 32),8], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_203 -> strcaseeq4_2530 and .label_254 -> strcaseeq4_3893 have been verified to do the same.

same_behavior for the nodes: .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R12),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_202 -> strcaseeq4_2514 and .label_253 -> strcaseeq4_3877 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915

same_behavior checking these two SStates:

SA || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SA || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

SB || RDX := sextend(TakeBits: <7,0>(Reg: R14),8,32), RDI := sextend(TakeBits: <7,0>(Reg: R15),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R15),8,32), R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := sextend(TakeBits: <7,0>(Reg: R14),8,32)
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Dereference: [(Var: RSP0 - Value: 32),8]
SB || ZF := (Var: RSP0 - Value: 32), CF := (Var: RSP0 - Value: 32), SF := (Var: RSP0 - Value: 32), OF := (Var: RSP0 - Value: 32), PF := (Var: RSP0 - Value: 32)

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R15]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2515 -> strcaseeq5_2545 and strcaseeq4_3878 -> strcaseeq5_3915 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2546 -> strcaseeq5_2546 and strcaseeq5_3916 -> strcaseeq5_3916 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 5),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 5 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2547 -> strcaseeq5_2549 and strcaseeq5_3917 -> strcaseeq5_3919 have been verified to do the same.

same_behavior for the nodes: .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_205 -> strcaseeq5_2558 and .label_256 -> strcaseeq5_3928 have been verified to do the same.

same_behavior for the nodes: .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_206 -> strcaseeq5_2573 and .label_257 -> strcaseeq5_3943 have been verified to do the same.

same_behavior for the nodes: .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R15),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_207 -> strcaseeq5_2562 and .label_258 -> strcaseeq5_3932 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964

same_behavior checking these two SStates:

SA || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RDI := sextend(TakeBits: <7,0>(Reg: R14),8,32), RSI := sextend(TakeBits: <7,0>(Reg: R14),8,32), R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: RSP0 - Value: 16),8] := Dereference: [(Var: RSP0 - Value: 24),8], [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Value B:
E_app (SExtend 8 32) [E_app (TakeBits 7 0) [E_reg R14]]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2563 -> strcaseeq6_2587 and strcaseeq5_3933 -> strcaseeq6_3964 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2588 -> strcaseeq6_2588 and strcaseeq6_3965 -> strcaseeq6_3965 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 6),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 6 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2589 -> strcaseeq6_2591 and strcaseeq6_3966 -> strcaseeq6_3968 have been verified to do the same.

same_behavior for the nodes: .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 0
SB || ZF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := CMP(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_210 -> strcaseeq6_2600 and .label_261 -> strcaseeq6_3977 have been verified to do the same.

same_behavior for the nodes: .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_208 -> strcaseeq6_2614 and .label_259 -> strcaseeq6_3991 have been verified to do the same.

same_behavior for the nodes: .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), CF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), SF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), OF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32))), PF := TEST(TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)),TakeBits: <7,0>(sextend(TakeBits: <7,0>(Reg: R14),8,32)))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_209 -> strcaseeq6_2604 and .label_260 -> strcaseeq6_3981 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009

same_behavior checking these two SStates:

SA || RDI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Dereference: [(Var: RSP0 - Value: 16),8]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
b0: True b1: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2605 -> strcaseeq7_2625 and strcaseeq6_3982 -> strcaseeq7_4009 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010

same_behavior checking these two SStates:

SA || RAX := c_isupper@()

SB || RAX := c_isupper@()

Resulting values:
Value A:
E_app (F2 "c_isupper" "") []
Value B:
E_app (F2 "c_isupper" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2626 -> strcaseeq7_2626 and strcaseeq7_4010 -> strcaseeq7_4010 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013

same_behavior checking these two SStates:

SA || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || RCX := sextend(Dereference: [(Reg: RBX + Value: 7),1],8,32)
SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Resulting values:
Value A:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Value B:
E_app (SExtend 8 32) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 7 64]) 1]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2627 -> strcaseeq7_2629 and strcaseeq7_4011 -> strcaseeq7_4013 have been verified to do the same.

same_behavior for the nodes: .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), CF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), SF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), OF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX)), PF := TEST(TakeBits: <7,0>(Reg: RCX),TakeBits: <7,0>(Reg: RCX))

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_213 -> strcaseeq7_2637 and .label_264 -> strcaseeq7_4021 have been verified to do the same.

same_behavior for the nodes: .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_211 -> strcaseeq7_2642 and .label_262 -> strcaseeq7_4026 have been verified to do the same.

same_behavior for the nodes: .label_212 -> .label_212 and .label_263 -> .label_263

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_212 -> .label_212 and .label_263 -> .label_263 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

SB || RAX := Value: 1
SB || ZF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), CF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), SF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), OF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263), PF := TEST(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2630 -> strcaseeq7_2632 and strcaseeq7_4014 -> strcaseeq7_4016 have been verified to do the same.

same_behavior for the nodes: strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq7_2633 -> strcaseeq7_2633 and strcaseeq7_4017 -> strcaseeq7_4017 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R14),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2592 -> strcaseeq6_2595 and strcaseeq6_3969 -> strcaseeq6_3972 have been verified to do the same.

same_behavior for the nodes: strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq6_2596 -> strcaseeq6_2596 and strcaseeq6_3973 -> strcaseeq6_3973 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R15),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2550 -> strcaseeq5_2553 and strcaseeq5_3920 -> strcaseeq5_3923 have been verified to do the same.

same_behavior for the nodes: strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq5_2554 -> strcaseeq5_2554 and strcaseeq5_3924 -> strcaseeq5_3924 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R12),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2502 -> strcaseeq4_2505 and strcaseeq4_3865 -> strcaseeq4_3868 have been verified to do the same.

same_behavior for the nodes: strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq4_2506 -> strcaseeq4_2506 and strcaseeq4_3869 -> strcaseeq4_3869 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2450 -> strcaseeq3_2453 and strcaseeq3_3806 -> strcaseeq3_3809 have been verified to do the same.

same_behavior for the nodes: strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq3_2454 -> strcaseeq3_2454 and strcaseeq3_3810 -> strcaseeq3_3810 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2392 -> strcaseeq2_2395 and strcaseeq2_3741 -> strcaseeq2_3744

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),sextend(TakeBits: <7,0>(Reg: R13),8,32))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2392 -> strcaseeq2_2395 and strcaseeq2_3741 -> strcaseeq2_3744 have been verified to do the same.

same_behavior for the nodes: strcaseeq2_2396 -> strcaseeq2_2396 and strcaseeq2_3745 -> strcaseeq2_3745

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq2_2396 -> strcaseeq2_2396 and strcaseeq2_3745 -> strcaseeq2_3745 have been verified to do the same.

same_behavior for the nodes: strcaseeq1_2329 -> strcaseeq1_2332 and strcaseeq1_3671 -> strcaseeq1_3674

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SA || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

SB || RAX := Value: 0, RCX := AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263)
SB || ZF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), CF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), SF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), OF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI)), PF := CMP(AND(TakeBits: <31,0>(Reg: RCX),Value: 4294967263),TakeBits: <31,0>(Reg: RSI))

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_reg RCX],E_val 4294967263 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq1_2329 -> strcaseeq1_2332 and strcaseeq1_3671 -> strcaseeq1_3674 have been verified to do the same.

same_behavior for the nodes: strcaseeq1_2333 -> strcaseeq1_2333 and strcaseeq1_3675 -> strcaseeq1_3675

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes strcaseeq1_2333 -> strcaseeq1_2333 and strcaseeq1_3675 -> strcaseeq1_3675 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 16),(Var: RSP0 - Value: 32),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 32),(Var: RSP0 - Value: 48),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 48),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24),(Var: RSP0 - Value: 16),(Var: RSP0 - Value: 8),(Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 52) <--> (Var: RSP0 - Value: 52)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)

Succesful check!
Considering text section (50/87): "quotearg_buffer"
--------
.dot code for CFG of text section quotearg_buffer for Vanilla
diGraph quotearg_buffer_Vanilla{
	quotearg_buffer_0  [label="[quotearg_buffer,quotearg_buffer_467]"]
	quotearg_buffer_1  [label="[quotearg_buffer_468,quotearg_buffer_468]"]
	quotearg_buffer_2  [label="[quotearg_buffer_469,quotearg_buffer_482]"]
	quotearg_buffer_3  [label="[quotearg_buffer_483,quotearg_buffer_483]"]
	quotearg_buffer_4  [label="[quotearg_buffer_484,quotearg_buffer_494]"]

	quotearg_buffer_0 -> quotearg_buffer_1;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;

}
--------
--------
.dot code for CFG of text section quotearg_buffer for Random(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]))])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(2,RSP == (Var: RSP0 - Value: 56) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(3,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4])),(4,RSP == (Var: RSP0 - Value: 88) && RBP == (if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]))])
ized
diGraph quotearg_buffer_Randomized{
	quotearg_buffer_0  [label="[quotearg_buffer,quotearg_buffer_103]"]
	quotearg_buffer_1  [label="[quotearg_buffer_104,quotearg_buffer_104]"]
	quotearg_buffer_2  [label="[quotearg_buffer_105,quotearg_buffer_118]"]
	quotearg_buffer_3  [label="[quotearg_buffer_119,quotearg_buffer_119]"]
	quotearg_buffer_4  [label="[quotearg_buffer_120,quotearg_buffer_130]"]

	quotearg_buffer_0 -> quotearg_buffer_1;
	quotearg_buffer_1 -> quotearg_buffer_2;
	quotearg_buffer_2 -> quotearg_buffer_3;
	quotearg_buffer_3 -> quotearg_buffer_4;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_buffer"
node 0:
R15 := Reg: RDX, R14 := Reg: RCX, R13 := Reg: RDI, R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)
node 1:
RAX := __errno_location@()
node 2:
RAX := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), RBX := Reg: RAX, RCX := Reg: R14, RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R9 := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),4]
[(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
ZF := (Var: RSP0 - Value: 64), CF := (Var: RSP0 - Value: 64), SF := (Var: RSP0 - Value: 64), OF := (Var: RSP0 - Value: 64), PF := (Var: RSP0 - Value: 64)
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RBX,4] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_buffer"
node 0:
R15 := Reg: RDX, R14 := Reg: RCX, R13 := Reg: RDI, R12 := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)
node 1:
RAX := __errno_location@()
node 2:
RAX := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), RBX := Reg: RAX, RCX := Reg: R14, RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R9 := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),4]
[(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
ZF := (Var: RSP0 - Value: 64), CF := (Var: RSP0 - Value: 64), SF := (Var: RSP0 - Value: 64), OF := (Var: RSP0 - Value: 64), PF := (Var: RSP0 - Value: 64)
node 3:
RAX := quotearg_buffer_restyled@()
node 4:
RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
[Reg: RBX,4] := Dereference: [(Var: RSP0 - Value: 52),4]
ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)
--------

same_behavior for the nodes: quotearg_buffer -> quotearg_buffer_467 and quotearg_buffer -> quotearg_buffer_103

same_behavior checking these two SStates:

SA || R15 := Reg: RDX, R14 := Reg: RCX, R13 := Reg: RDI, R12 := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
SA || ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)

SB || R15 := Reg: RDX, R14 := Reg: RCX, R13 := Reg: RDI, R12 := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R15, [(Var: RSP0 - Value: 24),8] := Reg: R14, [(Var: RSP0 - Value: 32),8] := Reg: R13, [(Var: RSP0 - Value: 40),8] := Reg: R12, [(Var: RSP0 - Value: 48),8] := Reg: RBX, [(Var: RSP0 - Value: 56),8] := Reg: RAX
SB || ZF := TEST(Reg: R8,Reg: R8), CF := TEST(Reg: R8,Reg: R8), SF := TEST(Reg: R8,Reg: R8), OF := TEST(Reg: R8,Reg: R8), PF := TEST(Reg: R8,Reg: R8)

Resulting values:
Value A:
E_reg RDX
Value B:
E_reg RDX
Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]
(v1 := v2):
E_reg R13
E_reg R13
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg R12
E_reg R12
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer -> quotearg_buffer_467 and quotearg_buffer -> quotearg_buffer_103 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_468 -> quotearg_buffer_468 and quotearg_buffer_104 -> quotearg_buffer_104

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_468 -> quotearg_buffer_468 and quotearg_buffer_104 -> quotearg_buffer_104 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_469 -> quotearg_buffer_482 and quotearg_buffer_105 -> quotearg_buffer_118

same_behavior checking these two SStates:

SA || RAX := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), RBX := Reg: RAX, RCX := Reg: R14, RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R9 := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),4]
SA || [(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
SA || ZF := (Var: RSP0 - Value: 64), CF := (Var: RSP0 - Value: 64), SF := (Var: RSP0 - Value: 64), OF := (Var: RSP0 - Value: 64), PF := (Var: RSP0 - Value: 64)

SB || RAX := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8), RBX := Reg: RAX, RCX := Reg: R14, RDX := Reg: R15, RDI := Reg: R13, RSI := Reg: R12, R9 := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], R8 := Dereference: [(if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]),4]
SB || [(Var: RSP0 - Value: 52),4] := Dereference: [Reg: RAX,4], [(Var: RSP0 - Value: 72),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 48),8], [(Var: RSP0 - Value: 80),8] := Dereference: [((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 40),8], [(Var: RSP0 - Value: 88),8] := ((if (Reg: R8 != Value: 0) then Reg: R8 else Dereference: [Var: default_quoting_options,4]) + Value: 8)
SB || ZF := (Var: RSP0 - Value: 64), CF := (Var: RSP0 - Value: 64), SF := (Var: RSP0 - Value: 64), OF := (Var: RSP0 - Value: 64), PF := (Var: RSP0 - Value: 64)

Resulting values:
Value A:
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
Value B:
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_reg R15
Value B:
E_reg R15
Resulting values:
Value A:
E_reg R13
Value B:
E_reg R13
Resulting values:
Value A:
E_reg R12
Value B:
E_reg R12
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Resulting values:
Value A:
E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Value B:
E_deref (E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]
(v1 := v2):
E_deref (E_reg RAX) 4
E_deref (E_reg RAX) 4
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 48 64]) 8
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 48 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 80 64]
(v1 := v2):
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 40 64]) 8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg R8,E_val 0 (-1)]) (E_reg R8) (E_deref (E_var "default_quoting_options" 64) 4),E_val 8 64]
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_469 -> quotearg_buffer_482 and quotearg_buffer_105 -> quotearg_buffer_118 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_483 -> quotearg_buffer_483 and quotearg_buffer_119 -> quotearg_buffer_119

same_behavior checking these two SStates:

SA || RAX := quotearg_buffer_restyled@()

SB || RAX := quotearg_buffer_restyled@()

Resulting values:
Value A:
E_app (F2 "quotearg_buffer_restyled" "") []
Value B:
E_app (F2 "quotearg_buffer_restyled" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_buffer_483 -> quotearg_buffer_483 and quotearg_buffer_119 -> quotearg_buffer_119 have been verified to do the same.

same_behavior for the nodes: quotearg_buffer_484 -> quotearg_buffer_494 and quotearg_buffer_120 -> quotearg_buffer_130

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SA || [Reg: RBX,4] := Dereference: [(Var: RSP0 - Value: 52),4]
SA || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value:(21,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
 48)

SB || RBX := Dereference: [(Var: RSP0 - Value: 48),8], RCX := Dereference: [(Var: RSP0 - Value: 52),4], R15 := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 24),8], R13 := Dereference: [(Var: RSP0 - Value: 32),8], R12 := Dereference: [(Var: RSP0 - Value: 40),8]
SB || [Reg: RBX,4] := Dereference: [(Var: RSP0 - Value: 52),4]
SB || ZF := (Var: RSP0 - Value: 48), CF := (Var: RSP0 - Value: 48), SF := (Var: RSP0 - Value: 48), OF := (Var: RSP0 - Value: 48), PF := (Var: RSP0 - Value: 48)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 48 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 32 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 8
local_var_cmp called

Reg Chk: True
local_var_cmp called

Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 52 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes quotearg_buffer_484 -> quotearg_buffer_494 and quotearg_buffer_120 -> quotearg_buffer_130 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 80) <--> (Var: RSP0 - Value: 80)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 52) <--> (Var: RSP0 - Value: 52)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 48) <--> (Var: RSP0 - Value: 48)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 32) <--> (Var: RSP0 - Value: 32)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (51/87): "main"
--------
.dot code for CFG of text section main for Vanilla
diGraph main_Vanilla{
	main_0  [label="[main_178,main_184]"]
	main_1  [label="[main_185,main_185]"]
	main_2  [label="[main_173,main_174]"]
	main_3  [label="[main_175,main_175]"]
	main_4  [label="[main_176,main_177]"]
	main_5  [label="[.label_30,.label_30]"]
	main_6  [label="[main_192,main_192]"]
	main_7  [label="[main_155,main_155]"]
	main_8  [label="[main_156,main_156]"]
	main_9  [label="[main_157,main_158]"]
	main_10  [label="[main_159,main_159]"]
	main_11  [label="[main_160,main_161]"]
	main_12  [label="[main_162,main_162]"]
	main_13  [label="[main_163,main_163]"]
	main_14  [label="[main_164,main_164]"]
	main_15  [label="[main_165,main_165]"]
	main_16  [label="[main_166,main_166]"]
	main_17  [label="[main_167,main_169]"]
	main_18  [label="[main_170,main_170]"]
	main_19  [label="[main_171,main_172]"]
	main_20  [label="[.label_33,main_189]"]
	main_21  [label="[main,main_154]"]

	main_0 -> main_1;
	main_1 -> main_20;
	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_20 [label="!ZF"];
	main_4 -> main_0 [label="ZF"];
	main_5 -> main_6;

	main_7 -> main_8;
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_5 [label="ZF"];
	main_19 -> main_2 [label="!ZF"];

	main_21 -> main_20 [label="!ZF"];
	main_21 -> main_7 [label="ZF"];
}
--------
--------
.dot code for CFG of text section main for Randomized
diGraph main_Randomized{
	main_0  [label="[main_1844,main_1850]"]
	main_1  [label="[main_1851,main_1851]"]
	main_2  [label="[main_1839,main_1840]"]
	main_3  [label="[main_1841,main_1841]"]
	main_4  [label="[main_1842,main_1843]"]
	main_5  [label="[.label_153,.label_153]"]
	main_6  [label="[main_1858,main_1858]"]
	main_7  [label="[main_1821,main_1821]"]
	main_8  [label="[main_1822,main_1822]"]
	main_9  [label="[main_1823,main_1824]"]
	main_10  [label="[main_1825,main_1825]"]
	main_11  [label="[main_1826,main_1827]"]
	main_12  [label="[main_1828,main_1828]"]
	main_13  [label="[main_1829,main_1829]"]
	main_14  [label="[main_1830,main_1830]"]
	main_15  [label="[main_1831,main_1831]"]
	main_16  [label="[main_1832,main_1832]"]
	main_17  [label="[main_1833,main_1835]"]
	main_18  [label="[main_1836,main_1836]"]
	main_19  [label="[main_1837,main_1838]"]
	main_20  [label="[.label_157,main_1855]"]
	main_21  [label="[main,main_1820]"]

	main_0 -> main_1;
	main_1 -> main_20;
	main_2 -> main_3;
	main_3 -> main_4;
	main_4 -> main_20 [label="!ZF"];
	main_4 -> main_0 [label="ZF"];
	main_5 -> main_6;

	main_7 -> main_8;
	main_8 -> main_9;
	main_9 -> main_10;
	main_10 -> main_11;
	main_11 -> main_12;
	main_12 -> main_13;
	main_13 -> main_14;
	main_14 -> main_15;
	main_15 -> main_16;
	main_16 -> main_17;
	main_17 -> main_18;
	main_18 -> main_19;
	main_19 -> main_5 [label="ZF"];
	main_19 -> main_2 [label="!ZF"];

	main_21 -> main_20 [label="!ZF"];
	main_21 -> main_7 [label="ZF"];
}
--------
Starting Node: 21

Edges: 0 ----> 1, 1 ----> 20, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 20, 4 --ZF--> 0, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 --ZF--> 5, 19 --!ZF--> 2, , 21 --!ZF--> 20, 21 --ZF--> 7

Symbolic Execution for Binary "Vanilla":
Current text section: "main"
node 0:
RAX := Value: 0, RCX := Dereference: [(Var: main_179 + Var: Version),8], RDX := Dereference: [Var: label_18,4], RDI := Dereference: [(Var: main_178 + Var: stdout),8], RSI := Dereference: [Var: label_14,4], R9 := Value: 0, R8 := Dereference: [Var: label_32,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := version_etc@()
node 2:
RDI := Reg: RBX, RSI := Dereference: [Var: label_31,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDI := Value: 1
node 6:
RAX := usage@()
node 7:
RDI := Dereference: [Reg: RBX,8]
node 8:
RAX := set_program_name@()
node 9:
RDI := Value: 6, RSI := Dereference: [Var: label_28,4]
node 10:
RAX := setlocale@()
node 11:
RDI := Dereference: [Var: label_29,4], RSI := Dereference: [Var: label_34,4]
node 12:
RAX := bindtextdomain@()
node 13:
RDI := Dereference: [Var: label_29,4]
node 14:
RAX := textdomain@()
node 15:
RDI := Dereference: [Var: close_stdout,4]
node 16:
RAX := atexit@()
node 17:
RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: label_35,4]
node 18:
RAX := strcmp@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 21:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CM(21,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == Var: RSP0 && RBP == Var: RBP0)])
P(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

Starting Node: 21

Edges: 0 ----> 1, 1 ----> 20, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 20, 4 --ZF--> 0, 5 ----> 6, , 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 --ZF--> 5, 19 --!ZF--> 2, , 21 --!ZF--> 20, 21 --ZF--> 7

Symbolic Execution for Binary "Randomized":
Current text section: "main"
node 0:
RAX := Value: 0, RCX := Dereference: [(Var: main_1845 + Var: Version),8], RDX := Dereference: [Var: label_149,4], RDI := Dereference: [(Var: main_1844 + Var: stdout),8], RSI := Dereference: [Var: label_155,4], R9 := Value: 0, R8 := Dereference: [Var: label_156,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := version_etc@()
node 2:
RDI := Reg: RBX, RSI := Dereference: [Var: label_154,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDI := Value: 1
node 6:
RAX := usage@()
node 7:
RDI := Dereference: [Reg: RBX,8]
node 8:
RAX := set_program_name@()
node 9:
RDI := Value: 6, RSI := Dereference: [Var: label_152,4]
node 10:
RAX := setlocale@()
node 11:
RDI := Dereference: [Var: label_151,4], RSI := Dereference: [Var: label_158,4]
node 12:
RAX := bindtextdomain@()
node 13:
RDI := Dereference: [Var: label_151,4]
node 14:
RAX := textdomain@()
node 15:
RDI := Dereference: [Var: close_stdout,4]
node 16:
RAX := atexit@()
node 17:
RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: label_159,4]
node 18:
RAX := strcmp@()
node 19:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 20:
RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 21:
RBX := Reg: RSI
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)
--------

same_behavior for the nodes: main -> main_154 and main -> main_1820

same_behavior checking these two SStates:

SA || RBX := Reg: RSI
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

SB || RBX := Reg: RSI
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 2)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes main -> main_154 and main -> main_1820 have been verified to do the same.

same_behavior for the nodes: .label_33 -> main_189 and .label_157 -> main_1855

same_behavior checking these two SStates:

SA || RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RAX := Value: 1, RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_33 -> main_189 and .label_157 -> main_1855 have been verified to do the same.

same_behavior for the nodes: main_155 -> main_155 and main_1821 -> main_1821

same_behavior checking these two SStates:

SA || RDI := Dereference: [Reg: RBX,8]

SB || RDI := Dereference: [Reg: RBX,8]

Resulting values:
Value A:
E_deref (E_reg RBX) 8
Value B:
E_deref (E_reg RBX) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_155 -> main_155 and main_1821 -> main_1821 have been verified to do the same.

same_behavior for the nodes: main_156 -> main_156 and main_1822 -> main_1822

same_behavior checking these two SStates:

SA || RAX := set_program_name@()

SB || RAX := set_program_name@()

Resulting values:
Value A:
E_app (F2 "set_program_name" "") []
Value B:
E_app (F2 "set_program_name" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_156 -> main_156 and main_1822 -> main_1822 have been verified to do the same.

same_behavior for the nodes: main_157 -> main_158 and main_1823 -> main_1824

same_behavior checking these two SStates:

SA || RDI := Value: 6, RSI := Dereference: [Var: label_28,4]

SB || RDI := Value: 6, RSI := Dereference: [Var: label_152,4]

Resulting values:
Value A:
E_val 6 32
Value B:
E_val 6 32
Resulting values:
Value A:
E_deref (E_var "label_28" 64) 4
Value B:
E_deref (E_var "label_152" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_157 -> main_158 and main_1823 -> main_1824 have been verified to do the same.

same_behavior for the nodes: main_159 -> main_159 and main_1825 -> main_1825

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_159 -> main_159 and main_1825 -> main_1825 have been verified to do the same.

same_behavior for the nodes: main_160 -> main_161 and main_1826 -> main_1827

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: label_29,4], RSI := Dereference: [Var: label_34,4]

SB || RDI := Dereference: [Var: label_151,4], RSI := Dereference: [Var: label_158,4]

Resulting values:
Value A:
E_deref (E_var "label_29" 64) 4
Value B:
E_deref (E_var "label_151" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_34" 64) 4
Value B:
E_deref (E_var "label_158" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_160 -> main_161 and main_1826 -> main_1827 have been verified to do the same.

same_behavior for the nodes: main_162 -> main_162 and main_1828 -> main_1828

same_behavior checking these two SStates:

SA || RAX := bindtextdomain@()

SB || RAX := bindtextdomain@()

Resulting values:
Value A:
E_app (F2 "bindtextdomain" "") []
Value B:
E_app (F2 "bindtextdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_162 -> main_162 and main_1828 -> main_1828 have been verified to do the same.

same_behavior for the nodes: main_163 -> main_163 and main_1829 -> main_1829

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: label_29,4]

SB || RDI := Dereference: [Var: label_151,4]

Resulting values:
Value A:
E_deref (E_var "label_29" 64) 4
Value B:
E_deref (E_var "label_151" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_163 -> main_163 and main_1829 -> main_1829 have been verified to do the same.

same_behavior for the nodes: main_164 -> main_164 and main_1830 -> main_1830

same_behavior checking these two SStates:

SA || RAX := textdomain@()

SB || RAX := textdomain@()

Resulting values:
Value A:
E_app (F2 "textdomain" "") []
Value B:
E_app (F2 "textdomain" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_164 -> main_164 and main_1830 -> main_1830 have been verified to do the same.

same_behavior for the nodes: main_165 -> main_165 and main_1831 -> main_1831

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: close_stdout,4]

SB || RDI := Dereference: [Var: close_stdout,4]

Resulting values:
Value A:
E_deref (E_var "close_stdout" 64) 4
Value B:
E_deref (E_var "close_stdout" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_165 -> main_165 and main_1831 -> main_1831 have been verified to do the same.

same_behavior for the nodes: main_166 -> main_166 and main_1832 -> main_1832

same_behavior checking these two SStates:

SA || RAX := atexit@()

SB || RAX := atexit@()

Resulting values:
Value A:
E_app (F2 "atexit" "") []
Value B:
E_app (F2 "atexit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_166 -> main_166 and main_1832 -> main_1832 have been verified to do the same.

same_behavior for the nodes: main_167 -> main_169 and main_1833 -> main_1835

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: label_35,4]

SB || RBX := Dereference: [(Reg: RBX + Value: 8),8], RDI := Dereference: [(Reg: RBX + Value: 8),8], RSI := Dereference: [Var: label_159,4]

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Resulting values:
Value A:
E_deref (E_var "label_35" 64) 4
Value B:
E_deref (E_var "label_159" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_167 -> main_169 and main_1833 -> main_1835 have been verified to do the same.

same_behavior for the nodes: main_170 -> main_170 and main_1836 -> main_1836

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_170 -> main_170 and main_1836 -> main_1836 have been verified to do the same.

same_behavior for the nodes: main_171 -> main_172 and main_1837 -> main_1838

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_171 -> main_172 and main_1837 -> main_1838 have been verified to do the same.

same_behavior for the nodes: .label_30 -> .label_30 and .label_153 -> .label_153

same_behavior checking these two SStates:

SA || RDI := Value: 1

SB || RDI := Value: 1

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_30 -> .label_30 and .label_153 -> .label_153 have been verified to do the same.

same_behavior for the nodes: main_192 -> main_192 and main_1858 -> main_1858

same_behavior checking these two SStates:

SA || RAX := usage@()

SB || RAX := usage@()

Resulting values:
Value A:
E_app (F2 "usage" "") []
Value B:
E_app (F2 "usage" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_192 -> main_192 and main_1858 -> main_1858 have been verified to do the same.

same_behavior for the nodes: main_173 -> main_174 and main_1839 -> main_1840

same_behavior checking these two SStates:

SA || RDI := Reg: RBX, RSI := Dereference: [Var: label_31,4]

SB || RDI := Reg: RBX, RSI := Dereference: [Var: label_154,4]

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_deref (E_var "label_31" 64) 4
Value B:
E_deref (E_var "label_154" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_173 -> main_174 and main_1839 -> main_1840 have been verified to do the same.

same_behavior for the nodes: main_175 -> main_175 and main_1841 -> main_1841

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_175 -> main_175 and main_1841 -> main_1841 have been verified to do the same.

same_behavior for the nodes: main_176 -> main_177 and main_1842 -> main_1843

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_176 -> main_177 and main_1842 -> main_1843 have been verified to do the same.

same_behavior for the nodes: main_178 -> main_184 and main_1844 -> main_1850

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: main_179 + Var: Version),8], RDX := Dereference: [Var: label_18,4], RDI := Dereference: [(Var: main_178 + Var: stdout),8], RSI := Dereference: [Var: label_14,4], R9 := Value: 0, R8 := Dereference: [Var: label_32,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: main_1845 + Var: Version),8], RDX := Dereference: [Var: label_149,4], RDI := Dereference: [(Var: main_1844 + Var: stdout),8], RSI := Dereference: [Var: label_155,4], R9 := Value: 0, R8 := Dereference: [Var: label_156,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "main_179" 64,E_var "Version" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "main_1845" 64,E_var "Version" 64]) 8
Resulting values:
Value A:
E_deref (E_var "label_18" 64) 4
Value B:
E_deref (E_var "label_149" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "main_178" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "main_1844" 64,E_var "stdout" 64]) 8
Resulting values:
Value A:
E_deref (E_var "label_14" 64) 4
Value B:
E_deref (E_var "label_155" 64) 4
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_32" 64) 4
Value B:
E_deref (E_var "label_156" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_178 -> main_184 and main_1844 -> main_1850 have been verified to do the same.

same_behavior for the nodes: main_185 -> main_185 and main_1851 -> main_1851

same_behavior checking these two SStates:

SA || RAX := version_etc@()

SB || RAX := version_etc@()

Resulting values:
Value A:
E_app (F2 "version_etc" "") []
Value B:
E_app (F2 "version_etc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes main_185 -> main_185 and main_1851 -> main_1851 have been verified to do the same.

Label relationship:
label_32 <--> label_156
label_14 <--> label_155
stdout <--> stdout
main_178 <--> main_1844
label_18 <--> label_149
Version <--> Version
main_179 <--> main_1845
label_31 <--> label_154
label_35 <--> label_159
close_stdout <--> close_stdout
label_34 <--> label_158
label_29 <--> label_151
label_28 (0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(15,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(16,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
<--> label_152
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (52/87): "usage"
--------
.dot code for CFG of text section usage for Vanilla
diGraph usage_Vanilla{
	usage_0  [label="[usage,usage_12]"]
	usage_1  [label="[usage_13,usage_13]"]
	usage_2  [label="[usage_14,usage_19]"]
	usage_3  [label="[usage_20,usage_20]"]
	usage_4  [label="[usage_21,usage_23]"]
	usage_5  [label="[usage_24,usage_24]"]
	usage_6  [label="[usage_25,usage_29]"]
	usage_7  [label="[usage_30,usage_30]"]
	usage_8  [label="[usage_31,usage_33]"]
	usage_9  [label="[usage_34,usage_34]"]
	usage_10  [label="[usage_35,usage_36]"]
	usage_11  [label="[usage_37,usage_37]"]
	usage_12  [label="[usage_38,usage_40]"]
	usage_13  [label="[usage_41,usage_41]"]
	usage_14  [label="[usage_42,usage_43]"]
	usage_15  [label="[usage_44,usage_44]"]
	usage_16  [label="[usage_45,usage_47]"]
	usage_17  [label="[usage_48,usage_48]"]
	usage_18  [label="[usage_49,usage_53]"]
	usage_19  [label="[usage_54,usage_54]"]
	usage_20  [label="[usage_55,usage_55]"]
	usage_21  [label="[usage_56,usage_56]"]
	usage_22  [label="[usage_57,usage_57]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_4;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7;
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;
	usage_16 -> usage_17;
	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;

}
--------
--------
.dot code for CFG of text section usage for Randomized
diGraph usage_Randomized{
	usage_0  [label="[usage,usage_2451]"]
	usage_1  [label="[usage_2452,usage_2452]"]
	usage_2  [label="[usage_2453,usage_2458]"]
	usage_3  [label="[usage_2459,usage_2459]"]
	usage_4  [label="[usage_2460,usage_2462]"]
	usage_5  [label="[usage_2463,usage_2463]"]
	usage_6  [label="[usage_2464,usage_2468]"]
	usage_7  [label="[usage_2469,usage_2469]"]
	usage_8  [label="[usage_2470,usage_2472]"]
	usage_9  [label="[usage_2473,usage_2473]"]
	usage_10  [label="[usage_2474,usage_2475]"]
	usage_11  [label="[usage_2476,usage_2476]"]
	usage_12  [label="[usage_2477,usage_2479]"]
	usage_13  [label="[usage_2480,usage_2480]"]
	usage_14  [label="[usage_2481,usage_2482]"]
	usage_15  [label="[usage_2483,usage_2483]"]
	usage_16  [label="[usage_2484,usage_2486]"]
	usage_17  [label="[usage_2487,usage_2487]"]
	usage_18  [label="[usage_2488,usage_2492]"]
	usage_19  [label="[usage_2493,usage_2493]"]
	usage_20  [label="[usage_2494,usage_2494]"]
	usage_21  [label="[usage_2495,usage_2495]"]
	usage_22  [label="[usage_2496,usage_2496]"]

	usage_0 -> usage_1;
	usage_1 -> usage_2;
	usage_2 -> usage_3;
	usage_3 -> usage_4;
	usage_4 -> usage_5;
	usage_5 -> usage_6;
	usage_6 -> usage_7;
	usage_7 -> usage_8;
	usage_8 -> usage_9;
	usage_9 -> usage_10;
	usage_10 -> usage_11;
	usage_11 -> usage_12;
	usage_12 -> usage_13;
	usage_13 -> usage_14;
	usage_14 -> usage_15;
	usage_15 -> usage_16;
	usage_16 -> usage_17;
	usage_17 -> usage_18;
	usage_18 -> usage_19;
	usage_19 -> usage_20;
	usage_20 -> usage_21;
	usage_21 -> usage_22;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 

Symbolic Execution for Binary "Vanilla":
Current text section: "usage"
node 0:
RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_9,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: usage_15 + Var: program_name),8], RDX := Dereference: [(Var: usage_15 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_12,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: label_10,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_13,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_35 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_11,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_42 + Var: stdout),8]
node 15:
RAX := fputs_unlocked@()
node 16:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_15,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 17:
RAX := dcgettext@()
node 18:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_14,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 19:
RAX := __printf_chk@()
node 20:
RAX := emit_ancillary_info@()
node 21:
RDI := TakeBits: <31,0>(Reg: RBX)
node 22:
RAX := exit@()
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, 16 ----> 17, 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 

Symbolic Execution for Binary "Randomized":
Current text section: "usage"
node 0:
RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_185,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: usage_2454 + Var: program_name),8], RDX := Dereference: [(Var: usage_2454 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_187,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: label_186,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_189,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_2474 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_188,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
RDI := Reg: RAX, RSI := Dereference: [(Var: usage_2481 + Var: stdout),8]
node 15:
RAX := fputs_unlocked@()
node 16:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_190,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 17:
RAX := dcgettext@()
node 18:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_155,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 19:
RAX := __printf_chk@()
node 20:
RAX := emit_ancillary_info@()
node 21:
RDI := TakeBits: <31,0>(Reg: RBX)
node 22:
RAX := exit@()
--------

same_behavior for the nodes: usage -> usage_12 and usage -> usage_2451

same_behavior checking these two SStates:

SA || RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_9,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := TakeBits: <31,0>(Reg: RDI), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_185,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_9" 64) 4
Value B:
E_deref (E_var "label_185" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes usage -> usage_12 and usage -> usage_2451 have been verified to do the same.

same_behavior for the nodes: usage_13 -> usage_13 and usage_2452 -> usage_2452

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_13 -> usage_13 and usage_2452 -> usage_2452 have been verified to do the same.

same_behavior for the nodes: usage_14 -> usage_19 and usage_2453 -> usage_2458

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: usage_15 + Var: program_name),8], RDX := Dereference: [(Var: usage_15 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: usage_2454 + Var: program_name),8], RDX := Dereference: [(Var: usage_2454 + Var: program_name),8], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_15" 64,E_var "program_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_2454" 64,E_var "program_name" 64]) 8
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_15" 64,E_var "program_name" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_2454" 64,E_var "program_name" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_14 -> usage_19 and usage_2453 -> usage_2458 have been verified to do the same.

same_behavior for the nodes: usage_20 -> usage_20 and usage_2459 -> usage_2459

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_20 -> usage_20 and usage_2459 -> usage_2459 have been verified to do the same.

same_behavior for the nodes: usage_21 -> usage_23 and usage_2460 -> usage_2462

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_12,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_187,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_12" 64) 4
Value B:
E_deref (E_var "label_187" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_21 -> usage_23 and usage_2460 -> usage_2462 have been verified to do the same.

same_behavior for the nodes: usage_24 -> usage_24 and usage_2463 -> usage_2463

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_24 -> usage_24 and usage_2463 -> usage_2463 have been verified to do the same.

same_behavior for the nodes: usage_25 -> usage_29 and usage_2464 -> usage_2468

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: label_10,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Reg: RAX, RDI := Value: 1, RSI := Dereference: [Var: label_186,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_var "label_10" 64) 4
Value B:
E_deref (E_var "label_186" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_25 -> usage_29 and usage_2464 -> usage_2468 have been verified to do the same.

same_behavior for the nodes: usage_30 -> usage_30 and usage_2469 -> usage_2469

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_30 -> usage_30 and usage_2469 -> usage_2469 have been verified to do the same.

same_behavior for the nodes: usage_31 -> usage_33 and usage_2470 -> usage_2472

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_13,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_189,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_13" 64) 4
Value B:
E_deref (E_var "label_189" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_31 -> usage_33 and usage_2470 -> usage_2472 have been verified to do the same.

same_behavior for the nodes: usage_34 -> usage_34 and usage_2473 -> usage_2473

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_34 -> usage_34 and usage_2473 -> usage_2473 have been verified to do the same.

same_behavior for the nodes: usage_35 -> usage_36 and usage_2474 -> usage_2475

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_35 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_2474 + Var: stdout),8]

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_35" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_2474" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_35 -> usage_36 and usage_2474 -> usage_2475 have been verified to do the same.

same_behavior for the nodes: usage_37 -> usage_37 and usage_2476 -> usage_2476

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_37 -> usage_37 and usage_2476 -> usage_2476 have been verified to do the same.

same_behavior for the nodes: usage_38 -> usage_40 and usage_2477 -> usage_2479

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_11,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_188,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_11" 64) 4
Value B:
E_deref (E_var "label_188" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_38 -> usage_40 and usage_2477 -> usage_2479 have been verified to do the same.

same_behavior for the nodes: usage_41 -> usage_41 and usage_2480 -> usage_2480

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_41 -> usage_41 and usage_2480 -> usage_2480 have been verified to do the same.

same_behavior for the nodes: usage_42 -> usage_43 and usage_2481 -> usage_2482

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_42 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: usage_2481 + Var: stdout),8]

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "usage_42" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "usage_2481" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_42 -> usage_43 and usage_2481 -> usage_2482 have been verified to do the same.

same_behavior for the nodes: usage_44 -> usage_44 and usage_2483 -> usage_2483

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_44 -> usage_44 and usage_2483 -> usage_2483 have been verified to do the same.

same_behavior for the nodes: usage_45 -> usage_47 and usage_2484 -> usage_2486

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_15,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_190,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_15" 64) 4
Value B:
E_deref (E_var "label_190" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_45 -> usage_47 and usage_2484 -> usage_2486 have been verified to do the same.

same_behavior for the nodes: usage_48 -> usage_48 and usage_2487 -> usage_2487

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_48 -> usage_48 and usage_2487 -> usage_2487 have been verified to do the same.

same_behavior for the nodes: usage_49 -> usage_53 and usage_2488 -> usage_2492

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_14,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_155,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_14" 64) 4
Value B:
E_deref (E_var "label_155" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_49 -> usage_53 and usage_2488 -> usage_2492 have been verified to do the same.

same_behavior for the nodes: usage_54 -> usage_54 and usage_2493 -> usage_2493

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_54 -> usage_54 and usage_2493 -> usage_2493 have been verified to do the same.

same_behavior for the nodes: usage_55 -> usage_55 and usage_2494 -> usage_2494

same_behavior checking these two SStates:

SA || RAX := emit_ancillary_info@()

SB || RAX := emit_ancillary_info@()

Resulting values:
Value A:
E_app (F2 "emit_ancillary_info" "") []
Value B:
E_app (F2 "emit_ancillary_info" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_55 -> usage_55 and usage_2494 -> usage_2494 have been verified to do the same.

same_behavior for the nodes: usage_56 -> usage_56 and usage_2495 -> usage_2495

same_behavior checking these two SStates:

SA || RDI := TakeBits: <31,0>(Reg: RBX)

SB || RDI := TakeBits: <31,0>(Reg: RBX)

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RBX]
Value B:
E_app (TakeBits 31 0) [E_reg RBX]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_56 -> usage_56 and usage_2495 -> usage_2495 have been verified to do the same.

same_behavior for the nodes: usage_57 -> usage_57 and usage_2496 -> usage_2496

same_behavior checking these two SStates:

SA || RAX := exit@()

SB || RAX := exit@()

Resulting values:
Value A:
E_app (F2 "exit" "") []
Value B:
E_app (F2 "exit" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes usage_57 -> usage_57 and usage_2496 -> usage_2496 have been verified to do the same.

Label relationship:
label_14 <--> label_155
label_15 <--> label_190
usage_42 <--> usage_2481
label_11 <--> label_188
stdout <--> stdout
usage_35 <--> usage_2474
label_13 <--> label_189
label_10 <--> label_186
label_12 <--> label_187
program_name <--> program_name
usage_15 <--> usage_2454
 <--> 
label_9 <--> label_185

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (53/87): "rpl_nl_langinfo"
--------
.dot code for CFG of text section rpl_nl_langinfo for Vanilla
diGraph rpl_nl_langinfo_Vanilla{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo,rpl_nl_langinfo_3821]"]
	rpl_nl_langinfo_1  [label="[rpl_nl_langinfo_3822,rpl_nl_langinfo_3822]"]
	rpl_nl_langinfo_2  [label="[rpl_nl_langinfo_3822_ret,rpl_nl_langinfo_3822_ret]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_1;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;

}
--------
--------
.dot code for CFG of text section rpl_nl_langinfo for Randomized
diGraph rpl_nl_langinfo_Randomized{
	rpl_nl_langinfo_0  [label="[rpl_nl_langinfo,rpl_nl_langinfo_2591]"]
	rpl_nl_langinfo_1  [label="[rpl_nl_langinfo_2592,rpl_nl_langinfo_2592]"]
	rpl_nl_langinfo_2  [label="[rpl_nl_langinfo_2592_ret,rpl_nl_langinfo_2592_ret]"]

	rpl_nl_langinfo_0 -> rpl_nl_langinfo_1;
	rpl_nl_langinfo_1 -> rpl_nl_langinfo_2;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBit(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(10,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
s: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)
node 1:
RAX := nl_langinfo@()
node 2:
skip'
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_nl_langinfo"
node 0:
RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)
node 1:
RAX := nl_langinfo@()
node 2:
skip'
--------

same_behavior for the nodes: rpl_nl_langinfo -> rpl_nl_langinfo_3821 and rpl_nl_langinfo -> rpl_nl_langinfo_2591

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
SA || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)

SB || RAX := TakeBits: <31,0>((Reg: RDI - Value: 10200)), RCX := TakeBits: <31,0>((Reg: RDI + Value: 120898)), RDI := (if (TakeBits: <31,0>((Reg: RDI - Value: 10200)) < Value: 12) then TakeBits: <31,0>((Reg: RDI + Value: 120898)) else TakeBits: <31,0>(Reg: RDI))
SB || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 10200)),Value: 12)

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]
Resulting values:
Value A:
E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])
Value B:
E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 10200 64]],E_val 12 32]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 120898 64]]) (E_app (TakeBits 31 0) [E_reg RDI])
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo -> rpl_nl_langinfo_3821 and rpl_nl_langinfo -> rpl_nl_langinfo_2591 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_3822 -> rpl_nl_langinfo_3822 and rpl_nl_langinfo_2592 -> rpl_nl_langinfo_2592

same_behavior checking these two SStates:

SA || RAX := nl_langinfo@()

SB || RAX := nl_langinfo@()

Resulting values:
Value A:
E_app (F2 "nl_langinfo" "") []
Value B:
E_app (F2 "nl_langinfo" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_3822 -> rpl_nl_langinfo_3822 and rpl_nl_langinfo_2592 -> rpl_nl_langinfo_2592 have been verified to do the same.

same_behavior for the nodes: rpl_nl_langinfo_3822_ret -> rpl_nl_langinfo_3822_ret and rpl_nl_langinfo_2592_ret -> rpl_nl_langinfo_2592_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_nl_langinfo_3822_ret -> rpl_nl_langinfo_3822_ret and rpl_nl_langinfo_2592_ret -> rpl_nl_langinfo_2592_ret have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:

Succesful check!
Considering text section (54/87): "rpl_fseeko"
--------
.dot code for CFG of text section rpl_fseeko for Vanilla
diGraph rpl_fseeko_Vanilla{
	rpl_fseeko_0  [label="[rpl_fseeko_3802,rpl_fseeko_3804]"]
	rpl_fseeko_1  [label="[.label_284,rpl_fseeko_3809]"]
	rpl_fseeko_2  [label="[.label_283,.label_283]"]
	rpl_fseeko_3  [label="[rpl_fseeko_3793,rpl_fseeko_3793]"]
	rpl_fseeko_4  [label="[rpl_fseeko_3794,rpl_fseeko_3796]"]
	rpl_fseeko_5  [label="[rpl_fseeko_3797,rpl_fseeko_3797]"]
	rpl_fseeko_6  [label="[rpl_fseeko_3798,rpl_fseeko_3801]"]
	rpl_fseeko_7  [label="[rpl_fseeko_3781,rpl_fseeko_3782]"]
	rpl_fseeko_8  [label="[rpl_fseeko_3778,rpl_fseeko_3780]"]
	rpl_fseeko_9  [label="[.label_282,rpl_fseeko_3789]"]
	rpl_fseeko_10  [label="[rpl_fseeko_3790,rpl_fseeko_3790]"]
	rpl_fseeko_11  [label="[rpl_fseeko_3790_ret,rpl_fseeko_3790_ret]"]
	rpl_fseeko_12  [label="[rpl_fseeko,rpl_fseeko_3777]"]

	rpl_fseeko_0 -> rpl_fseeko_1;

	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_fseeko_11;

	rpl_fseeko_12 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_12 -> rpl_fseeko_8 [label="ZF"];
}
--------
--------
.dot code for CFG of text section rpl_fseeko for Randomized
diGraph rpl_fseeko_Randomized{
	rpl_fseeko_0  [label="[rpl_fseeko_4353,rpl_fseeko_4355]"]
	rpl_fseeko_1  [label="[.label_276,rpl_fseeko_4360]"]
	rpl_fseeko_2  [label="[.label_275,.label_275]"]
	rpl_fseeko_3  [label="[rpl_fseeko_4344,rpl_fseeko_4344]"]
	rpl_fseeko_4  [label="[rpl_fseeko_4345,rpl_fseeko_4347]"]
	rpl_fseeko_5  [label="[rpl_fseeko_4348,rpl_fseeko_4348]"]
	rpl_fseeko_6  [label="[rpl_fseeko_4349,rpl_fseeko_4352]"]
	rpl_fseeko_7  [label="[rpl_fseeko_4332,rpl_fseeko_4333]"]
	rpl_fseeko_8  [label="[rpl_fseeko_4329,rpl_fseeko_4331]"]
	rpl_fseeko_9  [label="[.label_274,rpl_fseeko_4340]"]
	rpl_fseeko_10  [label="[rpl_fseeko_4341,rpl_fseeko_4341]"]
	rpl_fseeko_11  [label="[rpl_fseeko_4341_ret,rpl_fseeko_4341_ret]"]
	rpl_fseeko_12  [label="[rpl_fseeko,rpl_fseeko_4328]"]

	rpl_fseeko_0 -> rpl_fseeko_1;

	rpl_fseeko_2 -> rpl_fseeko_3;
	rpl_fseeko_3 -> rpl_fseeko_4;
	rpl_fseeko_4 -> rpl_fseeko_5;
	rpl_fseeko_5 -> rpl_fseeko_6;
	rpl_fseeko_6 -> rpl_fseeko_1 [label="ZF"];
	rpl_fseeko_6 -> rpl_fseeko_0 [label="!ZF"];
	rpl_fseeko_7 -> rpl_fseeko_2 [label="ZF"];
	rpl_fseeko_7 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_8 -> rpl_fseeko_7 [label="ZF"];
	rpl_fseeko_9 -> rpl_fseeko_10;
	rpl_fseeko_10 -> rpl_fseeko_11;

	rpl_fseeko_12 -> rpl_fseeko_9 [label="!ZF"];
	rpl_fseeko_12 -> rpl_fseeko_8 [label="ZF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --ZF--> 1, 6 --!ZF--> 0, 7 --ZF--> 2, 7 --!ZF--> 9, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, , 12 --!ZF--> 9, 12 --ZF--> 8

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_fseeko"
node 0:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 2:
RDI := Reg: RBX
node 3:
RAX := fileno@()
node 4:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := lseek@()
node 6:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF :(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Reg: RSI),(10,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
= CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 10:
RAX := fseeko@()
node 11:
skip'
node 12:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

Starting Node: 12

Edges: 0 ----> 1, , 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 --ZF--> 1, 6 --!ZF--> 0, 7 --ZF--> 2, 7 --!ZF--> 9, 8 --!ZF--> 9, 8 --ZF--> 7, 9 ----> 10, 10 ----> 11, , 12 --!ZF--> 9, 12 --ZF--> 8

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_fseeko"
node 0:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 2:
RDI := Reg: RBX
node 3:
RAX := fileno@()
node 4:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)
node 5:
RAX := lseek@()
node 6:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 7:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 8:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 10:
RAX := fseeko@()
node 11:
skip'
node 12:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
--------

same_behavior for the nodes: rpl_fseeko -> rpl_fseeko_3777 and rpl_fseeko -> rpl_fseeko_4328

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

SB || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, R14 := TakeBits: <31,0>(Reg: RDX)
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDX]
Value B:
E_app (TakeBits 31 0) [E_reg RDX]
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko -> rpl_fseeko_3777 and rpl_fseeko -> rpl_fseeko_4328 have been verified to do the same.

same_behavior for the nodes: .label_282 -> rpl_fseeko_3789 and .label_274 -> rpl_fseeko_4340

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_282 -> rpl_fseeko_3789 and .label_274 -> rpl_fseeko_4340 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3790 -> rpl_fseeko_3790 and rpl_fseeko_4341 -> rpl_fseeko_4341

same_behavior checking these two SStates:

SA || RAX := fseeko@()

SB || RAX := fseeko@()

Resulting values:
Value A:
E_app (F2 "fseeko" "") []
Value B:
E_app (F2 "fseeko" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3790 -> rpl_fseeko_3790 and rpl_fseeko_4341 -> rpl_fseeko_4341 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3790_ret -> rpl_fseeko_3790_ret and rpl_fseeko_4341_ret -> rpl_fseeko_4341_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3790_ret -> rpl_fseeko_3790_ret and rpl_fseeko_4341_ret -> rpl_fseeko_4341_ret have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3778 -> rpl_fseeko_3780 and rpl_fseeko_4329 -> rpl_fseeko_4331

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

SB || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3778 -> rpl_fseeko_3780 and rpl_fseeko_4329 -> rpl_fseeko_4331 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3781 -> rpl_fseeko_3782 and rpl_fseeko_4332 -> rpl_fseeko_4333

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3781 -> rpl_fseeko_3782 and rpl_fseeko_4332 -> rpl_fseeko_4333 have been verified to do the same.

same_behavior for the nodes: .label_283 -> .label_283 and .label_275 -> .label_275

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_283 -> .label_283 and .label_275 -> .label_275 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3793 -> rpl_fseeko_3793 and rpl_fseeko_4344 -> rpl_fseeko_4344

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3793 -> rpl_fseeko_3793 and rpl_fseeko_4344 -> rpl_fseeko_4344 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3794 -> rpl_fseeko_3796 and rpl_fseeko_4345 -> rpl_fseeko_4347

same_behavior checking these two SStates:

SA || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)

SB || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX)

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3794 -> rpl_fseeko_3796 and rpl_fseeko_4345 -> rpl_fseeko_4347 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3797 -> rpl_fseeko_3797 and rpl_fseeko_4348 -> rpl_fseeko_4348

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3797 -> rpl_fseeko_3797 and rpl_fseeko_4348 -> rpl_fseeko_4348 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3798 -> rpl_fseeko_3801 and rpl_fseeko_4349 -> rpl_fseeko_4352

same_behavior checking these two SStates:

SA || RAX := Value: 4294967295, RCX := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || RAX := Value: 4294967295, RCX := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

Resulting values:
Value A:
E_val 4294967295 32
Value B:
E_val 4294967295 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3798 -> rpl_fseeko_3801 and rpl_fseeko_4349 -> rpl_fseeko_4352 have been verified to do the same.

same_behavior for the nodes: .label_284 -> rpl_fseeko_3809 and .label_276 -> rpl_fseeko_4360

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_284 -> rpl_fseeko_3809 and .label_276 -> rpl_fseeko_4360 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3802 -> rpl_fseeko_3804 and rpl_fseeko_4353 -> rpl_fseeko_4355

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app ((14,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == Var: RSP0 && RBP == Var: RBP0),(14,RSP == Var: RSP0 && RBP == Var: RBP0)])
Op ADD) [E_reg RBX,E_val 144 64]
E_app (Op ADD) [E_reg RBX,E_val 144 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_fseeko_3802 -> rpl_fseeko_3804 and rpl_fseeko_4353 -> rpl_fseeko_4355 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (55/87): "clear_ungetc_buffer_preserving_position"
--------
.dot code for CFG of text section clear_ungetc_buffer_preserving_position for Vanilla
diGraph clear_ungetc_buffer_preserving_position_Vanilla{
	clear_ungetc_buffer_preserving_position_0  [label="[clear_ungetc_buffer_preserving_position_3756,clear_ungetc_buffer_preserving_position_3756]"]
	clear_ungetc_buffer_preserving_position_1  [label="[rpl_fseeko_3802,rpl_fseeko_3804]"]
	clear_ungetc_buffer_preserving_position_2  [label="[.label_284,rpl_fseeko_3809]"]
	clear_ungetc_buffer_preserving_position_3  [label="[.label_283,.label_283]"]
	clear_ungetc_buffer_preserving_position_4  [label="[rpl_fseeko_3793,rpl_fseeko_3793]"]
	clear_ungetc_buffer_preserving_position_5  [label="[rpl_fseeko_3794,rpl_fseeko_3796]"]
	clear_ungetc_buffer_preserving_position_6  [label="[rpl_fseeko_3797,rpl_fseeko_3797]"]
	clear_ungetc_buffer_preserving_position_7  [label="[rpl_fseeko_3798,rpl_fseeko_3801]"]
	clear_ungetc_buffer_preserving_position_8  [label="[rpl_fseeko_3781,rpl_fseeko_3782]"]
	clear_ungetc_buffer_preserving_position_9  [label="[rpl_fseeko_3778,rpl_fseeko_3780]"]
	clear_ungetc_buffer_preserving_position_10  [label="[.label_282,rpl_fseeko_3789]"]
	clear_ungetc_buffer_preserving_position_11  [label="[rpl_fseeko_3790,rpl_fseeko_3790]"]
	clear_ungetc_buffer_preserving_position_12  [label="[rpl_fseeko_3790_ret,rpl_fseeko_3790_ret]"]
	clear_ungetc_buffer_preserving_position_13  [label="[.label_281,rpl_fseeko_3777]"]
	clear_ungetc_buffer_preserving_position_14  [label="[clear_ungetc_buffer_preserving_position,clear_ungetc_buffer_preserving_position_3755]"]


	clear_ungetc_buffer_preserving_position_1 -> clear_ungetc_buffer_preserving_position_2;

	clear_ungetc_buffer_preserving_position_3 -> clear_ungetc_buffer_preserving_position_4;
	clear_ungetc_buffer_preserving_position_4 -> clear_ungetc_buffer_preserving_position_5;
	clear_ungetc_buffer_preserving_position_5 -> clear_ungetc_buffer_preserving_position_6;
	clear_ungetc_buffer_preserving_position_6 -> clear_ungetc_buffer_preserving_position_7;
	clear_ungetc_buffer_preserving_position_7 -> clear_ungetc_buffer_preserving_position_2 [label="ZF"];
	clear_ungetc_buffer_preserving_position_7 -> clear_ungetc_buffer_preserving_position_1 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_8 -> clear_ungetc_buffer_preserving_position_3 [label="ZF"];
	clear_ungetc_buffer_preserving_position_8 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_9 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_9 -> clear_ungetc_buffer_preserving_position_8 [label="ZF"];
	clear_ungetc_buffer_preserving_position_10 -> clear_ungetc_buffer_preserving_position_11;
	clear_ungetc_buffer_preserving_position_11 -> clear_ungetc_buffer_preserving_position_12;

	clear_ungetc_buffer_preserving_position_13 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_13 -> clear_ungetc_buffer_preserving_position_9 [label="ZF"];
	clear_ungetc_buffer_preserving_position_14 -> clear_ungetc_buffer_preserving_position_13 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_14 -> clear_ungetc_buffer_preserving_position_0 [label="ZF"];
}
--------
--------
.dot code for CFG of text section clear_ungetc_buffer_preserving_position for Randomized
diGraph clear_ungetc_buffer_preserving_position_Randomized{
	clear_ungetc_buffer_preserving_position_0  [label="[clear_ungetc_buffer_preserving_position_1927,clear_ungetc_buffer_preserving_position_1927]"]
	clear_ungetc_buffer_preserving_position_1  [label="[rpl_fseeko_4353,rpl_fseeko_4355]"]
	clear_ungetc_buffer_preserving_position_2  [label="[.label_276,rpl_fseeko_4360]"]
	clear_ungetc_buffer_preserving_position_3  [label="[.label_275,.label_275]"]
	clear_ungetc_buffer_preserving_position_4  [label="[rpl_fseeko_4344,rpl_fseeko_4344]"]
	clear_ungetc_buffer_preserving_position_5  [label="[rpl_fseeko_4345,rpl_fseeko_4347]"]
	clear_ungetc_buffer_preserving_position_6  [label="[rpl_fseeko_4348,rpl_fseeko_4348]"]
	clear_ungetc_buffer_preserving_position_7  [label="[rpl_fseeko_4349,rpl_fseeko_4352]"]
	clear_ungetc_buffer_preserving_position_8  [label="[rpl_fseeko_4332,rpl_fseeko_4333]"]
	clear_ungetc_buffer_preserving_position_9  [label="[rpl_fseeko_4329,rpl_fseeko_4331]"]
	clear_ungetc_buffer_preserving_position_10  [label="[.label_274,rpl_fseeko_4340]"]
	clear_ungetc_buffer_preserving_position_11  [label="[rpl_fseeko_4341,rpl_fseeko_4341]"]
	clear_ungetc_buffer_preserving_position_12  [label="[rpl_fseeko_4341_ret,rpl_fseeko_4341_ret]"]
	clear_ungetc_buffer_preserving_position_13  [label="[.label_161,rpl_fseeko_4328]"]
	clear_ungetc_buffer_preserving_position_14  [label="[clear_ungetc_buffer_preserving_position,clear_ungetc_buffer_preserving_position_1926]"]


	clear_ungetc_buffer_preserving_position_1 -> clear_ungetc_buffer_preserving_position_2;

	clear_ungetc_buffer_preserving_position_3 -> clear_ungetc_buffer_preserving_position_4;
	clear_ungetc_buffer_preserving_position_4 -> clear_ungetc_buffer_preserving_position_5;
	clear_ungetc_buffer_preserving_position_5 -> clear_ungetc_buffer_preserving_position_6;
	clear_ungetc_buffer_preserving_position_6 -> clear_ungetc_buffer_preserving_position_7;
	clear_ungetc_buffer_preserving_position_7 -> clear_ungetc_buffer_preserving_position_2 [label="ZF"];
	clear_ungetc_buffer_preserving_position_7 -> clear_ungetc_buffer_preserving_position_1 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_8 -> clear_ungetc_buffer_preserving_position_3 [label="ZF"];
	clear_ungetc_buffer_preserving_position_8 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_9 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_9 -> clear_ungetc_buffer_preserving_position_8 [label="ZF"];
	clear_ungetc_buffer_preserving_position_10 -> clear_ungetc_buffer_preserving_position_11;
	clear_ungetc_buffer_preserving_position_11 -> clear_ungetc_buffer_preserving_position_12;

	clear_ungetc_buffer_preserving_position_13 -> clear_ungetc_buffer_preserving_position_10 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_13 -> clear_ungetc_buffer_preserving_position_9 [label="ZF"];
	clear_ungetc_buffer_preserving_position_14 -> clear_ungetc_buffer_preserving_position_13 [label="!ZF"];
	clear_ungetc_buffer_preserving_position_14 -> clear_ungetc_buffer_preserving_position_0 [label="ZF"];
}
--------
Starting Node: 14

Edges: , 1 ----> 2, , 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --ZF--> 2, 7 --!ZF--> 1, 8 --ZF--> 3, 8 --!ZF--> 10, 9 --!ZF--> 10, 9 --ZF--> 8, 10 ----> 11, 11 ----> 12, , 13 --!ZF--> 10, 13 --ZF--> 9, 14 --!ZF--> 13, 14 --ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "clear_ungetc_buffer_preserving_position"
node 0:
skip'
node 1:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 3:
RDI := Reg: RBX
node 4:
RAX := fileno@()
node 5:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
node 6:
RAX := lseek@()
node 7:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,V(14,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Value: 0),(11,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(12,RSP == Var: RSP0 && RBP == Dereference: [(Var: RSP0 - Value: 8),8]),(13,RSP == Var: RSP0 && RBP == Var: RBP0),(14,RSP == Var: RSP0 && RBP == Var: RBP0)])
alue: 18446744073709551615)
node 8:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 9:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 10:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, RSI := Value: 0, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 11:
RAX := fseeko@()
node 12:
skip'
node 13:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, RDX := Value: 1, RSI := Value: 0, R14 := Value: 1
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
node 14:
ZF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1)
--------

Starting Node: 14

Edges: , 1 ----> 2, , 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 --ZF--> 2, 7 --!ZF--> 1, 8 --ZF--> 3, 8 --!ZF--> 10, 9 --!ZF--> 10, 9 --ZF--> 8, 10 ----> 11, 11 ----> 12, , 13 --!ZF--> 10, 13 --ZF--> 9, 14 --!ZF--> 13, 14 --ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "clear_ungetc_buffer_preserving_position"
node 0:
skip'
node 1:
RAX := Value: 0
[Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 3:
RDI := Reg: RBX
node 4:
RAX := fileno@()
node 5:
RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0
node 6:
RAX := lseek@()
node 7:
RAX := Value: 4294967295, RCX := Reg: RAX
ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)
node 8:
ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)
node 9:
RAX := Dereference: [(Reg: RBX + Value: 40),8]
ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])
node 10:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, RSI := Value: 0, R14 := Dereference: [(Var: RSP0 - Value: 16),8]
node 11:
RAX := fseeko@()
node 12:
skip'
node 13:
RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, RDX := Value: 1, RSI := Value: 0, R14 := Value: 1
[(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])
node 14:
ZF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1)
--------

same_behavior for the nodes: clear_ungetc_buffer_preserving_position -> clear_ungetc_buffer_preserving_position_3755 and clear_ungetc_buffer_preserving_position -> clear_ungetc_buffer_preserving_position_1926

same_behavior checking these two SStates:

SA || ZF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1)

SB || ZF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), CF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), SF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), OF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1), PF := TEST(Dereference: [(Reg: RDI + Value: 1),1],Value: 1)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes clear_ungetc_buffer_preserving_position -> clear_ungetc_buffer_preserving_position_3755 and clear_ungetc_buffer_preserving_position -> clear_ungetc_buffer_preserving_position_1926 have been verified to do the same.

same_behavior for the nodes: .label_281 -> rpl_fseeko_3777 and .label_161 -> rpl_fseeko_4328

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, RDX := Value: 1, RSI := Value: 0, R14 := Value: 1
SA || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

SB || RAX := Dereference: [(Reg: RDI + Value: 16),8], RBX := Reg: RDI, RDX := Value: 1, RSI := Value: 0, R14 := Value: 1
SB || [(Var: RSP0 - Value: 8),8] := Var: RBP0, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), CF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), SF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), OF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8]), PF := CMP(Dereference: [(Reg: RDI + Value: 16),8],Dereference: [(Reg: RDI + Value: 8),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RDI,E_val 16 64]) 8
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_var "RBP0" 64
E_var "RBP0" 64
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_281 -> rpl_fseeko_3777 and .label_161 -> rpl_fseeko_4328 have been verified to do the same.

same_behavior for the nodes: .label_282 -> rpl_fseeko_3789 and .label_274 -> rpl_fseeko_4340

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, RSI := Value: 0, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], RDX := TakeBits: <31,0>(Reg: R14), RDI := Reg: RBX, RSI := Value: 0, R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_282 -> rpl_fseeko_3789 and .label_274 -> rpl_fseeko_4340 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3790 -> rpl_fseeko_3790 and rpl_fseeko_4341 -> rpl_fseeko_4341

same_behavior checking these two SStates:

SA || RAX := fseeko@()

SB || RAX := fseeko@()

Resulting values:
Value A:
E_app (F2 "fseeko" "") []
Value B:
E_app (F2 "fseeko" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3790 -> rpl_fseeko_3790 and rpl_fseeko_4341 -> rpl_fseeko_4341 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3790_ret -> rpl_fseeko_3790_ret and rpl_fseeko_4341_ret -> rpl_fseeko_4341_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3790_ret -> rpl_fseeko_3790_ret and rpl_fseeko_4341_ret -> rpl_fseeko_4341_ret have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3778 -> rpl_fseeko_3780 and rpl_fseeko_4329 -> rpl_fseeko_4331

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

SB || RAX := Dereference: [(Reg: RBX + Value: 40),8]
SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), CF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), SF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), OF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8]), PF := CMP(Dereference: [(Reg: RBX + Value: 40),8],Dereference: [(Reg: RBX + Value: 32),8])

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 40 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3778 -> rpl_fseeko_3780 and rpl_fseeko_4329 -> rpl_fseeko_4331 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3781 -> rpl_fseeko_3782 and rpl_fseeko_4332 -> rpl_fseeko_4333

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), CF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), SF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), OF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0), PF := CMP(Dereference: [(Reg: RBX + Value: 72),8],Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3781 -> rpl_fseeko_3782 and rpl_fseeko_4332 -> rpl_fseeko_4333 have been verified to do the same.

same_behavior for the nodes: .label_283 -> .label_283 and .label_275 -> .label_275

same_behavior checking these two SStates:

SA || RDI := Reg: RBX

SB || RDI := Reg: RBX

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_283 -> .label_283 and .label_275 -> .label_275 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3793 -> rpl_fseeko_3793 and rpl_fseeko_4344 -> rpl_fseeko_4344

same_behavior checking these two SStates:

SA || RAX := fileno@()

SB || RAX := fileno@()

Resulting values:
Value A:
E_app (F2 "fileno" "") []
Value B:
E_app (F2 "fileno" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3793 -> rpl_fseeko_3793 and rpl_fseeko_4344 -> rpl_fseeko_4344 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3794 -> rpl_fseeko_3796 and rpl_fseeko_4345 -> rpl_fseeko_4347

same_behavior checking these two SStates:

SA || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0

SB || RDX := TakeBits: <31,0>(Reg: R14), RDI := TakeBits: <31,0>(Reg: RAX), RSI := Value: 0

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg R14]
Value B:
E_app (TakeBits 31 0) [E_reg R14]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RAX]
Value B:
E_app (TakeBits 31 0) [E_reg RAX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3794 -> rpl_fseeko_3796 and rpl_fseeko_4345 -> rpl_fseeko_4347 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3797 -> rpl_fseeko_3797 and rpl_fseeko_4348 -> rpl_fseeko_4348

same_behavior checking these two SStates:

SA || RAX := lseek@()

SB || RAX := lseek@()

Resulting values:
Value A:
E_app (F2 "lseek" "") []
Value B:
E_app (F2 "lseek" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3797 -> rpl_fseeko_3797 and rpl_fseeko_4348 -> rpl_fseeko_4348 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3798 -> rpl_fseeko_3801 and rpl_fseeko_4349 -> rpl_fseeko_4352

same_behavior checking these two SStates:

SA || RAX := Value: 4294967295, RCX := Reg: RAX
SA || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: RAX,Value: 18446744073709551615)

SB || RAX := Value: 4294967295, RCX := Reg: RAX
SB || ZF := CMP(Reg: RAX,Value: 18446744073709551615), CF := CMP(Reg: RAX,Value: 18446744073709551615), SF := CMP(Reg: RAX,Value: 18446744073709551615), OF := CMP(Reg: RAX,Value: 18446744073709551615), PF := CMP(Reg: R(7,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(7,fromList [(0,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
AX,Value: 18446744073709551615)

Resulting values:
Value A:
E_val 4294967295 32
Value B:
E_val 4294967295 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_fseeko_3798 -> rpl_fseeko_3801 and rpl_fseeko_4349 -> rpl_fseeko_4352 have been verified to do the same.

same_behavior for the nodes: .label_284 -> rpl_fseeko_3809 and .label_276 -> rpl_fseeko_4360

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_284 -> rpl_fseeko_3809 and .label_276 -> rpl_fseeko_4360 have been verified to do the same.

same_behavior for the nodes: rpl_fseeko_3802 -> rpl_fseeko_3804 and rpl_fseeko_4353 -> rpl_fseeko_4355

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || [Reg: RBX,1] := AND(Dereference: [Reg: RBX,1],Value: 239), [(Reg: RBX + Value: 144),8] := Reg: RCX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RBX
E_reg RBX
(v1 := v2):
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
E_app (Op AND) [E_deref (E_reg RBX) 1,E_val 239 8]
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RBX,E_val 144 64]
E_app (Op ADD) [E_reg RBX,E_val 144 64]
(v1 := v2):
E_reg RCX
E_reg RCX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_fseeko_3802 -> rpl_fseeko_3804 and rpl_fseeko_4353 -> rpl_fseeko_4355 have been verified to do the same.

same_behavior for the nodes: clear_ungetc_buffer_preserving_position_3756 -> clear_ungetc_buffer_preserving_position_3756 and clear_ungetc_buffer_preserving_position_1927 -> clear_ungetc_buffer_preserving_position_1927

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes clear_ungetc_buffer_preserving_position_3756 -> clear_ungetc_buffer_preserving_position_3756 and clear_ungetc_buffer_preserving_position_1927 -> clear_ungetc_buffer_preserving_position_1927 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (56/87): "hard_locale"
--------
.dot code for CFG of text section hard_locale for Vanilla
diGraph hard_locale_Vanilla{
	hard_locale_0  [label="[hard_locale_3639,hard_locale_3640]"]
	hard_locale_1  [label="[.label_272,.label_272]"]
	hard_locale_2  [label="[.label_275,hard_locale_3643]"]
	hard_locale_3  [label="[hard_locale_3644,hard_locale_3644]"]
	hard_locale_4  [label="[hard_locale_3645,hard_locale_3646]"]
	hard_locale_5  [label="[hard_locale_3637,hard_locale_3638]"]
	hard_locale_6  [label="[.label_273,hard_locale_3652]"]
	hard_locale_7  [label="[hard_locale,hard_locale_3632]"]
	hard_locale_8  [label="[hard_locale_3633,hard_locale_3633]"]
	hard_locale_9  [label="[hard_locale_3634,hard_locale_3636]"]

	hard_locale_0 -> hard_locale_1 [label="ZF"];
	hard_locale_0 -> hard_locale_2 [label="!ZF"];
	hard_locale_1 -> hard_locale_6;
	hard_locale_2 -> hard_locale_3;
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_6 [label="!ZF"];
	hard_locale_4 -> hard_locale_1 [label="ZF"];
	hard_locale_5 -> hard_locale_2 [label="!ZF"];
	hard_locale_5 -> hard_locale_0 [label="ZF"];

	hard_locale_7 -> hard_locale_8;
	hard_locale_8 -> hard_locale_9;
	hard_locale_9 -> hard_locale_6 [label="ZF"];
	hard_locale_9 -> hard_locale_5 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section hard_locale for Randomized
diGraph hard_locale_Randomized{
	hard_locale_0  [label="[hard_locale_4501,hard_locale_4502]"]
	hard_locale_1  [label="[.label_281,.label_281]"]
	hard_locale_2  [label="[.label_284,hard_locale_4505]"]
	hard_locale_3  [label="[hard_locale_4506,hard_locale_4506]"]
	hard_locale_4  [label="[hard_locale_4507,hard_locale_4508]"]
	hard_locale_5  [label="[hard_locale_4499,hard_locale_4500]"]
	hard_locale_6  [label="[.label_282,hard_locale_4514]"]
	hard_locale_7  [label="[hard_locale,hard_locale_4494]"]
	hard_locale_8  [label="[hard_locale_4495,hard_locale_4495]"]
	hard_locale_9  [label="[hard_locale_4496,hard_locale_4498]"]

	hard_locale_0 -> hard_locale_1 [label="ZF"];
	hard_locale_0 -> hard_locale_2 [label="!ZF"];
	hard_locale_1 -> hard_locale_6;
	hard_locale_2 -> hard_locale_3;
	hard_locale_3 -> hard_locale_4;
	hard_locale_4 -> hard_locale_6 [label="!ZF"];
	hard_locale_4 -> hard_locale_1 [label="ZF"];
	hard_locale_5 -> hard_locale_2 [label="!ZF"];
	hard_locale_5 -> hard_locale_0 [label="ZF"];

	hard_locale_7 -> hard_locale_8;
	hard_locale_8 -> hard_locale_9;
	hard_locale_9 -> hard_locale_6 [label="ZF"];
	hard_locale_9 -> hard_locale_5 [label="!ZF"];
}
--------
Starting Node: 7

Edges: 0 --ZF--> 1, 0 --!ZF--> 2, 1 ----> 6, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --!ZF--> 2, 5 --ZF--> 0, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 5

Symbolic Execution for Binary "Vanilla":
Current text section: "hard_locale"
node 0:
ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)
node 1:
RBX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := Reg: RAX, RSI := Dereference: [Var: label_274,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)
node 6:
RAX := TakeBits: <31,0>(Reg: RBX), RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 7:
RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := setlocale@()
node 9:
RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

Starting Node: 7

Edges: 0 --ZF--> 1, 0 --!ZF--> 2, 1 ----> 6, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 6, 4 --ZF--> 1, 5 --!ZF--> 2, 5 --ZF--> 0, , 7 ----> 8, 8 ----> 9, 9 --ZF--> 6, 9 --!ZF--> 5

Symbolic Execution for Binary "Randomized":
Current text section: "hard_locale"
node 0:
ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)
node 1:
RBX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := Reg: RAX, RSI := Dereference: [Var: label_283,4]
node 3:
RAX := strcmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)
node 6:
RAX := TakeBits: <31,0>(Reg: RBX), RBX := Dereference: [(Var: RSP0 - Value: 8),8]
node 7:
RSI := Value: 0
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
RAX := setlocale@()
node 9:
RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
--------

same_behavior for the nodes: hard_locale -> hard_locale_3632 and hard_locale -> hard_locale_4494

same_behavior checking these two SStates:

SA || RSI := Value: 0
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RSI := Value: 0
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes hard_locale -> hard_locale_3632 and hard_locale -> hard_locale_4494 have been verified to do the same.

same_behavior for the nodes: hard_locale_3633 -> hard_locale_3633 and hard_locale_4495 -> hard_locale_4495

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3633 -> hard_locale_3633 and hard_locale_4495 -> hard_locale_4495 have been verified to do the same.

same_behavior for the nodes: hard_locale_3634 -> hard_locale_3636 and hard_locale_4496 -> hard_locale_4498

same_behavior checking these two SStates:

SA || RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || RBX := (TakeBits: <63,8>(Reg: RBX) . Value: 1)
SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_val 1 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RBX],E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3634 -> hard_locale_3636 and hard_locale_4496 -> hard_locale_4498 have been verified to do the same.

same_behavior for the nodes: .label_273 -> hard_locale_3652 and .label_282 -> hard_locale_4514

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>(Reg: RBX), RBX := Dereference: [(Var: RSP0 - Value: 8),8]

SB || RAX := TakeBits: <31,0>(Reg: RBX), RBX := Dereference: [(Var: RSP0 - Value: 8),8]

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RBX]
Value B:
E_app (TakeBits 31 0) [E_reg RBX]
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_273 -> hard_locale_3652 and .label_282 -> hard_locale_4514 have been verified to do the same.

same_behavior for the nodes: hard_locale_3637 -> hard_locale_3638 and hard_locale_4499 -> hard_locale_4500

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)

SB || ZF := CMP(Dereference: [Reg: RAX,1],Value: 67), CF := CMP(Dereference: [Reg: RAX,1],Value: 67), SF := CMP(Dereference: [Reg: RAX,1],Value: 67), OF := CMP(Dereference: [Reg: RAX,1],Value: 67), PF := CMP(Dereference: [Reg: RAX,1],Value: 67)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3637 -> hard_locale_3638 and hard_locale_4499 -> hard_locale_4500 have been verified to do the same.

same_behavior for the nodes: .label_275 -> hard_locale_3643 and .label_284 -> hard_locale_4505

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [Var: label_274,4]

SB || RDI := Reg: RAX, RSI := Dereference: [Var: label_283,4]

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_274" 64) 4
Value B:
E_deref (E_var "label_283" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_275 -> hard_locale_3643 and .label_284 -> hard_locale_4505 have been verified to do the same.

same_behavior for the nodes: hard_locale_3644 -> hard_locale_3644 and hard_locale_4506 -> hard_locale_4506

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3644 -> hard_locale_3644 and hard_locale_4506 -> hard_locale_4506 have been verified to do the same.

same_behavior for the nodes: hard_locale_3645 -> hard_locale_3646 and hard_locale_4507 -> hard_locale_4508

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3645 -> hard_locale_3646 and hard_locale_4507 -> hard_locale_4508 have been verified to do the same.

same_behavior for the nodes: .label_272 -> .label_272 and .label_281 -> .label_281

same_behavior checking these two SStates:

SA || RBX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_272 -> .label_272 and .label_281 -> .label_281 have been verified to do the same.

same_behavior for the nodes: hard_locale_3639 -> hard_locale_3640 and hard_locale_4501 -> hard_locale_4502

same_behavior checking these two SStates:

SA || ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0)

SB || ZF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), CF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), SF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), OF := CMP(Dereference: [(Reg: RAX + Value: 1),1],Value: 0), PF := CMP(Dereference: [(Reg: RAX + Value: 1),1](0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
,Value: 0)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes hard_locale_3639 -> hard_locale_3640 and hard_locale_4501 -> hard_locale_4502 have been verified to do the same.

Label relationship:
label_274 <--> label_283
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (57/87): "c_toupper"
--------
.dot code for CFG of text section c_toupper for Vanilla
diGraph c_toupper_Vanilla{
	c_toupper_0  [label="[c_toupper,c_toupper_3575]"]


}
--------
--------
.dot code for CFG of text section c_toupper for Randomized
diGraph c_toupper_Randomized{
	c_toupper_0  [label="[c_toupper,c_toupper_1909]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_toupper"
node 0:
RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 97)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI - Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 97))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_toupper"
node 0:
RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 97)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI - Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 97))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26)
--------

same_behavior for the nodes: c_toupper -> c_toupper_3575 and c_toupper -> c_toupper_1909

same_behavior checking these two SStates:

SA || RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 97)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI - Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 97))
SA || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26)

SB || RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 97)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI - Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 97))
SB || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 97)),Value: 26)

Resulting values:
Value A:
E_ite (E_app (F ≥) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 97 64]],E_val 26 32]) (E_app (TakeBits 31 0) [E_reg RDI]) (E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 32 64]])
Value B:
E_ite (E_app (F ≥) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 97 64]],E_val 26 32]) (E_app (TakeBits 31 0) [E_reg RDI]) (E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 32 64]])
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 97 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 97 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_toupper -> c_toupper_3575 and c_toupper -> c_toupper_1909 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (58/87): "c_tolower"
--------
.dot code for CFG of text section c_tolower for Vanilla
diGraph c_tolower_Vanilla{
	c_tolower_0  [label="[c_tolower,c_tolower_3562]"]


}
--------
--------
.dot code for CFG of text section c_tolower for Randomized
diGraph c_tolower_Randomized{
	c_tolower_0  [label="[c_tolower,c_tolower_188]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_tolower"
node 0:
RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 65)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI + Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_tolower"
node 0:
RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 65)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI + Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26)
--------

same_behavior for the nodes: c_tolower -> c_tolower_3562 and c_tolower -> c_tolower_188

same_behavior checking these two SStates:

SA || RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 65)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI + Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
SA || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26)

SB || RAX := (if (TakeBits: <31,0>((Reg: RDI - Value: 65)) ≥ Value: 26) then TakeBits: <31,0>(Reg: RDI) else TakeBits: <31,0>((Reg: RDI + Value: 32))), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
SB || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 26)

Resulting values:
Value A:
E_ite (E_app (F ≥) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]],E_val 26 32]) (E_app (TakeBits 31 0) [E_reg RDI]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 32 64]])
Value B:
E_ite (E_app (F ≥) [E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]],E_val 26 32]) (E_app (TakeBits 31 0) [E_reg RDI]) (E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg RDI,E_val 32 64]])
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_tolower -> c_tolower_3562 and c_tolower -> c_tolower_188 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (59/87): "c_isxdigit"
--------
.dot code for CFG of text section c_isxdigit for Vanilla
diGraph c_isxdigit_Vanilla{
	c_isxdigit_0  [label="[c_isxdigit_3542,c_isxdigit_3546]"]
	c_isxdigit_1  [label="[.label_269,c_isxdigit_3549]"]
	c_isxdigit_2  [label="[c_isxdigit,c_isxdigit_3541]"]



	c_isxdigit_2 -> c_isxdigit_1 [label="!CF && !ZF"];
	c_isxdigit_2 -> c_isxdigit_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section c_isxdigit for Randomized
diGraph c_isxdigit_Randomized{
	c_isxdigit_0  [label="[c_isxdigit_388,c_isxdigit_392]"]
	c_isxdigit_1  [label="[.label_18,c_isxdigit_395]"](2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])

	c_isxdigit_2  [label="[c_isxdigit,c_isxdigit_387]"]



	c_isxdigit_2 -> c_isxdigit_1 [label="!CF && !ZF"];
	c_isxdigit_2 -> c_isxdigit_0 [label="CF || ZF"];
}
--------
Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isxdigit"
node 0:
RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54)
--------

Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "c_isxdigit"
node 0:
RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54)
--------

same_behavior for the nodes: c_isxdigit -> c_isxdigit_3541 and c_isxdigit -> c_isxdigit_387

same_behavior checking these two SStates:

SA || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54)

SB || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 54)

Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isxdigit -> c_isxdigit_3541 and c_isxdigit -> c_isxdigit_387 have been verified to do the same.

same_behavior for the nodes: .label_269 -> c_isxdigit_3549 and .label_18 -> c_isxdigit_395

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_269 -> c_isxdigit_3549 and .label_18 -> c_isxdigit_395 have been verified to do the same.

same_behavior for the nodes: c_isxdigit_3542 -> c_isxdigit_3546 and c_isxdigit_388 -> c_isxdigit_392

same_behavior checking these two SStates:

SA || RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SA || ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)

SB || RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SB || ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 35465847073801215,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)

Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_app (Op SHR) [E_app (F zextend) [E_val 35465847073801215 64,E_val 64 (-1)],E_app (TakeBits 7 0) [E_reg RDI]]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_app (Op SHR) [E_app (F zextend) [E_val 35465847073801215 64,E_val 64 (-1)],E_app (TakeBits 7 0) [E_reg RDI]]],E_val 1 32]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isxdigit_3542 -> c_isxdigit_3546 and c_isxdigit_388 -> c_isxdigit_392 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (60/87): "c_isupper"
--------
.dot code for CFG of text section c_isupper for Vanilla
diGraph c_isupper_Vanilla{
	c_isupper_0  [label="[c_isupper,c_isupper_3530]"]


}
--------
--------
.dot code for CFG of text section c_isupper for Randomized
diGraph c_isupper_Randomized{
	c_isupper_0  [label="[c_isupper,c_isupper_2409]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isupper"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 65) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isupper"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 65) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 6(2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
5)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26)
--------

same_behavior for the nodes: c_isupper -> c_isupper_3530 and c_isupper -> c_isupper_2409

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 65) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 65) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 26)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32],E_val 26 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32],E_val 26 32]) (E_val 1 8) (E_val 0 8)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isupper -> c_isupper_3530 and c_isupper -> c_isupper_2409 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (61/87): "c_isspace"
--------
.dot code for CFG of text section c_isspace for Vanilla
diGraph c_isspace_Vanilla{
	c_isspace_0  [label="[c_isspace_3511,c_isspace_3515]"]
	c_isspace_1  [label="[.label_268,c_isspace_3518]"]
	c_isspace_2  [label="[c_isspace,c_isspace_3510]"]



	c_isspace_2 -> c_isspace_1 [label="!CF && !ZF"];
	c_isspace_2 -> c_isspace_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section c_isspace for Randomized
diGraph c_isspace_Randomized{
	c_isspace_0  [label="[c_isspace_4098,c_isspace_4102]"]
	c_isspace_1  [label="[.label_267,c_isspace_4105]"]
	c_isspace_2  [label="[c_isspace,c_isspace_4097]"]



	c_isspace_2 -> c_isspace_1 [label="!CF && !ZF"];
	c_isspace_2 -> c_isspace_0 [label="CF || ZF"];
}
--------
Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isspace"
node 0:
RAX := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), CF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), SF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), OF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), PF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1)
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23)
--------

Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "c_isspace"
node 0:
RAX := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), CF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), SF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), OF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), PF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1)
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23)
--------

same_behavior for the nodes: c_isspace -> c_isspace_3510 and c_isspace -> c_isspace_4097

same_behavior checking these two SStates:

SA || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23)

SB || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 18446744073709551607),Value: 23)

Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 18446744073709551607 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 18446744073709551607 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isspace -> c_isspace_3510 and c_isspace -> c_isspace_4097 have been verified to do the same.

same_behavior for the nodes: .label_268 -> c_isspace_3518 and .label_267 -> c_isspace_4105

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_268 -> c_isspace_3518 and .label_267 -> c_isspace_4105 have been verified to do the same.

same_behavior for the nodes: c_isspace_3511 -> c_isspace_3515 and c_isspace_4098 -> c_isspace_4102

same_behavior checking these two SStates:

SA || RAX := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SA || ZF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), CF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), SF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), OF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
Value: 1), PF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1)

SB || RAX := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SB || ZF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), CF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), SF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), OF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1), PF := AND(SHR(zextend(Value: 8388639,Value: 32),TakeBits: <7,0>(Reg: RDI)),Value: 1)

Resulting values:
Value A:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_val 8388639 32,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDI]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_val 8388639 32,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RDI]],E_val 1 32]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isspace_3511 -> c_isspace_3515 and c_isspace_4098 -> c_isspace_4102 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (62/87): "c_isprint"
--------
.dot code for CFG of text section c_isprint for Vanilla
diGraph c_isprint_Vanilla{
	c_isprint_0  [label="[c_isprint,c_isprint_3481]"]


}
--------
--------
.dot code for CFG of text section c_isprint for Randomized
diGraph c_isprint_Randomized{
	c_isprint_0  [label="[c_isprint,c_isprint_369]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isprint"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 32) < Value: 95) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 32)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isprint"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 32) < Value: 95) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 32)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95)
--------

same_behavior for the nodes: c_isprint -> c_isprint_3481 and c_isprint -> c_isprint_369

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 32) < Value: 95) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 32)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 32) < Value: 95) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 32)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 32),Value: 95)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32],E_val 95 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32],E_val 95 32]) (E_val 1 8) (E_val 0 8)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isprint -> c_isprint_3481 and c_isprint -> c_isprint_369 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (63/87): "c_islower"
--------
.dot code for CFG of text section c_islower for Vanilla
diGraph c_islower_Vanilla{
	c_islower_0  [label="[c_islower,c_islower_3469]"]


}
--------
--------
.dot code for CFG of text section c_islower for Randomized
diGraph c_islower_Randomized{
	c_islower_0  [label="[c_islower,c_islower_2332]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_islower"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 97) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 97)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_islower"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 97) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 97)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26)
--------

same_behavior for the nodes: c_islower -> c_islower_3469 and c_islower -> c_islower_2332

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 97) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 97)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 97) < Value: 26) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 97)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 97),Value: 26)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 97 32],E_val 26 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 97 32],E_val 26 32]) (E_val 1 8) (E_val 0 8)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 97 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 97 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_islower -> c_islower_3469 and c_islower -> c_islower_2332 have been verified to do the same.

Label relationship:

Local variab(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(3,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
le relationship:

Succesful check!
Considering text section (64/87): "c_isgraph"
--------
.dot code for CFG of text section c_isgraph for Vanilla
diGraph c_isgraph_Vanilla{
	c_isgraph_0  [label="[c_isgraph,c_isgraph_3457]"]


}
--------
--------
.dot code for CFG of text section c_isgraph for Randomized
diGraph c_isgraph_Randomized{
	c_isgraph_0  [label="[c_isgraph,c_isgraph_2351]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isgraph"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 33) < Value: 94) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 33)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isgraph"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 33) < Value: 94) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 33)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94)
--------

same_behavior for the nodes: c_isgraph -> c_isgraph_3457 and c_isgraph -> c_isgraph_2351

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 33) < Value: 94) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 33)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 33) < Value: 94) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 33)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 33),Value: 94)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 33 32],E_val 94 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 33 32],E_val 94 32]) (E_val 1 8) (E_val 0 8)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 33 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 33 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isgraph -> c_isgraph_3457 and c_isgraph -> c_isgraph_2351 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (65/87): "c_isdigit"
--------
.dot code for CFG of text section c_isdigit for Vanilla
diGraph c_isdigit_Vanilla{
	c_isdigit_0  [label="[c_isdigit,c_isdigit_3445]"]


}
--------
--------
.dot code for CFG of text section c_isdigit for Randomized
diGraph c_isdigit_Randomized{
	c_isdigit_0  [label="[c_isdigit,c_isdigit_4124]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isdigit"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 48) < Value: 10) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isdigit"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 48) < Value: 10) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)
--------

same_behavior for the nodes: c_isdigit -> c_isdigit_3445 and c_isdigit -> c_isdigit_4124

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 48) < Value: 10) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if ((TakeBits: <31,0>(Reg: RDI) + Value: 48) < Value: 10) then Value: 1 else Value: 0)), RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32],E_val 10 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32],E_val 10 32]) (E_val 1 8) (E_val 0 8)]
Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isdigit -> c_isdigit_3445 and c_isdigit -> c_isdigit_4124 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (66/87): "c_iscntrl"
--------
.dot code for CFG of text section c_iscntrl for Vanilla
diGraph c_iscntrl_Vanilla{
	c_iscntrl_0  [label="[c_iscntrl_3432,c_iscntrl_3433]"]
	c_iscntrl_1  [label="[.label_264,.label_264]"]
	c_iscntrl_2  [label="[.label_263,c_iscntrl_3431]"]
	c_iscntrl_3  [label="[c_iscntrl,c_iscntrl_3426]"]

	c_iscntrl_0 -> c_iscntrl_1;

	c_iscntrl_2 -> c_iscntrl_1 [label="ZF"];
	c_iscntrl_2 -> c_iscntrl_0 [label="!ZF"];
	c_iscntrl_3 -> c_iscntrl_2 [label="!CF"];
	c_iscntrl_3 -> c_iscntrl_1 [label="CF"];
}
--------
--------
.dot code for CFG of text section c_iscntrl for Randomized
diGraph c_iscntrl_Randomized{
	c_iscntrl_0  [label="[sub_403a2f_4274,sub_403a2f_4275]"]
	c_iscntrl_1  [label="[.label_272,.label_272]"]
	c_iscntrl_2  [label="[.label_273,sub_403a2f_4273]"]
	c_iscntrl_3  [label="[c_iscntrl,c_iscntrl_4293]"]

	c_iscntrl_0 -> c_iscntrl_1;

	c_iscntrl_2 -> c_iscntrl_1 [label="ZF"];
	c_iscntrl_2 -> c_iscntrl_0 [label="!ZF"];
	c_iscntrl_3 -> c_iscntrl_2 [label="!CF"];
	c_iscntrl_3 -> c_iscntrl_1 [label="CF"];
}
--------
Starting Node: 3

Edges: 0 ----> 1, , 2 --ZF--> 1, 2 --!ZF--> 0, 3 --!CF--> 2, 3 --CF--> 1

Symbolic Execution for Binary "Vanilla":(3,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])

Current text section: "c_iscntrl"
node 0:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
skip'
node 2:
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127)
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1)
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32)
--------

Starting Node: 3

Edges: 0 ----> 1, , 2 --ZF--> 1, 2 --!ZF--> 0, 3 --!CF--> 2, 3 --CF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "c_iscntrl"
node 0:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
skip'
node 2:
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127)
node 3:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1)
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32)
--------

same_behavior for the nodes: c_iscntrl -> c_iscntrl_3426 and c_iscntrl -> c_iscntrl_4293

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1)
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1)
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 32)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 1 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_iscntrl -> c_iscntrl_3426 and c_iscntrl -> c_iscntrl_4293 have been verified to do the same.

same_behavior for the nodes: .label_263 -> c_iscntrl_3431 and .label_273 -> sub_403a2f_4273

same_behavior checking these two SStates:

SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127)

SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 127)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_263 -> c_iscntrl_3431 and .label_273 -> sub_403a2f_4273 have been verified to do the same.

same_behavior for the nodes: .label_264 -> .label_264 and .label_272 -> .label_272

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_264 -> .label_264 and .label_272 -> .label_272 have been verified to do the same.

same_behavior for the nodes: c_iscntrl_3432 -> c_iscntrl_3433 and sub_403a2f_4274 -> sub_403a2f_4275

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_iscntrl_3432 -> c_iscntrl_3433 and sub_403a2f_4274 -> sub_403a2f_4275 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (67/87): "c_isblank"
--------
.dot code for CFG of text section c_isblank for Vanilla
diGraph c_isblank_Vanilla{
	c_isblank_0  [label="[c_isblank,c_isblank_3415]"]


}
--------
--------
.dot code for CFG of text section c_isblank for Randomized
diGraph c_isblank_Randomized{
	c_isblank_0  [label="[c_isblank,c_isblank_2022]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isblank"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))), RCX := (TakeBits: <63,8>(Reg: RCX) . (if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
ZF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), CF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), SF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), OF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), PF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isblank"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))), RCX := (TakeBits: <63,8>(Reg: RCX) . (if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
ZF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), CF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), SF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), OF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), PF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
--------

same_behavior for the nodes: c_isblank -> c_isblank_3415 and c_isblank -> c_isblank_2022

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))), RCX := (TakeBits: <63,8>(Reg: RCX) . (if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
SA || ZF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), CF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), SF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), OF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <3(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
1,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), PF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))), RCX := (TakeBits: <63,8>(Reg: RCX) . (if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))
SB || ZF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), CF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), SF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), OF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0)), PF := OR((if (TakeBits: <31,0>(Reg: RDI) == Value: 9) then Value: 1 else Value: 0),(if (TakeBits: <31,0>(Reg: RDI) == Value: 32) then Value: 1 else Value: 0))

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op OR) [E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 9 32]) (E_val 1 8) (E_val 0 8),E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]) (E_val 1 8) (E_val 0 8)]]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_app (Op OR) [E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 9 32]) (E_val 1 8) (E_val 0 8),E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]) (E_val 1 8) (E_val 0 8)]]
Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RCX],E_ite (E_app (F ==) [E_app (TakeBits 31 0) [E_reg RDI],E_val 32 32]) (E_val 1 8) (E_val 0 8)]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isblank -> c_isblank_3415 and c_isblank -> c_isblank_2022 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (68/87): "c_isascii"
--------
.dot code for CFG of text section c_isascii for Vanilla
diGraph c_isascii_Vanilla{
	c_isascii_0  [label="[c_isascii,c_isascii_3401]"]


}
--------
--------
.dot code for CFG of text section c_isascii for Randomized
diGraph c_isascii_Randomized{
	c_isascii_0  [label="[c_isascii,c_isascii_3595]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isascii"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if (TakeBits: <31,0>(Reg: RDI) < Value: 128) then Value: 1 else Value: 0))
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "c_isascii"
node 0:
RAX := (TakeBits: <63,8>(Reg: RAX) . (if (TakeBits: <31,0>(Reg: RDI) < Value: 128) then Value: 1 else Value: 0))
ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128)
--------

same_behavior for the nodes: c_isascii -> c_isascii_3401 and c_isascii -> c_isascii_3595

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . (if (TakeBits: <31,0>(Reg: RDI) < Value: 128) then Value: 1 else Value: 0))
SA || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . (if (TakeBits: <31,0>(Reg: RDI) < Value: 128) then Value: 1 else Value: 0))
SB || ZF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), CF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), SF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), OF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128), PF := CMP(TakeBits: <31,0>(Reg: RDI),Value: 128)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_reg RDI],E_val 128 32]) (E_val 1 8) (E_val 0 8)]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_ite (E_app (F <) [E_app (TakeBits 31 0) [E_reg RDI],E_val 128 32]) (E_val 1 8) (E_val 0 8)]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isascii -> c_isascii_3401 and c_isascii -> c_isascii_3595 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (69/87): "c_isalpha"
--------
.dot code for CFG of text section c_isalpha for Vanilla
diGraph c_isalpha_Vanilla{
	c_isalpha_0  [label="[c_isalpha_3383,c_isalpha_3387]"]
	c_isalpha_1  [label="[.label_262,c_isalpha_3390]"]
	c_isalpha_2  [label="[c_isalpha,c_isalpha_3382]"]



	c_isalpha_2 -> c_isalpha_1 [label="!CF && !ZF"];
	c_isalpha_2 -> c_isalpha_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section c_isalpha for Randomized
diGraph c_isalpha_Randomized{
	c_isalpha_0  [label="[c_isalpha_479,c_isalpha_483]"]
	c_isalpha_1  [label="[.label_22,c_isalpha_486]"]
	c_isalpha_2  [label="[c_isalpha,c_isalpha_478]"]



	c_isalpha_2 -> c_isalpha_1 [label="!CF && !ZF"];
	c_isalpha_2 -> c_isalpha_0 [label="CF || ZF"];
}
--------
Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isalpha"
node 0:
RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57)
--------

Starting Node: 2

Edges: , , 2 --!CF && !ZF--> 1, 2 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "c_isalpha"
node 0:
RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)
node 1:
RAX := Value: 0
ZF(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
 := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57)
--------

same_behavior for the nodes: c_isalpha -> c_isalpha_3382 and c_isalpha -> c_isalpha_478

same_behavior checking these two SStates:

SA || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57)

SB || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 65)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 65),Value: 57)

Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 65 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isalpha -> c_isalpha_3382 and c_isalpha -> c_isalpha_478 have been verified to do the same.

same_behavior for the nodes: .label_262 -> c_isalpha_3390 and .label_22 -> c_isalpha_486

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_262 -> c_isalpha_3390 and .label_22 -> c_isalpha_486 have been verified to do the same.

same_behavior for the nodes: c_isalpha_3383 -> c_isalpha_3387 and c_isalpha_479 -> c_isalpha_483

same_behavior checking these two SStates:

SA || RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SA || ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)

SB || RAX := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), RCX := TakeBits: <31,0>(Reg: RDI)
SB || ZF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), CF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), SF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), OF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1), PF := AND(TakeBits: <31,0>(SHR(zextend(Value: 288230371923853311,Value: 64),TakeBits: <7,0>(Reg: RDI))),Value: 1)

Resulting values:
Value A:
E_app (Op AND) [E_app (TakeBits 31 0) [E_app (Op SHR) [E_app (F zextend) [E_val 288230371923853311 64,E_val 64 (-1)],E_app (TakeBits 7 0) [E_reg RDI]]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (TakeBits 31 0) [E_app (Op SHR) [E_app (F zextend) [E_val 288230371923853311 64,E_val 64 (-1)],E_app (TakeBits 7 0) [E_reg RDI]]],E_val 1 32]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RDI]
Value B:
E_app (TakeBits 31 0) [E_reg RDI]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isalpha_3383 -> c_isalpha_3387 and c_isalpha_479 -> c_isalpha_483 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (70/87): "c_isalnum"
--------
.dot code for CFG of text section c_isalnum for Vanilla
diGraph c_isalnum_Vanilla{
	c_isalnum_0  [label="[c_isalnum_3361,c_isalnum_3363]"]
	c_isalnum_1  [label="[c_isalnum_3370,c_isalnum_3371]"]
	c_isalnum_2  [label="[.label_261,.label_261]"]
	c_isalnum_3  [label="[.label_260,c_isalnum_3369]"]
	c_isalnum_4  [label="[c_isalnum,c_isalnum_3360]"]

	c_isalnum_0 -> c_isalnum_3 [label="!CF"];
	c_isalnum_0 -> c_isalnum_2 [label="CF"];


	c_isalnum_3 -> c_isalnum_2 [label="CF"];
	c_isalnum_3 -> c_isalnum_1 [label="!CF"];
	c_isalnum_4 -> c_isalnum_3 [label="!CF && !ZF"];
	c_isalnum_4 -> c_isalnum_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section c_isalnum for Randomized
diGraph c_isalnum_Randomized{
	c_isalnum_0  [label="[c_isalnum_4046,c_isalnum_4048]"]
	c_isalnum_1  [label="[c_isalnum_4055,c_isalnum_4056]"]
	c_isalnum_2  [label="[.label_266,.label_266]"]
	c_isalnum_3  [label="[.label_265,c_isalnum_4054]"]
	c_isalnum_4  [label="[c_isalnum,c_isalnum_4045]"]

	c_isalnum_0 -> c_isalnum_3 [label="!CF"];
	c_isalnum_0 -> c_isalnum_2 [label="CF"];


	c_isalnum_3 -> c_isalnum_2 [label="CF"];
	c_isalnum_3 -> c_isalnum_1 [label="!CF"];
	c_isalnum_4 -> c_isalnum_3 [label="!CF && !ZF"];
	c_isalnum_4 -> c_isalnum_0 [label="CF || ZF"];
}
--------
Starting Node: 4

Edges: 0 --!CF--> 3, 0 --CF--> 2, , , 3 --CF--> 2, 3 --!CF--> 1, 4 --!CF && !ZF--> 3, 4 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "c_isalnum"
node 0:
RDX := Value: 288230371923853311
CF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), SF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), OF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), PF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64))
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
skip'
node 3:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)
node 4:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57)
--------

Starting Node: 4

Edges: 0 --!CF--> 3, 0 --CF--> 2, , , 3 --CF--> 2, 3 --!CF--> 1, 4 --!CF && !ZF--> 3, 4 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "c_isalnum"
node 0:
RDX := Value: 288230371923853311
CF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), SF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), OF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), PF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64))
node 1:
RAX := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
skip'
node 3:
RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: (9,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
48),Value: 10)
node 4:
RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57)
--------

same_behavior for the nodes: c_isalnum -> c_isalnum_3360 and c_isalnum -> c_isalnum_4045

same_behavior checking these two SStates:

SA || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
SA || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57)

SB || RAX := (TakeBits: <63,8>(Reg: RAX) . Value: 1), RCX := TakeBits: <31,0>((Reg: RDI - Value: 65))
SB || ZF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), CF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), SF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), OF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57), PF := CMP(TakeBits: <31,0>((Reg: RDI - Value: 65)),Value: 57)

Resulting values:
Value A:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 1 8]
Value B:
E_app Concat [E_app (TakeBits 63 8) [E_reg RAX],E_val 1 8]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op SUB) [E_reg RDI,E_val 65 64]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isalnum -> c_isalnum_3360 and c_isalnum -> c_isalnum_4045 have been verified to do the same.

same_behavior for the nodes: .label_260 -> c_isalnum_3369 and .label_265 -> c_isalnum_4054

same_behavior checking these two SStates:

SA || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SA || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)

SB || RDI := (TakeBits: <31,0>(Reg: RDI) + Value: 48)
SB || ZF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), CF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), SF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), OF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10), PF := CMP((TakeBits: <31,0>(Reg: RDI) + Value: 48),Value: 10)

Resulting values:
Value A:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Value B:
E_app (Op ADD) [E_app (TakeBits 31 0) [E_reg RDI],E_val 48 32]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_260 -> c_isalnum_3369 and .label_265 -> c_isalnum_4054 have been verified to do the same.

same_behavior for the nodes: .label_261 -> .label_261 and .label_266 -> .label_266

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_261 -> .label_261 and .label_266 -> .label_266 have been verified to do the same.

same_behavior for the nodes: c_isalnum_3370 -> c_isalnum_3371 and c_isalnum_4055 -> c_isalnum_4056

same_behavior checking these two SStates:

SA || RAX := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isalnum_3370 -> c_isalnum_3371 and c_isalnum_4055 -> c_isalnum_4056 have been verified to do the same.

same_behavior for the nodes: c_isalnum_3361 -> c_isalnum_3363 and c_isalnum_4046 -> c_isalnum_4048

same_behavior checking these two SStates:

SA || RDX := Value: 288230371923853311
SA || CF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), SF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), OF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), PF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64))

SB || RDX := Value: 288230371923853311
SB || CF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), SF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), OF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64)), PF := BT(Value: 288230371923853311,(Reg: RCX mod Value: 64))

Resulting values:
Value A:
E_val 288230371923853311 64
Value B:
E_val 288230371923853311 64
Reg Chk: True
Mem Chk: True
Result: Success
Nodes c_isalnum_3361 -> c_isalnum_3363 and c_isalnum_4046 -> c_isalnum_4048 have been verified to do the same.

Label relationship:

Local variable relationship:

Succesful check!
Considering text section (71/87): "rpl_calloc"
--------
.dot code for CFG of text section rpl_calloc for Vanilla
diGraph rpl_calloc_Vanilla{
	rpl_calloc_0  [label="[rpl_calloc_3297,rpl_calloc_3297]"]
	rpl_calloc_1  [label="[rpl_calloc_3298,rpl_calloc_3298]"]
	rpl_calloc_2  [label="[rpl_calloc_3299,rpl_calloc_3302]"]
	rpl_calloc_3  [label="[rpl_calloc_3289,rpl_calloc_3296]"]
	rpl_calloc_4  [label="[rpl_calloc_3286,rpl_calloc_3288]"]
	rpl_calloc_5  [label="[.label_257,.label_257]"]
	rpl_calloc_6  [label="[.label_258,rpl_calloc_3307]"]
	rpl_calloc_7  [label="[rpl_calloc_3308,rpl_calloc_3308]"]
	rpl_calloc_8  [label="[rpl_calloc_3308_ret,rpl_calloc_3308_ret]"]
	rpl_calloc_9  [label="[rpl_calloc,rpl_calloc_3285]"]

	rpl_calloc_0 -> rpl_calloc_1;
	rpl_calloc_1 -> rpl_calloc_2;

	rpl_calloc_3 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_3 -> rpl_calloc_0 [label="!ZF"];
	rpl_calloc_4 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_4 -> rpl_calloc_3 [label="!ZF"];
	rpl_calloc_5 -> rpl_calloc_6;
	rpl_calloc_6 -> rpl_calloc_7;
	rpl_calloc_7 -> rpl_calloc_8;

	rpl_calloc_9 -> rpl_calloc_5 [label="ZF"];
	rpl_calloc_9 -> rpl_calloc_4 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section rpl_calloc for Randomized
diGraph rpl_calloc_Randomized{
	rpl_calloc_0  [label="[rpl_calloc_3639,rpl_calloc_3639]"]
	rpl_calloc_1  [label="[rpl_calloc_3640,rpl_calloc_3640]"]
	rpl_calloc_2  [label="[rpl_calloc_3641,rpl_calloc_3644]"]
	rpl_calloc_3  [label="[rpl_calloc_3631,rpl_calloc_3638]"]
	rpl_calloc_4  [label="[rpl_calloc_3628,rpl_calloc_3630]"]
	rpl_calloc_5  [label="[.label_243,.label_243]"]
	rpl_calloc_6  [label="[.label_242,sub_4035fa_3608]"]
	rpl_calloc_7  [label="[sub_4035fa_3609,sub_4035fa_3609]"]
	rpl_calloc_8  [label="[sub_4035fa_3609_ret,sub_4035fa_3609_ret]"]
	rpl_calloc_9  [label="[rpl_calloc,rpl_calloc_3627]"]

	rpl_calloc_0 -> rpl_calloc_1;
	rpl_calloc_1 -> rpl_calloc_2;

	rpl_calloc_3 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_3 -> rpl_calloc_0 [label="!ZF"];
	rpl_calloc_4 -> rpl_calloc_6 [label="ZF"];
	rpl_calloc_4 -> rpl_calloc_3 [label="!ZF"];
	rpl_calloc_5 -> rpl_calloc_6;
	rpl_calloc_6 -> rpl_calloc_7;
	rpl_calloc_7 -> rpl_calloc_8;

	rpl_calloc_9 -> rpl_calloc_5 [label="ZF"];
	rpl_calloc_9 -> rpl_calloc_4 [label="!ZF"];
}
--------
Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 6, 3 --!ZF--> 0, 4 --ZF--> 6, 4 --!ZF--> 3, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 5, 9 --!ZF--> 4

Symbolic Execution for Binary "Vanilla":
Current text section: "rpl_calloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := __errno_location@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
[Reg: RAX,4] := Value: 12
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg(9,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == Var: RSP0 && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0),(5,RSP == Var: RSP0 && RBP == Var: RBP0),(6,RSP == Var: RSP0 && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == Var: RSP0 && RBP == Var: RBP0),(9,RSP == Var: RSP0 && RBP == Var: RBP0)])
: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
node 4:
RCX := Value: 1
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 5:
RCX := Value: 1
node 6:
RDI := Reg: RCX, RSI := Reg: RAX
node 7:
RAX := calloc@()
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 9

Edges: 0 ----> 1, 1 ----> 2, , 3 --ZF--> 6, 3 --!ZF--> 0, 4 --ZF--> 6, 4 --!ZF--> 3, 5 ----> 6, 6 ----> 7, 7 ----> 8, , 9 --ZF--> 5, 9 --!ZF--> 4

Symbolic Execution for Binary "Randomized":
Current text section: "rpl_calloc"
node 0:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 1:
RAX := __errno_location@()
node 2:
RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
[Reg: RAX,4] := Value: 12
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)
node 4:
RCX := Value: 1
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
node 5:
RCX := Value: 1
node 6:
RDI := Reg: RCX, RSI := Reg: RAX
node 7:
RAX := calloc@()
node 8:
skip'
node 9:
RAX := Value: 1
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: rpl_calloc -> rpl_calloc_3285 and rpl_calloc -> rpl_calloc_3627

same_behavior checking these two SStates:

SA || RAX := Value: 1
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Value: 1
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc -> rpl_calloc_3285 and rpl_calloc -> rpl_calloc_3627 have been verified to do the same.

same_behavior for the nodes: .label_257 -> .label_257 and .label_243 -> .label_243

same_behavior checking these two SStates:

SA || RCX := Value: 1

SB || RCX := Value: 1

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_257 -> .label_257 and .label_243 -> .label_243 have been verified to do the same.

same_behavior for the nodes: .label_258 -> rpl_calloc_3307 and .label_242 -> sub_4035fa_3608

same_behavior checking these two SStates:

SA || RDI := Reg: RCX, RSI := Reg: RAX

SB || RDI := Reg: RCX, RSI := Reg: RAX

Resulting values:
Value A:
E_reg RCX
Value B:
E_reg RCX
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_258 -> rpl_calloc_3307 and .label_242 -> sub_4035fa_3608 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3308 -> rpl_calloc_3308 and sub_4035fa_3609 -> sub_4035fa_3609

same_behavior checking these two SStates:

SA || RAX := calloc@()

SB || RAX := calloc@()

Resulting values:
Value A:
E_app (F2 "calloc" "") []
Value B:
E_app (F2 "calloc" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3308 -> rpl_calloc_3308 and sub_4035fa_3609 -> sub_4035fa_3609 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3308_ret -> rpl_calloc_3308_ret and sub_4035fa_3609_ret -> sub_4035fa_3609_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3308_ret -> rpl_calloc_3308_ret and sub_4035fa_3609_ret -> sub_4035fa_3609_ret have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3286 -> rpl_calloc_3288 and rpl_calloc_3628 -> rpl_calloc_3630

same_behavior checking these two SStates:

SA || RCX := Value: 1
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RCX := Value: 1
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3286 -> rpl_calloc_3288 and rpl_calloc_3628 -> rpl_calloc_3630 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3289 -> rpl_calloc_3296 and rpl_calloc_3631 -> rpl_calloc_3638

same_behavior checking these two SStates:

SA || RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
SA || ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

SB || RAX := Reg: RSI, RCX := Reg: RDI, RDX := (zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128) mod zextend(Reg: RSI,Value: 64))
SB || ZF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), CF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), SF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), OF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI), PF := CMP(DIV(zextend(TakeBits: <63,0>(IMUL(Reg: RSI,Reg: RDI)),Value: 128),zextend(Reg: RSI,Value: 64)),Reg: RDI)

Resulting values:
Value A:
E_reg RSI
Value B:
E_reg RSI
Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Value B:
E_app (F mod) [E_app (F zextend) [E_app (TakeBits 63 0) [E_app (Op IMUL) [E_reg RSI,E_reg RDI]],E_val 128 (-1)],E_app (F zextend) [E_reg RSI,E_val 64 (-1)]]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3289 -> rpl_calloc_3296 and rpl_calloc_3631 -> rpl_calloc_3638 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3297 -> rpl_calloc_3297 and rpl_calloc_3639 -> rpl_calloc_3639

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0)])

E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3297 -> rpl_calloc_3297 and rpl_calloc_3639 -> rpl_calloc_3639 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3298 -> rpl_calloc_3298 and rpl_calloc_3640 -> rpl_calloc_3640

same_behavior checking these two SStates:

SA || RAX := __errno_location@()

SB || RAX := __errno_location@()

Resulting values:
Value A:
E_app (F2 "__errno_location" "") []
Value B:
E_app (F2 "__errno_location" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes rpl_calloc_3298 -> rpl_calloc_3298 and rpl_calloc_3640 -> rpl_calloc_3640 have been verified to do the same.

same_behavior for the nodes: rpl_calloc_3299 -> rpl_calloc_3302 and rpl_calloc_3641 -> rpl_calloc_3644

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SA || [Reg: RAX,4] := Value: 12
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [(Var: RSP0 - Value: 8),8]
SB || [Reg: RAX,4] := Value: 12
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RAX
E_reg RAX
(v1 := v2):
E_val 12 32
E_val 12 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes rpl_calloc_3299 -> rpl_calloc_3302 and rpl_calloc_3641 -> rpl_calloc_3644 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (72/87): "xalloc_die"
--------
.dot code for CFG of text section xalloc_die for Vanilla
diGraph xalloc_die_Vanilla{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_3267]"]
	xalloc_die_1  [label="[xalloc_die_3268,xalloc_die_3268]"]
	xalloc_die_2  [label="[xalloc_die_3269,xalloc_die_3273]"]
	xalloc_die_3  [label="[xalloc_die_3274,xalloc_die_3274]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
--------
.dot code for CFG of text section xalloc_die for Randomized
diGraph xalloc_die_Randomized{
	xalloc_die_0  [label="[xalloc_die,xalloc_die_4380]"]
	xalloc_die_1  [label="[xalloc_die_4381,xalloc_die_4381]"]
	xalloc_die_2  [label="[xalloc_die_4382,xalloc_die_4386]"]
	xalloc_die_3  [label="[xalloc_die_4387,xalloc_die_4387]"]

	xalloc_die_0 -> xalloc_die_1;
	xalloc_die_1 -> xalloc_die_2;
	xalloc_die_2 -> xalloc_die_3;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Vanilla":
Current text section: "xalloc_die"
node 0:
RBX := Dereference: [(Var: xalloc_die_3264 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_256,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_37,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 

Symbolic Execution for Binary "Randomized":
Current text section: "xalloc_die"
node 0:
RBX := Dereference: [(Var: xalloc_die_4377 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_277,4]
[(Var: RSP0 - Value: 8),8] := Reg: RBX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_235,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := error@()
--------

same_behavior for the nodes: xalloc_die -> xalloc_die_3267 and xalloc_die -> xalloc_die_4380

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: xalloc_die_3264 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_256,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RBX := Dereference: [(Var: xalloc_die_4377 + Var: exit_failure),4], RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_277,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RBX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "xalloc_die_3264" 64,E_var "exit_failure" 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_var "xalloc_die_4377" 64,E_var "exit_failure" 64]) 4
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_256" 64) 4
Value B:
E_deref (E_var "label_277" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes xalloc_die -> xalloc_die_3267 and xalloc_die -> xalloc_die_4380 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3268 -> xalloc_die_3268 and xalloc_die_4381 -> xalloc_die_4381

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3268 -> xalloc_die_3268 and xalloc_die_4381 -> xalloc_die_4381 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3269 -> xalloc_die_3273 and xalloc_die_4382 -> xalloc_die_4386

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_37,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_235,4], RDI := TakeBits: <31,0>(Reg: RBX), RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_37" 64) 4
Value B:
E_deref (E_var "label_235" 64) 4
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RBX]
Value B:
E_app (TakeBits 31 0) [E_reg RBX]
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3269 -> xalloc_die_3273 and xalloc_die_4382 -> xalloc_die_4386 have been verified to do the same.

same_behavior for the nodes: xalloc_die_3274 -> xalloc_die_3274 and xalloc_die_4387 -> xalloc_die_4387

same_behavior checking these two SStates:

SA || RAX := error@()

SB || RAX := error@()

Resulting values:
Value A:
E_app (F2 "error" "") []
Value B:
E_app (F2 "error" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes xalloc_die_3274 -> xalloc_die_3274 and xalloc_die_4387 -> xalloc_die_4387 have been verified to do the same.

Label relationship:
label_37 <--> label_235
 <--> 
label_256 <--> label_277
exit_failure <--> exit_failure
xalloc_die_3264 <--> xalloc_die_4377

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (73/87): "emit_bug_reporting_address"
--------
.dot code for CFG of text section emit_bug_reporting_address for Vanilla
diGraph emit_bug_reporting_address_Vanilla{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_2990]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_2991,emit_bug_reporting_address_2991]"]
	em(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == Var: RSP0 && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(11,RSP == Var: RSP0 && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
it_bug_reporting_address_2  [label="[emit_bug_reporting_address_2992,emit_bug_reporting_address_2996]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_2997,emit_bug_reporting_address_2997]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_2998,emit_bug_reporting_address_3000]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_3001,emit_bug_reporting_address_3001]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_3002,emit_bug_reporting_address_3006]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_3007,emit_bug_reporting_address_3007]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_3008,emit_bug_reporting_address_3010]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_3011,emit_bug_reporting_address_3011]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_3012,emit_bug_reporting_address_3014]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_3015,emit_bug_reporting_address_3015]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_3015_ret,emit_bug_reporting_address_3015_ret]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bug_reporting_address_12;

}
--------
--------
.dot code for CFG of text section emit_bug_reporting_address for Randomized
diGraph emit_bug_reporting_address_Randomized{
	emit_bug_reporting_address_0  [label="[emit_bug_reporting_address,emit_bug_reporting_address_1776]"]
	emit_bug_reporting_address_1  [label="[emit_bug_reporting_address_1777,emit_bug_reporting_address_1777]"]
	emit_bug_reporting_address_2  [label="[emit_bug_reporting_address_1778,emit_bug_reporting_address_1782]"]
	emit_bug_reporting_address_3  [label="[emit_bug_reporting_address_1783,emit_bug_reporting_address_1783]"]
	emit_bug_reporting_address_4  [label="[emit_bug_reporting_address_1784,emit_bug_reporting_address_1786]"]
	emit_bug_reporting_address_5  [label="[emit_bug_reporting_address_1787,emit_bug_reporting_address_1787]"]
	emit_bug_reporting_address_6  [label="[emit_bug_reporting_address_1788,emit_bug_reporting_address_1792]"]
	emit_bug_reporting_address_7  [label="[emit_bug_reporting_address_1793,emit_bug_reporting_address_1793]"]
	emit_bug_reporting_address_8  [label="[emit_bug_reporting_address_1794,emit_bug_reporting_address_1796]"]
	emit_bug_reporting_address_9  [label="[emit_bug_reporting_address_1797,emit_bug_reporting_address_1797]"]
	emit_bug_reporting_address_10  [label="[emit_bug_reporting_address_1798,emit_bug_reporting_address_1800]"]
	emit_bug_reporting_address_11  [label="[emit_bug_reporting_address_1801,emit_bug_reporting_address_1801]"]
	emit_bug_reporting_address_12  [label="[emit_bug_reporting_address_1801_ret,emit_bug_reporting_address_1801_ret]"]

	emit_bug_reporting_address_0 -> emit_bug_reporting_address_1;
	emit_bug_reporting_address_1 -> emit_bug_reporting_address_2;
	emit_bug_reporting_address_2 -> emit_bug_reporting_address_3;
	emit_bug_reporting_address_3 -> emit_bug_reporting_address_4;
	emit_bug_reporting_address_4 -> emit_bug_reporting_address_5;
	emit_bug_reporting_address_5 -> emit_bug_reporting_address_6;
	emit_bug_reporting_address_6 -> emit_bug_reporting_address_7;
	emit_bug_reporting_address_7 -> emit_bug_reporting_address_8;
	emit_bug_reporting_address_8 -> emit_bug_reporting_address_9;
	emit_bug_reporting_address_9 -> emit_bug_reporting_address_10;
	emit_bug_reporting_address_10 -> emit_bug_reporting_address_11;
	emit_bug_reporting_address_11 -> emit_bug_reporting_address_12;

}
--------
Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Vanilla":
Current text section: "emit_bug_reporting_address"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_239,4]
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_240,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_242,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Dereference: [Var: label_19,4], RDX := Dereference: [Var: label_18,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_241,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_3012 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
skip'
--------

Starting Node: 0

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 5, 5 ----> 6, 6 ----> 7, 7 ----> 8, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 

Symbolic Execution for Binary "Randomized":
Current text section: "emit_bug_reporting_address"
node 0:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_145,4]
[(Var: RSP0 - Value: 8),8] := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 1:
RAX := dcgettext@()
node 2:
RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_146,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 3:
RAX := __printf_chk@()
node 4:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_148,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 5:
RAX := dcgettext@()
node 6:
RAX := Value: 0, RCX := Dereference: [Var: label_150,4], RDX := Dereference: [Var: label_149,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 7:
RAX := __printf_chk@()
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_147,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_1798 + Var: stdout),8]
node 11:
RAX := fputs_unlocked@()
node 12:
skip'
--------

same_behavior for the nodes: emit_bug_reporting_address -> emit_bug_reporting_address_2990 and emit_bug_reporting_address -> emit_bug_reporting_address_1776

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_239,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_145,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_239" 64) 4
Value B:
E_deref (E_var "label_145" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address -> emit_bug_reporting_address_2990 and emit_bug_reporting_address -> emit_bug_reporting_address_1776 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2991 -> emit_bug_reporting_address_2991 and emit_bug_reporting_address_1777 -> emit_bug_reporting_address_1777

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2991 -> emit_bug_reporting_address_2991 and emit_bug_reporting_address_1777 -> emit_bug_reporting_address_1777 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2992 -> emit_bug_reporting_address_2996 and emit_bug_reporting_address_1778 -> emit_bug_reporting_address_1782

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_240,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Reg: RAX, RDX := Dereference: [Var: label_146,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_240" 64) 4
Value B:
E_deref (E_var "label_146" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2992 -> emit_bug_reporting_address_2996 and emit_bug_reporting_address_1778 -> emit_bug_reporting_address_1782 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2997 -> emit_bug_reporting_address_2997 and emit_bug_reporting_address_1783 -> emit_bug_reporting_address_1783

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2997 -> emit_bug_reporting_address_2997 and emit_bug_reporting_address_1783 -> emit_bug_reporting_address_1783 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_2998 -> emit_bug_reporting_address_3000 and emit_bug_reporting_address_1784 -> emit_bug_reporting_address_1786

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_242,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_148,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_242" 64) 4
Value B:
E_deref (E_var "label_148" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_2998 -> emit_bug_reporting_address_3000 and emit_bug_reporting_address_1784 -> emit_bug_reporting_address_1786 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3001 -> emit_bug_reporting_address_3001 and emit_bug_reporting_address_1787 -> emit_bug_reporting_address_1787

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3001 -> emit_bug_reporting_address_3001 and emit_bug_reporting_address_1787 -> emit_bug_reporting_address_1787 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3002 -> emit_bug_reporting_address_3006 and emit_bug_reporting_address_1788 -> emit_bug_reporting_address_1792

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: label_19,4], RDX := Dereference: [Var: label_18,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: label_150,4], RDX := Dereference: [Var: label_149,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_19" 64) 4
Value B:
E_deref (E_var "label_150" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_18" 64) 4
Value B:
E_deref (E_var "label_149" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3002 -> emit_bug_reporting_address_3006 and emit_bug_reporting_address_1788 -> emit_bug_reporting_address_1792 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3007 -> emit_bug_reporting_address_3007 and emit_bug_reporting_address_1793 -> emit_bug_reporting_address_1793

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3007 -> emit_bug_reporting_address_3007 and emit_bug_reporting_address_1793 -> emit_bug_reporting_address_1793 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3008 -> emit_bug_reporting_address_3010 and emit_bug_reporting_address_1794 -> emit_bug_reporting_address_1796

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_241,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_147,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_241" 64) 4
Value B:
E_deref (E_var "label_147" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3008 -> emit_bug_reporting_address_3010 and emit_bug_reporting_address_1794 -> emit_bug_reporting_address_1796 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3011 -> emit_bug_reporting_address_3011 and emit_bug_reporting_address_1797 -> emit_bug_reporting_address_1797

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3011 -> emit_bug_reporting_address_3011 and emit_bug_reporting_address_1797 -> emit_bug_reporting_address_1797 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3012 -> emit_bug_reporting_address_3014 and emit_bug_reporting_address_1798 -> emit_bug_reporting_address_1800

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_reporting_address_3012 + Var: stdout),8]

SB || RAX := Dereference: [(Var: RSP0 - Value: 8),8], RDI := Reg: RAX, RSI := Dereference: [(Var: emit_bug_repor(4,fromList [(0,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 216) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
ting_address_1798 + Var: stdout),8]

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_3012" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "emit_bug_reporting_address_1798" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3012 -> emit_bug_reporting_address_3014 and emit_bug_reporting_address_1798 -> emit_bug_reporting_address_1800 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3015 -> emit_bug_reporting_address_3015 and emit_bug_reporting_address_1801 -> emit_bug_reporting_address_1801

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3015 -> emit_bug_reporting_address_3015 and emit_bug_reporting_address_1801 -> emit_bug_reporting_address_1801 have been verified to do the same.

same_behavior for the nodes: emit_bug_reporting_address_3015_ret -> emit_bug_reporting_address_3015_ret and emit_bug_reporting_address_1801_ret -> emit_bug_reporting_address_1801_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_bug_reporting_address_3015_ret -> emit_bug_reporting_address_3015_ret and emit_bug_reporting_address_1801_ret -> emit_bug_reporting_address_1801_ret have been verified to do the same.

Label relationship:
stdout <--> stdout
emit_bug_reporting_address_3012 <--> emit_bug_reporting_address_1798
label_241 <--> label_147
label_18 <--> label_149
label_19 <--> label_150
label_242 <--> label_148
label_240 <--> label_146
 <--> 
label_239 <--> label_145

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (74/87): "version_etc"
--------
.dot code for CFG of text section version_etc for Vanilla
diGraph version_etc_Vanilla{
	version_etc_0  [label="[version_etc_2958,version_etc_2965]"]
	version_etc_1  [label="[.label_238,version_etc_2975]"]
	version_etc_2  [label="[version_etc_2976,version_etc_2976]"]
	version_etc_3  [label="[version_etc_2977,version_etc_2978]"]
	version_etc_4  [label="[version_etc,version_etc_2957]"]

	version_etc_0 -> version_etc_1;
	version_etc_1 -> version_etc_2;
	version_etc_2 -> version_etc_3;

	version_etc_4 -> version_etc_1 [label="ZF"];
	version_etc_4 -> version_etc_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section version_etc for Randomized
diGraph version_etc_Randomized{
	version_etc_0  [label="[version_etc_2370,version_etc_2377]"]
	version_etc_1  [label="[.label_184,version_etc_2387]"]
	version_etc_2  [label="[version_etc_2388,version_etc_2388]"]
	version_etc_3  [label="[version_etc_2389,version_etc_2390]"]
	version_etc_4  [label="[version_etc,version_etc_2369]"]

	version_etc_0 -> version_etc_1;
	version_etc_1 -> version_etc_2;
	version_etc_2 -> version_etc_3;

	version_etc_4 -> version_etc_1 [label="ZF"];
	version_etc_4 -> version_etc_0 [label="!ZF"];
}
--------
Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, , 4 --ZF--> 1, 4 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "version_etc"
node 0:
[(Var: RSP0 - Value: 24),16] := Reg: XMM7, [(Var: RSP0 - Value: 40),16] := Reg: XMM6, [(Var: RSP0 - Value: 56),16] := Reg: XMM5, [(Var: RSP0 - Value: 72),16] := Reg: XMM4, [(Var: RSP0 - Value: 88),16] := Reg: XMM3, [(Var: RSP0 - Value: 104),16] := Reg: XMM2, [(Var: RSP0 - Value: 120),16] := Reg: XMM1, [(Var: RSP0 - Value: 136),16] := Reg: XMM0
node 1:
RAX := (Var: RSP0 + Value: 8), R8 := (Var: RSP0 - Value: 216)
[(Var: RSP0 - Value: 144),8] := Reg: R9, [(Var: RSP0 - Value: 152),8] := Reg: R8, [(Var: RSP0 - Value: 200),8] := (Var: RSP0 - Value: 184), [(Var: RSP0 - Value: 208),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 212),4] := Value: 48, [(Var: RSP0 - Value: 216),4] := Value: 32
node 2:
RAX := version_etc_va@()
node 3:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 4:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

Starting Node: 4

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, , 4 --ZF--> 1, 4 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "version_etc"
node 0:
[(Var: RSP0 - Value: 24),16] := Reg: XMM7, [(Var: RSP0 - Value: 40),16] := Reg: XMM6, [(Var: RSP0 - Value: 56),16] := Reg: XMM5, [(Var: RSP0 - Value: 72),16] := Reg: XMM4, [(Var: RSP0 - Value: 88),16] := Reg: XMM3, [(Var: RSP0 - Value: 104),16] := Reg: XMM2, [(Var: RSP0 - Value: 120),16] := Reg: XMM1, [(Var: RSP0 - Value: 136),16] := Reg: XMM0
node 1:
RAX := (Var: RSP0 + Value: 8), R8 := (Var: RSP0 - Value: 216)
[(Var: RSP0 - Value: 144),8] := Reg: R9, [(Var: RSP0 - Value: 152),8] := Reg: R8, [(Var: RSP0 - Value: 200),8] := (Var: RSP0 - Value: 184), [(Var: RSP0 - Value: 208),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 212),4] := Value: 48, [(Var: RSP0 - Value: 216),4] := Value: 32
node 2:
RAX := version_etc_va@()
node 3:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 4:
ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))
--------

same_behavior for the nodes: version_etc -> version_etc_2957 and version_etc -> version_etc_2369

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), CF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), SF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), OF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX)), PF := TEST(TakeBits: <7,0>(Reg: RAX),TakeBits: <7,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc -> version_etc_2957 and version_etc -> version_etc_2369 have been verified to do the same.

same_behavior for the nodes: .label_238 -> version_etc_2975 and .label_184 -> version_etc_2387

same_behavior checking these two SStates:

SA || RAX := (Var: RSP0 + Value: 8), R8 := (Var: RSP0 - Value: 216)
SA || [(Var: RSP0 - Value: 144),8] := Reg: R9, [(Var: RSP0 - Value: 152),8] := Reg: R8, [(Var: RSP0 - Value: 200),8] := (Var: RSP0 - Value: 184), [(Var: RSP0 - Value: 208),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 212),4] := Value: 48, [(Var: RSP0 - Value: 216),4] := Value: 32

SB || RAX := (Var: RSP0 + Value: 8), R8 := (Var: RSP0 - Value: 216)
SB || [(Var: RSP0 - Value: 144),8] := Reg: R9, [(Var: RSP0 - Value: 152),8] := Reg: R8, [(Var: RSP0 - Value: 200),8] := (Var: RSP0 - Value: 184), [(Var: RSP0 - Value: 208),8] := (Var: RSP0 + Value: 8), [(Var: RSP0 - Value: 212),4] := Value: 48, [(Var: RSP0 - Value: 216),4] := Value: 32

Resulting values:
Value A:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Value B:
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
local_var_cmp called

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 144 64]
(v1 := v2):
E_reg R9
E_reg R9
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 152 64]
(v1 := v2):
E_reg R8
E_reg R8
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 200 64]
(v1 := v2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 184 64]
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 208 64]
(v1 := v2):
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
E_app (Op ADD) [E_var "RSP0" 64,E_val 8 64]
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 212 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 212 64]
(v1 := v2):
E_val 48 32
E_val 48 32
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 216 64]
(v1 := v2):
E_val 32 32
E_val 32 32
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_238 -> version_etc_2975 and .label_184 -> version_etc_2387 have been verified to do the same.

same_behavior for the nodes: version_etc_2976 -> version_etc_2976 and version_etc_2388 -> version_etc_2388

same_behavior checking these two SStates:

SA || RAX := version_etc_va@()

SB || RAX := version_etc_va@()

Resulting values:
Value A:
E_app (F2 "version_etc_va" "") []
Value B:
E_app (F2 "version_etc_va" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_2976 -> version_etc_2976 and version_etc_2388 -> version_etc_2388 have been verified to do the same.

same_behavior for the nodes: version_etc_2977 -> version_etc_2978 and version_etc_2389 -> version_etc_2390

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_2977 -> version_etc_2978 and version_etc_2389 -> version_etc_2390 have been verified to do the same.

same_behavior for the nodes: version_etc_2958 -> version_etc_2965 and version_etc_2370 -> version_etc_2377

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 24),16] := Reg: XMM7, [(Var: RSP0 - Value: 40),16] := Reg: XMM6, [(Var: RSP0 - Value: 56),16] := Reg: XMM5, [(Var: RSP0 - Value: 72),16] := Reg: XMM4, [(Var: RSP0 - Value: 88),16] := Reg: XMM3, [(Var: RSP0 - Value: 104),16] := Reg: XMM2, [(Var: RSP0 - Value: 120),16] := Reg: XMM1, [(Var: RSP0 - Value: 136),16] := Reg: XMM0

SB || [(Var: RSP0 - Value: 24),16] := Reg: XMM7, [(Var: RSP0 - Value: 40),16] := Reg: XMM6, [(Var: RSP0 - Value: 56),16] := Reg: XMM5, [(Var: RSP0 - Value: 72),16] := Reg: XMM4, [(Var: RSP0 - Value: 88),16] := Reg: XMM3, [(Var: RSP0 - Value: 104),16] := Reg: XMM2, [(Var: RSP0 - Value: 120),16] := Reg: XMM1, [(Var: RSP0 - Value: 136),16] := Reg: XMM0

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg XMM7
E_reg XMM7
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_reg XMM6
E_reg XMM6
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_reg XMM5
E_reg XMM5
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 72 64]
(v1 := v2):
E_reg XMM4
E_reg XMM4
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
(v1 := v2):
E_reg XMM3
E_reg XMM3
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 104 64]
(v1 := v2):
E_reg XMM2
E_reg XMM2
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 120 64]
(v1 := v2):
E_reg XMM1
E_reg XMM1
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 136 64]
(v1 := v2):
E_reg XMM0
E_reg XMM0
b0: True b1: True
Mem Chk: True
Result: Success
Nodes version_etc_2958 -> version_etc_2965 and version_etc_2370 -> version_etc_2377 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 136) <--> (Var: RSP0 - Value: 136)
(Var: RSP0 - Value: 120) <--> (Var: RSP0 - Value: 120)
(Var: RSP0 - Value: 104) <--> (Var: RSP0 - Value: 104)
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)
(Var: RSP0 - Value: 72) <--> (Var: RSP0 - Value: 72)
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 40)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 212) <--> (Var: RSP0 - Value: 212)
(Var: RSP0 - Value: 208) <--> (Var: RSP0 - Value: 208)
(Var: RSP0 - Value: 184) <--> (Var: RSP0 - Value: 184)
(Var: RSP0 - Value: 200) <--> (Var: RSP0 - Value: 200)
(Var: RSP0 - Value: 152) <--> (Var: RSP0 - Value: 152)
(Var: RSP0 - Value: 144) <--> (Var: RSP0 - Value: 144)
(Var: RSP0 - Value: 216) <--> (Var: RSP0 - Value: 216)

Succesful check!
Considering text section (75/87): "version_etc_va"
--------
.dot code for CFG of text section version_etc_va for Vanilla
diGraph version_etc_va_Vanilla{
	version_etc_va_0  [label="[version_etc_va_2924,version_etc_va_2928]"]
	version_etc_va_1  [label="[version_etc_va_2939,version_etc_va_2941]"]
	version_etc_va_2  [label="[.label_237,.label_237]"]
	version_etc_va_3  [label="[version_etc_va_2944,version_etc_va_2944]"]
	version_etc_va_4  [label="[version_etc_va_2945,version_etc_va_2946]"]
	version_etc_va_5  [label="[.label_234,version_etc_va_2933]"]
	version_etc_va_6  [label="[.label_236,version_etc_va_2938]"]
	version_etc_va_7  [label="[version_etc_va,version_etc_va_2919]"]
	version_etc_va_8  (7,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
(7,fromList [(0,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0),(7,RSP == Var: RSP0 && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 88) && RBP == Var: RBP0)])
[label="[.label_235,version_etc_va_2923]"]

	version_etc_va_0 -> version_etc_va_6;
	version_etc_va_1 -> version_etc_va_8 [label="CF"];
	version_etc_va_1 -> version_etc_va_2 [label="!CF"];
	version_etc_va_2 -> version_etc_va_3;
	version_etc_va_3 -> version_etc_va_4;

	version_etc_va_5 -> version_etc_va_6;
	version_etc_va_6 -> version_etc_va_2 [label="ZF"];
	version_etc_va_6 -> version_etc_va_1 [label="!ZF"];
	version_etc_va_7 -> version_etc_va_8;
	version_etc_va_8 -> version_etc_va_5 [label="!CF && !ZF"];
	version_etc_va_8 -> version_etc_va_0 [label="CF || ZF"];
}
--------
--------
.dot code for CFG of text section version_etc_va for Randomized
diGraph version_etc_va_Randomized{
	version_etc_va_0  [label="[version_etc_va_4233,version_etc_va_4237]"]
	version_etc_va_1  [label="[sub_4039f9_4255,sub_4039f9_4257]"]
	version_etc_va_2  [label="[.label_271,.label_271]"]
	version_etc_va_3  [label="[sub_4039f9_4260,sub_4039f9_4260]"]
	version_etc_va_4  [label="[sub_4039f9_4261,sub_4039f9_4262]"]
	version_etc_va_5  [label="[.label_268,sub_4039f9_4249]"]
	version_etc_va_6  [label="[.label_270,sub_4039f9_4254]"]
	version_etc_va_7  [label="[version_etc_va,version_etc_va_4228]"]
	version_etc_va_8  [label="[.label_269,version_etc_va_4232]"]

	version_etc_va_0 -> version_etc_va_6;
	version_etc_va_1 -> version_etc_va_8 [label="CF"];
	version_etc_va_1 -> version_etc_va_2 [label="!CF"];
	version_etc_va_2 -> version_etc_va_3;
	version_etc_va_3 -> version_etc_va_4;

	version_etc_va_5 -> version_etc_va_6;
	version_etc_va_6 -> version_etc_va_2 [label="ZF"];
	version_etc_va_6 -> version_etc_va_1 [label="!ZF"];
	version_etc_va_7 -> version_etc_va_8;
	version_etc_va_8 -> version_etc_va_5 [label="!CF && !ZF"];
	version_etc_va_8 -> version_etc_va_0 [label="CF || ZF"];
}
--------
Starting Node: 7

Edges: 0 ----> 6, 1 --CF--> 8, 1 --!CF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 --ZF--> 2, 6 --!ZF--> 1, 7 ----> 8, 8 --!CF && !ZF--> 5, 8 --CF || ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "version_etc_va"
node 0:
RAX := TakeBits: <31,0>((Reg: R10 + Value: 8)), R11 := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
[Reg: R8,4] := TakeBits: <31,0>((Reg: R10 + Value: 8))
ZF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), CF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), SF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), OF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), PF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
node 1:
R9 := (Reg: R9 + Value: 1)
ZF := CMP((Reg: R9 + Value: 1),Value: 10), CF := CMP((Reg: R9 + Value: 1),Value: 10), SF := CMP((Reg: R9 + Value: 1),Value: 10), OF := CMP((Reg: R9 + Value: 1),Value: 10), PF := CMP((Reg: R9 + Value: 1),Value: 10)
node 2:
R8 := (Var: RSP0 - Value: 88)
node 3:
RAX := version_etc_arn@()
node 4:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 5:
RAX := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8), R11 := Dereference: [(Reg: R8 + Value: 8),8]
[(Reg: R8 + Value: 8),8] := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8)
node 6:
RAX := Dereference: [Reg: R11,8]
[((Var: RSP0 + TakeBits: <63,0>((Reg: R9 * Value: 8))) - Value: 88),8] := Dereference: [Reg: R11,8]
ZF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), CF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), SF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), OF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), PF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8])
node 7:
R9 := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
R10 := sextend(Dereference: [Reg: R8,4],32,64)
ZF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), CF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), SF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), OF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), PF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40)
--------

Starting Node: 7

Edges: 0 ----> 6, 1 --CF--> 8, 1 --!CF--> 2, 2 ----> 3, 3 ----> 4, , 5 ----> 6, 6 --ZF--> 2, 6 --!ZF--> 1, 7 ----> 8, 8 --!CF && !ZF--> 5, 8 --CF || ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "version_etc_va"
node 0:
RAX := TakeBits: <31,0>((Reg: R10 + Value: 8)), R11 := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
[Reg: R8,4] := TakeBits: <31,0>((Reg: R10 + Value: 8))
ZF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), CF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), SF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), OF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), PF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
node 1:
R9 := (Reg: R9 + Value: 1)
ZF := CMP((Reg: R9 + Value: 1),Value: 10), CF := CMP((Reg: R9 + Value: 1),Value: 10), SF := CMP((Reg: R9 + Value: 1),Value: 10), OF := CMP((Reg: R9 + Value: 1),Value: 10), PF := CMP((Reg: R9 + Value: 1),Value: 10)
node 2:
R8 := (Var: RSP0 - Value: 88)
node 3:
RAX := version_etc_arn@()
node 4:
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 5:
RAX := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8), R11 := Dereference: [(Reg: R8 + Value: 8),8]
[(Reg: R8 + Value: 8),8] := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8)
node 6:
RAX := Dereference: [Reg: R11,8]
[((Var: RSP0 + TakeBits: <63,0>((Reg: R9 * Value: 8))) - Value: 88),8] := Dereference: [Reg: R11,8]
ZF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), CF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), SF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), OF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), PF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8])
node 7:
R9 := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 8:
R10 := sextend(Dereference: [Reg: R8,4],32,64)
ZF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), CF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), SF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), OF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), PF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40)
--------

same_behavior for the nodes: version_etc_va -> version_etc_va_2919 and version_etc_va -> version_etc_va_4228

same_behavior checking these two SStates:

SA || R9 := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || R9 := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_va -> version_etc_va_2919 and version_etc_va -> version_etc_va_4228 have been verified to do the same.

same_behavior for the nodes: .label_235 -> version_etc_va_2923 and .label_269 -> version_etc_va_4232

same_behavior checking these two SStates:

SA || R10 := sextend(Dereference: [Reg: R8,4],32,64)
SA || ZF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), CF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), SF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), OF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), PF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40)

SB || R10 := sextend(Dereference: [Reg: R8,4],32,64)
SB || ZF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), CF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), SF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), OF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40), PF := CMP(sextend(Dereference: [Reg: R8,4],32,64),Value: 40)

Resulting values:
Value A:
E_app (SExtend 32 64) [E_deref (E_reg R8) 4]
Value B:
E_app (SExtend 32 64) [E_deref (E_reg R8) 4]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_235 -> version_etc_va_2923 and .label_269 -> version_etc_va_4232 have been verified to do the same.

same_behavior for the nodes: .label_234 -> version_etc_va_2933 and .label_268 -> sub_4039f9_4249

same_behavior checking these two SStates:

SA || RAX := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8), R11 := Dereference: [(Reg: R8 + Value: 8),8]
SA || [(Reg: R8 + Value: 8),8] := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8)

SB || RAX := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8), R11 := Dereference: [(Reg: R8 + Value: 8),8]
SB || [(Reg: R8 + Value: 8),8] := (Dereference: [(Reg: R8 + Value: 8),8] + Value: 8)

Resulting values:
Value A:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8,E_val 8 64]
Value B:
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8,E_val 8 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg R8,E_val 8 64]
E_app (Op ADD) [E_reg R8,E_val 8 64]
(v1 := v2):
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8,E_val 8 64]
E_app (Op ADD) [E_deref (E_app (Op ADD) [E_reg R8,E_val 8 64]) 8,E_val 8 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_234 -> version_etc_va_2933 and .label_268 -> sub_4039f9_4249 have been verified to do the same.

same_behavior for the nodes: .label_236 -> version_etc_va_2938 and .label_270 -> sub_4039f9_4254

same_behavior checking these two SStates:

SA || RAX := Dereference: [Reg: R11,8]
SA || [((Var: RSP0 + TakeBits: <63,0>((Reg: R9 * Value: 8))) - Value: 88),8] := Dereference: [Reg: R11,8]
SA || ZF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), CF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), SF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), OF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), PF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8])

SB || RAX := Dereference: [Reg: R11,8]
SB || [((Var: RSP0 + TakeBits: <63,0>((Reg: R9 * Value: 8))) - Value: 88),8] := Dereference: [Reg: R11,8]
SB || ZF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), CF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), SF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), OF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8]), PF := TEST(Dereference: [Reg: R11,8],Dereference: [Reg: R11,8])

Resulting values:
Value A:
E_deref (E_reg R11) 8
Value B:
E_deref (E_reg R11) 8
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (TakeBits 63 0) [E_app (Op MUL) [E_reg R9,E_val 8 64]]],E_val 88 64]
E_app (Op SUB) [E_app (Op ADD) [E_var "RSP0" 64,E_app (TakeBits 63 0) [E_app (Op MUL) [E_reg R9,E_val 8 64]]],E_val 88 64]
(v1 := v2):
E_deref (E_reg R11) 8
E_deref (E_reg R11) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_236 -> version_etc_va_2938 and .label_270 -> sub_4039f9_4254 have been verified to do the same.

same_behavior for the nodes: .label_237 -> .label_237 and .label_271 -> .label_271

same_behavior checking these two SStates:

SA || R8 := (Var: RSP0 - Value: 88)

SB || R8 := (Var: RSP0 - Value: 88)

Resulting values:
Value A:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
Value B:
E_app (Op SUB) [E_var "RSP0" 64,E_val 88 64]
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_237 -> .label_237 and .label_271 -> .label_271 have been verified to do the same.

same_behavior for the nodes: version_etc_va_2944 -> version_etc_va_2944 and sub_4039f9_4260 -> sub_4039f9_4260

same_behavior checking these two SStates:

SA || RAX := version_etc_arn@()

SB || RAX := version_etc_arn@()

Resulting values:
Value A:
E_app (F2 "version_etc_arn" "") []
Value B:
E_app (F2 "version_etc_arn" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_va_2944 -> version_etc_va_2944 and sub_4039f9_4260 -> sub_4039f9_4260 have been verified to do the same.

same_behavior for the nodes: version_etc_va_2945 -> version_etc_va_2946 and sub_4039f9_4261 -> sub_4039f9_4262

same_behavior checking these two SStates:

SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_va_2945 -> version_etc_va_2946 and sub_4039f9_4261 -> sub_4039f9_4262 have been verified to do the same.

same_behavior for the nodes: version_etc_va_2939 -> version_etc_va_2941 and sub_4039f9_4255 -> sub_4039f9_4257

same_behavior checking these two SStates:

SA || R9 := (Reg: R9 + Value: 1)
SA || ZF := CMP((Reg: R9 + Value: 1),Value: 10), CF := CMP((Reg: R9 + Value: 1),Value: 10), SF := CMP((Reg: R9 + Value: 1),Value: 10), OF := CMP((Reg: R9 + Value: 1),Value: 10), PF := CMP((Reg: R9 + Value: 1),Value: 10)

SB || R9 := (Reg: R9 + Value: 1)
SB || ZF := CMP((Reg: R9 + Value: 1),Value: 10), CF := CMP((Reg: R9 + Value: 1),Value: 10), SF := CMP((Reg: R9 + Value: 1),Value: 10), OF := CMP((Reg: R9 + Value: 1),Value: 10), PF := CMP((Reg: R9 + Value: 1),Value: 10)

Resulting values:
Value A:
E_app (Op ADD) [E_reg R9,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg R9,E_val 1 8]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes version_etc_va_2939 -> version_etc_va_2941 and sub_4039f9_4255 -> sub_4039f9_4257 have been verified to do the same.

same_behavior for the nodes: version_etc_va_2924 -> version_etc_va_2928 and version_etc_va_4233 -> version_etc_va_4237

same_behavior checking these two SStates:

SA || RAX := TakeBits: <31,0>((Reg: R10 + Value: 8)), R11 := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
SA || [Reg: R8,4] := TakeBits: <31,0>((Reg: R10 + Value: 8))
SA || ZF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), CF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), SF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), OF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), PF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])

SB || RAX := TakeBits: <31,0>((Reg: R10 + Value: 8)), R11 := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])
SB || [Reg: R8,4] := TakeBits: <31,0>((Reg: R10 + Value: 8))
SB || ZF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), CF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), SF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), OF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8]), PF := (Reg: R10 + Dereference: [(Reg: R8 + Value: 16),8])

Resulting values:
Value A:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R10,E_val 8 64]]
Value B:
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R10,E_val 8 64]]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R10,E_deref (E_app (Op ADD) [E_reg R8,E_val 16 64]) 8]
Value B:
E_app (Op ADD) [E_reg R10,E_deref (E_app (Op ADD) [E_reg R8,E_val 16 64]) 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg R8
E_reg R8
(v1 := v2):
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R10,E_val 8 64]]
E_app (TakeBits 31 0) [E_app (Op ADD) [E_reg R10,E_val 8 64]]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes version_etc_va_2924 -> version_etc_va_2928 and version_etc_va_4233 -> version_etc_va_4237 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 88) <--> (Var: RSP0 - Value: 88)

Succesful check!
Considering text section (76/87): "quoting_options_from_style"
--------
.dot code for CFG of text section quoting_options_from_style for Vanilla
diGraph quoting_options_from_style_Vanilla{
	quoting_options_from_style_0  [label="[quoting_options_from_style_1880,quoting_options_from_style_1891]"]
	quoting_options_from_style_1  [label="[.label_178,.label_178]"]
	quoting_options_from_style_2  [label="[quoting_options_from_style,quoting_options_from_style_1879]"]



	quoting_options_from_style_2 -> quoting_options_from_style_1 [label="ZF"];
	quoting_options_from_style_2 -> quoting_options_from_style_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section quoting_options_from_style for Randomized
diGraph quoting_options_from_style_Randomized{
	quoting_options_from_style_0  [label="[quoting_options_from_style_1886,quoting_options_from_style_1897]"]
	quoting_options_from_style_1  [label="[.label_160(2,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
(2,fromList [(0,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 56) && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0)])
,.label_160]"]
	quoting_options_from_style_2  [label="[quoting_options_from_style,quoting_options_from_style_1885]"]



	quoting_options_from_style_2 -> quoting_options_from_style_1 [label="ZF"];
	quoting_options_from_style_2 -> quoting_options_from_style_0 [label="!ZF"];
}
--------
Starting Node: 2

Edges: , , 2 --ZF--> 1, 2 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quoting_options_from_style"
node 0:
RAX := Reg: RDI, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[Reg: RDI,4] := TakeBits: <31,0>(Reg: RSI), [(Reg: RDI + Value: 4),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Reg: RDI + Value: 20),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Reg: RDI + Value: 36),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Reg: RDI + Value: 52),4] := Dereference: [(Var: RSP0 - Value: 8),4]
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 1:
RAX := abort@()
node 2:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

Starting Node: 2

Edges: , , 2 --ZF--> 1, 2 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quoting_options_from_style"
node 0:
RAX := Reg: RDI, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
[Reg: RDI,4] := TakeBits: <31,0>(Reg: RSI), [(Reg: RDI + Value: 4),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Reg: RDI + Value: 20),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Reg: RDI + Value: 36),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Reg: RDI + Value: 52),4] := Dereference: [(Var: RSP0 - Value: 8),4]
ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0
node 1:
RAX := abort@()
node 2:
XMM0 := Value: 0
[(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)
--------

same_behavior for the nodes: quoting_options_from_style -> quoting_options_from_style_1879 and quoting_options_from_style -> quoting_options_from_style_1885

same_behavior checking these two SStates:

SA || XMM0 := Value: 0
SA || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SA || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

SB || XMM0 := Value: 0
SB || [(Var: RSP0 - Value: 8),4] := Value: 0, [(Var: RSP0 - Value: 24),16] := Value: 0, [(Var: RSP0 - Value: 40),16] := Value: 0, [(Var: RSP0 - Value: 56),16] := Value: 0
SB || ZF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), CF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), SF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), OF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10), PF := CMP(TakeBits: <31,0>(Reg: RSI),Value: 10)

Resulting values:
Value A:
E_val 0 64
Value B:
E_val 0 64
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_val 0 32
E_val 0 32
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]
(v1 := v2):
E_val 0 64
E_val 0 64
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quoting_options_from_style -> quoting_options_from_style_1879 and quoting_options_from_style -> quoting_options_from_style_1885 have been verified to do the same.

same_behavior for the nodes: .label_178 -> .label_178 and .label_160 -> .label_160

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_178 -> .label_178 and .label_160 -> .label_160 have been verified to do the same.

same_behavior for the nodes: quoting_options_from_style_1880 -> quoting_options_from_style_1891 and quoting_options_from_style_1886 -> quoting_options_from_style_1897

same_behavior checking these two SStates:

SA || RAX := Reg: RDI, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SA || [Reg: RDI,4] := TakeBits: <31,0>(Reg: RSI), [(Reg: RDI + Value: 4),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Reg: RDI + Value: 20),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Reg: RDI + Value: 36),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Reg: RDI + Value: 52),4] := Dereference: [(Var: RSP0 - Value: 8),4]
SA || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

SB || RAX := Reg: RDI, XMM0 := Dereference: [(Var: RSP0 - Value: 56),16], XMM1 := Dereference: [(Var: RSP0 - Value: 40),16], XMM2 := Dereference: [(Var: RSP0 - Value: 24),16]
SB || [Reg: RDI,4] := TakeBits: <31,0>(Reg: RSI), [(Reg: RDI + Value: 4),16] := Dereference: [(Var: RSP0 - Value: 56),16], [(Reg: RDI + Value: 20),16] := Dereference: [(Var: RSP0 - Value: 40),16], [(Reg: RDI + Value: 36),16] := Dereference: [(Var: RSP0 - Value: 24),16], [(Reg: RDI + Value: 52),4] := Dereference: [(Var: RSP0 - Value: 8),4]
SB || ZF := Var: RSP0, CF := Var: RSP0, SF := Var: RSP0, OF := Var: RSP0, PF := Var: RSP0

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
Value B:
E_(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_reg RDI
E_reg RDI
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True


local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RDI,E_val 4 64]
E_app (Op ADD) [E_reg RDI,E_val 4 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 56 64]) 16
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RDI,E_val 20 64]
E_app (Op ADD) [E_reg RDI,E_val 20 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 40 64]) 16
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RDI,E_val 36 64]
E_app (Op ADD) [E_reg RDI,E_val 36 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 16
b0: True b1: True


local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RDI,E_val 52 64]
E_app (Op ADD) [E_reg RDI,E_val 52 64]
(v1 := v2):
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 4
b0: True b1: True


local_var_cmp called

Mem Chk: True
Result: Success
Nodes quoting_options_from_style_1880 -> quoting_options_from_style_1891 and quoting_options_from_style_1886 -> quoting_options_from_style_1897 have been verified to do the same.

Label relationship:
 <--> 

Local variable relationship:
(Var: RSP0 - Value: 56) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 40) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 56),(Var: RSP0 - Value: 40),(Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (77/87): "quotearg_free"
--------
.dot code for CFG of text section quotearg_free for Vanilla
diGraph quotearg_free_Vanilla{
	quotearg_free_0  [label="[quotearg_free_1624,quotearg_free_1626]"]
	quotearg_free_1  [label="[.label_169,.label_169]"]
	quotearg_free_2  [label="[quotearg_free_1629,quotearg_free_1629]"]
	quotearg_free_3  [label="[quotearg_free_1630,quotearg_free_1634]"]
	quotearg_free_4  [label="[quotearg_free_1640,quotearg_free_1640]"]
	quotearg_free_5  [label="[quotearg_free_1641,quotearg_free_1642]"]
	quotearg_free_6  [label="[quotearg_free_1647,quotearg_free_1647]"]
	quotearg_free_7  [label="[quotearg_free_1648,quotearg_free_1648]"]
	quotearg_free_8  [label="[quotearg_free_1649,quotearg_free_1649]"]
	quotearg_free_9  [label="[.label_168,quotearg_free_1655]"]
	quotearg_free_10  [label="[.label_170,quotearg_free_1646]"]
	quotearg_free_11  [label="[.label_166,quotearg_free_1639]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_1623]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_3;
	quotearg_free_3 -> quotearg_free_1 [label="SF != OF"];
	quotearg_free_3 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_4 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_11 [label="SF != OF"];
	quotearg_free_12 -> quotearg_free_0 [label="SF == OF"];
}
--------
--------
.dot code for CFG of text section quotearg_free for Randomized
diGraph quotearg_free_Randomized{
	quotearg_free_0  [label="[quotearg_free_319,quotearg_free_321]"]
	quotearg_free_1  [label="[.label_15,.label_15]"]
	quotearg_free_2  [label="[quotearg_free_324,quotearg_free_324]"]
	quotearg_free_3  [label="[quotearg_free_325,quotearg_free_329]"]
	quotearg_free_4  [label="[quotearg_free_335,quotearg_free_335]"]
	quotearg_free_5  [label="[quotearg_free_336,quotearg_free_337]"]
	quotearg_free_6  [label="[quotearg_free_342,quotearg_free_342]"]
	quotearg_free_7  [label="[quotearg_free_343,quotearg_free_343]"]
	quotearg_free_8  [label="[quotearg_free_344,quotearg_free_344]"]
	quotearg_free_9  [label="[.label_14,quotearg_free_350]"]
	quotearg_free_10  [label="[.label_16,quotearg_free_341]"]
	quotearg_free_11  [label="[.label_13,quotearg_free_334]"]
	quotearg_free_12  [label="[quotearg_free,quotearg_free_318]"]

	quotearg_free_0 -> quotearg_free_1;
	quotearg_free_1 -> quotearg_free_2;
	quotearg_free_2 -> quotearg_free_3;
	quotearg_free_3 -> quotearg_free_1 [label="SF != OF"];
	quotearg_free_3 -> quotearg_free_11 [label="SF == OF"];
	quotearg_free_4 -> quotearg_free_5;
	quotearg_free_5 -> quotearg_free_10;
	quotearg_free_6 -> quotearg_free_7;
	quotearg_free_7 -> quotearg_free_8;
	quotearg_free_8 -> quotearg_free_9;

	quotearg_free_10 -> quotearg_free_9 [label="ZF"];
	quotearg_free_10 -> quotearg_free_6 [label="!ZF"];
	quotearg_free_11 -> quotearg_free_10 [label="ZF"];
	quotearg_free_11 -> quotearg_free_4 [label="!ZF"];
	quotearg_free_12 -> quotearg_free_11 [label="SF != OF"];
	quotearg_free_12 -> quotearg_free_0 [label="SF == OF"];
}
--------
Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 --SF != OF--> 1, 3 --SF == OF--> 11, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 4, 12 --SF != OF--> 11, 12 --SF == OF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "quotearg_free"
node 0:
RBX := Value: 1, R15 := (Reg: R14 + Value: 24)
node 1:
RDI := Dereference: [Reg: R15,8]
node 2:
RAX := free@()
node 3:
RAX := sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64))
node 4:
RAX := free@()
node 5:
[(Var: quotearg_free_1641 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_167),8] := Dereference: [Var: slot0,8]
node 6:
RDI := Reg: R14
node 7:
RAX := free@()
node 8:
[(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: .label_168 + Var: nslots),4] := Value: 1
node 10:
RAX := Dereference: [Var: slotvec0,4]
ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])
node 11:
RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]),(12,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == Var: RSP0 && RBP == Var: RBP0)])
 OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])
node 12:
R14 := Dereference: [(Var: quotearg_free_1621 + Var: slotvec),8]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2)
--------

Starting Node: 12

Edges: 0 ----> 1, 1 ----> 2, 2 ----> 3, 3 --SF != OF--> 1, 3 --SF == OF--> 11, 4 ----> 5, 5 ----> 10, 6 ----> 7, 7 ----> 8, 8 ----> 9, , 10 --ZF--> 9, 10 --!ZF--> 6, 11 --ZF--> 10, 11 --!ZF--> 4, 12 --SF != OF--> 11, 12 --SF == OF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "quotearg_free"
node 0:
RBX := Value: 1, R15 := (Reg: R14 + Value: 24)
node 1:
RDI := Dereference: [Reg: R15,8]
node 2:
RAX := free@()
node 3:
RAX := sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64))
node 4:
RAX := free@()
node 5:
[(Var: quotearg_free_336 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_17),8] := Dereference: [Var: slot0,8]
node 6:
RDI := Reg: R14
node 7:
RAX := free@()
node 8:
[(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]
node 9:
RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
[(Var: .label_14 + Var: nslots),4] := Value: 1
node 10:
RAX := Dereference: [Var: slotvec0,4]
ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])
node 11:
RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])
node 12:
R14 := Dereference: [(Var: quotearg_free_316 + Var: slotvec),8]
[(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
ZF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2)
--------

same_behavior for the nodes: quotearg_free -> quotearg_free_1623 and quotearg_free -> quotearg_free_318

same_behavior checking these two SStates:

SA || R14 := Dereference: [(Var: quotearg_free_1621 + Var: slotvec),8]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SA || ZF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_1622 + Var: nslots),4],Value: 2)

SB || R14 := Dereference: [(Var: quotearg_free_316 + Var: slotvec),8]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R15, [(Var: RSP0 - Value: 16),8] := Reg: R14, [(Var: RSP0 - Value: 24),8] := Reg: RBX
SB || ZF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), CF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), SF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), OF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2), PF := CMP(Dereference: [(Var: quotearg_free_317 + Var: nslots),4],Value: 2)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "quotearg_free_1621" 64,E_var "slotvec" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "quotearg_free_316" 64,E_var "slotvec" 64]) 8
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R15
E_reg R15
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes quotearg_free -> quotearg_free_1623 and quotearg_free -> quotearg_free_318 have been verified to do the same.

same_behavior for the nodes: .label_166 -> quotearg_free_1639 and .label_13 -> quotearg_free_334

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
SA || ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])

SB || RAX := Dereference: [Var: slot0,4], RDI := Dereference: [(Reg: R14 + Value: 8),8]
SB || ZF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), CF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), SF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), OF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4]), PF := CMP(Dereference: [(Reg: R14 + Value: 8),8],Dereference: [Var: slot0,4])

Resulting values:
Value A:
E_deref (E_var "slot0" 64) 4
Value B:
E_deref (E_var "slot0" 64) 4
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg R14,E_val 8 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_166 -> quotearg_free_1639 and .label_13 -> quotearg_free_334 have been verified to do the same.

same_behavior for the nodes: .label_170 -> quotearg_free_1646 and .label_16 -> quotearg_free_341

same_behavior checking these two SStates:

SA || RAX := Dereference: [Var: slotvec0,4]
SA || ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])

SB || RAX := Dereference: [Var: slotvec0,4]
SB || ZF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), CF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), SF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), OF := CMP(Reg: R14,Dereference: [Var: slotvec0,4]), PF := CMP(Reg: R14,Dereference: [Var: slotvec0,4])

Resulting values:
Value A:
E_deref (E_var "slotvec0" 64) 4
Value B:
E_deref (E_var "slotvec0" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_170 -> quotearg_free_1646 and .label_16 -> quotearg_free_341 have been verified to do the same.

same_behavior for the nodes: .label_168 -> quotearg_free_1655 and .label_14 -> quotearg_free_350

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SA || [(Var: .label_168 + Var: nslots),4] := Value: 1

SB || RBX := Dereference: [(Var: RSP0 - Value: 24),8], R15 := Dereference: [(Var: RSP0 - Value: 8),8], R14 := Dereference: [(Var: RSP0 - Value: 16),8]
SB || [(Var: .label_14 + Var: nslots),4] := Value: 1

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_168" 64,E_var "nslots" 64]
E_app (Op ADD) [E_var ".label_14" 64,E_var "nslots" 64]
(v1 := v2):
E_val 1 32
E_val 1 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_168 -> quotearg_free_1655 and .label_14 -> quotearg_free_350 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1647 -> quotearg_free_1647 and quotearg_free_342 -> quotearg_free_342

same_behavior checking these two SStates:

SA || RDI := Reg: R14

SB || RDI := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1647 -> quotearg_free_1647 and quotearg_free_342 -> quotearg_free_342 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1648 -> quotearg_free_1648 and quotearg_free_343 -> quotearg_free_343

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1648 -> quotearg_free_1648 and quotearg_free_343 -> quotearg_free_343 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1649 -> quotearg_free_1649 and quotearg_free_344 -> quotearg_free_344

same_behavior checking these two SStates:

SA || [(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]

SB || [(Var: returned + Var: slotvec),8] := Dereference: [Var: slotvec0,8]

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "slotvec" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "slotvec" 64]
(v1 := v2):
E_deref (E_var "slotvec0" 64) 8
E_deref (E_var "slotvec0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_1649 -> quotearg_free_1649 and quotearg_free_344 -> quotearg_free_344 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1640 -> quotearg_free_1640 and quotearg_free_335 -> quotearg_free_335

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1640 -> quotearg_free_1640 and quotearg_free_335 -> quotearg_free_335 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1641 -> quotearg_free_1642 and quotearg_free_336 -> quotearg_free_337

same_behavior checking these two SStates:

SA || [(Var: quotearg_free_1641 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_167),8] := Dereference: [Var: slot0,8]

SB || [(Var: quotearg_free_336 + Var: slotvec0),8] := Value: 256, [(Var: returned + Var: label_17),8] := Dereference: [Var: slot0,8]

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "quotearg_free_1641" 64,E_var "slotvec0" 64]
E_app (Op ADD) [E_var "quotearg_free_336" 64,E_var "slotvec0" 64]
(v1 := v2):
E_val 256 64
E_val 256 64
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "label_167" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "label_17" 64]
(v1 := v2):
E_deref (E_var "slot0" 64) 8
E_deref (E_var "slot0" 64) 8
b0: True b1: True


Mem Chk: True
Result: Success
Nodes quotearg_free_1641 -> quotearg_free_1642 and quotearg_free_336 -> quotearg_free_337 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1624 -> quotearg_free_1626 and quotearg_free_319 -> quotearg_free_321

same_behavior checking these two SStates:

SA || RBX := Value: 1, R15 := (Reg: R14 + Value: 24)

SB || RBX := Value: 1, R15 := (Reg: R14 + Value: 24)

Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 24 64]
Value B:
E_app (Op ADD) [E_reg R14,E_val 24 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1624 -> quotearg_free_1626 and quotearg_free_319 -> quotearg_free_321 have been verified to do the same.

same_behavior for the nodes: .label_169 -> .label_169 and .label_15 -> .label_15

same_behavior checking these two SStates:

SA || RDI := Dereference: [Reg: R15,8]

SB || RDI := Dereference: [Reg: R15,8]

Resulting values:
Value A:
E_deref (E_reg R15) 8
Value B:
E_deref (E_reg R15) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_169 -> .label_169 and .label_15 -> .label_15 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1629 -> quotearg_free_1629 and quotearg_free_324 -> quotearg_free_324

same_behavior checking these two SStates:

SA || RAX := free@()

SB || RAX := free@()

Resulting values:
Value A:
E_app (F2 "free" "") []
Value B:
E_app (F2 "free" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1629 -> quotearg_free_1629 and quotearg_free_324 -> quotearg_free_324 have been verified to do the same.

same_behavior for the nodes: quotearg_free_1630 -> quotearg_free_1634 and quotearg_free_325 -> quotearg_free_329

same_behavior checking these two SStates:

SA || RAX := sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
SA || ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_1631 + Var: nslots),4],32,64))

SB || RAX := sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64), RBX := (Reg: RBX + Value: 1), R15 := (Reg: R15 + Value: 16)
SB || ZF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), CF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), SF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), OF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64)), PF := CMP((Reg: RBX + Value: 1),sextend(Dereference: [(Var: quotearg_free_326 + Var: nslots),4],32,64))

Resulting values:
Value A:
E_app (SExtend 32 64) [E_deref (E_app (Op ADD) [E_var "quotearg_free_1631" 64,E_var "nslots" 64]) 4]
Value B:
E_app (SExtend 32 64) [E_deref (E_app (Op ADD(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
(4,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0),(1,RSP == Var: RSP0 && RBP == Var: RBP0),(2,RSP == Var: RSP0 && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 8) && RBP == Var: RBP0),(4,RSP == Var: RSP0 && RBP == Var: RBP0)])
) [E_var "quotearg_free_326" 64,E_var "nslots" 64]) 4]
Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 1 8]
Resulting values:
Value A:
E_app (Op ADD) [E_reg R15,E_val 16 64]
Value B:
E_app (Op ADD) [E_reg R15,E_val 16 64]
Reg Chk: True
Mem Chk: True
Result: Success
Nodes quotearg_free_1630 -> quotearg_free_1634 and quotearg_free_325 -> quotearg_free_329 have been verified to do the same.

Label relationship:
quotearg_free_1631 <--> quotearg_free_326
label_167 <--> label_17
quotearg_free_1641 <--> quotearg_free_336
returned <--> returned
 <--> 
nslots <--> nslots
.label_168 <--> .label_14
slotvec0 <--> slotvec0
slot0 <--> slot0
slotvec <--> slotvec
quotearg_free_1621 <--> quotearg_free_316

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (78/87): "set_custom_quoting"
--------
.dot code for CFG of text section set_custom_quoting for Vanilla
diGraph set_custom_quoting_Vanilla{
	set_custom_quoting_0  [label="[set_custom_quoting_440,set_custom_quoting_442]"]
	set_custom_quoting_1  [label="[set_custom_quoting_438,set_custom_quoting_439]"]
	set_custom_quoting_2  [label="[.label_49,.label_49]"]
	set_custom_quoting_3  [label="[set_custom_quoting_445,set_custom_quoting_445]"]
	set_custom_quoting_4  [label="[set_custom_quoting,set_custom_quoting_437]"]


	set_custom_quoting_1 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_1 -> set_custom_quoting_0 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3;

	set_custom_quoting_4 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_1 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_custom_quoting for Randomized
diGraph set_custom_quoting_Randomized{
	set_custom_quoting_0  [label="[set_custom_quoting_2578,set_custom_quoting_2580]"]
	set_custom_quoting_1  [label="[set_custom_quoting_2576,set_custom_quoting_2577]"]
	set_custom_quoting_2  [label="[.label_192,.label_192]"]
	set_custom_quoting_3  [label="[sub_402d46_2554,sub_402d46_2554]"]
	set_custom_quoting_4  [label="[set_custom_quoting,set_custom_quoting_2575]"]


	set_custom_quoting_1 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_1 -> set_custom_quoting_0 [label="!ZF"];
	set_custom_quoting_2 -> set_custom_quoting_3;

	set_custom_quoting_4 -> set_custom_quoting_2 [label="ZF"];
	set_custom_quoting_4 -> set_custom_quoting_1 [label="!ZF"];
}
--------
Starting Node: 4

Edges: , 1 --ZF--> 2, 1 --!ZF--> 0, 2 ----> 3, , 4 --ZF--> 2, 4 --!ZF--> 1

Symbolic Execution for Binary "Vanilla":
Current text section: "set_custom_quoting"
node 0:
[(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX
node 1:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 2:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := abort@()
node 4:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

Starting Node: 4

Edges: , 1 --ZF--> 2, 1 --!ZF--> 0, 2 ----> 3, , 4 --ZF--> 2, 4 --!ZF--> 1

Symbolic Execution for Binary "Randomized":
Current text section: "set_custom_quoting"
node 0:
[(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX
node 1:
ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)
node 2:
[(Var: RSP0 - Value: 8),8] := Reg: RAX
node 3:
RAX := abort@()
node 4:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)
--------

same_behavior for the nodes: set_custom_quoting -> set_custom_quoting_437 and set_custom_quoting -> set_custom_quoting_2575

same_behavior checking these two SStates:

SA || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SA || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
SA || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

SB || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := Value: 10
SB || ZF := TEST(Reg: RSI,Reg: RSI), CF := TEST(Reg: RSI,Reg: RSI), SF := TEST(Reg: RSI,Reg: RSI), OF := TEST(Reg: RSI,Reg: RSI), PF := TEST(Reg: RSI,Reg: RSI)

Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
(v1 := v2):
E_val 10 32
E_val 10 32
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_custom_quoting -> set_custom_quoting_437 and set_custom_quoting -> set_custom_quoting_2575 have been verified to do the same.

same_behavior for the nodes: .label_49 -> .label_49 and .label_192 -> .label_192

same_behavior checking these two SStates:

SA || [(Var: RSP0 - Value: 8),8] := Reg: RAX

SB || [(Var: RSP0 - Value: 8),8] := Reg: RAX

Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes .label_49 -> .label_49 and .label_192 -> .label_192 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_445 -> set_custom_quoting_445 and sub_402d46_2554 -> sub_402d46_2554

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_445 -> set_custom_quoting_445 and sub_402d46_2554 -> sub_402d46_2554 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_438 -> set_custom_quoting_439 and set_custom_quoting_2576 -> set_custom_quoting_2577

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

SB || ZF := TEST(Reg: RDX,Reg: RDX), CF := TEST(Reg: RDX,Reg: RDX), SF := TEST(Reg: RDX,Reg: RDX), OF := TEST(Reg: RDX,Reg: RDX), PF := TEST(Reg: RDX,Reg: RDX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_custom_quoting_438 -> set_custom_quoting_439 and set_custom_quoting_2576 -> set_custom_quoting_2577 have been verified to do the same.

same_behavior for the nodes: set_custom_quoting_440 -> set_custom_quoting_442 and set_custom_quoting_2578 -> set_custom_quoting_2580

same_behavior checking these two SStates:

SA || [(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX

SB || [(Reg: RAX + Value: 40),8] := Reg: RSI, [(Reg: RAX + Value: 48),8] := Reg: RDX

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RAX,E_val 40 64]
E_app (Op ADD) [E_reg RAX,E_(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
val 40 64]
(v1 := v2):
E_reg RSI
E_reg RSI
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_reg RAX,E_val 48 64]
E_app (Op ADD) [E_reg RAX,E_val 48 64]
(v1 := v2):
E_reg RDX
E_reg RDX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_custom_quoting_440 -> set_custom_quoting_442 and set_custom_quoting_2578 -> set_custom_quoting_2580 have been verified to do the same.

Label relationship:
 <--> 
default_quoting_options <--> default_quoting_options

Local variable relationship:
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (79/87): "set_quoting_flags"
--------
.dot code for CFG of text section set_quoting_flags for Vanilla
diGraph set_quoting_flags_Vanilla{
	set_quoting_flags_0  [label="[set_quoting_flags,set_quoting_flags_423]"]


}
--------
--------
.dot code for CFG of text section set_quoting_flags for Randomized
diGraph set_quoting_flags_Randomized{
	set_quoting_flags_0  [label="[set_quoting_flags,set_quoting_flags_209]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_flags"
node 0:
RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_quoting_flags -> set_quoting_flags_423 and set_quoting_flags -> set_quoting_flags_209

same_behavior checking these two SStates:

SA || RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SA || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4], RCX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + Value: 4),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]) 4
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_val 4 64]
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_quoting_flags -> set_quoting_flags_423 and set_quoting_flags -> set_quoting_flags_209 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (80/87): "set_char_quoting"
--------
.dot code for CFG of text section set_char_quoting for Vanilla
diGraph set_char_quoting_Vanilla{
	set_char_quoting_0  [label="[set_char_quoting,set_char_quoting_409]"]


}
--------
--------
.dot code for CFG of text section set_char_quoting for Randomized
diGraph set_char_quoting_Randomized{
	set_char_quoting_0  [label="[set_char_quoting,set_char_quoting_2916]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_char_quoting"
node 0:
RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_char_quoting"
node 0:
RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
[((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
--------

same_behavior for the nodes: set_char_quoting -> set_char_quoting_409 and set_char_quoting -> set_char_quoting_2916

same_behavior checking these two SStates:

SA || RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
SA || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
SA || ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])

SB || RAX := AND(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),Value: 1), RCX := TakeBits: <31,0>(Reg: RSI), RDI := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), RSI := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]), R9 := Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4], R8 := SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5)
SB || [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4] := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])
SB || ZF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), CF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), SF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), OF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4]), PF := XOR(SHL(zextend(AND(XOR(SHR(zextend(Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4],Value: 32),TakeBits: <7,0>(Reg: RSI)),TakeBits: <31,0>(Reg: RDX)),Value: 1),Value: 32),TakeBits: <7,0>(Reg: RSI)),Dereference: [((if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]) + (TakeBits: <63,0>((SHR(zextend(TakeBits: <7,0>(Reg: RSI),Value: 8),Value: 5) * Value: 4)) + Value: 8)),4])

Resulting values:
Value A:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]
Value B:
E_app (Op AND) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_val 1 32]
Resulting values:
Value A:
E_app (TakeBits 31 0) [E_reg RSI]
Value B:
E_app (TakeBits 31 0) [E_reg RSI]
Resulting values:
Value A:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
Value B:
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4
Value B:
E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4
Resulting values:
Value A:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8]
Value B:
E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]
E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]
(v1 := v2):
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
E_app (Op XOR) [E_app (Op SHL) [E_app (F zextend) [E_app (Op AND) [E_app (Op XOR) [E_app (Op SHR) [E_app (F zextend) [E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4,E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_app (TakeBits 31 0) [E_reg RDX]],E_val 1 32],E_val 32 (-1)],E_app (TakeBits 7 0) [E_reg RSI]],E_deref (E_app (Op ADD) [E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4),E_app (Op ADD) [E_app (TakeBits 63 0) [E_app (Op MUL) [E_app (Op SHR) [E_app (F zextend) [E_app (TakeBits 7 0) [E_reg RSI],E_val 8 (-1)],E_val 5 8],E_val 4 64]],E_val 8 64]]) 4]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_char_quoting -> set_char_quoting_409 and set_char_quoting -> set_char_quoting_2916 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (81/87): "set_quoting_style"
--------
.dot code for CFG of text section set_quoting_style for Vanilla
diGraph set_quoting_style_Vanilla{
	set_quoting_style_0  [label="[set_quoting_style,(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
set_quoting_style_383]"]


}
--------
--------
.dot code for CFG of text section set_quoting_style for Randomized
diGraph set_quoting_style_Randomized{
	set_quoting_style_0  [label="[set_quoting_style,set_quoting_style_3194]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "set_quoting_style"
node 0:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "set_quoting_style"
node 0:
RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
[(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_quoting_style -> set_quoting_style_383 and set_quoting_style -> set_quoting_style_3194

same_behavior checking these two SStates:

SA || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SA || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := (if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4])
SB || [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4] := TakeBits: <31,0>(Reg: RSI)
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Value B:
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
Reg Chk: True
Else resulting values:
(a1 := a2):
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)
(v1 := v2):
E_app (TakeBits 31 0) [E_reg RSI]
E_app (TakeBits 31 0) [E_reg RSI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_quoting_style -> set_quoting_style_383 and set_quoting_style -> set_quoting_style_3194 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (82/87): "get_quoting_style"
--------
.dot code for CFG of text section get_quoting_style for Vanilla
diGraph get_quoting_style_Vanilla{
	get_quoting_style_0  [label="[get_quoting_style,get_quoting_style_370]"]


}
--------
--------
.dot code for CFG of text section get_quoting_style for Randomized
diGraph get_quoting_style_Randomized{
	get_quoting_style_0  [label="[get_quoting_style,get_quoting_style_4210]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "get_quoting_style"
node 0:
RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: get_quoting_style -> get_quoting_style_370 and get_quoting_style -> get_quoting_style_4210

same_behavior checking these two SStates:

SA || RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RAX := Dereference: [(if (Reg: RDI != Value: 0) then Reg: RDI else Dereference: [Var: default_quoting_options,4]),4]
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_deref (E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Value B:
E_deref (E_ite (E_app (F !=) [E_reg RDI,E_val 0 (-1)]) (E_reg RDI) (E_deref (E_var "default_quoting_options" 64) 4)) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes get_quoting_style -> get_quoting_style_370 and get_quoting_style -> get_quoting_style_4210 have been verified to do the same.

Label relationship:
default_quoting_options <--> default_quoting_options

Local variable relationship:

Succesful check!
Considering text section (83/87): "set_program_name"
--------
.dot code for CFG of text section set_program_name for Vanilla
diGraph set_program_name_Vanilla{
	set_program_name_0  [label="[set_program_name_314,set_program_name_315]"]
	set_program_name_1  [label="[.label_48,.label_48]"]
	set_program_name_2  [label="[set_program_name_308,set_program_name_310]"]
	set_program_name_3  [label="[set_program_name_311,set_program_name_311]"]
	set_program_name_4  [label="[set_program_name_312,set_program_name_313]"]
	set_program_name_5  [label="[set_program_name_302,set_program_name_304]"]
	set_program_name_6  [label="[set_program_name_305,set_program_name_305]"]
	set_program_name_7  [label="[set_program_name_306,set_program_name_307]"]
	set_program_name_8  [label="[.label_45,set_program_name_324]"]
	set_program_name_9  [label="[set_program_name_292,set_program_name_293]"]
	set_program_name_10  [label="[set_program_name_294,set_program_name_294]"]
	set_program_name_11  [label="[set_program_name_295,set_program_name_301]"]
	set_program_name_12  [label="[.label_43,set_program_name_329]"]
	set_program_name_13  [label="[set_program_name_330,set_program_name_330]"]
	set_program_name_14  [label="[set_program_name_331,set_program_name_331]"]
	set_program_name_15  [label="[set_program_name,set_program_name_291]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_8;
	set_program_name_2 -> set_program_name_3;
	set_program_name_3 -> set_program_name_4;
	set_program_name_4 -> set_program_name_1 [label="!ZF"];
	set_program_name_4 -> set_program_name_0 [label="ZF"];
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_7;
	set_program_name_7 -> set_program_name_8 [label="!ZF"];
	set_program_name_7 -> set_program_name_2 [label="ZF"];

	set_program_name_9 -> set_program_name_10;
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_8 [label="SF != OF"];
	set_program_name_11 -> set_program_name_5 [label="SF == OF"];
	set_program_name_12 -> set_program_name_13;
	set_program_name_13 -> set_program_name_14;

	set_program_name_15 -> set_program_name_12 [label="ZF"];
	set_program_name_15 -> set_program_name_9 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section set_program_name for Randomized
diGraph set_program_name_Randomized{
	set_program_name_0  [label="[set_program_name_2690,set_program_name_2691]"]
	set_program_name_1  [label="[.label_196,.label_196]"]
	set_program_name_2  [label="[set_(15,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
(15,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0)])
program_name_2684,set_program_name_2686]"]
	set_program_name_3  [label="[set_program_name_2687,set_program_name_2687]"]
	set_program_name_4  [label="[set_program_name_2688,set_program_name_2689]"]
	set_program_name_5  [label="[set_program_name_2678,set_program_name_2680]"]
	set_program_name_6  [label="[set_program_name_2681,set_program_name_2681]"]
	set_program_name_7  [label="[set_program_name_2682,set_program_name_2683]"]
	set_program_name_8  [label="[.label_197,set_program_name_2700]"]
	set_program_name_9  [label="[set_program_name_2668,set_program_name_2669]"]
	set_program_name_10  [label="[set_program_name_2670,set_program_name_2670]"]
	set_program_name_11  [label="[set_program_name_2671,set_program_name_2677]"]
	set_program_name_12  [label="[.label_198,set_program_name_2705]"]
	set_program_name_13  [label="[set_program_name_2706,set_program_name_2706]"]
	set_program_name_14  [label="[set_program_name_2707,set_program_name_2707]"]
	set_program_name_15  [label="[set_program_name,set_program_name_2667]"]

	set_program_name_0 -> set_program_name_1;
	set_program_name_1 -> set_program_name_8;
	set_program_name_2 -> set_program_name_3;
	set_program_name_3 -> set_program_name_4;
	set_program_name_4 -> set_program_name_1 [label="!ZF"];
	set_program_name_4 -> set_program_name_0 [label="ZF"];
	set_program_name_5 -> set_program_name_6;
	set_program_name_6 -> set_program_name_7;
	set_program_name_7 -> set_program_name_8 [label="!ZF"];
	set_program_name_7 -> set_program_name_2 [label="ZF"];

	set_program_name_9 -> set_program_name_10;
	set_program_name_10 -> set_program_name_11;
	set_program_name_11 -> set_program_name_8 [label="SF != OF"];
	set_program_name_11 -> set_program_name_5 [label="SF == OF"];
	set_program_name_12 -> set_program_name_13;
	set_program_name_13 -> set_program_name_14;

	set_program_name_15 -> set_program_name_12 [label="ZF"];
	set_program_name_15 -> set_program_name_9 [label="!ZF"];
}
--------
Starting Node: 15

Edges: 0 ----> 1, 1 ----> 8, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 1, 4 --ZF--> 0, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 8, 7 --ZF--> 2, , 9 ----> 10, 10 ----> 11, 11 --SF != OF--> 8, 11 --SF == OF--> 5, 12 ----> 13, 13 ----> 14, , 15 --ZF--> 12, 15 --!ZF--> 9

Symbolic Execution for Binary "Vanilla":
Current text section: "set_program_name"
node 0:
R14 := (Reg: R14 + Value: 3)
[(Var: returned + Var: __progname),8] := (Reg: R14 + Value: 3)
ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)
node 1:
RBX := Reg: R14
node 2:
RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: label_46,4]
node 3:
RAX := strncmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: label_47,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
[(Var: .label_45 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_320 + Var: __progname_full),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 9:
RDI := Reg: RBX, RSI := Value: 47
node 10:
RAX := strrchr@()
node 11:
RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)
node 12:
RCX := Dereference: [(Var: .label_43 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: label_44,4], RSI := Value: 55
node 13:
RAX := fwrite@()
node 14:
RAX := abort@()
node 15:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

Starting Node: 15

Edges: 0 ----> 1, 1 ----> 8, 2 ----> 3, 3 ----> 4, 4 --!ZF--> 1, 4 --ZF--> 0, 5 ----> 6, 6 ----> 7, 7 --!ZF--> 8, 7 --ZF--> 2, , 9 ----> 10, 10 ----> 11, 11 --SF != OF--> 8, 11 --SF == OF--> 5, 12 ----> 13, 13 ----> 14, , 15 --ZF--> 12, 15 --!ZF--> 9

Symbolic Execution for Binary "Randomized":
Current text section: "set_program_name"
node 0:
R14 := (Reg: R14 + Value: 3)
[(Var: returned + Var: __progname),8] := (Reg: R14 + Value: 3)
ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)
node 1:
RBX := Reg: R14
node 2:
RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: label_200,4]
node 3:
RAX := strncmp@()
node 4:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 5:
RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: label_195,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
[(Var: .label_197 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_2696 + Var: __progname_full),8] := Reg: RBX
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 9:
RDI := Reg: RBX, RSI := Value: 47
node 10:
RAX := strrchr@()
node 11:
RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)
node 12:
RCX := Dereference: [(Var: .label_198 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: label_199,4], RSI := Value: 55
node 13:
RAX := fwrite@()
node 14:
RAX := abort@()
node 15:
RBX := Reg: RDI
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)
--------

same_behavior for the nodes: set_program_name -> set_program_name_291 and set_program_name -> set_program_name_2667

same_behavior checking these two SStates:

SA || RBX := Reg: RDI
SA || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SA || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

SB || RBX := Reg: RDI
SB || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
SB || ZF := TEST(Reg: RDI,Reg: RDI), CF := TEST(Reg: RDI,Reg: RDI), SF := TEST(Reg: RDI,Reg: RDI), OF := TEST(Reg: RDI,Reg: RDI), PF := TEST(Reg: RDI,Reg: RDI)

Resulting values:
Value A:
E_reg RDI
Value B:
E_reg RDI
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes set_program_name -> set_program_name_291 and set_program_name -> set_program_name_2667 have been verified to do the same.

same_behavior for the nodes: .label_43 -> set_program_name_329 and .label_198 -> set_program_name_2705

same_behavior checking these two SStates:

SA || RCX := Dereference: [(Var: .label_43 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: label_44,4], RSI := Value: 55

SB || RCX := Dereference: [(Var: .label_198 + Var: stderr),8], RDX := Value: 1, RDI := Dereference: [Var: label_199,4], RSI := Value: 55

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var ".label_43" 64,E_var "stderr" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var ".label_198" 64,E_var "stderr" 64]) 8
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_deref (E_var "label_44" 64) 4
Value B:
E_deref (E_var "label_199" 64) 4
Resulting values:
Value A:
E_val 55 32
Value B:
E_val 55 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_43 -> set_program_name_329 and .label_198 -> set_program_name_2705 have been verified to do the same.

same_behavior for the nodes: set_program_name_330 -> set_program_name_330 and set_program_name_2706 -> set_program_name_2706

same_behavior checking these two SStates:

SA || RAX := fwrite@()

SB || RAX := fwrite@()

Resulting values:
Value A:
E_app (F2 "fwrite" "") []
Value B:
E_app (F2 "fwrite" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_330 -> set_program_name_330 and set_program_name_2706 -> set_program_name_2706 have been verified to do the same.

same_behavior for the nodes: set_program_name_331 -> set_program_name_331 and set_program_name_2707 -> set_program_name_2707

same_behavior checking these two SStates:

SA || RAX := abort@()

SB || RAX := abort@()

Resulting values:
Value A:
E_app (F2 "abort" "") []
Value B:
E_app (F2 "abort" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_331 -> set_program_name_331 and set_program_name_2707 -> set_program_name_2707 have been verified to do the same.

same_behavior for the nodes: set_program_name_292 -> set_program_name_293 and set_program_name_2668 -> set_program_name_2669

same_behavior checking these two SStates:

SA || RDI := Reg: RBX, RSI := Value: 47

SB || RDI := Reg: RBX, RSI := Value: 47

Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 47 32
Value B:
E_val 47 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_292 -> set_program_name_293 and set_program_name_2668 -> set_program_name_2669 have been verified to do the same.

same_behavior for the nodes: set_program_name_294 -> set_program_name_294 and set_program_name_2670 -> set_program_name_2670

same_behavior checking these two SStates:

SA || RAX := strrchr@()

SB || RAX := strrchr@()

Resulting values:
Value A:
E_app (F2 "strrchr" "") []
Value B:
E_app (F2 "strrchr" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_294 -> set_program_name_294 and set_program_name_2670 -> set_program_name_2670 have been verified to do the same.

same_behavior for the nodes: set_program_name_295 -> set_program_name_301 and set_program_name_2671 -> set_program_name_2677

same_behavior checking these two SStates:

SA || RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
SA || ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)

SB || RAX := ((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX), R14 := (if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1))
SB || ZF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), CF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), SF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), OF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7), PF := CMP(((if (Reg: RAX == Value: 0) then Reg: RBX else (Reg: RAX + Value: 1)) - Reg: RBX),Value: 7)

Resulting values:
Value A:
E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]
Value B:
E_app (Op SUB) [E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64]),E_reg RBX]
Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64])
Value B:
E_ite (E_app (F ==) [E_reg RAX,E_val 0 (-1)]) (E_reg RBX) (E_app (Op ADD) [E_reg RAX,E_val 1 64])
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_295 -> set_program_name_301 and set_program_name_2671 -> set_program_name_2677 have been verified to do the same.

same_behavior for the nodes: .label_45 -> set_program_name_324 and .label_197 -> set_program_name_2700

same_behavior checking these two SStates:

SA || RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SA || [(Var: .label_45 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_320 + Var: __progname_full),8] := Reg: RBX
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RBX := Dereference: [(Var: RSP0 - Value: 16),8], R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SB || [(Var: .label_197 + Var: program_name),8] := Reg: RBX, [(Var: set_program_name_2696 + Var: __progname_full),8] := Reg: RBX
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_45" 64,E_var "program_name" 64]
E_app (Op ADD) [E_var ".label_197" 64,E_var "program_name" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var ".label_45" 64,E_var "program_name" 64]
E_app (Op ADD) [E_var "set_program_name_2696" 64,E_var "__progname_full" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "set_program_name_320" 64,E_var "__progname_full" 64]
E_app (Op ADD) [E_var ".label_197" 64,E_var "program_name" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "set_program_name_320" 64,E_var "__progname_full" 64]
E_app (Op ADD) [E_var "set_program_name_2696" 64,E_var "__progname_full" 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True


Mem Chk: True
Result: Success
Nodes .label_45 -> set_program_name_324 and .label_197 -> set_program_name_2700 have been verified to do the same.

same_behavior for the nodes: set_program_name_302 -> set_program_name_304 and set_program_name_2678 -> set_program_name_2680

same_behavior checking these two SStates:

SA || RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: label_47,4]

SB || RDX := Value: 7, RDI := (Reg: R14 - Value: 7), RSI := Dereference: [Var: label_195,4]

Resulting values:
Value A:
E_val 7 32
Value B:
E_val 7 32
Resulting values:
Value A:
E_app (Op SUB) [E_reg R14,E_val 7 64]
Value B:
E_app (Op SUB) [E_reg R14,E_val 7 64]
Resulting values:
Value A:
E_deref (E_var "label_47" 64) 4
Value B:
E_deref (E_var "label_195" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_302 -> set_program_name_304 and set_program_name_2678 -> set_program_name_2680 have been verified to do the same.

same_behavior for the nodes: set_program_name_305 -> set_program_name_305 and set_program_name_2681 -> set_program_name_2681

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_305 -> set_program_name_305 and set_program_name_2681 -> set_program_name_2681 have been verified to do the same.

same_behavior for the nodes: set_program_name_306 -> set_program_name_307 and set_program_name_2682 -> set_program_name_2683

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_306 -> set_program_name_307 and set_program_name_2682 -> set_program_name_2683 have been verified to do the same.

same_behavior for the nodes: set_program_name_308 -> set_program_name_310 and set_program_name_2684 -> set_program_name_2686

same_behavior checking these two SStates:

SA || RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: label_46,4]

SB || RDX := Value: 3, RDI := Reg: R14, RSI := Dereference: [Var: label_200,4]

Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Resulting values:
Value A:
E_deref (E_var "label_46" 64) 4
Value B:
E_deref (E_var "label_200" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_308 -> set_program_name_310 and set_program_name_2684 -> set_program_name_2686 have been verified to do the same.

same_behavior for the nodes: set_program_name_311 -> set_program_name_311 and set_program_name_2687 -> set_program_name_2687

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_311 -> set_program_name_311 and set_program_name_2687 -> set_program_name_2687 have been verified to do the same.

same_behavior for the nodes: set_program_name_312 -> set_program_name_313 and set_program_name_2688 -> set_program_name_2689

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes set_program_name_312 -> set_program_name_313 and set_program_name_2688 -> set_program_name_2689 have been verified to do the same.

same_behavior for the nodes: .label_48 -> .label_48 and .label_196 -> .label_196

same_behavior checking these two SStates:

SA || RBX := Reg: R14

SB || RBX := Reg: R14

Resulting values:
Value A:
E_reg R14
Value B:
E_reg R14
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_48 -> .label_48 and .label_196 -> .label_196 have been verified to do the same.

same_behavior for the nodes: set_program_name_314 -> set_program_name_315 and set_program_name_2690 -> set_program_name_2691

same_behavior checking these two SStates:

SA || R14 := (Reg: R14 + Value: 3)
SA || [(Var: returned + Var: __progname),8] := (Reg: R14 + Value: 3)
SA || ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)

SB || R14 := (Reg: R14 + Value: 3)
SB || [(Var: returned + Var: __progname),8] := (Reg: R14 + Value: 3)
SB || ZF := (Reg: R14 + Value: 3), CF := (Reg: R14 + Value: 3), SF := (Reg: R14 + Value: 3), OF := (Reg: R14 + Value: 3), PF := (Reg: R14 + Value: 3)

Resulting values:
Value A:
E_app (Op ADD) [E_reg R14,E_val 3 64]
Value B:
E_app (Op ADD) [E_reg R14,E_val 3 64]
Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "returned" 64,E_var "__progname" 64]
E_app (Op ADD) [E_var "returned" 64,E_var "__progname" 64]
(v1 := v2):
E_app (Op ADD) [E_reg R14,E_val 3 64]
E_app (Op ADD) [E_reg R14,E_val 3 64]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes set_program_name_314 -> set_program_name_315 and set_program_name_2690 -> set_program_name_2691 have been verified to do the same.

Label relationship:
__progname <--> __progname
returned <--> returned
label_46 <--> label_200
label_47 <--> label_195
__progname_full <--> __progname_full,program_name
set_program_name_320 <--> set_program_name_2696,.label_197
program_name <--> __progname_full,program_name
.label_45 <--> set_program_name_2696,.label_197
 <--> 
label_44 <--> label_199
stderr <--> stderr
.label_43 <--> .label_198

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Considering text section (84/87): "close_stdout_set_ignore_EPIPE"
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Vanilla
diGraph close_stdout_set_ignore_EPIPE_Vanilla{
	close_stdout_se(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
(0,fromList [(0,RSP == Var: RSP0 && RBP == Var: RBP0)])
t_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_213]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_ignore_EPIPE for Randomized
diGraph close_stdout_set_ignore_EPIPE_Randomized{
	close_stdout_set_ignore_EPIPE_0  [label="[close_stdout_set_ignore_EPIPE,close_stdout_set_ignore_EPIPE_1597]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
[(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_ignore_EPIPE"
node 0:
[(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)
--------

same_behavior for the nodes: close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_213 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_1597

same_behavior checking these two SStates:

SA || [(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)

SB || [(Var: close_stdout_set_ignore_EPIPE + Var: ignore_EPIPE),1] := TakeBits: <7,0>(Reg: RDI)

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "close_stdout_set_ignore_EPIPE" 64,E_var "ignore_EPIPE" 64]
E_app (Op ADD) [E_var "close_stdout_set_ignore_EPIPE" 64,E_var "ignore_EPIPE" 64]
(v1 := v2):
E_app (TakeBits 7 0) [E_reg RDI]
E_app (TakeBits 7 0) [E_reg RDI]
b0: True b1: True


Mem Chk: True
Result: Success
Nodes close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_213 and close_stdout_set_ignore_EPIPE -> close_stdout_set_ignore_EPIPE_1597 have been verified to do the same.

Label relationship:
ignore_EPIPE <--> ignore_EPIPE
close_stdout_set_ignore_EPIPE <--> close_stdout_set_ignore_EPIPE

Local variable relationship:

Succesful check!
Considering text section (85/87): "close_stdout_set_file_name"
--------
.dot code for CFG of text section close_stdout_set_file_name for Vanilla
diGraph close_stdout_set_file_name_Vanilla{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_203]"]


}
--------
--------
.dot code for CFG of text section close_stdout_set_file_name for Randomized
diGraph close_stdout_set_file_name_Randomized{
	close_stdout_set_file_name_0  [label="[close_stdout_set_file_name,close_stdout_set_file_name_1948]"]


}
--------
Starting Node: 0

Edges: 

Symbolic Execution for Binary "Vanilla":
Current text section: "close_stdout_set_file_name"
node 0:
[(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI
--------

Starting Node: 0

Edges: 

Symbolic Execution for Binary "Randomized":
Current text section: "close_stdout_set_file_name"
node 0:
[(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI
--------

same_behavior for the nodes: close_stdout_set_file_name -> close_stdout_set_file_name_203 and close_stdout_set_file_name -> close_stdout_set_file_name_1948

same_behavior checking these two SStates:

SA || [(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI

SB || [(Var: close_stdout_set_file_name + Var: file_name),8] := Reg: RDI

Reg Chk: True
Else resulting values:
(a1 := a2):
E_app (Op ADD) [E_var "close_stdout_set_file_name" 64,E_var "file_name" 64]
E_app (Op ADD) [E_var "close_stdout_set_file_name" 64,E_var "file_name" 64]
(v1 := v2):
E_reg RDI
E_reg RDI
b0: True b1: True


Mem Chk: True
Result: Success
Nodes close_stdout_set_file_name -> close_stdout_set_file_name_203 and close_stdout_set_file_name -> close_stdout_set_file_name_1948 have been verified to do the same.

Label relationship:
file_name <--> file_name
close_stdout_set_file_name <--> close_stdout_set_file_name

Local variable relationship:

Succesful check!
Considering text section (86/87): "emit_ancillary_info"
--------
.dot code for CFG of text section emit_ancillary_info for Vanilla
diGraph emit_ancillary_info_Vanilla{
	emit_ancillary_info_0  [label="[emit_ancillary_info_77,emit_ancillary_info_80]"]
	emit_ancillary_info_1  [label="[emit_ancillary_info_107,emit_ancillary_info_109]"]
	emit_ancillary_info_2  [label="[emit_ancillary_info_110,emit_ancillary_info_110]"]
	emit_ancillary_info_3  [label="[emit_ancillary_info_111,emit_ancillary_info_112]"]
	emit_ancillary_info_4  [label="[emit_ancillary_info_113,emit_ancillary_info_113]"]
	emit_ancillary_info_5  [label="[emit_ancillary_info_101,emit_ancillary_info_103]"]
	emit_ancillary_info_6  [label="[emit_ancillary_info_104,emit_ancillary_info_104]"]
	emit_ancillary_info_7  [label="[emit_ancillary_info_105,emit_ancillary_info_106]"]
	emit_ancillary_info_8  [label="[.label_16,emit_ancillary_info_117]"]
	emit_ancillary_info_9  [label="[emit_ancillary_info_118,emit_ancillary_info_118]"]
	emit_ancillary_info_10  [label="[emit_ancillary_info_119,emit_ancillary_info_124]"]
	emit_ancillary_info_11  [label="[emit_ancillary_info_125,emit_ancillary_info_125]"]
	emit_ancillary_info_12  [label="[emit_ancillary_info_126,emit_ancillary_info_128]"]
	emit_ancillary_info_13  [label="[emit_ancillary_info_129,emit_ancillary_info_129]"]
	emit_ancillary_info_14  [label="[emit_ancillary_info_130,emit_ancillary_info_141]"]
	emit_ancillary_info_15  [label="[emit_ancillary_info_142,emit_ancillary_info_142]"]
	emit_ancillary_info_16  [label="[emit_ancillary_info_142_ret,emit_ancillary_info_142_ret]"]
	emit_ancillary_info_17  [label="[.label_20,emit_ancillary_info_88]"]
	emit_ancillary_info_18  [label="[emit_ancillary_info_89,emit_ancillary_info_89]"]
	emit_ancillary_info_19  [label="[emit_ancillary_info_90,emit_ancillary_info_94]"]
	emit_ancillary_info_20  [label="[emit_ancillary_info_95,emit_ancillary_info_95]"]
	emit_ancillary_info_21  [label="[emit_ancillary_info_96,emit_ancillary_info_97]"]
	emit_ancillary_info_22  [label="[emit_ancillary_info_98,emit_ancillary_info_98]"]
	emit_ancillary_info_23  [label="[emit_ancillary_info_99,emit_ancillary_info_100]"]
	emit_ancillary_info_24  [label="[emit_ancillary_info,emit_ancillary_info_71]"]
	emit_ancillary_info_25  [label="[.label_22,.label_22]"]
	emit_ancillary_info_26  [label="[emit_ancillary_info_74,emit_ancillary_info_74]"]
	emit_ancillary_info_27  [label="[emit_ancillary_info_75,emit_ancillary_info_76]"]

	emit_ancillary_info_0 -> emit_ancillary_info_25 [label="!ZF"];
	emit_ancillary_info_0 -> emit_ancillary_info_17 [label="ZF"];
	emit_ancillary_info_1 -> emit_ancillary_info_2;
	emit_ancillary_info_2 -> emit_ancillary_info_3;
	emit_ancillary_info_3 -> emit_ancillary_info_4;
	emit_ancillary_info_4 -> emit_ancillary_info_8;
	emit_ancillary_info_5 -> emit_ancillary_info_6;
	emit_ancillary_info_6 -> emit_ancillary_info_7;
	emit_ancillary_info_7 -> emit_ancillary_info_8 [label="ZF"];
	emit_ancillary_info_7 -> emit_ancillary_info_1 [label="!ZF"];
	emit_ancillary_info_8 -> emit_ancillary_info_9;
	emit_ancillary_info_9 -> emit_ancillary_info_10;
	emit_ancillary_info_10 -> emit_ancillary_info_11;
	emit_ancillary_info_11 -> emit_ancillary_info_12;
	emit_ancillary_info_12 -> emit_ancillary_info_13;
	emit_ancillary_info_13 -> emit_ancillary_info_14;
	emit_ancillary_info_14 -> emit_ancillary_info_15;
	emit_ancillary_info_15 -> emit_ancillary_info_16;

	emit_ancillary_info_17 -> emit_ancillary_info_18;
	emit_ancillary_info_18 -> emit_ancillary_info_19;
	emit_ancillary_info_19 -> emit_ancillary_info_20;
	emit_ancillary_info_20 -> emit_ancillary_info_21;
	emit_ancillary_info_21 -> emit_ancillary_info_22;
	emit_ancillary_info_22 -> emit_ancillary_info_23;
	emit_ancillary_info_23 -> emit_ancillary_info_8 [label="ZF"];
	emit_ancillary_info_23 -> emit_ancillary_info_5 [label="!ZF"];
	emit_ancillary_info_24 -> emit_ancillary_info_25;
	emit_ancillary_info_25 -> emit_ancillary_info_26;
	emit_ancillary_info_26 -> emit_ancillary_info_27;
	emit_ancillary_info_27 -> emit_ancillary_info_17 [label="ZF"];
	emit_ancillary_info_27 -> emit_ancillary_info_0 [label="!ZF"];
}
--------
--------
.dot code for CFG of text section emit_ancillary_info for Randomized
diGraph emit_ancillary_info_Randomized{
	emit_ancillary_info_0  [label="[emit_ancillary_info_3221,emit_ancillary_info_3224]"]
	emit_(24,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0),(16,RSP == Var: RSP0 && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
ancillary_info_1  [label="[emit_ancillary_info_3251,emit_ancillary_info_3253]"]
	emit_ancillary_info_2  [label="[emit_ancillary_info_3254,emit_ancillary_info_3254]"]
	emit_ancillary_info_3  [label="[emit_ancillary_info_3255,emit_ancillary_info_3256]"]
	emit_ancillary_info_4  [label="[emit_ancillary_info_3257,emit_ancillary_info_3257]"]
	emit_ancillary_info_5  [label="[emit_ancillary_info_3245,emit_ancillary_info_3247]"]
	emit_ancillary_info_6  [label="[emit_ancillary_info_3248,emit_ancillary_info_3248]"]
	emit_ancillary_info_7  [label="[emit_ancillary_info_3249,emit_ancillary_info_3250]"]
	emit_ancillary_info_8  [label="[.label_222,emit_ancillary_info_3261]"]
	emit_ancillary_info_9  [label="[emit_ancillary_info_3262,emit_ancillary_info_3262]"]
	emit_ancillary_info_10  [label="[emit_ancillary_info_3263,emit_ancillary_info_3268]"]
	emit_ancillary_info_11  [label="[emit_ancillary_info_3269,emit_ancillary_info_3269]"]
	emit_ancillary_info_12  [label="[emit_ancillary_info_3270,emit_ancillary_info_3272]"]
	emit_ancillary_info_13  [label="[emit_ancillary_info_3273,emit_ancillary_info_3273]"]
	emit_ancillary_info_14  [label="[emit_ancillary_info_3274,emit_ancillary_info_3285]"]
	emit_ancillary_info_15  [label="[emit_ancillary_info_3286,emit_ancillary_info_3286]"]
	emit_ancillary_info_16  [label="[emit_ancillary_info_3286_ret,emit_ancillary_info_3286_ret]"]
	emit_ancillary_info_17  [label="[.label_227,emit_ancillary_info_3232]"]
	emit_ancillary_info_18  [label="[emit_ancillary_info_3233,emit_ancillary_info_3233]"]
	emit_ancillary_info_19  [label="[emit_ancillary_info_3234,emit_ancillary_info_3238]"]
	emit_ancillary_info_20  [label="[emit_ancillary_info_3239,emit_ancillary_info_3239]"]
	emit_ancillary_info_21  [label="[emit_ancillary_info_3240,emit_ancillary_info_3241]"]
	emit_ancillary_info_22  [label="[emit_ancillary_info_3242,emit_ancillary_info_3242]"]
	emit_ancillary_info_23  [label="[emit_ancillary_info_3243,emit_ancillary_info_3244]"]
	emit_ancillary_info_24  [label="[emit_ancillary_info,emit_ancillary_info_3215]"]
	emit_ancillary_info_25  [label="[.label_229,.label_229]"]
	emit_ancillary_info_26  [label="[emit_ancillary_info_3218,emit_ancillary_info_3218]"]
	emit_ancillary_info_27  [label="[emit_ancillary_info_3219,emit_ancillary_info_3220]"]

	emit_ancillary_info_0 -> emit_ancillary_info_25 [label="!ZF"];
	emit_ancillary_info_0 -> emit_ancillary_info_17 [label="ZF"];
	emit_ancillary_info_1 -> emit_ancillary_info_2;
	emit_ancillary_info_2 -> emit_ancillary_info_3;
	emit_ancillary_info_3 -> emit_ancillary_info_4;
	emit_ancillary_info_4 -> emit_ancillary_info_8;
	emit_ancillary_info_5 -> emit_ancillary_info_6;
	emit_ancillary_info_6 -> emit_ancillary_info_7;
	emit_ancillary_info_7 -> emit_ancillary_info_8 [label="ZF"];
	emit_ancillary_info_7 -> emit_ancillary_info_1 [label="!ZF"];
	emit_ancillary_info_8 -> emit_ancillary_info_9;
	emit_ancillary_info_9 -> emit_ancillary_info_10;
	emit_ancillary_info_10 -> emit_ancillary_info_11;
	emit_ancillary_info_11 -> emit_ancillary_info_12;
	emit_ancillary_info_12 -> emit_ancillary_info_13;
	emit_ancillary_info_13 -> emit_ancillary_info_14;
	emit_ancillary_info_14 -> emit_ancillary_info_15;
	emit_ancillary_info_15 -> emit_ancillary_info_16;

	emit_ancillary_info_17 -> emit_ancillary_info_18;
	emit_ancillary_info_18 -> emit_ancillary_info_19;
	emit_ancillary_info_19 -> emit_ancillary_info_20;
	emit_ancillary_info_20 -> emit_ancillary_info_21;
	emit_ancillary_info_21 -> emit_ancillary_info_22;
	emit_ancillary_info_22 -> emit_ancillary_info_23;
	emit_ancillary_info_23 -> emit_ancillary_info_8 [label="ZF"];
	emit_ancillary_info_23 -> emit_ancillary_info_5 [label="!ZF"];
	emit_ancillary_info_24 -> emit_ancillary_info_25;
	emit_ancillary_info_25 -> emit_ancillary_info_26;
	emit_ancillary_info_26 -> emit_ancillary_info_27;
	emit_ancillary_info_27 -> emit_ancillary_info_17 [label="ZF"];
	emit_ancillary_info_27 -> emit_ancillary_info_0 [label="!ZF"];
}
--------
Starting Node: 24

Edges: 0 --!ZF--> 25, 0 --ZF--> 17, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 8, 5 ----> 6, 6 ----> 7, 7 --ZF--> 8, 7 --!ZF--> 1, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 23 --ZF--> 8, 23 --!ZF--> 5, 24 ----> 25, 25 ----> 26, 26 ----> 27, 27 --ZF--> 17, 27 --!ZF--> 0

Symbolic Execution for Binary "Vanilla":
Current text section: "emit_ancillary_info"
node 0:
RBX := (Reg: RBX + Value: 16), RSI := Dereference: [(Reg: RBX + Value: 16),8]
ZF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), CF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), SF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), OF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), PF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8])
node 1:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_21,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := dcgettext@()
node 3:
RDI := Reg: RAX, RSI := Dereference: [(Var: emit_ancillary_info_111 + Var: stdout),8]
node 4:
RAX := fputs_unlocked@()
node 5:
RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: label_17,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_26,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Value: 0, RCX := Dereference: [Var: label_14,4], RDX := Dereference: [Var: label_19,4], RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [Var: label_14,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := __printf_chk@()
node 12:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_24,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := (if (Reg: RBX == Reg: R14) then Dereference: [Var: label_27,4] else Dereference: [Var: label_28,4]), RDX := Reg: RBX, RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 15:
RAX := __printf_chk@()
node 16:
skip'
node 17:
RAX := Dereference: [(Reg: RBX + Value: 8),8], RBX := (if (Dereference: [(Reg: RBX + Value: 8),8] != Value: 0) then Dereference: [(Reg: RBX + Value: 8),8] else Dereference: [Var: label_14,4]), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_25,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := dcgettext@()
node 19:
RAX := Value: 0, RCX := Dereference: [Var: label_19,4], RDX := Dereference: [Var: label_18,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 20:
RAX := __printf_chk@()
node 21:
RDI := Value: 5, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := setlocale@()
node 23:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 24:
RBX := Dereference: [Var: emit_ancillary_info.infomap,4], RSI := Dereference: [Var: label_23,4]
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 25:
RDI := Dereference: [Var: label_14,4]
node 26:
RAX := strcmp@()
node 27:
ZF := TEST(Ta(24,fromList [(0,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(1,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(2,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(3,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(4,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(5,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(6,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(7,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(8,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(9,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(10,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(11,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(12,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(13,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(14,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(15,RSP == Var: RSP0 && RBP == Var: RBP0),(16,RSP == Var: RSP0 && RBP == Var: RBP0),(17,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(18,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(19,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(20,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(21,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(22,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(23,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(24,RSP == Var: RSP0 && RBP == Var: RBP0),(25,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(26,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0),(27,RSP == (Var: RSP0 - Value: 24) && RBP == Var: RBP0)])
keBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

Starting Node: 24

Edges: 0 --!ZF--> 25, 0 --ZF--> 17, 1 ----> 2, 2 ----> 3, 3 ----> 4, 4 ----> 8, 5 ----> 6, 6 ----> 7, 7 --ZF--> 8, 7 --!ZF--> 1, 8 ----> 9, 9 ----> 10, 10 ----> 11, 11 ----> 12, 12 ----> 13, 13 ----> 14, 14 ----> 15, 15 ----> 16, , 17 ----> 18, 18 ----> 19, 19 ----> 20, 20 ----> 21, 21 ----> 22, 22 ----> 23, 23 --ZF--> 8, 23 --!ZF--> 5, 24 ----> 25, 25 ----> 26, 26 ----> 27, 27 --ZF--> 17, 27 --!ZF--> 0

Symbolic Execution for Binary "Randomized":
Current text section: "emit_ancillary_info"
node 0:
RBX := (Reg: RBX + Value: 16), RSI := Dereference: [(Reg: RBX + Value: 16),8]
ZF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), CF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), SF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), OF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), PF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8])
node 1:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_221,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 2:
RAX := dcgettext@()
node 3:
RDI := Reg: RAX, RSI := Dereference: [(Var: emit_ancillary_info_3255 + Var: stdout),8]
node 4:
RAX := fputs_unlocked@()
node 5:
RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: label_226,4]
node 6:
RAX := strncmp@()
node 7:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
node 8:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_224,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 9:
RAX := dcgettext@()
node 10:
RAX := Value: 0, RCX := Dereference: [Var: label_155,4], RDX := Dereference: [Var: label_150,4], RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [Var: label_155,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 11:
RAX := __printf_chk@()
node 12:
RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_228,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 13:
RAX := dcgettext@()
node 14:
RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := (if (Reg: RBX == Reg: R14) then Dereference: [Var: label_225,4] else Dereference: [Var: label_152,4]), RDX := Reg: RBX, RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [(Var: RSP0 - Value: 8),8]
ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)
node 15:
RAX := __printf_chk@()
node 16:
skip'
node 17:
RAX := Dereference: [(Reg: RBX + Value: 8),8], RBX := (if (Dereference: [(Reg: RBX + Value: 8),8] != Value: 0) then Dereference: [(Reg: RBX + Value: 8),8] else Dereference: [Var: label_155,4]), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_223,4]
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 18:
RAX := dcgettext@()
node 19:
RAX := Value: 0, RCX := Dereference: [Var: label_150,4], RDX := Dereference: [Var: label_149,4], RDI := Value: 1, RSI := Reg: RAX
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 20:
RAX := __printf_chk@()
node 21:
RDI := Value: 5, RSI := Value: 0
ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0
node 22:
RAX := setlocale@()
node 23:
ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)
node 24:
RBX := Dereference: [Var: emit_ancillary_info.infomap,4], RSI := Dereference: [Var: label_220,4]
[(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX
node 25:
RDI := Dereference: [Var: label_155,4]
node 26:
RAX := strcmp@()
node 27:
ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))
--------

same_behavior for the nodes: emit_ancillary_info -> emit_ancillary_info_71 and emit_ancillary_info -> emit_ancillary_info_3215

same_behavior checking these two SStates:

SA || RBX := Dereference: [Var: emit_ancillary_info.infomap,4], RSI := Dereference: [Var: label_23,4]
SA || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

SB || RBX := Dereference: [Var: emit_ancillary_info.infomap,4], RSI := Dereference: [Var: label_220,4]
SB || [(Var: RSP0 - Value: 8),8] := Reg: R14, [(Var: RSP0 - Value: 16),8] := Reg: RBX, [(Var: RSP0 - Value: 24),8] := Reg: RAX

Resulting values:
Value A:
E_deref (E_var "emit_ancillary_info.infomap" 64) 4
Value B:
E_deref (E_var "emit_ancillary_info.infomap" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_23" 64) 4
Value B:
E_deref (E_var "label_220" 64) 4
Reg Chk: True
local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]
(v1 := v2):
E_reg R14
E_reg R14
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]
(v1 := v2):
E_reg RBX
E_reg RBX
b0: True b1: True
local_var_cmp called

local_var_cmp called

local_var_cmp called

local_var_cmp called

If resulting values:
(a1 := a2):
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
E_app (Op SUB) [E_var "RSP0" 64,E_val 24 64]
(v1 := v2):
E_reg RAX
E_reg RAX
b0: True b1: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info -> emit_ancillary_info_71 and emit_ancillary_info -> emit_ancillary_info_3215 have been verified to do the same.

same_behavior for the nodes: .label_22 -> .label_22 and .label_229 -> .label_229

same_behavior checking these two SStates:

SA || RDI := Dereference: [Var: label_14,4]

SB || RDI := Dereference: [Var: label_155,4]

Resulting values:
Value A:
E_deref (E_var "label_14" 64) 4
Value B:
E_deref (E_var "label_155" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_22 -> .label_22 and .label_229 -> .label_229 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_74 -> emit_ancillary_info_74 and emit_ancillary_info_3218 -> emit_ancillary_info_3218

same_behavior checking these two SStates:

SA || RAX := strcmp@()

SB || RAX := strcmp@()

Resulting values:
Value A:
E_app (F2 "strcmp" "") []
Value B:
E_app (F2 "strcmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_74 -> emit_ancillary_info_74 and emit_ancillary_info_3218 -> emit_ancillary_info_3218 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_75 -> emit_ancillary_info_76 and emit_ancillary_info_3219 -> emit_ancillary_info_3220

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_75 -> emit_ancillary_info_76 and emit_ancillary_info_3219 -> emit_ancillary_info_3220 have been verified to do the same.

same_behavior for the nodes: .label_20 -> emit_ancillary_info_88 and .label_227 -> emit_ancillary_info_3232

same_behavior checking these two SStates:

SA || RAX := Dereference: [(Reg: RBX + Value: 8),8], RBX := (if (Dereference: [(Reg: RBX + Value: 8),8] != Value: 0) then Dereference: [(Reg: RBX + Value: 8),8] else Dereference: [Var: label_14,4]), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_25,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Dereference: [(Reg: RBX + Value: 8),8], RBX := (if (Dereference: [(Reg: RBX + Value: 8),8] != Value: 0) then Dereference: [(Reg: RBX + Value: 8),8] else Dereference: [Var: label_155,4]), RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_223,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8
Resulting values:
Value A:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8,E_val 0 (-1)]) (E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8) (E_deref (E_var "label_14" 64) 4)
Value B:
E_ite (E_app (F !=) [E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8,E_val 0 (-1)]) (E_deref (E_app (Op ADD) [E_reg RBX,E_val 8 64]) 8) (E_deref (E_var "label_155" 64) 4)
Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_25" 64) 4
Value B:
E_deref (E_var "label_223" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_20 -> emit_ancillary_info_88 and .label_227 -> emit_ancillary_info_3232 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_89 -> emit_ancillary_info_89 and emit_ancillary_info_3233 -> emit_ancillary_info_3233

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_89 -> emit_ancillary_info_89 and emit_ancillary_info_3233 -> emit_ancillary_info_3233 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_90 -> emit_ancillary_info_94 and emit_ancillary_info_3234 -> emit_ancillary_info_3238

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: label_19,4], RDX := Dereference: [Var: label_18,4], RDI := Value: 1, RSI := Reg: RAX
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: label_150,4], RDX := Dereference: [Var: label_149,4], RDI := Value: 1, RSI := Reg: RAX
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_19" 64) 4
Value B:
E_deref (E_var "label_150" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_18" 64) 4
Value B:
E_deref (E_var "label_149" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_90 -> emit_ancillary_info_94 and emit_ancillary_info_3234 -> emit_ancillary_info_3238 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_95 -> emit_ancillary_info_95 and emit_ancillary_info_3239 -> emit_ancillary_info_3239

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_95 -> emit_ancillary_info_95 and emit_ancillary_info_3239 -> emit_ancillary_info_3239 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_96 -> emit_ancillary_info_97 and emit_ancillary_info_3240 -> emit_ancillary_info_3241

same_behavior checking these two SStates:

SA || RDI := Value: 5, RSI := Value: 0
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDI := Value: 5, RSI := Value: 0
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_96 -> emit_ancillary_info_97 and emit_ancillary_info_3240 -> emit_ancillary_info_3241 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_98 -> emit_ancillary_info_98 and emit_ancillary_info_3242 -> emit_ancillary_info_3242

same_behavior checking these two SStates:

SA || RAX := setlocale@()

SB || RAX := setlocale@()

Resulting values:
Value A:
E_app (F2 "setlocale" "") []
Value B:
E_app (F2 "setlocale" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_98 -> emit_ancillary_info_98 and emit_ancillary_info_3242 -> emit_ancillary_info_3242 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_99 -> emit_ancillary_info_100 and emit_ancillary_info_3243 -> emit_ancillary_info_3244

same_behavior checking these two SStates:

SA || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

SB || ZF := TEST(Reg: RAX,Reg: RAX), CF := TEST(Reg: RAX,Reg: RAX), SF := TEST(Reg: RAX,Reg: RAX), OF := TEST(Reg: RAX,Reg: RAX), PF := TEST(Reg: RAX,Reg: RAX)

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_99 -> emit_ancillary_info_100 and emit_ancillary_info_3243 -> emit_ancillary_info_3244 have been verified to do the same.

same_behavior for the nodes: .label_16 -> emit_ancillary_info_117 and .label_222 -> emit_ancillary_info_3261

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_26,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_224,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_26" 64) 4
Value B:
E_deref (E_var "label_224" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes .label_16 -> emit_ancillary_info_117 and .label_222 -> emit_ancillary_info_3261 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_118 -> emit_ancillary_info_118 and emit_ancillary_info_3262 -> emit_ancillary_info_3262

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_118 -> emit_ancillary_info_118 and emit_ancillary_info_3262 -> emit_ancillary_info_3262 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_119 -> emit_ancillary_info_124 and emit_ancillary_info_3263 -> emit_ancillary_info_3268

same_behavior checking these two SStates:

SA || RAX := Value: 0, RCX := Dereference: [Var: label_14,4], RDX := Dereference: [Var: label_19,4], RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [Var: label_14,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RAX := Value: 0, RCX := Dereference: [Var: label_155,4], RDX := Dereference: [Var: label_150,4], RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [Var: label_155,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_14" 64) 4
Value B:
E_deref (E_var "label_155" 64) 4
Resulting values:
Value A:
E_deref (E_var "label_19" 64) 4
Value B:
E_deref (E_var "label_150" 64) 4
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_14" 64) 4
Value B:
E_deref (E_var "label_155" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_119 -> emit_ancillary_info_124 and emit_ancillary_info_3263 -> emit_ancillary_info_3268 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_125 -> emit_ancillary_info_125 and emit_ancillary_info_3269 -> emit_ancillary_info_3269

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_125 -> emit_ancillary_info_125 and emit_ancillary_info_3269 -> emit_ancillary_info_3269 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_126 -> emit_ancillary_info_128 and emit_ancillary_info_3270 -> emit_ancillary_info_3272

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_24,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_228,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_24" 64) 4
Value B:
E_deref (E_var "label_228" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_126 -> emit_ancillary_info_128 and emit_ancillary_info_3270 -> emit_ancillary_info_3272 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_129 -> emit_ancillary_info_129 and emit_ancillary_info_3273 -> emit_ancillary_info_3273

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_129 -> emit_ancillary_info_129 and emit_ancillary_info_3273 -> emit_ancillary_info_3273 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_130 -> emit_ancillary_info_141 and emit_ancillary_info_3274 -> emit_ancillary_info_3285

same_behavior checking these two SStates:

SA || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := (if (Reg: RBX == Reg: R14) then Dereference: [Var: label_27,4] else Dereference: [Var: label_28,4]), RDX := Reg: RBX, RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SA || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

SB || RAX := Value: 0, RBX := Dereference: [(Var: RSP0 - Value: 16),8], RCX := (if (Reg: RBX == Reg: R14) then Dereference: [Var: label_225,4] else Dereference: [Var: label_152,4]), RDX := Reg: RBX, RDI := Value: 1, RSI := Reg: RAX, R14 := Dereference: [(Var: RSP0 - Value: 8),8]
SB || ZF := (Var: RSP0 - Value: 16), CF := (Var: RSP0 - Value: 16), SF := (Var: RSP0 - Value: 16), OF := (Var: RSP0 - Value: 16), PF := (Var: RSP0 - Value: 16)

Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 16 64]) 8
local_var_cmp called

Resulting values:
Value A:
E_ite (E_app (F ==) [E_reg RBX,E_reg R14]) (E_deref (E_var "label_27" 64) 4) (E_deref (E_var "label_28" 64) 4)
Value B:
E_ite (E_app (F ==) [E_reg RBX,E_reg R14]) (E_deref (E_var "label_225" 64) 4) (E_deref (E_var "label_152" 64) 4)
Resulting values:
Value A:
E_reg RBX
Value B:
E_reg RBX
Resulting values:
Value A:
E_val 1 32
Value B:
E_val 1 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
Value B:
E_deref (E_app (Op SUB) [E_var "RSP0" 64,E_val 8 64]) 8
local_var_cmp called

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_130 -> emit_ancillary_info_141 and emit_ancillary_info_3274 -> emit_ancillary_info_3285 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_142 -> emit_ancillary_info_142 and emit_ancillary_info_3286 -> emit_ancillary_info_3286

same_behavior checking these two SStates:

SA || RAX := __printf_chk@()

SB || RAX := __printf_chk@()

Resulting values:
Value A:
E_app (F2 "__printf_chk" "") []
Value B:
E_app (F2 "__printf_chk" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_142 -> emit_ancillary_info_142 and emit_ancillary_info_3286 -> emit_ancillary_info_3286 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_142_ret -> emit_ancillary_info_142_ret and emit_ancillary_info_3286_ret -> emit_ancillary_info_3286_ret

same_behavior checking these two SStates:

SA || skip'

SB || skip'

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_142_ret -> emit_ancillary_info_142_ret and emit_ancillary_info_3286_ret -> emit_ancillary_info_3286_ret have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_101 -> emit_ancillary_info_103 and emit_ancillary_info_3245 -> emit_ancillary_info_3247

same_behavior checking these two SStates:

SA || RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: label_17,4]

SB || RDX := Value: 3, RDI := Reg: RAX, RSI := Dereference: [Var: label_226,4]

Resulting values:
Value A:
E_val 3 32
Value B:
E_val 3 32
Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_var "label_17" 64) 4
Value B:
E_deref (E_var "label_226" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_101 -> emit_ancillary_info_103 and emit_ancillary_info_3245 -> emit_ancillary_info_3247 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_104 -> emit_ancillary_info_104 and emit_ancillary_info_3248 -> emit_ancillary_info_3248

same_behavior checking these two SStates:

SA || RAX := strncmp@()

SB || RAX := strncmp@()

Resulting values:
Value A:
E_app (F2 "strncmp" "") []
Value B:
E_app (F2 "strncmp" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_104 -> emit_ancillary_info_104 and emit_ancillary_info_3248 -> emit_ancillary_info_3248 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_105 -> emit_ancillary_info_106 and emit_ancillary_info_3249 -> emit_ancillary_info_3250

same_behavior checking these two SStates:

SA || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

SB || ZF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), CF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), SF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), OF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX)), PF := TEST(TakeBits: <31,0>(Reg: RAX),TakeBits: <31,0>(Reg: RAX))

Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_105 -> emit_ancillary_info_106 and emit_ancillary_info_3249 -> emit_ancillary_info_3250 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_107 -> emit_ancillary_info_109 and emit_ancillary_info_3251 -> emit_ancillary_info_3253

same_behavior checking these two SStates:

SA || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_21,4]
SA || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

SB || RDX := Value: 5, RDI := Value: 0, RSI := Dereference: [Var: label_221,4]
SB || ZF := Value: 0, CF := Value: 0, SF := Value: 0, OF := Value: 0, PF := Value: 0

Resulting values:
Value A:
E_val 5 32
Value B:
E_val 5 32
Resulting values:
Value A:
E_val 0 32
Value B:
E_val 0 32
Resulting values:
Value A:
E_deref (E_var "label_21" 64) 4
Value B:
E_deref (E_var "label_221" 64) 4
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_107 -> emit_ancillary_info_109 and emit_ancillary_info_3251 -> emit_ancillary_info_3253 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_110 -> emit_ancillary_info_110 and emit_ancillary_info_3254 -> emit_ancillary_info_3254

same_behavior checking these two SStates:

SA || RAX := dcgettext@()

SB || RAX := dcgettext@()

Resulting values:
Value A:
E_app (F2 "dcgettext" "") []
Value B:
E_app (F2 "dcgettext" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_110 -> emit_ancillary_info_110 and emit_ancillary_info_3254 -> emit_ancillary_info_3254 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_111 -> emit_ancillary_info_112 and emit_ancillary_info_3255 -> emit_ancillary_info_3256

same_behavior checking these two SStates:

SA || RDI := Reg: RAX, RSI := Dereference: [(Var: emit_ancillary_info_111 + Var: stdout),8]

SB || RDI := Reg: RAX, RSI := Dereference: [(Var: emit_ancillary_info_3255 + Var: stdout),8]

Resulting values:
Value A:
E_reg RAX
Value B:
E_reg RAX
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_var "emit_ancillary_info_111" 64,E_var "stdout" 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_var "emit_ancillary_info_3255" 64,E_var "stdout" 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_111 -> emit_ancillary_info_112 and emit_ancillary_info_3255 -> emit_ancillary_info_3256 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_113 -> emit_ancillary_info_113 and emit_ancillary_info_3257 -> emit_ancillary_info_3257

same_behavior checking these two SStates:

SA || RAX := fputs_unlocked@()

SB || RAX := fputs_unlocked@()

Resulting values:
Value A:
E_app (F2 "fputs_unlocked" "") []
Value B:
E_app (F2 "fputs_unlocked" "") []
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_113 -> emit_ancillary_info_113 and emit_ancillary_info_3257 -> emit_ancillary_info_3257 have been verified to do the same.

same_behavior for the nodes: emit_ancillary_info_77 -> emit_ancillary_info_80 and emit_ancillary_info_3221 -> emit_ancillary_info_3224

same_behavior checking these two SStates:

SA || RBX := (Reg: RBX + Value: 16), RSI := Dereference: [(Reg: RBX + Value: 16),8]
SA || ZF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), CF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), SF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), OF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), PF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8])

SB || RBX := (Reg: RBX + Value: 16), RSI := Dereference: [(Reg: RBX + Value: 16),8]
SB || ZF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), CF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), SF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), OF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8]), PF := TEST(Dereference: [(Reg: RBX + Value: 16),8],Dereference: [(Reg: RBX + Value: 16),8])

Resulting values:
Value A:
E_app (Op ADD) [E_reg RBX,E_val 16 64]
Value B:
E_app (Op ADD) [E_reg RBX,E_val 16 64]
Resulting values:
Value A:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 16 64]) 8
Value B:
E_deref (E_app (Op ADD) [E_reg RBX,E_val 16 64]) 8
Reg Chk: True
Mem Chk: True
Result: Success
Nodes emit_ancillary_info_77 -> emit_ancillary_info_80 and emit_ancillary_info_3221 -> emit_ancillary_info_3224 have been verified to do the same.

Label relationship:
stdout <--> stdout
emit_ancillary_info_111 <--> emit_ancillary_info_3255
label_21 <--> label_221
label_17 <--> label_226
label_28 <--> label_152
label_27 <--> label_225
label_24 <--> label_228
label_26 <--> label_224
label_18 <--> label_149
label_19 <--> label_150
label_25 <--> label_223
 <--> 
label_14 <--> label_155
label_23 <--> label_220
emit_ancillary_info.infomap <--> emit_ancillary_info.infomap

Local variable relationship:
(Var: RSP0 - Value: 24) <--> (Var: RSP0 - Value: 24)
(Var: RSP0 - Value: 16) <--> (Var: RSP0 - Value: 16)
(Var: RSP0 - Value: 8) <--> (Var: RSP0 - Value: 8)

Succesful check!
Relevant vanilla text sections: 91
Success: 87 text sections
Failure during CFG generation (indirect branching): 4 text sections
Failure during symbolic excution (indirect calls): 0 text sections
Failure caused by alloca: 0 text sections
